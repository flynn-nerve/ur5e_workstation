/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2019-10-23 13:35:19.886972
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91,x92,x93;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[5]);
x8=IKsin(j[4]);
x9=IKcos(j[5]);
x10=IKsin(j[0]);
x11=IKcos(j[4]);
x12=((6.99999942285007e-5)*x9);
x13=((0.00039999576728104)*x7);
x14=((0.99999991820169)*x9);
x15=((0.000399999967020004)*x7);
x16=((0.1)*x4);
x17=((0.00033912)*x6);
x18=((5.99719901496006e-5)*x8);
x19=((0.999999995750001)*x8);
x20=((0.99999991820169)*x7);
x21=((0.00033912)*x5);
x22=((0.99999991755001)*x9);
x23=((7.00239884985599e-5)*x8);
x24=((5.99999947980007e-5)*x9);
x25=((0.1)*x2);
x26=((0.00039999576728104)*x9);
x27=((1.0)*x2);
x28=((1.0)*x4);
x29=((0.000399999967020004)*x9);
x30=((0.99999991755001)*x7);
x31=((6.99999942285007e-5)*x7);
x32=((5.99999947980007e-5)*x7);
x33=((0.392)*x2);
x34=(x11*x7);
x35=((-1.0)*x11);
x36=(x1*x10);
x37=(x10*x8);
x38=(x0*x1);
x39=(x0*x11);
x40=(x10*x11);
x41=(x3*x4);
x42=(x0*x8);
x43=(x1*x4);
x44=(x10*x3);
x45=((-0.00033912)*x11);
x46=(x1*x2);
x47=(x0*x3);
x48=((-5.457e-5)*x5);
x49=(x2*x3);
x50=((-1.0)*x6);
x51=((1.0)*x37);
x52=(x28*x47);
x53=(x28*x44);
x54=(x49+x43);
x55=((((-1.0)*x1*x27))+((x28*x3)));
x56=((((-1.0)*x1*x28))+(((-1.0)*x27*x3)));
x57=(x54*x6);
x58=(x5*x55);
x59=(x55*x6);
x60=(((x2*x38))+(((-1.0)*x52)));
x61=(((x2*x36))+(((-1.0)*x53)));
x62=((((-1.0)*x27*x38))+x52);
x63=((((-1.0)*x27*x36))+x53);
x64=(((x27*x47))+((x28*x38)));
x65=(((x27*x44))+((x28*x36)));
x66=(x6*x60);
x67=(x6*x61);
x68=(x5*x62);
x69=(x5*x65);
x70=(x6*x65);
x71=(x5*x64);
x72=(x6*x64);
x73=(x58+x57);
x74=(x59+((x5*x56)));
x75=(x11*x73);
x76=(((x50*x54))+(((-1.0)*x58)));
x77=(x74*x9);
x78=(x34*x76);
x79=(x71+x66);
x80=(x67+x69);
x81=(x72+x68);
x82=(((x5*x63))+x70);
x83=((((-1.0)*x71))+(((-1.0)*x66)));
x84=(x11*x79);
x85=(x11*x80);
x86=(((x50*x61))+(((-1.0)*x69)));
x87=(x8*x86);
x88=(x42+x85);
x89=((((-1.0)*x37))+x84);
x90=(x51+((x35*x79)));
x91=(x88*x9);
x92=((((-1.0)*x42))+((x35*x80)));
x93=(x7*x92);
IkReal x94=((1.0)*x81);
eerot[0]=((((-7.00239884985599e-5)*x40))+(((-1.0)*x22*x89))+(((-1.0)*x30*x94))+(((-1.0)*x13*((x51+(((-1.0)*x84))))))+(((-1.0)*x26*x94))+((x23*((((x50*x60))+(((-1.0)*x71)))))));
eerot[1]=((((-1.0)*x14*x81))+((x29*x89))+((x15*x81))+(((-1.0)*x20*x90))+((x18*x83))+(((-5.99719901496006e-5)*x40)));
eerot[2]=(((x24*x81))+((x12*x89))+((x19*x83))+((x32*x90))+((x31*x81))+(((-0.999999995750001)*x40)));
IkReal x95=((1.0)*x16);
eetrans[0]=(((x8*(((((-0.29744338339945)*x71))+(((-0.29744338339945)*x66))))))+(((0.425)*x47))+(((-0.29744338339945)*x40))+((x7*((((x48*x62))+(((-5.457e-5)*x72))))))+((x9*((((x17*x64))+((x21*x62))))))+((x5*(((((-1.0)*x47*x95))+((x25*x38))))))+((x7*((((x45*x79))+(((0.00033912)*x37))))))+((x9*(((((-5.457e-5)*x84))+(((5.457e-5)*x37))))))+((x6*(((((-1.0)*x38*x95))+(((-1.0)*x25*x47))))))+(((0.392)*x0*x41))+(((-1.0)*x33*x38))+(((-0.134)*x10)));
IkReal x96=((1.0)*x82);
eerot[3]=((((-1.0)*x13*x92))+(((-1.0)*x22*x88))+(((-1.0)*x30*x96))+((x23*x86))+(((-1.0)*x26*x96))+(((7.00239884985599e-5)*x39)));
eerot[4]=((((-1.0)*x14*x82))+((x29*x88))+((x15*x82))+(((-1.0)*x20*x92))+((x18*x86))+(((5.99719901496006e-5)*x39)));
eerot[5]=(((x24*x82))+((x12*x88))+(((0.999999995750001)*x39))+((x19*x86))+((x32*x92))+((x31*x82)));
IkReal x97=((1.0)*x36);
IkReal x98=((1.0)*x44);
eetrans[1]=(((x6*(((((-1.0)*x25*x98))+(((-1.0)*x16*x97))))))+(((0.425)*x44))+((x9*(((((-5.457e-5)*x85))+(((-5.457e-5)*x42))))))+((x9*((((x17*x65))+((x21*x63))))))+((x8*(((((-0.29744338339945)*x69))+(((-0.29744338339945)*x67))))))+(((0.392)*x10*x41))+((x7*(((((-0.00033912)*x42))+((x45*x80))))))+(((0.29744338339945)*x39))+(((0.134)*x0))+(((-1.0)*x33*x97))+((x7*((((x48*x63))+(((-5.457e-5)*x70))))))+((x5*((((x25*x36))+(((-1.0)*x16*x98)))))));
IkReal x99=((1.0)*x74);
eerot[6]=((((-1.0)*x11*x13*(((((-1.0)*x57))+(((-1.0)*x58))))))+(((-1.0)*x30*x99))+(((-1.0)*x22*x75))+((x8*(((((-7.00239884985599e-5)*x57))+(((-7.00239884985599e-5)*x58))))))+(((-1.0)*x26*x99)));
eerot[7]=(((x8*(((((-5.99719901496006e-5)*x57))+(((-5.99719901496006e-5)*x58))))))+(((-1.0)*x11*x20*x76))+((x29*x75))+((x15*x74))+(((-1.0)*x14*x74)));
eerot[8]=(((x12*x75))+((x24*x74))+((x11*x32*x76))+((x31*x74))+((x8*(((((-0.999999995750001)*x57))+(((-0.999999995750001)*x58)))))));
IkReal x100=((1.0)*x3);
eetrans[2]=((0.163)+((x5*((((x1*x16))+((x25*x3))))))+(((-1.0)*x100*x33))+((x11*x9*(((((-5.457e-5)*x57))+((x48*x55))))))+((x6*(((((-1.0)*x100*x16))+((x1*x25))))))+((x7*(((((-5.457e-5)*x59))+((x48*x56))))))+((x8*(((((-0.29744338339945)*x58))+(((-0.29744338339945)*x57))))))+(((-0.425)*x1))+(((-0.392)*x43))+((x9*((((x17*x55))+((x21*x56))))))+((x34*(((((-0.00033912)*x57))+(((-0.00033912)*x58)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((0.000399999967020004)*r01))+(((6.99999942285007e-5)*r02))+(((-0.99999991755001)*r00)));
new_r01=((((5.99999947980007e-5)*r02))+(((-0.99999991820169)*r01))+(((-0.00039999576728104)*r00)));
new_r02=((((7.00239884985599e-5)*r00))+(((5.99719901496006e-5)*r01))+(((0.999999995750001)*r02)));
new_px=((((-0.297443398662614)*r02))+(((-7.52625209942395e-5)*r00))+(((0.000321303528599462)*r01))+px);
new_r10=((((0.000399999967020004)*r11))+(((6.99999942285007e-5)*r12))+(((-0.99999991755001)*r10)));
new_r11=((((5.99999947980007e-5)*r12))+(((-0.99999991820169)*r11))+(((-0.00039999576728104)*r10)));
new_r12=((((7.00239884985599e-5)*r10))+(((5.99719901496006e-5)*r11))+(((0.999999995750001)*r12)));
new_py=((((-0.297443398662614)*r12))+(((0.000321303528599462)*r11))+(((-7.52625209942395e-5)*r10))+py);
new_r20=((((0.000399999967020004)*r21))+(((6.99999942285007e-5)*r22))+(((-0.99999991755001)*r20)));
new_r21=((((-0.00039999576728104)*r20))+(((-0.99999991820169)*r21))+(((5.99999947980007e-5)*r22)));
new_r22=((((7.00239884985599e-5)*r20))+(((0.999999995750001)*r22))+(((5.99719901496006e-5)*r21)));
new_pz=((-0.163)+(((-0.297443398662614)*r22))+pz+(((-7.52625209942395e-5)*r20))+(((0.000321303528599462)*r21)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x101=((1.0)*px);
IkReal x102=((1.0)*pz);
IkReal x103=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x103))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x102)));
rxp0_2=((((-1.0)*r10*x101))+((py*r00)));
rxp1_0=((((-1.0)*r21*x103))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x102)));
rxp1_2=((((-1.0)*r11*x101))+((py*r01)));
rxp2_0=((((-1.0)*r22*x103))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x102)));
rxp2_2=((((-1.0)*r12*x101))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x104=((0.2)*npx);
IkReal x105=((0.2)*npy);
IkReal x106=((0.1)*r22);
IkReal x107=((0.1)*r21);
IkReal x108=((-0.1)*r20);
IkReal x109=((-1.0)*r20);
IkReal x110=((-1.0)*rxp0_2);
IkReal x111=((-0.1)*r21);
IkReal x112=((-1.0)*r21);
IkReal x113=((-1.0)*rxp1_2);
IkReal x114=((-1.0)*npx);
IkReal x115=((-1.0)*r22);
IkReal x116=((-1.0)*npz);
matrixinvcoeffs[0]=x108;
matrixinvcoeffs[1]=x104;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x109;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x110;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x108;
matrixinvcoeffs[19]=x104;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x109;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x110;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x111;
matrixinvcoeffs[33]=x105;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x112;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x113;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x111;
matrixinvcoeffs[51]=x105;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x112;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x113;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x115;
matrixinvcoeffs[76]=x106;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x116;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x106;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x113;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x111;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x113;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x107;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x109;
matrixinvcoeffs[133]=x114;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.1)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x109;
matrixinvcoeffs[151]=x114;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x108;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x115;
matrixinvcoeffs[165]=x116;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x106;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x115;
matrixinvcoeffs[183]=x116;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.1)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x112;
matrixinvcoeffs[204]=x107;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x113;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x107;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x114;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x108;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x109;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x108;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x110;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x117=pz*pz;
IkReal x118=pp*pp;
IkReal x119=((0.2)*pz);
IkReal x120=(pp*r21);
IkReal x121=(gclwh13_10*rxp1_2);
IkReal x122=((0.00134)*r22);
IkReal x123=(npx*pz);
IkReal x124=((0.001)*r21);
IkReal x125=(pp*r20);
IkReal x126=(npy*pz);
IkReal x127=((4.0)*gclwh12_11);
IkReal x128=(gclwh10_11*r22);
IkReal x129=((0.00784)*r21);
IkReal x130=(pp*r22);
IkReal x131=(gclwh15_9*r20);
IkReal x132=(gclwh15_1*r20);
IkReal x133=(gclwh12_8*r21);
IkReal x134=((0.01)*r22);
IkReal x135=((0.2)*rxp2_2);
IkReal x136=(gclwh4_3*pp);
IkReal x137=(npz*pz);
IkReal x138=((2.0)*gclwh11_10);
IkReal x139=((0.01)*r21);
IkReal x140=(gclwh2_0*pz);
IkReal x141=(gclwh14_2*pz);
IkReal x142=(gclwh14_11*rxp0_2);
IkReal x143=((0.4)*rxp2_2);
IkReal x144=((0.00784)*r22);
IkReal x145=((1.0)*pz);
IkReal x146=((2.0)*gclwh4_11);
IkReal x147=((0.02)*r21);
IkReal x148=((0.1568)*rxp0_2);
IkReal x149=((0.0066)*rxp1_2);
IkReal x150=(gclwh8_2*r20);
IkReal x151=((0.0066)*rxp2_2);
IkReal x152=((0.01634)*r20);
IkReal x153=((9.045e-5)*r20);
IkReal x154=(gclwh14_8*r20);
IkReal x155=((0.02)*r22);
IkReal x156=((2.0)*gclwh9_10);
IkReal x157=(gclwh12_3*rxp1_2);
IkReal x158=(gclwh13_1*r21);
IkReal x159=((4.0)*gclwh14_11);
IkReal x160=((0.00268)*r20);
IkReal x161=(gclwh10_12*r22);
IkReal x162=((2.0)*gclwh13_10);
IkReal x163=((0.268)*gclwh14_14);
IkReal x164=(gclwh14_3*rxp0_2);
IkReal x165=((0.02)*rxp0_2);
IkReal x166=(gclwh12_14*r21);
IkReal x167=((2.0)*pp);
IkReal x168=((4.0)*gclwh11_10);
IkReal x169=(gclwh8_11*r20);
IkReal x170=((0.0132)*rxp2_2);
IkReal x171=((0.0132)*rxp0_2);
IkReal x172=((0.00817)*r22);
IkReal x173=(gclwh5_1*rxp2_2);
IkReal x174=((0.0268)*rxp2_2);
IkReal x175=(gclwh9_10*r20);
IkReal x176=(gclwh4_2*pz);
IkReal x177=(gclwh14_11*r20);
IkReal x178=((0.2)*rxp1_2);
IkReal x179=(gclwh5_0*rxp2_2);
IkReal x180=((0.1634)*rxp1_2);
IkReal x181=(gclwh13_15*r21);
IkReal x182=((4.0)*gclwh8_11);
IkReal x183=((0.00134)*r20);
IkReal x184=(gclwh3_3*r21);
IkReal x185=(gclwh5_1*r22);
IkReal x186=((0.0268)*rxp1_2);
IkReal x187=(gclwh7_13*r21);
IkReal x188=((2.0)*gclwh7_10);
IkReal x189=((0.0066)*rxp0_2);
IkReal x190=(gclwh13_9*rxp1_2);
IkReal x191=((0.00033)*r21);
IkReal x192=(gclwh2_1*r21);
IkReal x193=(gclwh7_0*pz);
IkReal x194=((0.536)*gclwh14_14);
IkReal x195=(gclwh6_11*rxp1_2);
IkReal x196=((0.17)*rxp2_2);
IkReal x197=((0.0536)*rxp1_2);
IkReal x198=(gclwh10_12*rxp2_2);
IkReal x199=((0.3268)*rxp1_2);
IkReal x200=((4.0)*gclwh9_10);
IkReal x201=((0.8)*rxp2_2);
IkReal x202=((0.04)*r22);
IkReal x203=((0.01634)*r21);
IkReal x204=((0.01)*r20);
IkReal x205=((4.0)*gclwh7_10);
IkReal x206=((0.1568)*rxp1_2);
IkReal x207=((0.2)*rxp0_2);
IkReal x208=((4.0)*gclwh4_11);
IkReal x209=((0.04)*r21);
IkReal x210=(gclwh10_2*r22);
IkReal x211=((0.2)*pp);
IkReal x212=(gclwh13_9*r21);
IkReal x213=((0.17)*rxp0_2);
IkReal x214=((0.268)*gclwh4_14);
IkReal x215=(gclwh12_8*rxp1_2);
IkReal x216=((0.8)*rxp0_2);
IkReal x217=((2.0)*gclwh6_11);
IkReal x218=(gclwh6_12*r21);
IkReal x219=(gclwh1_3*r20);
IkReal x220=((0.02)*rxp2_2);
IkReal x221=((0.0268)*rxp0_2);
IkReal x222=(gclwh8_2*rxp0_2);
IkReal x223=((0.1634)*rxp0_2);
IkReal x224=((2.0)*gclwh12_11);
IkReal x225=(gclwh10_2*rxp2_2);
IkReal x226=((0.1072)*rxp1_2);
IkReal x227=((2.0)*gclwh5_10);
IkReal x228=(gclwh11_0*r22);
IkReal x229=((0.268)*gclwh13_15);
IkReal x230=(gclwh10_2*pz);
IkReal x231=((0.268)*gclwh15_15);
IkReal x232=(gclwh9_0*pz);
IkReal x233=(gclwh4_3*r22);
IkReal x234=((2.0)*gclwh8_11);
IkReal x235=((2.0)*gclwh15_10);
IkReal x236=((0.268)*gclwh5_15);
IkReal x237=(gclwh4_14*rxp2_2);
IkReal x238=(gclwh4_8*r22);
IkReal x239=((0.00268)*r22);
IkReal x240=(gclwh4_3*rxp2_2);
IkReal x241=(gclwh12_3*r21);
IkReal x242=(gclwh9_0*r20);
IkReal x243=((0.00817)*r20);
IkReal x244=((0.3268)*rxp0_2);
IkReal x245=((4.0)*gclwh6_11);
IkReal x246=(gclwh12_11*rxp1_2);
IkReal x247=(gclwh11_0*pz);
IkReal x248=(gclwh5_9*r22);
IkReal x249=(gclwh5_0*pz);
IkReal x250=((0.4)*rxp0_2);
IkReal x251=((0.0132)*rxp1_2);
IkReal x252=((0.00784)*r20);
IkReal x253=((0.1568)*rxp2_2);
IkReal x254=((0.1634)*rxp2_2);
IkReal x255=((0.00675445)*r20);
IkReal x256=((0.536)*gclwh12_14);
IkReal x257=(gclwh15_1*rxp0_2);
IkReal x258=(gclwh13_0*pz);
IkReal x259=(gclwh9_13*r20);
IkReal x260=(gclwh11_13*r22);
IkReal x261=((0.1072)*rxp0_2);
IkReal x262=((0.00066)*r21);
IkReal x263=((0.536)*gclwh4_14);
IkReal x264=(gclwh5_15*rxp2_2);
IkReal x265=((0.00134)*r21);
IkReal x266=(gclwh8_12*r20);
IkReal x267=(gclwh13_1*rxp1_2);
IkReal x268=(gclwh6_2*pz);
IkReal x269=((2.0)*gclwh14_11);
IkReal x270=((0.0536)*rxp0_2);
IkReal x271=((0.268)*gclwh12_14);
IkReal x272=(gclwh12_2*pz);
IkReal x273=(gclwh14_14*x221);
IkReal x274=(gclwh6_5*x265);
IkReal x275=(gclwh4_14*x174);
IkReal x276=(gclwh10_5*x122);
IkReal x277=(gclwh8_5*x183);
IkReal x278=(gclwh12_14*x186);
IkReal x279=((0.02)*x215);
IkReal x280=(gclwh12_11*x178);
IkReal x281=(gclwh4_8*x220);
IkReal x282=(gclwh4_11*x135);
IkReal x283=(gclwh6_11*x139);
IkReal x284=((0.01)*x169);
IkReal x285=((0.01)*x128);
IkReal x286=((0.2)*x142);
IkReal x287=(gclwh14_8*x165);
IkReal x288=((0.02)*x190);
IkReal x289=(gclwh11_10*x134);
IkReal x290=(gclwh15_10*x207);
IkReal x291=((0.01)*x175);
IkReal x292=(gclwh5_9*x220);
IkReal x293=(gclwh7_10*x139);
IkReal x294=(gclwh5_10*x135);
IkReal x295=(gclwh15_9*x165);
IkReal x296=((0.2)*x121);
IkReal x297=(gclwh15_15*x221);
IkReal x298=(gclwh7_7*x265);
IkReal x299=(gclwh13_15*x186);
IkReal x300=(gclwh9_7*x183);
IkReal x301=(gclwh11_7*x122);
IkReal x302=(gclwh5_15*x174);
IkReal x303=(gclwh8_5*x221);
IkReal x304=(gclwh10_5*x174);
IkReal x305=(gclwh14_14*x183);
IkReal x306=((0.00134)*x166);
IkReal x307=(gclwh4_14*x122);
IkReal x308=(gclwh6_5*x186);
IkReal x309=(gclwh12_11*x139);
IkReal x310=(gclwh10_11*x135);
IkReal x311=((0.001)*x238);
IkReal x312=(gclwh4_11*x134);
IkReal x313=(gclwh8_11*x207);
IkReal x314=(gclwh12_8*x124);
IkReal x315=((0.001)*x154);
IkReal x316=(gclwh6_11*x178);
IkReal x317=((0.01)*x177);
IkReal x318=((0.001)*x131);
IkReal x319=(gclwh11_10*x135);
IkReal x320=(gclwh13_10*x139);
IkReal x321=(gclwh5_10*x134);
IkReal x322=(gclwh9_10*x207);
IkReal x323=((0.001)*x248);
IkReal x324=(gclwh13_9*x124);
IkReal x325=(gclwh7_10*x178);
IkReal x326=(gclwh15_10*x204);
IkReal x327=(gclwh5_15*x122);
IkReal x328=((0.00134)*x181);
IkReal x329=(gclwh7_7*x186);
IkReal x330=(gclwh11_7*x174);
IkReal x331=(gclwh9_7*x221);
IkReal x332=(gclwh15_15*x183);
IkReal x333=((0.4)*x142);
IkReal x334=((0.02)*x128);
IkReal x335=((0.02)*x169);
IkReal x336=(gclwh14_14*x270);
IkReal x337=(gclwh12_14*x197);
IkReal x338=((0.0536)*x237);
IkReal x339=(gclwh4_11*x143);
IkReal x340=(gclwh6_11*x147);
IkReal x341=((0.4)*x246);
IkReal x342=(gclwh13_15*x197);
IkReal x343=((0.0536)*x264);
IkReal x344=(gclwh15_15*x270);
IkReal x345=(gclwh11_10*x155);
IkReal x346=(gclwh15_10*x250);
IkReal x347=((0.02)*x175);
IkReal x348=((0.4)*x121);
IkReal x349=(gclwh7_10*x147);
IkReal x350=(gclwh5_10*x143);
IkReal x351=((0.02)*x177);
IkReal x352=((0.4)*x195);
IkReal x353=(gclwh14_14*x160);
IkReal x354=((0.00268)*x166);
IkReal x355=(gclwh4_14*x239);
IkReal x356=(gclwh4_11*x155);
IkReal x357=(gclwh12_11*x147);
IkReal x358=(gclwh10_11*x143);
IkReal x359=(gclwh8_11*x250);
IkReal x360=(gclwh15_9*x123);
IkReal x361=((2.0)*x117);
IkReal x362=((1.0)*x118);
IkReal x363=((0.134)*gclwh6_5*x120);
IkReal x364=((0.268)*gclwh10_5*x137);
IkReal x365=((0.268)*gclwh8_5*x123);
IkReal x366=((0.268)*gclwh6_5*x126);
IkReal x367=((0.134)*gclwh8_5*x125);
IkReal x368=((0.134)*gclwh10_5*x130);
IkReal x369=(gclwh14_2*rxp0_2*x119);
IkReal x370=((2.0)*gclwh10_11*x137);
IkReal x371=(x123*x234);
IkReal x372=(x130*x230);
IkReal x373=(x134*x230);
IkReal x374=(x157*x211);
IkReal x375=(gclwh8_2*pz*x125);
IkReal x376=(x135*x136);
IkReal x377=((0.01)*pz*x150);
IkReal x378=(gclwh12_2*rxp1_2*x119);
IkReal x379=(x164*x211);
IkReal x380=(gclwh4_2*rxp2_2*x119);
IkReal x381=(x126*x217);
IkReal x382=(x139*x268);
IkReal x383=(gclwh13_1*pp*x178);
IkReal x384=(x130*x247);
IkReal x385=(gclwh5_1*pp*x135);
IkReal x386=(x126*x188);
IkReal x387=(gclwh15_0*rxp0_2*x119);
IkReal x388=(x134*x247);
IkReal x389=(x204*x232);
IkReal x390=(x125*x232);
IkReal x391=(gclwh15_1*pp*x207);
IkReal x392=(x137*x138);
IkReal x393=(x123*x156);
IkReal x394=(x119*x179);
IkReal x395=(gclwh13_0*rxp1_2*x119);
IkReal x396=(x139*x193);
IkReal x397=((0.268)*gclwh9_7*x123);
IkReal x398=((0.134)*gclwh7_7*x120);
IkReal x399=((0.268)*gclwh11_7*x137);
IkReal x400=((0.134)*gclwh11_7*x130);
IkReal x401=((0.268)*gclwh7_7*x126);
IkReal x402=((0.134)*gclwh9_7*x125);
IkReal x403=(x126*x271);
IkReal x404=((0.134)*gclwh14_14*x125);
IkReal x405=(x137*x214);
IkReal x406=((0.134)*gclwh12_14*x120);
IkReal x407=(x123*x163);
IkReal x408=((0.134)*gclwh4_14*x130);
IkReal x409=(x125*x141);
IkReal x410=(x141*x204);
IkReal x411=((0.1)*gclwh4_8*x130);
IkReal x412=(x118*x241);
IkReal x413=(gclwh1_2*pz*x204);
IkReal x414=(gclwh3_2*pz*x139);
IkReal x415=((0.1)*gclwh12_8*x120);
IkReal x416=(x118*x184);
IkReal x417=(x118*x219);
IkReal x418=(gclwh6_2*rxp1_2*x119);
IkReal x419=(x123*x269);
IkReal x420=(x118*x233);
IkReal x421=(gclwh14_8*npx*x119);
IkReal x422=(x137*x146);
IkReal x423=(gclwh4_8*npz*x119);
IkReal x424=(gclwh12_8*npy*x119);
IkReal x425=(x119*x225);
IkReal x426=(x134*x176);
IkReal x427=(x126*x224);
IkReal x428=(x119*x222);
IkReal x429=((0.1)*gclwh14_8*x125);
IkReal x430=(x139*x272);
IkReal x431=(x139*x258);
IkReal x432=(gclwh0_0*pz*x204);
IkReal x433=(gclwh11_0*rxp2_2*x119);
IkReal x434=(x139*x140);
IkReal x435=(gclwh13_9*npy*x119);
IkReal x436=(x118*x132);
IkReal x437=(x130*x249);
IkReal x438=(x134*x249);
IkReal x439=(x120*x258);
IkReal x440=(gclwh9_0*rxp0_2*x119);
IkReal x441=((0.1)*gclwh15_9*x125);
IkReal x442=(x123*x235);
IkReal x443=(x118*x192);
IkReal x444=(gclwh5_9*npz*x119);
IkReal x445=(gclwh0_1*r20*x118);
IkReal x446=(gclwh7_0*rxp1_2*x119);
IkReal x447=((0.1)*gclwh5_9*x130);
IkReal x448=(gclwh15_9*npx*x119);
IkReal x449=((0.1)*gclwh13_9*x120);
IkReal x450=(x137*x227);
IkReal x451=(gclwh15_0*pz*x204);
IkReal x452=(x126*x162);
IkReal x453=((0.134)*gclwh13_15*x120);
IkReal x454=(x123*x231);
IkReal x455=((0.134)*gclwh5_15*x130);
IkReal x456=(x137*x236);
IkReal x457=((0.134)*gclwh15_15*x125);
IkReal x458=(x126*x229);
IkReal x459=(x125*x234);
IkReal x460=(x128*x167);
IkReal x461=(x126*x245);
IkReal x462=(x123*x182);
IkReal x463=(x120*x217);
IkReal x464=((4.0)*gclwh10_11*x137);
IkReal x465=(x130*x138);
IkReal x466=(x126*x205);
IkReal x467=(x125*x156);
IkReal x468=(x120*x188);
IkReal x469=(x123*x200);
IkReal x470=(x137*x168);
IkReal x471=(x125*x269);
IkReal x472=(x126*x127);
IkReal x473=(x137*x208);
IkReal x474=(x137*x263);
IkReal x475=(x125*x163);
IkReal x476=(x126*x256);
IkReal x477=(x120*x271);
IkReal x478=(x123*x194);
IkReal x479=(x130*x214);
IkReal x480=(x130*x146);
IkReal x481=(x120*x224);
IkReal x482=(x123*x159);
IkReal x483=(gclwh6_2*npy*x361);
IkReal x484=(gclwh6_2*x120*x145);
IkReal x485=(gclwh10_2*npz*x361);
IkReal x486=(gclwh8_2*npx*x361);
IkReal x487=(gclwh7_0*npy*x361);
IkReal x488=(gclwh9_0*npx*x361);
IkReal x489=(gclwh11_0*npz*x361);
IkReal x490=(gclwh7_0*x120*x145);
IkReal x491=(gclwh12_2*npy*x361);
IkReal x492=(gclwh3_2*npy*x361);
IkReal x493=(gclwh1_2*npx*x361);
IkReal x494=(gclwh14_3*x123*x167);
IkReal x495=(gclwh4_2*npz*x361);
IkReal x496=((2.0)*x136*x137);
IkReal x497=(gclwh12_2*x120*x145);
IkReal x498=(gclwh1_2*x125*x145);
IkReal x499=(gclwh3_3*x126*x167);
IkReal x500=(gclwh4_2*x130*x145);
IkReal x501=(gclwh1_3*x123*x167);
IkReal x502=(gclwh3_2*x120*x145);
IkReal x503=(gclwh12_3*x126*x167);
IkReal x504=(gclwh14_2*npx*x361);
IkReal x505=(gclwh14_3*r20*x362);
IkReal x506=(gclwh0_0*npx*x361);
IkReal x507=(gclwh2_0*npy*x361);
IkReal x508=(gclwh5_1*x137*x167);
IkReal x509=(gclwh13_1*x126*x167);
IkReal x510=(gclwh15_0*npx*x361);
IkReal x511=(gclwh2_1*x126*x167);
IkReal x512=(gclwh0_1*x123*x167);
IkReal x513=(gclwh5_0*npz*x361);
IkReal x514=(gclwh13_0*npy*x361);
IkReal x515=(gclwh0_0*x125*x145);
IkReal x516=(gclwh15_0*x125*x145);
IkReal x517=((1.0)*x120*x140);
IkReal x518=(x158*x362);
IkReal x519=(x185*x362);
IkReal x520=(gclwh15_1*x123*x167);
IkReal x521=(x275+x278);
IkReal x522=(x338+x337);
IkReal x523=(x302+x299);
IkReal x524=(x331+x330);
IkReal x525=(x304+x303);
IkReal x526=(x342+x343);
IkReal x527=(x381+x286+x285+x284);
IkReal x528=(x386+x290+x291+x289);
IkReal x529=(x317+x316+x427+x422);
IkReal x530=(x325+x326+x452+x450);
IkReal x531=(x332+x458+x456+x457);
IkReal x532=(x363+x364+x365+x274);
IkReal x533=(x397+x399+x398+x298);
IkReal x534=(x353+x474+x475+x476);
IkReal x535=(x305+x403+x405+x404);
IkReal x536=(x309+x310+x313+x312+x419);
IkReal x537=(x320+x321+x322+x319+x442);
IkReal x538=(x393+x392+x293+x294+x296);
IkReal x539=(x371+x370+x283+x282+x280);
IkReal x540=(x368+x366+x367+x276+x277);
IkReal x541=(x351+x352+x471+x472+x473);
IkReal x542=(x327+x328+x454+x455+x453);
IkReal x543=(x306+x307+x407+x406+x408);
IkReal x544=(x355+x354+x477+x478+x479);
IkReal x545=(x300+x301+x401+x400+x402);
IkReal x546=(x339+x340+x341+x463+x462+x464);
IkReal x547=(x350+x348+x349+x469+x468+x470);
IkReal x548=(x333+x335+x334+x459+x461+x460);
IkReal x549=(x346+x347+x345+x467+x466+x465);
IkReal x550=(x357+x356+x359+x358+x481+x480+x482);
IkReal x551=(x395+x394+x396+x391+x295+x489+x488+x490);
IkReal x552=(x382+x380+x379+x378+x287+x485+x484+x486);
IkReal x553=(x377+x376+x375+x374+x373+x372+x369+x279+x281+x483);
IkReal x554=(x387+x384+x385+x383+x388+x389+x390+x292+x288+x487);
IkReal x555=(x324+x323+x449+x448+x447+x446+x451+x520+x519+x518+x517+x516+x515+x514+x513+x512+x511);
IkReal x556=(x119+x314+x311+x492+x493+x491+x494+x495+x409+x412+x413+x410+x411+x416+x417+x414+x415+x418+x421+x420);
IkReal x557=(x315+x498+x499+x496+x497+x429+x428+x426+x425+x424+x423+x430+x500+x501+x502+x503+x504+x505);
IkReal x558=(x119+x318+x438+x439+x431+x432+x433+x434+x435+x436+x437+x445+x444+x441+x440+x443+x508+x509+x506+x507+x510);
op[0]=((((-0.817)*gclwh10_12*x130))+(((-1.0)*gclwh8_12*x243))+(((1.634)*gclwh10_12*x137))+(((0.00817)*x218))+(((-1.0)*gclwh4_8*x254))+(((-1.0)*x540))+(((-1.0)*gclwh12_8*x180))+x532+x521+(((-0.00817)*x161))+(((1.634)*gclwh8_12*x123))+(((-1.0)*x273))+(((0.817)*gclwh6_12*x120))+(((-1.634)*gclwh6_12*x126))+(((-0.817)*gclwh8_12*x125))+((gclwh14_8*x223)));
op[1]=(((gclwh8_11*x125))+(((-0.135089)*x157))+(((-1.0)*x539))+(((-0.135089)*x240))+(((0.135089)*x164))+((pp*x128))+(((-1.0)*x552))+x553+x527+(((-1.0)*gclwh6_11*x120)));
op[2]=((-0.210112)+(((-1.0)*x546))+x548);
op[3]=((((0.784)*gclwh8_2*x125))+((gclwh10_2*x144))+(((-1.568)*gclwh10_2*x137))+(((0.00784)*x150))+(((-1.0)*gclwh4_2*x253))+(((0.784)*gclwh10_2*x130))+(((-1.568)*gclwh8_2*x123))+(((-1.0)*x522))+(((-1.0)*gclwh12_2*x206))+((gclwh4_8*x196))+x336+((gclwh14_2*x148))+(((1.568)*gclwh6_2*x126))+(((0.17)*x215))+(((-0.784)*gclwh6_2*x120))+(((-1.0)*gclwh14_8*x213))+(((-1.0)*gclwh6_2*x129)));
op[4]=((((-0.033)*gclwh8_12*x125))+(((0.033)*gclwh6_12*x120))+(((-0.00033)*x161))+((gclwh6_12*x191))+(((-0.066)*gclwh6_12*x126))+(((0.066)*gclwh10_12*x137))+((gclwh4_8*x151))+(((-1.0)*x521))+((gclwh12_8*x149))+(((-1.0)*x540))+x273+(((0.066)*gclwh8_12*x123))+(((-1.0)*gclwh14_8*x189))+x532+(((-0.00033)*x266))+(((-0.033)*gclwh10_12*x130)));
op[5]=((((0.001809)*x164))+((gclwh6_11*x120))+(((-0.001809)*x240))+(((-1.0)*gclwh8_11*x125))+(((-1.0)*x527))+(((-1.0)*x552))+x553+x539+(((-0.001809)*x157))+(((-1.0)*pp*x128)));
op[6]=(((gclwh7_10*x120))+(((-1.0)*gclwh11_10*x130))+(((0.135089)*x257))+(((-0.135089)*x173))+(((-1.0)*x528))+(((-1.0)*gclwh9_10*x125))+(((-0.135089)*x267))+(((-1.0)*x551))+x554+x538);
op[7]=((((-1.634)*gclwh7_13*x126))+(((1.634)*gclwh9_13*x123))+(((-1.0)*gclwh5_9*x254))+((gclwh15_9*x223))+(((-1.0)*gclwh13_9*x180))+(((1.634)*gclwh11_13*x137))+(((0.00817)*x187))+(((-1.0)*x297))+(((0.817)*gclwh7_13*x120))+(((-1.0)*x545))+x533+x523+(((-1.0)*gclwh11_13*x172))+(((-1.0)*gclwh9_13*x243))+(((-0.817)*gclwh11_13*x130))+(((-0.817)*gclwh9_13*x125)));
op[8]=((((0.00784)*x242))+(((-1.0)*gclwh7_0*x129))+(((-0.1568)*x179))+(((-1.0)*gclwh13_0*x206))+(((1.568)*gclwh7_0*x126))+(((-1.568)*gclwh11_0*x137))+((gclwh15_9*x213))+x526+(((-1.0)*gclwh5_9*x196))+(((0.784)*gclwh11_0*x130))+(((-1.568)*gclwh9_0*x123))+((gclwh15_0*x148))+(((-1.0)*x344))+(((-0.17)*x190))+(((-0.784)*gclwh7_0*x120))+(((0.784)*gclwh9_0*x125))+((gclwh11_0*x144)));
op[9]=((-0.210112)+(((-1.0)*x547))+x549);
op[10]=((((-1.0)*x538))+(((0.001809)*x257))+(((-0.001809)*x267))+((gclwh11_10*x130))+(((-1.0)*x551))+x554+x528+(((-0.001809)*x173))+(((-1.0)*gclwh7_10*x120))+((gclwh9_10*x125)));
op[11]=((((-0.066)*gclwh7_13*x126))+(((-0.00033)*x259))+((gclwh5_9*x151))+(((-1.0)*x523))+(((-1.0)*x545))+((gclwh13_9*x149))+(((0.066)*gclwh9_13*x123))+x297+(((0.066)*gclwh11_13*x137))+(((0.00033)*x187))+x533+(((-1.0)*gclwh15_9*x189))+(((0.033)*gclwh7_13*x120))+(((-0.00033)*x260))+(((-0.033)*gclwh11_13*x130))+(((-0.033)*gclwh9_13*x125)));
op[12]=((((-0.817)*gclwh12_8*x120))+(((-1.0)*gclwh4_8*x172))+(((-1.0)*gclwh6_12*x180))+(((0.00817)*x154))+(((1.634)*gclwh12_8*x126))+(((-1.0)*x535))+((gclwh8_12*x223))+(((0.1634)*x198))+(((-0.817)*gclwh4_8*x130))+x543+x525+(((-1.634)*gclwh14_8*x123))+(((-0.00817)*x133))+(((1.634)*gclwh4_8*x137))+(((-1.0)*x308))+(((0.817)*gclwh14_8*x125)));
op[13]=((-0.685445)+(((-0.00675445)*x233))+(((0.00675445)*x219))+(((1.35089)*gclwh12_3*x126))+(((-1.35089)*gclwh14_3*x123))+(((0.665445)*gclwh14_3*x125))+(((-0.00675445)*x241))+(((1.35089)*gclwh1_3*x123))+(((1.35089)*gclwh4_3*x137))+(((-1.0)*x536))+(((-1.0)*gclwh12_11*x120))+(((-1.0)*gclwh4_11*x130))+(((-1.0)*x557))+(((1.35089)*gclwh3_3*x126))+x556+x529+((gclwh14_11*x125))+(((-0.685445)*gclwh3_3*x120))+(((-0.665445)*gclwh12_3*x120))+(((-0.665445)*gclwh4_3*x130))+((gclwh14_3*x255))+(((-0.685445)*gclwh1_3*x125))+(((0.00675445)*x184)));
op[14]=((-0.089834)+(((-1.0)*x550))+x541);
op[15]=(((gclwh1_2*x252))+(((-0.0085)*x154))+(((-0.85)*gclwh14_8*x125))+((gclwh3_2*x129))+(((1.568)*gclwh4_2*x137))+(((-1.568)*gclwh14_2*x123))+(((-1.0)*gclwh12_2*x129))+(((-1.7)*gclwh4_8*x137))+(((1.568)*gclwh3_2*x126))+(((-1.0)*gclwh4_2*x144))+(((-1.0)*x544))+(((-0.784)*gclwh1_2*x125))+(((0.0085)*x133))+(((-0.784)*gclwh3_2*x120))+(((-0.784)*gclwh12_2*x120))+x534+(((0.85)*gclwh4_8*x130))+(((0.0085)*x238))+(((-0.1568)*x225))+(((1.568)*gclwh12_2*x126))+(((0.85)*gclwh12_8*x120))+(((1.568)*gclwh1_2*x123))+((gclwh14_2*x252))+(((-0.784)*gclwh4_2*x130))+(((0.784)*gclwh14_2*x125))+(((-1.0)*gclwh8_2*x148))+((gclwh6_2*x206))+(((1.7)*gclwh14_8*x123))+(((-1.7)*gclwh12_8*x126)));
op[16]=((((-1.0)*gclwh6_12*x149))+(((0.00033)*x133))+(((-0.066)*gclwh4_8*x137))+(((0.033)*gclwh4_8*x130))+(((-0.066)*gclwh12_8*x126))+(((-1.0)*x543))+((gclwh8_12*x189))+((gclwh10_12*x151))+(((-0.033)*gclwh14_8*x125))+x535+x525+(((0.033)*gclwh12_8*x120))+(((0.00033)*x238))+(((0.066)*gclwh14_8*x123))+(((-1.0)*x308))+(((-0.00033)*x154)));
op[17]=((0.019045)+(((0.01809)*gclwh1_3*x123))+(((0.000955)*gclwh4_3*x130))+(((-9.045e-5)*x233))+((gclwh4_11*x130))+(((-0.000955)*gclwh14_3*x125))+(((-1.0)*x529))+(((-0.01809)*gclwh14_3*x123))+(((-1.0)*x557))+(((0.000955)*gclwh12_3*x120))+((gclwh14_3*x153))+x556+x536+(((-9.045e-5)*x241))+(((9.045e-5)*x184))+(((0.01809)*gclwh12_3*x126))+(((-0.019045)*gclwh1_3*x125))+((gclwh1_3*x153))+(((-1.0)*gclwh14_11*x125))+(((-0.019045)*gclwh3_3*x120))+(((0.01809)*gclwh3_3*x126))+(((0.01809)*gclwh4_3*x137))+((gclwh12_11*x120)));
op[18]=((0.685445)+(((-1.0)*gclwh5_10*x130))+(((-0.685445)*gclwh2_1*x120))+(((0.00675445)*x158))+(((-1.35089)*gclwh5_1*x137))+(((-0.685445)*gclwh0_1*x125))+(((1.35089)*gclwh15_1*x123))+((gclwh0_1*x255))+(((-1.0)*gclwh13_10*x120))+(((-1.0)*x537))+(((-0.665445)*gclwh15_1*x125))+(((-1.0)*x555))+((gclwh15_10*x125))+x558+x530+(((0.665445)*gclwh13_1*x120))+(((-0.00675445)*x132))+(((1.35089)*gclwh2_1*x126))+(((0.665445)*gclwh5_1*x130))+(((0.00675445)*x192))+(((1.35089)*gclwh0_1*x123))+(((-1.35089)*gclwh13_1*x126))+(((0.00675445)*x185)));
op[19]=((((-1.634)*gclwh5_9*x137))+(((0.00817)*x212))+((gclwh7_13*x180))+(((-0.817)*gclwh15_9*x125))+(((0.817)*gclwh5_9*x130))+(((-1.0)*x524))+(((-1.0)*x542))+x329+(((-1.0)*gclwh11_13*x254))+x531+(((-0.00817)*x131))+(((-1.634)*gclwh13_9*x126))+(((-1.0)*gclwh9_13*x223))+(((0.817)*gclwh13_9*x120))+(((1.634)*x360))+((gclwh5_9*x172)));
op[20]=((((-1.7)*gclwh5_9*x137))+((gclwh0_0*x252))+((gclwh5_0*x144))+(((1.568)*gclwh15_0*x123))+(((-0.85)*gclwh15_9*x125))+(((0.536)*gclwh13_15*x126))+(((0.85)*gclwh5_9*x130))+(((-0.536)*gclwh15_15*x123))+((x125*x231))+(((1.568)*gclwh0_0*x123))+(((0.784)*gclwh13_0*x120))+((gclwh13_0*x129))+(((-0.784)*gclwh2_0*x120))+((gclwh11_0*x253))+(((-0.784)*gclwh0_0*x125))+(((-1.568)*gclwh5_0*x137))+(((-0.00268)*x181))+(((-0.0085)*x131))+(((-0.784)*gclwh15_0*x125))+(((0.536)*gclwh5_15*x137))+(((0.85)*gclwh13_9*x120))+(((-1.0)*gclwh15_0*x252))+((gclwh15_15*x160))+(((1.7)*x360))+((gclwh2_0*x129))+(((-1.0)*gclwh7_0*x206))+(((-1.7)*gclwh13_9*x126))+(((0.0085)*x248))+(((-1.568)*gclwh13_0*x126))+(((-1.0)*x130*x236))+(((1.568)*gclwh2_0*x126))+(((-1.0)*x120*x229))+(((0.0085)*x212))+(((-1.0)*gclwh5_15*x239))+((gclwh9_0*x148))+(((0.784)*gclwh5_0*x130)));
op[21]=((-0.089834)+(((-1.0)*x125*x235))+((gclwh9_10*x250))+((gclwh13_10*x147))+((x120*x162))+((gclwh11_10*x143))+(((-0.4)*gclwh7_10*rxp1_2))+((x130*x227))+(((-4.0)*gclwh5_10*x137))+(((-0.02)*gclwh15_10*r20))+((gclwh5_10*x155))+(((-4.0)*gclwh13_10*x126))+(((4.0)*gclwh15_10*x123)));
op[22]=((-0.019045)+(((0.000955)*gclwh15_1*x125))+(((-1.0)*gclwh15_10*x125))+(((-0.019045)*gclwh2_1*x120))+(((-0.000955)*gclwh5_1*x130))+((gclwh5_10*x130))+(((-0.01809)*gclwh5_1*x137))+(((0.01809)*gclwh0_1*x123))+(((-1.0)*x530))+(((-0.019045)*gclwh0_1*x125))+(((-1.0)*x555))+(((-0.000955)*gclwh13_1*x120))+((gclwh13_10*x120))+x558+x537+(((9.045e-5)*x185))+(((9.045e-5)*x158))+(((9.045e-5)*x192))+(((0.01809)*gclwh15_1*x123))+(((-0.01809)*gclwh13_1*x126))+(((0.01809)*gclwh2_1*x126))+((gclwh0_1*x153))+(((-9.045e-5)*x132)));
op[23]=((((-0.066)*x360))+(((0.066)*gclwh13_9*x126))+(((0.00033)*x131))+(((-0.033)*gclwh13_9*x120))+(((-1.0)*gclwh13_9*x191))+(((0.033)*gclwh15_9*x125))+((gclwh7_13*x149))+(((-1.0)*x531))+(((-1.0)*x524))+(((-1.0)*gclwh9_13*x189))+x329+(((0.066)*gclwh5_9*x137))+x542+(((-0.033)*gclwh5_9*x130))+(((-0.00033)*x248))+(((-1.0)*gclwh11_13*x151)));
op[24]=((-0.437912)+(((-1.0)*x546))+x548);
op[25]=((((1.634)*gclwh10_2*x130))+(((-1.0)*gclwh6_2*x203))+(((-3.268)*gclwh8_2*x123))+(((-1.0)*gclwh12_2*x199))+((gclwh14_2*x244))+(((-0.3268)*gclwh4_2*rxp2_2))+(((-1.634)*gclwh6_2*x120))+(((1.634)*gclwh8_2*x125))+(((-1.0)*x522))+(((3.268)*gclwh6_2*x126))+x336+(((-3.268)*gclwh10_2*x137))+(((0.01634)*x150))+(((0.01634)*x210)));
op[26]=((((-0.01568)*x218))+(((0.01568)*x266))+(((-1.568)*gclwh6_12*x120))+(((-3.136)*gclwh8_12*x123))+(((1.568)*gclwh10_12*x130))+(((-0.1072)*x237))+(((1.568)*gclwh8_12*x125))+((gclwh14_14*x261))+(((3.136)*gclwh6_12*x126))+(((-3.136)*gclwh10_12*x137))+(((0.01568)*x161))+(((-1.0)*gclwh12_14*x226)));
op[27]=((((0.8)*x246))+(((-4.0)*pp*x128))+(((8.0)*gclwh8_11*x123))+(((-0.8)*x142))+((x120*x245))+(((-0.04)*x128))+(((-1.0)*x125*x182))+(((8.0)*gclwh10_11*x137))+(((-8.0)*gclwh6_11*x126))+((gclwh6_11*x209))+((gclwh4_11*x201))+(((-0.04)*x169)));
op[28]=((-0.017688)+(((-1.0)*x548))+x546);
op[29]=((((-1.0)*gclwh12_2*x251))+(((-0.132)*gclwh10_2*x137))+(((0.00066)*x150))+(((-1.0)*gclwh4_2*x170))+(((-0.066)*gclwh6_2*x120))+(((0.066)*gclwh10_2*x130))+(((-0.132)*gclwh8_2*x123))+x522+(((-1.0)*gclwh6_2*x262))+(((0.132)*gclwh6_2*x126))+(((-1.0)*x336))+((gclwh14_2*x171))+(((0.00066)*x210))+(((0.066)*gclwh8_2*x125)));
op[30]=(((gclwh9_0*x152))+(((1.634)*gclwh9_0*x125))+(((-1.634)*gclwh7_0*x120))+(((-3.268)*gclwh9_0*x123))+((gclwh15_0*x244))+(((0.01634)*x228))+(((-0.3268)*x179))+(((3.268)*gclwh7_0*x126))+(((-1.0)*gclwh13_0*x199))+x526+(((-1.0)*x344))+(((-1.0)*gclwh7_0*x203))+(((1.634)*gclwh11_0*x130))+(((-3.268)*gclwh11_0*x137)));
op[31]=((-0.437912)+(((-1.0)*x547))+x549);
op[32]=(((x125*x200))+(((-0.8)*x121))+(((-8.0)*gclwh9_10*x123))+(((-1.0)*gclwh7_10*x209))+((gclwh15_10*x216))+(((-1.0)*gclwh5_10*x201))+(((-1.0)*x120*x205))+(((-8.0)*gclwh11_10*x137))+((x130*x168))+(((8.0)*gclwh7_10*x126))+(((0.04)*x175))+((gclwh11_10*x202)));
op[33]=((((0.01568)*x260))+(((-0.1072)*x264))+(((-0.01568)*x187))+(((3.136)*gclwh7_13*x126))+((gclwh15_15*x261))+(((0.01568)*x259))+(((-1.0)*gclwh13_15*x226))+(((-3.136)*gclwh9_13*x123))+(((-1.568)*gclwh7_13*x120))+(((1.568)*gclwh11_13*x130))+(((1.568)*gclwh9_13*x125))+(((-3.136)*gclwh11_13*x137)));
op[34]=((((-0.132)*gclwh11_0*x137))+(((-0.066)*gclwh7_0*x120))+(((-1.0)*x526))+(((0.00066)*x228))+(((-1.0)*gclwh7_0*x262))+((gclwh15_0*x171))+x344+(((-1.0)*gclwh13_0*x251))+(((0.066)*gclwh11_0*x130))+(((0.132)*gclwh7_0*x126))+(((-1.0)*gclwh5_0*x170))+(((0.066)*gclwh9_0*x125))+(((0.00066)*x242))+(((-0.132)*gclwh9_0*x123)));
op[35]=((-0.017688)+(((-1.0)*x549))+x547);
op[36]=((1.299066)+(((-1.0)*x550))+x541);
op[37]=(((gclwh1_2*x152))+((gclwh6_2*x199))+(((-3.268)*gclwh14_2*x123))+((gclwh3_2*x203))+(((3.268)*gclwh12_2*x126))+(((-1.634)*gclwh1_2*x125))+(((-1.0)*gclwh12_2*x203))+(((-1.0)*x544))+(((3.268)*gclwh1_2*x123))+(((-0.01634)*gclwh4_2*r22))+x534+((gclwh14_2*x152))+(((-1.634)*gclwh3_2*x120))+(((-1.634)*gclwh12_2*x120))+(((1.634)*gclwh14_2*x125))+(((-0.3268)*x222))+(((-0.3268)*x225))+(((-1.634)*gclwh4_2*x130))+(((3.268)*gclwh4_2*x137))+(((3.268)*gclwh3_2*x126)));
op[38]=((((1.072)*gclwh4_14*x137))+(((-1.0)*x120*x256))+(((0.3136)*gclwh6_12*rxp1_2))+(((-0.00536)*gclwh4_14*r22))+(((-1.0)*x130*x263))+(((-0.3136)*gclwh8_12*rxp0_2))+(((-1.072)*gclwh14_14*x123))+(((-0.00536)*x166))+(((-0.3136)*x198))+(((0.00536)*gclwh14_14*r20))+(((1.072)*gclwh12_14*x126))+((x125*x194)));
op[39]=((-0.03602)+(((-0.04)*x177))+(((-1.0)*x125*x159))+((x130*x208))+((gclwh8_11*x216))+((gclwh10_11*x201))+((x120*x127))+(((-8.0)*gclwh12_11*x126))+((gclwh12_11*x209))+((gclwh4_11*x202))+(((8.0)*gclwh14_11*x123))+(((-0.8)*x195))+(((-8.0)*gclwh4_11*x137)));
op[40]=((0.033734)+(((-1.0)*x541))+x550);
IkReal x559=pz*pz;
IkReal x560=pp*pp;
IkReal x561=((0.2)*pz);
IkReal x562=(pp*r21);
IkReal x563=((0.2)*rxp1_2);
IkReal x564=((0.00134)*r22);
IkReal x565=((0.066)*pz);
IkReal x566=(gclwh14_8*npx);
IkReal x567=((0.001)*r21);
IkReal x568=(pp*r20);
IkReal x569=(gclwh13_10*r21);
IkReal x570=(gclwh5_0*r22);
IkReal x571=((0.0132)*rxp2_2);
IkReal x572=((2.0)*pz);
IkReal x573=(gclwh7_10*npy);
IkReal x574=((0.02)*r22);
IkReal x575=((0.00784)*r21);
IkReal x576=(gclwh15_9*r20);
IkReal x577=(gclwh15_1*r20);
IkReal x578=(gclwh12_8*r21);
IkReal x579=((0.01)*r22);
IkReal x580=(gclwh6_12*npy);
IkReal x581=((0.2)*rxp2_2);
IkReal x582=(gclwh4_3*pp);
IkReal x583=(npz*pz);
IkReal x584=(gclwh2_0*pz);
IkReal x585=((0.01)*r21);
IkReal x586=(gclwh14_2*pz);
IkReal x587=((0.2)*rxp0_2);
IkReal x588=(gclwh8_2*pz);
IkReal x589=((0.00784)*r22);
IkReal x590=((1.0)*pz);
IkReal x591=(gclwh9_13*rxp0_2);
IkReal x592=(npx*pz);
IkReal x593=((0.1568)*rxp0_2);
IkReal x594=(npy*pz);
IkReal x595=((0.784)*pp);
IkReal x596=((0.0066)*rxp1_2);
IkReal x597=((0.536)*gclwh15_15);
IkReal x598=(pp*r22);
IkReal x599=((0.0066)*rxp2_2);
IkReal x600=((0.536)*gclwh5_15);
IkReal x601=(gclwh12_8*npy);
IkReal x602=((9.045e-5)*r20);
IkReal x603=(gclwh14_8*r20);
IkReal x604=(gclwh4_2*pz);
IkReal x605=(gclwh12_3*rxp1_2);
IkReal x606=(gclwh13_1*r21);
IkReal x607=((0.0132)*rxp1_2);
IkReal x608=(gclwh15_15*r20);
IkReal x609=((0.268)*gclwh14_14);
IkReal x610=((0.135089)*rxp0_2);
IkReal x611=((0.02)*rxp0_2);
IkReal x612=(gclwh12_14*r21);
IkReal x613=((0.00066)*r21);
IkReal x614=(gclwh5_1*pp);
IkReal x615=(gclwh8_11*r20);
IkReal x616=((0.02)*r21);
IkReal x617=((0.00817)*r22);
IkReal x618=(gclwh7_0*rxp1_2);
IkReal x619=((0.001809)*rxp2_2);
IkReal x620=(gclwh4_14*rxp2_2);
IkReal x621=((4.0)*gclwh15_10);
IkReal x622=((0.00066)*r20);
IkReal x623=(gclwh9_10*rxp0_2);
IkReal x624=(gclwh14_11*r20);
IkReal x625=((0.00033)*r22);
IkReal x626=((0.1634)*rxp1_2);
IkReal x627=(gclwh13_15*r21);
IkReal x628=((0.00134)*r20);
IkReal x629=(gclwh3_3*r21);
IkReal x630=(gclwh5_1*r22);
IkReal x631=(gclwh7_13*r21);
IkReal x632=(gclwh13_9*rxp1_2);
IkReal x633=((0.00033)*r21);
IkReal x634=(gclwh7_0*pz);
IkReal x635=(gclwh14_8*rxp0_2);
IkReal x636=((0.17)*rxp2_2);
IkReal x637=((0.0536)*rxp1_2);
IkReal x638=((0.1634)*rxp2_2);
IkReal x639=((0.1568)*rxp2_2);
IkReal x640=((0.01)*r20);
IkReal x641=((0.01634)*r21);
IkReal x642=(gclwh7_10*rxp1_2);
IkReal x643=(gclwh12_3*pp);
IkReal x644=(gclwh13_9*r21);
IkReal x645=((0.268)*gclwh4_14);
IkReal x646=(gclwh12_8*rxp1_2);
IkReal x647=((0.4)*rxp2_2);
IkReal x648=((0.0132)*rxp0_2);
IkReal x649=((0.00784)*r20);
IkReal x650=(gclwh1_3*r20);
IkReal x651=(gclwh14_3*pp);
IkReal x652=((0.02)*rxp2_2);
IkReal x653=((0.0268)*rxp0_2);
IkReal x654=(gclwh15_9*rxp0_2);
IkReal x655=((0.1568)*rxp1_2);
IkReal x656=((0.0268)*rxp1_2);
IkReal x657=((0.536)*gclwh13_15);
IkReal x658=(gclwh2_1*r21);
IkReal x659=((0.02)*r20);
IkReal x660=((0.4)*rxp1_2);
IkReal x661=((0.01634)*r20);
IkReal x662=((0.268)*gclwh13_15);
IkReal x663=(gclwh10_2*pz);
IkReal x664=(gclwh15_0*pz);
IkReal x665=((0.268)*gclwh15_15);
IkReal x666=(gclwh5_15*r22);
IkReal x667=(gclwh8_12*rxp0_2);
IkReal x668=(gclwh9_0*pz);
IkReal x669=(gclwh4_3*r22);
IkReal x670=((0.268)*gclwh5_15);
IkReal x671=((0.0268)*rxp2_2);
IkReal x672=(gclwh4_8*r22);
IkReal x673=((1.634)*pz);
IkReal x674=((4.0)*gclwh5_10);
IkReal x675=(npx*pp);
IkReal x676=((4.0)*gclwh13_10);
IkReal x677=(gclwh12_3*r21);
IkReal x678=(gclwh4_2*r22);
IkReal x679=((0.00817)*r20);
IkReal x680=((1.568)*npx);
IkReal x681=(gclwh0_1*r20);
IkReal x682=(npy*pp);
IkReal x683=(gclwh13_9*npy);
IkReal x684=(gclwh11_0*pz);
IkReal x685=(gclwh5_9*r22);
IkReal x686=((0.4)*rxp0_2);
IkReal x687=((0.135089)*rxp2_2);
IkReal x688=(gclwh13_0*pz);
IkReal x689=(gclwh14_3*r20);
IkReal x690=((0.00033)*r20);
IkReal x691=((0.00134)*r21);
IkReal x692=(gclwh13_1*rxp1_2);
IkReal x693=(gclwh6_2*pz);
IkReal x694=((0.0536)*rxp0_2);
IkReal x695=((0.001809)*rxp0_2);
IkReal x696=((0.268)*gclwh12_14);
IkReal x697=(gclwh12_2*pz);
IkReal x698=((0.00268)*x666);
IkReal x699=((0.00268)*x627);
IkReal x700=((0.00268)*x608);
IkReal x701=((0.4)*x642);
IkReal x702=(gclwh15_10*x659);
IkReal x703=((0.4)*x623);
IkReal x704=(gclwh5_10*x574);
IkReal x705=(gclwh11_10*x647);
IkReal x706=((0.02)*x569);
IkReal x707=((0.0268)*x620);
IkReal x708=(gclwh6_5*x691);
IkReal x709=(gclwh12_14*x656);
IkReal x710=(gclwh14_14*x653);
IkReal x711=(gclwh10_5*x564);
IkReal x712=(gclwh8_5*x628);
IkReal x713=((0.01)*x615);
IkReal x714=((0.02)*x646);
IkReal x715=(gclwh10_11*x579);
IkReal x716=(gclwh14_11*x587);
IkReal x717=(gclwh4_8*x652);
IkReal x718=(gclwh14_8*x611);
IkReal x719=(gclwh12_11*x563);
IkReal x720=(gclwh4_11*x581);
IkReal x721=(gclwh6_11*x585);
IkReal x722=((0.02)*x632);
IkReal x723=(gclwh7_10*x585);
IkReal x724=(gclwh5_10*x581);
IkReal x725=(gclwh5_9*x652);
IkReal x726=(gclwh13_10*x563);
IkReal x727=(gclwh11_10*x579);
IkReal x728=(gclwh15_10*x587);
IkReal x729=(gclwh9_10*x640);
IkReal x730=(gclwh15_9*x611);
IkReal x731=(gclwh13_15*x656);
IkReal x732=(gclwh5_15*x671);
IkReal x733=(gclwh7_7*x691);
IkReal x734=(gclwh15_15*x653);
IkReal x735=(gclwh9_7*x628);
IkReal x736=(gclwh11_7*x564);
IkReal x737=((0.00268)*x612);
IkReal x738=((0.00268)*gclwh4_14*r22);
IkReal x739=((0.00268)*gclwh14_14*r20);
IkReal x740=((0.00134)*x612);
IkReal x741=(gclwh8_5*x653);
IkReal x742=(gclwh10_5*x671);
IkReal x743=(gclwh4_14*x564);
IkReal x744=(gclwh6_5*x656);
IkReal x745=(gclwh14_14*x628);
IkReal x746=((0.001)*x672);
IkReal x747=(gclwh6_11*x563);
IkReal x748=((0.01)*x624);
IkReal x749=(gclwh12_8*x567);
IkReal x750=(gclwh12_11*x585);
IkReal x751=(gclwh10_11*x581);
IkReal x752=((0.001)*x603);
IkReal x753=(gclwh4_11*x579);
IkReal x754=(gclwh8_11*x587);
IkReal x755=((0.001)*x576);
IkReal x756=(gclwh7_10*x563);
IkReal x757=(gclwh15_10*x640);
IkReal x758=((0.001)*x685);
IkReal x759=(gclwh11_10*x581);
IkReal x760=(gclwh13_9*x567);
IkReal x761=((0.01)*x569);
IkReal x762=(gclwh5_10*x579);
IkReal x763=(gclwh9_10*x587);
IkReal x764=((0.00134)*x608);
IkReal x765=(gclwh7_7*x656);
IkReal x766=(gclwh11_7*x671);
IkReal x767=(gclwh5_15*x564);
IkReal x768=((0.00134)*x627);
IkReal x769=(gclwh9_7*x653);
IkReal x770=(gclwh15_9*x592);
IkReal x771=((2.0)*x559);
IkReal x772=((1.0)*x560);
IkReal x773=(x562*x662);
IkReal x774=(x598*x670);
IkReal x775=(x592*x597);
IkReal x776=(x568*x665);
IkReal x777=(x583*x600);
IkReal x778=(x594*x657);
IkReal x779=((2.0)*gclwh15_10*x568);
IkReal x780=(x583*x674);
IkReal x781=(x594*x676);
IkReal x782=((2.0)*gclwh13_10*x562);
IkReal x783=(x592*x621);
IkReal x784=((2.0)*gclwh5_10*x598);
IkReal x785=((0.134)*gclwh6_5*x562);
IkReal x786=((0.268)*gclwh10_5*x583);
IkReal x787=((0.268)*gclwh8_5*x592);
IkReal x788=((0.268)*gclwh6_5*x594);
IkReal x789=((0.134)*gclwh8_5*x568);
IkReal x790=((0.134)*gclwh10_5*x598);
IkReal x791=(gclwh14_2*rxp0_2*x561);
IkReal x792=(gclwh6_11*npy*x572);
IkReal x793=(x598*x663);
IkReal x794=(x579*x663);
IkReal x795=(x563*x643);
IkReal x796=(x568*x588);
IkReal x797=(x581*x582);
IkReal x798=(x588*x640);
IkReal x799=(gclwh12_2*rxp1_2*x561);
IkReal x800=(x587*x651);
IkReal x801=(gclwh4_2*rxp2_2*x561);
IkReal x802=(gclwh10_11*npz*x572);
IkReal x803=(x585*x693);
IkReal x804=(gclwh8_11*npx*x572);
IkReal x805=(gclwh11_10*npz*x572);
IkReal x806=(gclwh9_10*npx*x572);
IkReal x807=(gclwh13_1*pp*x563);
IkReal x808=(x598*x684);
IkReal x809=(x581*x614);
IkReal x810=(gclwh15_0*rxp0_2*x561);
IkReal x811=(x579*x684);
IkReal x812=(x640*x668);
IkReal x813=(x568*x668);
IkReal x814=(gclwh15_1*pp*x587);
IkReal x815=(gclwh5_0*rxp2_2*x561);
IkReal x816=(gclwh13_0*rxp1_2*x561);
IkReal x817=(x585*x634);
IkReal x818=(x572*x573);
IkReal x819=((0.268)*gclwh9_7*x592);
IkReal x820=((0.134)*gclwh7_7*x562);
IkReal x821=((0.268)*gclwh11_7*x583);
IkReal x822=((0.134)*gclwh11_7*x598);
IkReal x823=((0.268)*gclwh7_7*x594);
IkReal x824=((0.134)*gclwh9_7*x568);
IkReal x825=(x562*x696);
IkReal x826=((0.536)*gclwh14_14*x592);
IkReal x827=(x598*x645);
IkReal x828=((0.536)*gclwh4_14*x583);
IkReal x829=(x568*x609);
IkReal x830=((0.536)*gclwh12_14*x594);
IkReal x831=((0.134)*gclwh12_14*x562);
IkReal x832=(x592*x609);
IkReal x833=((0.134)*gclwh4_14*x598);
IkReal x834=(x594*x696);
IkReal x835=((0.134)*gclwh14_14*x568);
IkReal x836=(x583*x645);
IkReal x837=(x568*x586);
IkReal x838=(x586*x640);
IkReal x839=((0.1)*gclwh4_8*x598);
IkReal x840=(x560*x677);
IkReal x841=(gclwh1_2*pz*x640);
IkReal x842=(gclwh3_2*pz*x585);
IkReal x843=(gclwh4_11*npz*x572);
IkReal x844=((0.1)*gclwh12_8*x562);
IkReal x845=(x560*x629);
IkReal x846=(x560*x650);
IkReal x847=(gclwh6_2*rxp1_2*x561);
IkReal x848=(x560*x669);
IkReal x849=(gclwh12_11*npy*x572);
IkReal x850=(x561*x566);
IkReal x851=(gclwh4_8*npz*x561);
IkReal x852=(gclwh14_11*npx*x572);
IkReal x853=(x561*x601);
IkReal x854=(gclwh10_2*rxp2_2*x561);
IkReal x855=(x579*x604);
IkReal x856=(gclwh8_2*rxp0_2*x561);
IkReal x857=((0.1)*gclwh14_8*x568);
IkReal x858=(x585*x697);
IkReal x859=(x585*x688);
IkReal x860=(gclwh0_0*pz*x640);
IkReal x861=(gclwh11_0*rxp2_2*x561);
IkReal x862=(x584*x585);
IkReal x863=(x561*x683);
IkReal x864=(x560*x577);
IkReal x865=(pp*pz*x570);
IkReal x866=((0.01)*pz*x570);
IkReal x867=(x562*x688);
IkReal x868=(gclwh9_0*rxp0_2*x561);
IkReal x869=((0.1)*gclwh15_9*x568);
IkReal x870=(x560*x658);
IkReal x871=(gclwh5_10*npz*x572);
IkReal x872=(gclwh13_10*npy*x572);
IkReal x873=(gclwh5_9*npz*x561);
IkReal x874=(x560*x681);
IkReal x875=(x561*x618);
IkReal x876=((0.1)*gclwh5_9*x598);
IkReal x877=(gclwh15_9*npx*x561);
IkReal x878=((0.1)*gclwh13_9*x562);
IkReal x879=(gclwh15_10*npx*x572);
IkReal x880=(x640*x664);
IkReal x881=(x583*x670);
IkReal x882=((0.134)*gclwh15_15*x568);
IkReal x883=(x594*x662);
IkReal x884=((0.134)*gclwh13_15*x562);
IkReal x885=(x592*x665);
IkReal x886=((0.134)*gclwh5_15*x598);
IkReal x887=(gclwh6_2*npy*x771);
IkReal x888=(gclwh6_2*x562*x590);
IkReal x889=(gclwh10_2*npz*x771);
IkReal x890=(gclwh8_2*npx*x771);
IkReal x891=(gclwh7_0*npy*x771);
IkReal x892=(gclwh9_0*npx*x771);
IkReal x893=(gclwh11_0*npz*x771);
IkReal x894=(gclwh7_0*x562*x590);
IkReal x895=(gclwh12_2*npy*x771);
IkReal x896=(gclwh3_2*npy*x771);
IkReal x897=(gclwh1_2*npx*x771);
IkReal x898=(npx*x572*x651);
IkReal x899=(gclwh4_2*npz*x771);
IkReal x900=(npz*x572*x582);
IkReal x901=(gclwh12_2*x562*x590);
IkReal x902=(gclwh1_2*x568*x590);
IkReal x903=(gclwh3_3*x572*x682);
IkReal x904=(gclwh4_2*x590*x598);
IkReal x905=(gclwh1_3*x572*x675);
IkReal x906=(gclwh3_2*x562*x590);
IkReal x907=(npy*x572*x643);
IkReal x908=(gclwh14_2*npx*x771);
IkReal x909=(x689*x772);
IkReal x910=(gclwh0_0*npx*x771);
IkReal x911=(gclwh2_0*npy*x771);
IkReal x912=(npz*x572*x614);
IkReal x913=(gclwh13_1*x572*x682);
IkReal x914=(gclwh15_0*npx*x771);
IkReal x915=(gclwh2_1*x572*x682);
IkReal x916=(gclwh0_1*x572*x675);
IkReal x917=(gclwh5_0*npz*x771);
IkReal x918=(gclwh13_0*npy*x771);
IkReal x919=(gclwh0_0*x568*x590);
IkReal x920=(gclwh15_0*x568*x590);
IkReal x921=((1.0)*x562*x584);
IkReal x922=(x606*x772);
IkReal x923=(x630*x772);
IkReal x924=(gclwh15_1*x572*x675);
IkReal x925=(x742+x741);
IkReal x926=(x732+x731);
IkReal x927=(x769+x766);
IkReal x928=(x709+x707);
IkReal x929=(x713+x715+x716+x792);
IkReal x930=(x727+x728+x729+x818);
IkReal x931=(x757+x756+x871+x872);
IkReal x932=(x747+x748+x843+x849);
IkReal x933=(x700+x777+x776+x778);
IkReal x934=(x764+x881+x883+x882);
IkReal x935=(x708+x786+x787+x785);
IkReal x936=(x739+x829+x828+x830);
IkReal x937=(x745+x834+x835+x836);
IkReal x938=(x733+x819+x821+x820);
IkReal x939=(x754+x751+x750+x753+x852);
IkReal x940=(x759+x761+x762+x763+x879);
IkReal x941=(x723+x724+x726+x805+x806);
IkReal x942=(x719+x720+x721+x804+x802);
IkReal x943=(x702+x701+x779+x780+x781);
IkReal x944=(x737+x738+x827+x826+x825);
IkReal x945=(x711+x712+x790+x788+x789);
IkReal x946=(x768+x767+x885+x884+x886);
IkReal x947=(x736+x735+x823+x822+x824);
IkReal x948=(x743+x740+x831+x832+x833);
IkReal x949=(x698+x699+x773+x775+x774);
IkReal x950=(x703+x706+x704+x705+x782+x783+x784);
IkReal x951=(x730+x894+x892+x893+x816+x817+x814+x815);
IkReal x952=(x718+x799+x889+x888+x890+x801+x800+x803);
IkReal x953=(x722+x725+x891+x812+x813+x810+x811+x809+x808+x807);
IkReal x954=(x714+x717+x791+x793+x795+x794+x797+x796+x798+x887);
IkReal x955=(x758+x760+x878+x875+x876+x877+x880+x924+x922+x923+x920+x921+x919+x918+x917+x916+x915);
IkReal x956=(x561+x746+x749+x850+x896+x897+x895+x898+x899+x837+x838+x839+x841+x840+x842+x845+x844+x847+x846+x848);
IkReal x957=(x752+x853+x851+x856+x857+x854+x855+x858+x904+x905+x906+x907+x900+x901+x902+x903+x908+x909);
IkReal x958=(x561+x755+x859+x869+x868+x867+x866+x865+x864+x863+x862+x861+x860+x870+x873+x874+x913+x912+x911+x910+x914);
op[41]=((((-0.066)*gclwh1_2*x568))+(((-1.0)*gclwh10_2*x571))+(((-1.0)*gclwh12_2*x613))+(((0.132)*gclwh12_2*x594))+((gclwh6_2*x607))+(((0.132)*gclwh1_2*x592))+(((-0.00066)*x678))+(((-0.132)*npx*x586))+(((-1.0)*gclwh8_2*x648))+(((0.132)*gclwh4_2*x583))+(((0.066)*gclwh14_2*x568))+(((0.132)*gclwh3_2*x594))+(((-0.066)*gclwh3_2*x562))+((gclwh1_2*x622))+((gclwh3_2*x613))+x944+((gclwh14_2*x622))+(((-0.066)*gclwh4_2*x598))+(((-0.066)*gclwh12_2*x562))+(((-1.0)*x936)));
op[42]=((((0.3268)*gclwh11_0*rxp2_2))+(((-1.0)*x949))+(((-3.268)*gclwh13_0*x594))+(((0.3268)*gclwh9_0*rxp0_2))+(((3.268)*gclwh15_0*x592))+(((1.634)*gclwh13_0*x562))+(((-1.634)*gclwh15_0*x568))+(((-0.3268)*x618))+(((-3.268)*gclwh5_0*x583))+(((-1.634)*gclwh2_0*x562))+((gclwh13_0*x641))+(((-1.634)*gclwh0_0*x568))+((gclwh2_0*x641))+(((-1.0)*gclwh15_0*x661))+((gclwh0_0*x661))+(((1.634)*pp*x570))+x933+(((3.268)*npy*x584))+(((0.01634)*x570))+(((3.268)*gclwh0_0*x592)));
op[43]=((1.299066)+(((-1.0)*x943))+x950);
op[44]=((0.03602)+((x562*x676))+(((-0.8)*x642))+(((8.0)*gclwh15_10*x592))+(((-1.0)*x568*x621))+(((0.04)*gclwh5_10*r22))+(((0.8)*gclwh11_10*rxp2_2))+(((-8.0)*gclwh5_10*x583))+(((0.8)*x623))+((x598*x674))+(((-8.0)*gclwh13_10*x594))+(((0.04)*x569))+(((-0.04)*gclwh15_10*r20)));
op[45]=((((-0.00536)*x608))+(((-1.072)*gclwh5_15*x583))+((x562*x657))+(((0.3136)*x591))+(((0.00536)*x666))+(((0.3136)*gclwh11_13*rxp2_2))+(((0.00536)*x627))+(((-1.0)*x568*x597))+(((-0.3136)*gclwh7_13*rxp1_2))+(((1.072)*gclwh15_15*x592))+(((-1.072)*gclwh13_15*x594))+((x598*x600)));
op[46]=((((0.132)*gclwh0_0*x592))+(((0.066)*gclwh13_0*x562))+(((-0.066)*gclwh0_0*x568))+(((-1.0)*gclwh7_0*x607))+(((0.066)*pp*x570))+((gclwh0_0*x622))+(((-0.066)*gclwh15_0*x568))+(((-1.0)*gclwh15_0*x622))+(((-0.132)*gclwh5_0*x583))+((gclwh9_0*x648))+(((-0.132)*gclwh13_0*x594))+((gclwh11_0*x571))+((gclwh13_0*x613))+(((-0.066)*gclwh2_0*x562))+((gclwh2_0*x613))+x949+(((0.132)*npy*x584))+(((0.00066)*x570))+(((-1.0)*x933))+(((0.132)*gclwh15_0*x592)));
op[47]=((0.033734)+(((-1.0)*x950))+x943);
op[48]=((((-1.0)*x928))+(((0.1634)*x635))+(((-1.0)*x945))+((gclwh8_12*x679))+(((-1.0)*gclwh12_8*x626))+(((-0.817)*gclwh6_12*x562))+(((-0.00817)*gclwh6_12*r21))+(((0.817)*gclwh8_12*x568))+x710+(((0.817)*gclwh10_12*x598))+((x580*x673))+x935+(((-1.634)*gclwh8_12*x592))+(((-1.634)*gclwh10_12*x583))+(((-1.0)*gclwh4_8*x638))+((gclwh10_12*x617)));
op[49]=((((-1.0)*x929))+(((-0.135089)*x605))+(((-1.0)*gclwh8_11*x568))+((gclwh14_3*x610))+(((-1.0)*gclwh10_11*x598))+((gclwh6_11*x562))+(((-1.0)*gclwh4_3*x687))+(((-1.0)*x952))+x954+x942);
op[50]=((0.210112)+(((-1.0)*gclwh10_11*x574))+((gclwh4_11*x647))+(((4.0)*gclwh10_11*x583))+(((4.0)*gclwh8_11*x592))+((gclwh12_11*x660))+(((2.0)*gclwh6_11*x562))+(((-2.0)*gclwh8_11*x568))+(((-2.0)*gclwh10_11*x598))+(((-4.0)*gclwh6_11*x594))+((gclwh6_11*x616))+(((-0.02)*x615))+(((-1.0)*gclwh14_11*x686)));
op[51]=((((-1.0)*gclwh10_2*r22*x595))+((x588*x680))+((gclwh12_14*x637))+(((-0.17)*x635))+((gclwh12_2*x655))+(((-1.0)*gclwh14_14*x694))+(((-1.0)*gclwh14_2*x593))+(((-1.0)*gclwh10_2*x589))+(((0.784)*gclwh6_2*x562))+(((-1.568)*gclwh6_2*x594))+(((0.0536)*x620))+(((-1.0)*gclwh8_2*x649))+((gclwh6_2*x575))+(((0.17)*x646))+(((-0.784)*gclwh8_2*x568))+((gclwh4_8*x636))+((gclwh4_2*x639))+(((1.568)*gclwh10_2*x583)));
op[52]=(((x565*x580))+(((-1.0)*x945))+(((0.033)*gclwh10_12*x598))+(((0.033)*gclwh8_12*x568))+((gclwh12_8*x596))+((gclwh4_8*x599))+((gclwh10_12*x625))+(((-1.0)*gclwh10_12*npz*x565))+(((-1.0)*x710))+((gclwh8_12*x690))+(((-1.0)*gclwh8_12*npx*x565))+(((-0.0066)*x635))+(((-0.033)*gclwh6_12*x562))+(((-1.0)*gclwh6_12*x633))+x935+x928);
op[53]=((((-1.0)*gclwh4_3*x619))+(((-1.0)*x942))+((gclwh10_11*x598))+(((-1.0)*gclwh6_11*x562))+(((-0.001809)*x605))+((gclwh14_3*x695))+((gclwh8_11*x568))+(((-1.0)*x952))+x929+x954);
op[54]=(((gclwh15_1*x610))+(((-1.0)*x941))+(((-0.135089)*x692))+(((-1.0)*gclwh7_10*x562))+(((-1.0)*gclwh5_1*x687))+((gclwh9_10*x568))+((gclwh11_10*x598))+(((-1.0)*x951))+x930+x953);
op[55]=((((-1.0)*x926))+(((-1.0)*gclwh5_9*x638))+(((-0.817)*gclwh7_13*x562))+(((0.817)*gclwh11_13*x598))+(((0.817)*gclwh9_13*x568))+(((-1.634)*gclwh11_13*x583))+(((-1.0)*x947))+((gclwh11_13*x617))+(((-1.634)*gclwh9_13*x592))+(((1.634)*gclwh7_13*x594))+((gclwh9_13*x679))+(((-1.0)*gclwh13_9*x626))+x734+(((-0.00817)*x631))+x938+(((0.1634)*x654)));
op[56]=((((-1.0)*gclwh5_9*x636))+(((-1.0)*gclwh11_0*r22*x595))+(((-1.0)*gclwh15_0*x593))+(((-0.784)*gclwh9_0*x568))+(((-0.17)*x632))+(((-1.0)*gclwh11_0*x589))+(((-1.568)*gclwh7_0*x594))+((gclwh13_0*x655))+((gclwh15_15*x694))+(((-0.0536)*gclwh5_15*rxp2_2))+(((-1.0)*gclwh9_0*x649))+(((-1.0)*gclwh13_15*x637))+(((0.17)*x654))+(((1.568)*gclwh9_0*x592))+((gclwh7_0*x575))+(((0.784)*gclwh7_0*x562))+((gclwh5_0*x639))+(((1.568)*gclwh11_0*x583)));
op[57]=((0.210112)+(((-2.0)*gclwh11_10*x598))+(((-4.0)*pz*x573))+(((4.0)*gclwh11_10*x583))+((gclwh7_10*x616))+(((-2.0)*gclwh9_10*x568))+(((-1.0)*gclwh11_10*x574))+(((2.0)*gclwh7_10*x562))+(((-1.0)*gclwh9_10*x659))+(((4.0)*gclwh9_10*x592))+((gclwh13_10*x660))+((gclwh5_10*x647))+(((-1.0)*gclwh15_10*x686)));
op[58]=(((gclwh7_10*x562))+((gclwh15_1*x695))+(((-1.0)*gclwh11_10*x598))+(((-1.0)*gclwh5_1*x619))+(((-0.001809)*x692))+(((-1.0)*x951))+(((-1.0)*gclwh9_10*x568))+x953+x941+(((-1.0)*x930)));
op[59]=((((0.033)*gclwh9_13*x568))+(((-1.0)*gclwh11_13*npz*x565))+(((-1.0)*x947))+((gclwh13_9*x596))+(((-0.033)*gclwh7_13*x562))+(((0.033)*gclwh11_13*x598))+((gclwh11_13*x625))+((gclwh9_13*x690))+((gclwh5_9*x599))+(((-1.0)*x734))+(((-0.00033)*x631))+(((-0.0066)*x654))+x938+x926+((gclwh7_13*npy*x565))+(((-1.0)*gclwh9_13*npx*x565)));
op[60]=((((-1.0)*x948))+(((-1.0)*gclwh10_12*x638))+(((-0.817)*gclwh4_8*x598))+(((-1.0)*gclwh4_8*x617))+(((0.817)*gclwh14_8*x568))+(((1.634)*gclwh4_8*x583))+(((-0.00817)*x578))+(((-1.0)*x566*x673))+(((-0.817)*gclwh12_8*x562))+(((0.00817)*x603))+(((-1.0)*x744))+x937+x925+((gclwh6_12*x626))+(((1.634)*gclwh12_8*x594))+(((-0.1634)*x667)));
op[61]=((0.685445)+(((1.35089)*gclwh12_3*x594))+(((1.35089)*gclwh3_3*x594))+(((-1.0)*gclwh14_11*x568))+(((-0.665445)*r22*x582))+(((1.35089)*gclwh4_3*x583))+(((-0.00675445)*x669))+(((1.35089)*gclwh1_3*x592))+(((0.00675445)*x629))+(((-0.665445)*gclwh12_3*x562))+(((-1.35089)*gclwh14_3*x592))+(((0.00675445)*x689))+((gclwh4_11*x598))+(((-0.685445)*gclwh3_3*x562))+((gclwh12_11*x562))+(((-0.00675445)*x677))+(((-1.0)*x957))+x939+x956+(((0.665445)*gclwh14_3*x568))+(((-0.685445)*gclwh1_3*x568))+(((0.00675445)*x650))+(((-1.0)*x932)));
op[62]=((0.089834)+((gclwh12_11*x616))+(((-4.0)*gclwh12_11*x594))+(((-2.0)*gclwh14_11*x568))+(((4.0)*gclwh14_11*x592))+(((-1.0)*gclwh6_11*x660))+(((2.0)*gclwh12_11*x562))+(((-4.0)*gclwh4_11*x583))+(((-0.02)*x624))+((gclwh8_11*x686))+((gclwh10_11*x647))+((gclwh4_11*x574))+(((2.0)*gclwh4_11*x598)));
op[63]=((((0.784)*gclwh12_2*x562))+((x586*x680))+((gclwh8_2*x593))+(((-1.568)*gclwh4_2*x583))+(((1.7)*pz*x566))+(((-1.7)*gclwh12_8*x594))+(((0.0085)*x672))+(((-1.0)*gclwh14_2*x649))+(((-1.0)*gclwh3_2*x575))+(((-1.0)*gclwh6_2*x655))+(((-0.784)*gclwh14_2*x568))+((gclwh10_2*x639))+(((-1.7)*gclwh4_8*x583))+(((0.85)*gclwh4_8*x598))+(((-1.568)*gclwh1_2*x592))+(((0.784)*gclwh1_2*x568))+(((-0.0085)*x603))+(((-1.0)*gclwh1_2*x649))+(((-0.85)*gclwh14_8*x568))+(((0.85)*gclwh12_8*x562))+(((0.784)*gclwh3_2*x562))+(((-1.568)*gclwh3_2*x594))+x944+(((0.0085)*x578))+((gclwh4_2*x589))+((gclwh12_2*x575))+((x595*x678))+(((-1.568)*gclwh12_2*x594))+(((-1.0)*x936)));
op[64]=(((gclwh6_12*x596))+(((-0.00033)*x603))+(((0.00033)*x578))+((x565*x566))+(((0.033)*gclwh12_8*x562))+(((-0.033)*gclwh14_8*x568))+(((-1.0)*x565*x601))+(((-1.0)*gclwh4_8*npz*x565))+(((-1.0)*gclwh10_12*x599))+(((-1.0)*x744))+x925+x948+((gclwh4_8*x625))+(((0.033)*gclwh4_8*x598))+(((-0.0066)*x667))+(((-1.0)*x937)));
op[65]=((-0.019045)+((gclwh1_3*x602))+(((-1.0)*gclwh4_11*x598))+(((-0.019045)*gclwh1_3*x568))+(((0.01809)*gclwh4_3*x583))+((gclwh14_3*x602))+(((-1.0)*gclwh12_11*x562))+(((-9.045e-5)*x669))+((gclwh14_11*x568))+(((-0.01809)*gclwh14_3*x592))+(((-9.045e-5)*x677))+(((0.01809)*gclwh1_3*x592))+(((0.000955)*gclwh12_3*x562))+(((0.01809)*gclwh3_3*x594))+(((0.01809)*gclwh12_3*x594))+(((0.000955)*r22*x582))+(((-0.000955)*gclwh14_3*x568))+(((9.045e-5)*x629))+(((-1.0)*x957))+x932+x956+(((-0.019045)*gclwh3_3*x562))+(((-1.0)*x939)));
op[66]=((-0.685445)+(((-0.00675445)*x577))+(((-0.685445)*gclwh0_1*x568))+(((0.00675445)*x606))+(((-0.665445)*gclwh15_1*x568))+(((0.665445)*gclwh13_1*x562))+(((1.35089)*gclwh2_1*x594))+(((0.00675445)*x630))+(((-1.35089)*gclwh13_1*x594))+(((1.35089)*gclwh0_1*x592))+((gclwh5_10*x598))+(((0.00675445)*x681))+((gclwh13_10*x562))+(((-1.0)*gclwh15_10*x568))+(((1.35089)*gclwh15_1*x592))+(((-1.0)*x955))+(((-1.35089)*gclwh5_1*x583))+(((-0.685445)*gclwh2_1*x562))+x958+x940+(((0.00675445)*x658))+(((0.665445)*gclwh5_1*x598))+(((-1.0)*x931)));
op[67]=((((-1.0)*x927))+(((-1.0)*gclwh7_13*x626))+((gclwh11_13*x638))+(((0.817)*gclwh5_9*x598))+(((-1.634)*gclwh5_9*x583))+(((-1.634)*gclwh13_9*x594))+(((1.634)*x770))+(((-0.817)*gclwh15_9*x568))+(((-0.00817)*x576))+(((0.1634)*x591))+x765+((gclwh5_9*x617))+(((0.817)*gclwh13_9*x562))+(((0.00817)*x644))+x946+(((-1.0)*x934)));
op[68]=((((0.0085)*x685))+(((0.0085)*x644))+(((-1.0)*gclwh0_0*x649))+(((-1.568)*npy*x584))+((gclwh15_0*x649))+(((-1.0)*gclwh11_0*x639))+(((0.1568)*x618))+(((1.568)*gclwh13_0*x594))+(((-1.0)*gclwh2_0*x575))+(((0.85)*gclwh5_9*x598))+(((-1.568)*gclwh15_0*x592))+(((-1.0)*x570*x595))+(((-0.85)*gclwh15_9*x568))+(((-1.0)*gclwh9_0*x593))+(((-1.7)*gclwh5_9*x583))+(((0.784)*gclwh15_0*x568))+(((-0.784)*gclwh13_0*x562))+(((1.7)*x770))+(((-1.7)*gclwh13_9*x594))+(((-1.568)*gclwh0_0*x592))+(((0.784)*gclwh2_0*x562))+(((-1.0)*gclwh13_0*x575))+(((1.568)*gclwh5_0*x583))+(((0.784)*gclwh0_0*x568))+x949+(((-0.00784)*x570))+(((0.85)*gclwh13_9*x562))+(((-0.0085)*x576))+(((-1.0)*x933)));
op[69]=((0.089834)+(((-1.0)*x950))+x943);
op[70]=((0.019045)+(((-1.0)*x940))+(((-9.045e-5)*x577))+(((-0.000955)*gclwh13_1*x562))+(((-0.000955)*gclwh5_1*x598))+(((9.045e-5)*x606))+(((-0.01809)*gclwh13_1*x594))+(((0.01809)*gclwh15_1*x592))+(((-0.01809)*gclwh5_1*x583))+(((9.045e-5)*x658))+(((-1.0)*gclwh5_10*x598))+(((-1.0)*gclwh13_10*x562))+((gclwh0_1*x602))+((gclwh15_10*x568))+(((0.01809)*gclwh2_1*x594))+(((-0.019045)*gclwh0_1*x568))+(((-1.0)*x955))+(((9.045e-5)*x630))+(((0.01809)*gclwh0_1*x592))+x931+x958+(((-0.019045)*gclwh2_1*x562))+(((0.000955)*gclwh15_1*x568)));
op[71]=((((-1.0)*gclwh15_9*npx*x565))+(((-1.0)*gclwh5_9*x625))+(((0.0066)*x591))+(((-1.0)*x927))+(((0.033)*gclwh15_9*x568))+(((0.00033)*x576))+(((-1.0)*x946))+((gclwh5_9*npz*x565))+(((-0.033)*gclwh5_9*x598))+(((-0.033)*gclwh13_9*x562))+(((-1.0)*gclwh7_13*x596))+(((-1.0)*gclwh13_9*x633))+x765+((x565*x683))+((gclwh11_13*x599))+x934);
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x959=htj1*htj1;
CheckValue<IkReal> x960=IKPowWithIntegerCheck(((1.0)+x959),-1);
if(!x960.valid){
continue;
}
cj1array[numsolutions]=((x960.value)*(((1.0)+(((-1.0)*x959)))));
CheckValue<IkReal> x961=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x961.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x961.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x962=htj2*htj2;
CheckValue<IkReal> x963=IKPowWithIntegerCheck(((1.0)+x962),-1);
if(!x963.valid){
continue;
}
cj2array[numsolutions]=((x963.value)*(((1.0)+(((-1.0)*x962)))));
CheckValue<IkReal> x964=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x964.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x964.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x965=htj3*htj3;
CheckValue<IkReal> x966=IKPowWithIntegerCheck(((1.0)+x965),-1);
if(!x966.valid){
continue;
}
cj3array[numsolutions]=((x966.value)*(((1.0)+(((-1.0)*x965)))));
CheckValue<IkReal> x967=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x967.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x967.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x968=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x968);
rxp1_0=(pz*r11);
rxp1_1=(r01*x968);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x969=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x969);
rxp1_0=(pz*r11);
rxp1_1=(r01*x969);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x970=IKPowWithIntegerCheck(r22,-1);
if(!x970.valid){
continue;
}
CheckValue<IkReal> x971=IKPowWithIntegerCheck(sj3,-1);
if(!x971.valid){
continue;
}
sj4array[0]=((x970.value)*(x971.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x972=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x972);
rxp1_0=(pz*r11);
rxp1_1=(r01*x972);
IkReal x973=((16.0)*sj4);
IkReal x974=(cj1*cj2);
IkReal x975=((4.0)*sj3);
IkReal x976=((8.0)*sj4);
IkReal x977=((4.0)*cj4);
IkReal x978=(sj1*sj2);
IkReal x979=((4.0)*sj4);
IkReal x980=(cj3*r02);
IkReal x981=((16.0)*sj3);
IkReal x982=((8.0)*sj3);
IkReal x983=((12.0)*cj4);
IkReal x984=((12.0)*sj4);
IkReal x985=(cj3*r12);
IkReal x986=(r11*x975);
IkReal x987=(r01*x975);
IkReal x988=(r01*x978);
IkReal x989=(cj3*cj4*r01);
IkReal x990=(cj3*cj4*r11);
IkReal x991=(cj3*r10*x977);
IkReal x992=(x984*x985);
IkReal x993=(cj3*r00*x977);
IkReal x994=(x980*x984);
IkReal x995=(r00*x978*x979);
IkReal x996=(r02*x978*x983);
IkReal x997=(r00*x974*x979);
IkReal x998=(r02*x974*x983);
IkReal x999=(r10*x978*x979);
IkReal x1000=(r12*x974*x983);
IkReal x1001=(r12*x978*x983);
IkReal x1002=(r10*x974*x979);
IkReal x1003=(x997+x986);
IkReal x1004=(x999+x987);
IkReal x1005=(x991+x995);
IkReal x1006=(x992+x998);
IkReal x1007=(x1002+x993);
IkReal x1008=(x1001+x994);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*r10*x981))+(((-16.0)*x990))+((r01*x973*x974))+(((-1.0)*x973*x988)))))))+(((0.5)*(IKabs((x1003+(((-1.0)*x1005))+(((-1.0)*x1006))+x996)))))+(((0.5)*(IKabs((x1005+(((-1.0)*x1003))+(((-1.0)*x1006))+x996)))))+(((0.5)*(IKabs((x1004+x1000+(((-1.0)*x1008))+(((-1.0)*x1007)))))))+(((0.5)*(IKabs((x1004+(((-1.0)*x1007))+(((-1.0)*r12*x977*x978))+((r12*x974*x977))+(((-1.0)*x979*x980)))))))+(((0.5)*(IKabs(((((-1.0)*r11*x973*x974))+(((-1.0)*r00*x981))+(((-16.0)*x989))+((r11*x973*x978)))))))+(IKabs(((((-1.0)*r00*x982))+(((-1.0)*r11*x974*x976))+(((-8.0)*x989))+((r11*x976*x978)))))+(((0.5)*(IKabs((x1003+(((-1.0)*x1005))+((r02*x977*x978))+(((-1.0)*r02*x974*x977))+(((-1.0)*x979*x985)))))))+(IKabs(((((-1.0)*r10*x982))+((r01*x974*x976))+(((-1.0)*x976*x988))+(((-8.0)*x990)))))+(((0.5)*(IKabs((x1007+x1000+(((-1.0)*x1008))+(((-1.0)*x1004))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1009=(r10*sj3);
IkReal x1010=(r01*sj4);
IkReal x1011=(cj1*cj2);
IkReal x1012=(cj3*cj4);
IkReal x1013=(sj1*sj2);
IkReal x1014=(cj4*r02);
IkReal x1015=((4.0)*r11*sj3);
IkReal x1016=(cj3*r12*sj4);
IkReal x1017=((4.0)*r00*sj4);
IkReal x1018=((4.0)*r10*x1012);
IkReal x1019=((12.0)*x1016);
IkReal x1020=((4.0)*x1016);
IkReal x1021=(x1011*x1017);
IkReal x1022=(x1013*x1017);
IkReal x1023=((12.0)*x1013*x1014);
IkReal x1024=((12.0)*x1011*x1014);
IkReal x1025=((4.0)*x1013*x1014);
IkReal x1026=((4.0)*x1011*x1014);
IkReal x1027=(x1015+x1021);
IkReal x1028=(x1018+x1022);
IkReal x1029=(x1026+x1020);
IkReal x1030=(x1019+x1024);
IkReal x1031=((((-8.0)*x1009))+(((-8.0)*x1010*x1013))+(((-8.0)*r11*x1012))+(((8.0)*x1010*x1011)));
op[0]=(x1025+x1027+(((-1.0)*x1028))+(((-1.0)*x1029)));
op[1]=x1031;
op[2]=((((-1.0)*x1030))+x1027+x1023+(((-1.0)*x1028)));
op[3]=((((-16.0)*x1009))+(((-16.0)*x1010*x1013))+(((-16.0)*r11*x1012))+(((16.0)*x1010*x1011)));
op[4]=((((-1.0)*x1030))+x1023+x1028+(((-1.0)*x1027)));
op[5]=x1031;
op[6]=(x1025+x1028+(((-1.0)*x1027))+(((-1.0)*x1029)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1032=(cj1*cj2);
IkReal x1033=((4.0)*cj4);
IkReal x1034=(sj1*sj2);
IkReal x1035=((4.0)*sj4);
IkReal x1036=(r00*sj3);
IkReal x1037=(cj3*r02);
IkReal x1038=((4.0)*r01*sj3);
IkReal x1039=((16.0)*r11*sj4);
IkReal x1040=(cj3*cj4*r01);
IkReal x1041=((12.0)*cj4*r12);
IkReal x1042=((8.0)*r11*sj4);
IkReal x1043=(cj3*r00*x1033);
IkReal x1044=((12.0)*sj4*x1037);
IkReal x1045=(x1035*x1037);
IkReal x1046=(r10*x1032*x1035);
IkReal x1047=(r10*x1034*x1035);
IkReal x1048=(x1032*x1041);
IkReal x1049=(x1034*x1041);
IkReal x1050=(r12*x1032*x1033);
IkReal x1051=(r12*x1033*x1034);
IkReal x1052=(x1047+x1038);
IkReal x1053=(x1043+x1046);
IkReal x1054=(x1051+x1045);
IkReal x1055=(x1044+x1049);
IkReal x1056=((((-1.0)*x1032*x1042))+(((-8.0)*x1040))+((x1034*x1042))+(((-8.0)*x1036)));
j5evalpoly[0]=((((-1.0)*x1054))+(((-1.0)*x1052))+(((htj5*htj5*htj5)*(((((-16.0)*x1036))+(((-1.0)*x1032*x1039))+((x1034*x1039))+(((-16.0)*x1040))))))+((x1056*(htj5*htj5*htj5*htj5*htj5)))+x1050+x1053+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x1055))+(((-1.0)*x1053))+x1052+x1048))))+((htj5*x1056))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x1054))+(((-1.0)*x1053))+x1050+x1052))))+(((htj5*htj5)*(((((-1.0)*x1055))+(((-1.0)*x1052))+x1053+x1048)))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1057=(cj5*sj4);
IkReal x1058=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1058))+(((-1.0)*r00*x1057)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1058))+((r10*x1057))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1058))+(((-1.0)*r00*x1057))))+IKsqr(((((-1.0)*r11*x1058))+((r10*x1057))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1058))+(((-1.0)*r00*x1057))), ((((-1.0)*r11*x1058))+((r10*x1057))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1059=IKcos(j0);
IkReal x1060=IKsin(j0);
IkReal x1061=(r02*sj4);
IkReal x1062=((0.1)*sj5);
IkReal x1063=(cj5*r11);
IkReal x1064=((1.0)*sj3);
IkReal x1065=(r12*sj4);
IkReal x1066=((1.0)*cj3);
IkReal x1067=(r11*sj5);
IkReal x1068=(cj3*cj4);
IkReal x1069=((1.0)*sj2);
IkReal x1070=(cj5*r01);
IkReal x1071=(r01*sj5);
IkReal x1072=(sj1*sj2);
IkReal x1073=(cj1*cj2);
IkReal x1074=(r00*sj5);
IkReal x1075=((1.0)*cj2);
IkReal x1076=(r10*sj5);
IkReal x1077=((1.0)*cj4);
IkReal x1078=(cj4*cj5*r00);
IkReal x1079=(cj1*x1059);
IkReal x1080=(cj4*cj5*r10);
IkReal x1081=((0.392)*x1060);
IkReal x1082=((1.0)*x1060);
IkReal x1083=(cj1*x1060);
IkReal x1084=((1.0)*cj5*sj4);
evalcond[0]=(x1059+(((-1.0)*r10*x1084))+(((-1.0)*r12*x1077))+((sj4*x1067)));
evalcond[1]=((((-1.0)*r02*x1077))+(((-1.0)*r00*x1084))+((sj4*x1071))+(((-1.0)*x1082)));
evalcond[2]=((((-0.392)*x1059*x1072))+(((0.392)*x1059*x1073))+(((-1.0)*r00*x1062))+(((-0.1)*x1070))+(((-0.134)*x1060))+(((-1.0)*px))+(((0.425)*x1079)));
evalcond[3]=(((x1073*x1081))+(((-1.0)*r10*x1062))+(((-0.1)*x1063))+(((-1.0)*py))+(((0.425)*x1083))+(((0.134)*x1059))+(((-1.0)*x1072*x1081)));
evalcond[4]=(((x1068*x1071))+((sj3*x1070))+((sj3*x1074))+((cj3*x1061))+(((-1.0)*x1059*x1073))+(((-1.0)*x1066*x1078))+((x1059*x1072)));
evalcond[5]=(((sj3*x1076))+((sj3*x1063))+((x1060*x1072))+(((-1.0)*x1066*x1080))+((x1067*x1068))+((cj3*x1065))+(((-1.0)*x1073*x1082)));
evalcond[6]=(((sj3*x1078))+(((-1.0)*sj1*x1059*x1075))+((cj3*x1074))+((cj3*x1070))+(((-1.0)*x1061*x1064))+(((-1.0)*cj4*x1064*x1071))+(((-1.0)*x1069*x1079)));
evalcond[7]=(((sj3*x1080))+((cj3*x1076))+((cj3*x1063))+(((-1.0)*x1069*x1083))+(((-1.0)*cj4*x1064*x1067))+(((-1.0)*x1064*x1065))+(((-1.0)*sj1*x1060*x1075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1085=IKPowWithIntegerCheck(cj3,-1);
if(!x1085.valid){
continue;
}
CheckValue<IkReal> x1086=IKPowWithIntegerCheck(r22,-1);
if(!x1086.valid){
continue;
}
sj4array[0]=((-1.0)*(x1085.value)*(x1086.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1087=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1087);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1087);
IkReal x1088=((16.0)*sj4);
IkReal x1089=(cj1*cj2);
IkReal x1090=((4.0)*sj3);
IkReal x1091=((8.0)*sj4);
IkReal x1092=((4.0)*cj4);
IkReal x1093=(sj1*sj2);
IkReal x1094=((4.0)*sj4);
IkReal x1095=(cj3*r02);
IkReal x1096=((16.0)*sj3);
IkReal x1097=((8.0)*sj3);
IkReal x1098=((12.0)*cj4);
IkReal x1099=((12.0)*sj4);
IkReal x1100=(cj3*r12);
IkReal x1101=(r11*x1090);
IkReal x1102=(r01*x1090);
IkReal x1103=(r01*x1093);
IkReal x1104=(cj3*cj4*r01);
IkReal x1105=(cj3*cj4*r11);
IkReal x1106=(cj3*r10*x1092);
IkReal x1107=(x1099*x1100);
IkReal x1108=(cj3*r00*x1092);
IkReal x1109=(x1095*x1099);
IkReal x1110=(r00*x1093*x1094);
IkReal x1111=(r02*x1093*x1098);
IkReal x1112=(r00*x1089*x1094);
IkReal x1113=(r02*x1089*x1098);
IkReal x1114=(r10*x1093*x1094);
IkReal x1115=(r12*x1089*x1098);
IkReal x1116=(r12*x1093*x1098);
IkReal x1117=(r10*x1089*x1094);
IkReal x1118=(x1101+x1112);
IkReal x1119=(x1102+x1114);
IkReal x1120=(x1106+x1110);
IkReal x1121=(x1107+x1113);
IkReal x1122=(x1108+x1117);
IkReal x1123=(x1109+x1116);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*r11*x1088*x1089))+(((-16.0)*x1104))+((r11*x1088*x1093))+(((-1.0)*r00*x1096)))))))+(IKabs(((((-1.0)*x1091*x1103))+((r01*x1089*x1091))+(((-1.0)*r10*x1097))+(((-8.0)*x1105)))))+(IKabs(((((-1.0)*r11*x1089*x1091))+((r11*x1091*x1093))+(((-8.0)*x1104))+(((-1.0)*r00*x1097)))))+(((0.5)*(IKabs(((((-1.0)*x1088*x1103))+((r01*x1088*x1089))+(((-16.0)*x1105))+(((-1.0)*r10*x1096)))))))+(((0.5)*(IKabs((x1111+x1120+(((-1.0)*x1121))+(((-1.0)*x1118)))))))+(((0.5)*(IKabs((x1119+(((-1.0)*r12*x1092*x1093))+((r12*x1089*x1092))+(((-1.0)*x1094*x1095))+(((-1.0)*x1122)))))))+(((0.5)*(IKabs((x1118+(((-1.0)*r02*x1089*x1092))+(((-1.0)*x1094*x1100))+(((-1.0)*x1120))+((r02*x1092*x1093)))))))+(((0.5)*(IKabs((x1115+x1122+(((-1.0)*x1123))+(((-1.0)*x1119)))))))+(((0.5)*(IKabs((x1115+x1119+(((-1.0)*x1123))+(((-1.0)*x1122)))))))+(((0.5)*(IKabs((x1111+x1118+(((-1.0)*x1121))+(((-1.0)*x1120))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1124=(r10*sj3);
IkReal x1125=(r01*sj4);
IkReal x1126=(cj1*cj2);
IkReal x1127=(cj3*cj4);
IkReal x1128=(sj1*sj2);
IkReal x1129=(cj4*r02);
IkReal x1130=((4.0)*r11*sj3);
IkReal x1131=(cj3*r12*sj4);
IkReal x1132=((4.0)*r00*sj4);
IkReal x1133=((4.0)*r10*x1127);
IkReal x1134=((12.0)*x1131);
IkReal x1135=((4.0)*x1131);
IkReal x1136=(x1126*x1132);
IkReal x1137=(x1128*x1132);
IkReal x1138=((12.0)*x1128*x1129);
IkReal x1139=((12.0)*x1126*x1129);
IkReal x1140=((4.0)*x1128*x1129);
IkReal x1141=((4.0)*x1126*x1129);
IkReal x1142=(x1130+x1136);
IkReal x1143=(x1133+x1137);
IkReal x1144=(x1141+x1135);
IkReal x1145=(x1139+x1134);
IkReal x1146=((((-8.0)*x1124))+(((-8.0)*r11*x1127))+(((8.0)*x1125*x1126))+(((-8.0)*x1125*x1128)));
op[0]=(x1142+x1140+(((-1.0)*x1144))+(((-1.0)*x1143)));
op[1]=x1146;
op[2]=(x1142+x1138+(((-1.0)*x1145))+(((-1.0)*x1143)));
op[3]=((((-16.0)*r11*x1127))+(((-16.0)*x1125*x1128))+(((-16.0)*x1124))+(((16.0)*x1125*x1126)));
op[4]=(x1143+x1138+(((-1.0)*x1142))+(((-1.0)*x1145)));
op[5]=x1146;
op[6]=(x1143+x1140+(((-1.0)*x1142))+(((-1.0)*x1144)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1147=(cj1*cj2);
IkReal x1148=((4.0)*cj4);
IkReal x1149=(sj1*sj2);
IkReal x1150=((4.0)*sj4);
IkReal x1151=(r00*sj3);
IkReal x1152=(cj3*r02);
IkReal x1153=((4.0)*r01*sj3);
IkReal x1154=((16.0)*r11*sj4);
IkReal x1155=(cj3*cj4*r01);
IkReal x1156=((12.0)*cj4*r12);
IkReal x1157=((8.0)*r11*sj4);
IkReal x1158=(cj3*r00*x1148);
IkReal x1159=((12.0)*sj4*x1152);
IkReal x1160=(x1150*x1152);
IkReal x1161=(r10*x1147*x1150);
IkReal x1162=(r10*x1149*x1150);
IkReal x1163=(x1147*x1156);
IkReal x1164=(x1149*x1156);
IkReal x1165=(r12*x1147*x1148);
IkReal x1166=(r12*x1148*x1149);
IkReal x1167=(x1153+x1162);
IkReal x1168=(x1158+x1161);
IkReal x1169=(x1166+x1160);
IkReal x1170=(x1159+x1164);
IkReal x1171=(((x1149*x1157))+(((-1.0)*x1147*x1157))+(((-8.0)*x1151))+(((-8.0)*x1155)));
j5evalpoly[0]=(x1165+x1168+((htj5*x1171))+((x1171*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*((((x1149*x1154))+(((-1.0)*x1147*x1154))+(((-16.0)*x1155))+(((-16.0)*x1151))))))+(((-1.0)*x1167))+(((-1.0)*x1169))+(((htj5*htj5)*((x1163+x1168+(((-1.0)*x1170))+(((-1.0)*x1167))))))+(((htj5*htj5*htj5*htj5)*((x1167+x1163+(((-1.0)*x1170))+(((-1.0)*x1168))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1165+x1167+(((-1.0)*x1168))+(((-1.0)*x1169)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1172=(cj5*sj4);
IkReal x1173=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1173))+(((-1.0)*r00*x1172)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1172))+(((-1.0)*r11*x1173))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1173))+(((-1.0)*r00*x1172))))+IKsqr((((r10*x1172))+(((-1.0)*r11*x1173))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1173))+(((-1.0)*r00*x1172))), (((r10*x1172))+(((-1.0)*r11*x1173))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1174=IKcos(j0);
IkReal x1175=IKsin(j0);
IkReal x1176=(r02*sj4);
IkReal x1177=((0.1)*sj5);
IkReal x1178=(cj5*r11);
IkReal x1179=((1.0)*sj3);
IkReal x1180=(r12*sj4);
IkReal x1181=((1.0)*cj3);
IkReal x1182=(r11*sj5);
IkReal x1183=(cj3*cj4);
IkReal x1184=((1.0)*sj2);
IkReal x1185=(cj5*r01);
IkReal x1186=(r01*sj5);
IkReal x1187=(sj1*sj2);
IkReal x1188=(cj1*cj2);
IkReal x1189=(r00*sj5);
IkReal x1190=((1.0)*cj2);
IkReal x1191=(r10*sj5);
IkReal x1192=((1.0)*cj4);
IkReal x1193=(cj4*cj5*r00);
IkReal x1194=(cj1*x1174);
IkReal x1195=(cj4*cj5*r10);
IkReal x1196=((0.392)*x1175);
IkReal x1197=((1.0)*x1175);
IkReal x1198=(cj1*x1175);
IkReal x1199=((1.0)*cj5*sj4);
evalcond[0]=(x1174+((sj4*x1182))+(((-1.0)*r10*x1199))+(((-1.0)*r12*x1192)));
evalcond[1]=((((-1.0)*r00*x1199))+((sj4*x1186))+(((-1.0)*x1197))+(((-1.0)*r02*x1192)));
evalcond[2]=((((-0.1)*x1185))+(((0.425)*x1194))+(((0.392)*x1174*x1188))+(((-1.0)*px))+(((-0.392)*x1174*x1187))+(((-1.0)*r00*x1177))+(((-0.134)*x1175)));
evalcond[3]=(((x1188*x1196))+(((0.425)*x1198))+(((-1.0)*py))+(((-1.0)*x1187*x1196))+(((0.134)*x1174))+(((-1.0)*r10*x1177))+(((-0.1)*x1178)));
evalcond[4]=((((-1.0)*x1181*x1193))+((x1183*x1186))+((x1174*x1187))+(((-1.0)*x1174*x1188))+((sj3*x1185))+((sj3*x1189))+((cj3*x1176)));
evalcond[5]=(((sj3*x1178))+(((-1.0)*x1181*x1195))+((x1182*x1183))+(((-1.0)*x1188*x1197))+((x1175*x1187))+((sj3*x1191))+((cj3*x1180)));
evalcond[6]=((((-1.0)*cj4*x1179*x1186))+(((-1.0)*x1184*x1194))+((sj3*x1193))+(((-1.0)*x1176*x1179))+(((-1.0)*sj1*x1174*x1190))+((cj3*x1189))+((cj3*x1185)));
evalcond[7]=((((-1.0)*cj4*x1179*x1182))+(((-1.0)*x1179*x1180))+(((-1.0)*x1184*x1198))+((sj3*x1195))+((cj3*x1178))+(((-1.0)*sj1*x1175*x1190))+((cj3*x1191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1200=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1200);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1200);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1201=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1201);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1201);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1202=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1202);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1202);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1203=IKPowWithIntegerCheck(r22,-1);
if(!x1203.valid){
continue;
}
sj4array[0]=((-1.0)*(x1203.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1204=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1204);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1204);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1206 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1206.valid){
continue;
}
IkReal x1205=x1206.value;
j5array[0]=((-1.0)*x1205);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1205)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1207=(cj5*sj4);
IkReal x1208=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1207))+((r01*x1208)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1207))+(((-1.0)*r11*x1208)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1207))+((r01*x1208))))+IKsqr((((r10*x1207))+(((-1.0)*r11*x1208))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1207))+((r01*x1208))), (((r10*x1207))+(((-1.0)*r11*x1208))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1209=IKcos(j0);
IkReal x1210=IKsin(j0);
IkReal x1211=((0.1)*sj5);
IkReal x1212=(cj5*r11);
IkReal x1213=(cj5*r01);
IkReal x1214=(sj4*sj5);
IkReal x1215=((0.425)*cj1);
IkReal x1216=((1.0)*cj1*sj2);
IkReal x1217=((1.0)*cj2*sj1);
IkReal x1218=((1.0)*cj5*sj4);
evalcond[0]=(x1209+((r11*x1214))+(((-1.0)*r10*x1218)));
evalcond[1]=((((-1.0)*r00*x1218))+((r01*x1214))+(((-1.0)*x1210)));
evalcond[2]=(((r00*sj5))+x1213+(((-1.0)*x1209*x1216))+(((-1.0)*x1209*x1217)));
evalcond[3]=(x1212+((r10*sj5))+(((-1.0)*x1210*x1216))+(((-1.0)*x1210*x1217)));
evalcond[4]=((((-0.1)*x1213))+(((-1.0)*r00*x1211))+(((-1.0)*px))+(((-0.134)*x1210))+((x1209*x1215)));
evalcond[5]=(((x1210*x1215))+(((-0.1)*x1212))+(((-1.0)*py))+(((0.134)*x1209))+(((-1.0)*r10*x1211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1219=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1219);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1219);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1220=IKPowWithIntegerCheck(r22,-1);
if(!x1220.valid){
continue;
}
sj4array[0]=((x1220.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1221=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1221);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1221);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1223 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1223.valid){
continue;
}
IkReal x1222=x1223.value;
j5array[0]=((-1.0)*x1222);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1222)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1224=(cj5*sj4);
IkReal x1225=(sj4*sj5);
if( IKabs((((r01*x1225))+(((-1.0)*r00*x1224)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1225))+((r10*x1224)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1225))+(((-1.0)*r00*x1224))))+IKsqr(((((-1.0)*r11*x1225))+((r10*x1224))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1225))+(((-1.0)*r00*x1224))), ((((-1.0)*r11*x1225))+((r10*x1224))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1226=IKcos(j0);
IkReal x1227=IKsin(j0);
IkReal x1228=(r00*sj5);
IkReal x1229=(cj5*r11);
IkReal x1230=(sj4*sj5);
IkReal x1231=(r10*sj5);
IkReal x1232=((0.425)*cj1);
IkReal x1233=((1.0)*cj5);
IkReal x1234=((1.0)*cj1*sj2);
IkReal x1235=((1.0)*cj2*sj1);
evalcond[0]=(x1226+(((-1.0)*r10*sj4*x1233))+((r11*x1230)));
evalcond[1]=((((-1.0)*x1227))+((r01*x1230))+(((-1.0)*r00*sj4*x1233)));
evalcond[2]=((((-0.134)*x1227))+(((-0.1)*cj5*r01))+(((-1.0)*px))+((x1226*x1232))+(((-0.1)*x1228)));
evalcond[3]=((((-1.0)*py))+(((-0.1)*x1231))+(((-0.1)*x1229))+((x1227*x1232))+(((0.134)*x1226)));
evalcond[4]=((((-1.0)*x1228))+(((-1.0)*r01*x1233))+(((-1.0)*x1226*x1235))+(((-1.0)*x1226*x1234)));
evalcond[5]=((((-1.0)*x1231))+(((-1.0)*x1229))+(((-1.0)*x1227*x1235))+(((-1.0)*x1227*x1234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1236=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1236);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1236);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1237=IKPowWithIntegerCheck(r22,-1);
if(!x1237.valid){
continue;
}
sj4array[0]=((x1237.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1238=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1238);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1238);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1240 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1240.valid){
continue;
}
IkReal x1239=x1240.value;
j5array[0]=((-1.0)*x1239);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1239)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1241=(cj5*sj4);
IkReal x1242=(sj4*sj5);
if( IKabs((((r01*x1242))+(((-1.0)*r00*x1241)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1242))+((r10*x1241)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1242))+(((-1.0)*r00*x1241))))+IKsqr(((((-1.0)*r11*x1242))+((r10*x1241))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1242))+(((-1.0)*r00*x1241))), ((((-1.0)*r11*x1242))+((r10*x1241))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1243=IKcos(j0);
IkReal x1244=IKsin(j0);
IkReal x1245=((0.1)*sj5);
IkReal x1246=(sj1*sj2);
IkReal x1247=(cj5*r11);
IkReal x1248=(cj5*r01);
IkReal x1249=(sj4*sj5);
IkReal x1250=(cj1*cj2);
IkReal x1251=((0.392)*x1244);
IkReal x1252=(cj1*x1243);
IkReal x1253=((1.0)*x1244);
IkReal x1254=((1.0)*cj5*sj4);
evalcond[0]=(x1243+((r11*x1249))+(((-1.0)*r10*x1254)));
evalcond[1]=((((-1.0)*x1253))+(((-1.0)*r00*x1254))+((r01*x1249)));
evalcond[2]=(((r00*sj5))+(((-1.0)*x1243*x1250))+x1248+((x1243*x1246)));
evalcond[3]=(x1247+((r10*sj5))+((x1244*x1246))+(((-1.0)*x1250*x1253)));
evalcond[4]=((((0.425)*x1252))+(((-0.1)*x1248))+(((-1.0)*px))+(((-0.134)*x1244))+(((0.392)*x1243*x1250))+(((-0.392)*x1243*x1246))+(((-1.0)*r00*x1245)));
evalcond[5]=((((-1.0)*x1246*x1251))+(((-0.1)*x1247))+(((-1.0)*py))+(((-1.0)*r10*x1245))+((x1250*x1251))+(((0.134)*x1243))+(((0.425)*cj1*x1244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1255=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1255);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1255);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1256=IKPowWithIntegerCheck(r22,-1);
if(!x1256.valid){
continue;
}
sj4array[0]=((-1.0)*(x1256.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1257=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1257);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1257);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1259 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1259.valid){
continue;
}
IkReal x1258=x1259.value;
j5array[0]=((-1.0)*x1258);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1258)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1260=(cj5*sj4);
IkReal x1261=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1260))+((r01*x1261)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1260))+(((-1.0)*r11*x1261)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1260))+((r01*x1261))))+IKsqr((((r10*x1260))+(((-1.0)*r11*x1261))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1260))+((r01*x1261))), (((r10*x1260))+(((-1.0)*r11*x1261))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1262=IKcos(j0);
IkReal x1263=IKsin(j0);
IkReal x1264=((0.1)*sj5);
IkReal x1265=(sj1*sj2);
IkReal x1266=(cj5*r11);
IkReal x1267=(sj4*sj5);
IkReal x1268=(cj1*cj2);
IkReal x1269=((1.0)*sj5);
IkReal x1270=((1.0)*cj5);
IkReal x1271=((0.425)*cj1);
IkReal x1272=((0.392)*x1263);
IkReal x1273=((0.392)*x1262);
IkReal x1274=((1.0)*x1263);
evalcond[0]=(((r11*x1267))+x1262+(((-1.0)*r10*sj4*x1270)));
evalcond[1]=((((-1.0)*x1274))+((r01*x1267))+(((-1.0)*r00*sj4*x1270)));
evalcond[2]=((((-1.0)*r01*x1270))+(((-1.0)*r00*x1269))+(((-1.0)*x1262*x1268))+((x1262*x1265)));
evalcond[3]=((((-1.0)*r10*x1269))+(((-1.0)*x1268*x1274))+((x1263*x1265))+(((-1.0)*x1266)));
evalcond[4]=((((-0.134)*x1263))+(((-1.0)*r00*x1264))+(((-0.1)*cj5*r01))+(((-1.0)*px))+((x1268*x1273))+((x1262*x1271))+(((-1.0)*x1265*x1273)));
evalcond[5]=((((-1.0)*r10*x1264))+(((0.134)*x1262))+(((-1.0)*py))+((x1263*x1271))+((x1268*x1272))+(((-1.0)*x1265*x1272))+(((-0.1)*x1266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1275=IKPowWithIntegerCheck(r22,-1);
if(!x1275.valid){
continue;
}
CheckValue<IkReal> x1276=IKPowWithIntegerCheck(sj3,-1);
if(!x1276.valid){
continue;
}
sj4array[0]=((x1275.value)*(x1276.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1277=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1277);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1277);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1278=((4.0)*r01);
IkReal x1279=((16.0)*r00);
IkReal x1280=(cj3*sj2);
IkReal x1281=((8.0)*r00);
IkReal x1282=(cj2*cj3);
IkReal x1283=(cj4*r01);
IkReal x1284=((16.0)*cj1);
IkReal x1285=((8.0)*sj1);
IkReal x1286=((16.0)*sj1);
IkReal x1287=((8.0)*cj1);
IkReal x1288=(sj2*sj3);
IkReal x1289=(cj2*sj3);
IkReal x1290=(sj1*x1289);
IkReal x1291=((4.0)*cj4*r00);
IkReal x1292=(((sj1*x1288*x1291))+((x1278*x1290))+((cj1*x1278*x1288))+((sj1*x1278*x1280)));
IkReal x1293=(((cj1*x1289*x1291))+((sj1*x1282*x1291))+((cj1*x1278*x1282))+((cj1*x1280*x1291)));
IkReal x1294=(x1293+(((-1.0)*x1292)));
IkReal x1295=((((-1.0)*x1283*x1285*x1288))+((x1280*x1283*x1287))+((x1281*x1290))+(((-1.0)*cj1*x1281*x1282))+((x1283*x1287*x1289))+((x1282*x1283*x1285))+((cj1*x1281*x1288))+((sj1*x1280*x1281)));
IkReal x1296=(x1292+(((-1.0)*x1293)));
op[0]=x1294;
op[1]=x1295;
op[2]=x1294;
op[3]=(((x1280*x1283*x1284))+((cj1*x1279*x1288))+((x1279*x1290))+(((-1.0)*x1283*x1286*x1288))+((x1282*x1283*x1286))+((sj1*x1279*x1280))+(((-1.0)*cj1*x1279*x1282))+((x1283*x1284*x1289)));
op[4]=x1296;
op[5]=x1295;
op[6]=x1296;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1297=(cj5*sj4);
IkReal x1298=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1297))+((r01*x1298)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1297))+(((-1.0)*r11*x1298)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1297))+((r01*x1298))))+IKsqr((((r10*x1297))+(((-1.0)*r11*x1298))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1297))+((r01*x1298))), (((r10*x1297))+(((-1.0)*r11*x1298))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1299=IKcos(j0);
IkReal x1300=IKsin(j0);
IkReal x1301=((0.1)*sj5);
IkReal x1302=((0.392)*sj1);
IkReal x1303=(cj5*r11);
IkReal x1304=((1.0)*cj3);
IkReal x1305=((0.425)*cj1);
IkReal x1306=((1.0)*cj1);
IkReal x1307=(r11*sj5);
IkReal x1308=(cj5*r01);
IkReal x1309=(r01*sj5);
IkReal x1310=(cj3*cj4);
IkReal x1311=(r00*sj5);
IkReal x1312=((1.0)*sj1);
IkReal x1313=(r10*sj5);
IkReal x1314=(sj2*x1300);
IkReal x1315=(cj4*cj5*r00);
IkReal x1316=(sj2*x1299);
IkReal x1317=(cj4*cj5*r10);
IkReal x1318=((1.0)*cj4*sj3);
IkReal x1319=((0.392)*cj1*cj2);
IkReal x1320=(cj2*x1299);
IkReal x1321=((1.0)*cj5*sj4);
IkReal x1322=(cj2*x1300);
evalcond[0]=(x1299+(((-1.0)*r10*x1321))+((sj4*x1307)));
evalcond[1]=((((-1.0)*x1300))+(((-1.0)*r00*x1321))+((sj4*x1309)));
evalcond[2]=((((-1.0)*x1304*x1315))+((sj3*x1311))+((sj3*x1308))+(((-1.0)*x1306*x1320))+((x1309*x1310))+((sj1*x1316)));
evalcond[3]=((((-1.0)*x1304*x1317))+((sj3*x1313))+((x1307*x1310))+((sj3*x1303))+(((-1.0)*x1306*x1322))+((sj1*x1314)));
evalcond[4]=((((-1.0)*x1312*x1320))+((sj3*x1315))+(((-1.0)*x1306*x1316))+((cj3*x1311))+((cj3*x1308))+(((-1.0)*x1309*x1318)));
evalcond[5]=((((-1.0)*x1312*x1322))+((sj3*x1317))+(((-1.0)*x1306*x1314))+(((-1.0)*x1307*x1318))+((cj3*x1313))+((cj3*x1303)));
evalcond[6]=(((x1299*x1305))+(((-0.134)*x1300))+(((-1.0)*r00*x1301))+(((-1.0)*px))+(((-0.1)*x1308))+(((-1.0)*x1302*x1316))+((x1299*x1319)));
evalcond[7]=((((0.134)*x1299))+((x1300*x1319))+((x1300*x1305))+(((-1.0)*py))+(((-1.0)*r10*x1301))+(((-0.1)*x1303))+(((-1.0)*x1302*x1314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1323=IKPowWithIntegerCheck(cj3,-1);
if(!x1323.valid){
continue;
}
CheckValue<IkReal> x1324=IKPowWithIntegerCheck(r22,-1);
if(!x1324.valid){
continue;
}
sj4array[0]=((-1.0)*(x1323.value)*(x1324.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1325=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1325);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1325);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1326=((4.0)*r01);
IkReal x1327=((16.0)*r00);
IkReal x1328=(cj3*sj2);
IkReal x1329=((8.0)*r00);
IkReal x1330=(cj2*cj3);
IkReal x1331=(cj4*r01);
IkReal x1332=((16.0)*cj1);
IkReal x1333=((8.0)*sj1);
IkReal x1334=((16.0)*sj1);
IkReal x1335=((8.0)*cj1);
IkReal x1336=(sj2*sj3);
IkReal x1337=(cj2*sj3);
IkReal x1338=(sj1*x1337);
IkReal x1339=((4.0)*cj4*r00);
IkReal x1340=(((sj1*x1326*x1328))+((sj1*x1336*x1339))+((x1326*x1338))+((cj1*x1326*x1336)));
IkReal x1341=(((cj1*x1328*x1339))+((cj1*x1337*x1339))+((sj1*x1330*x1339))+((cj1*x1326*x1330)));
IkReal x1342=(x1341+(((-1.0)*x1340)));
IkReal x1343=(((x1329*x1338))+(((-1.0)*x1331*x1333*x1336))+((x1328*x1331*x1335))+((cj1*x1329*x1336))+((x1330*x1331*x1333))+(((-1.0)*cj1*x1329*x1330))+((sj1*x1328*x1329))+((x1331*x1335*x1337)));
IkReal x1344=(x1340+(((-1.0)*x1341)));
op[0]=x1342;
op[1]=x1343;
op[2]=x1342;
op[3]=(((x1331*x1332*x1337))+((x1328*x1331*x1332))+((x1330*x1331*x1334))+((sj1*x1327*x1328))+(((-1.0)*x1331*x1334*x1336))+((x1327*x1338))+(((-1.0)*cj1*x1327*x1330))+((cj1*x1327*x1336)));
op[4]=x1344;
op[5]=x1343;
op[6]=x1344;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1345=(cj5*sj4);
IkReal x1346=(sj4*sj5);
if( IKabs((((r01*x1346))+(((-1.0)*r00*x1345)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1346))+((r10*x1345)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1346))+(((-1.0)*r00*x1345))))+IKsqr(((((-1.0)*r11*x1346))+((r10*x1345))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1346))+(((-1.0)*r00*x1345))), ((((-1.0)*r11*x1346))+((r10*x1345))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1347=IKcos(j0);
IkReal x1348=IKsin(j0);
IkReal x1349=((0.1)*sj5);
IkReal x1350=((0.392)*sj1);
IkReal x1351=(cj5*r11);
IkReal x1352=((1.0)*cj3);
IkReal x1353=((0.425)*cj1);
IkReal x1354=((1.0)*cj1);
IkReal x1355=(r11*sj5);
IkReal x1356=(cj5*r01);
IkReal x1357=(r01*sj5);
IkReal x1358=(cj3*cj4);
IkReal x1359=(r00*sj5);
IkReal x1360=((1.0)*sj1);
IkReal x1361=(r10*sj5);
IkReal x1362=(sj2*x1348);
IkReal x1363=(cj4*cj5*r00);
IkReal x1364=(sj2*x1347);
IkReal x1365=(cj4*cj5*r10);
IkReal x1366=((1.0)*cj4*sj3);
IkReal x1367=((0.392)*cj1*cj2);
IkReal x1368=(cj2*x1347);
IkReal x1369=((1.0)*cj5*sj4);
IkReal x1370=(cj2*x1348);
evalcond[0]=(x1347+((sj4*x1355))+(((-1.0)*r10*x1369)));
evalcond[1]=(((sj4*x1357))+(((-1.0)*r00*x1369))+(((-1.0)*x1348)));
evalcond[2]=((((-1.0)*x1352*x1363))+((x1357*x1358))+((sj1*x1364))+(((-1.0)*x1354*x1368))+((sj3*x1359))+((sj3*x1356)));
evalcond[3]=((((-1.0)*x1352*x1365))+((x1355*x1358))+((sj1*x1362))+(((-1.0)*x1354*x1370))+((sj3*x1351))+((sj3*x1361)));
evalcond[4]=((((-1.0)*x1354*x1364))+((cj3*x1359))+((cj3*x1356))+(((-1.0)*x1357*x1366))+((sj3*x1363))+(((-1.0)*x1360*x1368)));
evalcond[5]=((((-1.0)*x1354*x1362))+(((-1.0)*x1355*x1366))+(((-1.0)*x1360*x1370))+((cj3*x1351))+((cj3*x1361))+((sj3*x1365)));
evalcond[6]=((((-1.0)*x1350*x1364))+(((-1.0)*r00*x1349))+(((-1.0)*px))+((x1347*x1367))+((x1347*x1353))+(((-0.134)*x1348))+(((-0.1)*x1356)));
evalcond[7]=((((-1.0)*x1350*x1362))+(((0.134)*x1347))+(((-1.0)*py))+((x1348*x1353))+((x1348*x1367))+(((-1.0)*r10*x1349))+(((-0.1)*x1351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1373 = IKatan2WithCheck(IkReal(((-0.1)*r21)),IkReal(((-0.1)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1373.valid){
continue;
}
IkReal x1371=((1.0)*(x1373.value));
if((((((0.01)*(r20*r20)))+(((0.01)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1374=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01)*(r20*r20)))+(((0.01)*(r21*r21)))))),-1);
if(!x1374.valid){
continue;
}
if( (((-1.0)*(x1374.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1374.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1372=((-1.0)*(IKasin(((-1.0)*(x1374.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))))))));
j5array[0]=((((-1.0)*x1372))+(((-1.0)*x1371)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1371))+(((1.0)*x1372)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1375=cj5*cj5;
IkReal x1376=r21*r21;
IkReal x1377=(sj3*x1375);
IkReal x1378=(((sj3*(r22*r22)))+((sj3*x1376))+(((-1.0)*x1376*x1377))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((x1377*(r20*r20))));
j4eval[0]=x1378;
j4eval[1]=IKsign(x1378);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1379=cj5*cj5;
IkReal x1380=r21*r21;
IkReal x1381=((1.0)*cj3);
IkReal x1382=(cj3*x1379);
IkReal x1383=(((x1380*x1382))+(((-1.0)*x1381*(r22*r22)))+(((-1.0)*x1379*x1381*(r20*r20)))+(((-1.0)*x1380*x1381))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1383;
j4eval[1]=IKsign(x1383);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1384=cj1*cj1;
IkReal x1385=cj2*cj2;
IkReal x1386=(cj2*x1384);
IkReal x1387=(cj1*sj1*sj2);
IkReal x1388=(x1384*x1385);
j0eval[0]=((6.36549089425466)+x1384+(((-12.3585920403546)*x1387))+(((11.3989837172212)*x1388))+(((-11.3989837172212)*cj2*x1387))+(((-5.69949185861059)*x1385))+(((12.3585920403546)*x1386)));
j0eval[1]=IKsign(((42905.0)+(((-76832.0)*cj2*x1387))+(((-83300.0)*x1387))+(((6740.25)*x1384))+(((83300.0)*x1386))+(((-38416.0)*x1385))+(((76832.0)*x1388))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1389=((1.0)*cj5);
IkReal x1390=((1.0)*sj5);
IkReal x1391=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1391;
j0eval[1]=((IKabs(((((-1.0)*r11*x1389))+(((-1.0)*r10*x1390)))))+(IKabs(((((-1.0)*r01*x1389))+(((-1.0)*r00*x1390))))));
j0eval[2]=IKsign(x1391);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1392=cj5*cj5;
IkReal x1393=r21*r21;
IkReal x1394=(sj1*sj2);
IkReal x1395=(r21*sj5);
IkReal x1396=(cj5*r20);
IkReal x1397=(cj1*cj2);
IkReal x1398=(x1393+(r22*r22)+(((-2.0)*x1395*x1396))+(((-1.0)*x1392*x1393))+((x1392*(r20*r20))));
j4eval[0]=x1398;
j4eval[1]=IKsign(x1398);
j4eval[2]=((IKabs((((x1394*x1395))+((x1396*x1397))+(((-1.0)*x1394*x1396))+(((-1.0)*x1395*x1397)))))+(IKabs((((r22*x1394))+(((-1.0)*r22*x1397))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1399=IKcos(j0);
IkReal x1400=IKsin(j0);
evalcond[0]=((((-0.134)*x1400))+(((-1.0)*px))+(((0.425)*x1399)));
evalcond[1]=((((0.134)*x1399))+(((-1.0)*py))+(((0.425)*x1400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1401=((1.0)*cj5);
IkReal x1402=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1401)));
j4eval[0]=x1402;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1401)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1402);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1403=((1.0)*cj5);
IkReal x1404=((((-1.0)*r11*x1403))+(((-1.0)*r10*sj5)));
j4eval[0]=x1404;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1403))))));
j4eval[2]=IKsign(x1404);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1405=cj5*cj5;
IkReal x1406=((1.0)*sj5);
IkReal x1407=(cj5*r20);
IkReal x1408=(r11*r21);
IkReal x1409=((((-1.0)*x1405*x1408))+((r10*r20*x1405))+(((-1.0)*r11*x1406*x1407))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1406))+x1408);
j4eval[0]=x1409;
j4eval[1]=IKsign(x1409);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1406))+((cj0*x1407))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1410=cj5*cj5;
IkReal x1411=((1.0)*sj5);
IkReal x1412=(cj5*r20);
IkReal x1413=(r11*r21);
CheckValue<IkReal> x1414 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1411))+((cj0*x1412)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1414.valid){
continue;
}
CheckValue<IkReal> x1415=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1411*x1412))+(((-1.0)*x1410*x1413))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1411))+((r10*r20*x1410))+x1413)),-1);
if(!x1415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1414.value)+(((1.5707963267949)*(x1415.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1416=IKsin(j4);
IkReal x1417=IKcos(j4);
IkReal x1418=((1.0)*sj0);
IkReal x1419=(cj5*r00);
IkReal x1420=(r11*sj5);
IkReal x1421=(cj5*r10);
IkReal x1422=(r21*sj5);
IkReal x1423=(cj5*r20);
IkReal x1424=(r01*sj5);
IkReal x1425=((1.0)*x1417);
IkReal x1426=((1.0)*x1416);
evalcond[0]=((((-1.0)*x1423*x1426))+(((-1.0)*r22*x1425))+((x1416*x1422)));
evalcond[1]=((((-1.0)*x1422*x1425))+(((-1.0)*r22*x1426))+((x1417*x1423)));
evalcond[2]=((((-1.0)*x1421*x1426))+cj0+(((-1.0)*r12*x1425))+((x1416*x1420)));
evalcond[3]=((((-1.0)*x1418))+(((-1.0)*x1419*x1426))+(((-1.0)*r02*x1425))+((x1416*x1424)));
evalcond[4]=(((x1417*x1419))+(((-1.0)*x1424*x1425))+(((-1.0)*r02*x1426))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1418))+(((-1.0)*x1420*x1425))+(((-1.0)*r12*x1426))+((x1417*x1421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1427=((1.0)*cj5);
CheckValue<IkReal> x1428 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1427))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1428.valid){
continue;
}
CheckValue<IkReal> x1429=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1427)))),-1);
if(!x1429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1428.value)+(((1.5707963267949)*(x1429.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1430=IKsin(j4);
IkReal x1431=IKcos(j4);
IkReal x1432=((1.0)*sj0);
IkReal x1433=(cj5*r00);
IkReal x1434=(r11*sj5);
IkReal x1435=(cj5*r10);
IkReal x1436=(r21*sj5);
IkReal x1437=(cj5*r20);
IkReal x1438=(r01*sj5);
IkReal x1439=((1.0)*x1431);
IkReal x1440=((1.0)*x1430);
evalcond[0]=(((x1430*x1436))+(((-1.0)*r22*x1439))+(((-1.0)*x1437*x1440)));
evalcond[1]=((((-1.0)*x1436*x1439))+(((-1.0)*r22*x1440))+((x1431*x1437)));
evalcond[2]=((((-1.0)*r12*x1439))+cj0+((x1430*x1434))+(((-1.0)*x1435*x1440)));
evalcond[3]=((((-1.0)*x1433*x1440))+((x1430*x1438))+(((-1.0)*x1432))+(((-1.0)*r02*x1439)));
evalcond[4]=((((-1.0)*x1438*x1439))+(((-1.0)*r02*x1440))+(((-1.0)*cj0))+((x1431*x1433)));
evalcond[5]=((((-1.0)*x1434*x1439))+(((-1.0)*r12*x1440))+(((-1.0)*x1432))+((x1431*x1435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1441=((1.0)*cj5);
CheckValue<IkReal> x1442 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1442.valid){
continue;
}
CheckValue<IkReal> x1443=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1441))+(((-1.0)*r00*sj5)))),-1);
if(!x1443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1442.value)+(((1.5707963267949)*(x1443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1444=IKsin(j4);
IkReal x1445=IKcos(j4);
IkReal x1446=((1.0)*sj0);
IkReal x1447=(cj5*r00);
IkReal x1448=(r11*sj5);
IkReal x1449=(cj5*r10);
IkReal x1450=(r21*sj5);
IkReal x1451=(cj5*r20);
IkReal x1452=(r01*sj5);
IkReal x1453=((1.0)*x1445);
IkReal x1454=((1.0)*x1444);
evalcond[0]=((((-1.0)*r22*x1453))+(((-1.0)*x1451*x1454))+((x1444*x1450)));
evalcond[1]=(((x1445*x1451))+(((-1.0)*r22*x1454))+(((-1.0)*x1450*x1453)));
evalcond[2]=(((x1444*x1448))+cj0+(((-1.0)*x1449*x1454))+(((-1.0)*r12*x1453)));
evalcond[3]=((((-1.0)*x1447*x1454))+(((-1.0)*r02*x1453))+(((-1.0)*x1446))+((x1444*x1452)));
evalcond[4]=(((x1445*x1447))+(((-1.0)*r02*x1454))+(((-1.0)*x1452*x1453))+(((-1.0)*cj0)));
evalcond[5]=(((x1445*x1449))+(((-1.0)*x1448*x1453))+(((-1.0)*x1446))+(((-1.0)*r12*x1454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1455=IKcos(j0);
IkReal x1456=IKsin(j0);
evalcond[0]=((((-0.134)*x1456))+(((-1.0)*px))+(((0.425)*x1455)));
evalcond[1]=((((-1.0)*py))+(((0.425)*x1456))+(((0.134)*x1455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1457=((1.0)*cj5);
IkReal x1458=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1457)));
j4eval[0]=x1458;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1457))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1458);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1459=cj5*cj5;
IkReal x1460=((1.0)*r21);
IkReal x1461=(cj5*sj5);
IkReal x1462=((1.0)*r20);
IkReal x1463=((((-1.0)*r01*x1459*x1460))+((r01*r21))+(((-1.0)*r01*x1461*x1462))+(((-1.0)*r00*x1460*x1461))+((r00*r20*x1459))+((r02*r22)));
j4eval[0]=x1463;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1462)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1463);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1464=cj5*cj5;
IkReal x1465=(r21*sj5);
IkReal x1466=(r11*r21);
IkReal x1467=((1.0)*cj5*r20);
IkReal x1468=((((-1.0)*cj5*r10*x1465))+((r12*r22))+((r10*r20*x1464))+x1466+(((-1.0)*r11*sj5*x1467))+(((-1.0)*x1464*x1466)));
j4eval[0]=x1468;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1467))+((sj0*x1465))))));
j4eval[2]=IKsign(x1468);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1469=cj5*cj5;
IkReal x1470=(r21*sj5);
IkReal x1471=(r11*r21);
IkReal x1472=((1.0)*cj5*r20);
CheckValue<IkReal> x1473=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x1472))+((r12*r22))+((r10*r20*x1469))+(((-1.0)*x1469*x1471))+x1471+(((-1.0)*cj5*r10*x1470)))),-1);
if(!x1473.valid){
continue;
}
CheckValue<IkReal> x1474 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1470))+(((-1.0)*sj0*x1472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1473.value)))+(x1474.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1475=IKsin(j4);
IkReal x1476=IKcos(j4);
IkReal x1477=(r11*sj5);
IkReal x1478=(cj5*r00);
IkReal x1479=(cj5*r10);
IkReal x1480=(r21*sj5);
IkReal x1481=(cj5*r20);
IkReal x1482=(r01*sj5);
IkReal x1483=((1.0)*x1476);
IkReal x1484=((1.0)*x1475);
evalcond[0]=((((-1.0)*x1481*x1484))+(((-1.0)*r22*x1483))+((x1475*x1480)));
evalcond[1]=(((x1476*x1481))+(((-1.0)*x1480*x1483))+(((-1.0)*r22*x1484)));
evalcond[2]=((((-1.0)*x1479*x1484))+cj0+(((-1.0)*r12*x1483))+((x1475*x1477)));
evalcond[3]=((((-1.0)*x1482*x1483))+cj0+(((-1.0)*r02*x1484))+((x1476*x1478)));
evalcond[4]=(sj0+(((-1.0)*r12*x1484))+((x1476*x1479))+(((-1.0)*x1477*x1483)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1483))+((x1475*x1482))+(((-1.0)*x1478*x1484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1485=cj5*cj5;
IkReal x1486=((1.0)*r21);
IkReal x1487=(cj5*sj5);
IkReal x1488=((1.0)*r20);
CheckValue<IkReal> x1489=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1485*x1486))+(((-1.0)*r00*x1486*x1487))+((r01*r21))+((r00*r20*x1485))+((r02*r22))+(((-1.0)*r01*x1487*x1488)))),-1);
if(!x1489.valid){
continue;
}
CheckValue<IkReal> x1490 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1488)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1489.value)))+(x1490.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1491=IKsin(j4);
IkReal x1492=IKcos(j4);
IkReal x1493=(r11*sj5);
IkReal x1494=(cj5*r00);
IkReal x1495=(cj5*r10);
IkReal x1496=(r21*sj5);
IkReal x1497=(cj5*r20);
IkReal x1498=(r01*sj5);
IkReal x1499=((1.0)*x1492);
IkReal x1500=((1.0)*x1491);
evalcond[0]=(((x1491*x1496))+(((-1.0)*x1497*x1500))+(((-1.0)*r22*x1499)));
evalcond[1]=((((-1.0)*r22*x1500))+(((-1.0)*x1496*x1499))+((x1492*x1497)));
evalcond[2]=((((-1.0)*r12*x1499))+cj0+((x1491*x1493))+(((-1.0)*x1495*x1500)));
evalcond[3]=(cj0+(((-1.0)*r02*x1500))+((x1492*x1494))+(((-1.0)*x1498*x1499)));
evalcond[4]=(sj0+(((-1.0)*x1493*x1499))+((x1492*x1495))+(((-1.0)*r12*x1500)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1494*x1500))+((x1491*x1498))+(((-1.0)*r02*x1499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1501=((1.0)*cj5);
CheckValue<IkReal> x1502 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1501))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1502.valid){
continue;
}
CheckValue<IkReal> x1503=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1501))+(((-1.0)*r00*sj5)))),-1);
if(!x1503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1502.value)+(((1.5707963267949)*(x1503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1504=IKsin(j4);
IkReal x1505=IKcos(j4);
IkReal x1506=(r11*sj5);
IkReal x1507=(cj5*r00);
IkReal x1508=(cj5*r10);
IkReal x1509=(r21*sj5);
IkReal x1510=(cj5*r20);
IkReal x1511=(r01*sj5);
IkReal x1512=((1.0)*x1505);
IkReal x1513=((1.0)*x1504);
evalcond[0]=((((-1.0)*r22*x1512))+((x1504*x1509))+(((-1.0)*x1510*x1513)));
evalcond[1]=((((-1.0)*r22*x1513))+(((-1.0)*x1509*x1512))+((x1505*x1510)));
evalcond[2]=(cj0+((x1504*x1506))+(((-1.0)*x1508*x1513))+(((-1.0)*r12*x1512)));
evalcond[3]=(cj0+(((-1.0)*r02*x1513))+((x1505*x1507))+(((-1.0)*x1511*x1512)));
evalcond[4]=(sj0+(((-1.0)*x1506*x1512))+((x1505*x1508))+(((-1.0)*r12*x1513)));
evalcond[5]=((((-1.0)*sj0))+((x1504*x1511))+(((-1.0)*x1507*x1513))+(((-1.0)*r02*x1512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1514=((1.0)*cj5);
IkReal x1515=((((-1.0)*r01*x1514))+(((-1.0)*r00*sj5)));
j4eval[0]=x1515;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1514))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1515);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1516=((1.0)*cj5);
IkReal x1517=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1516)));
j4eval[0]=x1517;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1516)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1517);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1518=cj5*cj5;
IkReal x1519=((1.0)*sj5);
IkReal x1520=(cj5*r20);
IkReal x1521=(r11*r21);
IkReal x1522=((((-1.0)*x1518*x1521))+((r12*r22))+x1521+(((-1.0)*r11*x1519*x1520))+(((-1.0)*cj5*r10*r21*x1519))+((r10*r20*x1518)));
j4eval[0]=x1522;
j4eval[1]=IKsign(x1522);
j4eval[2]=((IKabs((((cj0*x1520))+(((-1.0)*cj0*r21*x1519)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1523=cj5*cj5;
IkReal x1524=((1.0)*sj5);
IkReal x1525=(cj5*r20);
IkReal x1526=(r11*r21);
CheckValue<IkReal> x1527=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1524*x1525))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1524))+x1526+((r10*r20*x1523))+(((-1.0)*x1523*x1526)))),-1);
if(!x1527.valid){
continue;
}
CheckValue<IkReal> x1528 = IKatan2WithCheck(IkReal((((cj0*x1525))+(((-1.0)*cj0*r21*x1524)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1527.value)))+(x1528.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1529=IKsin(j4);
IkReal x1530=IKcos(j4);
IkReal x1531=((1.0)*sj0);
IkReal x1532=(cj5*r00);
IkReal x1533=(r11*sj5);
IkReal x1534=(cj5*r10);
IkReal x1535=(r21*sj5);
IkReal x1536=(cj5*r20);
IkReal x1537=(r01*sj5);
IkReal x1538=((1.0)*x1530);
IkReal x1539=((1.0)*x1529);
evalcond[0]=((((-1.0)*r22*x1538))+((x1529*x1535))+(((-1.0)*x1536*x1539)));
evalcond[1]=((((-1.0)*r22*x1539))+((x1530*x1536))+(((-1.0)*x1535*x1538)));
evalcond[2]=((((-1.0)*r12*x1538))+cj0+((x1529*x1533))+(((-1.0)*x1534*x1539)));
evalcond[3]=((((-1.0)*x1531))+(((-1.0)*x1532*x1539))+(((-1.0)*r02*x1538))+((x1529*x1537)));
evalcond[4]=((((-1.0)*x1537*x1538))+((x1530*x1532))+(((-1.0)*r02*x1539))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1539))+(((-1.0)*x1531))+((x1530*x1534))+(((-1.0)*x1533*x1538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1540=((1.0)*cj5);
CheckValue<IkReal> x1541 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1541.valid){
continue;
}
CheckValue<IkReal> x1542=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1540)))),-1);
if(!x1542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1541.value)+(((1.5707963267949)*(x1542.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1543=IKsin(j4);
IkReal x1544=IKcos(j4);
IkReal x1545=((1.0)*sj0);
IkReal x1546=(cj5*r00);
IkReal x1547=(r11*sj5);
IkReal x1548=(cj5*r10);
IkReal x1549=(r21*sj5);
IkReal x1550=(cj5*r20);
IkReal x1551=(r01*sj5);
IkReal x1552=((1.0)*x1544);
IkReal x1553=((1.0)*x1543);
evalcond[0]=((((-1.0)*r22*x1552))+(((-1.0)*x1550*x1553))+((x1543*x1549)));
evalcond[1]=(((x1544*x1550))+(((-1.0)*x1549*x1552))+(((-1.0)*r22*x1553)));
evalcond[2]=(cj0+(((-1.0)*x1548*x1553))+(((-1.0)*r12*x1552))+((x1543*x1547)));
evalcond[3]=((((-1.0)*x1546*x1553))+(((-1.0)*r02*x1552))+((x1543*x1551))+(((-1.0)*x1545)));
evalcond[4]=(((x1544*x1546))+(((-1.0)*r02*x1553))+(((-1.0)*x1551*x1552))+(((-1.0)*cj0)));
evalcond[5]=(((x1544*x1548))+(((-1.0)*r12*x1553))+(((-1.0)*x1547*x1552))+(((-1.0)*x1545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1554=((1.0)*cj5);
CheckValue<IkReal> x1555=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1554)))),-1);
if(!x1555.valid){
continue;
}
CheckValue<IkReal> x1556 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1555.value)))+(x1556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1557=IKsin(j4);
IkReal x1558=IKcos(j4);
IkReal x1559=((1.0)*sj0);
IkReal x1560=(cj5*r00);
IkReal x1561=(r11*sj5);
IkReal x1562=(cj5*r10);
IkReal x1563=(r21*sj5);
IkReal x1564=(cj5*r20);
IkReal x1565=(r01*sj5);
IkReal x1566=((1.0)*x1558);
IkReal x1567=((1.0)*x1557);
evalcond[0]=((((-1.0)*r22*x1566))+((x1557*x1563))+(((-1.0)*x1564*x1567)));
evalcond[1]=((((-1.0)*r22*x1567))+(((-1.0)*x1563*x1566))+((x1558*x1564)));
evalcond[2]=(cj0+(((-1.0)*x1562*x1567))+((x1557*x1561))+(((-1.0)*r12*x1566)));
evalcond[3]=((((-1.0)*r02*x1566))+(((-1.0)*x1560*x1567))+((x1557*x1565))+(((-1.0)*x1559)));
evalcond[4]=((((-1.0)*x1565*x1566))+(((-1.0)*r02*x1567))+(((-1.0)*cj0))+((x1558*x1560)));
evalcond[5]=((((-1.0)*r12*x1567))+(((-1.0)*x1559))+(((-1.0)*x1561*x1566))+((x1558*x1562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1568=((1.0)*cj5);
IkReal x1569=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1568)));
j4eval[0]=x1569;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1568)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1569);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1570=cj5*cj5;
IkReal x1571=((1.0)*r21);
IkReal x1572=(cj5*sj5);
IkReal x1573=((1.0)*r20);
IkReal x1574=((((-1.0)*r01*x1570*x1571))+((r01*r21))+((r00*r20*x1570))+(((-1.0)*r00*x1571*x1572))+(((-1.0)*r01*x1572*x1573))+((r02*r22)));
j4eval[0]=x1574;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1573)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1575=cj5*cj5;
IkReal x1576=(r21*sj5);
IkReal x1577=(r11*r21);
IkReal x1578=((1.0)*cj5*r20);
IkReal x1579=((((-1.0)*cj5*r10*x1576))+(((-1.0)*r11*sj5*x1578))+((r12*r22))+x1577+(((-1.0)*x1575*x1577))+((r10*r20*x1575)));
j4eval[0]=x1579;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1576))+(((-1.0)*sj0*x1578))))));
j4eval[2]=IKsign(x1579);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1580=cj5*cj5;
IkReal x1581=(r21*sj5);
IkReal x1582=(r11*r21);
IkReal x1583=((1.0)*cj5*r20);
CheckValue<IkReal> x1584 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1583))+((sj0*x1581)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1584.valid){
continue;
}
CheckValue<IkReal> x1585=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1581))+((r10*r20*x1580))+((r12*r22))+(((-1.0)*x1580*x1582))+x1582+(((-1.0)*r11*sj5*x1583)))),-1);
if(!x1585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1584.value)+(((1.5707963267949)*(x1585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1586=IKsin(j4);
IkReal x1587=IKcos(j4);
IkReal x1588=(r11*sj5);
IkReal x1589=(cj5*r00);
IkReal x1590=(cj5*r10);
IkReal x1591=(r21*sj5);
IkReal x1592=(cj5*r20);
IkReal x1593=(r01*sj5);
IkReal x1594=((1.0)*x1587);
IkReal x1595=((1.0)*x1586);
evalcond[0]=(((x1586*x1591))+(((-1.0)*x1592*x1595))+(((-1.0)*r22*x1594)));
evalcond[1]=(((x1587*x1592))+(((-1.0)*x1591*x1594))+(((-1.0)*r22*x1595)));
evalcond[2]=(((x1586*x1588))+cj0+(((-1.0)*x1590*x1595))+(((-1.0)*r12*x1594)));
evalcond[3]=(((x1587*x1589))+cj0+(((-1.0)*x1593*x1594))+(((-1.0)*r02*x1595)));
evalcond[4]=(sj0+((x1587*x1590))+(((-1.0)*x1588*x1594))+(((-1.0)*r12*x1595)));
evalcond[5]=(((x1586*x1593))+(((-1.0)*sj0))+(((-1.0)*r02*x1594))+(((-1.0)*x1589*x1595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1596=cj5*cj5;
IkReal x1597=((1.0)*r21);
IkReal x1598=(cj5*sj5);
IkReal x1599=((1.0)*r20);
CheckValue<IkReal> x1600 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1599)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1600.valid){
continue;
}
CheckValue<IkReal> x1601=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1597*x1598))+(((-1.0)*r01*x1596*x1597))+((r01*r21))+((r00*r20*x1596))+((r02*r22))+(((-1.0)*r01*x1598*x1599)))),-1);
if(!x1601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1600.value)+(((1.5707963267949)*(x1601.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1602=IKsin(j4);
IkReal x1603=IKcos(j4);
IkReal x1604=(r11*sj5);
IkReal x1605=(cj5*r00);
IkReal x1606=(cj5*r10);
IkReal x1607=(r21*sj5);
IkReal x1608=(cj5*r20);
IkReal x1609=(r01*sj5);
IkReal x1610=((1.0)*x1603);
IkReal x1611=((1.0)*x1602);
evalcond[0]=((((-1.0)*r22*x1610))+(((-1.0)*x1608*x1611))+((x1602*x1607)));
evalcond[1]=((((-1.0)*r22*x1611))+((x1603*x1608))+(((-1.0)*x1607*x1610)));
evalcond[2]=((((-1.0)*x1606*x1611))+(((-1.0)*r12*x1610))+cj0+((x1602*x1604)));
evalcond[3]=(cj0+(((-1.0)*r02*x1611))+((x1603*x1605))+(((-1.0)*x1609*x1610)));
evalcond[4]=((((-1.0)*r12*x1611))+sj0+((x1603*x1606))+(((-1.0)*x1604*x1610)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1610))+(((-1.0)*x1605*x1611))+((x1602*x1609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1612=((1.0)*cj5);
CheckValue<IkReal> x1613 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1612)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1613.valid){
continue;
}
CheckValue<IkReal> x1614=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1612))+(((-1.0)*r00*sj5)))),-1);
if(!x1614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1613.value)+(((1.5707963267949)*(x1614.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1615=IKsin(j4);
IkReal x1616=IKcos(j4);
IkReal x1617=(r11*sj5);
IkReal x1618=(cj5*r00);
IkReal x1619=(cj5*r10);
IkReal x1620=(r21*sj5);
IkReal x1621=(cj5*r20);
IkReal x1622=(r01*sj5);
IkReal x1623=((1.0)*x1616);
IkReal x1624=((1.0)*x1615);
evalcond[0]=(((x1615*x1620))+(((-1.0)*x1621*x1624))+(((-1.0)*r22*x1623)));
evalcond[1]=((((-1.0)*r22*x1624))+(((-1.0)*x1620*x1623))+((x1616*x1621)));
evalcond[2]=((((-1.0)*r12*x1623))+(((-1.0)*x1619*x1624))+cj0+((x1615*x1617)));
evalcond[3]=(cj0+(((-1.0)*r02*x1624))+(((-1.0)*x1622*x1623))+((x1616*x1618)));
evalcond[4]=((((-1.0)*r12*x1624))+sj0+(((-1.0)*x1617*x1623))+((x1616*x1619)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1623))+((x1615*x1622))+(((-1.0)*x1618*x1624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1625=IKcos(j0);
IkReal x1626=IKsin(j0);
evalcond[0]=((((-0.134)*x1626))+(((-1.0)*px))+(((-0.425)*x1625)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x1625))+(((-0.425)*x1626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1627=((1.0)*cj5);
IkReal x1628=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1627)));
j4eval[0]=x1628;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1627)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1628);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1629=cj5*cj5;
IkReal x1630=((1.0)*r21);
IkReal x1631=(cj5*sj5);
IkReal x1632=((1.0)*r20);
IkReal x1633=((((-1.0)*r01*x1631*x1632))+((r00*r20*x1629))+((r01*r21))+(((-1.0)*r01*x1629*x1630))+(((-1.0)*r00*x1630*x1631))+((r02*r22)));
j4eval[0]=x1633;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1632)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1633);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1634=cj5*cj5;
IkReal x1635=(r21*sj5);
IkReal x1636=(r11*r21);
IkReal x1637=((1.0)*cj5*r20);
IkReal x1638=((((-1.0)*r11*sj5*x1637))+x1636+(((-1.0)*x1634*x1636))+((r12*r22))+(((-1.0)*cj5*r10*x1635))+((r10*r20*x1634)));
j4eval[0]=x1638;
j4eval[1]=((IKabs((((sj0*x1635))+(((-1.0)*sj0*x1637)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1638);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1639=cj5*cj5;
IkReal x1640=(r21*sj5);
IkReal x1641=(r11*r21);
IkReal x1642=((1.0)*cj5*r20);
CheckValue<IkReal> x1643=IKPowWithIntegerCheck(IKsign((x1641+((r12*r22))+(((-1.0)*x1639*x1641))+(((-1.0)*cj5*r10*x1640))+((r10*r20*x1639))+(((-1.0)*r11*sj5*x1642)))),-1);
if(!x1643.valid){
continue;
}
CheckValue<IkReal> x1644 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1640))+(((-1.0)*sj0*x1642)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1643.value)))+(x1644.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1645=IKsin(j4);
IkReal x1646=IKcos(j4);
IkReal x1647=(r11*sj5);
IkReal x1648=(cj5*r00);
IkReal x1649=(cj5*r10);
IkReal x1650=(r21*sj5);
IkReal x1651=(cj5*r20);
IkReal x1652=(r01*sj5);
IkReal x1653=((1.0)*x1646);
IkReal x1654=((1.0)*x1645);
evalcond[0]=((((-1.0)*r22*x1653))+((x1645*x1650))+(((-1.0)*x1651*x1654)));
evalcond[1]=((((-1.0)*r22*x1654))+(((-1.0)*x1650*x1653))+((x1646*x1651)));
evalcond[2]=(cj0+((x1645*x1647))+(((-1.0)*r12*x1653))+(((-1.0)*x1649*x1654)));
evalcond[3]=((((-1.0)*x1652*x1653))+cj0+((x1646*x1648))+(((-1.0)*r02*x1654)));
evalcond[4]=(sj0+(((-1.0)*x1647*x1653))+(((-1.0)*r12*x1654))+((x1646*x1649)));
evalcond[5]=((((-1.0)*sj0))+((x1645*x1652))+(((-1.0)*r02*x1653))+(((-1.0)*x1648*x1654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1655=cj5*cj5;
IkReal x1656=((1.0)*r21);
IkReal x1657=(cj5*sj5);
IkReal x1658=((1.0)*r20);
CheckValue<IkReal> x1659 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1658)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1659.valid){
continue;
}
CheckValue<IkReal> x1660=IKPowWithIntegerCheck(IKsign((((r01*r21))+((r00*r20*x1655))+(((-1.0)*r01*x1655*x1656))+((r02*r22))+(((-1.0)*r01*x1657*x1658))+(((-1.0)*r00*x1656*x1657)))),-1);
if(!x1660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1659.value)+(((1.5707963267949)*(x1660.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1661=IKsin(j4);
IkReal x1662=IKcos(j4);
IkReal x1663=(r11*sj5);
IkReal x1664=(cj5*r00);
IkReal x1665=(cj5*r10);
IkReal x1666=(r21*sj5);
IkReal x1667=(cj5*r20);
IkReal x1668=(r01*sj5);
IkReal x1669=((1.0)*x1662);
IkReal x1670=((1.0)*x1661);
evalcond[0]=((((-1.0)*x1667*x1670))+(((-1.0)*r22*x1669))+((x1661*x1666)));
evalcond[1]=(((x1662*x1667))+(((-1.0)*x1666*x1669))+(((-1.0)*r22*x1670)));
evalcond[2]=(cj0+(((-1.0)*r12*x1669))+(((-1.0)*x1665*x1670))+((x1661*x1663)));
evalcond[3]=(cj0+(((-1.0)*r02*x1670))+(((-1.0)*x1668*x1669))+((x1662*x1664)));
evalcond[4]=(sj0+((x1662*x1665))+(((-1.0)*x1663*x1669))+(((-1.0)*r12*x1670)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1664*x1670))+(((-1.0)*r02*x1669))+((x1661*x1668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1671=((1.0)*cj5);
CheckValue<IkReal> x1672 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1671)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1672.valid){
continue;
}
CheckValue<IkReal> x1673=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1671)))),-1);
if(!x1673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1672.value)+(((1.5707963267949)*(x1673.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1674=IKsin(j4);
IkReal x1675=IKcos(j4);
IkReal x1676=(r11*sj5);
IkReal x1677=(cj5*r00);
IkReal x1678=(cj5*r10);
IkReal x1679=(r21*sj5);
IkReal x1680=(cj5*r20);
IkReal x1681=(r01*sj5);
IkReal x1682=((1.0)*x1675);
IkReal x1683=((1.0)*x1674);
evalcond[0]=(((x1674*x1679))+(((-1.0)*r22*x1682))+(((-1.0)*x1680*x1683)));
evalcond[1]=(((x1675*x1680))+(((-1.0)*x1679*x1682))+(((-1.0)*r22*x1683)));
evalcond[2]=((((-1.0)*r12*x1682))+((x1674*x1676))+cj0+(((-1.0)*x1678*x1683)));
evalcond[3]=(((x1675*x1677))+(((-1.0)*x1681*x1682))+cj0+(((-1.0)*r02*x1683)));
evalcond[4]=((((-1.0)*r12*x1683))+((x1675*x1678))+sj0+(((-1.0)*x1676*x1682)));
evalcond[5]=((((-1.0)*x1677*x1683))+(((-1.0)*sj0))+((x1674*x1681))+(((-1.0)*r02*x1682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1684=IKcos(j0);
IkReal x1685=IKsin(j0);
evalcond[0]=((((-0.134)*x1685))+(((-1.0)*px))+(((-0.425)*x1684)));
evalcond[1]=((((-1.0)*py))+(((-0.425)*x1685))+(((0.134)*x1684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1686=((1.0)*cj5);
IkReal x1687=((((-1.0)*r01*x1686))+(((-1.0)*r00*sj5)));
j4eval[0]=x1687;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1686))))));
j4eval[2]=IKsign(x1687);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1688=((1.0)*cj5);
IkReal x1689=((((-1.0)*r11*x1688))+(((-1.0)*r10*sj5)));
j4eval[0]=x1689;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1688))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1689);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1690=cj5*cj5;
IkReal x1691=((1.0)*sj5);
IkReal x1692=(cj5*r20);
IkReal x1693=(r11*r21);
IkReal x1694=(x1693+((r12*r22))+(((-1.0)*r11*x1691*x1692))+((r10*r20*x1690))+(((-1.0)*x1690*x1693))+(((-1.0)*cj5*r10*r21*x1691)));
j4eval[0]=x1694;
j4eval[1]=IKsign(x1694);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1691))+((cj0*x1692)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1695=cj5*cj5;
IkReal x1696=((1.0)*sj5);
IkReal x1697=(cj5*r20);
IkReal x1698=(r11*r21);
CheckValue<IkReal> x1699=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1696*x1697))+x1698+(((-1.0)*x1695*x1698))+((r12*r22))+((r10*r20*x1695))+(((-1.0)*cj5*r10*r21*x1696)))),-1);
if(!x1699.valid){
continue;
}
CheckValue<IkReal> x1700 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1696))+((cj0*x1697)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1699.value)))+(x1700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1701=IKsin(j4);
IkReal x1702=IKcos(j4);
IkReal x1703=((1.0)*sj0);
IkReal x1704=(cj5*r00);
IkReal x1705=(r11*sj5);
IkReal x1706=(cj5*r10);
IkReal x1707=(r21*sj5);
IkReal x1708=(cj5*r20);
IkReal x1709=(r01*sj5);
IkReal x1710=((1.0)*x1702);
IkReal x1711=((1.0)*x1701);
evalcond[0]=((((-1.0)*x1708*x1711))+((x1701*x1707))+(((-1.0)*r22*x1710)));
evalcond[1]=((((-1.0)*x1707*x1710))+(((-1.0)*r22*x1711))+((x1702*x1708)));
evalcond[2]=(cj0+((x1701*x1705))+(((-1.0)*x1706*x1711))+(((-1.0)*r12*x1710)));
evalcond[3]=((((-1.0)*x1703))+((x1701*x1709))+(((-1.0)*r02*x1710))+(((-1.0)*x1704*x1711)));
evalcond[4]=((((-1.0)*x1709*x1710))+(((-1.0)*r02*x1711))+((x1702*x1704))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1703))+(((-1.0)*x1705*x1710))+((x1702*x1706))+(((-1.0)*r12*x1711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1712=((1.0)*cj5);
CheckValue<IkReal> x1713 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1712))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1713.valid){
continue;
}
CheckValue<IkReal> x1714=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1712)))),-1);
if(!x1714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1713.value)+(((1.5707963267949)*(x1714.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1715=IKsin(j4);
IkReal x1716=IKcos(j4);
IkReal x1717=((1.0)*sj0);
IkReal x1718=(cj5*r00);
IkReal x1719=(r11*sj5);
IkReal x1720=(cj5*r10);
IkReal x1721=(r21*sj5);
IkReal x1722=(cj5*r20);
IkReal x1723=(r01*sj5);
IkReal x1724=((1.0)*x1716);
IkReal x1725=((1.0)*x1715);
evalcond[0]=((((-1.0)*r22*x1724))+((x1715*x1721))+(((-1.0)*x1722*x1725)));
evalcond[1]=((((-1.0)*r22*x1725))+((x1716*x1722))+(((-1.0)*x1721*x1724)));
evalcond[2]=(cj0+(((-1.0)*r12*x1724))+(((-1.0)*x1720*x1725))+((x1715*x1719)));
evalcond[3]=(((x1715*x1723))+(((-1.0)*x1717))+(((-1.0)*x1718*x1725))+(((-1.0)*r02*x1724)));
evalcond[4]=(((x1716*x1718))+(((-1.0)*x1723*x1724))+(((-1.0)*cj0))+(((-1.0)*r02*x1725)));
evalcond[5]=((((-1.0)*r12*x1725))+(((-1.0)*x1717))+(((-1.0)*x1719*x1724))+((x1716*x1720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1726=((1.0)*cj5);
CheckValue<IkReal> x1727 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1726)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1727.valid){
continue;
}
CheckValue<IkReal> x1728=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1726))+(((-1.0)*r00*sj5)))),-1);
if(!x1728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1727.value)+(((1.5707963267949)*(x1728.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1729=IKsin(j4);
IkReal x1730=IKcos(j4);
IkReal x1731=((1.0)*sj0);
IkReal x1732=(cj5*r00);
IkReal x1733=(r11*sj5);
IkReal x1734=(cj5*r10);
IkReal x1735=(r21*sj5);
IkReal x1736=(cj5*r20);
IkReal x1737=(r01*sj5);
IkReal x1738=((1.0)*x1730);
IkReal x1739=((1.0)*x1729);
evalcond[0]=(((x1729*x1735))+(((-1.0)*x1736*x1739))+(((-1.0)*r22*x1738)));
evalcond[1]=(((x1730*x1736))+(((-1.0)*x1735*x1738))+(((-1.0)*r22*x1739)));
evalcond[2]=(cj0+(((-1.0)*r12*x1738))+((x1729*x1733))+(((-1.0)*x1734*x1739)));
evalcond[3]=(((x1729*x1737))+(((-1.0)*x1732*x1739))+(((-1.0)*x1731))+(((-1.0)*r02*x1738)));
evalcond[4]=(((x1730*x1732))+(((-1.0)*x1737*x1738))+(((-1.0)*cj0))+(((-1.0)*r02*x1739)));
evalcond[5]=((((-1.0)*x1733*x1738))+((x1730*x1734))+(((-1.0)*r12*x1739))+(((-1.0)*x1731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1740=((1.0)*cj5);
IkReal x1741=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1740)));
j4eval[0]=x1741;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1740)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1741);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1742=cj5*cj5;
IkReal x1743=((1.0)*r21);
IkReal x1744=(cj5*sj5);
IkReal x1745=((1.0)*r20);
IkReal x1746=(((r01*r21))+((r00*r20*x1742))+(((-1.0)*r01*x1744*x1745))+((r02*r22))+(((-1.0)*r00*x1743*x1744))+(((-1.0)*r01*x1742*x1743)));
j4eval[0]=x1746;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1745))))));
j4eval[2]=IKsign(x1746);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1747=cj5*cj5;
IkReal x1748=(r21*sj5);
IkReal x1749=(r11*r21);
IkReal x1750=((1.0)*cj5*r20);
IkReal x1751=((((-1.0)*x1747*x1749))+((r10*r20*x1747))+x1749+((r12*r22))+(((-1.0)*cj5*r10*x1748))+(((-1.0)*r11*sj5*x1750)));
j4eval[0]=x1751;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1750))+((sj0*x1748))))));
j4eval[2]=IKsign(x1751);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1752=cj5*cj5;
IkReal x1753=(r21*sj5);
IkReal x1754=(r11*r21);
IkReal x1755=((1.0)*cj5*r20);
CheckValue<IkReal> x1756 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1755))+((sj0*x1753)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1756.valid){
continue;
}
CheckValue<IkReal> x1757=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1752*x1754))+((r10*r20*x1752))+x1754+((r12*r22))+(((-1.0)*cj5*r10*x1753))+(((-1.0)*r11*sj5*x1755)))),-1);
if(!x1757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1756.value)+(((1.5707963267949)*(x1757.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1758=IKsin(j4);
IkReal x1759=IKcos(j4);
IkReal x1760=(r11*sj5);
IkReal x1761=(cj5*r00);
IkReal x1762=(cj5*r10);
IkReal x1763=(r21*sj5);
IkReal x1764=(cj5*r20);
IkReal x1765=(r01*sj5);
IkReal x1766=((1.0)*x1759);
IkReal x1767=((1.0)*x1758);
evalcond[0]=(((x1758*x1763))+(((-1.0)*x1764*x1767))+(((-1.0)*r22*x1766)));
evalcond[1]=(((x1759*x1764))+(((-1.0)*x1763*x1766))+(((-1.0)*r22*x1767)));
evalcond[2]=((((-1.0)*x1762*x1767))+cj0+(((-1.0)*r12*x1766))+((x1758*x1760)));
evalcond[3]=(cj0+((x1759*x1761))+(((-1.0)*r02*x1767))+(((-1.0)*x1765*x1766)));
evalcond[4]=(sj0+((x1759*x1762))+(((-1.0)*r12*x1767))+(((-1.0)*x1760*x1766)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1766))+(((-1.0)*x1761*x1767))+((x1758*x1765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1768=cj5*cj5;
IkReal x1769=((1.0)*r21);
IkReal x1770=(cj5*sj5);
IkReal x1771=((1.0)*r20);
CheckValue<IkReal> x1772 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1772.valid){
continue;
}
CheckValue<IkReal> x1773=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1768*x1769))+((r00*r20*x1768))+((r01*r21))+(((-1.0)*r01*x1770*x1771))+(((-1.0)*r00*x1769*x1770))+((r02*r22)))),-1);
if(!x1773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1772.value)+(((1.5707963267949)*(x1773.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1774=IKsin(j4);
IkReal x1775=IKcos(j4);
IkReal x1776=(r11*sj5);
IkReal x1777=(cj5*r00);
IkReal x1778=(cj5*r10);
IkReal x1779=(r21*sj5);
IkReal x1780=(cj5*r20);
IkReal x1781=(r01*sj5);
IkReal x1782=((1.0)*x1775);
IkReal x1783=((1.0)*x1774);
evalcond[0]=((((-1.0)*r22*x1782))+(((-1.0)*x1780*x1783))+((x1774*x1779)));
evalcond[1]=(((x1775*x1780))+(((-1.0)*r22*x1783))+(((-1.0)*x1779*x1782)));
evalcond[2]=(cj0+(((-1.0)*r12*x1782))+(((-1.0)*x1778*x1783))+((x1774*x1776)));
evalcond[3]=(cj0+((x1775*x1777))+(((-1.0)*x1781*x1782))+(((-1.0)*r02*x1783)));
evalcond[4]=(sj0+(((-1.0)*r12*x1783))+((x1775*x1778))+(((-1.0)*x1776*x1782)));
evalcond[5]=((((-1.0)*sj0))+((x1774*x1781))+(((-1.0)*x1777*x1783))+(((-1.0)*r02*x1782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1784=((1.0)*cj5);
CheckValue<IkReal> x1785=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1784))+(((-1.0)*r00*sj5)))),-1);
if(!x1785.valid){
continue;
}
CheckValue<IkReal> x1786 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1784))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1785.value)))+(x1786.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1787=IKsin(j4);
IkReal x1788=IKcos(j4);
IkReal x1789=(r11*sj5);
IkReal x1790=(cj5*r00);
IkReal x1791=(cj5*r10);
IkReal x1792=(r21*sj5);
IkReal x1793=(cj5*r20);
IkReal x1794=(r01*sj5);
IkReal x1795=((1.0)*x1788);
IkReal x1796=((1.0)*x1787);
evalcond[0]=((((-1.0)*r22*x1795))+(((-1.0)*x1793*x1796))+((x1787*x1792)));
evalcond[1]=((((-1.0)*x1792*x1795))+(((-1.0)*r22*x1796))+((x1788*x1793)));
evalcond[2]=(cj0+(((-1.0)*r12*x1795))+((x1787*x1789))+(((-1.0)*x1791*x1796)));
evalcond[3]=(cj0+(((-1.0)*r02*x1796))+((x1788*x1790))+(((-1.0)*x1794*x1795)));
evalcond[4]=(sj0+(((-1.0)*r12*x1796))+(((-1.0)*x1789*x1795))+((x1788*x1791)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1790*x1796))+((x1787*x1794))+(((-1.0)*r02*x1795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1797=((1.0)*cj5);
IkReal x1798=((((-1.0)*r01*x1797))+(((-1.0)*r00*sj5)));
j4eval[0]=x1798;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1797))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1798);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1799=((1.0)*cj5);
IkReal x1800=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1799)));
j4eval[0]=x1800;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1799))))));
j4eval[2]=IKsign(x1800);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1801=cj5*cj5;
IkReal x1802=((1.0)*sj5);
IkReal x1803=(cj5*r20);
IkReal x1804=(r11*r21);
IkReal x1805=((((-1.0)*r11*x1802*x1803))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1802))+x1804+((r10*r20*x1801))+(((-1.0)*x1801*x1804)));
j4eval[0]=x1805;
j4eval[1]=IKsign(x1805);
j4eval[2]=((IKabs((((cj0*x1803))+(((-1.0)*cj0*r21*x1802)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1806=cj5*cj5;
IkReal x1807=((1.0)*sj5);
IkReal x1808=(cj5*r20);
IkReal x1809=(r11*r21);
CheckValue<IkReal> x1810 = IKatan2WithCheck(IkReal((((cj0*x1808))+(((-1.0)*cj0*r21*x1807)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1810.valid){
continue;
}
CheckValue<IkReal> x1811=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1807*x1808))+(((-1.0)*x1806*x1809))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1807))+x1809+((r10*r20*x1806)))),-1);
if(!x1811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1810.value)+(((1.5707963267949)*(x1811.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1812=IKsin(j4);
IkReal x1813=IKcos(j4);
IkReal x1814=((1.0)*sj0);
IkReal x1815=(cj5*r00);
IkReal x1816=(r11*sj5);
IkReal x1817=(cj5*r10);
IkReal x1818=(r21*sj5);
IkReal x1819=(cj5*r20);
IkReal x1820=(r01*sj5);
IkReal x1821=((1.0)*x1813);
IkReal x1822=((1.0)*x1812);
evalcond[0]=(((x1812*x1818))+(((-1.0)*x1819*x1822))+(((-1.0)*r22*x1821)));
evalcond[1]=(((x1813*x1819))+(((-1.0)*x1818*x1821))+(((-1.0)*r22*x1822)));
evalcond[2]=(cj0+(((-1.0)*x1817*x1822))+((x1812*x1816))+(((-1.0)*r12*x1821)));
evalcond[3]=((((-1.0)*x1814))+((x1812*x1820))+(((-1.0)*r02*x1821))+(((-1.0)*x1815*x1822)));
evalcond[4]=(((x1813*x1815))+(((-1.0)*r02*x1822))+(((-1.0)*x1820*x1821))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1814))+((x1813*x1817))+(((-1.0)*r12*x1822))+(((-1.0)*x1816*x1821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1823=((1.0)*cj5);
CheckValue<IkReal> x1824=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1823)))),-1);
if(!x1824.valid){
continue;
}
CheckValue<IkReal> x1825 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1823)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1824.value)))+(x1825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1826=IKsin(j4);
IkReal x1827=IKcos(j4);
IkReal x1828=((1.0)*sj0);
IkReal x1829=(cj5*r00);
IkReal x1830=(r11*sj5);
IkReal x1831=(cj5*r10);
IkReal x1832=(r21*sj5);
IkReal x1833=(cj5*r20);
IkReal x1834=(r01*sj5);
IkReal x1835=((1.0)*x1827);
IkReal x1836=((1.0)*x1826);
evalcond[0]=(((x1826*x1832))+(((-1.0)*x1833*x1836))+(((-1.0)*r22*x1835)));
evalcond[1]=((((-1.0)*x1832*x1835))+((x1827*x1833))+(((-1.0)*r22*x1836)));
evalcond[2]=(((x1826*x1830))+cj0+(((-1.0)*r12*x1835))+(((-1.0)*x1831*x1836)));
evalcond[3]=((((-1.0)*x1828))+((x1826*x1834))+(((-1.0)*r02*x1835))+(((-1.0)*x1829*x1836)));
evalcond[4]=((((-1.0)*x1834*x1835))+((x1827*x1829))+(((-1.0)*r02*x1836))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1828))+((x1827*x1831))+(((-1.0)*r12*x1836))+(((-1.0)*x1830*x1835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1837=((1.0)*cj5);
CheckValue<IkReal> x1838 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1837)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1838.valid){
continue;
}
CheckValue<IkReal> x1839=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1837))+(((-1.0)*r00*sj5)))),-1);
if(!x1839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1838.value)+(((1.5707963267949)*(x1839.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1840=IKsin(j4);
IkReal x1841=IKcos(j4);
IkReal x1842=((1.0)*sj0);
IkReal x1843=(cj5*r00);
IkReal x1844=(r11*sj5);
IkReal x1845=(cj5*r10);
IkReal x1846=(r21*sj5);
IkReal x1847=(cj5*r20);
IkReal x1848=(r01*sj5);
IkReal x1849=((1.0)*x1841);
IkReal x1850=((1.0)*x1840);
evalcond[0]=((((-1.0)*r22*x1849))+((x1840*x1846))+(((-1.0)*x1847*x1850)));
evalcond[1]=((((-1.0)*r22*x1850))+(((-1.0)*x1846*x1849))+((x1841*x1847)));
evalcond[2]=((((-1.0)*x1845*x1850))+cj0+((x1840*x1844))+(((-1.0)*r12*x1849)));
evalcond[3]=((((-1.0)*x1842))+(((-1.0)*r02*x1849))+((x1840*x1848))+(((-1.0)*x1843*x1850)));
evalcond[4]=((((-1.0)*r02*x1850))+(((-1.0)*x1848*x1849))+((x1841*x1843))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1842))+(((-1.0)*r12*x1850))+(((-1.0)*x1844*x1849))+((x1841*x1845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1851=(sj1*sj2);
IkReal x1852=(r00*sj5);
IkReal x1853=(cj1*cj2);
IkReal x1854=(cj5*r01);
IkReal x1855=((212.5)*cj1);
IkReal x1856=((500.0)*px);
CheckValue<IkReal> x1857=IKPowWithIntegerCheck(((((67.0)*x1851))+(((-67.0)*x1853))),-1);
if(!x1857.valid){
continue;
}
CheckValue<IkReal> x1858=IKPowWithIntegerCheck(((((-1.0)*x1853))+x1851),-1);
if(!x1858.valid){
continue;
}
if( IKabs(((x1857.value)*(((((-146.0)*x1853*x1854))+(((-146.0)*x1852*x1853))+(((-1.0)*x1852*x1855))+(((-1.0)*x1851*x1856))+(((146.0)*x1851*x1854))+(((146.0)*x1851*x1852))+((x1853*x1856))+(((-1.0)*x1854*x1855)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1858.value)*(((((-1.0)*x1854))+(((-1.0)*x1852)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1857.value)*(((((-146.0)*x1853*x1854))+(((-146.0)*x1852*x1853))+(((-1.0)*x1852*x1855))+(((-1.0)*x1851*x1856))+(((146.0)*x1851*x1854))+(((146.0)*x1851*x1852))+((x1853*x1856))+(((-1.0)*x1854*x1855))))))+IKsqr(((x1858.value)*(((((-1.0)*x1854))+(((-1.0)*x1852))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1857.value)*(((((-146.0)*x1853*x1854))+(((-146.0)*x1852*x1853))+(((-1.0)*x1852*x1855))+(((-1.0)*x1851*x1856))+(((146.0)*x1851*x1854))+(((146.0)*x1851*x1852))+((x1853*x1856))+(((-1.0)*x1854*x1855))))), ((x1858.value)*(((((-1.0)*x1854))+(((-1.0)*x1852))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1859=IKcos(j0);
IkReal x1860=IKsin(j0);
IkReal x1861=((0.1)*sj5);
IkReal x1862=(cj5*r11);
IkReal x1863=(cj5*r01);
IkReal x1864=(sj1*sj2);
IkReal x1865=(cj1*cj2);
IkReal x1866=((0.392)*x1860);
IkReal x1867=(cj1*x1859);
evalcond[0]=(((r00*sj5))+(((-1.0)*x1859*x1865))+((x1859*x1864))+x1863);
evalcond[1]=(((r10*sj5))+((x1860*x1864))+x1862+(((-1.0)*x1860*x1865)));
evalcond[2]=((((-0.134)*x1860))+(((-0.392)*x1859*x1864))+(((-1.0)*px))+(((0.392)*x1859*x1865))+(((0.425)*x1867))+(((-1.0)*r00*x1861))+(((-0.1)*x1863)));
evalcond[3]=((((-1.0)*x1864*x1866))+(((-1.0)*py))+((x1865*x1866))+(((0.134)*x1859))+(((0.425)*cj1*x1860))+(((-0.1)*x1862))+(((-1.0)*r10*x1861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1868=((1.0)*cj5);
IkReal x1869=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1868)));
j4eval[0]=x1869;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1868)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1869);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1870=((1.0)*cj5);
IkReal x1871=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1870)));
j4eval[0]=x1871;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1870))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1871);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1872=((1.0)*sj0);
IkReal x1873=((1.0)*cj0);
IkReal x1874=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1874;
j4eval[1]=((IKabs(((((-1.0)*r02*x1873))+(((-1.0)*r12*x1872)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1872))+(((-1.0)*r01*sj5*x1873))))));
j4eval[2]=IKsign(x1874);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1875=((-1.0)*r20);
IkReal x1877 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1877)==0){
continue;
}
IkReal x1876=pow(x1877,-0.5);
CheckValue<IkReal> x1878 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1875),IKFAST_ATAN2_MAGTHRESH);
if(!x1878.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1878.value));
IkReal gconst79=(r21*x1876);
IkReal gconst80=(x1875*x1876);
CheckValue<IkReal> x1879 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1879.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1879.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1880=((-1.0)*r20);
IkReal x1881=x1876;
CheckValue<IkReal> x1883 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1880),IKFAST_ATAN2_MAGTHRESH);
if(!x1883.valid){
continue;
}
IkReal x1882=((-1.0)*(x1883.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1882;
IkReal gconst78=x1882;
IkReal gconst79=(r21*x1881);
IkReal gconst80=(x1880*x1881);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1884=((-1.0)*r20);
IkReal x1885=x1876;
CheckValue<IkReal> x1887 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1884),IKFAST_ATAN2_MAGTHRESH);
if(!x1887.valid){
continue;
}
IkReal x1886=((-1.0)*(x1887.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1886;
IkReal gconst78=x1886;
IkReal gconst79=(r21*x1885);
IkReal gconst80=(x1884*x1885);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1888=((-1.0)*r20);
IkReal x1889=x1876;
CheckValue<IkReal> x1891 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1888),IKFAST_ATAN2_MAGTHRESH);
if(!x1891.valid){
continue;
}
IkReal x1890=((-1.0)*(x1891.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1890;
IkReal gconst78=x1890;
IkReal gconst79=(r21*x1889);
IkReal gconst80=(x1888*x1889);
IkReal x1892=r22*r22;
CheckValue<IkReal> x1895=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1892))),-1);
if(!x1895.valid){
continue;
}
IkReal x1893=x1895.value;
IkReal x1894=((((2.0)*x1893*(r20*r20)*(r21*r21)))+x1892+((x1893*(r20*r20*r20*r20)))+((x1893*(r21*r21*r21*r21))));
j4eval[0]=x1894;
j4eval[1]=IKsign(x1894);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1896=(sj1*sj2);
IkReal x1897=(gconst80*r20);
IkReal x1898=(gconst79*r21);
IkReal x1899=(cj1*cj2);
CheckValue<IkReal> x1900=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x1898*x1898)+(((-2.0)*x1897*x1898))+(x1897*x1897))),-1);
if(!x1900.valid){
continue;
}
CheckValue<IkReal> x1901 = IKatan2WithCheck(IkReal((((r22*x1896))+(((-1.0)*r22*x1899)))),IkReal((((x1897*x1899))+((x1896*x1898))+(((-1.0)*x1896*x1897))+(((-1.0)*x1898*x1899)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1900.value)))+(x1901.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1902=IKsin(j4);
IkReal x1903=IKcos(j4);
IkReal x1904=(gconst79*r01);
IkReal x1905=(gconst79*r21);
IkReal x1906=((1.0)*cj2);
IkReal x1907=(gconst79*r11);
IkReal x1908=((1.0)*sj0);
IkReal x1909=(cj1*sj2);
IkReal x1910=((1.0)*x1903);
IkReal x1911=(gconst80*x1903);
IkReal x1912=((1.0)*x1902);
IkReal x1913=(gconst80*x1912);
evalcond[0]=((((-1.0)*r22*x1910))+(((-1.0)*r20*x1913))+((x1902*x1905)));
evalcond[1]=(cj0+(((-1.0)*r12*x1910))+(((-1.0)*r10*x1913))+((x1902*x1907)));
evalcond[2]=((((-1.0)*r00*x1913))+(((-1.0)*r02*x1910))+((x1902*x1904))+(((-1.0)*x1908)));
evalcond[3]=((((-1.0)*r22*x1912))+(((-1.0)*x1905*x1910))+(((-1.0)*cj1*x1906))+((sj1*sj2))+((r20*x1911)));
evalcond[4]=((((-1.0)*r02*x1912))+(((-1.0)*x1904*x1910))+((r00*x1911))+(((-1.0)*cj0*x1909))+(((-1.0)*cj0*sj1*x1906)));
evalcond[5]=(((r10*x1911))+(((-1.0)*r12*x1912))+(((-1.0)*x1907*x1910))+(((-1.0)*sj0*sj1*x1906))+(((-1.0)*x1908*x1909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1914=((1.0)*gconst80);
CheckValue<IkReal> x1915 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*r20*sj0*x1914)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1915.valid){
continue;
}
CheckValue<IkReal> x1916=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1914))+(((-1.0)*gconst79*r10)))),-1);
if(!x1916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1915.value)+(((1.5707963267949)*(x1916.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1917=IKsin(j4);
IkReal x1918=IKcos(j4);
IkReal x1919=(gconst79*r01);
IkReal x1920=(gconst79*r21);
IkReal x1921=((1.0)*cj2);
IkReal x1922=(gconst79*r11);
IkReal x1923=((1.0)*sj0);
IkReal x1924=(cj1*sj2);
IkReal x1925=((1.0)*x1918);
IkReal x1926=(gconst80*x1918);
IkReal x1927=((1.0)*x1917);
IkReal x1928=(gconst80*x1927);
evalcond[0]=((((-1.0)*r20*x1928))+(((-1.0)*r22*x1925))+((x1917*x1920)));
evalcond[1]=((((-1.0)*r12*x1925))+cj0+((x1917*x1922))+(((-1.0)*r10*x1928)));
evalcond[2]=(((x1917*x1919))+(((-1.0)*r00*x1928))+(((-1.0)*x1923))+(((-1.0)*r02*x1925)));
evalcond[3]=((((-1.0)*cj1*x1921))+((sj1*sj2))+((r20*x1926))+(((-1.0)*r22*x1927))+(((-1.0)*x1920*x1925)));
evalcond[4]=(((r00*x1926))+(((-1.0)*cj0*x1924))+(((-1.0)*cj0*sj1*x1921))+(((-1.0)*x1919*x1925))+(((-1.0)*r02*x1927)));
evalcond[5]=((((-1.0)*r12*x1927))+(((-1.0)*x1922*x1925))+(((-1.0)*sj0*sj1*x1921))+((r10*x1926))+(((-1.0)*x1923*x1924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1929=((1.0)*gconst80);
CheckValue<IkReal> x1930 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x1929)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1930.valid){
continue;
}
CheckValue<IkReal> x1931=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1929))+(((-1.0)*gconst79*r00)))),-1);
if(!x1931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1930.value)+(((1.5707963267949)*(x1931.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1932=IKsin(j4);
IkReal x1933=IKcos(j4);
IkReal x1934=(gconst79*r01);
IkReal x1935=(gconst79*r21);
IkReal x1936=((1.0)*cj2);
IkReal x1937=(gconst79*r11);
IkReal x1938=((1.0)*sj0);
IkReal x1939=(cj1*sj2);
IkReal x1940=((1.0)*x1933);
IkReal x1941=(gconst80*x1933);
IkReal x1942=((1.0)*x1932);
IkReal x1943=(gconst80*x1942);
evalcond[0]=((((-1.0)*r22*x1940))+((x1932*x1935))+(((-1.0)*r20*x1943)));
evalcond[1]=(cj0+((x1932*x1937))+(((-1.0)*r12*x1940))+(((-1.0)*r10*x1943)));
evalcond[2]=(((x1932*x1934))+(((-1.0)*r02*x1940))+(((-1.0)*r00*x1943))+(((-1.0)*x1938)));
evalcond[3]=((((-1.0)*r22*x1942))+((r20*x1941))+(((-1.0)*cj1*x1936))+((sj1*sj2))+(((-1.0)*x1935*x1940)));
evalcond[4]=((((-1.0)*r02*x1942))+(((-1.0)*cj0*x1939))+((r00*x1941))+(((-1.0)*cj0*sj1*x1936))+(((-1.0)*x1934*x1940)));
evalcond[5]=((((-1.0)*x1937*x1940))+((r10*x1941))+(((-1.0)*r12*x1942))+(((-1.0)*x1938*x1939))+(((-1.0)*sj0*sj1*x1936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1944=((-1.0)*r21);
IkReal x1946 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1946)==0){
continue;
}
IkReal x1945=pow(x1946,-0.5);
CheckValue<IkReal> x1947 = IKatan2WithCheck(IkReal(x1944),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1947.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1947.value))));
IkReal gconst82=(x1944*x1945);
IkReal gconst83=((1.0)*r20*x1945);
CheckValue<IkReal> x1948 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1948.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1948.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1949=((-1.0)*r21);
CheckValue<IkReal> x1952 = IKatan2WithCheck(IkReal(x1949),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1952.valid){
continue;
}
IkReal x1950=((1.0)*(x1952.value));
IkReal x1951=x1945;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1950)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1950)));
IkReal gconst82=(x1949*x1951);
IkReal gconst83=((1.0)*r20*x1951);
IkReal x1953=r22*r22;
IkReal x1954=((1.0)*x1953);
CheckValue<IkReal> x1958=IKPowWithIntegerCheck(((-1.0)+x1953),-1);
if(!x1958.valid){
continue;
}
IkReal x1955=x1958.value;
if((((1.0)+(((-1.0)*x1954)))) < -0.00001)
continue;
IkReal x1956=IKsqrt(((1.0)+(((-1.0)*x1954))));
IkReal x1957=(cj0*x1955*x1956);
j4eval[0]=((IKabs(((((-1.0)*x1954*x1957))+x1957)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1959=((-1.0)*r21);
CheckValue<IkReal> x1962 = IKatan2WithCheck(IkReal(x1959),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1962.valid){
continue;
}
IkReal x1960=((1.0)*(x1962.value));
IkReal x1961=x1945;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1960)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1960)));
IkReal gconst82=(x1959*x1961);
IkReal gconst83=((1.0)*r20*x1961);
IkReal x1963=r22*r22;
IkReal x1964=((1.0)*x1963);
CheckValue<IkReal> x1968=IKPowWithIntegerCheck(((-1.0)+x1963),-1);
if(!x1968.valid){
continue;
}
IkReal x1965=x1968.value;
if((((1.0)+(((-1.0)*x1964)))) < -0.00001)
continue;
IkReal x1966=IKsqrt(((1.0)+(((-1.0)*x1964))));
IkReal x1967=(sj0*x1965*x1966);
j4eval[0]=((IKabs(((((-1.0)*x1964*x1967))+x1967)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1969=((-1.0)*r21);
CheckValue<IkReal> x1972 = IKatan2WithCheck(IkReal(x1969),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1972.valid){
continue;
}
IkReal x1970=((1.0)*(x1972.value));
IkReal x1971=x1945;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1970)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1970)));
IkReal gconst82=(x1969*x1971);
IkReal gconst83=((1.0)*r20*x1971);
IkReal x1973=r22*r22;
IkReal x1974=(r12*sj0);
IkReal x1975=(cj0*r02);
CheckValue<IkReal> x1979=IKPowWithIntegerCheck(((-1.0)+x1973),-1);
if(!x1979.valid){
continue;
}
IkReal x1976=x1979.value;
if((((1.0)+(((-1.0)*x1973)))) < -0.00001)
continue;
IkReal x1977=IKsqrt(((1.0)+(((-1.0)*x1973))));
IkReal x1978=(r22*x1976*x1977);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x1975*x1978))+((x1974*x1978)))))+(IKabs(((((-1.0)*x1975))+(((-1.0)*x1974))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1980=((1.0)*sj0);
IkReal x1981=((1.0)*cj0);
CheckValue<IkReal> x1982=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1982.valid){
continue;
}
CheckValue<IkReal> x1983 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1981))+(((-1.0)*r12*x1980)))),IkReal(((((-1.0)*gconst82*r01*x1981))+(((-1.0)*gconst82*r11*x1980))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1982.value)))+(x1983.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1984=IKsin(j4);
IkReal x1985=IKcos(j4);
IkReal x1986=(gconst82*r11);
IkReal x1987=((1.0)*cj2);
IkReal x1988=((1.0)*sj0);
IkReal x1989=(cj1*sj2);
IkReal x1990=((1.0)*x1985);
IkReal x1991=(gconst83*x1985);
IkReal x1992=(gconst82*x1984);
IkReal x1993=((1.0)*x1984);
evalcond[0]=(((r21*x1992))+(((-1.0)*gconst83*r20*x1993))+(((-1.0)*r22*x1990)));
evalcond[1]=(((x1984*x1986))+(((-1.0)*gconst83*r10*x1993))+cj0+(((-1.0)*r12*x1990)));
evalcond[2]=((((-1.0)*x1988))+(((-1.0)*r02*x1990))+(((-1.0)*gconst83*r00*x1993))+((r01*x1992)));
evalcond[3]=(((sj1*sj2))+((r20*x1991))+(((-1.0)*cj1*x1987))+(((-1.0)*r22*x1993))+(((-1.0)*gconst82*r21*x1990)));
evalcond[4]=((((-1.0)*gconst82*r01*x1990))+(((-1.0)*r02*x1993))+((r00*x1991))+(((-1.0)*cj0*sj1*x1987))+(((-1.0)*cj0*x1989)));
evalcond[5]=((((-1.0)*x1986*x1990))+((r10*x1991))+(((-1.0)*x1988*x1989))+(((-1.0)*sj0*sj1*x1987))+(((-1.0)*r12*x1993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1994=((1.0)*gconst83);
CheckValue<IkReal> x1995=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1994)))),-1);
if(!x1995.valid){
continue;
}
CheckValue<IkReal> x1996 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1995.value)))+(x1996.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1997=IKsin(j4);
IkReal x1998=IKcos(j4);
IkReal x1999=(gconst82*r11);
IkReal x2000=((1.0)*cj2);
IkReal x2001=((1.0)*sj0);
IkReal x2002=(cj1*sj2);
IkReal x2003=((1.0)*x1998);
IkReal x2004=(gconst83*x1998);
IkReal x2005=(gconst82*x1997);
IkReal x2006=((1.0)*x1997);
evalcond[0]=(((r21*x2005))+(((-1.0)*r22*x2003))+(((-1.0)*gconst83*r20*x2006)));
evalcond[1]=(cj0+(((-1.0)*r12*x2003))+(((-1.0)*gconst83*r10*x2006))+((x1997*x1999)));
evalcond[2]=(((r01*x2005))+(((-1.0)*gconst83*r00*x2006))+(((-1.0)*r02*x2003))+(((-1.0)*x2001)));
evalcond[3]=((((-1.0)*r22*x2006))+((sj1*sj2))+(((-1.0)*cj1*x2000))+((r20*x2004))+(((-1.0)*gconst82*r21*x2003)));
evalcond[4]=((((-1.0)*gconst82*r01*x2003))+((r00*x2004))+(((-1.0)*r02*x2006))+(((-1.0)*cj0*x2002))+(((-1.0)*cj0*sj1*x2000)));
evalcond[5]=(((r10*x2004))+(((-1.0)*r12*x2006))+(((-1.0)*sj0*sj1*x2000))+(((-1.0)*x2001*x2002))+(((-1.0)*x1999*x2003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2007=((1.0)*gconst83);
CheckValue<IkReal> x2008 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2007)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2008.valid){
continue;
}
CheckValue<IkReal> x2009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2007))+(((-1.0)*gconst82*r00)))),-1);
if(!x2009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2008.value)+(((1.5707963267949)*(x2009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2010=IKsin(j4);
IkReal x2011=IKcos(j4);
IkReal x2012=(gconst82*r11);
IkReal x2013=((1.0)*cj2);
IkReal x2014=((1.0)*sj0);
IkReal x2015=(cj1*sj2);
IkReal x2016=((1.0)*x2011);
IkReal x2017=(gconst83*x2011);
IkReal x2018=(gconst82*x2010);
IkReal x2019=((1.0)*x2010);
evalcond[0]=((((-1.0)*gconst83*r20*x2019))+((r21*x2018))+(((-1.0)*r22*x2016)));
evalcond[1]=(cj0+((x2010*x2012))+(((-1.0)*r12*x2016))+(((-1.0)*gconst83*r10*x2019)));
evalcond[2]=((((-1.0)*x2014))+((r01*x2018))+(((-1.0)*gconst83*r00*x2019))+(((-1.0)*r02*x2016)));
evalcond[3]=(((r20*x2017))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2016))+(((-1.0)*cj1*x2013))+(((-1.0)*r22*x2019)));
evalcond[4]=((((-1.0)*cj0*sj1*x2013))+((r00*x2017))+(((-1.0)*r02*x2019))+(((-1.0)*cj0*x2015))+(((-1.0)*gconst82*r01*x2016)));
evalcond[5]=(((r10*x2017))+(((-1.0)*x2014*x2015))+(((-1.0)*r12*x2019))+(((-1.0)*x2012*x2016))+(((-1.0)*sj0*sj1*x2013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2020=((-1.0)*r10);
IkReal x2022 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2022)==0){
continue;
}
IkReal x2021=pow(x2022,-0.5);
CheckValue<IkReal> x2023 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2020),IKFAST_ATAN2_MAGTHRESH);
if(!x2023.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2023.value));
IkReal gconst85=(r11*x2021);
IkReal gconst86=(x2020*x2021);
CheckValue<IkReal> x2024 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2024.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2024.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2025=((-1.0)*r10);
IkReal x2026=x2021;
CheckValue<IkReal> x2028 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2025),IKFAST_ATAN2_MAGTHRESH);
if(!x2028.valid){
continue;
}
IkReal x2027=((-1.0)*(x2028.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2027;
IkReal gconst84=x2027;
IkReal gconst85=(r11*x2026);
IkReal gconst86=(x2025*x2026);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2029=((1.0)*sj0);
IkReal x2030=((1.0)*gconst85);
CheckValue<IkReal> x2031 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2029))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*gconst85*r11*x2029))+(((-1.0)*cj0*r01*x2030))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2031.valid){
continue;
}
CheckValue<IkReal> x2032=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2030)))),-1);
if(!x2032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2031.value)+(((1.5707963267949)*(x2032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2033=IKsin(j4);
IkReal x2034=IKcos(j4);
IkReal x2035=(gconst85*r21);
IkReal x2036=(gconst86*r00);
IkReal x2037=(gconst86*r10);
IkReal x2038=((1.0)*cj2);
IkReal x2039=(gconst85*r11);
IkReal x2040=(gconst85*r01);
IkReal x2041=((1.0)*sj0);
IkReal x2042=(gconst86*r20);
IkReal x2043=(cj1*sj2);
IkReal x2044=((1.0)*x2034);
IkReal x2045=((1.0)*x2033);
evalcond[0]=((((-1.0)*r22*x2044))+((x2033*x2035))+(((-1.0)*x2042*x2045)));
evalcond[1]=(cj0+((x2033*x2039))+(((-1.0)*x2037*x2045))+(((-1.0)*r12*x2044)));
evalcond[2]=((((-1.0)*x2041))+(((-1.0)*r02*x2044))+((x2033*x2040))+(((-1.0)*x2036*x2045)));
evalcond[3]=((((-1.0)*r22*x2045))+(((-1.0)*cj1*x2038))+((sj1*sj2))+(((-1.0)*x2035*x2044))+((x2034*x2042)));
evalcond[4]=((((-1.0)*cj0*x2043))+((x2034*x2036))+(((-1.0)*r02*x2045))+(((-1.0)*x2040*x2044))+(((-1.0)*cj0*sj1*x2038)));
evalcond[5]=(((x2034*x2037))+(((-1.0)*x2039*x2044))+(((-1.0)*sj0*sj1*x2038))+(((-1.0)*x2041*x2043))+(((-1.0)*r12*x2045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2046=((1.0)*gconst86);
CheckValue<IkReal> x2047 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2046))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2047.valid){
continue;
}
CheckValue<IkReal> x2048=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r00))+(((-1.0)*r01*x2046)))),-1);
if(!x2048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2047.value)+(((1.5707963267949)*(x2048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2049=IKsin(j4);
IkReal x2050=IKcos(j4);
IkReal x2051=(gconst85*r21);
IkReal x2052=(gconst86*r00);
IkReal x2053=(gconst86*r10);
IkReal x2054=((1.0)*cj2);
IkReal x2055=(gconst85*r11);
IkReal x2056=(gconst85*r01);
IkReal x2057=((1.0)*sj0);
IkReal x2058=(gconst86*r20);
IkReal x2059=(cj1*sj2);
IkReal x2060=((1.0)*x2050);
IkReal x2061=((1.0)*x2049);
evalcond[0]=((((-1.0)*x2058*x2061))+((x2049*x2051))+(((-1.0)*r22*x2060)));
evalcond[1]=((((-1.0)*r12*x2060))+cj0+((x2049*x2055))+(((-1.0)*x2053*x2061)));
evalcond[2]=((((-1.0)*r02*x2060))+((x2049*x2056))+(((-1.0)*x2052*x2061))+(((-1.0)*x2057)));
evalcond[3]=((((-1.0)*cj1*x2054))+(((-1.0)*r22*x2061))+((sj1*sj2))+((x2050*x2058))+(((-1.0)*x2051*x2060)));
evalcond[4]=((((-1.0)*r02*x2061))+(((-1.0)*cj0*x2059))+(((-1.0)*x2056*x2060))+((x2050*x2052))+(((-1.0)*cj0*sj1*x2054)));
evalcond[5]=((((-1.0)*r12*x2061))+(((-1.0)*x2055*x2060))+(((-1.0)*x2057*x2059))+(((-1.0)*sj0*sj1*x2054))+((x2050*x2053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2062=((-1.0)*r11);
IkReal x2064 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2064)==0){
continue;
}
IkReal x2063=pow(x2064,-0.5);
CheckValue<IkReal> x2065 = IKatan2WithCheck(IkReal(x2062),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2065.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2065.value))));
IkReal gconst88=(x2062*x2063);
IkReal gconst89=((1.0)*r10*x2063);
CheckValue<IkReal> x2066 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2066.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2066.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2067=((-1.0)*r11);
CheckValue<IkReal> x2070 = IKatan2WithCheck(IkReal(x2067),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2070.valid){
continue;
}
IkReal x2068=((1.0)*(x2070.value));
IkReal x2069=x2063;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2068)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2068)));
IkReal gconst88=(x2067*x2069);
IkReal gconst89=((1.0)*r10*x2069);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2071=((-1.0)*r11);
CheckValue<IkReal> x2074 = IKatan2WithCheck(IkReal(x2071),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2074.valid){
continue;
}
IkReal x2072=((1.0)*(x2074.value));
IkReal x2073=x2063;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2072)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2072)));
IkReal gconst88=(x2071*x2073);
IkReal gconst89=((1.0)*r10*x2073);
IkReal x2075=r12*r12;
IkReal x2076=((1.0)*sj0);
IkReal x2077=(cj0*r02);
IkReal x2078=x2063;
j4eval[0]=((IKabs(((((-1.0)*r12*x2076))+(((-1.0)*x2077)))))+(IKabs((((sj0*x2075*x2078))+(((-1.0)*x2076*x2078))+((r12*x2077*x2078))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2079=((-1.0)*r11);
CheckValue<IkReal> x2082 = IKatan2WithCheck(IkReal(x2079),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2082.valid){
continue;
}
IkReal x2080=((1.0)*(x2082.value));
IkReal x2081=x2063;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2080)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2080)));
IkReal gconst88=(x2079*x2081);
IkReal gconst89=((1.0)*r10*x2081);
IkReal x2083=r12*r12;
IkReal x2084=(cj1*cj2*r22);
IkReal x2085=(r22*sj1*sj2);
CheckValue<IkReal> x2089=IKPowWithIntegerCheck(((-1.0)+x2083),-1);
if(!x2089.valid){
continue;
}
IkReal x2086=x2089.value;
if((((1.0)+(((-1.0)*x2083)))) < -0.00001)
continue;
IkReal x2087=IKsqrt(((1.0)+(((-1.0)*x2083))));
IkReal x2088=(r12*x2086*x2087);
j4eval[0]=((IKabs(((((-1.0)*x2084))+x2085)))+(IKabs((((x2084*x2088))+(((-1.0)*x2085*x2088))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2090=(cj1*cj2);
IkReal x2091=(gconst89*r20);
IkReal x2092=(gconst88*r21);
IkReal x2093=(sj1*sj2);
CheckValue<IkReal> x2094=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x2091*x2092))+(x2091*x2091)+(x2092*x2092))),-1);
if(!x2094.valid){
continue;
}
CheckValue<IkReal> x2095 = IKatan2WithCheck(IkReal((((r22*x2093))+(((-1.0)*r22*x2090)))),IkReal(((((-1.0)*x2091*x2093))+((x2090*x2091))+((x2092*x2093))+(((-1.0)*x2090*x2092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2094.value)))+(x2095.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2096=IKsin(j4);
IkReal x2097=IKcos(j4);
IkReal x2098=((1.0)*sj0);
IkReal x2099=((1.0)*cj2);
IkReal x2100=(gconst89*r20);
IkReal x2101=(gconst89*r10);
IkReal x2102=(gconst89*r00);
IkReal x2103=(cj1*sj2);
IkReal x2104=((1.0)*x2097);
IkReal x2105=((1.0)*x2096);
IkReal x2106=(gconst88*x2096);
evalcond[0]=((((-1.0)*r22*x2104))+((r21*x2106))+(((-1.0)*x2100*x2105)));
evalcond[1]=((((-1.0)*r12*x2104))+cj0+((r11*x2106))+(((-1.0)*x2101*x2105)));
evalcond[2]=((((-1.0)*x2098))+(((-1.0)*r02*x2104))+(((-1.0)*x2102*x2105))+((r01*x2106)));
evalcond[3]=((((-1.0)*r22*x2105))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2104))+((x2097*x2100))+(((-1.0)*cj1*x2099)));
evalcond[4]=((((-1.0)*r02*x2105))+(((-1.0)*gconst88*r01*x2104))+(((-1.0)*cj0*x2103))+(((-1.0)*cj0*sj1*x2099))+((x2097*x2102)));
evalcond[5]=((((-1.0)*cj2*sj1*x2098))+(((-1.0)*gconst88*r11*x2104))+(((-1.0)*r12*x2105))+((x2097*x2101))+(((-1.0)*x2098*x2103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2107=((1.0)*sj0);
IkReal x2108=((1.0)*cj0);
CheckValue<IkReal> x2109 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2108))+(((-1.0)*r12*x2107)))),IkReal(((((-1.0)*gconst88*r11*x2107))+(((-1.0)*gconst88*r01*x2108))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2109.valid){
continue;
}
CheckValue<IkReal> x2110=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2109.value)+(((1.5707963267949)*(x2110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2111=IKsin(j4);
IkReal x2112=IKcos(j4);
IkReal x2113=((1.0)*sj0);
IkReal x2114=((1.0)*cj2);
IkReal x2115=(gconst89*r20);
IkReal x2116=(gconst89*r10);
IkReal x2117=(gconst89*r00);
IkReal x2118=(cj1*sj2);
IkReal x2119=((1.0)*x2112);
IkReal x2120=((1.0)*x2111);
IkReal x2121=(gconst88*x2111);
evalcond[0]=(((r21*x2121))+(((-1.0)*x2115*x2120))+(((-1.0)*r22*x2119)));
evalcond[1]=((((-1.0)*x2116*x2120))+cj0+((r11*x2121))+(((-1.0)*r12*x2119)));
evalcond[2]=((((-1.0)*x2117*x2120))+(((-1.0)*x2113))+((r01*x2121))+(((-1.0)*r02*x2119)));
evalcond[3]=((((-1.0)*r22*x2120))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2119))+(((-1.0)*cj1*x2114))+((x2112*x2115)));
evalcond[4]=((((-1.0)*r02*x2120))+(((-1.0)*cj0*sj1*x2114))+(((-1.0)*cj0*x2118))+(((-1.0)*gconst88*r01*x2119))+((x2112*x2117)));
evalcond[5]=((((-1.0)*gconst88*r11*x2119))+(((-1.0)*cj2*sj1*x2113))+(((-1.0)*r12*x2120))+((x2112*x2116))+(((-1.0)*x2113*x2118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2122=((1.0)*gconst89);
CheckValue<IkReal> x2123 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2122))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2123.valid){
continue;
}
CheckValue<IkReal> x2124=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2122))+(((-1.0)*gconst88*r00)))),-1);
if(!x2124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2123.value)+(((1.5707963267949)*(x2124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2125=IKsin(j4);
IkReal x2126=IKcos(j4);
IkReal x2127=((1.0)*sj0);
IkReal x2128=((1.0)*cj2);
IkReal x2129=(gconst89*r20);
IkReal x2130=(gconst89*r10);
IkReal x2131=(gconst89*r00);
IkReal x2132=(cj1*sj2);
IkReal x2133=((1.0)*x2126);
IkReal x2134=((1.0)*x2125);
IkReal x2135=(gconst88*x2125);
evalcond[0]=((((-1.0)*r22*x2133))+((r21*x2135))+(((-1.0)*x2129*x2134)));
evalcond[1]=(cj0+(((-1.0)*r12*x2133))+((r11*x2135))+(((-1.0)*x2130*x2134)));
evalcond[2]=(((r01*x2135))+(((-1.0)*x2127))+(((-1.0)*x2131*x2134))+(((-1.0)*r02*x2133)));
evalcond[3]=((((-1.0)*r22*x2134))+((sj1*sj2))+(((-1.0)*cj1*x2128))+(((-1.0)*gconst88*r21*x2133))+((x2126*x2129)));
evalcond[4]=((((-1.0)*gconst88*r01*x2133))+(((-1.0)*cj0*x2132))+(((-1.0)*cj0*sj1*x2128))+((x2126*x2131))+(((-1.0)*r02*x2134)));
evalcond[5]=((((-1.0)*gconst88*r11*x2133))+(((-1.0)*r12*x2134))+((x2126*x2130))+(((-1.0)*x2127*x2132))+(((-1.0)*cj2*sj1*x2127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2136=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2136;
j4eval[1]=IKsign(x2136);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2137=((1.0)*cj5);
IkReal x2138=((((-1.0)*r01*x2137))+(((-1.0)*r00*sj5)));
j4eval[0]=x2138;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2137)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2138);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2139=cj5*cj5;
IkReal x2140=r11*r11;
IkReal x2141=(r11*sj5);
IkReal x2142=(cj5*r10);
IkReal x2143=((r12*r12)+x2140+(((-1.0)*x2139*x2140))+(((-2.0)*x2141*x2142))+((x2139*(r10*r10))));
j4eval[0]=x2143;
j4eval[1]=IKsign(x2143);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2141))+x2142))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2144=cj5*cj5;
IkReal x2145=r11*r11;
IkReal x2146=(cj5*r10);
IkReal x2147=(r11*sj5);
CheckValue<IkReal> x2148 = IKatan2WithCheck(IkReal(((((-1.0)*x2147))+x2146)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2148.valid){
continue;
}
CheckValue<IkReal> x2149=IKPowWithIntegerCheck(IKsign((((x2144*(r10*r10)))+(r12*r12)+x2145+(((-1.0)*x2144*x2145))+(((-2.0)*x2146*x2147)))),-1);
if(!x2149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2148.value)+(((1.5707963267949)*(x2149.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2150=IKsin(j4);
IkReal x2151=IKcos(j4);
IkReal x2152=(cj5*r10);
IkReal x2153=(r01*sj5);
IkReal x2154=((1.0)*cj2);
IkReal x2155=(cj5*r00);
IkReal x2156=(cj5*r20);
IkReal x2157=((1.0)*x2151);
IkReal x2158=((1.0)*x2150);
IkReal x2159=(sj5*x2150);
evalcond[0]=((((-1.0)*r22*x2157))+((r21*x2159))+(((-1.0)*x2156*x2158)));
evalcond[1]=((((-1.0)*r02*x2157))+((x2150*x2153))+(((-1.0)*x2155*x2158)));
evalcond[2]=((((-1.0)*r11*sj5*x2157))+(((-1.0)*r12*x2158))+((x2151*x2152)));
evalcond[3]=((1.0)+(((-1.0)*x2152*x2158))+(((-1.0)*r12*x2157))+((r11*x2159)));
evalcond[4]=(((sj1*sj2))+((x2151*x2156))+(((-1.0)*cj1*x2154))+(((-1.0)*r22*x2158))+(((-1.0)*r21*sj5*x2157)));
evalcond[5]=((((-1.0)*r02*x2158))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2154))+(((-1.0)*x2153*x2157))+((x2151*x2155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2160=((1.0)*cj5);
CheckValue<IkReal> x2161 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2160))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2161.valid){
continue;
}
CheckValue<IkReal> x2162=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2160))+(((-1.0)*r00*sj5)))),-1);
if(!x2162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2161.value)+(((1.5707963267949)*(x2162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2163=IKsin(j4);
IkReal x2164=IKcos(j4);
IkReal x2165=(cj5*r10);
IkReal x2166=(r01*sj5);
IkReal x2167=((1.0)*cj2);
IkReal x2168=(cj5*r00);
IkReal x2169=(cj5*r20);
IkReal x2170=((1.0)*x2164);
IkReal x2171=((1.0)*x2163);
IkReal x2172=(sj5*x2163);
evalcond[0]=(((r21*x2172))+(((-1.0)*x2169*x2171))+(((-1.0)*r22*x2170)));
evalcond[1]=((((-1.0)*x2168*x2171))+(((-1.0)*r02*x2170))+((x2163*x2166)));
evalcond[2]=(((x2164*x2165))+(((-1.0)*r11*sj5*x2170))+(((-1.0)*r12*x2171)));
evalcond[3]=((1.0)+((r11*x2172))+(((-1.0)*x2165*x2171))+(((-1.0)*r12*x2170)));
evalcond[4]=((((-1.0)*r21*sj5*x2170))+((x2164*x2169))+((sj1*sj2))+(((-1.0)*cj1*x2167))+(((-1.0)*r22*x2171)));
evalcond[5]=((((-1.0)*sj1*x2167))+((x2164*x2168))+(((-1.0)*x2166*x2170))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2173=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2173.valid){
continue;
}
CheckValue<IkReal> x2174 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2173.value)))+(x2174.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2175=IKsin(j4);
IkReal x2176=IKcos(j4);
IkReal x2177=(cj5*r10);
IkReal x2178=(r01*sj5);
IkReal x2179=((1.0)*cj2);
IkReal x2180=(cj5*r00);
IkReal x2181=(cj5*r20);
IkReal x2182=((1.0)*x2176);
IkReal x2183=((1.0)*x2175);
IkReal x2184=(sj5*x2175);
evalcond[0]=(((r21*x2184))+(((-1.0)*r22*x2182))+(((-1.0)*x2181*x2183)));
evalcond[1]=((((-1.0)*x2180*x2183))+((x2175*x2178))+(((-1.0)*r02*x2182)));
evalcond[2]=((((-1.0)*r11*sj5*x2182))+((x2176*x2177))+(((-1.0)*r12*x2183)));
evalcond[3]=((1.0)+(((-1.0)*x2177*x2183))+((r11*x2184))+(((-1.0)*r12*x2182)));
evalcond[4]=((((-1.0)*r21*sj5*x2182))+((sj1*sj2))+(((-1.0)*r22*x2183))+((x2176*x2181))+(((-1.0)*cj1*x2179)));
evalcond[5]=((((-1.0)*sj1*x2179))+(((-1.0)*cj1*sj2))+((x2176*x2180))+(((-1.0)*r02*x2183))+(((-1.0)*x2178*x2182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2185=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2185;
j4eval[1]=IKsign(x2185);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2186=((1.0)*cj5);
IkReal x2187=((((-1.0)*r21*x2186))+(((-1.0)*r20*sj5)));
j4eval[0]=x2187;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2186))))));
j4eval[2]=IKsign(x2187);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2188=cj5*cj5;
IkReal x2189=r11*r11;
IkReal x2190=(cj5*r10);
IkReal x2191=(r11*sj5);
IkReal x2192=((((2.0)*x2190*x2191))+(((-1.0)*x2189))+(((-1.0)*(r12*r12)))+(((-1.0)*x2188*(r10*r10)))+((x2188*x2189)));
j4eval[0]=x2192;
j4eval[1]=((IKabs(((((-1.0)*x2191))+x2190)))+(IKabs(r12)));
j4eval[2]=IKsign(x2192);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2193=cj5*cj5;
IkReal x2194=r11*r11;
IkReal x2195=(cj5*r10);
IkReal x2196=(r11*sj5);
CheckValue<IkReal> x2197=IKPowWithIntegerCheck(IKsign(((((2.0)*x2195*x2196))+((x2193*x2194))+(((-1.0)*x2194))+(((-1.0)*x2193*(r10*r10)))+(((-1.0)*(r12*r12))))),-1);
if(!x2197.valid){
continue;
}
CheckValue<IkReal> x2198 = IKatan2WithCheck(IkReal(((((-1.0)*x2196))+x2195)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2197.value)))+(x2198.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2199=IKsin(j4);
IkReal x2200=IKcos(j4);
IkReal x2201=(cj5*r10);
IkReal x2202=(r01*sj5);
IkReal x2203=(cj5*r00);
IkReal x2204=(cj5*r20);
IkReal x2205=((1.0)*x2200);
IkReal x2206=((1.0)*x2199);
IkReal x2207=(sj5*x2199);
evalcond[0]=((((-1.0)*x2204*x2206))+(((-1.0)*r22*x2205))+((r21*x2207)));
evalcond[1]=((((-1.0)*x2203*x2206))+((x2199*x2202))+(((-1.0)*r02*x2205)));
evalcond[2]=((((-1.0)*r12*x2206))+((x2200*x2201))+(((-1.0)*r11*sj5*x2205)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2205))+((r11*x2207))+(((-1.0)*x2201*x2206)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2200*x2203))+(((-1.0)*x2202*x2205))+(((-1.0)*r02*x2206)));
evalcond[5]=(((x2200*x2204))+(((-1.0)*r22*x2206))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2208=((1.0)*cj5);
CheckValue<IkReal> x2209=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2208))+(((-1.0)*r20*sj5)))),-1);
if(!x2209.valid){
continue;
}
CheckValue<IkReal> x2210 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2208)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2209.value)))+(x2210.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2211=IKsin(j4);
IkReal x2212=IKcos(j4);
IkReal x2213=(cj5*r10);
IkReal x2214=(r01*sj5);
IkReal x2215=(cj5*r00);
IkReal x2216=(cj5*r20);
IkReal x2217=((1.0)*x2212);
IkReal x2218=((1.0)*x2211);
IkReal x2219=(sj5*x2211);
evalcond[0]=((((-1.0)*r22*x2217))+(((-1.0)*x2216*x2218))+((r21*x2219)));
evalcond[1]=((((-1.0)*x2215*x2218))+((x2211*x2214))+(((-1.0)*r02*x2217)));
evalcond[2]=((((-1.0)*r12*x2218))+((x2212*x2213))+(((-1.0)*r11*sj5*x2217)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2217))+((r11*x2219))+(((-1.0)*x2213*x2218)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2214*x2217))+((cj1*sj2))+((x2212*x2215))+(((-1.0)*r02*x2218)));
evalcond[5]=((((-1.0)*r22*x2218))+(((-1.0)*r21*sj5*x2217))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2212*x2216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2220 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2220.valid){
continue;
}
CheckValue<IkReal> x2221=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2220.value)+(((1.5707963267949)*(x2221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2222=IKsin(j4);
IkReal x2223=IKcos(j4);
IkReal x2224=(cj5*r10);
IkReal x2225=(r01*sj5);
IkReal x2226=(cj5*r00);
IkReal x2227=(cj5*r20);
IkReal x2228=((1.0)*x2223);
IkReal x2229=((1.0)*x2222);
IkReal x2230=(sj5*x2222);
evalcond[0]=((((-1.0)*x2227*x2229))+((r21*x2230))+(((-1.0)*r22*x2228)));
evalcond[1]=((((-1.0)*x2226*x2229))+((x2222*x2225))+(((-1.0)*r02*x2228)));
evalcond[2]=((((-1.0)*r11*sj5*x2228))+(((-1.0)*r12*x2229))+((x2223*x2224)));
evalcond[3]=((-1.0)+(((-1.0)*x2224*x2229))+(((-1.0)*r12*x2228))+((r11*x2230)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2225*x2228))+((cj1*sj2))+(((-1.0)*r02*x2229))+((x2223*x2226)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2228))+(((-1.0)*r22*x2229))+((x2223*x2227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2231=((-1.0)*r00);
IkReal x2233 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2233)==0){
continue;
}
IkReal x2232=pow(x2233,-0.5);
CheckValue<IkReal> x2234 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2231),IKFAST_ATAN2_MAGTHRESH);
if(!x2234.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2234.value));
IkReal gconst91=(r01*x2232);
IkReal gconst92=(x2231*x2232);
CheckValue<IkReal> x2235 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2235.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2235.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2236=((-1.0)*r00);
IkReal x2237=x2232;
CheckValue<IkReal> x2239 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2236),IKFAST_ATAN2_MAGTHRESH);
if(!x2239.valid){
continue;
}
IkReal x2238=((-1.0)*(x2239.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2238;
IkReal gconst90=x2238;
IkReal gconst91=(r01*x2237);
IkReal gconst92=(x2236*x2237);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2240=((1.0)*sj0);
IkReal x2241=((1.0)*cj0);
CheckValue<IkReal> x2242 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2241))+(((-1.0)*r12*x2240)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r11*x2240))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2241)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2242.valid){
continue;
}
CheckValue<IkReal> x2243=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2242.value)+(((1.5707963267949)*(x2243.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2244=IKsin(j4);
IkReal x2245=IKcos(j4);
IkReal x2246=((1.0)*cj2);
IkReal x2247=(gconst92*r00);
IkReal x2248=(gconst92*r20);
IkReal x2249=((1.0)*sj0);
IkReal x2250=(gconst92*r10);
IkReal x2251=(cj1*sj2);
IkReal x2252=((1.0)*x2245);
IkReal x2253=(gconst91*x2244);
IkReal x2254=((1.0)*x2244);
evalcond[0]=((((-1.0)*r22*x2252))+(((-1.0)*x2248*x2254))+((r21*x2253)));
evalcond[1]=(cj0+(((-1.0)*r12*x2252))+(((-1.0)*x2250*x2254))+((r11*x2253)));
evalcond[2]=((((-1.0)*r02*x2252))+(((-1.0)*x2249))+((r01*x2253))+(((-1.0)*x2247*x2254)));
evalcond[3]=((((-1.0)*r22*x2254))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2252))+(((-1.0)*cj1*x2246))+((x2245*x2248)));
evalcond[4]=((((-1.0)*r02*x2254))+(((-1.0)*cj0*x2251))+(((-1.0)*gconst91*r01*x2252))+(((-1.0)*cj0*sj1*x2246))+((x2245*x2247)));
evalcond[5]=((((-1.0)*x2249*x2251))+(((-1.0)*sj0*sj1*x2246))+((x2245*x2250))+(((-1.0)*r12*x2254))+(((-1.0)*gconst91*r11*x2252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2255=((1.0)*gconst92);
CheckValue<IkReal> x2256 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2255)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2256.valid){
continue;
}
CheckValue<IkReal> x2257=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2255)))),-1);
if(!x2257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2256.value)+(((1.5707963267949)*(x2257.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2258=IKsin(j4);
IkReal x2259=IKcos(j4);
IkReal x2260=((1.0)*cj2);
IkReal x2261=(gconst92*r00);
IkReal x2262=(gconst92*r20);
IkReal x2263=((1.0)*sj0);
IkReal x2264=(gconst92*r10);
IkReal x2265=(cj1*sj2);
IkReal x2266=((1.0)*x2259);
IkReal x2267=(gconst91*x2258);
IkReal x2268=((1.0)*x2258);
evalcond[0]=(((r21*x2267))+(((-1.0)*r22*x2266))+(((-1.0)*x2262*x2268)));
evalcond[1]=(cj0+((r11*x2267))+(((-1.0)*x2264*x2268))+(((-1.0)*r12*x2266)));
evalcond[2]=(((r01*x2267))+(((-1.0)*x2261*x2268))+(((-1.0)*r02*x2266))+(((-1.0)*x2263)));
evalcond[3]=((((-1.0)*cj1*x2260))+((x2259*x2262))+(((-1.0)*gconst91*r21*x2266))+((sj1*sj2))+(((-1.0)*r22*x2268)));
evalcond[4]=(((x2259*x2261))+(((-1.0)*cj0*sj1*x2260))+(((-1.0)*gconst91*r01*x2266))+(((-1.0)*r02*x2268))+(((-1.0)*cj0*x2265)));
evalcond[5]=(((x2259*x2264))+(((-1.0)*gconst91*r11*x2266))+(((-1.0)*x2263*x2265))+(((-1.0)*sj0*sj1*x2260))+(((-1.0)*r12*x2268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2269=((-1.0)*r01);
IkReal x2271 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2271)==0){
continue;
}
IkReal x2270=pow(x2271,-0.5);
CheckValue<IkReal> x2272 = IKatan2WithCheck(IkReal(x2269),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2272.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2272.value))));
IkReal gconst94=(x2269*x2270);
IkReal gconst95=((1.0)*r00*x2270);
CheckValue<IkReal> x2273 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2273.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2273.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2274=((-1.0)*r01);
CheckValue<IkReal> x2277 = IKatan2WithCheck(IkReal(x2274),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2277.valid){
continue;
}
IkReal x2275=((1.0)*(x2277.value));
IkReal x2276=x2270;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2275)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2275)));
IkReal gconst94=(x2274*x2276);
IkReal gconst95=((1.0)*r00*x2276);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2278=((-1.0)*r01);
CheckValue<IkReal> x2281 = IKatan2WithCheck(IkReal(x2278),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2281.valid){
continue;
}
IkReal x2279=((1.0)*(x2281.value));
IkReal x2280=x2270;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2279)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2279)));
IkReal gconst94=(x2278*x2280);
IkReal gconst95=((1.0)*r00*x2280);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2282=((-1.0)*r01);
CheckValue<IkReal> x2285 = IKatan2WithCheck(IkReal(x2282),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2285.valid){
continue;
}
IkReal x2283=((1.0)*(x2285.value));
IkReal x2284=x2270;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2283)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2283)));
IkReal gconst94=(x2282*x2284);
IkReal gconst95=((1.0)*r00*x2284);
IkReal x2286=r02*r02;
IkReal x2287=(r12*sj0);
IkReal x2288=((1.0)*cj0);
IkReal x2289=x2270;
j4eval[0]=((IKabs(((((-1.0)*r02*x2288))+(((-1.0)*x2287)))))+(IKabs(((((-1.0)*x2288*x2289))+((r02*x2287*x2289))+((cj0*x2286*x2289))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2290=((1.0)*sj0);
IkReal x2291=((1.0)*cj0);
CheckValue<IkReal> x2292=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2292.valid){
continue;
}
CheckValue<IkReal> x2293 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2291))+(((-1.0)*r12*x2290)))),IkReal((((gconst95*r10*sj0))+(((-1.0)*gconst94*r11*x2290))+(((-1.0)*gconst94*r01*x2291))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2292.value)))+(x2293.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2294=IKsin(j4);
IkReal x2295=IKcos(j4);
IkReal x2296=(gconst94*r11);
IkReal x2297=((1.0)*cj2);
IkReal x2298=(gconst94*r21);
IkReal x2299=((1.0)*sj0);
IkReal x2300=(gconst94*r01);
IkReal x2301=(cj1*sj2);
IkReal x2302=((1.0)*x2295);
IkReal x2303=(gconst95*x2295);
IkReal x2304=((1.0)*x2294);
IkReal x2305=(gconst95*x2304);
evalcond[0]=((((-1.0)*r22*x2302))+(((-1.0)*r20*x2305))+((x2294*x2298)));
evalcond[1]=((((-1.0)*r10*x2305))+cj0+((x2294*x2296))+(((-1.0)*r12*x2302)));
evalcond[2]=((((-1.0)*r00*x2305))+(((-1.0)*x2299))+((x2294*x2300))+(((-1.0)*r02*x2302)));
evalcond[3]=((((-1.0)*r22*x2304))+((r20*x2303))+((sj1*sj2))+(((-1.0)*x2298*x2302))+(((-1.0)*cj1*x2297)));
evalcond[4]=((((-1.0)*x2300*x2302))+(((-1.0)*cj0*x2301))+((r00*x2303))+(((-1.0)*cj0*sj1*x2297))+(((-1.0)*r02*x2304)));
evalcond[5]=(((r10*x2303))+(((-1.0)*sj0*sj1*x2297))+(((-1.0)*x2296*x2302))+(((-1.0)*x2299*x2301))+(((-1.0)*r12*x2304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2306=((1.0)*gconst95);
CheckValue<IkReal> x2307 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2307.valid){
continue;
}
CheckValue<IkReal> x2308=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2306)))),-1);
if(!x2308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2307.value)+(((1.5707963267949)*(x2308.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2309=IKsin(j4);
IkReal x2310=IKcos(j4);
IkReal x2311=(gconst94*r11);
IkReal x2312=((1.0)*cj2);
IkReal x2313=(gconst94*r21);
IkReal x2314=((1.0)*sj0);
IkReal x2315=(gconst94*r01);
IkReal x2316=(cj1*sj2);
IkReal x2317=((1.0)*x2310);
IkReal x2318=(gconst95*x2310);
IkReal x2319=((1.0)*x2309);
IkReal x2320=(gconst95*x2319);
evalcond[0]=((((-1.0)*r22*x2317))+((x2309*x2313))+(((-1.0)*r20*x2320)));
evalcond[1]=(cj0+((x2309*x2311))+(((-1.0)*r10*x2320))+(((-1.0)*r12*x2317)));
evalcond[2]=(((x2309*x2315))+(((-1.0)*r02*x2317))+(((-1.0)*r00*x2320))+(((-1.0)*x2314)));
evalcond[3]=((((-1.0)*r22*x2319))+((sj1*sj2))+(((-1.0)*x2313*x2317))+(((-1.0)*cj1*x2312))+((r20*x2318)));
evalcond[4]=((((-1.0)*cj0*x2316))+(((-1.0)*cj0*sj1*x2312))+(((-1.0)*x2315*x2317))+((r00*x2318))+(((-1.0)*r02*x2319)));
evalcond[5]=(((r10*x2318))+(((-1.0)*x2311*x2317))+(((-1.0)*sj0*sj1*x2312))+(((-1.0)*r12*x2319))+(((-1.0)*x2314*x2316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2321=((1.0)*gconst95);
CheckValue<IkReal> x2322 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2321))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2322.valid){
continue;
}
CheckValue<IkReal> x2323=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2321)))),-1);
if(!x2323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2322.value)+(((1.5707963267949)*(x2323.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2324=IKsin(j4);
IkReal x2325=IKcos(j4);
IkReal x2326=(gconst94*r11);
IkReal x2327=((1.0)*cj2);
IkReal x2328=(gconst94*r21);
IkReal x2329=((1.0)*sj0);
IkReal x2330=(gconst94*r01);
IkReal x2331=(cj1*sj2);
IkReal x2332=((1.0)*x2325);
IkReal x2333=(gconst95*x2325);
IkReal x2334=((1.0)*x2324);
IkReal x2335=(gconst95*x2334);
evalcond[0]=((((-1.0)*r22*x2332))+((x2324*x2328))+(((-1.0)*r20*x2335)));
evalcond[1]=(cj0+(((-1.0)*r10*x2335))+(((-1.0)*r12*x2332))+((x2324*x2326)));
evalcond[2]=(((x2324*x2330))+(((-1.0)*r02*x2332))+(((-1.0)*r00*x2335))+(((-1.0)*x2329)));
evalcond[3]=((((-1.0)*x2328*x2332))+(((-1.0)*r22*x2334))+((sj1*sj2))+(((-1.0)*cj1*x2327))+((r20*x2333)));
evalcond[4]=(((r00*x2333))+(((-1.0)*r02*x2334))+(((-1.0)*x2330*x2332))+(((-1.0)*cj0*x2331))+(((-1.0)*cj0*sj1*x2327)));
evalcond[5]=((((-1.0)*x2329*x2331))+(((-1.0)*sj0*sj1*x2327))+(((-1.0)*x2326*x2332))+(((-1.0)*r12*x2334))+((r10*x2333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2336=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2336;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2336);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2337=((1.0)*cj5);
IkReal x2338=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2337)));
j4eval[0]=x2338;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2337))))));
j4eval[2]=IKsign(x2338);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2339=cj5*cj5;
IkReal x2340=r01*r01;
IkReal x2341=(r01*sj5);
IkReal x2342=(cj5*r00);
IkReal x2343=((((2.0)*x2341*x2342))+(((-1.0)*x2339*(r00*r00)))+(((-1.0)*x2340))+(((-1.0)*(r02*r02)))+((x2339*x2340)));
j4eval[0]=x2343;
j4eval[1]=IKsign(x2343);
j4eval[2]=((IKabs((x2342+(((-1.0)*x2341)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2344=cj5*cj5;
IkReal x2345=r01*r01;
IkReal x2346=(r01*sj5);
IkReal x2347=(cj5*r00);
CheckValue<IkReal> x2348 = IKatan2WithCheck(IkReal((x2347+(((-1.0)*x2346)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2348.valid){
continue;
}
CheckValue<IkReal> x2349=IKPowWithIntegerCheck(IKsign(((((2.0)*x2346*x2347))+(((-1.0)*x2345))+(((-1.0)*(r02*r02)))+((x2344*x2345))+(((-1.0)*x2344*(r00*r00))))),-1);
if(!x2349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2348.value)+(((1.5707963267949)*(x2349.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2350=IKsin(j4);
IkReal x2351=IKcos(j4);
IkReal x2352=(cj5*r10);
IkReal x2353=(r01*sj5);
IkReal x2354=((1.0)*cj2);
IkReal x2355=(cj5*r00);
IkReal x2356=(cj5*r20);
IkReal x2357=((1.0)*x2351);
IkReal x2358=((1.0)*x2350);
IkReal x2359=(sj5*x2350);
evalcond[0]=((((-1.0)*x2356*x2358))+(((-1.0)*r22*x2357))+((r21*x2359)));
evalcond[1]=(((r11*x2359))+(((-1.0)*x2352*x2358))+(((-1.0)*r12*x2357)));
evalcond[2]=(((x2351*x2355))+(((-1.0)*x2353*x2357))+(((-1.0)*r02*x2358)));
evalcond[3]=((-1.0)+(((-1.0)*x2355*x2358))+((x2350*x2353))+(((-1.0)*r02*x2357)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x2354))+((x2351*x2356))+(((-1.0)*r22*x2358))+(((-1.0)*r21*sj5*x2357)));
evalcond[5]=((((-1.0)*r11*sj5*x2357))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2354))+((x2351*x2352))+(((-1.0)*r12*x2358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2360=((1.0)*cj5);
CheckValue<IkReal> x2361=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2360)))),-1);
if(!x2361.valid){
continue;
}
CheckValue<IkReal> x2362 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2360)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2361.value)))+(x2362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2363=IKsin(j4);
IkReal x2364=IKcos(j4);
IkReal x2365=(cj5*r10);
IkReal x2366=(r01*sj5);
IkReal x2367=((1.0)*cj2);
IkReal x2368=(cj5*r00);
IkReal x2369=(cj5*r20);
IkReal x2370=((1.0)*x2364);
IkReal x2371=((1.0)*x2363);
IkReal x2372=(sj5*x2363);
evalcond[0]=((((-1.0)*x2369*x2371))+(((-1.0)*r22*x2370))+((r21*x2372)));
evalcond[1]=((((-1.0)*x2365*x2371))+(((-1.0)*r12*x2370))+((r11*x2372)));
evalcond[2]=((((-1.0)*r02*x2371))+((x2364*x2368))+(((-1.0)*x2366*x2370)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2370))+(((-1.0)*x2368*x2371))+((x2363*x2366)));
evalcond[4]=(((x2364*x2369))+(((-1.0)*r21*sj5*x2370))+((sj1*sj2))+(((-1.0)*r22*x2371))+(((-1.0)*cj1*x2367)));
evalcond[5]=((((-1.0)*r11*sj5*x2370))+((x2364*x2365))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2371))+(((-1.0)*sj1*x2367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2373=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2373.valid){
continue;
}
CheckValue<IkReal> x2374 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2373.value)))+(x2374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2375=IKsin(j4);
IkReal x2376=IKcos(j4);
IkReal x2377=(cj5*r10);
IkReal x2378=(r01*sj5);
IkReal x2379=((1.0)*cj2);
IkReal x2380=(cj5*r00);
IkReal x2381=(cj5*r20);
IkReal x2382=((1.0)*x2376);
IkReal x2383=((1.0)*x2375);
IkReal x2384=(sj5*x2375);
evalcond[0]=((((-1.0)*x2381*x2383))+(((-1.0)*r22*x2382))+((r21*x2384)));
evalcond[1]=((((-1.0)*r12*x2382))+(((-1.0)*x2377*x2383))+((r11*x2384)));
evalcond[2]=((((-1.0)*r02*x2383))+((x2376*x2380))+(((-1.0)*x2378*x2382)));
evalcond[3]=((-1.0)+(((-1.0)*x2380*x2383))+((x2375*x2378))+(((-1.0)*r02*x2382)));
evalcond[4]=(((x2376*x2381))+(((-1.0)*r21*sj5*x2382))+((sj1*sj2))+(((-1.0)*r22*x2383))+(((-1.0)*cj1*x2379)));
evalcond[5]=((((-1.0)*r12*x2383))+(((-1.0)*r11*sj5*x2382))+(((-1.0)*cj1*sj2))+((x2376*x2377))+(((-1.0)*sj1*x2379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2385=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2385;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2385);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2386=((1.0)*cj5);
IkReal x2387=((((-1.0)*r21*x2386))+(((-1.0)*r20*sj5)));
j4eval[0]=x2387;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2386))+((r11*sj5))))));
j4eval[2]=IKsign(x2387);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2388=cj5*cj5;
IkReal x2389=r01*r01;
IkReal x2390=(cj5*r00);
IkReal x2391=(r01*sj5);
IkReal x2392=((((-2.0)*x2390*x2391))+((x2388*(r00*r00)))+x2389+(r02*r02)+(((-1.0)*x2388*x2389)));
j4eval[0]=x2392;
j4eval[1]=((IKabs(r02))+(IKabs((x2390+(((-1.0)*x2391))))));
j4eval[2]=IKsign(x2392);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2393=cj5*cj5;
IkReal x2394=r01*r01;
IkReal x2395=(r01*sj5);
IkReal x2396=(cj5*r00);
CheckValue<IkReal> x2397 = IKatan2WithCheck(IkReal((x2396+(((-1.0)*x2395)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2397.valid){
continue;
}
CheckValue<IkReal> x2398=IKPowWithIntegerCheck(IKsign((x2394+((x2393*(r00*r00)))+(r02*r02)+(((-1.0)*x2393*x2394))+(((-2.0)*x2395*x2396)))),-1);
if(!x2398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2397.value)+(((1.5707963267949)*(x2398.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2399=IKsin(j4);
IkReal x2400=IKcos(j4);
IkReal x2401=(cj5*r10);
IkReal x2402=(r01*sj5);
IkReal x2403=(cj5*r00);
IkReal x2404=(cj5*r20);
IkReal x2405=((1.0)*x2400);
IkReal x2406=((1.0)*x2399);
IkReal x2407=(sj5*x2399);
evalcond[0]=((((-1.0)*x2404*x2406))+((r21*x2407))+(((-1.0)*r22*x2405)));
evalcond[1]=((((-1.0)*x2401*x2406))+((r11*x2407))+(((-1.0)*r12*x2405)));
evalcond[2]=((((-1.0)*r02*x2406))+(((-1.0)*x2402*x2405))+((x2400*x2403)));
evalcond[3]=((1.0)+(((-1.0)*x2403*x2406))+((x2399*x2402))+(((-1.0)*r02*x2405)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2400*x2401))+(((-1.0)*r11*sj5*x2405))+(((-1.0)*r12*x2406)));
evalcond[5]=((((-1.0)*r21*sj5*x2405))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2400*x2404))+(((-1.0)*r22*x2406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2408=((1.0)*cj5);
CheckValue<IkReal> x2409=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2408))+(((-1.0)*r20*sj5)))),-1);
if(!x2409.valid){
continue;
}
CheckValue<IkReal> x2410 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2409.value)))+(x2410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2411=IKsin(j4);
IkReal x2412=IKcos(j4);
IkReal x2413=(cj5*r10);
IkReal x2414=(r01*sj5);
IkReal x2415=(cj5*r00);
IkReal x2416=(cj5*r20);
IkReal x2417=((1.0)*x2412);
IkReal x2418=((1.0)*x2411);
IkReal x2419=(sj5*x2411);
evalcond[0]=(((r21*x2419))+(((-1.0)*x2416*x2418))+(((-1.0)*r22*x2417)));
evalcond[1]=(((r11*x2419))+(((-1.0)*r12*x2417))+(((-1.0)*x2413*x2418)));
evalcond[2]=((((-1.0)*x2414*x2417))+(((-1.0)*r02*x2418))+((x2412*x2415)));
evalcond[3]=((1.0)+(((-1.0)*x2415*x2418))+(((-1.0)*r02*x2417))+((x2411*x2414)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x2418))+(((-1.0)*r11*sj5*x2417))+((x2412*x2413)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2417))+(((-1.0)*r22*x2418))+((x2412*x2416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2420 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2420.valid){
continue;
}
CheckValue<IkReal> x2421=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2420.value)+(((1.5707963267949)*(x2421.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2422=IKsin(j4);
IkReal x2423=IKcos(j4);
IkReal x2424=(cj5*r10);
IkReal x2425=(r01*sj5);
IkReal x2426=(cj5*r00);
IkReal x2427=(cj5*r20);
IkReal x2428=((1.0)*x2423);
IkReal x2429=((1.0)*x2422);
IkReal x2430=(sj5*x2422);
evalcond[0]=((((-1.0)*r22*x2428))+((r21*x2430))+(((-1.0)*x2427*x2429)));
evalcond[1]=(((r11*x2430))+(((-1.0)*x2424*x2429))+(((-1.0)*r12*x2428)));
evalcond[2]=((((-1.0)*r02*x2429))+((x2423*x2426))+(((-1.0)*x2425*x2428)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2428))+((x2422*x2425))+(((-1.0)*x2426*x2429)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2428))+((x2423*x2424))+((cj1*sj2))+(((-1.0)*r12*x2429)));
evalcond[5]=(((x2423*x2427))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2429))+(((-1.0)*r21*sj5*x2428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2431=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2431);
rxp1_1=(px*r21);
rxp1_2=(r11*x2431);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2432=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2432);
rxp1_1=(px*r21);
rxp1_2=(r11*x2432);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2433=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2433);
rxp1_1=(px*r21);
rxp1_2=(r11*x2433);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2436=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2436.valid){
continue;
}
IkReal x2434=x2436.value;
IkReal x2435=(sj0*x2434);
cj4array[0]=(((cj2*sj1*x2435))+((cj1*sj2*x2435)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2437=IKsin(j4);
IkReal x2438=IKcos(j4);
IkReal x2439=(cj5*r20);
IkReal x2440=(r21*sj5);
IkReal x2441=((1.0)*x2437);
IkReal x2442=((1.0)*x2438);
evalcond[0]=((-1.0)*r02*x2437);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2442)));
evalcond[2]=((((-1.0)*x2439*x2441))+((x2437*x2440)));
evalcond[3]=((((-1.0)*cj5*r10*x2441))+((r11*sj5*x2437)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2438*x2439))+(((-1.0)*x2440*x2442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2444=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2444.valid){
continue;
}
IkReal x2443=x2444.value;
cj4array[0]=(((cj1*cj2*x2443))+(((-1.0)*sj1*sj2*x2443)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2445=IKsin(j4);
IkReal x2446=IKcos(j4);
IkReal x2447=(r11*sj5);
IkReal x2448=((1.0)*sj0);
IkReal x2449=((1.0)*x2446);
IkReal x2450=((1.0)*cj5*x2445);
evalcond[0]=((-1.0)*r02*x2445);
evalcond[1]=((((-1.0)*x2448))+(((-1.0)*r02*x2449)));
evalcond[2]=(((r21*sj5*x2445))+(((-1.0)*r20*x2450)));
evalcond[3]=((((-1.0)*r10*x2450))+((x2445*x2447)));
evalcond[4]=(((cj5*r10*x2446))+(((-1.0)*cj2*sj1*x2448))+(((-1.0)*x2447*x2449))+(((-1.0)*cj1*sj2*x2448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2451=IKPowWithIntegerCheck(r02,-1);
if(!x2451.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2451.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2452=IKsin(j4);
IkReal x2453=IKcos(j4);
IkReal x2454=((1.0)*sj0);
IkReal x2455=(cj5*x2453);
IkReal x2456=(sj5*x2452);
IkReal x2457=((1.0)*sj5*x2453);
IkReal x2458=((1.0)*cj5*x2452);
evalcond[0]=((-1.0)*r02*x2452);
evalcond[1]=((((-1.0)*r20*x2458))+((r21*x2456)));
evalcond[2]=((((-1.0)*r10*x2458))+((r11*x2456)));
evalcond[3]=((((-1.0)*r21*x2457))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2455)));
evalcond[4]=(((r10*x2455))+(((-1.0)*cj2*sj1*x2454))+(((-1.0)*r11*x2457))+(((-1.0)*cj1*sj2*x2454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2459=((1.0)*sj0);
IkReal x2460=((1.0)*cj0);
CheckValue<IkReal> x2461=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2461.valid){
continue;
}
CheckValue<IkReal> x2462 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2459))+(((-1.0)*r02*x2460)))),IkReal(((((-1.0)*r01*sj5*x2460))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x2459)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2461.value)))+(x2462.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2463=IKsin(j4);
IkReal x2464=IKcos(j4);
IkReal x2465=(cj5*r10);
IkReal x2466=(r01*sj5);
IkReal x2467=((1.0)*cj2);
IkReal x2468=(cj5*r00);
IkReal x2469=((1.0)*sj0);
IkReal x2470=(cj5*r20);
IkReal x2471=(cj1*sj2);
IkReal x2472=((1.0)*x2464);
IkReal x2473=((1.0)*x2463);
IkReal x2474=(sj5*x2463);
evalcond[0]=(((r21*x2474))+(((-1.0)*x2470*x2473))+(((-1.0)*r22*x2472)));
evalcond[1]=((((-1.0)*r12*x2472))+cj0+(((-1.0)*x2465*x2473))+((r11*x2474)));
evalcond[2]=((((-1.0)*x2468*x2473))+(((-1.0)*r02*x2472))+(((-1.0)*x2469))+((x2463*x2466)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r21*sj5*x2472))+(((-1.0)*cj1*x2467))+(((-1.0)*r22*x2473))+((x2464*x2470)));
evalcond[4]=((((-1.0)*cj0*sj1*x2467))+(((-1.0)*cj0*x2471))+((x2464*x2468))+(((-1.0)*r02*x2473))+(((-1.0)*x2466*x2472)));
evalcond[5]=((((-1.0)*sj0*sj1*x2467))+(((-1.0)*r12*x2473))+((x2464*x2465))+(((-1.0)*r11*sj5*x2472))+(((-1.0)*x2469*x2471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2475=((1.0)*cj5);
CheckValue<IkReal> x2476 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2476.valid){
continue;
}
CheckValue<IkReal> x2477=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2475))+(((-1.0)*r10*sj5)))),-1);
if(!x2477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2476.value)+(((1.5707963267949)*(x2477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2478=IKsin(j4);
IkReal x2479=IKcos(j4);
IkReal x2480=(cj5*r10);
IkReal x2481=(r01*sj5);
IkReal x2482=((1.0)*cj2);
IkReal x2483=(cj5*r00);
IkReal x2484=((1.0)*sj0);
IkReal x2485=(cj5*r20);
IkReal x2486=(cj1*sj2);
IkReal x2487=((1.0)*x2479);
IkReal x2488=((1.0)*x2478);
IkReal x2489=(sj5*x2478);
evalcond[0]=((((-1.0)*r22*x2487))+(((-1.0)*x2485*x2488))+((r21*x2489)));
evalcond[1]=(cj0+((r11*x2489))+(((-1.0)*x2480*x2488))+(((-1.0)*r12*x2487)));
evalcond[2]=((((-1.0)*x2484))+(((-1.0)*r02*x2487))+((x2478*x2481))+(((-1.0)*x2483*x2488)));
evalcond[3]=((((-1.0)*r22*x2488))+(((-1.0)*r21*sj5*x2487))+((sj1*sj2))+(((-1.0)*cj1*x2482))+((x2479*x2485)));
evalcond[4]=((((-1.0)*cj0*x2486))+(((-1.0)*r02*x2488))+(((-1.0)*cj0*sj1*x2482))+(((-1.0)*x2481*x2487))+((x2479*x2483)));
evalcond[5]=((((-1.0)*r11*sj5*x2487))+(((-1.0)*sj0*sj1*x2482))+(((-1.0)*x2484*x2486))+(((-1.0)*r12*x2488))+((x2479*x2480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2490=((1.0)*cj5);
CheckValue<IkReal> x2491=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2490)))),-1);
if(!x2491.valid){
continue;
}
CheckValue<IkReal> x2492 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2491.value)))+(x2492.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2493=IKsin(j4);
IkReal x2494=IKcos(j4);
IkReal x2495=(cj5*r10);
IkReal x2496=(r01*sj5);
IkReal x2497=((1.0)*cj2);
IkReal x2498=(cj5*r00);
IkReal x2499=((1.0)*sj0);
IkReal x2500=(cj5*r20);
IkReal x2501=(cj1*sj2);
IkReal x2502=((1.0)*x2494);
IkReal x2503=((1.0)*x2493);
IkReal x2504=(sj5*x2493);
evalcond[0]=((((-1.0)*r22*x2502))+(((-1.0)*x2500*x2503))+((r21*x2504)));
evalcond[1]=(cj0+(((-1.0)*r12*x2502))+(((-1.0)*x2495*x2503))+((r11*x2504)));
evalcond[2]=((((-1.0)*x2498*x2503))+(((-1.0)*r02*x2502))+((x2493*x2496))+(((-1.0)*x2499)));
evalcond[3]=(((x2494*x2500))+((sj1*sj2))+(((-1.0)*r22*x2503))+(((-1.0)*cj1*x2497))+(((-1.0)*r21*sj5*x2502)));
evalcond[4]=((((-1.0)*cj0*x2501))+(((-1.0)*r02*x2503))+((x2494*x2498))+(((-1.0)*x2496*x2502))+(((-1.0)*cj0*sj1*x2497)));
evalcond[5]=(((x2494*x2495))+(((-1.0)*r12*x2503))+(((-1.0)*r11*sj5*x2502))+(((-1.0)*sj0*sj1*x2497))+(((-1.0)*x2499*x2501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2505=cj5*cj5;
IkReal x2506=r21*r21;
IkReal x2507=(sj1*sj2);
IkReal x2508=(r21*sj5);
IkReal x2509=(cj1*cj2);
IkReal x2510=(cj5*r20);
CheckValue<IkReal> x2511 = IKatan2WithCheck(IkReal((((r22*x2507))+(((-1.0)*r22*x2509)))),IkReal(((((-1.0)*x2507*x2510))+((x2507*x2508))+(((-1.0)*x2508*x2509))+((x2509*x2510)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2511.valid){
continue;
}
CheckValue<IkReal> x2512=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2505*x2506))+x2506+(r22*r22)+(((-2.0)*x2508*x2510))+((x2505*(r20*r20))))),-1);
if(!x2512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2511.value)+(((1.5707963267949)*(x2512.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2513=IKsin(j4);
IkReal x2514=IKcos(j4);
IkReal x2515=(r21*sj5);
IkReal x2516=(cj5*r20);
IkReal x2517=((1.0)*x2514);
IkReal x2518=((1.0)*x2513);
evalcond[0]=((((-1.0)*r22*x2517))+(((-1.0)*x2516*x2518))+((x2513*x2515)));
evalcond[1]=(((x2514*x2516))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2515*x2517))+(((-1.0)*r22*x2518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2519=(cj5*sj4);
IkReal x2520=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x2519))+((r01*x2520)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2519))+(((-1.0)*r11*x2520))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x2519))+((r01*x2520))))+IKsqr((((r10*x2519))+(((-1.0)*r11*x2520))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x2519))+((r01*x2520))), (((r10*x2519))+(((-1.0)*r11*x2520))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2521=IKcos(j0);
IkReal x2522=IKsin(j0);
IkReal x2523=(cj4*cj5);
IkReal x2524=((0.1)*sj5);
IkReal x2525=((0.392)*sj1);
IkReal x2526=(cj5*r11);
IkReal x2527=(cj5*r01);
IkReal x2528=((1.0)*cj1);
IkReal x2529=(r11*sj5);
IkReal x2530=((1.0)*sj4);
IkReal x2531=((0.392)*cj2);
IkReal x2532=((1.0)*sj1);
IkReal x2533=((1.0)*cj4);
IkReal x2534=(r01*sj5);
IkReal x2535=(sj2*x2522);
IkReal x2536=(sj2*x2521);
IkReal x2537=(cj1*x2521);
IkReal x2538=(cj2*x2521);
IkReal x2539=(cj1*x2522);
IkReal x2540=(cj2*x2522);
evalcond[0]=(((sj4*x2529))+x2521+(((-1.0)*cj5*r10*x2530))+(((-1.0)*r12*x2533)));
evalcond[1]=((((-1.0)*r02*x2533))+(((-1.0)*x2522))+((sj4*x2534))+(((-1.0)*cj5*r00*x2530)));
evalcond[2]=((((-1.0)*x2528*x2538))+((r00*sj5))+x2527+((sj1*x2536)));
evalcond[3]=(x2526+((sj1*x2535))+((r10*sj5))+(((-1.0)*x2528*x2540)));
evalcond[4]=((((-1.0)*x2528*x2536))+(((-1.0)*x2533*x2534))+(((-1.0)*r02*x2530))+((r00*x2523))+(((-1.0)*x2532*x2538)));
evalcond[5]=((((-1.0)*x2528*x2535))+(((-1.0)*x2532*x2540))+(((-1.0)*r12*x2530))+((r10*x2523))+(((-1.0)*x2529*x2533)));
evalcond[6]=((((-0.1)*x2527))+((x2531*x2537))+(((-1.0)*x2525*x2536))+(((-1.0)*px))+(((-1.0)*r00*x2524))+(((0.425)*x2537))+(((-0.134)*x2522)));
evalcond[7]=((((-0.1)*x2526))+((x2531*x2539))+(((-1.0)*x2525*x2535))+(((0.134)*x2521))+(((-1.0)*py))+(((0.425)*x2539))+(((-1.0)*r10*x2524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2541=((1.0)*cj5);
IkReal x2542=((1.0)*sj5);
CheckValue<IkReal> x2543 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2541))+(((-1.0)*r10*x2542)))),IkReal(((((-1.0)*r00*x2542))+(((-1.0)*r01*x2541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2543.valid){
continue;
}
CheckValue<IkReal> x2544=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2544.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2543.value)+(((1.5707963267949)*(x2544.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2545=IKcos(j0);
IkReal x2546=IKsin(j0);
IkReal x2547=((0.1)*sj5);
IkReal x2548=(cj5*r11);
IkReal x2549=(cj5*r01);
IkReal x2550=(sj1*sj2);
IkReal x2551=(cj1*cj2);
IkReal x2552=((0.392)*x2546);
IkReal x2553=(cj1*x2545);
evalcond[0]=(((r00*sj5))+x2549+(((-1.0)*x2545*x2551))+((x2545*x2550)));
evalcond[1]=(x2548+((r10*sj5))+(((-1.0)*x2546*x2551))+((x2546*x2550)));
evalcond[2]=((((0.425)*x2553))+(((0.392)*x2545*x2551))+(((-0.1)*x2549))+(((-0.392)*x2545*x2550))+(((-1.0)*px))+(((-1.0)*r00*x2547))+(((-0.134)*x2546)));
evalcond[3]=((((-1.0)*r10*x2547))+(((0.425)*cj1*x2546))+(((-0.1)*x2548))+(((0.134)*x2545))+((x2551*x2552))+(((-1.0)*py))+(((-1.0)*x2550*x2552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2554=((1.0)*cj5);
IkReal x2555=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2554)));
j4eval[0]=x2555;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2554)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2555);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2556=((1.0)*cj5);
IkReal x2557=((((-1.0)*r11*x2556))+(((-1.0)*r10*sj5)));
j4eval[0]=x2557;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2556))))));
j4eval[2]=IKsign(x2557);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2558=((1.0)*sj0);
IkReal x2559=((1.0)*cj0);
IkReal x2560=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2560;
j4eval[1]=((IKabs(((((-1.0)*r12*x2558))+(((-1.0)*r02*x2559)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2559))+(((-1.0)*r11*sj5*x2558))))));
j4eval[2]=IKsign(x2560);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2561=((-1.0)*r20);
IkReal x2563 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2563)==0){
continue;
}
IkReal x2562=pow(x2563,-0.5);
CheckValue<IkReal> x2564 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2561),IKFAST_ATAN2_MAGTHRESH);
if(!x2564.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2564.value));
IkReal gconst79=(r21*x2562);
IkReal gconst80=(x2561*x2562);
CheckValue<IkReal> x2565 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2565.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2565.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2566=((-1.0)*r20);
IkReal x2567=x2562;
CheckValue<IkReal> x2569 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2566),IKFAST_ATAN2_MAGTHRESH);
if(!x2569.valid){
continue;
}
IkReal x2568=((-1.0)*(x2569.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2568;
IkReal gconst78=x2568;
IkReal gconst79=(r21*x2567);
IkReal gconst80=(x2566*x2567);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2570=((-1.0)*r20);
IkReal x2571=x2562;
CheckValue<IkReal> x2573 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2570),IKFAST_ATAN2_MAGTHRESH);
if(!x2573.valid){
continue;
}
IkReal x2572=((-1.0)*(x2573.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2572;
IkReal gconst78=x2572;
IkReal gconst79=(r21*x2571);
IkReal gconst80=(x2570*x2571);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2574=((-1.0)*r20);
IkReal x2575=x2562;
CheckValue<IkReal> x2577 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2574),IKFAST_ATAN2_MAGTHRESH);
if(!x2577.valid){
continue;
}
IkReal x2576=((-1.0)*(x2577.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2576;
IkReal gconst78=x2576;
IkReal gconst79=(r21*x2575);
IkReal gconst80=(x2574*x2575);
IkReal x2578=r22*r22;
CheckValue<IkReal> x2581=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2578))),-1);
if(!x2581.valid){
continue;
}
IkReal x2579=x2581.value;
IkReal x2580=((((2.0)*x2579*(r20*r20)*(r21*r21)))+x2578+((x2579*(r21*r21*r21*r21)))+((x2579*(r20*r20*r20*r20))));
j4eval[0]=x2580;
j4eval[1]=IKsign(x2580);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2582=(sj1*sj2);
IkReal x2583=(gconst80*r20);
IkReal x2584=(gconst79*r21);
IkReal x2585=(cj1*cj2);
CheckValue<IkReal> x2586 = IKatan2WithCheck(IkReal((((r22*x2582))+(((-1.0)*r22*x2585)))),IkReal(((((-1.0)*x2582*x2583))+(((-1.0)*x2584*x2585))+((x2582*x2584))+((x2583*x2585)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2586.valid){
continue;
}
CheckValue<IkReal> x2587=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2584*x2584)+(((-2.0)*x2583*x2584))+(x2583*x2583))),-1);
if(!x2587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2586.value)+(((1.5707963267949)*(x2587.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2588=IKsin(j4);
IkReal x2589=IKcos(j4);
IkReal x2590=(gconst79*r01);
IkReal x2591=(gconst79*r21);
IkReal x2592=((1.0)*cj2);
IkReal x2593=(gconst79*r11);
IkReal x2594=((1.0)*sj0);
IkReal x2595=(cj1*sj2);
IkReal x2596=((1.0)*x2589);
IkReal x2597=(gconst80*x2589);
IkReal x2598=((1.0)*x2588);
IkReal x2599=(gconst80*x2598);
evalcond[0]=((((-1.0)*r22*x2596))+(((-1.0)*r20*x2599))+((x2588*x2591)));
evalcond[1]=(cj0+((x2588*x2593))+(((-1.0)*r12*x2596))+(((-1.0)*r10*x2599)));
evalcond[2]=((((-1.0)*r00*x2599))+(((-1.0)*r02*x2596))+(((-1.0)*x2594))+((x2588*x2590)));
evalcond[3]=((((-1.0)*cj1*x2592))+(((-1.0)*r22*x2598))+((sj1*sj2))+((r20*x2597))+(((-1.0)*x2591*x2596)));
evalcond[4]=(((r00*x2597))+(((-1.0)*cj0*x2595))+(((-1.0)*x2590*x2596))+(((-1.0)*r02*x2598))+(((-1.0)*cj0*sj1*x2592)));
evalcond[5]=((((-1.0)*x2594*x2595))+(((-1.0)*x2593*x2596))+((r10*x2597))+(((-1.0)*sj0*sj1*x2592))+(((-1.0)*r12*x2598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2600=((1.0)*gconst80);
CheckValue<IkReal> x2601 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*r20*sj0*x2600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2601.valid){
continue;
}
CheckValue<IkReal> x2602=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2600))+(((-1.0)*gconst79*r10)))),-1);
if(!x2602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2601.value)+(((1.5707963267949)*(x2602.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2603=IKsin(j4);
IkReal x2604=IKcos(j4);
IkReal x2605=(gconst79*r01);
IkReal x2606=(gconst79*r21);
IkReal x2607=((1.0)*cj2);
IkReal x2608=(gconst79*r11);
IkReal x2609=((1.0)*sj0);
IkReal x2610=(cj1*sj2);
IkReal x2611=((1.0)*x2604);
IkReal x2612=(gconst80*x2604);
IkReal x2613=((1.0)*x2603);
IkReal x2614=(gconst80*x2613);
evalcond[0]=(((x2603*x2606))+(((-1.0)*r22*x2611))+(((-1.0)*r20*x2614)));
evalcond[1]=(((x2603*x2608))+cj0+(((-1.0)*r12*x2611))+(((-1.0)*r10*x2614)));
evalcond[2]=(((x2603*x2605))+(((-1.0)*r00*x2614))+(((-1.0)*r02*x2611))+(((-1.0)*x2609)));
evalcond[3]=((((-1.0)*x2606*x2611))+((r20*x2612))+((sj1*sj2))+(((-1.0)*r22*x2613))+(((-1.0)*cj1*x2607)));
evalcond[4]=(((r00*x2612))+(((-1.0)*cj0*x2610))+(((-1.0)*r02*x2613))+(((-1.0)*x2605*x2611))+(((-1.0)*cj0*sj1*x2607)));
evalcond[5]=((((-1.0)*x2609*x2610))+(((-1.0)*x2608*x2611))+(((-1.0)*r12*x2613))+((r10*x2612))+(((-1.0)*sj0*sj1*x2607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2615=((1.0)*gconst80);
CheckValue<IkReal> x2616 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2615))+((cj0*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2616.valid){
continue;
}
CheckValue<IkReal> x2617=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2615))+(((-1.0)*gconst79*r00)))),-1);
if(!x2617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2616.value)+(((1.5707963267949)*(x2617.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2618=IKsin(j4);
IkReal x2619=IKcos(j4);
IkReal x2620=(gconst79*r01);
IkReal x2621=(gconst79*r21);
IkReal x2622=((1.0)*cj2);
IkReal x2623=(gconst79*r11);
IkReal x2624=((1.0)*sj0);
IkReal x2625=(cj1*sj2);
IkReal x2626=((1.0)*x2619);
IkReal x2627=(gconst80*x2619);
IkReal x2628=((1.0)*x2618);
IkReal x2629=(gconst80*x2628);
evalcond[0]=((((-1.0)*r22*x2626))+((x2618*x2621))+(((-1.0)*r20*x2629)));
evalcond[1]=(cj0+(((-1.0)*r12*x2626))+((x2618*x2623))+(((-1.0)*r10*x2629)));
evalcond[2]=((((-1.0)*r00*x2629))+((x2618*x2620))+(((-1.0)*r02*x2626))+(((-1.0)*x2624)));
evalcond[3]=(((r20*x2627))+((sj1*sj2))+(((-1.0)*r22*x2628))+(((-1.0)*cj1*x2622))+(((-1.0)*x2621*x2626)));
evalcond[4]=(((r00*x2627))+(((-1.0)*cj0*x2625))+(((-1.0)*r02*x2628))+(((-1.0)*cj0*sj1*x2622))+(((-1.0)*x2620*x2626)));
evalcond[5]=((((-1.0)*x2623*x2626))+(((-1.0)*x2624*x2625))+(((-1.0)*r12*x2628))+(((-1.0)*sj0*sj1*x2622))+((r10*x2627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2630=((-1.0)*r21);
IkReal x2632 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2632)==0){
continue;
}
IkReal x2631=pow(x2632,-0.5);
CheckValue<IkReal> x2633 = IKatan2WithCheck(IkReal(x2630),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2633.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2633.value))));
IkReal gconst82=(x2630*x2631);
IkReal gconst83=((1.0)*r20*x2631);
CheckValue<IkReal> x2634 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2634.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2634.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2635=((-1.0)*r21);
CheckValue<IkReal> x2638 = IKatan2WithCheck(IkReal(x2635),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2638.valid){
continue;
}
IkReal x2636=((1.0)*(x2638.value));
IkReal x2637=x2631;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2636)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2636)));
IkReal gconst82=(x2635*x2637);
IkReal gconst83=((1.0)*r20*x2637);
IkReal x2639=r22*r22;
IkReal x2640=((1.0)*x2639);
CheckValue<IkReal> x2644=IKPowWithIntegerCheck(((-1.0)+x2639),-1);
if(!x2644.valid){
continue;
}
IkReal x2641=x2644.value;
if((((1.0)+(((-1.0)*x2640)))) < -0.00001)
continue;
IkReal x2642=IKsqrt(((1.0)+(((-1.0)*x2640))));
IkReal x2643=(cj0*x2641*x2642);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x2640*x2643))+x2643))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2645=((-1.0)*r21);
CheckValue<IkReal> x2648 = IKatan2WithCheck(IkReal(x2645),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2648.valid){
continue;
}
IkReal x2646=((1.0)*(x2648.value));
IkReal x2647=x2631;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2646)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2646)));
IkReal gconst82=(x2645*x2647);
IkReal gconst83=((1.0)*r20*x2647);
IkReal x2649=r22*r22;
IkReal x2650=((1.0)*x2649);
CheckValue<IkReal> x2654=IKPowWithIntegerCheck(((-1.0)+x2649),-1);
if(!x2654.valid){
continue;
}
IkReal x2651=x2654.value;
if((((1.0)+(((-1.0)*x2650)))) < -0.00001)
continue;
IkReal x2652=IKsqrt(((1.0)+(((-1.0)*x2650))));
IkReal x2653=(sj0*x2651*x2652);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x2650*x2653))+x2653))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2655=((-1.0)*r21);
CheckValue<IkReal> x2658 = IKatan2WithCheck(IkReal(x2655),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2658.valid){
continue;
}
IkReal x2656=((1.0)*(x2658.value));
IkReal x2657=x2631;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2656)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2656)));
IkReal gconst82=(x2655*x2657);
IkReal gconst83=((1.0)*r20*x2657);
IkReal x2659=r22*r22;
IkReal x2660=(r12*sj0);
IkReal x2661=(cj0*r02);
CheckValue<IkReal> x2665=IKPowWithIntegerCheck(((-1.0)+x2659),-1);
if(!x2665.valid){
continue;
}
IkReal x2662=x2665.value;
if((((1.0)+(((-1.0)*x2659)))) < -0.00001)
continue;
IkReal x2663=IKsqrt(((1.0)+(((-1.0)*x2659))));
IkReal x2664=(r22*x2662*x2663);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2660))+(((-1.0)*x2661)))))+(IKabs((((x2661*x2664))+((x2660*x2664))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2666=((1.0)*sj0);
IkReal x2667=((1.0)*cj0);
CheckValue<IkReal> x2668=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2668.valid){
continue;
}
CheckValue<IkReal> x2669 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2666))+(((-1.0)*r02*x2667)))),IkReal(((((-1.0)*gconst82*r11*x2666))+(((-1.0)*gconst82*r01*x2667))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2668.value)))+(x2669.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2670=IKsin(j4);
IkReal x2671=IKcos(j4);
IkReal x2672=(gconst82*r11);
IkReal x2673=((1.0)*cj2);
IkReal x2674=((1.0)*sj0);
IkReal x2675=(cj1*sj2);
IkReal x2676=((1.0)*x2671);
IkReal x2677=(gconst83*x2671);
IkReal x2678=(gconst82*x2670);
IkReal x2679=((1.0)*x2670);
evalcond[0]=(((r21*x2678))+(((-1.0)*r22*x2676))+(((-1.0)*gconst83*r20*x2679)));
evalcond[1]=((((-1.0)*r12*x2676))+cj0+(((-1.0)*gconst83*r10*x2679))+((x2670*x2672)));
evalcond[2]=((((-1.0)*r02*x2676))+(((-1.0)*x2674))+((r01*x2678))+(((-1.0)*gconst83*r00*x2679)));
evalcond[3]=((((-1.0)*cj1*x2673))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2676))+((r20*x2677))+(((-1.0)*r22*x2679)));
evalcond[4]=((((-1.0)*cj0*x2675))+(((-1.0)*cj0*sj1*x2673))+(((-1.0)*gconst82*r01*x2676))+(((-1.0)*r02*x2679))+((r00*x2677)));
evalcond[5]=((((-1.0)*r12*x2679))+(((-1.0)*sj0*sj1*x2673))+(((-1.0)*x2674*x2675))+((r10*x2677))+(((-1.0)*x2672*x2676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2680=((1.0)*gconst83);
CheckValue<IkReal> x2681 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2680)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2681.valid){
continue;
}
CheckValue<IkReal> x2682=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x2680)))),-1);
if(!x2682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2681.value)+(((1.5707963267949)*(x2682.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2683=IKsin(j4);
IkReal x2684=IKcos(j4);
IkReal x2685=(gconst82*r11);
IkReal x2686=((1.0)*cj2);
IkReal x2687=((1.0)*sj0);
IkReal x2688=(cj1*sj2);
IkReal x2689=((1.0)*x2684);
IkReal x2690=(gconst83*x2684);
IkReal x2691=(gconst82*x2683);
IkReal x2692=((1.0)*x2683);
evalcond[0]=((((-1.0)*gconst83*r20*x2692))+(((-1.0)*r22*x2689))+((r21*x2691)));
evalcond[1]=((((-1.0)*r12*x2689))+cj0+(((-1.0)*gconst83*r10*x2692))+((x2683*x2685)));
evalcond[2]=((((-1.0)*r02*x2689))+(((-1.0)*x2687))+((r01*x2691))+(((-1.0)*gconst83*r00*x2692)));
evalcond[3]=((((-1.0)*cj1*x2686))+((sj1*sj2))+(((-1.0)*r22*x2692))+((r20*x2690))+(((-1.0)*gconst82*r21*x2689)));
evalcond[4]=((((-1.0)*cj0*x2688))+(((-1.0)*r02*x2692))+(((-1.0)*gconst82*r01*x2689))+((r00*x2690))+(((-1.0)*cj0*sj1*x2686)));
evalcond[5]=((((-1.0)*x2685*x2689))+((r10*x2690))+(((-1.0)*x2687*x2688))+(((-1.0)*r12*x2692))+(((-1.0)*sj0*sj1*x2686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2693=((1.0)*gconst83);
CheckValue<IkReal> x2694=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r00))+(((-1.0)*r01*x2693)))),-1);
if(!x2694.valid){
continue;
}
CheckValue<IkReal> x2695 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2694.value)))+(x2695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2696=IKsin(j4);
IkReal x2697=IKcos(j4);
IkReal x2698=(gconst82*r11);
IkReal x2699=((1.0)*cj2);
IkReal x2700=((1.0)*sj0);
IkReal x2701=(cj1*sj2);
IkReal x2702=((1.0)*x2697);
IkReal x2703=(gconst83*x2697);
IkReal x2704=(gconst82*x2696);
IkReal x2705=((1.0)*x2696);
evalcond[0]=((((-1.0)*r22*x2702))+((r21*x2704))+(((-1.0)*gconst83*r20*x2705)));
evalcond[1]=(cj0+(((-1.0)*r12*x2702))+(((-1.0)*gconst83*r10*x2705))+((x2696*x2698)));
evalcond[2]=((((-1.0)*gconst83*r00*x2705))+((r01*x2704))+(((-1.0)*r02*x2702))+(((-1.0)*x2700)));
evalcond[3]=((((-1.0)*r22*x2705))+(((-1.0)*cj1*x2699))+(((-1.0)*gconst82*r21*x2702))+((sj1*sj2))+((r20*x2703)));
evalcond[4]=(((r00*x2703))+(((-1.0)*gconst82*r01*x2702))+(((-1.0)*cj0*x2701))+(((-1.0)*r02*x2705))+(((-1.0)*cj0*sj1*x2699)));
evalcond[5]=((((-1.0)*r12*x2705))+((r10*x2703))+(((-1.0)*sj0*sj1*x2699))+(((-1.0)*x2700*x2701))+(((-1.0)*x2698*x2702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2706=((-1.0)*r10);
IkReal x2708 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2708)==0){
continue;
}
IkReal x2707=pow(x2708,-0.5);
CheckValue<IkReal> x2709 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2706),IKFAST_ATAN2_MAGTHRESH);
if(!x2709.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2709.value));
IkReal gconst85=(r11*x2707);
IkReal gconst86=(x2706*x2707);
CheckValue<IkReal> x2710 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2710.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2710.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2711=((-1.0)*r10);
IkReal x2712=x2707;
CheckValue<IkReal> x2714 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2711),IKFAST_ATAN2_MAGTHRESH);
if(!x2714.valid){
continue;
}
IkReal x2713=((-1.0)*(x2714.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2713;
IkReal gconst84=x2713;
IkReal gconst85=(r11*x2712);
IkReal gconst86=(x2711*x2712);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2715=((1.0)*sj0);
IkReal x2716=((1.0)*gconst85);
CheckValue<IkReal> x2717 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2715)))),IkReal(((((-1.0)*cj0*r01*x2716))+((cj0*gconst86*r00))+((gconst86*r10*sj0))+(((-1.0)*gconst85*r11*x2715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2717.valid){
continue;
}
CheckValue<IkReal> x2718=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2716)))),-1);
if(!x2718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2717.value)+(((1.5707963267949)*(x2718.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2719=IKsin(j4);
IkReal x2720=IKcos(j4);
IkReal x2721=(gconst85*r21);
IkReal x2722=(gconst86*r00);
IkReal x2723=(gconst86*r10);
IkReal x2724=((1.0)*cj2);
IkReal x2725=(gconst85*r11);
IkReal x2726=(gconst85*r01);
IkReal x2727=((1.0)*sj0);
IkReal x2728=(gconst86*r20);
IkReal x2729=(cj1*sj2);
IkReal x2730=((1.0)*x2720);
IkReal x2731=((1.0)*x2719);
evalcond[0]=((((-1.0)*x2728*x2731))+(((-1.0)*r22*x2730))+((x2719*x2721)));
evalcond[1]=(cj0+(((-1.0)*x2723*x2731))+(((-1.0)*r12*x2730))+((x2719*x2725)));
evalcond[2]=((((-1.0)*r02*x2730))+(((-1.0)*x2722*x2731))+((x2719*x2726))+(((-1.0)*x2727)));
evalcond[3]=(((sj1*sj2))+((x2720*x2728))+(((-1.0)*x2721*x2730))+(((-1.0)*r22*x2731))+(((-1.0)*cj1*x2724)));
evalcond[4]=((((-1.0)*x2726*x2730))+((x2720*x2722))+(((-1.0)*r02*x2731))+(((-1.0)*cj0*x2729))+(((-1.0)*cj0*sj1*x2724)));
evalcond[5]=((((-1.0)*x2727*x2729))+(((-1.0)*x2725*x2730))+((x2720*x2723))+(((-1.0)*sj0*sj1*x2724))+(((-1.0)*r12*x2731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2732=((1.0)*gconst86);
CheckValue<IkReal> x2733 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2732))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2733.valid){
continue;
}
CheckValue<IkReal> x2734=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r00))+(((-1.0)*r01*x2732)))),-1);
if(!x2734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2733.value)+(((1.5707963267949)*(x2734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2735=IKsin(j4);
IkReal x2736=IKcos(j4);
IkReal x2737=(gconst85*r21);
IkReal x2738=(gconst86*r00);
IkReal x2739=(gconst86*r10);
IkReal x2740=((1.0)*cj2);
IkReal x2741=(gconst85*r11);
IkReal x2742=(gconst85*r01);
IkReal x2743=((1.0)*sj0);
IkReal x2744=(gconst86*r20);
IkReal x2745=(cj1*sj2);
IkReal x2746=((1.0)*x2736);
IkReal x2747=((1.0)*x2735);
evalcond[0]=((((-1.0)*x2744*x2747))+((x2735*x2737))+(((-1.0)*r22*x2746)));
evalcond[1]=(cj0+(((-1.0)*x2739*x2747))+(((-1.0)*r12*x2746))+((x2735*x2741)));
evalcond[2]=((((-1.0)*x2738*x2747))+(((-1.0)*x2743))+(((-1.0)*r02*x2746))+((x2735*x2742)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2740))+(((-1.0)*x2737*x2746))+((x2736*x2744))+(((-1.0)*r22*x2747)));
evalcond[4]=((((-1.0)*cj0*x2745))+((x2736*x2738))+(((-1.0)*r02*x2747))+(((-1.0)*x2742*x2746))+(((-1.0)*cj0*sj1*x2740)));
evalcond[5]=((((-1.0)*x2743*x2745))+(((-1.0)*x2741*x2746))+((x2736*x2739))+(((-1.0)*r12*x2747))+(((-1.0)*sj0*sj1*x2740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2748=((-1.0)*r11);
IkReal x2750 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2750)==0){
continue;
}
IkReal x2749=pow(x2750,-0.5);
CheckValue<IkReal> x2751 = IKatan2WithCheck(IkReal(x2748),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2751.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2751.value))));
IkReal gconst88=(x2748*x2749);
IkReal gconst89=((1.0)*r10*x2749);
CheckValue<IkReal> x2752 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2752.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2752.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2753=((-1.0)*r11);
CheckValue<IkReal> x2756 = IKatan2WithCheck(IkReal(x2753),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2756.valid){
continue;
}
IkReal x2754=((1.0)*(x2756.value));
IkReal x2755=x2749;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2754)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2754)));
IkReal gconst88=(x2753*x2755);
IkReal gconst89=((1.0)*r10*x2755);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2757=((-1.0)*r11);
CheckValue<IkReal> x2760 = IKatan2WithCheck(IkReal(x2757),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2760.valid){
continue;
}
IkReal x2758=((1.0)*(x2760.value));
IkReal x2759=x2749;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2758)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2758)));
IkReal gconst88=(x2757*x2759);
IkReal gconst89=((1.0)*r10*x2759);
IkReal x2761=r12*r12;
IkReal x2762=((1.0)*sj0);
IkReal x2763=(cj0*r02);
IkReal x2764=x2749;
j4eval[0]=((IKabs(((((-1.0)*x2762*x2764))+((r12*x2763*x2764))+((sj0*x2761*x2764)))))+(IKabs(((((-1.0)*x2763))+(((-1.0)*r12*x2762))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2765=((-1.0)*r11);
CheckValue<IkReal> x2768 = IKatan2WithCheck(IkReal(x2765),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2768.valid){
continue;
}
IkReal x2766=((1.0)*(x2768.value));
IkReal x2767=x2749;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2766)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2766)));
IkReal gconst88=(x2765*x2767);
IkReal gconst89=((1.0)*r10*x2767);
IkReal x2769=r12*r12;
IkReal x2770=(cj1*cj2*r22);
IkReal x2771=(r22*sj1*sj2);
CheckValue<IkReal> x2775=IKPowWithIntegerCheck(((-1.0)+x2769),-1);
if(!x2775.valid){
continue;
}
IkReal x2772=x2775.value;
if((((1.0)+(((-1.0)*x2769)))) < -0.00001)
continue;
IkReal x2773=IKsqrt(((1.0)+(((-1.0)*x2769))));
IkReal x2774=(r12*x2772*x2773);
j4eval[0]=((IKabs((x2771+(((-1.0)*x2770)))))+(IKabs((((x2770*x2774))+(((-1.0)*x2771*x2774))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2776=(cj1*cj2);
IkReal x2777=(gconst89*r20);
IkReal x2778=(gconst88*r21);
IkReal x2779=(sj1*sj2);
CheckValue<IkReal> x2780 = IKatan2WithCheck(IkReal((((r22*x2779))+(((-1.0)*r22*x2776)))),IkReal(((((-1.0)*x2777*x2779))+((x2778*x2779))+(((-1.0)*x2776*x2778))+((x2776*x2777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2780.valid){
continue;
}
CheckValue<IkReal> x2781=IKPowWithIntegerCheck(IKsign(((x2777*x2777)+(r22*r22)+(x2778*x2778)+(((-2.0)*x2777*x2778)))),-1);
if(!x2781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2780.value)+(((1.5707963267949)*(x2781.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2782=IKsin(j4);
IkReal x2783=IKcos(j4);
IkReal x2784=((1.0)*sj0);
IkReal x2785=((1.0)*cj2);
IkReal x2786=(gconst89*r20);
IkReal x2787=(gconst89*r10);
IkReal x2788=(gconst89*r00);
IkReal x2789=(cj1*sj2);
IkReal x2790=((1.0)*x2783);
IkReal x2791=((1.0)*x2782);
IkReal x2792=(gconst88*x2782);
evalcond[0]=((((-1.0)*x2786*x2791))+((r21*x2792))+(((-1.0)*r22*x2790)));
evalcond[1]=((((-1.0)*x2787*x2791))+cj0+((r11*x2792))+(((-1.0)*r12*x2790)));
evalcond[2]=((((-1.0)*x2784))+((r01*x2792))+(((-1.0)*x2788*x2791))+(((-1.0)*r02*x2790)));
evalcond[3]=((((-1.0)*cj1*x2785))+(((-1.0)*gconst88*r21*x2790))+((sj1*sj2))+((x2783*x2786))+(((-1.0)*r22*x2791)));
evalcond[4]=((((-1.0)*cj0*sj1*x2785))+((x2783*x2788))+(((-1.0)*cj0*x2789))+(((-1.0)*gconst88*r01*x2790))+(((-1.0)*r02*x2791)));
evalcond[5]=((((-1.0)*cj2*sj1*x2784))+(((-1.0)*x2784*x2789))+((x2783*x2787))+(((-1.0)*gconst88*r11*x2790))+(((-1.0)*r12*x2791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2793=((1.0)*sj0);
IkReal x2794=((1.0)*cj0);
CheckValue<IkReal> x2795=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2795.valid){
continue;
}
CheckValue<IkReal> x2796 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2793))+(((-1.0)*r02*x2794)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r11*x2793))+(((-1.0)*gconst88*r01*x2794))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2795.value)))+(x2796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2797=IKsin(j4);
IkReal x2798=IKcos(j4);
IkReal x2799=((1.0)*sj0);
IkReal x2800=((1.0)*cj2);
IkReal x2801=(gconst89*r20);
IkReal x2802=(gconst89*r10);
IkReal x2803=(gconst89*r00);
IkReal x2804=(cj1*sj2);
IkReal x2805=((1.0)*x2798);
IkReal x2806=((1.0)*x2797);
IkReal x2807=(gconst88*x2797);
evalcond[0]=((((-1.0)*r22*x2805))+((r21*x2807))+(((-1.0)*x2801*x2806)));
evalcond[1]=(cj0+(((-1.0)*x2802*x2806))+(((-1.0)*r12*x2805))+((r11*x2807)));
evalcond[2]=((((-1.0)*x2799))+(((-1.0)*x2803*x2806))+(((-1.0)*r02*x2805))+((r01*x2807)));
evalcond[3]=((((-1.0)*cj1*x2800))+((x2798*x2801))+((sj1*sj2))+(((-1.0)*r22*x2806))+(((-1.0)*gconst88*r21*x2805)));
evalcond[4]=(((x2798*x2803))+(((-1.0)*gconst88*r01*x2805))+(((-1.0)*r02*x2806))+(((-1.0)*cj0*x2804))+(((-1.0)*cj0*sj1*x2800)));
evalcond[5]=((((-1.0)*gconst88*r11*x2805))+((x2798*x2802))+(((-1.0)*r12*x2806))+(((-1.0)*x2799*x2804))+(((-1.0)*cj2*sj1*x2799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2808=((1.0)*gconst89);
CheckValue<IkReal> x2809=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2808))+(((-1.0)*gconst88*r00)))),-1);
if(!x2809.valid){
continue;
}
CheckValue<IkReal> x2810 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2808))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2809.value)))+(x2810.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2811=IKsin(j4);
IkReal x2812=IKcos(j4);
IkReal x2813=((1.0)*sj0);
IkReal x2814=((1.0)*cj2);
IkReal x2815=(gconst89*r20);
IkReal x2816=(gconst89*r10);
IkReal x2817=(gconst89*r00);
IkReal x2818=(cj1*sj2);
IkReal x2819=((1.0)*x2812);
IkReal x2820=((1.0)*x2811);
IkReal x2821=(gconst88*x2811);
evalcond[0]=((((-1.0)*r22*x2819))+((r21*x2821))+(((-1.0)*x2815*x2820)));
evalcond[1]=((((-1.0)*r12*x2819))+cj0+(((-1.0)*x2816*x2820))+((r11*x2821)));
evalcond[2]=((((-1.0)*r02*x2819))+(((-1.0)*x2817*x2820))+(((-1.0)*x2813))+((r01*x2821)));
evalcond[3]=(((x2812*x2815))+(((-1.0)*cj1*x2814))+(((-1.0)*gconst88*r21*x2819))+((sj1*sj2))+(((-1.0)*r22*x2820)));
evalcond[4]=((((-1.0)*gconst88*r01*x2819))+(((-1.0)*cj0*x2818))+((x2812*x2817))+(((-1.0)*cj0*sj1*x2814))+(((-1.0)*r02*x2820)));
evalcond[5]=((((-1.0)*r12*x2820))+((x2812*x2816))+(((-1.0)*x2813*x2818))+(((-1.0)*cj2*sj1*x2813))+(((-1.0)*gconst88*r11*x2819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2822=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2822;
j4eval[1]=IKsign(x2822);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2823=((1.0)*cj5);
IkReal x2824=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2823)));
j4eval[0]=x2824;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2823))))));
j4eval[2]=IKsign(x2824);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2825=cj5*cj5;
IkReal x2826=r11*r11;
IkReal x2827=(r11*sj5);
IkReal x2828=(cj5*r10);
IkReal x2829=((r12*r12)+(((-1.0)*x2825*x2826))+(((-2.0)*x2827*x2828))+((x2825*(r10*r10)))+x2826);
j4eval[0]=x2829;
j4eval[1]=IKsign(x2829);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2827))+x2828))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2830=cj5*cj5;
IkReal x2831=r11*r11;
IkReal x2832=(cj5*r10);
IkReal x2833=(r11*sj5);
CheckValue<IkReal> x2834=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x2832*x2833))+(((-1.0)*x2830*x2831))+((x2830*(r10*r10)))+x2831)),-1);
if(!x2834.valid){
continue;
}
CheckValue<IkReal> x2835 = IKatan2WithCheck(IkReal(((((-1.0)*x2833))+x2832)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2834.value)))+(x2835.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2836=IKsin(j4);
IkReal x2837=IKcos(j4);
IkReal x2838=(cj5*r10);
IkReal x2839=(r01*sj5);
IkReal x2840=((1.0)*cj2);
IkReal x2841=(cj5*r00);
IkReal x2842=(cj5*r20);
IkReal x2843=((1.0)*x2837);
IkReal x2844=((1.0)*x2836);
IkReal x2845=(sj5*x2836);
evalcond[0]=((((-1.0)*x2842*x2844))+((r21*x2845))+(((-1.0)*r22*x2843)));
evalcond[1]=(((x2836*x2839))+(((-1.0)*r02*x2843))+(((-1.0)*x2841*x2844)));
evalcond[2]=((((-1.0)*r12*x2844))+(((-1.0)*r11*sj5*x2843))+((x2837*x2838)));
evalcond[3]=((1.0)+((r11*x2845))+(((-1.0)*r12*x2843))+(((-1.0)*x2838*x2844)));
evalcond[4]=(((x2837*x2842))+((sj1*sj2))+(((-1.0)*r22*x2844))+(((-1.0)*r21*sj5*x2843))+(((-1.0)*cj1*x2840)));
evalcond[5]=((((-1.0)*sj1*x2840))+((x2837*x2841))+(((-1.0)*cj1*sj2))+(((-1.0)*x2839*x2843))+(((-1.0)*r02*x2844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2846=((1.0)*cj5);
CheckValue<IkReal> x2847=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2846))+(((-1.0)*r00*sj5)))),-1);
if(!x2847.valid){
continue;
}
CheckValue<IkReal> x2848 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2846))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2847.value)))+(x2848.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2849=IKsin(j4);
IkReal x2850=IKcos(j4);
IkReal x2851=(cj5*r10);
IkReal x2852=(r01*sj5);
IkReal x2853=((1.0)*cj2);
IkReal x2854=(cj5*r00);
IkReal x2855=(cj5*r20);
IkReal x2856=((1.0)*x2850);
IkReal x2857=((1.0)*x2849);
IkReal x2858=(sj5*x2849);
evalcond[0]=(((r21*x2858))+(((-1.0)*r22*x2856))+(((-1.0)*x2855*x2857)));
evalcond[1]=(((x2849*x2852))+(((-1.0)*r02*x2856))+(((-1.0)*x2854*x2857)));
evalcond[2]=((((-1.0)*r11*sj5*x2856))+(((-1.0)*r12*x2857))+((x2850*x2851)));
evalcond[3]=((1.0)+((r11*x2858))+(((-1.0)*r12*x2856))+(((-1.0)*x2851*x2857)));
evalcond[4]=((((-1.0)*cj1*x2853))+((sj1*sj2))+((x2850*x2855))+(((-1.0)*r22*x2857))+(((-1.0)*r21*sj5*x2856)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x2850*x2854))+(((-1.0)*r02*x2857))+(((-1.0)*x2852*x2856))+(((-1.0)*sj1*x2853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2859=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2859.valid){
continue;
}
CheckValue<IkReal> x2860 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2859.value)))+(x2860.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2861=IKsin(j4);
IkReal x2862=IKcos(j4);
IkReal x2863=(cj5*r10);
IkReal x2864=(r01*sj5);
IkReal x2865=((1.0)*cj2);
IkReal x2866=(cj5*r00);
IkReal x2867=(cj5*r20);
IkReal x2868=((1.0)*x2862);
IkReal x2869=((1.0)*x2861);
IkReal x2870=(sj5*x2861);
evalcond[0]=((((-1.0)*r22*x2868))+((r21*x2870))+(((-1.0)*x2867*x2869)));
evalcond[1]=((((-1.0)*r02*x2868))+((x2861*x2864))+(((-1.0)*x2866*x2869)));
evalcond[2]=((((-1.0)*r12*x2869))+(((-1.0)*r11*sj5*x2868))+((x2862*x2863)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2868))+((r11*x2870))+(((-1.0)*x2863*x2869)));
evalcond[4]=((((-1.0)*cj1*x2865))+((sj1*sj2))+(((-1.0)*r22*x2869))+(((-1.0)*r21*sj5*x2868))+((x2862*x2867)));
evalcond[5]=((((-1.0)*r02*x2869))+(((-1.0)*x2864*x2868))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2865))+((x2862*x2866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2871=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2871;
j4eval[1]=IKsign(x2871);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2872=((1.0)*cj5);
IkReal x2873=((((-1.0)*r21*x2872))+(((-1.0)*r20*sj5)));
j4eval[0]=x2873;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2872))))));
j4eval[2]=IKsign(x2873);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2874=cj5*cj5;
IkReal x2875=r11*r11;
IkReal x2876=(cj5*r10);
IkReal x2877=(r11*sj5);
IkReal x2878=((((-1.0)*x2874*(r10*r10)))+(((2.0)*x2876*x2877))+(((-1.0)*x2875))+((x2874*x2875))+(((-1.0)*(r12*r12))));
j4eval[0]=x2878;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2877))+x2876))));
j4eval[2]=IKsign(x2878);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2879=cj5*cj5;
IkReal x2880=r11*r11;
IkReal x2881=(cj5*r10);
IkReal x2882=(r11*sj5);
CheckValue<IkReal> x2883 = IKatan2WithCheck(IkReal(((((-1.0)*x2882))+x2881)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2883.valid){
continue;
}
CheckValue<IkReal> x2884=IKPowWithIntegerCheck(IKsign(((((2.0)*x2881*x2882))+((x2879*x2880))+(((-1.0)*x2880))+(((-1.0)*(r12*r12)))+(((-1.0)*x2879*(r10*r10))))),-1);
if(!x2884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2883.value)+(((1.5707963267949)*(x2884.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2885=IKsin(j4);
IkReal x2886=IKcos(j4);
IkReal x2887=(cj5*r10);
IkReal x2888=(r01*sj5);
IkReal x2889=(cj5*r00);
IkReal x2890=(cj5*r20);
IkReal x2891=((1.0)*x2886);
IkReal x2892=((1.0)*x2885);
IkReal x2893=(sj5*x2885);
evalcond[0]=((((-1.0)*r22*x2891))+(((-1.0)*x2890*x2892))+((r21*x2893)));
evalcond[1]=(((x2885*x2888))+(((-1.0)*x2889*x2892))+(((-1.0)*r02*x2891)));
evalcond[2]=((((-1.0)*r11*sj5*x2891))+((x2886*x2887))+(((-1.0)*r12*x2892)));
evalcond[3]=((-1.0)+(((-1.0)*x2887*x2892))+((r11*x2893))+(((-1.0)*r12*x2891)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2892))+(((-1.0)*x2888*x2891))+((cj1*sj2))+((x2886*x2889)));
evalcond[5]=((((-1.0)*r22*x2892))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2891))+((x2886*x2890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2894=((1.0)*cj5);
CheckValue<IkReal> x2895 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2894)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2895.valid){
continue;
}
CheckValue<IkReal> x2896=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2894))+(((-1.0)*r20*sj5)))),-1);
if(!x2896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2895.value)+(((1.5707963267949)*(x2896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2897=IKsin(j4);
IkReal x2898=IKcos(j4);
IkReal x2899=(cj5*r10);
IkReal x2900=(r01*sj5);
IkReal x2901=(cj5*r00);
IkReal x2902=(cj5*r20);
IkReal x2903=((1.0)*x2898);
IkReal x2904=((1.0)*x2897);
IkReal x2905=(sj5*x2897);
evalcond[0]=((((-1.0)*x2902*x2904))+((r21*x2905))+(((-1.0)*r22*x2903)));
evalcond[1]=((((-1.0)*r02*x2903))+(((-1.0)*x2901*x2904))+((x2897*x2900)));
evalcond[2]=(((x2898*x2899))+(((-1.0)*r11*sj5*x2903))+(((-1.0)*r12*x2904)));
evalcond[3]=((-1.0)+(((-1.0)*x2899*x2904))+(((-1.0)*r12*x2903))+((r11*x2905)));
evalcond[4]=((((-1.0)*r02*x2904))+((cj2*sj1))+(((-1.0)*x2900*x2903))+((cj1*sj2))+((x2898*x2901)));
evalcond[5]=((((-1.0)*r21*sj5*x2903))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2898*x2902))+(((-1.0)*r22*x2904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2906 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2906.valid){
continue;
}
CheckValue<IkReal> x2907=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2906.value)+(((1.5707963267949)*(x2907.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2908=IKsin(j4);
IkReal x2909=IKcos(j4);
IkReal x2910=(cj5*r10);
IkReal x2911=(r01*sj5);
IkReal x2912=(cj5*r00);
IkReal x2913=(cj5*r20);
IkReal x2914=((1.0)*x2909);
IkReal x2915=((1.0)*x2908);
IkReal x2916=(sj5*x2908);
evalcond[0]=((((-1.0)*x2913*x2915))+((r21*x2916))+(((-1.0)*r22*x2914)));
evalcond[1]=((((-1.0)*x2912*x2915))+(((-1.0)*r02*x2914))+((x2908*x2911)));
evalcond[2]=(((x2909*x2910))+(((-1.0)*r12*x2915))+(((-1.0)*r11*sj5*x2914)));
evalcond[3]=((-1.0)+((r11*x2916))+(((-1.0)*r12*x2914))+(((-1.0)*x2910*x2915)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2909*x2912))+(((-1.0)*x2911*x2914))+(((-1.0)*r02*x2915)));
evalcond[5]=(((x2909*x2913))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2914))+(((-1.0)*r22*x2915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2917=((-1.0)*r00);
IkReal x2919 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2919)==0){
continue;
}
IkReal x2918=pow(x2919,-0.5);
CheckValue<IkReal> x2920 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2917),IKFAST_ATAN2_MAGTHRESH);
if(!x2920.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2920.value));
IkReal gconst91=(r01*x2918);
IkReal gconst92=(x2917*x2918);
CheckValue<IkReal> x2921 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2921.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2921.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2922=((-1.0)*r00);
IkReal x2923=x2918;
CheckValue<IkReal> x2925 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2922),IKFAST_ATAN2_MAGTHRESH);
if(!x2925.valid){
continue;
}
IkReal x2924=((-1.0)*(x2925.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2924;
IkReal gconst90=x2924;
IkReal gconst91=(r01*x2923);
IkReal gconst92=(x2922*x2923);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2926=((1.0)*sj0);
IkReal x2927=((1.0)*cj0);
CheckValue<IkReal> x2928 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2927))+(((-1.0)*r12*x2926)))),IkReal((((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2926))+(((-1.0)*gconst91*r01*x2927)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2928.valid){
continue;
}
CheckValue<IkReal> x2929=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2928.value)+(((1.5707963267949)*(x2929.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2930=IKsin(j4);
IkReal x2931=IKcos(j4);
IkReal x2932=((1.0)*cj2);
IkReal x2933=(gconst92*r00);
IkReal x2934=(gconst92*r20);
IkReal x2935=((1.0)*sj0);
IkReal x2936=(gconst92*r10);
IkReal x2937=(cj1*sj2);
IkReal x2938=((1.0)*x2931);
IkReal x2939=(gconst91*x2930);
IkReal x2940=((1.0)*x2930);
evalcond[0]=((((-1.0)*x2934*x2940))+((r21*x2939))+(((-1.0)*r22*x2938)));
evalcond[1]=((((-1.0)*x2936*x2940))+cj0+(((-1.0)*r12*x2938))+((r11*x2939)));
evalcond[2]=(((r01*x2939))+(((-1.0)*x2935))+(((-1.0)*x2933*x2940))+(((-1.0)*r02*x2938)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2932))+(((-1.0)*r22*x2940))+(((-1.0)*gconst91*r21*x2938))+((x2931*x2934)));
evalcond[4]=((((-1.0)*cj0*x2937))+(((-1.0)*r02*x2940))+(((-1.0)*cj0*sj1*x2932))+((x2931*x2933))+(((-1.0)*gconst91*r01*x2938)));
evalcond[5]=((((-1.0)*r12*x2940))+(((-1.0)*sj0*sj1*x2932))+(((-1.0)*x2935*x2937))+(((-1.0)*gconst91*r11*x2938))+((x2931*x2936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2941=((1.0)*gconst92);
CheckValue<IkReal> x2942=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2941))+(((-1.0)*gconst91*r10)))),-1);
if(!x2942.valid){
continue;
}
CheckValue<IkReal> x2943 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2941)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2942.value)))+(x2943.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2944=IKsin(j4);
IkReal x2945=IKcos(j4);
IkReal x2946=((1.0)*cj2);
IkReal x2947=(gconst92*r00);
IkReal x2948=(gconst92*r20);
IkReal x2949=((1.0)*sj0);
IkReal x2950=(gconst92*r10);
IkReal x2951=(cj1*sj2);
IkReal x2952=((1.0)*x2945);
IkReal x2953=(gconst91*x2944);
IkReal x2954=((1.0)*x2944);
evalcond[0]=((((-1.0)*x2948*x2954))+((r21*x2953))+(((-1.0)*r22*x2952)));
evalcond[1]=(cj0+(((-1.0)*r12*x2952))+(((-1.0)*x2950*x2954))+((r11*x2953)));
evalcond[2]=((((-1.0)*x2947*x2954))+(((-1.0)*r02*x2952))+((r01*x2953))+(((-1.0)*x2949)));
evalcond[3]=((((-1.0)*gconst91*r21*x2952))+((x2945*x2948))+((sj1*sj2))+(((-1.0)*cj1*x2946))+(((-1.0)*r22*x2954)));
evalcond[4]=((((-1.0)*r02*x2954))+(((-1.0)*cj0*x2951))+((x2945*x2947))+(((-1.0)*cj0*sj1*x2946))+(((-1.0)*gconst91*r01*x2952)));
evalcond[5]=(((x2945*x2950))+(((-1.0)*x2949*x2951))+(((-1.0)*r12*x2954))+(((-1.0)*gconst91*r11*x2952))+(((-1.0)*sj0*sj1*x2946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2955=((-1.0)*r01);
IkReal x2957 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2957)==0){
continue;
}
IkReal x2956=pow(x2957,-0.5);
CheckValue<IkReal> x2958 = IKatan2WithCheck(IkReal(x2955),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2958.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2958.value))));
IkReal gconst94=(x2955*x2956);
IkReal gconst95=((1.0)*r00*x2956);
CheckValue<IkReal> x2959 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2959.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2959.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2960=((-1.0)*r01);
CheckValue<IkReal> x2963 = IKatan2WithCheck(IkReal(x2960),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2963.valid){
continue;
}
IkReal x2961=((1.0)*(x2963.value));
IkReal x2962=x2956;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2961)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2961)));
IkReal gconst94=(x2960*x2962);
IkReal gconst95=((1.0)*r00*x2962);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2964=((-1.0)*r01);
CheckValue<IkReal> x2967 = IKatan2WithCheck(IkReal(x2964),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2967.valid){
continue;
}
IkReal x2965=((1.0)*(x2967.value));
IkReal x2966=x2956;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2965)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2965)));
IkReal gconst94=(x2964*x2966);
IkReal gconst95=((1.0)*r00*x2966);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2968=((-1.0)*r01);
CheckValue<IkReal> x2971 = IKatan2WithCheck(IkReal(x2968),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2971.valid){
continue;
}
IkReal x2969=((1.0)*(x2971.value));
IkReal x2970=x2956;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2969)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2969)));
IkReal gconst94=(x2968*x2970);
IkReal gconst95=((1.0)*r00*x2970);
IkReal x2972=r02*r02;
IkReal x2973=(r12*sj0);
IkReal x2974=((1.0)*cj0);
IkReal x2975=x2956;
j4eval[0]=((IKabs(((((-1.0)*x2973))+(((-1.0)*r02*x2974)))))+(IKabs(((((-1.0)*x2974*x2975))+((r02*x2973*x2975))+((cj0*x2972*x2975))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2976=((1.0)*sj0);
IkReal x2977=((1.0)*cj0);
CheckValue<IkReal> x2978=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2978.valid){
continue;
}
CheckValue<IkReal> x2979 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2976))+(((-1.0)*r02*x2977)))),IkReal(((((-1.0)*gconst94*r01*x2977))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r11*x2976))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2978.value)))+(x2979.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2980=IKsin(j4);
IkReal x2981=IKcos(j4);
IkReal x2982=(gconst94*r11);
IkReal x2983=((1.0)*cj2);
IkReal x2984=(gconst94*r21);
IkReal x2985=((1.0)*sj0);
IkReal x2986=(gconst94*r01);
IkReal x2987=(cj1*sj2);
IkReal x2988=((1.0)*x2981);
IkReal x2989=(gconst95*x2981);
IkReal x2990=((1.0)*x2980);
IkReal x2991=(gconst95*x2990);
evalcond[0]=(((x2980*x2984))+(((-1.0)*r22*x2988))+(((-1.0)*r20*x2991)));
evalcond[1]=(cj0+(((-1.0)*r12*x2988))+(((-1.0)*r10*x2991))+((x2980*x2982)));
evalcond[2]=((((-1.0)*x2985))+((x2980*x2986))+(((-1.0)*r02*x2988))+(((-1.0)*r00*x2991)));
evalcond[3]=((((-1.0)*r22*x2990))+(((-1.0)*x2984*x2988))+(((-1.0)*cj1*x2983))+((sj1*sj2))+((r20*x2989)));
evalcond[4]=((((-1.0)*cj0*x2987))+((r00*x2989))+(((-1.0)*cj0*sj1*x2983))+(((-1.0)*x2986*x2988))+(((-1.0)*r02*x2990)));
evalcond[5]=((((-1.0)*x2985*x2987))+(((-1.0)*x2982*x2988))+(((-1.0)*r12*x2990))+(((-1.0)*sj0*sj1*x2983))+((r10*x2989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2992=((1.0)*gconst95);
CheckValue<IkReal> x2993 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2992)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2993.valid){
continue;
}
CheckValue<IkReal> x2994=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2992)))),-1);
if(!x2994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2993.value)+(((1.5707963267949)*(x2994.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2995=IKsin(j4);
IkReal x2996=IKcos(j4);
IkReal x2997=(gconst94*r11);
IkReal x2998=((1.0)*cj2);
IkReal x2999=(gconst94*r21);
IkReal x3000=((1.0)*sj0);
IkReal x3001=(gconst94*r01);
IkReal x3002=(cj1*sj2);
IkReal x3003=((1.0)*x2996);
IkReal x3004=(gconst95*x2996);
IkReal x3005=((1.0)*x2995);
IkReal x3006=(gconst95*x3005);
evalcond[0]=(((x2995*x2999))+(((-1.0)*r22*x3003))+(((-1.0)*r20*x3006)));
evalcond[1]=((((-1.0)*r10*x3006))+((x2995*x2997))+cj0+(((-1.0)*r12*x3003)));
evalcond[2]=((((-1.0)*r02*x3003))+(((-1.0)*r00*x3006))+((x2995*x3001))+(((-1.0)*x3000)));
evalcond[3]=((((-1.0)*r22*x3005))+((sj1*sj2))+(((-1.0)*cj1*x2998))+((r20*x3004))+(((-1.0)*x2999*x3003)));
evalcond[4]=(((r00*x3004))+(((-1.0)*r02*x3005))+(((-1.0)*cj0*x3002))+(((-1.0)*cj0*sj1*x2998))+(((-1.0)*x3001*x3003)));
evalcond[5]=((((-1.0)*x2997*x3003))+(((-1.0)*sj0*sj1*x2998))+(((-1.0)*x3000*x3002))+((r10*x3004))+(((-1.0)*r12*x3005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3007=((1.0)*gconst95);
CheckValue<IkReal> x3008 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3007))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3008.valid){
continue;
}
CheckValue<IkReal> x3009=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x3007)))),-1);
if(!x3009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3008.value)+(((1.5707963267949)*(x3009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3010=IKsin(j4);
IkReal x3011=IKcos(j4);
IkReal x3012=(gconst94*r11);
IkReal x3013=((1.0)*cj2);
IkReal x3014=(gconst94*r21);
IkReal x3015=((1.0)*sj0);
IkReal x3016=(gconst94*r01);
IkReal x3017=(cj1*sj2);
IkReal x3018=((1.0)*x3011);
IkReal x3019=(gconst95*x3011);
IkReal x3020=((1.0)*x3010);
IkReal x3021=(gconst95*x3020);
evalcond[0]=(((x3010*x3014))+(((-1.0)*r22*x3018))+(((-1.0)*r20*x3021)));
evalcond[1]=(((x3010*x3012))+cj0+(((-1.0)*r12*x3018))+(((-1.0)*r10*x3021)));
evalcond[2]=(((x3010*x3016))+(((-1.0)*r02*x3018))+(((-1.0)*x3015))+(((-1.0)*r00*x3021)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3013))+((r20*x3019))+(((-1.0)*x3014*x3018))+(((-1.0)*r22*x3020)));
evalcond[4]=(((r00*x3019))+(((-1.0)*cj0*sj1*x3013))+(((-1.0)*r02*x3020))+(((-1.0)*x3016*x3018))+(((-1.0)*cj0*x3017)));
evalcond[5]=((((-1.0)*r12*x3020))+(((-1.0)*sj0*sj1*x3013))+((r10*x3019))+(((-1.0)*x3015*x3017))+(((-1.0)*x3012*x3018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3022=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3022;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3022);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3023=((1.0)*cj5);
IkReal x3024=((((-1.0)*r11*x3023))+(((-1.0)*r10*sj5)));
j4eval[0]=x3024;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3023))))));
j4eval[2]=IKsign(x3024);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3025=cj5*cj5;
IkReal x3026=r01*r01;
IkReal x3027=(r01*sj5);
IkReal x3028=(cj5*r00);
IkReal x3029=((((2.0)*x3027*x3028))+(((-1.0)*x3025*(r00*r00)))+(((-1.0)*x3026))+(((-1.0)*(r02*r02)))+((x3025*x3026)));
j4eval[0]=x3029;
j4eval[1]=IKsign(x3029);
j4eval[2]=((IKabs(r02))+(IKabs((x3028+(((-1.0)*x3027))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3030=cj5*cj5;
IkReal x3031=r01*r01;
IkReal x3032=(r01*sj5);
IkReal x3033=(cj5*r00);
CheckValue<IkReal> x3034 = IKatan2WithCheck(IkReal((x3033+(((-1.0)*x3032)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3034.valid){
continue;
}
CheckValue<IkReal> x3035=IKPowWithIntegerCheck(IKsign((((x3030*x3031))+(((-1.0)*(r02*r02)))+(((2.0)*x3032*x3033))+(((-1.0)*x3031))+(((-1.0)*x3030*(r00*r00))))),-1);
if(!x3035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3034.value)+(((1.5707963267949)*(x3035.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3036=IKsin(j4);
IkReal x3037=IKcos(j4);
IkReal x3038=(cj5*r10);
IkReal x3039=(r01*sj5);
IkReal x3040=((1.0)*cj2);
IkReal x3041=(cj5*r00);
IkReal x3042=(cj5*r20);
IkReal x3043=((1.0)*x3037);
IkReal x3044=((1.0)*x3036);
IkReal x3045=(sj5*x3036);
evalcond[0]=((((-1.0)*x3042*x3044))+((r21*x3045))+(((-1.0)*r22*x3043)));
evalcond[1]=((((-1.0)*r12*x3043))+(((-1.0)*x3038*x3044))+((r11*x3045)));
evalcond[2]=(((x3037*x3041))+(((-1.0)*x3039*x3043))+(((-1.0)*r02*x3044)));
evalcond[3]=((-1.0)+((x3036*x3039))+(((-1.0)*x3041*x3044))+(((-1.0)*r02*x3043)));
evalcond[4]=(((x3037*x3042))+(((-1.0)*r22*x3044))+((sj1*sj2))+(((-1.0)*cj1*x3040))+(((-1.0)*r21*sj5*x3043)));
evalcond[5]=((((-1.0)*r12*x3044))+((x3037*x3038))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x3043))+(((-1.0)*sj1*x3040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3046=((1.0)*cj5);
CheckValue<IkReal> x3047 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3046)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3047.valid){
continue;
}
CheckValue<IkReal> x3048=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3046)))),-1);
if(!x3048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3047.value)+(((1.5707963267949)*(x3048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3049=IKsin(j4);
IkReal x3050=IKcos(j4);
IkReal x3051=(cj5*r10);
IkReal x3052=(r01*sj5);
IkReal x3053=((1.0)*cj2);
IkReal x3054=(cj5*r00);
IkReal x3055=(cj5*r20);
IkReal x3056=((1.0)*x3050);
IkReal x3057=((1.0)*x3049);
IkReal x3058=(sj5*x3049);
evalcond[0]=((((-1.0)*x3055*x3057))+((r21*x3058))+(((-1.0)*r22*x3056)));
evalcond[1]=((((-1.0)*x3051*x3057))+((r11*x3058))+(((-1.0)*r12*x3056)));
evalcond[2]=((((-1.0)*x3052*x3056))+(((-1.0)*r02*x3057))+((x3050*x3054)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3056))+(((-1.0)*x3054*x3057))+((x3049*x3052)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r21*sj5*x3056))+(((-1.0)*cj1*x3053))+((x3050*x3055))+(((-1.0)*r22*x3057)));
evalcond[5]=((((-1.0)*sj1*x3053))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3057))+((x3050*x3051))+(((-1.0)*r11*sj5*x3056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3059=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3059.valid){
continue;
}
CheckValue<IkReal> x3060 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3059.value)))+(x3060.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3061=IKsin(j4);
IkReal x3062=IKcos(j4);
IkReal x3063=(cj5*r10);
IkReal x3064=(r01*sj5);
IkReal x3065=((1.0)*cj2);
IkReal x3066=(cj5*r00);
IkReal x3067=(cj5*r20);
IkReal x3068=((1.0)*x3062);
IkReal x3069=((1.0)*x3061);
IkReal x3070=(sj5*x3061);
evalcond[0]=((((-1.0)*r22*x3068))+(((-1.0)*x3067*x3069))+((r21*x3070)));
evalcond[1]=((((-1.0)*x3063*x3069))+(((-1.0)*r12*x3068))+((r11*x3070)));
evalcond[2]=((((-1.0)*r02*x3069))+(((-1.0)*x3064*x3068))+((x3062*x3066)));
evalcond[3]=((-1.0)+(((-1.0)*x3066*x3069))+(((-1.0)*r02*x3068))+((x3061*x3064)));
evalcond[4]=((((-1.0)*r21*sj5*x3068))+(((-1.0)*r22*x3069))+((sj1*sj2))+(((-1.0)*cj1*x3065))+((x3062*x3067)));
evalcond[5]=((((-1.0)*r11*sj5*x3068))+(((-1.0)*r12*x3069))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3065))+((x3062*x3063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3071=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3071;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3071);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3072=((1.0)*cj5);
IkReal x3073=((((-1.0)*r21*x3072))+(((-1.0)*r20*sj5)));
j4eval[0]=x3073;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3072))+((r11*sj5))))));
j4eval[2]=IKsign(x3073);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3074=cj5*cj5;
IkReal x3075=r01*r01;
IkReal x3076=(cj5*r00);
IkReal x3077=(r01*sj5);
IkReal x3078=(((x3074*(r00*r00)))+x3075+(((-2.0)*x3076*x3077))+(((-1.0)*x3074*x3075))+(r02*r02));
j4eval[0]=x3078;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x3077))+x3076))));
j4eval[2]=IKsign(x3078);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3079=cj5*cj5;
IkReal x3080=r01*r01;
IkReal x3081=(r01*sj5);
IkReal x3082=(cj5*r00);
CheckValue<IkReal> x3083=IKPowWithIntegerCheck(IKsign((x3080+(((-1.0)*x3079*x3080))+(((-2.0)*x3081*x3082))+(r02*r02)+((x3079*(r00*r00))))),-1);
if(!x3083.valid){
continue;
}
CheckValue<IkReal> x3084 = IKatan2WithCheck(IkReal((x3082+(((-1.0)*x3081)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3083.value)))+(x3084.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3085=IKsin(j4);
IkReal x3086=IKcos(j4);
IkReal x3087=(cj5*r10);
IkReal x3088=(r01*sj5);
IkReal x3089=(cj5*r00);
IkReal x3090=(cj5*r20);
IkReal x3091=((1.0)*x3086);
IkReal x3092=((1.0)*x3085);
IkReal x3093=(sj5*x3085);
evalcond[0]=((((-1.0)*r22*x3091))+((r21*x3093))+(((-1.0)*x3090*x3092)));
evalcond[1]=((((-1.0)*r12*x3091))+(((-1.0)*x3087*x3092))+((r11*x3093)));
evalcond[2]=((((-1.0)*r02*x3092))+(((-1.0)*x3088*x3091))+((x3086*x3089)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3091))+(((-1.0)*x3089*x3092))+((x3085*x3088)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x3092))+((cj1*sj2))+(((-1.0)*r11*sj5*x3091))+((x3086*x3087)));
evalcond[5]=((((-1.0)*r22*x3092))+((x3086*x3090))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3094=((1.0)*cj5);
CheckValue<IkReal> x3095=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3094))+(((-1.0)*r20*sj5)))),-1);
if(!x3095.valid){
continue;
}
CheckValue<IkReal> x3096 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x3094)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3095.value)))+(x3096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3097=IKsin(j4);
IkReal x3098=IKcos(j4);
IkReal x3099=(cj5*r10);
IkReal x3100=(r01*sj5);
IkReal x3101=(cj5*r00);
IkReal x3102=(cj5*r20);
IkReal x3103=((1.0)*x3098);
IkReal x3104=((1.0)*x3097);
IkReal x3105=(sj5*x3097);
evalcond[0]=(((r21*x3105))+(((-1.0)*x3102*x3104))+(((-1.0)*r22*x3103)));
evalcond[1]=(((r11*x3105))+(((-1.0)*r12*x3103))+(((-1.0)*x3099*x3104)));
evalcond[2]=(((x3098*x3101))+(((-1.0)*x3100*x3103))+(((-1.0)*r02*x3104)));
evalcond[3]=((1.0)+((x3097*x3100))+(((-1.0)*x3101*x3104))+(((-1.0)*r02*x3103)));
evalcond[4]=(((cj2*sj1))+((x3098*x3099))+((cj1*sj2))+(((-1.0)*r12*x3104))+(((-1.0)*r11*sj5*x3103)));
evalcond[5]=(((x3098*x3102))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x3104))+(((-1.0)*r21*sj5*x3103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3106 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3106.valid){
continue;
}
CheckValue<IkReal> x3107=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3106.value)+(((1.5707963267949)*(x3107.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3108=IKsin(j4);
IkReal x3109=IKcos(j4);
IkReal x3110=(cj5*r10);
IkReal x3111=(r01*sj5);
IkReal x3112=(cj5*r00);
IkReal x3113=(cj5*r20);
IkReal x3114=((1.0)*x3109);
IkReal x3115=((1.0)*x3108);
IkReal x3116=(sj5*x3108);
evalcond[0]=((((-1.0)*x3113*x3115))+((r21*x3116))+(((-1.0)*r22*x3114)));
evalcond[1]=((((-1.0)*r12*x3114))+(((-1.0)*x3110*x3115))+((r11*x3116)));
evalcond[2]=((((-1.0)*r02*x3115))+((x3109*x3112))+(((-1.0)*x3111*x3114)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3114))+((x3108*x3111))+(((-1.0)*x3112*x3115)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x3115))+((cj1*sj2))+(((-1.0)*r11*sj5*x3114))+((x3109*x3110)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3109*x3113))+(((-1.0)*r22*x3115))+(((-1.0)*r21*sj5*x3114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3117=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3117);
rxp1_1=(px*r21);
rxp1_2=(r11*x3117);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3118=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3118);
rxp1_1=(px*r21);
rxp1_2=(r11*x3118);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3119=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3119);
rxp1_1=(px*r21);
rxp1_2=(r11*x3119);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3122=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3122.valid){
continue;
}
IkReal x3120=x3122.value;
IkReal x3121=(sj0*x3120);
cj4array[0]=(((cj1*sj2*x3121))+((cj2*sj1*x3121)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3123=IKsin(j4);
IkReal x3124=IKcos(j4);
IkReal x3125=(cj5*r20);
IkReal x3126=(r21*sj5);
IkReal x3127=((1.0)*x3123);
IkReal x3128=((1.0)*x3124);
evalcond[0]=((-1.0)*r02*x3123);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3128)));
evalcond[2]=((((-1.0)*x3125*x3127))+((x3123*x3126)));
evalcond[3]=(((r11*sj5*x3123))+(((-1.0)*cj5*r10*x3127)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3124*x3125))+(((-1.0)*x3126*x3128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3130=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3130.valid){
continue;
}
IkReal x3129=x3130.value;
cj4array[0]=(((cj1*cj2*x3129))+(((-1.0)*sj1*sj2*x3129)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3131=IKsin(j4);
IkReal x3132=IKcos(j4);
IkReal x3133=(r11*sj5);
IkReal x3134=((1.0)*sj0);
IkReal x3135=((1.0)*x3132);
IkReal x3136=((1.0)*cj5*x3131);
evalcond[0]=((-1.0)*r02*x3131);
evalcond[1]=((((-1.0)*r02*x3135))+(((-1.0)*x3134)));
evalcond[2]=(((r21*sj5*x3131))+(((-1.0)*r20*x3136)));
evalcond[3]=(((x3131*x3133))+(((-1.0)*r10*x3136)));
evalcond[4]=((((-1.0)*x3133*x3135))+(((-1.0)*cj1*sj2*x3134))+(((-1.0)*cj2*sj1*x3134))+((cj5*r10*x3132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3137=IKPowWithIntegerCheck(r02,-1);
if(!x3137.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3137.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3138=IKsin(j4);
IkReal x3139=IKcos(j4);
IkReal x3140=((1.0)*sj0);
IkReal x3141=(cj5*x3139);
IkReal x3142=(sj5*x3138);
IkReal x3143=((1.0)*sj5*x3139);
IkReal x3144=((1.0)*cj5*x3138);
evalcond[0]=((-1.0)*r02*x3138);
evalcond[1]=(((r21*x3142))+(((-1.0)*r20*x3144)));
evalcond[2]=(((r11*x3142))+(((-1.0)*r10*x3144)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x3141))+(((-1.0)*r21*x3143)));
evalcond[4]=(((r10*x3141))+(((-1.0)*r11*x3143))+(((-1.0)*cj2*sj1*x3140))+(((-1.0)*cj1*sj2*x3140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3145=((1.0)*sj0);
IkReal x3146=((1.0)*cj0);
CheckValue<IkReal> x3147 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3145))+(((-1.0)*r02*x3146)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3146))+(((-1.0)*r11*sj5*x3145)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3147.valid){
continue;
}
CheckValue<IkReal> x3148=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3147.value)+(((1.5707963267949)*(x3148.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3149=IKsin(j4);
IkReal x3150=IKcos(j4);
IkReal x3151=(cj5*r10);
IkReal x3152=(r01*sj5);
IkReal x3153=((1.0)*cj2);
IkReal x3154=(cj5*r00);
IkReal x3155=((1.0)*sj0);
IkReal x3156=(cj5*r20);
IkReal x3157=(cj1*sj2);
IkReal x3158=((1.0)*x3150);
IkReal x3159=((1.0)*x3149);
IkReal x3160=(sj5*x3149);
evalcond[0]=((((-1.0)*r22*x3158))+(((-1.0)*x3156*x3159))+((r21*x3160)));
evalcond[1]=(cj0+((r11*x3160))+(((-1.0)*r12*x3158))+(((-1.0)*x3151*x3159)));
evalcond[2]=((((-1.0)*x3155))+((x3149*x3152))+(((-1.0)*x3154*x3159))+(((-1.0)*r02*x3158)));
evalcond[3]=((((-1.0)*r22*x3159))+(((-1.0)*cj1*x3153))+((x3150*x3156))+((sj1*sj2))+(((-1.0)*r21*sj5*x3158)));
evalcond[4]=(((x3150*x3154))+(((-1.0)*cj0*sj1*x3153))+(((-1.0)*r02*x3159))+(((-1.0)*cj0*x3157))+(((-1.0)*x3152*x3158)));
evalcond[5]=((((-1.0)*sj0*sj1*x3153))+((x3150*x3151))+(((-1.0)*r11*sj5*x3158))+(((-1.0)*r12*x3159))+(((-1.0)*x3155*x3157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3161=((1.0)*cj5);
CheckValue<IkReal> x3162 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3162.valid){
continue;
}
CheckValue<IkReal> x3163=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3161)))),-1);
if(!x3163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3162.value)+(((1.5707963267949)*(x3163.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3164=IKsin(j4);
IkReal x3165=IKcos(j4);
IkReal x3166=(cj5*r10);
IkReal x3167=(r01*sj5);
IkReal x3168=((1.0)*cj2);
IkReal x3169=(cj5*r00);
IkReal x3170=((1.0)*sj0);
IkReal x3171=(cj5*r20);
IkReal x3172=(cj1*sj2);
IkReal x3173=((1.0)*x3165);
IkReal x3174=((1.0)*x3164);
IkReal x3175=(sj5*x3164);
evalcond[0]=(((r21*x3175))+(((-1.0)*x3171*x3174))+(((-1.0)*r22*x3173)));
evalcond[1]=(((r11*x3175))+(((-1.0)*x3166*x3174))+cj0+(((-1.0)*r12*x3173)));
evalcond[2]=((((-1.0)*x3169*x3174))+(((-1.0)*x3170))+(((-1.0)*r02*x3173))+((x3164*x3167)));
evalcond[3]=((((-1.0)*cj1*x3168))+((x3165*x3171))+((sj1*sj2))+(((-1.0)*r22*x3174))+(((-1.0)*r21*sj5*x3173)));
evalcond[4]=((((-1.0)*cj0*sj1*x3168))+(((-1.0)*x3167*x3173))+((x3165*x3169))+(((-1.0)*r02*x3174))+(((-1.0)*cj0*x3172)));
evalcond[5]=((((-1.0)*sj0*sj1*x3168))+(((-1.0)*r12*x3174))+(((-1.0)*r11*sj5*x3173))+(((-1.0)*x3170*x3172))+((x3165*x3166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3176=((1.0)*cj5);
CheckValue<IkReal> x3177=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3176)))),-1);
if(!x3177.valid){
continue;
}
CheckValue<IkReal> x3178 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3176)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3177.value)))+(x3178.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3179=IKsin(j4);
IkReal x3180=IKcos(j4);
IkReal x3181=(cj5*r10);
IkReal x3182=(r01*sj5);
IkReal x3183=((1.0)*cj2);
IkReal x3184=(cj5*r00);
IkReal x3185=((1.0)*sj0);
IkReal x3186=(cj5*r20);
IkReal x3187=(cj1*sj2);
IkReal x3188=((1.0)*x3180);
IkReal x3189=((1.0)*x3179);
IkReal x3190=(sj5*x3179);
evalcond[0]=(((r21*x3190))+(((-1.0)*r22*x3188))+(((-1.0)*x3186*x3189)));
evalcond[1]=(cj0+(((-1.0)*x3181*x3189))+((r11*x3190))+(((-1.0)*r12*x3188)));
evalcond[2]=((((-1.0)*x3184*x3189))+(((-1.0)*r02*x3188))+((x3179*x3182))+(((-1.0)*x3185)));
evalcond[3]=((((-1.0)*r22*x3189))+(((-1.0)*r21*sj5*x3188))+((sj1*sj2))+((x3180*x3186))+(((-1.0)*cj1*x3183)));
evalcond[4]=((((-1.0)*r02*x3189))+(((-1.0)*cj0*sj1*x3183))+(((-1.0)*cj0*x3187))+(((-1.0)*x3182*x3188))+((x3180*x3184)));
evalcond[5]=((((-1.0)*x3185*x3187))+(((-1.0)*r11*sj5*x3188))+((x3180*x3181))+(((-1.0)*r12*x3189))+(((-1.0)*sj0*sj1*x3183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3191=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3191;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3191);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3192=r21*r21;
IkReal x3193=cj5*cj5;
IkReal x3194=(sj1*sj2);
IkReal x3195=(r21*sj5);
IkReal x3196=(cj5*r20);
IkReal x3197=(cj1*cj2);
IkReal x3198=((((-1.0)*(r22*r22)))+((x3192*x3193))+(((-1.0)*x3192))+(((2.0)*x3195*x3196))+(((-1.0)*x3193*(r20*r20))));
j4eval[0]=x3198;
j4eval[1]=((IKabs(((((-1.0)*x3195*x3197))+(((-1.0)*x3194*x3196))+((x3194*x3195))+((x3196*x3197)))))+(IKabs(((((-1.0)*r22*x3197))+((r22*x3194))))));
j4eval[2]=IKsign(x3198);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3199=IKcos(j0);
IkReal x3200=IKsin(j0);
evalcond[0]=((((-0.134)*x3200))+(((-1.0)*px))+(((0.425)*x3199)));
evalcond[1]=((((0.134)*x3199))+(((-1.0)*py))+(((0.425)*x3200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3201=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3201;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3201);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3202=((1.0)*cj5);
IkReal x3203=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3202)));
j4eval[0]=x3203;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3202)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3203);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3204=((1.0)*cj5);
IkReal x3205=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3204)));
j4eval[0]=x3205;
j4eval[1]=IKsign(x3205);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3204))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3206=((1.0)*cj5);
CheckValue<IkReal> x3207=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3206)))),-1);
if(!x3207.valid){
continue;
}
CheckValue<IkReal> x3208 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3206)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3207.value)))+(x3208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3209=IKcos(j4);
IkReal x3210=IKsin(j4);
IkReal x3211=((1.0)*sj0);
IkReal x3212=(cj5*r00);
IkReal x3213=(cj5*r10);
IkReal x3214=(cj5*r20);
IkReal x3215=((1.0)*x3209);
IkReal x3216=((1.0)*x3210);
IkReal x3217=(sj5*x3209);
IkReal x3218=(sj5*x3210);
evalcond[0]=((((-1.0)*x3214*x3215))+((r22*x3210))+((r21*x3217)));
evalcond[1]=((((-1.0)*x3214*x3216))+((r21*x3218))+(((-1.0)*r22*x3215)));
evalcond[2]=(cj0+((r11*x3218))+(((-1.0)*r12*x3215))+(((-1.0)*x3213*x3216)));
evalcond[3]=(((r01*x3217))+(((-1.0)*x3212*x3215))+(((-1.0)*cj0))+((r02*x3210)));
evalcond[4]=(((r12*x3210))+((r11*x3217))+(((-1.0)*x3211))+(((-1.0)*x3213*x3215)));
evalcond[5]=(((r01*x3218))+(((-1.0)*x3212*x3216))+(((-1.0)*x3211))+(((-1.0)*r02*x3215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3219=((1.0)*cj5);
CheckValue<IkReal> x3220 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3220.valid){
continue;
}
CheckValue<IkReal> x3221=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3219))+(((-1.0)*r00*sj5)))),-1);
if(!x3221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3220.value)+(((1.5707963267949)*(x3221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3222=IKcos(j4);
IkReal x3223=IKsin(j4);
IkReal x3224=((1.0)*sj0);
IkReal x3225=(cj5*r00);
IkReal x3226=(cj5*r10);
IkReal x3227=(cj5*r20);
IkReal x3228=((1.0)*x3222);
IkReal x3229=((1.0)*x3223);
IkReal x3230=(sj5*x3222);
IkReal x3231=(sj5*x3223);
evalcond[0]=((((-1.0)*x3227*x3228))+((r22*x3223))+((r21*x3230)));
evalcond[1]=((((-1.0)*x3227*x3229))+(((-1.0)*r22*x3228))+((r21*x3231)));
evalcond[2]=(cj0+((r11*x3231))+(((-1.0)*x3226*x3229))+(((-1.0)*r12*x3228)));
evalcond[3]=(((r02*x3223))+((r01*x3230))+(((-1.0)*x3225*x3228))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3223))+((r11*x3230))+(((-1.0)*x3226*x3228))+(((-1.0)*x3224)));
evalcond[5]=((((-1.0)*r02*x3228))+((r01*x3231))+(((-1.0)*x3225*x3229))+(((-1.0)*x3224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3232 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3232.valid){
continue;
}
CheckValue<IkReal> x3233=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3232.value)+(((1.5707963267949)*(x3233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3234=IKcos(j4);
IkReal x3235=IKsin(j4);
IkReal x3236=((1.0)*sj0);
IkReal x3237=(cj5*r00);
IkReal x3238=(cj5*r10);
IkReal x3239=(cj5*r20);
IkReal x3240=((1.0)*x3234);
IkReal x3241=((1.0)*x3235);
IkReal x3242=(sj5*x3234);
IkReal x3243=(sj5*x3235);
evalcond[0]=(((r21*x3242))+(((-1.0)*x3239*x3240))+((r22*x3235)));
evalcond[1]=(((r21*x3243))+(((-1.0)*x3239*x3241))+(((-1.0)*r22*x3240)));
evalcond[2]=(cj0+(((-1.0)*x3238*x3241))+(((-1.0)*r12*x3240))+((r11*x3243)));
evalcond[3]=(((r01*x3242))+(((-1.0)*x3237*x3240))+((r02*x3235))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3238*x3240))+((r12*x3235))+(((-1.0)*x3236))+((r11*x3242)));
evalcond[5]=(((r01*x3243))+(((-1.0)*x3237*x3241))+(((-1.0)*x3236))+(((-1.0)*r02*x3240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3244=IKcos(j0);
IkReal x3245=IKsin(j0);
evalcond[0]=((((-0.134)*x3245))+(((-1.0)*px))+(((0.425)*x3244)));
evalcond[1]=((((-1.0)*py))+(((0.425)*x3245))+(((0.134)*x3244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3246=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3246;
j4eval[1]=IKsign(x3246);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3247=((1.0)*cj5);
IkReal x3248=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3247)));
j4eval[0]=x3248;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3247)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3248);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3249=cj5*cj5;
IkReal x3250=((1.0)*r20);
IkReal x3251=(r01*r21);
IkReal x3252=(r21*sj5);
IkReal x3253=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x3249*x3250))+(((-1.0)*r02*r22))+((x3249*x3251))+((cj5*r00*x3252))+(((-1.0)*x3251)));
j4eval[0]=x3253;
j4eval[1]=((IKabs((((cj0*x3252))+(((-1.0)*cj0*cj5*x3250)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3253);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3254=cj5*cj5;
IkReal x3255=((1.0)*r20);
IkReal x3256=(r01*r21);
IkReal x3257=(r21*sj5);
CheckValue<IkReal> x3258 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3257))+(((-1.0)*cj0*cj5*x3255)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3258.valid){
continue;
}
CheckValue<IkReal> x3259=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3254*x3255))+((cj5*r00*x3257))+(((-1.0)*x3256))+((x3254*x3256)))),-1);
if(!x3259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3258.value)+(((1.5707963267949)*(x3259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3260=IKcos(j4);
IkReal x3261=IKsin(j4);
IkReal x3262=(cj5*r00);
IkReal x3263=(cj5*r10);
IkReal x3264=(cj5*r20);
IkReal x3265=((1.0)*x3260);
IkReal x3266=((1.0)*x3261);
IkReal x3267=(sj5*x3260);
IkReal x3268=(sj5*x3261);
evalcond[0]=(((r21*x3267))+(((-1.0)*x3264*x3265))+((r22*x3261)));
evalcond[1]=(((r21*x3268))+(((-1.0)*x3264*x3266))+(((-1.0)*r22*x3265)));
evalcond[2]=(((r01*x3267))+cj0+((r02*x3261))+(((-1.0)*x3262*x3265)));
evalcond[3]=(sj0+((r11*x3267))+((r12*x3261))+(((-1.0)*x3263*x3265)));
evalcond[4]=(cj0+(((-1.0)*r12*x3265))+((r11*x3268))+(((-1.0)*x3263*x3266)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3268))+(((-1.0)*x3262*x3266))+(((-1.0)*r02*x3265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3269=((1.0)*cj5);
CheckValue<IkReal> x3270=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3269))+(((-1.0)*r10*sj5)))),-1);
if(!x3270.valid){
continue;
}
CheckValue<IkReal> x3271 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3269))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3270.value)))+(x3271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3272=IKcos(j4);
IkReal x3273=IKsin(j4);
IkReal x3274=(cj5*r00);
IkReal x3275=(cj5*r10);
IkReal x3276=(cj5*r20);
IkReal x3277=((1.0)*x3272);
IkReal x3278=((1.0)*x3273);
IkReal x3279=(sj5*x3272);
IkReal x3280=(sj5*x3273);
evalcond[0]=((((-1.0)*x3276*x3277))+((r21*x3279))+((r22*x3273)));
evalcond[1]=((((-1.0)*x3276*x3278))+((r21*x3280))+(((-1.0)*r22*x3277)));
evalcond[2]=(cj0+((r01*x3279))+(((-1.0)*x3274*x3277))+((r02*x3273)));
evalcond[3]=(sj0+(((-1.0)*x3275*x3277))+((r11*x3279))+((r12*x3273)));
evalcond[4]=((((-1.0)*r12*x3277))+cj0+(((-1.0)*x3275*x3278))+((r11*x3280)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3274*x3278))+(((-1.0)*r02*x3277))+((r01*x3280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3281 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3281.valid){
continue;
}
CheckValue<IkReal> x3282=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3281.value)+(((1.5707963267949)*(x3282.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3283=IKcos(j4);
IkReal x3284=IKsin(j4);
IkReal x3285=(cj5*r00);
IkReal x3286=(cj5*r10);
IkReal x3287=(cj5*r20);
IkReal x3288=((1.0)*x3283);
IkReal x3289=((1.0)*x3284);
IkReal x3290=(sj5*x3283);
IkReal x3291=(sj5*x3284);
evalcond[0]=((((-1.0)*x3287*x3288))+((r22*x3284))+((r21*x3290)));
evalcond[1]=((((-1.0)*r22*x3288))+(((-1.0)*x3287*x3289))+((r21*x3291)));
evalcond[2]=(((r01*x3290))+cj0+((r02*x3284))+(((-1.0)*x3285*x3288)));
evalcond[3]=(sj0+((r11*x3290))+((r12*x3284))+(((-1.0)*x3286*x3288)));
evalcond[4]=((((-1.0)*r12*x3288))+cj0+((r11*x3291))+(((-1.0)*x3286*x3289)));
evalcond[5]=(((r01*x3291))+(((-1.0)*sj0))+(((-1.0)*r02*x3288))+(((-1.0)*x3285*x3289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3292=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3292;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3292);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3293=((1.0)*cj5);
IkReal x3294=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3293)));
j4eval[0]=x3294;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x3293))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x3294);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3295=((1.0)*cj5);
IkReal x3296=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3295)));
j4eval[0]=x3296;
j4eval[1]=IKsign(x3296);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3295))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3297=((1.0)*cj5);
CheckValue<IkReal> x3298=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3297)))),-1);
if(!x3298.valid){
continue;
}
CheckValue<IkReal> x3299 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3297))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3298.value)))+(x3299.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3300=IKcos(j4);
IkReal x3301=IKsin(j4);
IkReal x3302=((1.0)*sj0);
IkReal x3303=(cj5*r00);
IkReal x3304=(cj5*r10);
IkReal x3305=(cj5*r20);
IkReal x3306=((1.0)*x3300);
IkReal x3307=((1.0)*x3301);
IkReal x3308=(sj5*x3300);
IkReal x3309=(sj5*x3301);
evalcond[0]=((((-1.0)*x3305*x3306))+((r21*x3308))+((r22*x3301)));
evalcond[1]=((((-1.0)*x3305*x3307))+((r21*x3309))+(((-1.0)*r22*x3306)));
evalcond[2]=((((-1.0)*x3304*x3307))+cj0+((r11*x3309))+(((-1.0)*r12*x3306)));
evalcond[3]=(((r02*x3301))+((r01*x3308))+(((-1.0)*cj0))+(((-1.0)*x3303*x3306)));
evalcond[4]=((((-1.0)*x3304*x3306))+((r11*x3308))+(((-1.0)*x3302))+((r12*x3301)));
evalcond[5]=((((-1.0)*x3302))+(((-1.0)*r02*x3306))+((r01*x3309))+(((-1.0)*x3303*x3307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3310=((1.0)*cj5);
CheckValue<IkReal> x3311 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3311.valid){
continue;
}
CheckValue<IkReal> x3312=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3310)))),-1);
if(!x3312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3311.value)+(((1.5707963267949)*(x3312.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3313=IKcos(j4);
IkReal x3314=IKsin(j4);
IkReal x3315=((1.0)*sj0);
IkReal x3316=(cj5*r00);
IkReal x3317=(cj5*r10);
IkReal x3318=(cj5*r20);
IkReal x3319=((1.0)*x3313);
IkReal x3320=((1.0)*x3314);
IkReal x3321=(sj5*x3313);
IkReal x3322=(sj5*x3314);
evalcond[0]=((((-1.0)*x3318*x3319))+((r22*x3314))+((r21*x3321)));
evalcond[1]=((((-1.0)*r22*x3319))+((r21*x3322))+(((-1.0)*x3318*x3320)));
evalcond[2]=(cj0+((r11*x3322))+(((-1.0)*x3317*x3320))+(((-1.0)*r12*x3319)));
evalcond[3]=(((r01*x3321))+((r02*x3314))+(((-1.0)*x3316*x3319))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3321))+(((-1.0)*x3315))+(((-1.0)*x3317*x3319))+((r12*x3314)));
evalcond[5]=(((r01*x3322))+(((-1.0)*x3315))+(((-1.0)*r02*x3319))+(((-1.0)*x3316*x3320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3323 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3323.valid){
continue;
}
CheckValue<IkReal> x3324=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3323.value)+(((1.5707963267949)*(x3324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3325=IKcos(j4);
IkReal x3326=IKsin(j4);
IkReal x3327=((1.0)*sj0);
IkReal x3328=(cj5*r00);
IkReal x3329=(cj5*r10);
IkReal x3330=(cj5*r20);
IkReal x3331=((1.0)*x3325);
IkReal x3332=((1.0)*x3326);
IkReal x3333=(sj5*x3325);
IkReal x3334=(sj5*x3326);
evalcond[0]=(((r22*x3326))+((r21*x3333))+(((-1.0)*x3330*x3331)));
evalcond[1]=(((r21*x3334))+(((-1.0)*x3330*x3332))+(((-1.0)*r22*x3331)));
evalcond[2]=(cj0+((r11*x3334))+(((-1.0)*x3329*x3332))+(((-1.0)*r12*x3331)));
evalcond[3]=(((r01*x3333))+((r02*x3326))+(((-1.0)*cj0))+(((-1.0)*x3328*x3331)));
evalcond[4]=((((-1.0)*x3327))+((r12*x3326))+((r11*x3333))+(((-1.0)*x3329*x3331)));
evalcond[5]=((((-1.0)*x3327))+(((-1.0)*r02*x3331))+((r01*x3334))+(((-1.0)*x3328*x3332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3335=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3335;
j4eval[1]=IKsign(x3335);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3336=((1.0)*cj5);
IkReal x3337=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3336)));
j4eval[0]=x3337;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3336)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3337);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3338=cj5*cj5;
IkReal x3339=((1.0)*r20);
IkReal x3340=(r01*r21);
IkReal x3341=(r21*sj5);
IkReal x3342=(((cj5*r01*r20*sj5))+(((-1.0)*x3340))+(((-1.0)*r00*x3338*x3339))+(((-1.0)*r02*r22))+((cj5*r00*x3341))+((x3338*x3340)));
j4eval[0]=x3342;
j4eval[1]=((IKabs((((cj0*x3341))+(((-1.0)*cj0*cj5*x3339)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3342);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3343=cj5*cj5;
IkReal x3344=((1.0)*r20);
IkReal x3345=(r01*r21);
IkReal x3346=(r21*sj5);
CheckValue<IkReal> x3347=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x3343*x3344))+(((-1.0)*x3345))+(((-1.0)*r02*r22))+((x3343*x3345))+((cj5*r00*x3346)))),-1);
if(!x3347.valid){
continue;
}
CheckValue<IkReal> x3348 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3346))+(((-1.0)*cj0*cj5*x3344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3347.value)))+(x3348.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3349=IKcos(j4);
IkReal x3350=IKsin(j4);
IkReal x3351=(cj5*r00);
IkReal x3352=(cj5*r10);
IkReal x3353=(cj5*r20);
IkReal x3354=((1.0)*x3349);
IkReal x3355=((1.0)*x3350);
IkReal x3356=(sj5*x3349);
IkReal x3357=(sj5*x3350);
evalcond[0]=((((-1.0)*x3353*x3354))+((r21*x3356))+((r22*x3350)));
evalcond[1]=((((-1.0)*x3353*x3355))+((r21*x3357))+(((-1.0)*r22*x3354)));
evalcond[2]=(cj0+((r01*x3356))+(((-1.0)*x3351*x3354))+((r02*x3350)));
evalcond[3]=((((-1.0)*x3352*x3354))+((r12*x3350))+sj0+((r11*x3356)));
evalcond[4]=((((-1.0)*x3352*x3355))+cj0+((r11*x3357))+(((-1.0)*r12*x3354)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3354))+((r01*x3357))+(((-1.0)*x3351*x3355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3358=((1.0)*cj5);
CheckValue<IkReal> x3359 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3358)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3359.valid){
continue;
}
CheckValue<IkReal> x3360=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3358)))),-1);
if(!x3360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3359.value)+(((1.5707963267949)*(x3360.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3361=IKcos(j4);
IkReal x3362=IKsin(j4);
IkReal x3363=(cj5*r00);
IkReal x3364=(cj5*r10);
IkReal x3365=(cj5*r20);
IkReal x3366=((1.0)*x3361);
IkReal x3367=((1.0)*x3362);
IkReal x3368=(sj5*x3361);
IkReal x3369=(sj5*x3362);
evalcond[0]=(((r22*x3362))+((r21*x3368))+(((-1.0)*x3365*x3366)));
evalcond[1]=(((r21*x3369))+(((-1.0)*r22*x3366))+(((-1.0)*x3365*x3367)));
evalcond[2]=(((r02*x3362))+cj0+((r01*x3368))+(((-1.0)*x3363*x3366)));
evalcond[3]=(sj0+(((-1.0)*x3364*x3366))+((r12*x3362))+((r11*x3368)));
evalcond[4]=((((-1.0)*r12*x3366))+cj0+(((-1.0)*x3364*x3367))+((r11*x3369)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3369))+(((-1.0)*r02*x3366))+(((-1.0)*x3363*x3367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3370 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3370.valid){
continue;
}
CheckValue<IkReal> x3371=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3370.value)+(((1.5707963267949)*(x3371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3372=IKcos(j4);
IkReal x3373=IKsin(j4);
IkReal x3374=(cj5*r00);
IkReal x3375=(cj5*r10);
IkReal x3376=(cj5*r20);
IkReal x3377=((1.0)*x3372);
IkReal x3378=((1.0)*x3373);
IkReal x3379=(sj5*x3372);
IkReal x3380=(sj5*x3373);
evalcond[0]=(((r22*x3373))+(((-1.0)*x3376*x3377))+((r21*x3379)));
evalcond[1]=((((-1.0)*r22*x3377))+((r21*x3380))+(((-1.0)*x3376*x3378)));
evalcond[2]=(((r01*x3379))+(((-1.0)*x3374*x3377))+cj0+((r02*x3373)));
evalcond[3]=(((r12*x3373))+sj0+(((-1.0)*x3375*x3377))+((r11*x3379)));
evalcond[4]=(cj0+(((-1.0)*x3375*x3378))+(((-1.0)*r12*x3377))+((r11*x3380)));
evalcond[5]=(((r01*x3380))+(((-1.0)*x3374*x3378))+(((-1.0)*sj0))+(((-1.0)*r02*x3377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3381=IKcos(j0);
IkReal x3382=IKsin(j0);
evalcond[0]=((((-0.425)*x3381))+(((-1.0)*px))+(((-0.134)*x3382)));
evalcond[1]=((((-0.425)*x3382))+(((0.134)*x3381))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3383=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3383;
j4eval[1]=IKsign(x3383);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3384=((1.0)*cj5);
IkReal x3385=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3384)));
j4eval[0]=x3385;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3384)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3385);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3386=cj5*cj5;
IkReal x3387=((1.0)*r20);
IkReal x3388=(r01*r21);
IkReal x3389=(r21*sj5);
IkReal x3390=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3388))+(((-1.0)*r00*x3386*x3387))+((cj5*r00*x3389))+((x3386*x3388)));
j4eval[0]=x3390;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3387))+((cj0*x3389)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3390);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3391=cj5*cj5;
IkReal x3392=((1.0)*r20);
IkReal x3393=(r01*r21);
IkReal x3394=(r21*sj5);
CheckValue<IkReal> x3395 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3392))+((cj0*x3394)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3395.valid){
continue;
}
CheckValue<IkReal> x3396=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3391*x3393))+(((-1.0)*x3393))+((cj5*r00*x3394))+(((-1.0)*r00*x3391*x3392)))),-1);
if(!x3396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3395.value)+(((1.5707963267949)*(x3396.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3397=IKcos(j4);
IkReal x3398=IKsin(j4);
IkReal x3399=(cj5*r00);
IkReal x3400=(cj5*r10);
IkReal x3401=(cj5*r20);
IkReal x3402=((1.0)*x3397);
IkReal x3403=((1.0)*x3398);
IkReal x3404=(sj5*x3397);
IkReal x3405=(sj5*x3398);
evalcond[0]=((((-1.0)*x3401*x3402))+((r21*x3404))+((r22*x3398)));
evalcond[1]=((((-1.0)*x3401*x3403))+((r21*x3405))+(((-1.0)*r22*x3402)));
evalcond[2]=(cj0+(((-1.0)*x3399*x3402))+((r02*x3398))+((r01*x3404)));
evalcond[3]=((((-1.0)*x3400*x3402))+sj0+((r11*x3404))+((r12*x3398)));
evalcond[4]=((((-1.0)*x3400*x3403))+cj0+((r11*x3405))+(((-1.0)*r12*x3402)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3399*x3403))+(((-1.0)*r02*x3402))+((r01*x3405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3406=((1.0)*cj5);
CheckValue<IkReal> x3407=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3406)))),-1);
if(!x3407.valid){
continue;
}
CheckValue<IkReal> x3408 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3406)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3407.value)))+(x3408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3409=IKcos(j4);
IkReal x3410=IKsin(j4);
IkReal x3411=(cj5*r00);
IkReal x3412=(cj5*r10);
IkReal x3413=(cj5*r20);
IkReal x3414=((1.0)*x3409);
IkReal x3415=((1.0)*x3410);
IkReal x3416=(sj5*x3409);
IkReal x3417=(sj5*x3410);
evalcond[0]=(((r22*x3410))+((r21*x3416))+(((-1.0)*x3413*x3414)));
evalcond[1]=((((-1.0)*r22*x3414))+((r21*x3417))+(((-1.0)*x3413*x3415)));
evalcond[2]=(cj0+(((-1.0)*x3411*x3414))+((r02*x3410))+((r01*x3416)));
evalcond[3]=((((-1.0)*x3412*x3414))+sj0+((r12*x3410))+((r11*x3416)));
evalcond[4]=((((-1.0)*x3412*x3415))+cj0+((r11*x3417))+(((-1.0)*r12*x3414)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3411*x3415))+(((-1.0)*r02*x3414))+((r01*x3417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3418 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3418.valid){
continue;
}
CheckValue<IkReal> x3419=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3418.value)+(((1.5707963267949)*(x3419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3420=IKcos(j4);
IkReal x3421=IKsin(j4);
IkReal x3422=(cj5*r00);
IkReal x3423=(cj5*r10);
IkReal x3424=(cj5*r20);
IkReal x3425=((1.0)*x3420);
IkReal x3426=((1.0)*x3421);
IkReal x3427=(sj5*x3420);
IkReal x3428=(sj5*x3421);
evalcond[0]=((((-1.0)*x3424*x3425))+((r21*x3427))+((r22*x3421)));
evalcond[1]=((((-1.0)*x3424*x3426))+(((-1.0)*r22*x3425))+((r21*x3428)));
evalcond[2]=(cj0+(((-1.0)*x3422*x3425))+((r02*x3421))+((r01*x3427)));
evalcond[3]=(sj0+((r12*x3421))+(((-1.0)*x3423*x3425))+((r11*x3427)));
evalcond[4]=((((-1.0)*r12*x3425))+cj0+(((-1.0)*x3423*x3426))+((r11*x3428)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3422*x3426))+(((-1.0)*r02*x3425))+((r01*x3428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3429=IKcos(j0);
IkReal x3430=IKsin(j0);
evalcond[0]=((((-0.425)*x3429))+(((-1.0)*px))+(((-0.134)*x3430)));
evalcond[1]=((((-0.425)*x3430))+(((-1.0)*py))+(((0.134)*x3429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3431=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3431;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3431);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3432=((1.0)*cj5);
IkReal x3433=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3432)));
j4eval[0]=x3433;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3432)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3433);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3434=((1.0)*cj5);
IkReal x3435=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3434)));
j4eval[0]=x3435;
j4eval[1]=IKsign(x3435);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3434))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3436=((1.0)*cj5);
CheckValue<IkReal> x3437 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3436))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3437.valid){
continue;
}
CheckValue<IkReal> x3438=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3436)))),-1);
if(!x3438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3437.value)+(((1.5707963267949)*(x3438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3439=IKcos(j4);
IkReal x3440=IKsin(j4);
IkReal x3441=((1.0)*sj0);
IkReal x3442=(cj5*r00);
IkReal x3443=(cj5*r10);
IkReal x3444=(cj5*r20);
IkReal x3445=((1.0)*x3439);
IkReal x3446=((1.0)*x3440);
IkReal x3447=(sj5*x3439);
IkReal x3448=(sj5*x3440);
evalcond[0]=(((r21*x3447))+((r22*x3440))+(((-1.0)*x3444*x3445)));
evalcond[1]=(((r21*x3448))+(((-1.0)*x3444*x3446))+(((-1.0)*r22*x3445)));
evalcond[2]=(((r11*x3448))+cj0+(((-1.0)*r12*x3445))+(((-1.0)*x3443*x3446)));
evalcond[3]=(((r02*x3440))+(((-1.0)*x3442*x3445))+((r01*x3447))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3447))+((r12*x3440))+(((-1.0)*x3443*x3445))+(((-1.0)*x3441)));
evalcond[5]=((((-1.0)*r02*x3445))+(((-1.0)*x3442*x3446))+((r01*x3448))+(((-1.0)*x3441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3449=((1.0)*cj5);
CheckValue<IkReal> x3450=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3449)))),-1);
if(!x3450.valid){
continue;
}
CheckValue<IkReal> x3451 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3449))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3450.value)))+(x3451.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3452=IKcos(j4);
IkReal x3453=IKsin(j4);
IkReal x3454=((1.0)*sj0);
IkReal x3455=(cj5*r00);
IkReal x3456=(cj5*r10);
IkReal x3457=(cj5*r20);
IkReal x3458=((1.0)*x3452);
IkReal x3459=((1.0)*x3453);
IkReal x3460=(sj5*x3452);
IkReal x3461=(sj5*x3453);
evalcond[0]=((((-1.0)*x3457*x3458))+((r22*x3453))+((r21*x3460)));
evalcond[1]=((((-1.0)*x3457*x3459))+((r21*x3461))+(((-1.0)*r22*x3458)));
evalcond[2]=(cj0+((r11*x3461))+(((-1.0)*r12*x3458))+(((-1.0)*x3456*x3459)));
evalcond[3]=(((r01*x3460))+((r02*x3453))+(((-1.0)*x3455*x3458))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3454))+((r12*x3453))+((r11*x3460))+(((-1.0)*x3456*x3458)));
evalcond[5]=((((-1.0)*x3454))+((r01*x3461))+(((-1.0)*x3455*x3459))+(((-1.0)*r02*x3458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3462 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3462.valid){
continue;
}
CheckValue<IkReal> x3463=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3462.value)+(((1.5707963267949)*(x3463.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3464=IKcos(j4);
IkReal x3465=IKsin(j4);
IkReal x3466=((1.0)*sj0);
IkReal x3467=(cj5*r00);
IkReal x3468=(cj5*r10);
IkReal x3469=(cj5*r20);
IkReal x3470=((1.0)*x3464);
IkReal x3471=((1.0)*x3465);
IkReal x3472=(sj5*x3464);
IkReal x3473=(sj5*x3465);
evalcond[0]=((((-1.0)*x3469*x3470))+((r21*x3472))+((r22*x3465)));
evalcond[1]=((((-1.0)*x3469*x3471))+(((-1.0)*r22*x3470))+((r21*x3473)));
evalcond[2]=(cj0+(((-1.0)*r12*x3470))+((r11*x3473))+(((-1.0)*x3468*x3471)));
evalcond[3]=((((-1.0)*x3467*x3470))+((r01*x3472))+((r02*x3465))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3465))+((r11*x3472))+(((-1.0)*x3468*x3470))+(((-1.0)*x3466)));
evalcond[5]=((((-1.0)*x3467*x3471))+(((-1.0)*r02*x3470))+((r01*x3473))+(((-1.0)*x3466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3474=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3474;
j4eval[1]=IKsign(x3474);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3475=((1.0)*cj5);
IkReal x3476=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3475)));
j4eval[0]=x3476;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3475)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3476);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3477=cj5*cj5;
IkReal x3478=((1.0)*r20);
IkReal x3479=(r01*r21);
IkReal x3480=(r21*sj5);
IkReal x3481=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3477*x3478))+((x3477*x3479))+(((-1.0)*x3479))+((cj5*r00*x3480)));
j4eval[0]=x3481;
j4eval[1]=((IKabs((((cj0*x3480))+(((-1.0)*cj0*cj5*x3478)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3481);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3482=cj5*cj5;
IkReal x3483=((1.0)*r20);
IkReal x3484=(r01*r21);
IkReal x3485=(r21*sj5);
CheckValue<IkReal> x3486 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3485))+(((-1.0)*cj0*cj5*x3483)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3486.valid){
continue;
}
CheckValue<IkReal> x3487=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x3482*x3483))+(((-1.0)*r02*r22))+((x3482*x3484))+(((-1.0)*x3484))+((cj5*r00*x3485)))),-1);
if(!x3487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3486.value)+(((1.5707963267949)*(x3487.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3488=IKcos(j4);
IkReal x3489=IKsin(j4);
IkReal x3490=(cj5*r00);
IkReal x3491=(cj5*r10);
IkReal x3492=(cj5*r20);
IkReal x3493=((1.0)*x3488);
IkReal x3494=((1.0)*x3489);
IkReal x3495=(sj5*x3488);
IkReal x3496=(sj5*x3489);
evalcond[0]=((((-1.0)*x3492*x3493))+((r21*x3495))+((r22*x3489)));
evalcond[1]=((((-1.0)*r22*x3493))+(((-1.0)*x3492*x3494))+((r21*x3496)));
evalcond[2]=(((r01*x3495))+cj0+(((-1.0)*x3490*x3493))+((r02*x3489)));
evalcond[3]=(sj0+((r12*x3489))+((r11*x3495))+(((-1.0)*x3491*x3493)));
evalcond[4]=((((-1.0)*r12*x3493))+cj0+((r11*x3496))+(((-1.0)*x3491*x3494)));
evalcond[5]=((((-1.0)*r02*x3493))+(((-1.0)*sj0))+((r01*x3496))+(((-1.0)*x3490*x3494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3497=((1.0)*cj5);
CheckValue<IkReal> x3498 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3497)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3498.valid){
continue;
}
CheckValue<IkReal> x3499=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3497)))),-1);
if(!x3499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3498.value)+(((1.5707963267949)*(x3499.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3500=IKcos(j4);
IkReal x3501=IKsin(j4);
IkReal x3502=(cj5*r00);
IkReal x3503=(cj5*r10);
IkReal x3504=(cj5*r20);
IkReal x3505=((1.0)*x3500);
IkReal x3506=((1.0)*x3501);
IkReal x3507=(sj5*x3500);
IkReal x3508=(sj5*x3501);
evalcond[0]=(((r22*x3501))+(((-1.0)*x3504*x3505))+((r21*x3507)));
evalcond[1]=((((-1.0)*r22*x3505))+(((-1.0)*x3504*x3506))+((r21*x3508)));
evalcond[2]=(((r01*x3507))+cj0+(((-1.0)*x3502*x3505))+((r02*x3501)));
evalcond[3]=(sj0+((r12*x3501))+((r11*x3507))+(((-1.0)*x3503*x3505)));
evalcond[4]=((((-1.0)*r12*x3505))+cj0+((r11*x3508))+(((-1.0)*x3503*x3506)));
evalcond[5]=(((r01*x3508))+(((-1.0)*sj0))+(((-1.0)*x3502*x3506))+(((-1.0)*r02*x3505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3509 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3509.valid){
continue;
}
CheckValue<IkReal> x3510=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3509.value)+(((1.5707963267949)*(x3510.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3511=IKcos(j4);
IkReal x3512=IKsin(j4);
IkReal x3513=(cj5*r00);
IkReal x3514=(cj5*r10);
IkReal x3515=(cj5*r20);
IkReal x3516=((1.0)*x3511);
IkReal x3517=((1.0)*x3512);
IkReal x3518=(sj5*x3511);
IkReal x3519=(sj5*x3512);
evalcond[0]=((((-1.0)*x3515*x3516))+((r21*x3518))+((r22*x3512)));
evalcond[1]=((((-1.0)*x3515*x3517))+((r21*x3519))+(((-1.0)*r22*x3516)));
evalcond[2]=(cj0+(((-1.0)*x3513*x3516))+((r01*x3518))+((r02*x3512)));
evalcond[3]=((((-1.0)*x3514*x3516))+sj0+((r11*x3518))+((r12*x3512)));
evalcond[4]=((((-1.0)*x3514*x3517))+cj0+((r11*x3519))+(((-1.0)*r12*x3516)));
evalcond[5]=((((-1.0)*r02*x3516))+(((-1.0)*sj0))+(((-1.0)*x3513*x3517))+((r01*x3519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3520=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3520;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3520);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3521=((1.0)*cj5);
IkReal x3522=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3521)));
j4eval[0]=x3522;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3521))))));
j4eval[2]=IKsign(x3522);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3523=((1.0)*cj5);
IkReal x3524=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3523)));
j4eval[0]=x3524;
j4eval[1]=IKsign(x3524);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3523))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3525=((1.0)*cj5);
CheckValue<IkReal> x3526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3525)))),-1);
if(!x3526.valid){
continue;
}
CheckValue<IkReal> x3527 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3525)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3526.value)))+(x3527.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3528=IKcos(j4);
IkReal x3529=IKsin(j4);
IkReal x3530=((1.0)*sj0);
IkReal x3531=(cj5*r00);
IkReal x3532=(cj5*r10);
IkReal x3533=(cj5*r20);
IkReal x3534=((1.0)*x3528);
IkReal x3535=((1.0)*x3529);
IkReal x3536=(sj5*x3528);
IkReal x3537=(sj5*x3529);
evalcond[0]=(((r21*x3536))+(((-1.0)*x3533*x3534))+((r22*x3529)));
evalcond[1]=(((r21*x3537))+(((-1.0)*x3533*x3535))+(((-1.0)*r22*x3534)));
evalcond[2]=(((r11*x3537))+cj0+(((-1.0)*r12*x3534))+(((-1.0)*x3532*x3535)));
evalcond[3]=(((r02*x3529))+(((-1.0)*x3531*x3534))+((r01*x3536))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3536))+((r12*x3529))+(((-1.0)*x3530))+(((-1.0)*x3532*x3534)));
evalcond[5]=((((-1.0)*r02*x3534))+(((-1.0)*x3531*x3535))+((r01*x3537))+(((-1.0)*x3530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3538=((1.0)*cj5);
CheckValue<IkReal> x3539=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3538)))),-1);
if(!x3539.valid){
continue;
}
CheckValue<IkReal> x3540 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3538)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3539.value)))+(x3540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3541=IKcos(j4);
IkReal x3542=IKsin(j4);
IkReal x3543=((1.0)*sj0);
IkReal x3544=(cj5*r00);
IkReal x3545=(cj5*r10);
IkReal x3546=(cj5*r20);
IkReal x3547=((1.0)*x3541);
IkReal x3548=((1.0)*x3542);
IkReal x3549=(sj5*x3541);
IkReal x3550=(sj5*x3542);
evalcond[0]=(((r21*x3549))+(((-1.0)*x3546*x3547))+((r22*x3542)));
evalcond[1]=(((r21*x3550))+(((-1.0)*x3546*x3548))+(((-1.0)*r22*x3547)));
evalcond[2]=((((-1.0)*x3545*x3548))+cj0+(((-1.0)*r12*x3547))+((r11*x3550)));
evalcond[3]=(((r02*x3542))+((r01*x3549))+(((-1.0)*cj0))+(((-1.0)*x3544*x3547)));
evalcond[4]=((((-1.0)*x3545*x3547))+((r12*x3542))+((r11*x3549))+(((-1.0)*x3543)));
evalcond[5]=((((-1.0)*r02*x3547))+((r01*x3550))+(((-1.0)*x3543))+(((-1.0)*x3544*x3548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3551 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3551.valid){
continue;
}
CheckValue<IkReal> x3552=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3551.value)+(((1.5707963267949)*(x3552.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3553=IKcos(j4);
IkReal x3554=IKsin(j4);
IkReal x3555=((1.0)*sj0);
IkReal x3556=(cj5*r00);
IkReal x3557=(cj5*r10);
IkReal x3558=(cj5*r20);
IkReal x3559=((1.0)*x3553);
IkReal x3560=((1.0)*x3554);
IkReal x3561=(sj5*x3553);
IkReal x3562=(sj5*x3554);
evalcond[0]=((((-1.0)*x3558*x3559))+((r21*x3561))+((r22*x3554)));
evalcond[1]=(((r21*x3562))+(((-1.0)*r22*x3559))+(((-1.0)*x3558*x3560)));
evalcond[2]=(cj0+((r11*x3562))+(((-1.0)*r12*x3559))+(((-1.0)*x3557*x3560)));
evalcond[3]=(((r01*x3561))+((r02*x3554))+(((-1.0)*cj0))+(((-1.0)*x3556*x3559)));
evalcond[4]=((((-1.0)*x3557*x3559))+((r12*x3554))+((r11*x3561))+(((-1.0)*x3555)));
evalcond[5]=(((r01*x3562))+(((-1.0)*x3555))+(((-1.0)*x3556*x3560))+(((-1.0)*r02*x3559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3563=(sj1*sj2);
IkReal x3564=(r00*sj5);
IkReal x3565=(cj5*r01);
IkReal x3566=((212.5)*cj1);
IkReal x3567=(cj1*cj2);
IkReal x3568=((500.0)*px);
IkReal x3569=((246.0)*x3567);
CheckValue<IkReal> x3570=IKPowWithIntegerCheck(((((-67.0)*x3567))+(((67.0)*x3563))),-1);
if(!x3570.valid){
continue;
}
CheckValue<IkReal> x3571=IKPowWithIntegerCheck((x3563+(((-1.0)*x3567))),-1);
if(!x3571.valid){
continue;
}
if( IKabs(((x3570.value)*((((x3565*x3566))+((x3565*x3569))+(((-1.0)*x3563*x3568))+((x3564*x3569))+((x3564*x3566))+((x3567*x3568))+(((-246.0)*x3563*x3564))+(((-246.0)*x3563*x3565)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3571.value)*((x3564+x3565)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3570.value)*((((x3565*x3566))+((x3565*x3569))+(((-1.0)*x3563*x3568))+((x3564*x3569))+((x3564*x3566))+((x3567*x3568))+(((-246.0)*x3563*x3564))+(((-246.0)*x3563*x3565))))))+IKsqr(((x3571.value)*((x3564+x3565))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3570.value)*((((x3565*x3566))+((x3565*x3569))+(((-1.0)*x3563*x3568))+((x3564*x3569))+((x3564*x3566))+((x3567*x3568))+(((-246.0)*x3563*x3564))+(((-246.0)*x3563*x3565))))), ((x3571.value)*((x3564+x3565))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3572=IKcos(j0);
IkReal x3573=IKsin(j0);
IkReal x3574=((0.1)*sj5);
IkReal x3575=(cj5*r11);
IkReal x3576=(sj1*sj2);
IkReal x3577=(cj1*cj2);
IkReal x3578=((1.0)*sj5);
IkReal x3579=(cj5*r01);
IkReal x3580=((0.425)*cj1);
IkReal x3581=((0.392)*x3573);
IkReal x3582=((0.392)*x3572);
evalcond[0]=((((-1.0)*r00*x3578))+((x3572*x3576))+(((-1.0)*x3579))+(((-1.0)*x3572*x3577)));
evalcond[1]=((((-1.0)*r10*x3578))+((x3573*x3576))+(((-1.0)*x3573*x3577))+(((-1.0)*x3575)));
evalcond[2]=((((-1.0)*x3576*x3582))+(((-0.134)*x3573))+(((-0.1)*x3579))+(((-1.0)*px))+(((-1.0)*r00*x3574))+((x3577*x3582))+((x3572*x3580)));
evalcond[3]=((((-1.0)*x3576*x3581))+(((-1.0)*r10*x3574))+((x3573*x3580))+(((0.134)*x3572))+(((-0.1)*x3575))+(((-1.0)*py))+((x3577*x3581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3583=((1.0)*cj5);
IkReal x3584=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3583)));
j4eval[0]=x3584;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3583)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3584);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3585=((1.0)*cj5);
IkReal x3586=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3585)));
j4eval[0]=x3586;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x3585))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3586);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3587=((1.0)*sj0);
IkReal x3588=((1.0)*cj0);
IkReal x3589=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3589;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x3587))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3588)))))+(IKabs(((((-1.0)*r02*x3588))+(((-1.0)*r12*x3587))))));
j4eval[2]=IKsign(x3589);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3590=((-1.0)*r20);
IkReal x3592 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3592)==0){
continue;
}
IkReal x3591=pow(x3592,-0.5);
CheckValue<IkReal> x3593 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3590),IKFAST_ATAN2_MAGTHRESH);
if(!x3593.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3593.value));
IkReal gconst97=(r21*x3591);
IkReal gconst98=(x3590*x3591);
CheckValue<IkReal> x3594 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3594.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3594.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3595=((-1.0)*r20);
IkReal x3596=x3591;
CheckValue<IkReal> x3598 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3595),IKFAST_ATAN2_MAGTHRESH);
if(!x3598.valid){
continue;
}
IkReal x3597=((-1.0)*(x3598.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3597;
IkReal gconst96=x3597;
IkReal gconst97=(r21*x3596);
IkReal gconst98=(x3595*x3596);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3599=((-1.0)*r20);
IkReal x3600=x3591;
CheckValue<IkReal> x3602 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3599),IKFAST_ATAN2_MAGTHRESH);
if(!x3602.valid){
continue;
}
IkReal x3601=((-1.0)*(x3602.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3601;
IkReal gconst96=x3601;
IkReal gconst97=(r21*x3600);
IkReal gconst98=(x3599*x3600);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3603=((-1.0)*r20);
IkReal x3604=x3591;
CheckValue<IkReal> x3606 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3603),IKFAST_ATAN2_MAGTHRESH);
if(!x3606.valid){
continue;
}
IkReal x3605=((-1.0)*(x3606.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3605;
IkReal gconst96=x3605;
IkReal gconst97=(r21*x3604);
IkReal gconst98=(x3603*x3604);
IkReal x3607=((1.0)*(r22*r22));
CheckValue<IkReal> x3611=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3607))),-1);
if(!x3611.valid){
continue;
}
IkReal x3608=x3611.value;
IkReal x3609=((1.0)*x3608);
IkReal x3610=((((-2.0)*x3608*(r20*r20)*(r21*r21)))+(((-1.0)*x3607))+(((-1.0)*x3609*(r20*r20*r20*r20)))+(((-1.0)*x3609*(r21*r21*r21*r21))));
j4eval[0]=x3610;
j4eval[1]=IKsign(x3610);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3612=(cj1*cj2);
IkReal x3613=(gconst98*r20);
IkReal x3614=(sj1*sj2);
IkReal x3615=(gconst97*r21);
CheckValue<IkReal> x3616=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3615*x3615)))+(((2.0)*x3613*x3615))+(((-1.0)*(x3613*x3613)))+(((-1.0)*(r22*r22))))),-1);
if(!x3616.valid){
continue;
}
CheckValue<IkReal> x3617 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3612))+((r22*x3614)))),IkReal((((x3612*x3613))+(((-1.0)*x3613*x3614))+(((-1.0)*x3612*x3615))+((x3614*x3615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3616.value)))+(x3617.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3618=IKsin(j4);
IkReal x3619=IKcos(j4);
IkReal x3620=(gconst98*r10);
IkReal x3621=(gconst97*r21);
IkReal x3622=(gconst98*r20);
IkReal x3623=((1.0)*cj2);
IkReal x3624=((1.0)*sj0);
IkReal x3625=(gconst98*r00);
IkReal x3626=(cj1*sj2);
IkReal x3627=((1.0)*x3619);
IkReal x3628=((1.0)*x3618);
IkReal x3629=(gconst97*x3618);
IkReal x3630=(gconst97*x3619);
evalcond[0]=(((x3618*x3621))+(((-1.0)*x3622*x3628))+(((-1.0)*r22*x3627)));
evalcond[1]=(cj0+(((-1.0)*r12*x3627))+((r11*x3629))+(((-1.0)*x3620*x3628)));
evalcond[2]=((((-1.0)*x3624))+(((-1.0)*x3625*x3628))+((r01*x3629))+(((-1.0)*r02*x3627)));
evalcond[3]=(((x3619*x3621))+((r22*x3618))+(((-1.0)*x3622*x3627))+((sj1*sj2))+(((-1.0)*cj1*x3623)));
evalcond[4]=(((r02*x3618))+(((-1.0)*x3625*x3627))+(((-1.0)*cj0*x3626))+((r01*x3630))+(((-1.0)*cj0*sj1*x3623)));
evalcond[5]=(((r11*x3630))+(((-1.0)*x3624*x3626))+(((-1.0)*sj0*sj1*x3623))+(((-1.0)*x3620*x3627))+((r12*x3618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3631=((1.0)*gconst98);
CheckValue<IkReal> x3632=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3631))+(((-1.0)*gconst97*r10)))),-1);
if(!x3632.valid){
continue;
}
CheckValue<IkReal> x3633 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3631)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3632.value)))+(x3633.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3634=IKsin(j4);
IkReal x3635=IKcos(j4);
IkReal x3636=(gconst98*r10);
IkReal x3637=(gconst97*r21);
IkReal x3638=(gconst98*r20);
IkReal x3639=((1.0)*cj2);
IkReal x3640=((1.0)*sj0);
IkReal x3641=(gconst98*r00);
IkReal x3642=(cj1*sj2);
IkReal x3643=((1.0)*x3635);
IkReal x3644=((1.0)*x3634);
IkReal x3645=(gconst97*x3634);
IkReal x3646=(gconst97*x3635);
evalcond[0]=(((x3634*x3637))+(((-1.0)*r22*x3643))+(((-1.0)*x3638*x3644)));
evalcond[1]=(((r11*x3645))+cj0+(((-1.0)*r12*x3643))+(((-1.0)*x3636*x3644)));
evalcond[2]=(((r01*x3645))+(((-1.0)*r02*x3643))+(((-1.0)*x3641*x3644))+(((-1.0)*x3640)));
evalcond[3]=((((-1.0)*cj1*x3639))+((r22*x3634))+((sj1*sj2))+((x3635*x3637))+(((-1.0)*x3638*x3643)));
evalcond[4]=(((r02*x3634))+((r01*x3646))+(((-1.0)*cj0*x3642))+(((-1.0)*cj0*sj1*x3639))+(((-1.0)*x3641*x3643)));
evalcond[5]=(((r12*x3634))+((r11*x3646))+(((-1.0)*x3640*x3642))+(((-1.0)*x3636*x3643))+(((-1.0)*sj0*sj1*x3639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3647=((1.0)*gconst98);
CheckValue<IkReal> x3648 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x3647)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3648.valid){
continue;
}
CheckValue<IkReal> x3649=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst97*r00))+(((-1.0)*r01*x3647)))),-1);
if(!x3649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3648.value)+(((1.5707963267949)*(x3649.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3650=IKsin(j4);
IkReal x3651=IKcos(j4);
IkReal x3652=(gconst98*r10);
IkReal x3653=(gconst97*r21);
IkReal x3654=(gconst98*r20);
IkReal x3655=((1.0)*cj2);
IkReal x3656=((1.0)*sj0);
IkReal x3657=(gconst98*r00);
IkReal x3658=(cj1*sj2);
IkReal x3659=((1.0)*x3651);
IkReal x3660=((1.0)*x3650);
IkReal x3661=(gconst97*x3650);
IkReal x3662=(gconst97*x3651);
evalcond[0]=((((-1.0)*x3654*x3660))+((x3650*x3653))+(((-1.0)*r22*x3659)));
evalcond[1]=(cj0+(((-1.0)*x3652*x3660))+((r11*x3661))+(((-1.0)*r12*x3659)));
evalcond[2]=(((r01*x3661))+(((-1.0)*r02*x3659))+(((-1.0)*x3657*x3660))+(((-1.0)*x3656)));
evalcond[3]=(((sj1*sj2))+((x3651*x3653))+(((-1.0)*x3654*x3659))+(((-1.0)*cj1*x3655))+((r22*x3650)));
evalcond[4]=((((-1.0)*cj0*x3658))+(((-1.0)*x3657*x3659))+((r01*x3662))+((r02*x3650))+(((-1.0)*cj0*sj1*x3655)));
evalcond[5]=((((-1.0)*sj0*sj1*x3655))+((r12*x3650))+((r11*x3662))+(((-1.0)*x3656*x3658))+(((-1.0)*x3652*x3659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3663=((-1.0)*r21);
IkReal x3665 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3665)==0){
continue;
}
IkReal x3664=pow(x3665,-0.5);
CheckValue<IkReal> x3666 = IKatan2WithCheck(IkReal(x3663),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3666.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3666.value))));
IkReal gconst100=(x3663*x3664);
IkReal gconst101=((1.0)*r20*x3664);
CheckValue<IkReal> x3667 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3667.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3667.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3668=((-1.0)*r21);
CheckValue<IkReal> x3671 = IKatan2WithCheck(IkReal(x3668),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3671.valid){
continue;
}
IkReal x3669=((1.0)*(x3671.value));
IkReal x3670=x3664;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3669)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3669)));
IkReal gconst100=(x3668*x3670);
IkReal gconst101=((1.0)*r20*x3670);
IkReal x3672=r22*r22;
IkReal x3673=((1.0)*x3672);
CheckValue<IkReal> x3677=IKPowWithIntegerCheck(((-1.0)+x3672),-1);
if(!x3677.valid){
continue;
}
IkReal x3674=x3677.value;
if((((1.0)+(((-1.0)*x3673)))) < -0.00001)
continue;
IkReal x3675=IKsqrt(((1.0)+(((-1.0)*x3673))));
IkReal x3676=(cj0*x3674*x3675);
j4eval[0]=((IKabs(((((-1.0)*x3673*x3676))+x3676)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3678=((-1.0)*r21);
CheckValue<IkReal> x3681 = IKatan2WithCheck(IkReal(x3678),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3681.valid){
continue;
}
IkReal x3679=((1.0)*(x3681.value));
IkReal x3680=x3664;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3679)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3679)));
IkReal gconst100=(x3678*x3680);
IkReal gconst101=((1.0)*r20*x3680);
IkReal x3682=r22*r22;
IkReal x3683=((1.0)*x3682);
CheckValue<IkReal> x3687=IKPowWithIntegerCheck(((-1.0)+x3682),-1);
if(!x3687.valid){
continue;
}
IkReal x3684=x3687.value;
if((((1.0)+(((-1.0)*x3683)))) < -0.00001)
continue;
IkReal x3685=IKsqrt(((1.0)+(((-1.0)*x3683))));
IkReal x3686=(sj0*x3684*x3685);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3683*x3686))+x3686))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3688=((-1.0)*r21);
CheckValue<IkReal> x3691 = IKatan2WithCheck(IkReal(x3688),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3691.valid){
continue;
}
IkReal x3689=((1.0)*(x3691.value));
IkReal x3690=x3664;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3689)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3689)));
IkReal gconst100=(x3688*x3690);
IkReal gconst101=((1.0)*r20*x3690);
IkReal x3692=r22*r22;
IkReal x3693=(r12*sj0);
IkReal x3694=(cj0*r02);
CheckValue<IkReal> x3698=IKPowWithIntegerCheck(((-1.0)+x3692),-1);
if(!x3698.valid){
continue;
}
IkReal x3695=x3698.value;
if((((1.0)+(((-1.0)*x3692)))) < -0.00001)
continue;
IkReal x3696=IKsqrt(((1.0)+(((-1.0)*x3692))));
IkReal x3697=(r22*x3695*x3696);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3694*x3697))+((x3693*x3697)))))+(IKabs(((((-1.0)*x3693))+(((-1.0)*x3694))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3699=((1.0)*sj0);
IkReal x3700=((1.0)*gconst100);
CheckValue<IkReal> x3701 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3699))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst100*r11*x3699))+(((-1.0)*cj0*r01*x3700))+((gconst101*r10*sj0))+((cj0*gconst101*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3701.valid){
continue;
}
CheckValue<IkReal> x3702=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3700))+(((-1.0)*gconst101*r21)))),-1);
if(!x3702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3701.value)+(((1.5707963267949)*(x3702.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3703=IKsin(j4);
IkReal x3704=IKcos(j4);
IkReal x3705=(gconst101*r20);
IkReal x3706=(gconst101*r10);
IkReal x3707=((1.0)*cj2);
IkReal x3708=(gconst101*r00);
IkReal x3709=((1.0)*sj0);
IkReal x3710=(cj1*sj2);
IkReal x3711=((1.0)*x3704);
IkReal x3712=((1.0)*x3703);
IkReal x3713=(gconst100*x3703);
IkReal x3714=(gconst100*x3704);
evalcond[0]=((((-1.0)*x3705*x3712))+((r21*x3713))+(((-1.0)*r22*x3711)));
evalcond[1]=(((r11*x3713))+cj0+(((-1.0)*r12*x3711))+(((-1.0)*x3706*x3712)));
evalcond[2]=((((-1.0)*r02*x3711))+(((-1.0)*x3709))+((r01*x3713))+(((-1.0)*x3708*x3712)));
evalcond[3]=((((-1.0)*cj1*x3707))+(((-1.0)*x3705*x3711))+((sj1*sj2))+((r21*x3714))+((r22*x3703)));
evalcond[4]=((((-1.0)*cj0*sj1*x3707))+(((-1.0)*cj0*x3710))+((r01*x3714))+(((-1.0)*x3708*x3711))+((r02*x3703)));
evalcond[5]=(((r11*x3714))+((r12*x3703))+(((-1.0)*sj0*sj1*x3707))+(((-1.0)*x3706*x3711))+(((-1.0)*x3709*x3710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3715=((1.0)*gconst101);
CheckValue<IkReal> x3716 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3715))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3716.valid){
continue;
}
CheckValue<IkReal> x3717=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3715)))),-1);
if(!x3717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3716.value)+(((1.5707963267949)*(x3717.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3718=IKsin(j4);
IkReal x3719=IKcos(j4);
IkReal x3720=(gconst101*r20);
IkReal x3721=(gconst101*r10);
IkReal x3722=((1.0)*cj2);
IkReal x3723=(gconst101*r00);
IkReal x3724=((1.0)*sj0);
IkReal x3725=(cj1*sj2);
IkReal x3726=((1.0)*x3719);
IkReal x3727=((1.0)*x3718);
IkReal x3728=(gconst100*x3718);
IkReal x3729=(gconst100*x3719);
evalcond[0]=((((-1.0)*r22*x3726))+(((-1.0)*x3720*x3727))+((r21*x3728)));
evalcond[1]=(cj0+(((-1.0)*r12*x3726))+((r11*x3728))+(((-1.0)*x3721*x3727)));
evalcond[2]=((((-1.0)*x3724))+((r01*x3728))+(((-1.0)*x3723*x3727))+(((-1.0)*r02*x3726)));
evalcond[3]=((((-1.0)*cj1*x3722))+((sj1*sj2))+((r22*x3718))+(((-1.0)*x3720*x3726))+((r21*x3729)));
evalcond[4]=((((-1.0)*cj0*x3725))+((r01*x3729))+(((-1.0)*cj0*sj1*x3722))+(((-1.0)*x3723*x3726))+((r02*x3718)));
evalcond[5]=((((-1.0)*sj0*sj1*x3722))+((r12*x3718))+(((-1.0)*x3724*x3725))+((r11*x3729))+(((-1.0)*x3721*x3726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3730=((1.0)*gconst101);
CheckValue<IkReal> x3731 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3730)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3731.valid){
continue;
}
CheckValue<IkReal> x3732=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3730)))),-1);
if(!x3732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3731.value)+(((1.5707963267949)*(x3732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3733=IKsin(j4);
IkReal x3734=IKcos(j4);
IkReal x3735=(gconst101*r20);
IkReal x3736=(gconst101*r10);
IkReal x3737=((1.0)*cj2);
IkReal x3738=(gconst101*r00);
IkReal x3739=((1.0)*sj0);
IkReal x3740=(cj1*sj2);
IkReal x3741=((1.0)*x3734);
IkReal x3742=((1.0)*x3733);
IkReal x3743=(gconst100*x3733);
IkReal x3744=(gconst100*x3734);
evalcond[0]=((((-1.0)*r22*x3741))+((r21*x3743))+(((-1.0)*x3735*x3742)));
evalcond[1]=(cj0+(((-1.0)*r12*x3741))+((r11*x3743))+(((-1.0)*x3736*x3742)));
evalcond[2]=(((r01*x3743))+(((-1.0)*x3739))+(((-1.0)*x3738*x3742))+(((-1.0)*r02*x3741)));
evalcond[3]=((((-1.0)*cj1*x3737))+((sj1*sj2))+((r22*x3733))+((r21*x3744))+(((-1.0)*x3735*x3741)));
evalcond[4]=(((r01*x3744))+(((-1.0)*cj0*x3740))+((r02*x3733))+(((-1.0)*cj0*sj1*x3737))+(((-1.0)*x3738*x3741)));
evalcond[5]=((((-1.0)*sj0*sj1*x3737))+((r12*x3733))+((r11*x3744))+(((-1.0)*x3736*x3741))+(((-1.0)*x3739*x3740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3745=((-1.0)*r10);
IkReal x3747 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3747)==0){
continue;
}
IkReal x3746=pow(x3747,-0.5);
CheckValue<IkReal> x3748 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3745),IKFAST_ATAN2_MAGTHRESH);
if(!x3748.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3748.value));
IkReal gconst103=(r11*x3746);
IkReal gconst104=(x3745*x3746);
CheckValue<IkReal> x3749 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3749.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3749.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3750=((-1.0)*r10);
IkReal x3751=x3746;
CheckValue<IkReal> x3753 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3750),IKFAST_ATAN2_MAGTHRESH);
if(!x3753.valid){
continue;
}
IkReal x3752=((-1.0)*(x3753.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3752;
IkReal gconst102=x3752;
IkReal gconst103=(r11*x3751);
IkReal gconst104=(x3750*x3751);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3754=((1.0)*sj0);
IkReal x3755=((1.0)*gconst103);
CheckValue<IkReal> x3756=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3755))+(((-1.0)*gconst104*r21)))),-1);
if(!x3756.valid){
continue;
}
CheckValue<IkReal> x3757 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3754))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst103*r11*x3754))+(((-1.0)*cj0*r01*x3755))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3756.value)))+(x3757.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3758=IKsin(j4);
IkReal x3759=IKcos(j4);
IkReal x3760=(gconst103*r11);
IkReal x3761=((1.0)*cj2);
IkReal x3762=((1.0)*sj0);
IkReal x3763=(cj1*sj2);
IkReal x3764=((1.0)*x3759);
IkReal x3765=(gconst103*x3759);
IkReal x3766=(gconst103*x3758);
IkReal x3767=((1.0)*gconst104*x3758);
evalcond[0]=((((-1.0)*r20*x3767))+((r21*x3766))+(((-1.0)*r22*x3764)));
evalcond[1]=((((-1.0)*r10*x3767))+cj0+((x3758*x3760))+(((-1.0)*r12*x3764)));
evalcond[2]=((((-1.0)*r00*x3767))+(((-1.0)*r02*x3764))+(((-1.0)*x3762))+((r01*x3766)));
evalcond[3]=(((r21*x3765))+((sj1*sj2))+((r22*x3758))+(((-1.0)*gconst104*r20*x3764))+(((-1.0)*cj1*x3761)));
evalcond[4]=((((-1.0)*cj0*sj1*x3761))+((r02*x3758))+(((-1.0)*cj0*x3763))+(((-1.0)*gconst104*r00*x3764))+((r01*x3765)));
evalcond[5]=((((-1.0)*x3762*x3763))+(((-1.0)*gconst104*r10*x3764))+((r12*x3758))+((x3759*x3760))+(((-1.0)*sj0*sj1*x3761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3768=((1.0)*gconst104);
CheckValue<IkReal> x3769=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3768)))),-1);
if(!x3769.valid){
continue;
}
CheckValue<IkReal> x3770 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3768))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3769.value)))+(x3770.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3771=IKsin(j4);
IkReal x3772=IKcos(j4);
IkReal x3773=(gconst103*r11);
IkReal x3774=((1.0)*cj2);
IkReal x3775=((1.0)*sj0);
IkReal x3776=(cj1*sj2);
IkReal x3777=((1.0)*x3772);
IkReal x3778=(gconst103*x3772);
IkReal x3779=(gconst103*x3771);
IkReal x3780=((1.0)*gconst104*x3771);
evalcond[0]=(((r21*x3779))+(((-1.0)*r22*x3777))+(((-1.0)*r20*x3780)));
evalcond[1]=(cj0+((x3771*x3773))+(((-1.0)*r10*x3780))+(((-1.0)*r12*x3777)));
evalcond[2]=((((-1.0)*r00*x3780))+(((-1.0)*r02*x3777))+(((-1.0)*x3775))+((r01*x3779)));
evalcond[3]=(((r21*x3778))+((r22*x3771))+((sj1*sj2))+(((-1.0)*gconst104*r20*x3777))+(((-1.0)*cj1*x3774)));
evalcond[4]=(((r02*x3771))+(((-1.0)*cj0*sj1*x3774))+(((-1.0)*cj0*x3776))+(((-1.0)*gconst104*r00*x3777))+((r01*x3778)));
evalcond[5]=((((-1.0)*gconst104*r10*x3777))+(((-1.0)*x3775*x3776))+((x3772*x3773))+((r12*x3771))+(((-1.0)*sj0*sj1*x3774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3781=((-1.0)*r11);
IkReal x3783 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3783)==0){
continue;
}
IkReal x3782=pow(x3783,-0.5);
CheckValue<IkReal> x3784 = IKatan2WithCheck(IkReal(x3781),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3784.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3784.value))));
IkReal gconst106=(x3781*x3782);
IkReal gconst107=((1.0)*r10*x3782);
CheckValue<IkReal> x3785 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3785.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3785.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3786=((-1.0)*r11);
CheckValue<IkReal> x3789 = IKatan2WithCheck(IkReal(x3786),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3789.valid){
continue;
}
IkReal x3787=((1.0)*(x3789.value));
IkReal x3788=x3782;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3787)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3787)));
IkReal gconst106=(x3786*x3788);
IkReal gconst107=((1.0)*r10*x3788);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3790=((-1.0)*r11);
CheckValue<IkReal> x3793 = IKatan2WithCheck(IkReal(x3790),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3793.valid){
continue;
}
IkReal x3791=((1.0)*(x3793.value));
IkReal x3792=x3782;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3791)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3791)));
IkReal gconst106=(x3790*x3792);
IkReal gconst107=((1.0)*r10*x3792);
IkReal x3794=r12*r12;
IkReal x3795=((1.0)*sj0);
IkReal x3796=(cj0*r02);
IkReal x3797=x3782;
j4eval[0]=((IKabs(((((-1.0)*r12*x3795))+(((-1.0)*x3796)))))+(IKabs((((r12*x3796*x3797))+(((-1.0)*x3795*x3797))+((sj0*x3794*x3797))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3798=((-1.0)*r11);
CheckValue<IkReal> x3801 = IKatan2WithCheck(IkReal(x3798),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3801.valid){
continue;
}
IkReal x3799=((1.0)*(x3801.value));
IkReal x3800=x3782;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3799)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3799)));
IkReal gconst106=(x3798*x3800);
IkReal gconst107=((1.0)*r10*x3800);
IkReal x3802=r12*r12;
IkReal x3803=((1.0)+(((-1.0)*x3802)));
IkReal x3804=(r22*sj1*sj2);
IkReal x3805=(cj1*cj2*r22);
CheckValue<IkReal> x3812=IKPowWithIntegerCheck(x3803,-1);
if(!x3812.valid){
continue;
}
IkReal x3806=x3812.value;
CheckValue<IkReal> x3813=IKPowWithIntegerCheck(((-1.0)+x3802),-1);
if(!x3813.valid){
continue;
}
IkReal x3807=x3813.value;
IkReal x3808=((1.0)*x3806);
if((x3803) < -0.00001)
continue;
IkReal x3809=IKsqrt(x3803);
IkReal x3810=(r12*x3807*x3809);
IkReal x3811=((((-2.0)*r10*r11*r20*r21*x3806))+(((-1.0)*x3808*(r10*r10)*(r20*r20)))+(((-1.0)*x3808*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22))));
j4eval[0]=x3811;
j4eval[1]=((IKabs(((((-1.0)*x3805))+x3804)))+(IKabs((((x3805*x3810))+(((-1.0)*x3804*x3810))))));
j4eval[2]=IKsign(x3811);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3814=(sj1*sj2);
IkReal x3815=(gconst106*r21);
IkReal x3816=(gconst107*r20);
IkReal x3817=(cj1*cj2);
CheckValue<IkReal> x3818=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3816*x3816)))+(((-1.0)*(r22*r22)))+(((2.0)*x3815*x3816))+(((-1.0)*(x3815*x3815))))),-1);
if(!x3818.valid){
continue;
}
CheckValue<IkReal> x3819 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3817))+((r22*x3814)))),IkReal(((((-1.0)*x3814*x3816))+((x3816*x3817))+((x3814*x3815))+(((-1.0)*x3815*x3817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3818.value)))+(x3819.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3820=IKsin(j4);
IkReal x3821=IKcos(j4);
IkReal x3822=(gconst107*r10);
IkReal x3823=(gconst107*r00);
IkReal x3824=((1.0)*cj2);
IkReal x3825=(gconst107*r20);
IkReal x3826=((1.0)*sj0);
IkReal x3827=(cj1*sj2);
IkReal x3828=((1.0)*x3821);
IkReal x3829=(gconst106*x3821);
IkReal x3830=(gconst106*x3820);
IkReal x3831=((1.0)*x3820);
evalcond[0]=((((-1.0)*r22*x3828))+((r21*x3830))+(((-1.0)*x3825*x3831)));
evalcond[1]=((((-1.0)*r12*x3828))+cj0+((r11*x3830))+(((-1.0)*x3822*x3831)));
evalcond[2]=((((-1.0)*r02*x3828))+((r01*x3830))+(((-1.0)*x3826))+(((-1.0)*x3823*x3831)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3824))+(((-1.0)*x3825*x3828))+((r22*x3820))+((r21*x3829)));
evalcond[4]=((((-1.0)*cj0*x3827))+(((-1.0)*x3823*x3828))+((r02*x3820))+(((-1.0)*cj0*sj1*x3824))+((r01*x3829)));
evalcond[5]=(((r12*x3820))+(((-1.0)*sj0*sj1*x3824))+((r11*x3829))+(((-1.0)*x3826*x3827))+(((-1.0)*x3822*x3828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3832=((1.0)*sj0);
IkReal x3833=((1.0)*gconst106);
CheckValue<IkReal> x3834 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3832)))),IkReal(((((-1.0)*cj0*r01*x3833))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x3832))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3834.valid){
continue;
}
CheckValue<IkReal> x3835=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3833))+(((-1.0)*gconst107*r21)))),-1);
if(!x3835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3834.value)+(((1.5707963267949)*(x3835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3836=IKsin(j4);
IkReal x3837=IKcos(j4);
IkReal x3838=(gconst107*r10);
IkReal x3839=(gconst107*r00);
IkReal x3840=((1.0)*cj2);
IkReal x3841=(gconst107*r20);
IkReal x3842=((1.0)*sj0);
IkReal x3843=(cj1*sj2);
IkReal x3844=((1.0)*x3837);
IkReal x3845=(gconst106*x3837);
IkReal x3846=(gconst106*x3836);
IkReal x3847=((1.0)*x3836);
evalcond[0]=(((r21*x3846))+(((-1.0)*x3841*x3847))+(((-1.0)*r22*x3844)));
evalcond[1]=(cj0+(((-1.0)*r12*x3844))+(((-1.0)*x3838*x3847))+((r11*x3846)));
evalcond[2]=((((-1.0)*r02*x3844))+(((-1.0)*x3839*x3847))+((r01*x3846))+(((-1.0)*x3842)));
evalcond[3]=(((r21*x3845))+((sj1*sj2))+(((-1.0)*x3841*x3844))+(((-1.0)*cj1*x3840))+((r22*x3836)));
evalcond[4]=(((r02*x3836))+(((-1.0)*cj0*sj1*x3840))+(((-1.0)*x3839*x3844))+((r01*x3845))+(((-1.0)*cj0*x3843)));
evalcond[5]=((((-1.0)*x3842*x3843))+((r12*x3836))+(((-1.0)*x3838*x3844))+(((-1.0)*sj0*sj1*x3840))+((r11*x3845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3848=((1.0)*gconst107);
CheckValue<IkReal> x3849 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3848))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3849.valid){
continue;
}
CheckValue<IkReal> x3850=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3848)))),-1);
if(!x3850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3849.value)+(((1.5707963267949)*(x3850.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3851=IKsin(j4);
IkReal x3852=IKcos(j4);
IkReal x3853=(gconst107*r10);
IkReal x3854=(gconst107*r00);
IkReal x3855=((1.0)*cj2);
IkReal x3856=(gconst107*r20);
IkReal x3857=((1.0)*sj0);
IkReal x3858=(cj1*sj2);
IkReal x3859=((1.0)*x3852);
IkReal x3860=(gconst106*x3852);
IkReal x3861=(gconst106*x3851);
IkReal x3862=((1.0)*x3851);
evalcond[0]=(((r21*x3861))+(((-1.0)*x3856*x3862))+(((-1.0)*r22*x3859)));
evalcond[1]=(((r11*x3861))+cj0+(((-1.0)*r12*x3859))+(((-1.0)*x3853*x3862)));
evalcond[2]=((((-1.0)*x3857))+(((-1.0)*x3854*x3862))+((r01*x3861))+(((-1.0)*r02*x3859)));
evalcond[3]=(((r21*x3860))+((sj1*sj2))+(((-1.0)*x3856*x3859))+(((-1.0)*cj1*x3855))+((r22*x3851)));
evalcond[4]=(((r02*x3851))+(((-1.0)*x3854*x3859))+(((-1.0)*cj0*sj1*x3855))+((r01*x3860))+(((-1.0)*cj0*x3858)));
evalcond[5]=(((r11*x3860))+(((-1.0)*x3857*x3858))+(((-1.0)*x3853*x3859))+(((-1.0)*sj0*sj1*x3855))+((r12*x3851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3863=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3863;
j4eval[1]=IKsign(x3863);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3864=((1.0)*cj5);
IkReal x3865=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3864)));
j4eval[0]=x3865;
j4eval[1]=((IKabs(((((-1.0)*r20*x3864))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3865);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3866=(sj1*sj2);
IkReal x3867=(cj5*r10);
IkReal x3868=(r11*sj5);
IkReal x3869=(cj1*cj2);
IkReal x3870=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3870;
j4eval[1]=((IKabs(((((-1.0)*r12*x3866))+((r12*x3869)))))+(IKabs((((x3867*x3869))+((x3866*x3868))+(((-1.0)*x3868*x3869))+(((-1.0)*x3866*x3867))))));
j4eval[2]=IKsign(x3870);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3871=(sj1*sj2);
IkReal x3872=(cj5*r10);
IkReal x3873=(r11*sj5);
IkReal x3874=(cj1*cj2);
CheckValue<IkReal> x3875=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3875.valid){
continue;
}
CheckValue<IkReal> x3876 = IKatan2WithCheck(IkReal((((x3871*x3873))+((x3872*x3874))+(((-1.0)*x3871*x3872))+(((-1.0)*x3873*x3874)))),IkReal(((((-1.0)*r12*x3871))+((r12*x3874)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3875.value)))+(x3876.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3877=IKcos(j4);
IkReal x3878=IKsin(j4);
IkReal x3879=(cj5*r00);
IkReal x3880=(cj5*r10);
IkReal x3881=(r21*sj5);
IkReal x3882=((1.0)*cj2);
IkReal x3883=(cj5*r20);
IkReal x3884=((1.0)*x3877);
IkReal x3885=((1.0)*x3878);
IkReal x3886=(sj5*x3878);
IkReal x3887=(sj5*x3877);
evalcond[0]=((((-1.0)*x3880*x3884))+((r11*x3887))+((r12*x3878)));
evalcond[1]=(((x3878*x3881))+(((-1.0)*x3883*x3885))+(((-1.0)*r22*x3884)));
evalcond[2]=((((-1.0)*x3879*x3885))+(((-1.0)*r02*x3884))+((r01*x3886)));
evalcond[3]=((1.0)+(((-1.0)*x3880*x3885))+((r11*x3886))+(((-1.0)*r12*x3884)));
evalcond[4]=((((-1.0)*cj1*x3882))+((x3877*x3881))+(((-1.0)*x3883*x3884))+((sj1*sj2))+((r22*x3878)));
evalcond[5]=((((-1.0)*sj1*x3882))+(((-1.0)*x3879*x3884))+(((-1.0)*cj1*sj2))+((r01*x3887))+((r02*x3878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3888=((1.0)*cj5);
CheckValue<IkReal> x3889=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3888)))),-1);
if(!x3889.valid){
continue;
}
CheckValue<IkReal> x3890 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3889.value)))+(x3890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3891=IKcos(j4);
IkReal x3892=IKsin(j4);
IkReal x3893=(cj5*r00);
IkReal x3894=(cj5*r10);
IkReal x3895=(r21*sj5);
IkReal x3896=((1.0)*cj2);
IkReal x3897=(cj5*r20);
IkReal x3898=((1.0)*x3891);
IkReal x3899=((1.0)*x3892);
IkReal x3900=(sj5*x3892);
IkReal x3901=(sj5*x3891);
evalcond[0]=((((-1.0)*x3894*x3898))+((r12*x3892))+((r11*x3901)));
evalcond[1]=((((-1.0)*r22*x3898))+((x3892*x3895))+(((-1.0)*x3897*x3899)));
evalcond[2]=(((r01*x3900))+(((-1.0)*x3893*x3899))+(((-1.0)*r02*x3898)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3898))+(((-1.0)*x3894*x3899))+((r11*x3900)));
evalcond[4]=(((sj1*sj2))+((x3891*x3895))+(((-1.0)*x3897*x3898))+((r22*x3892))+(((-1.0)*cj1*x3896)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x3901))+(((-1.0)*x3893*x3898))+(((-1.0)*sj1*x3896))+((r02*x3892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3902=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3902.valid){
continue;
}
CheckValue<IkReal> x3903 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3902.value)))+(x3903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3904=IKcos(j4);
IkReal x3905=IKsin(j4);
IkReal x3906=(cj5*r00);
IkReal x3907=(cj5*r10);
IkReal x3908=(r21*sj5);
IkReal x3909=((1.0)*cj2);
IkReal x3910=(cj5*r20);
IkReal x3911=((1.0)*x3904);
IkReal x3912=((1.0)*x3905);
IkReal x3913=(sj5*x3905);
IkReal x3914=(sj5*x3904);
evalcond[0]=((((-1.0)*x3907*x3911))+((r12*x3905))+((r11*x3914)));
evalcond[1]=((((-1.0)*r22*x3911))+((x3905*x3908))+(((-1.0)*x3910*x3912)));
evalcond[2]=((((-1.0)*x3906*x3912))+(((-1.0)*r02*x3911))+((r01*x3913)));
evalcond[3]=((1.0)+(((-1.0)*x3907*x3912))+((r11*x3913))+(((-1.0)*r12*x3911)));
evalcond[4]=(((r22*x3905))+((x3904*x3908))+((sj1*sj2))+(((-1.0)*x3910*x3911))+(((-1.0)*cj1*x3909)));
evalcond[5]=((((-1.0)*x3906*x3911))+(((-1.0)*sj1*x3909))+(((-1.0)*cj1*sj2))+((r01*x3914))+((r02*x3905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3915=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3915;
j4eval[1]=IKsign(x3915);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3916=((1.0)*cj5);
IkReal x3917=((((-1.0)*r21*x3916))+(((-1.0)*r20*sj5)));
j4eval[0]=x3917;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3916))))));
j4eval[2]=IKsign(x3917);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3918=cj5*cj5;
IkReal x3919=r11*r11;
IkReal x3920=(r11*sj5);
IkReal x3921=(cj5*r10);
IkReal x3922=((r12*r12)+(((-1.0)*x3918*x3919))+(((-2.0)*x3920*x3921))+x3919+((x3918*(r10*r10))));
j4eval[0]=x3922;
j4eval[1]=IKsign(x3922);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3921))+x3920))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3923=cj5*cj5;
IkReal x3924=r11*r11;
IkReal x3925=(cj5*r10);
IkReal x3926=(r11*sj5);
CheckValue<IkReal> x3927=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x3925*x3926))+(((-1.0)*x3923*x3924))+((x3923*(r10*r10)))+x3924)),-1);
if(!x3927.valid){
continue;
}
CheckValue<IkReal> x3928 = IKatan2WithCheck(IkReal(((((-1.0)*x3925))+x3926)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3927.value)))+(x3928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3929=IKcos(j4);
IkReal x3930=IKsin(j4);
IkReal x3931=(cj5*r00);
IkReal x3932=(cj5*r10);
IkReal x3933=(r21*sj5);
IkReal x3934=(cj5*r20);
IkReal x3935=((1.0)*x3929);
IkReal x3936=((1.0)*x3930);
IkReal x3937=(sj5*x3930);
IkReal x3938=(sj5*x3929);
evalcond[0]=((((-1.0)*x3932*x3935))+((r12*x3930))+((r11*x3938)));
evalcond[1]=((((-1.0)*x3934*x3936))+(((-1.0)*r22*x3935))+((x3930*x3933)));
evalcond[2]=(((r01*x3937))+(((-1.0)*x3931*x3936))+(((-1.0)*r02*x3935)));
evalcond[3]=((-1.0)+(((-1.0)*x3932*x3936))+(((-1.0)*r12*x3935))+((r11*x3937)));
evalcond[4]=(((cj2*sj1))+((r01*x3938))+((cj1*sj2))+(((-1.0)*x3931*x3935))+((r02*x3930)));
evalcond[5]=(((r22*x3930))+(((-1.0)*x3934*x3935))+((x3929*x3933))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3939=((1.0)*cj5);
CheckValue<IkReal> x3940 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3940.valid){
continue;
}
CheckValue<IkReal> x3941=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3939))+(((-1.0)*r20*sj5)))),-1);
if(!x3941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3940.value)+(((1.5707963267949)*(x3941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3942=IKcos(j4);
IkReal x3943=IKsin(j4);
IkReal x3944=(cj5*r00);
IkReal x3945=(cj5*r10);
IkReal x3946=(r21*sj5);
IkReal x3947=(cj5*r20);
IkReal x3948=((1.0)*x3942);
IkReal x3949=((1.0)*x3943);
IkReal x3950=(sj5*x3943);
IkReal x3951=(sj5*x3942);
evalcond[0]=((((-1.0)*x3945*x3948))+((r11*x3951))+((r12*x3943)));
evalcond[1]=((((-1.0)*r22*x3948))+((x3943*x3946))+(((-1.0)*x3947*x3949)));
evalcond[2]=(((r01*x3950))+(((-1.0)*r02*x3948))+(((-1.0)*x3944*x3949)));
evalcond[3]=((-1.0)+(((-1.0)*x3945*x3949))+(((-1.0)*r12*x3948))+((r11*x3950)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x3951))+(((-1.0)*x3944*x3948))+((r02*x3943)));
evalcond[5]=(((r22*x3943))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3942*x3946))+(((-1.0)*x3947*x3948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3952 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3952.valid){
continue;
}
CheckValue<IkReal> x3953=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3952.value)+(((1.5707963267949)*(x3953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3954=IKcos(j4);
IkReal x3955=IKsin(j4);
IkReal x3956=(cj5*r00);
IkReal x3957=(cj5*r10);
IkReal x3958=(r21*sj5);
IkReal x3959=(cj5*r20);
IkReal x3960=((1.0)*x3954);
IkReal x3961=((1.0)*x3955);
IkReal x3962=(sj5*x3955);
IkReal x3963=(sj5*x3954);
evalcond[0]=(((r11*x3963))+(((-1.0)*x3957*x3960))+((r12*x3955)));
evalcond[1]=((((-1.0)*x3959*x3961))+(((-1.0)*r22*x3960))+((x3955*x3958)));
evalcond[2]=((((-1.0)*r02*x3960))+(((-1.0)*x3956*x3961))+((r01*x3962)));
evalcond[3]=((-1.0)+((r11*x3962))+(((-1.0)*x3957*x3961))+(((-1.0)*r12*x3960)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3956*x3960))+((r02*x3955))+((r01*x3963)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3959*x3960))+((r22*x3955))+((x3954*x3958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3964=((-1.0)*r00);
IkReal x3966 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3966)==0){
continue;
}
IkReal x3965=pow(x3966,-0.5);
CheckValue<IkReal> x3967 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3964),IKFAST_ATAN2_MAGTHRESH);
if(!x3967.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3967.value));
IkReal gconst109=(r01*x3965);
IkReal gconst110=(x3964*x3965);
CheckValue<IkReal> x3968 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3968.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3968.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3969=((-1.0)*r00);
IkReal x3970=x3965;
CheckValue<IkReal> x3972 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3969),IKFAST_ATAN2_MAGTHRESH);
if(!x3972.valid){
continue;
}
IkReal x3971=((-1.0)*(x3972.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3971;
IkReal gconst108=x3971;
IkReal gconst109=(r01*x3970);
IkReal gconst110=(x3969*x3970);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3973=((1.0)*sj0);
IkReal x3974=((1.0)*gconst109);
CheckValue<IkReal> x3975 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3973))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*cj0*r01*x3974))+(((-1.0)*gconst109*r11*x3973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3975.valid){
continue;
}
CheckValue<IkReal> x3976=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3974))+(((-1.0)*gconst110*r21)))),-1);
if(!x3976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3975.value)+(((1.5707963267949)*(x3976.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3977=IKsin(j4);
IkReal x3978=IKcos(j4);
IkReal x3979=(gconst109*r21);
IkReal x3980=((1.0)*cj2);
IkReal x3981=((1.0)*sj0);
IkReal x3982=(cj1*sj2);
IkReal x3983=((1.0)*x3978);
IkReal x3984=(gconst109*x3977);
IkReal x3985=(gconst109*x3978);
IkReal x3986=((1.0)*gconst110*x3977);
evalcond[0]=(((x3977*x3979))+(((-1.0)*r22*x3983))+(((-1.0)*r20*x3986)));
evalcond[1]=((((-1.0)*r12*x3983))+((r11*x3984))+cj0+(((-1.0)*r10*x3986)));
evalcond[2]=(((r01*x3984))+(((-1.0)*r00*x3986))+(((-1.0)*x3981))+(((-1.0)*r02*x3983)));
evalcond[3]=(((x3978*x3979))+((sj1*sj2))+((r22*x3977))+(((-1.0)*gconst110*r20*x3983))+(((-1.0)*cj1*x3980)));
evalcond[4]=((((-1.0)*cj0*sj1*x3980))+((r02*x3977))+((r01*x3985))+(((-1.0)*cj0*x3982))+(((-1.0)*gconst110*r00*x3983)));
evalcond[5]=(((r11*x3985))+(((-1.0)*x3981*x3982))+((r12*x3977))+(((-1.0)*sj0*sj1*x3980))+(((-1.0)*gconst110*r10*x3983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3987=((1.0)*gconst110);
CheckValue<IkReal> x3988 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x3987)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3988.valid){
continue;
}
CheckValue<IkReal> x3989=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3987))+(((-1.0)*gconst109*r10)))),-1);
if(!x3989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3988.value)+(((1.5707963267949)*(x3989.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3990=IKsin(j4);
IkReal x3991=IKcos(j4);
IkReal x3992=(gconst109*r21);
IkReal x3993=((1.0)*cj2);
IkReal x3994=((1.0)*sj0);
IkReal x3995=(cj1*sj2);
IkReal x3996=((1.0)*x3991);
IkReal x3997=(gconst109*x3990);
IkReal x3998=(gconst109*x3991);
IkReal x3999=((1.0)*gconst110*x3990);
evalcond[0]=(((x3990*x3992))+(((-1.0)*r22*x3996))+(((-1.0)*r20*x3999)));
evalcond[1]=(cj0+(((-1.0)*r12*x3996))+(((-1.0)*r10*x3999))+((r11*x3997)));
evalcond[2]=((((-1.0)*x3994))+(((-1.0)*r02*x3996))+(((-1.0)*r00*x3999))+((r01*x3997)));
evalcond[3]=(((sj1*sj2))+((r22*x3990))+(((-1.0)*gconst110*r20*x3996))+((x3991*x3992))+(((-1.0)*cj1*x3993)));
evalcond[4]=((((-1.0)*cj0*sj1*x3993))+((r02*x3990))+(((-1.0)*cj0*x3995))+(((-1.0)*gconst110*r00*x3996))+((r01*x3998)));
evalcond[5]=(((r12*x3990))+((r11*x3998))+(((-1.0)*sj0*sj1*x3993))+(((-1.0)*x3994*x3995))+(((-1.0)*gconst110*r10*x3996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4000=((-1.0)*r01);
IkReal x4002 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4002)==0){
continue;
}
IkReal x4001=pow(x4002,-0.5);
CheckValue<IkReal> x4003 = IKatan2WithCheck(IkReal(x4000),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4003.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4003.value))));
IkReal gconst112=(x4000*x4001);
IkReal gconst113=((1.0)*r00*x4001);
CheckValue<IkReal> x4004 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4004.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4004.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4005=((-1.0)*r01);
CheckValue<IkReal> x4008 = IKatan2WithCheck(IkReal(x4005),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4008.valid){
continue;
}
IkReal x4006=((1.0)*(x4008.value));
IkReal x4007=x4001;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4006)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4006)));
IkReal gconst112=(x4005*x4007);
IkReal gconst113=((1.0)*r00*x4007);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4009=((-1.0)*r01);
CheckValue<IkReal> x4012 = IKatan2WithCheck(IkReal(x4009),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4012.valid){
continue;
}
IkReal x4010=((1.0)*(x4012.value));
IkReal x4011=x4001;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4010)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4010)));
IkReal gconst112=(x4009*x4011);
IkReal gconst113=((1.0)*r00*x4011);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4013=((-1.0)*r01);
CheckValue<IkReal> x4016 = IKatan2WithCheck(IkReal(x4013),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4016.valid){
continue;
}
IkReal x4014=((1.0)*(x4016.value));
IkReal x4015=x4001;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4014)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4014)));
IkReal gconst112=(x4013*x4015);
IkReal gconst113=((1.0)*r00*x4015);
IkReal x4017=r02*r02;
IkReal x4018=(r12*sj0);
IkReal x4019=((1.0)*cj0);
IkReal x4020=x4001;
j4eval[0]=((IKabs((((r02*x4018*x4020))+((cj0*x4017*x4020))+(((-1.0)*x4019*x4020)))))+(IKabs(((((-1.0)*x4018))+(((-1.0)*r02*x4019))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4021=((1.0)*sj0);
IkReal x4022=((1.0)*gconst112);
CheckValue<IkReal> x4023 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4021))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4022))+(((-1.0)*gconst112*r11*x4021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4023.valid){
continue;
}
CheckValue<IkReal> x4024=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x4022)))),-1);
if(!x4024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4023.value)+(((1.5707963267949)*(x4024.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4025=IKsin(j4);
IkReal x4026=IKcos(j4);
IkReal x4027=(gconst113*r20);
IkReal x4028=(gconst112*r21);
IkReal x4029=((1.0)*cj2);
IkReal x4030=(gconst113*r00);
IkReal x4031=(gconst113*r10);
IkReal x4032=((1.0)*sj0);
IkReal x4033=(cj1*sj2);
IkReal x4034=((1.0)*x4026);
IkReal x4035=((1.0)*x4025);
IkReal x4036=(gconst112*x4026);
IkReal x4037=(gconst112*x4025);
evalcond[0]=((((-1.0)*r22*x4034))+(((-1.0)*x4027*x4035))+((x4025*x4028)));
evalcond[1]=((((-1.0)*x4031*x4035))+cj0+(((-1.0)*r12*x4034))+((r11*x4037)));
evalcond[2]=((((-1.0)*x4030*x4035))+((r01*x4037))+(((-1.0)*x4032))+(((-1.0)*r02*x4034)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4029))+(((-1.0)*x4027*x4034))+((r22*x4025))+((x4026*x4028)));
evalcond[4]=((((-1.0)*cj0*x4033))+(((-1.0)*x4030*x4034))+(((-1.0)*cj0*sj1*x4029))+((r01*x4036))+((r02*x4025)));
evalcond[5]=((((-1.0)*x4031*x4034))+(((-1.0)*sj0*sj1*x4029))+((r12*x4025))+(((-1.0)*x4032*x4033))+((r11*x4036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4038=((1.0)*gconst113);
CheckValue<IkReal> x4039 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4039.valid){
continue;
}
CheckValue<IkReal> x4040=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4038))+(((-1.0)*gconst112*r10)))),-1);
if(!x4040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4039.value)+(((1.5707963267949)*(x4040.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4041=IKsin(j4);
IkReal x4042=IKcos(j4);
IkReal x4043=(gconst113*r20);
IkReal x4044=(gconst112*r21);
IkReal x4045=((1.0)*cj2);
IkReal x4046=(gconst113*r00);
IkReal x4047=(gconst113*r10);
IkReal x4048=((1.0)*sj0);
IkReal x4049=(cj1*sj2);
IkReal x4050=((1.0)*x4042);
IkReal x4051=((1.0)*x4041);
IkReal x4052=(gconst112*x4042);
IkReal x4053=(gconst112*x4041);
evalcond[0]=(((x4041*x4044))+(((-1.0)*x4043*x4051))+(((-1.0)*r22*x4050)));
evalcond[1]=(cj0+(((-1.0)*r12*x4050))+((r11*x4053))+(((-1.0)*x4047*x4051)));
evalcond[2]=((((-1.0)*x4046*x4051))+(((-1.0)*r02*x4050))+(((-1.0)*x4048))+((r01*x4053)));
evalcond[3]=(((r22*x4041))+(((-1.0)*x4043*x4050))+((sj1*sj2))+((x4042*x4044))+(((-1.0)*cj1*x4045)));
evalcond[4]=(((r02*x4041))+(((-1.0)*x4046*x4050))+(((-1.0)*cj0*x4049))+(((-1.0)*cj0*sj1*x4045))+((r01*x4052)));
evalcond[5]=(((r11*x4052))+((r12*x4041))+(((-1.0)*sj0*sj1*x4045))+(((-1.0)*x4047*x4050))+(((-1.0)*x4048*x4049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4054=((1.0)*gconst113);
CheckValue<IkReal> x4055=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4054))+(((-1.0)*gconst112*r00)))),-1);
if(!x4055.valid){
continue;
}
CheckValue<IkReal> x4056 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4054)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4055.value)))+(x4056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4057=IKsin(j4);
IkReal x4058=IKcos(j4);
IkReal x4059=(gconst113*r20);
IkReal x4060=(gconst112*r21);
IkReal x4061=((1.0)*cj2);
IkReal x4062=(gconst113*r00);
IkReal x4063=(gconst113*r10);
IkReal x4064=((1.0)*sj0);
IkReal x4065=(cj1*sj2);
IkReal x4066=((1.0)*x4058);
IkReal x4067=((1.0)*x4057);
IkReal x4068=(gconst112*x4058);
IkReal x4069=(gconst112*x4057);
evalcond[0]=((((-1.0)*x4059*x4067))+((x4057*x4060))+(((-1.0)*r22*x4066)));
evalcond[1]=(cj0+(((-1.0)*r12*x4066))+(((-1.0)*x4063*x4067))+((r11*x4069)));
evalcond[2]=((((-1.0)*x4064))+(((-1.0)*x4062*x4067))+(((-1.0)*r02*x4066))+((r01*x4069)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x4059*x4066))+(((-1.0)*cj1*x4061))+((r22*x4057))+((x4058*x4060)));
evalcond[4]=(((r02*x4057))+(((-1.0)*cj0*sj1*x4061))+(((-1.0)*cj0*x4065))+(((-1.0)*x4062*x4066))+((r01*x4068)));
evalcond[5]=((((-1.0)*x4064*x4065))+(((-1.0)*sj0*sj1*x4061))+(((-1.0)*x4063*x4066))+((r11*x4068))+((r12*x4057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4070=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4070;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4070);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4071=((1.0)*cj5);
IkReal x4072=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4071)));
j4eval[0]=x4072;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4071))))));
j4eval[2]=IKsign(x4072);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4073=cj5*cj5;
IkReal x4074=r01*r01;
IkReal x4075=(cj5*r00);
IkReal x4076=(r01*sj5);
IkReal x4077=(((x4073*(r00*r00)))+(((-2.0)*x4075*x4076))+x4074+(r02*r02)+(((-1.0)*x4073*x4074)));
j4eval[0]=x4077;
j4eval[1]=IKsign(x4077);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4075))+x4076))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4078=cj5*cj5;
IkReal x4079=r01*r01;
IkReal x4080=(r01*sj5);
IkReal x4081=(cj5*r00);
CheckValue<IkReal> x4082=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4078*x4079))+((x4078*(r00*r00)))+x4079+(((-2.0)*x4080*x4081))+(r02*r02))),-1);
if(!x4082.valid){
continue;
}
CheckValue<IkReal> x4083 = IKatan2WithCheck(IkReal((x4080+(((-1.0)*x4081)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4082.value)))+(x4083.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4084=IKcos(j4);
IkReal x4085=IKsin(j4);
IkReal x4086=(cj5*r00);
IkReal x4087=(cj5*r10);
IkReal x4088=(r21*sj5);
IkReal x4089=((1.0)*cj2);
IkReal x4090=(cj5*r20);
IkReal x4091=((1.0)*x4084);
IkReal x4092=((1.0)*x4085);
IkReal x4093=(sj5*x4085);
IkReal x4094=(sj5*x4084);
evalcond[0]=(((r01*x4094))+(((-1.0)*x4086*x4091))+((r02*x4085)));
evalcond[1]=(((x4085*x4088))+(((-1.0)*x4090*x4092))+(((-1.0)*r22*x4091)));
evalcond[2]=((((-1.0)*r12*x4091))+((r11*x4093))+(((-1.0)*x4087*x4092)));
evalcond[3]=((-1.0)+((r01*x4093))+(((-1.0)*x4086*x4092))+(((-1.0)*r02*x4091)));
evalcond[4]=(((x4084*x4088))+(((-1.0)*x4090*x4091))+((sj1*sj2))+(((-1.0)*cj1*x4089))+((r22*x4085)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4094))+(((-1.0)*sj1*x4089))+((r12*x4085))+(((-1.0)*x4087*x4091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4095=((1.0)*cj5);
CheckValue<IkReal> x4096 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4095))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4096.valid){
continue;
}
CheckValue<IkReal> x4097=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4095))+(((-1.0)*r10*sj5)))),-1);
if(!x4097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4096.value)+(((1.5707963267949)*(x4097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4098=IKcos(j4);
IkReal x4099=IKsin(j4);
IkReal x4100=(cj5*r00);
IkReal x4101=(cj5*r10);
IkReal x4102=(r21*sj5);
IkReal x4103=((1.0)*cj2);
IkReal x4104=(cj5*r20);
IkReal x4105=((1.0)*x4098);
IkReal x4106=((1.0)*x4099);
IkReal x4107=(sj5*x4099);
IkReal x4108=(sj5*x4098);
evalcond[0]=(((r02*x4099))+(((-1.0)*x4100*x4105))+((r01*x4108)));
evalcond[1]=(((x4099*x4102))+(((-1.0)*r22*x4105))+(((-1.0)*x4104*x4106)));
evalcond[2]=((((-1.0)*r12*x4105))+((r11*x4107))+(((-1.0)*x4101*x4106)));
evalcond[3]=((-1.0)+(((-1.0)*x4100*x4106))+((r01*x4107))+(((-1.0)*r02*x4105)));
evalcond[4]=((((-1.0)*cj1*x4103))+((x4098*x4102))+(((-1.0)*x4104*x4105))+((sj1*sj2))+((r22*x4099)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4103))+((r12*x4099))+((r11*x4108))+(((-1.0)*x4101*x4105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4109=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4109.valid){
continue;
}
CheckValue<IkReal> x4110 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4109.value)))+(x4110.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4111=IKcos(j4);
IkReal x4112=IKsin(j4);
IkReal x4113=(cj5*r00);
IkReal x4114=(cj5*r10);
IkReal x4115=(r21*sj5);
IkReal x4116=((1.0)*cj2);
IkReal x4117=(cj5*r20);
IkReal x4118=((1.0)*x4111);
IkReal x4119=((1.0)*x4112);
IkReal x4120=(sj5*x4112);
IkReal x4121=(sj5*x4111);
evalcond[0]=(((r02*x4112))+(((-1.0)*x4113*x4118))+((r01*x4121)));
evalcond[1]=((((-1.0)*x4117*x4119))+((x4112*x4115))+(((-1.0)*r22*x4118)));
evalcond[2]=((((-1.0)*r12*x4118))+(((-1.0)*x4114*x4119))+((r11*x4120)));
evalcond[3]=((-1.0)+(((-1.0)*x4113*x4119))+(((-1.0)*r02*x4118))+((r01*x4120)));
evalcond[4]=((((-1.0)*x4117*x4118))+(((-1.0)*cj1*x4116))+((sj1*sj2))+((r22*x4112))+((x4111*x4115)));
evalcond[5]=(((r12*x4112))+(((-1.0)*sj1*x4116))+(((-1.0)*cj1*sj2))+(((-1.0)*x4114*x4118))+((r11*x4121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4122=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4122;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4122);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4123=((1.0)*cj5);
IkReal x4124=((((-1.0)*r21*x4123))+(((-1.0)*r20*sj5)));
j4eval[0]=x4124;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4123))))));
j4eval[2]=IKsign(x4124);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4125=cj5*cj5;
IkReal x4126=r01*r01;
IkReal x4127=(r01*sj5);
IkReal x4128=(cj5*r00);
IkReal x4129=(((x4125*x4126))+(((-1.0)*(r02*r02)))+(((-1.0)*x4125*(r00*r00)))+(((-1.0)*x4126))+(((2.0)*x4127*x4128)));
j4eval[0]=x4129;
j4eval[1]=IKsign(x4129);
j4eval[2]=((IKabs(r02))+(IKabs((x4127+(((-1.0)*x4128))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4130=cj5*cj5;
IkReal x4131=r01*r01;
IkReal x4132=(r01*sj5);
IkReal x4133=(cj5*r00);
CheckValue<IkReal> x4134=IKPowWithIntegerCheck(IKsign(((((2.0)*x4132*x4133))+(((-1.0)*(r02*r02)))+((x4130*x4131))+(((-1.0)*x4130*(r00*r00)))+(((-1.0)*x4131)))),-1);
if(!x4134.valid){
continue;
}
CheckValue<IkReal> x4135 = IKatan2WithCheck(IkReal(((((-1.0)*x4133))+x4132)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4134.value)))+(x4135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4136=IKcos(j4);
IkReal x4137=IKsin(j4);
IkReal x4138=(cj5*r00);
IkReal x4139=(cj5*r10);
IkReal x4140=(r21*sj5);
IkReal x4141=(cj5*r20);
IkReal x4142=((1.0)*x4136);
IkReal x4143=((1.0)*x4137);
IkReal x4144=(sj5*x4137);
IkReal x4145=(sj5*x4136);
evalcond[0]=(((r01*x4145))+(((-1.0)*x4138*x4142))+((r02*x4137)));
evalcond[1]=(((x4137*x4140))+(((-1.0)*x4141*x4143))+(((-1.0)*r22*x4142)));
evalcond[2]=(((r11*x4144))+(((-1.0)*x4139*x4143))+(((-1.0)*r12*x4142)));
evalcond[3]=((1.0)+((r01*x4144))+(((-1.0)*r02*x4142))+(((-1.0)*x4138*x4143)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4145))+((r12*x4137))+(((-1.0)*x4139*x4142)));
evalcond[5]=(((r22*x4137))+(((-1.0)*x4141*x4142))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4136*x4140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4146=((1.0)*cj5);
CheckValue<IkReal> x4147 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4146)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4147.valid){
continue;
}
CheckValue<IkReal> x4148=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4146))+(((-1.0)*r20*sj5)))),-1);
if(!x4148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4147.value)+(((1.5707963267949)*(x4148.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4149=IKcos(j4);
IkReal x4150=IKsin(j4);
IkReal x4151=(cj5*r00);
IkReal x4152=(cj5*r10);
IkReal x4153=(r21*sj5);
IkReal x4154=(cj5*r20);
IkReal x4155=((1.0)*x4149);
IkReal x4156=((1.0)*x4150);
IkReal x4157=(sj5*x4150);
IkReal x4158=(sj5*x4149);
evalcond[0]=(((r02*x4150))+((r01*x4158))+(((-1.0)*x4151*x4155)));
evalcond[1]=(((x4150*x4153))+(((-1.0)*x4154*x4156))+(((-1.0)*r22*x4155)));
evalcond[2]=(((r11*x4157))+(((-1.0)*x4152*x4156))+(((-1.0)*r12*x4155)));
evalcond[3]=((1.0)+((r01*x4157))+(((-1.0)*r02*x4155))+(((-1.0)*x4151*x4156)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4150))+((r11*x4158))+(((-1.0)*x4152*x4155)));
evalcond[5]=(((r22*x4150))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4154*x4155))+((x4149*x4153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4159 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4159.valid){
continue;
}
CheckValue<IkReal> x4160=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4159.value)+(((1.5707963267949)*(x4160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4161=IKcos(j4);
IkReal x4162=IKsin(j4);
IkReal x4163=(cj5*r00);
IkReal x4164=(cj5*r10);
IkReal x4165=(r21*sj5);
IkReal x4166=(cj5*r20);
IkReal x4167=((1.0)*x4161);
IkReal x4168=((1.0)*x4162);
IkReal x4169=(sj5*x4162);
IkReal x4170=(sj5*x4161);
evalcond[0]=(((r02*x4162))+(((-1.0)*x4163*x4167))+((r01*x4170)));
evalcond[1]=(((x4162*x4165))+(((-1.0)*x4166*x4168))+(((-1.0)*r22*x4167)));
evalcond[2]=((((-1.0)*r12*x4167))+((r11*x4169))+(((-1.0)*x4164*x4168)));
evalcond[3]=((1.0)+((r01*x4169))+(((-1.0)*r02*x4167))+(((-1.0)*x4163*x4168)));
evalcond[4]=(((r11*x4170))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4164*x4167))+((r12*x4162)));
evalcond[5]=(((r22*x4162))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4161*x4165))+(((-1.0)*x4166*x4167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4171=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4171);
rxp1_1=(px*r21);
rxp1_2=(r11*x4171);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4172=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4172);
rxp1_1=(px*r21);
rxp1_2=(r11*x4172);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4173=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4173);
rxp1_1=(px*r21);
rxp1_2=(r11*x4173);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4176=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4176.valid){
continue;
}
IkReal x4174=x4176.value;
IkReal x4175=(sj0*x4174);
cj4array[0]=(((cj2*sj1*x4175))+((cj1*sj2*x4175)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4177=IKsin(j4);
IkReal x4178=IKcos(j4);
IkReal x4179=(r21*sj5);
IkReal x4180=((1.0)*cj5*r20);
evalcond[0]=(r02*x4177);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4178)));
evalcond[2]=((((-1.0)*x4177*x4180))+((x4177*x4179)));
evalcond[3]=(((r11*sj5*x4177))+(((-1.0)*cj5*r10*x4177)));
evalcond[4]=(((x4178*x4179))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4178*x4180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4182=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4182.valid){
continue;
}
IkReal x4181=x4182.value;
cj4array[0]=(((cj1*cj2*x4181))+(((-1.0)*sj1*sj2*x4181)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4183=IKsin(j4);
IkReal x4184=IKcos(j4);
IkReal x4185=((1.0)*sj0);
IkReal x4186=((1.0)*cj5);
IkReal x4187=(sj5*x4183);
evalcond[0]=(r02*x4183);
evalcond[1]=((((-1.0)*x4185))+(((-1.0)*r02*x4184)));
evalcond[2]=(((r21*x4187))+(((-1.0)*r20*x4183*x4186)));
evalcond[3]=((((-1.0)*r10*x4183*x4186))+((r11*x4187)));
evalcond[4]=((((-1.0)*r10*x4184*x4186))+(((-1.0)*cj2*sj1*x4185))+((r11*sj5*x4184))+(((-1.0)*cj1*sj2*x4185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4188=IKPowWithIntegerCheck(r02,-1);
if(!x4188.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4188.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4189=IKsin(j4);
IkReal x4190=IKcos(j4);
IkReal x4191=((1.0)*cj1);
IkReal x4192=(r21*sj5);
IkReal x4193=((1.0)*cj5);
IkReal x4194=(r11*sj5);
evalcond[0]=(r02*x4189);
evalcond[1]=(((x4189*x4192))+(((-1.0)*r20*x4189*x4193)));
evalcond[2]=((((-1.0)*r10*x4189*x4193))+((x4189*x4194)));
evalcond[3]=((((-1.0)*r20*x4190*x4193))+((x4190*x4192))+((sj1*sj2))+(((-1.0)*cj2*x4191)));
evalcond[4]=((((-1.0)*r10*x4190*x4193))+(((-1.0)*cj2*sj0*sj1))+((x4190*x4194))+(((-1.0)*sj0*sj2*x4191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4195=((1.0)*sj0);
IkReal x4196=((1.0)*cj0);
CheckValue<IkReal> x4197 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4195))+(((-1.0)*r02*x4196)))),IkReal(((((-1.0)*r01*sj5*x4196))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4195)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4197.valid){
continue;
}
CheckValue<IkReal> x4198=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4197.value)+(((1.5707963267949)*(x4198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4199=IKsin(j4);
IkReal x4200=IKcos(j4);
IkReal x4201=(cj5*r00);
IkReal x4202=(cj5*r10);
IkReal x4203=(r21*sj5);
IkReal x4204=((1.0)*cj2);
IkReal x4205=((1.0)*sj0);
IkReal x4206=(cj1*sj2);
IkReal x4207=(cj5*r20);
IkReal x4208=((1.0)*x4200);
IkReal x4209=((1.0)*x4199);
IkReal x4210=(sj5*x4199);
IkReal x4211=(sj5*x4200);
evalcond[0]=(((x4199*x4203))+(((-1.0)*r22*x4208))+(((-1.0)*x4207*x4209)));
evalcond[1]=((((-1.0)*r12*x4208))+cj0+((r11*x4210))+(((-1.0)*x4202*x4209)));
evalcond[2]=((((-1.0)*r02*x4208))+(((-1.0)*x4201*x4209))+(((-1.0)*x4205))+((r01*x4210)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x4207*x4208))+((r22*x4199))+(((-1.0)*cj1*x4204))+((x4200*x4203)));
evalcond[4]=(((r02*x4199))+(((-1.0)*cj0*x4206))+(((-1.0)*x4201*x4208))+(((-1.0)*cj0*sj1*x4204))+((r01*x4211)));
evalcond[5]=(((r12*x4199))+((r11*x4211))+(((-1.0)*sj0*sj1*x4204))+(((-1.0)*x4202*x4208))+(((-1.0)*x4205*x4206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4212=((1.0)*cj5);
CheckValue<IkReal> x4213 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4212)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4213.valid){
continue;
}
CheckValue<IkReal> x4214=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4212))+(((-1.0)*r10*sj5)))),-1);
if(!x4214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4213.value)+(((1.5707963267949)*(x4214.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4215=IKsin(j4);
IkReal x4216=IKcos(j4);
IkReal x4217=(cj5*r00);
IkReal x4218=(cj5*r10);
IkReal x4219=(r21*sj5);
IkReal x4220=((1.0)*cj2);
IkReal x4221=((1.0)*sj0);
IkReal x4222=(cj1*sj2);
IkReal x4223=(cj5*r20);
IkReal x4224=((1.0)*x4216);
IkReal x4225=((1.0)*x4215);
IkReal x4226=(sj5*x4215);
IkReal x4227=(sj5*x4216);
evalcond[0]=((((-1.0)*x4223*x4225))+((x4215*x4219))+(((-1.0)*r22*x4224)));
evalcond[1]=(cj0+(((-1.0)*x4218*x4225))+(((-1.0)*r12*x4224))+((r11*x4226)));
evalcond[2]=((((-1.0)*x4221))+((r01*x4226))+(((-1.0)*r02*x4224))+(((-1.0)*x4217*x4225)));
evalcond[3]=(((r22*x4215))+(((-1.0)*x4223*x4224))+((sj1*sj2))+((x4216*x4219))+(((-1.0)*cj1*x4220)));
evalcond[4]=(((r01*x4227))+((r02*x4215))+(((-1.0)*x4217*x4224))+(((-1.0)*cj0*x4222))+(((-1.0)*cj0*sj1*x4220)));
evalcond[5]=(((r12*x4215))+(((-1.0)*x4218*x4224))+(((-1.0)*sj0*sj1*x4220))+(((-1.0)*x4221*x4222))+((r11*x4227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4228=((1.0)*cj5);
CheckValue<IkReal> x4229=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4228)))),-1);
if(!x4229.valid){
continue;
}
CheckValue<IkReal> x4230 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4228)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4229.value)))+(x4230.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4231=IKsin(j4);
IkReal x4232=IKcos(j4);
IkReal x4233=(cj5*r00);
IkReal x4234=(cj5*r10);
IkReal x4235=(r21*sj5);
IkReal x4236=((1.0)*cj2);
IkReal x4237=((1.0)*sj0);
IkReal x4238=(cj1*sj2);
IkReal x4239=(cj5*r20);
IkReal x4240=((1.0)*x4232);
IkReal x4241=((1.0)*x4231);
IkReal x4242=(sj5*x4231);
IkReal x4243=(sj5*x4232);
evalcond[0]=(((x4231*x4235))+(((-1.0)*r22*x4240))+(((-1.0)*x4239*x4241)));
evalcond[1]=(cj0+(((-1.0)*r12*x4240))+(((-1.0)*x4234*x4241))+((r11*x4242)));
evalcond[2]=((((-1.0)*x4237))+(((-1.0)*x4233*x4241))+((r01*x4242))+(((-1.0)*r02*x4240)));
evalcond[3]=(((x4232*x4235))+((sj1*sj2))+((r22*x4231))+(((-1.0)*x4239*x4240))+(((-1.0)*cj1*x4236)));
evalcond[4]=((((-1.0)*x4233*x4240))+((r01*x4243))+((r02*x4231))+(((-1.0)*cj0*x4238))+(((-1.0)*cj0*sj1*x4236)));
evalcond[5]=(((r12*x4231))+(((-1.0)*sj0*sj1*x4236))+(((-1.0)*x4237*x4238))+(((-1.0)*x4234*x4240))+((r11*x4243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4244=r21*r21;
IkReal x4245=cj5*cj5;
IkReal x4246=(sj1*sj2);
IkReal x4247=(r21*sj5);
IkReal x4248=(cj1*cj2);
IkReal x4249=(cj5*r20);
CheckValue<IkReal> x4250 = IKatan2WithCheck(IkReal((((r22*x4246))+(((-1.0)*r22*x4248)))),IkReal((((x4246*x4247))+(((-1.0)*x4247*x4248))+((x4248*x4249))+(((-1.0)*x4246*x4249)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4250.valid){
continue;
}
CheckValue<IkReal> x4251=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4245*(r20*r20)))+(((2.0)*x4247*x4249))+(((-1.0)*(r22*r22)))+((x4244*x4245))+(((-1.0)*x4244)))),-1);
if(!x4251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4250.value)+(((1.5707963267949)*(x4251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4252=IKsin(j4);
IkReal x4253=IKcos(j4);
IkReal x4254=(r21*sj5);
IkReal x4255=(cj5*r20);
IkReal x4256=((1.0)*x4253);
evalcond[0]=((((-1.0)*x4252*x4255))+(((-1.0)*r22*x4256))+((x4252*x4254)));
evalcond[1]=(((r22*x4252))+(((-1.0)*x4255*x4256))+((x4253*x4254))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4257=(cj5*sj4);
IkReal x4258=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x4258))+(((-1.0)*r00*x4257)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x4258))+((r10*x4257))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x4258))+(((-1.0)*r00*x4257))))+IKsqr(((((-1.0)*r11*x4258))+((r10*x4257))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x4258))+(((-1.0)*r00*x4257))), ((((-1.0)*r11*x4258))+((r10*x4257))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4259=IKcos(j0);
IkReal x4260=IKsin(j0);
IkReal x4261=((0.1)*sj5);
IkReal x4262=((0.392)*sj1);
IkReal x4263=(cj5*r11);
IkReal x4264=((1.0)*cj1);
IkReal x4265=(r11*sj5);
IkReal x4266=((1.0)*sj5);
IkReal x4267=((1.0)*sj1);
IkReal x4268=((1.0)*cj5);
IkReal x4269=((0.425)*cj1);
IkReal x4270=((1.0)*cj4);
IkReal x4271=(r01*sj5);
IkReal x4272=(sj2*x4260);
IkReal x4273=(sj2*x4259);
IkReal x4274=(cj4*x4268);
IkReal x4275=((0.392)*cj1*cj2);
IkReal x4276=(cj2*x4259);
IkReal x4277=(cj2*x4260);
evalcond[0]=((((-1.0)*r12*x4270))+(((-1.0)*r10*sj4*x4268))+x4259+((sj4*x4265)));
evalcond[1]=((((-1.0)*r02*x4270))+(((-1.0)*r00*sj4*x4268))+((sj4*x4271))+(((-1.0)*x4260)));
evalcond[2]=((((-1.0)*x4264*x4276))+(((-1.0)*r00*x4266))+(((-1.0)*r01*x4268))+((sj1*x4273)));
evalcond[3]=((((-1.0)*x4264*x4277))+(((-1.0)*r10*x4266))+((sj1*x4272))+(((-1.0)*x4263)));
evalcond[4]=(((cj4*x4271))+(((-1.0)*x4264*x4273))+((r02*sj4))+(((-1.0)*r00*x4274))+(((-1.0)*x4267*x4276)));
evalcond[5]=((((-1.0)*r10*x4274))+(((-1.0)*x4264*x4272))+((cj4*x4265))+((r12*sj4))+(((-1.0)*x4267*x4277)));
evalcond[6]=((((-1.0)*r00*x4261))+(((-0.1)*cj5*r01))+(((-1.0)*px))+((x4259*x4269))+((x4259*x4275))+(((-1.0)*x4262*x4273))+(((-0.134)*x4260)));
evalcond[7]=((((-1.0)*r10*x4261))+(((-1.0)*py))+(((-0.1)*x4263))+(((0.134)*x4259))+(((-1.0)*x4262*x4272))+((x4260*x4275))+((x4260*x4269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4278 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4278.valid){
continue;
}
CheckValue<IkReal> x4279=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4279.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4278.value)+(((1.5707963267949)*(x4279.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4280=IKcos(j0);
IkReal x4281=IKsin(j0);
IkReal x4282=((0.1)*sj5);
IkReal x4283=(cj5*r11);
IkReal x4284=(sj1*sj2);
IkReal x4285=(cj1*cj2);
IkReal x4286=((1.0)*sj5);
IkReal x4287=(cj5*r01);
IkReal x4288=((0.425)*cj1);
IkReal x4289=((0.392)*x4281);
IkReal x4290=((0.392)*x4280);
evalcond[0]=(((x4280*x4284))+(((-1.0)*r00*x4286))+(((-1.0)*x4280*x4285))+(((-1.0)*x4287)));
evalcond[1]=((((-1.0)*r10*x4286))+((x4281*x4284))+(((-1.0)*x4281*x4285))+(((-1.0)*x4283)));
evalcond[2]=((((-0.134)*x4281))+((x4280*x4288))+(((-1.0)*r00*x4282))+(((-1.0)*x4284*x4290))+(((-0.1)*x4287))+(((-1.0)*px))+((x4285*x4290)));
evalcond[3]=((((-1.0)*r10*x4282))+((x4285*x4289))+((x4281*x4288))+(((-0.1)*x4283))+(((-1.0)*py))+(((0.134)*x4280))+(((-1.0)*x4284*x4289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4291=((1.0)*cj5);
IkReal x4292=((((-1.0)*r01*x4291))+(((-1.0)*r00*sj5)));
j4eval[0]=x4292;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4291)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4292);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4293=((1.0)*cj5);
IkReal x4294=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4293)));
j4eval[0]=x4294;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4293))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4294);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4295=((1.0)*sj0);
IkReal x4296=((1.0)*cj0);
IkReal x4297=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4297;
j4eval[1]=((IKabs(((((-1.0)*r12*x4295))+(((-1.0)*r02*x4296)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4296))+(((-1.0)*r11*sj5*x4295))))));
j4eval[2]=IKsign(x4297);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4298=((-1.0)*r20);
IkReal x4300 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4300)==0){
continue;
}
IkReal x4299=pow(x4300,-0.5);
CheckValue<IkReal> x4301 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4298),IKFAST_ATAN2_MAGTHRESH);
if(!x4301.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4301.value));
IkReal gconst97=(r21*x4299);
IkReal gconst98=(x4298*x4299);
CheckValue<IkReal> x4302 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4302.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4302.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4303=((-1.0)*r20);
IkReal x4304=x4299;
CheckValue<IkReal> x4306 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4303),IKFAST_ATAN2_MAGTHRESH);
if(!x4306.valid){
continue;
}
IkReal x4305=((-1.0)*(x4306.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4305;
IkReal gconst96=x4305;
IkReal gconst97=(r21*x4304);
IkReal gconst98=(x4303*x4304);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4307=((-1.0)*r20);
IkReal x4308=x4299;
CheckValue<IkReal> x4310 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4307),IKFAST_ATAN2_MAGTHRESH);
if(!x4310.valid){
continue;
}
IkReal x4309=((-1.0)*(x4310.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4309;
IkReal gconst96=x4309;
IkReal gconst97=(r21*x4308);
IkReal gconst98=(x4307*x4308);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4311=((-1.0)*r20);
IkReal x4312=x4299;
CheckValue<IkReal> x4314 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4311),IKFAST_ATAN2_MAGTHRESH);
if(!x4314.valid){
continue;
}
IkReal x4313=((-1.0)*(x4314.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4313;
IkReal gconst96=x4313;
IkReal gconst97=(r21*x4312);
IkReal gconst98=(x4311*x4312);
IkReal x4315=((1.0)*(r22*r22));
CheckValue<IkReal> x4319=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4315))),-1);
if(!x4319.valid){
continue;
}
IkReal x4316=x4319.value;
IkReal x4317=((1.0)*x4316);
IkReal x4318=((((-1.0)*x4317*(r21*r21*r21*r21)))+(((-1.0)*x4315))+(((-2.0)*x4316*(r20*r20)*(r21*r21)))+(((-1.0)*x4317*(r20*r20*r20*r20))));
j4eval[0]=x4318;
j4eval[1]=IKsign(x4318);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4320=(cj1*cj2);
IkReal x4321=(gconst98*r20);
IkReal x4322=(sj1*sj2);
IkReal x4323=(gconst97*r21);
CheckValue<IkReal> x4324 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4320))+((r22*x4322)))),IkReal(((((-1.0)*x4321*x4322))+((x4320*x4321))+(((-1.0)*x4320*x4323))+((x4322*x4323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4324.valid){
continue;
}
CheckValue<IkReal> x4325=IKPowWithIntegerCheck(IKsign(((((2.0)*x4321*x4323))+(((-1.0)*(x4321*x4321)))+(((-1.0)*(x4323*x4323)))+(((-1.0)*(r22*r22))))),-1);
if(!x4325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4324.value)+(((1.5707963267949)*(x4325.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4326=IKsin(j4);
IkReal x4327=IKcos(j4);
IkReal x4328=(gconst98*r10);
IkReal x4329=(gconst97*r21);
IkReal x4330=(gconst98*r20);
IkReal x4331=((1.0)*cj2);
IkReal x4332=((1.0)*sj0);
IkReal x4333=(gconst98*r00);
IkReal x4334=(cj1*sj2);
IkReal x4335=((1.0)*x4327);
IkReal x4336=((1.0)*x4326);
IkReal x4337=(gconst97*x4326);
IkReal x4338=(gconst97*x4327);
evalcond[0]=((((-1.0)*x4330*x4336))+((x4326*x4329))+(((-1.0)*r22*x4335)));
evalcond[1]=(cj0+(((-1.0)*r12*x4335))+((r11*x4337))+(((-1.0)*x4328*x4336)));
evalcond[2]=(((r01*x4337))+(((-1.0)*x4333*x4336))+(((-1.0)*r02*x4335))+(((-1.0)*x4332)));
evalcond[3]=((((-1.0)*x4330*x4335))+((x4327*x4329))+((sj1*sj2))+(((-1.0)*cj1*x4331))+((r22*x4326)));
evalcond[4]=(((r01*x4338))+(((-1.0)*x4333*x4335))+(((-1.0)*cj0*sj1*x4331))+((r02*x4326))+(((-1.0)*cj0*x4334)));
evalcond[5]=((((-1.0)*x4332*x4334))+(((-1.0)*sj0*sj1*x4331))+((r12*x4326))+((r11*x4338))+(((-1.0)*x4328*x4335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4339=((1.0)*gconst98);
CheckValue<IkReal> x4340=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4339))+(((-1.0)*gconst97*r10)))),-1);
if(!x4340.valid){
continue;
}
CheckValue<IkReal> x4341 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4339)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4340.value)))+(x4341.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4342=IKsin(j4);
IkReal x4343=IKcos(j4);
IkReal x4344=(gconst98*r10);
IkReal x4345=(gconst97*r21);
IkReal x4346=(gconst98*r20);
IkReal x4347=((1.0)*cj2);
IkReal x4348=((1.0)*sj0);
IkReal x4349=(gconst98*r00);
IkReal x4350=(cj1*sj2);
IkReal x4351=((1.0)*x4343);
IkReal x4352=((1.0)*x4342);
IkReal x4353=(gconst97*x4342);
IkReal x4354=(gconst97*x4343);
evalcond[0]=(((x4342*x4345))+(((-1.0)*r22*x4351))+(((-1.0)*x4346*x4352)));
evalcond[1]=((((-1.0)*x4344*x4352))+cj0+(((-1.0)*r12*x4351))+((r11*x4353)));
evalcond[2]=((((-1.0)*r02*x4351))+(((-1.0)*x4348))+(((-1.0)*x4349*x4352))+((r01*x4353)));
evalcond[3]=(((x4343*x4345))+((sj1*sj2))+((r22*x4342))+(((-1.0)*cj1*x4347))+(((-1.0)*x4346*x4351)));
evalcond[4]=((((-1.0)*x4349*x4351))+((r02*x4342))+(((-1.0)*cj0*sj1*x4347))+(((-1.0)*cj0*x4350))+((r01*x4354)));
evalcond[5]=((((-1.0)*x4344*x4351))+(((-1.0)*sj0*sj1*x4347))+((r12*x4342))+((r11*x4354))+(((-1.0)*x4348*x4350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4355=((1.0)*gconst98);
CheckValue<IkReal> x4356=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4355))+(((-1.0)*gconst97*r00)))),-1);
if(!x4356.valid){
continue;
}
CheckValue<IkReal> x4357 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4355))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4356.value)))+(x4357.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4358=IKsin(j4);
IkReal x4359=IKcos(j4);
IkReal x4360=(gconst98*r10);
IkReal x4361=(gconst97*r21);
IkReal x4362=(gconst98*r20);
IkReal x4363=((1.0)*cj2);
IkReal x4364=((1.0)*sj0);
IkReal x4365=(gconst98*r00);
IkReal x4366=(cj1*sj2);
IkReal x4367=((1.0)*x4359);
IkReal x4368=((1.0)*x4358);
IkReal x4369=(gconst97*x4358);
IkReal x4370=(gconst97*x4359);
evalcond[0]=((((-1.0)*r22*x4367))+(((-1.0)*x4362*x4368))+((x4358*x4361)));
evalcond[1]=((((-1.0)*x4360*x4368))+cj0+((r11*x4369))+(((-1.0)*r12*x4367)));
evalcond[2]=((((-1.0)*x4364))+((r01*x4369))+(((-1.0)*x4365*x4368))+(((-1.0)*r02*x4367)));
evalcond[3]=((((-1.0)*cj1*x4363))+((x4359*x4361))+((r22*x4358))+(((-1.0)*x4362*x4367))+((sj1*sj2)));
evalcond[4]=(((r01*x4370))+(((-1.0)*cj0*x4366))+((r02*x4358))+(((-1.0)*x4365*x4367))+(((-1.0)*cj0*sj1*x4363)));
evalcond[5]=((((-1.0)*x4360*x4367))+((r11*x4370))+(((-1.0)*x4364*x4366))+(((-1.0)*sj0*sj1*x4363))+((r12*x4358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4371=((-1.0)*r21);
IkReal x4373 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4373)==0){
continue;
}
IkReal x4372=pow(x4373,-0.5);
CheckValue<IkReal> x4374 = IKatan2WithCheck(IkReal(x4371),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4374.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4374.value))));
IkReal gconst100=(x4371*x4372);
IkReal gconst101=((1.0)*r20*x4372);
CheckValue<IkReal> x4375 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4375.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4375.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4376=((-1.0)*r21);
CheckValue<IkReal> x4379 = IKatan2WithCheck(IkReal(x4376),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4379.valid){
continue;
}
IkReal x4377=((1.0)*(x4379.value));
IkReal x4378=x4372;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4377)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4377)));
IkReal gconst100=(x4376*x4378);
IkReal gconst101=((1.0)*r20*x4378);
IkReal x4380=r22*r22;
IkReal x4381=((1.0)*x4380);
CheckValue<IkReal> x4385=IKPowWithIntegerCheck(((-1.0)+x4380),-1);
if(!x4385.valid){
continue;
}
IkReal x4382=x4385.value;
if((((1.0)+(((-1.0)*x4381)))) < -0.00001)
continue;
IkReal x4383=IKsqrt(((1.0)+(((-1.0)*x4381))));
IkReal x4384=(cj0*x4382*x4383);
j4eval[0]=((IKabs(((((-1.0)*x4381*x4384))+x4384)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4386=((-1.0)*r21);
CheckValue<IkReal> x4389 = IKatan2WithCheck(IkReal(x4386),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4389.valid){
continue;
}
IkReal x4387=((1.0)*(x4389.value));
IkReal x4388=x4372;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4387)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4387)));
IkReal gconst100=(x4386*x4388);
IkReal gconst101=((1.0)*r20*x4388);
IkReal x4390=r22*r22;
IkReal x4391=((1.0)*x4390);
CheckValue<IkReal> x4395=IKPowWithIntegerCheck(((-1.0)+x4390),-1);
if(!x4395.valid){
continue;
}
IkReal x4392=x4395.value;
if((((1.0)+(((-1.0)*x4391)))) < -0.00001)
continue;
IkReal x4393=IKsqrt(((1.0)+(((-1.0)*x4391))));
IkReal x4394=(sj0*x4392*x4393);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x4394+(((-1.0)*x4391*x4394))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4396=((-1.0)*r21);
CheckValue<IkReal> x4399 = IKatan2WithCheck(IkReal(x4396),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4399.valid){
continue;
}
IkReal x4397=((1.0)*(x4399.value));
IkReal x4398=x4372;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4397)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4397)));
IkReal gconst100=(x4396*x4398);
IkReal gconst101=((1.0)*r20*x4398);
IkReal x4400=r22*r22;
IkReal x4401=(r12*sj0);
IkReal x4402=(cj0*r02);
CheckValue<IkReal> x4406=IKPowWithIntegerCheck(((-1.0)+x4400),-1);
if(!x4406.valid){
continue;
}
IkReal x4403=x4406.value;
if((((1.0)+(((-1.0)*x4400)))) < -0.00001)
continue;
IkReal x4404=IKsqrt(((1.0)+(((-1.0)*x4400))));
IkReal x4405=(r22*x4403*x4404);
j4eval[0]=0;
j4eval[1]=((IKabs((((x4401*x4405))+((x4402*x4405)))))+(IKabs(((((-1.0)*x4401))+(((-1.0)*x4402))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4407=((1.0)*sj0);
IkReal x4408=((1.0)*gconst100);
CheckValue<IkReal> x4409=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4408))+(((-1.0)*gconst101*r21)))),-1);
if(!x4409.valid){
continue;
}
CheckValue<IkReal> x4410 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4407))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4408))+((gconst101*r10*sj0))+(((-1.0)*gconst100*r11*x4407))+((cj0*gconst101*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4409.value)))+(x4410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4411=IKsin(j4);
IkReal x4412=IKcos(j4);
IkReal x4413=(gconst101*r20);
IkReal x4414=(gconst101*r10);
IkReal x4415=((1.0)*cj2);
IkReal x4416=(gconst101*r00);
IkReal x4417=((1.0)*sj0);
IkReal x4418=(cj1*sj2);
IkReal x4419=((1.0)*x4412);
IkReal x4420=((1.0)*x4411);
IkReal x4421=(gconst100*x4411);
IkReal x4422=(gconst100*x4412);
evalcond[0]=((((-1.0)*x4413*x4420))+(((-1.0)*r22*x4419))+((r21*x4421)));
evalcond[1]=((((-1.0)*x4414*x4420))+cj0+(((-1.0)*r12*x4419))+((r11*x4421)));
evalcond[2]=((((-1.0)*r02*x4419))+(((-1.0)*x4417))+((r01*x4421))+(((-1.0)*x4416*x4420)));
evalcond[3]=(((r22*x4411))+((sj1*sj2))+(((-1.0)*x4413*x4419))+((r21*x4422))+(((-1.0)*cj1*x4415)));
evalcond[4]=((((-1.0)*cj0*sj1*x4415))+(((-1.0)*cj0*x4418))+((r01*x4422))+(((-1.0)*x4416*x4419))+((r02*x4411)));
evalcond[5]=(((r12*x4411))+(((-1.0)*x4417*x4418))+(((-1.0)*x4414*x4419))+(((-1.0)*sj0*sj1*x4415))+((r11*x4422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4423=((1.0)*gconst101);
CheckValue<IkReal> x4424=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x4423)))),-1);
if(!x4424.valid){
continue;
}
CheckValue<IkReal> x4425 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4423))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4424.value)))+(x4425.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4426=IKsin(j4);
IkReal x4427=IKcos(j4);
IkReal x4428=(gconst101*r20);
IkReal x4429=(gconst101*r10);
IkReal x4430=((1.0)*cj2);
IkReal x4431=(gconst101*r00);
IkReal x4432=((1.0)*sj0);
IkReal x4433=(cj1*sj2);
IkReal x4434=((1.0)*x4427);
IkReal x4435=((1.0)*x4426);
IkReal x4436=(gconst100*x4426);
IkReal x4437=(gconst100*x4427);
evalcond[0]=((((-1.0)*x4428*x4435))+(((-1.0)*r22*x4434))+((r21*x4436)));
evalcond[1]=(cj0+(((-1.0)*x4429*x4435))+(((-1.0)*r12*x4434))+((r11*x4436)));
evalcond[2]=((((-1.0)*r02*x4434))+(((-1.0)*x4432))+(((-1.0)*x4431*x4435))+((r01*x4436)));
evalcond[3]=((((-1.0)*x4428*x4434))+((sj1*sj2))+(((-1.0)*cj1*x4430))+((r22*x4426))+((r21*x4437)));
evalcond[4]=(((r02*x4426))+(((-1.0)*cj0*x4433))+(((-1.0)*cj0*sj1*x4430))+(((-1.0)*x4431*x4434))+((r01*x4437)));
evalcond[5]=((((-1.0)*x4429*x4434))+(((-1.0)*x4432*x4433))+((r11*x4437))+((r12*x4426))+(((-1.0)*sj0*sj1*x4430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4438=((1.0)*gconst101);
CheckValue<IkReal> x4439=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4438)))),-1);
if(!x4439.valid){
continue;
}
CheckValue<IkReal> x4440 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4438)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4439.value)))+(x4440.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4441=IKsin(j4);
IkReal x4442=IKcos(j4);
IkReal x4443=(gconst101*r20);
IkReal x4444=(gconst101*r10);
IkReal x4445=((1.0)*cj2);
IkReal x4446=(gconst101*r00);
IkReal x4447=((1.0)*sj0);
IkReal x4448=(cj1*sj2);
IkReal x4449=((1.0)*x4442);
IkReal x4450=((1.0)*x4441);
IkReal x4451=(gconst100*x4441);
IkReal x4452=(gconst100*x4442);
evalcond[0]=(((r21*x4451))+(((-1.0)*x4443*x4450))+(((-1.0)*r22*x4449)));
evalcond[1]=((((-1.0)*x4444*x4450))+cj0+(((-1.0)*r12*x4449))+((r11*x4451)));
evalcond[2]=((((-1.0)*x4446*x4450))+((r01*x4451))+(((-1.0)*x4447))+(((-1.0)*r02*x4449)));
evalcond[3]=(((r21*x4452))+(((-1.0)*x4443*x4449))+((sj1*sj2))+(((-1.0)*cj1*x4445))+((r22*x4441)));
evalcond[4]=(((r01*x4452))+(((-1.0)*cj0*sj1*x4445))+(((-1.0)*x4446*x4449))+(((-1.0)*cj0*x4448))+((r02*x4441)));
evalcond[5]=((((-1.0)*x4444*x4449))+(((-1.0)*x4447*x4448))+((r11*x4452))+((r12*x4441))+(((-1.0)*sj0*sj1*x4445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4453=((-1.0)*r10);
IkReal x4455 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4455)==0){
continue;
}
IkReal x4454=pow(x4455,-0.5);
CheckValue<IkReal> x4456 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4453),IKFAST_ATAN2_MAGTHRESH);
if(!x4456.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4456.value));
IkReal gconst103=(r11*x4454);
IkReal gconst104=(x4453*x4454);
CheckValue<IkReal> x4457 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4457.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4457.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4458=((-1.0)*r10);
IkReal x4459=x4454;
CheckValue<IkReal> x4461 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4458),IKFAST_ATAN2_MAGTHRESH);
if(!x4461.valid){
continue;
}
IkReal x4460=((-1.0)*(x4461.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4460;
IkReal gconst102=x4460;
IkReal gconst103=(r11*x4459);
IkReal gconst104=(x4458*x4459);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4462=((1.0)*sj0);
IkReal x4463=((1.0)*gconst103);
CheckValue<IkReal> x4464 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4462)))),IkReal(((((-1.0)*cj0*r01*x4463))+(((-1.0)*gconst103*r11*x4462))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4464.valid){
continue;
}
CheckValue<IkReal> x4465=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4463)))),-1);
if(!x4465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4464.value)+(((1.5707963267949)*(x4465.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4466=IKsin(j4);
IkReal x4467=IKcos(j4);
IkReal x4468=(gconst103*r11);
IkReal x4469=((1.0)*cj2);
IkReal x4470=((1.0)*sj0);
IkReal x4471=(cj1*sj2);
IkReal x4472=((1.0)*x4467);
IkReal x4473=(gconst103*x4467);
IkReal x4474=(gconst103*x4466);
IkReal x4475=((1.0)*gconst104*x4466);
evalcond[0]=(((r21*x4474))+(((-1.0)*r20*x4475))+(((-1.0)*r22*x4472)));
evalcond[1]=((((-1.0)*r12*x4472))+cj0+((x4466*x4468))+(((-1.0)*r10*x4475)));
evalcond[2]=((((-1.0)*x4470))+(((-1.0)*r00*x4475))+((r01*x4474))+(((-1.0)*r02*x4472)));
evalcond[3]=(((r22*x4466))+(((-1.0)*gconst104*r20*x4472))+((r21*x4473))+((sj1*sj2))+(((-1.0)*cj1*x4469)));
evalcond[4]=((((-1.0)*cj0*x4471))+(((-1.0)*gconst104*r00*x4472))+(((-1.0)*cj0*sj1*x4469))+((r01*x4473))+((r02*x4466)));
evalcond[5]=(((r12*x4466))+(((-1.0)*sj0*sj1*x4469))+(((-1.0)*x4470*x4471))+(((-1.0)*gconst104*r10*x4472))+((x4467*x4468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4476=((1.0)*gconst104);
CheckValue<IkReal> x4477=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4476)))),-1);
if(!x4477.valid){
continue;
}
CheckValue<IkReal> x4478 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4476))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4477.value)))+(x4478.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4479=IKsin(j4);
IkReal x4480=IKcos(j4);
IkReal x4481=(gconst103*r11);
IkReal x4482=((1.0)*cj2);
IkReal x4483=((1.0)*sj0);
IkReal x4484=(cj1*sj2);
IkReal x4485=((1.0)*x4480);
IkReal x4486=(gconst103*x4480);
IkReal x4487=(gconst103*x4479);
IkReal x4488=((1.0)*gconst104*x4479);
evalcond[0]=(((r21*x4487))+(((-1.0)*r20*x4488))+(((-1.0)*r22*x4485)));
evalcond[1]=((((-1.0)*r12*x4485))+cj0+((x4479*x4481))+(((-1.0)*r10*x4488)));
evalcond[2]=(((r01*x4487))+(((-1.0)*r00*x4488))+(((-1.0)*r02*x4485))+(((-1.0)*x4483)));
evalcond[3]=((((-1.0)*cj1*x4482))+((r21*x4486))+(((-1.0)*gconst104*r20*x4485))+((sj1*sj2))+((r22*x4479)));
evalcond[4]=((((-1.0)*cj0*x4484))+(((-1.0)*cj0*sj1*x4482))+(((-1.0)*gconst104*r00*x4485))+((r02*x4479))+((r01*x4486)));
evalcond[5]=(((x4480*x4481))+(((-1.0)*sj0*sj1*x4482))+(((-1.0)*gconst104*r10*x4485))+((r12*x4479))+(((-1.0)*x4483*x4484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4489=((-1.0)*r11);
IkReal x4491 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4491)==0){
continue;
}
IkReal x4490=pow(x4491,-0.5);
CheckValue<IkReal> x4492 = IKatan2WithCheck(IkReal(x4489),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4492.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4492.value))));
IkReal gconst106=(x4489*x4490);
IkReal gconst107=((1.0)*r10*x4490);
CheckValue<IkReal> x4493 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4493.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4493.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4494=((-1.0)*r11);
CheckValue<IkReal> x4497 = IKatan2WithCheck(IkReal(x4494),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4497.valid){
continue;
}
IkReal x4495=((1.0)*(x4497.value));
IkReal x4496=x4490;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4495)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4495)));
IkReal gconst106=(x4494*x4496);
IkReal gconst107=((1.0)*r10*x4496);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4498=((-1.0)*r11);
CheckValue<IkReal> x4501 = IKatan2WithCheck(IkReal(x4498),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4501.valid){
continue;
}
IkReal x4499=((1.0)*(x4501.value));
IkReal x4500=x4490;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4499)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4499)));
IkReal gconst106=(x4498*x4500);
IkReal gconst107=((1.0)*r10*x4500);
IkReal x4502=r12*r12;
IkReal x4503=((1.0)*sj0);
IkReal x4504=(cj0*r02);
IkReal x4505=x4490;
j4eval[0]=((IKabs((((r12*x4504*x4505))+((sj0*x4502*x4505))+(((-1.0)*x4503*x4505)))))+(IKabs(((((-1.0)*x4504))+(((-1.0)*r12*x4503))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4506=((-1.0)*r11);
CheckValue<IkReal> x4509 = IKatan2WithCheck(IkReal(x4506),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4509.valid){
continue;
}
IkReal x4507=((1.0)*(x4509.value));
IkReal x4508=x4490;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4507)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4507)));
IkReal gconst106=(x4506*x4508);
IkReal gconst107=((1.0)*r10*x4508);
IkReal x4510=r12*r12;
IkReal x4511=((1.0)+(((-1.0)*x4510)));
IkReal x4512=(r22*sj1*sj2);
IkReal x4513=(cj1*cj2*r22);
CheckValue<IkReal> x4520=IKPowWithIntegerCheck(x4511,-1);
if(!x4520.valid){
continue;
}
IkReal x4514=x4520.value;
CheckValue<IkReal> x4521=IKPowWithIntegerCheck(((-1.0)+x4510),-1);
if(!x4521.valid){
continue;
}
IkReal x4515=x4521.value;
IkReal x4516=((1.0)*x4514);
if((x4511) < -0.00001)
continue;
IkReal x4517=IKsqrt(x4511);
IkReal x4518=(r12*x4515*x4517);
IkReal x4519=((((-1.0)*(r22*r22)))+(((-1.0)*x4516*(r10*r10)*(r20*r20)))+(((-1.0)*x4516*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x4514)));
j4eval[0]=x4519;
j4eval[1]=((IKabs(((((-1.0)*x4512*x4518))+((x4513*x4518)))))+(IKabs((x4512+(((-1.0)*x4513))))));
j4eval[2]=IKsign(x4519);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4522=(sj1*sj2);
IkReal x4523=(gconst106*r21);
IkReal x4524=(gconst107*r20);
IkReal x4525=(cj1*cj2);
CheckValue<IkReal> x4526 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4525))+((r22*x4522)))),IkReal(((((-1.0)*x4522*x4524))+((x4524*x4525))+(((-1.0)*x4523*x4525))+((x4522*x4523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4526.valid){
continue;
}
CheckValue<IkReal> x4527=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4523*x4523)))+(((2.0)*x4523*x4524))+(((-1.0)*(x4524*x4524)))+(((-1.0)*(r22*r22))))),-1);
if(!x4527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4526.value)+(((1.5707963267949)*(x4527.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4528=IKsin(j4);
IkReal x4529=IKcos(j4);
IkReal x4530=(gconst107*r10);
IkReal x4531=(gconst107*r00);
IkReal x4532=((1.0)*cj2);
IkReal x4533=(gconst107*r20);
IkReal x4534=((1.0)*sj0);
IkReal x4535=(cj1*sj2);
IkReal x4536=((1.0)*x4529);
IkReal x4537=(gconst106*x4529);
IkReal x4538=(gconst106*x4528);
IkReal x4539=((1.0)*x4528);
evalcond[0]=(((r21*x4538))+(((-1.0)*r22*x4536))+(((-1.0)*x4533*x4539)));
evalcond[1]=((((-1.0)*x4530*x4539))+cj0+(((-1.0)*r12*x4536))+((r11*x4538)));
evalcond[2]=(((r01*x4538))+(((-1.0)*x4534))+(((-1.0)*x4531*x4539))+(((-1.0)*r02*x4536)));
evalcond[3]=(((r21*x4537))+(((-1.0)*cj1*x4532))+((sj1*sj2))+((r22*x4528))+(((-1.0)*x4533*x4536)));
evalcond[4]=(((r01*x4537))+(((-1.0)*x4531*x4536))+((r02*x4528))+(((-1.0)*cj0*x4535))+(((-1.0)*cj0*sj1*x4532)));
evalcond[5]=((((-1.0)*x4530*x4536))+((r12*x4528))+(((-1.0)*x4534*x4535))+((r11*x4537))+(((-1.0)*sj0*sj1*x4532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4540=((1.0)*sj0);
IkReal x4541=((1.0)*gconst106);
CheckValue<IkReal> x4542 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4540))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst106*r11*x4540))+(((-1.0)*cj0*r01*x4541))+((gconst107*r10*sj0))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4542.valid){
continue;
}
CheckValue<IkReal> x4543=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4541)))),-1);
if(!x4543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4542.value)+(((1.5707963267949)*(x4543.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4544=IKsin(j4);
IkReal x4545=IKcos(j4);
IkReal x4546=(gconst107*r10);
IkReal x4547=(gconst107*r00);
IkReal x4548=((1.0)*cj2);
IkReal x4549=(gconst107*r20);
IkReal x4550=((1.0)*sj0);
IkReal x4551=(cj1*sj2);
IkReal x4552=((1.0)*x4545);
IkReal x4553=(gconst106*x4545);
IkReal x4554=(gconst106*x4544);
IkReal x4555=((1.0)*x4544);
evalcond[0]=((((-1.0)*x4549*x4555))+((r21*x4554))+(((-1.0)*r22*x4552)));
evalcond[1]=((((-1.0)*r12*x4552))+cj0+((r11*x4554))+(((-1.0)*x4546*x4555)));
evalcond[2]=(((r01*x4554))+(((-1.0)*x4547*x4555))+(((-1.0)*x4550))+(((-1.0)*r02*x4552)));
evalcond[3]=(((r22*x4544))+((sj1*sj2))+(((-1.0)*x4549*x4552))+((r21*x4553))+(((-1.0)*cj1*x4548)));
evalcond[4]=(((r01*x4553))+((r02*x4544))+(((-1.0)*x4547*x4552))+(((-1.0)*cj0*sj1*x4548))+(((-1.0)*cj0*x4551)));
evalcond[5]=((((-1.0)*x4550*x4551))+((r11*x4553))+(((-1.0)*sj0*sj1*x4548))+((r12*x4544))+(((-1.0)*x4546*x4552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4556=((1.0)*gconst107);
CheckValue<IkReal> x4557 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4556))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4557.valid){
continue;
}
CheckValue<IkReal> x4558=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4556))+(((-1.0)*gconst106*r00)))),-1);
if(!x4558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4557.value)+(((1.5707963267949)*(x4558.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4559=IKsin(j4);
IkReal x4560=IKcos(j4);
IkReal x4561=(gconst107*r10);
IkReal x4562=(gconst107*r00);
IkReal x4563=((1.0)*cj2);
IkReal x4564=(gconst107*r20);
IkReal x4565=((1.0)*sj0);
IkReal x4566=(cj1*sj2);
IkReal x4567=((1.0)*x4560);
IkReal x4568=(gconst106*x4560);
IkReal x4569=(gconst106*x4559);
IkReal x4570=((1.0)*x4559);
evalcond[0]=((((-1.0)*x4564*x4570))+((r21*x4569))+(((-1.0)*r22*x4567)));
evalcond[1]=(cj0+((r11*x4569))+(((-1.0)*r12*x4567))+(((-1.0)*x4561*x4570)));
evalcond[2]=((((-1.0)*r02*x4567))+(((-1.0)*x4562*x4570))+((r01*x4569))+(((-1.0)*x4565)));
evalcond[3]=((((-1.0)*cj1*x4563))+((sj1*sj2))+((r21*x4568))+((r22*x4559))+(((-1.0)*x4564*x4567)));
evalcond[4]=(((r02*x4559))+(((-1.0)*cj0*x4566))+(((-1.0)*cj0*sj1*x4563))+((r01*x4568))+(((-1.0)*x4562*x4567)));
evalcond[5]=(((r11*x4568))+((r12*x4559))+(((-1.0)*sj0*sj1*x4563))+(((-1.0)*x4561*x4567))+(((-1.0)*x4565*x4566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4571=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4571;
j4eval[1]=IKsign(x4571);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4572=((1.0)*cj5);
IkReal x4573=((((-1.0)*r01*x4572))+(((-1.0)*r00*sj5)));
j4eval[0]=x4573;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4572))))));
j4eval[2]=IKsign(x4573);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4574=(sj1*sj2);
IkReal x4575=(cj5*r10);
IkReal x4576=(r11*sj5);
IkReal x4577=(cj1*cj2);
IkReal x4578=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4578;
j4eval[1]=((IKabs((((r12*x4577))+(((-1.0)*r12*x4574)))))+(IKabs(((((-1.0)*x4574*x4575))+((x4574*x4576))+((x4575*x4577))+(((-1.0)*x4576*x4577))))));
j4eval[2]=IKsign(x4578);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4579=(sj1*sj2);
IkReal x4580=(cj5*r10);
IkReal x4581=(r11*sj5);
IkReal x4582=(cj1*cj2);
CheckValue<IkReal> x4583 = IKatan2WithCheck(IkReal((((x4579*x4581))+(((-1.0)*x4579*x4580))+(((-1.0)*x4581*x4582))+((x4580*x4582)))),IkReal(((((-1.0)*r12*x4579))+((r12*x4582)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4583.valid){
continue;
}
CheckValue<IkReal> x4584=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4583.value)+(((1.5707963267949)*(x4584.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4585=IKcos(j4);
IkReal x4586=IKsin(j4);
IkReal x4587=(cj5*r00);
IkReal x4588=(cj5*r10);
IkReal x4589=(r21*sj5);
IkReal x4590=((1.0)*cj2);
IkReal x4591=(cj5*r20);
IkReal x4592=((1.0)*x4585);
IkReal x4593=((1.0)*x4586);
IkReal x4594=(sj5*x4586);
IkReal x4595=(sj5*x4585);
evalcond[0]=(((r11*x4595))+(((-1.0)*x4588*x4592))+((r12*x4586)));
evalcond[1]=((((-1.0)*r22*x4592))+(((-1.0)*x4591*x4593))+((x4586*x4589)));
evalcond[2]=((((-1.0)*x4587*x4593))+(((-1.0)*r02*x4592))+((r01*x4594)));
evalcond[3]=((1.0)+((r11*x4594))+(((-1.0)*x4588*x4593))+(((-1.0)*r12*x4592)));
evalcond[4]=(((r22*x4586))+((sj1*sj2))+(((-1.0)*x4591*x4592))+((x4585*x4589))+(((-1.0)*cj1*x4590)));
evalcond[5]=(((r02*x4586))+(((-1.0)*cj1*sj2))+(((-1.0)*x4587*x4592))+(((-1.0)*sj1*x4590))+((r01*x4595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4596=((1.0)*cj5);
CheckValue<IkReal> x4597 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4597.valid){
continue;
}
CheckValue<IkReal> x4598=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4596)))),-1);
if(!x4598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4597.value)+(((1.5707963267949)*(x4598.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4599=IKcos(j4);
IkReal x4600=IKsin(j4);
IkReal x4601=(cj5*r00);
IkReal x4602=(cj5*r10);
IkReal x4603=(r21*sj5);
IkReal x4604=((1.0)*cj2);
IkReal x4605=(cj5*r20);
IkReal x4606=((1.0)*x4599);
IkReal x4607=((1.0)*x4600);
IkReal x4608=(sj5*x4600);
IkReal x4609=(sj5*x4599);
evalcond[0]=(((r11*x4609))+((r12*x4600))+(((-1.0)*x4602*x4606)));
evalcond[1]=(((x4600*x4603))+(((-1.0)*x4605*x4607))+(((-1.0)*r22*x4606)));
evalcond[2]=(((r01*x4608))+(((-1.0)*r02*x4606))+(((-1.0)*x4601*x4607)));
evalcond[3]=((1.0)+((r11*x4608))+(((-1.0)*x4602*x4607))+(((-1.0)*r12*x4606)));
evalcond[4]=(((x4599*x4603))+(((-1.0)*cj1*x4604))+((sj1*sj2))+((r22*x4600))+(((-1.0)*x4605*x4606)));
evalcond[5]=(((r01*x4609))+(((-1.0)*cj1*sj2))+(((-1.0)*x4601*x4606))+((r02*x4600))+(((-1.0)*sj1*x4604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4610=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4610.valid){
continue;
}
CheckValue<IkReal> x4611 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4610.value)))+(x4611.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4612=IKcos(j4);
IkReal x4613=IKsin(j4);
IkReal x4614=(cj5*r00);
IkReal x4615=(cj5*r10);
IkReal x4616=(r21*sj5);
IkReal x4617=((1.0)*cj2);
IkReal x4618=(cj5*r20);
IkReal x4619=((1.0)*x4612);
IkReal x4620=((1.0)*x4613);
IkReal x4621=(sj5*x4613);
IkReal x4622=(sj5*x4612);
evalcond[0]=(((r11*x4622))+((r12*x4613))+(((-1.0)*x4615*x4619)));
evalcond[1]=((((-1.0)*x4618*x4620))+(((-1.0)*r22*x4619))+((x4613*x4616)));
evalcond[2]=((((-1.0)*r02*x4619))+(((-1.0)*x4614*x4620))+((r01*x4621)));
evalcond[3]=((1.0)+((r11*x4621))+(((-1.0)*r12*x4619))+(((-1.0)*x4615*x4620)));
evalcond[4]=(((sj1*sj2))+((r22*x4613))+(((-1.0)*cj1*x4617))+((x4612*x4616))+(((-1.0)*x4618*x4619)));
evalcond[5]=((((-1.0)*sj1*x4617))+((r02*x4613))+(((-1.0)*cj1*sj2))+(((-1.0)*x4614*x4619))+((r01*x4622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4623=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4623;
j4eval[1]=IKsign(x4623);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4624=((1.0)*cj5);
IkReal x4625=((((-1.0)*r21*x4624))+(((-1.0)*r20*sj5)));
j4eval[0]=x4625;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4624))))));
j4eval[2]=IKsign(x4625);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4626=cj5*cj5;
IkReal x4627=r11*r11;
IkReal x4628=(r11*sj5);
IkReal x4629=(cj5*r10);
IkReal x4630=((r12*r12)+((x4626*(r10*r10)))+x4627+(((-2.0)*x4628*x4629))+(((-1.0)*x4626*x4627)));
j4eval[0]=x4630;
j4eval[1]=IKsign(x4630);
j4eval[2]=((IKabs((x4628+(((-1.0)*x4629)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4631=cj5*cj5;
IkReal x4632=r11*r11;
IkReal x4633=(cj5*r10);
IkReal x4634=(r11*sj5);
CheckValue<IkReal> x4635 = IKatan2WithCheck(IkReal(((((-1.0)*x4633))+x4634)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4635.valid){
continue;
}
CheckValue<IkReal> x4636=IKPowWithIntegerCheck(IKsign(((r12*r12)+x4632+((x4631*(r10*r10)))+(((-1.0)*x4631*x4632))+(((-2.0)*x4633*x4634)))),-1);
if(!x4636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4635.value)+(((1.5707963267949)*(x4636.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4637=IKcos(j4);
IkReal x4638=IKsin(j4);
IkReal x4639=(cj5*r00);
IkReal x4640=(cj5*r10);
IkReal x4641=(r21*sj5);
IkReal x4642=(cj5*r20);
IkReal x4643=((1.0)*x4637);
IkReal x4644=((1.0)*x4638);
IkReal x4645=(sj5*x4638);
IkReal x4646=(sj5*x4637);
evalcond[0]=(((r12*x4638))+((r11*x4646))+(((-1.0)*x4640*x4643)));
evalcond[1]=(((x4638*x4641))+(((-1.0)*r22*x4643))+(((-1.0)*x4642*x4644)));
evalcond[2]=((((-1.0)*r02*x4643))+((r01*x4645))+(((-1.0)*x4639*x4644)));
evalcond[3]=((-1.0)+((r11*x4645))+(((-1.0)*x4640*x4644))+(((-1.0)*r12*x4643)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x4646))+((r02*x4638))+(((-1.0)*x4639*x4643)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4637*x4641))+((r22*x4638))+(((-1.0)*x4642*x4643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4647=((1.0)*cj5);
CheckValue<IkReal> x4648 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4647)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4648.valid){
continue;
}
CheckValue<IkReal> x4649=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4647))+(((-1.0)*r20*sj5)))),-1);
if(!x4649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4648.value)+(((1.5707963267949)*(x4649.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4650=IKcos(j4);
IkReal x4651=IKsin(j4);
IkReal x4652=(cj5*r00);
IkReal x4653=(cj5*r10);
IkReal x4654=(r21*sj5);
IkReal x4655=(cj5*r20);
IkReal x4656=((1.0)*x4650);
IkReal x4657=((1.0)*x4651);
IkReal x4658=(sj5*x4651);
IkReal x4659=(sj5*x4650);
evalcond[0]=(((r12*x4651))+((r11*x4659))+(((-1.0)*x4653*x4656)));
evalcond[1]=((((-1.0)*x4655*x4657))+(((-1.0)*r22*x4656))+((x4651*x4654)));
evalcond[2]=((((-1.0)*r02*x4656))+((r01*x4658))+(((-1.0)*x4652*x4657)));
evalcond[3]=((-1.0)+((r11*x4658))+(((-1.0)*x4653*x4657))+(((-1.0)*r12*x4656)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x4651))+((r01*x4659))+(((-1.0)*x4652*x4656)));
evalcond[5]=(((x4650*x4654))+(((-1.0)*x4655*x4656))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4660 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4660.valid){
continue;
}
CheckValue<IkReal> x4661=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4660.value)+(((1.5707963267949)*(x4661.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4662=IKcos(j4);
IkReal x4663=IKsin(j4);
IkReal x4664=(cj5*r00);
IkReal x4665=(cj5*r10);
IkReal x4666=(r21*sj5);
IkReal x4667=(cj5*r20);
IkReal x4668=((1.0)*x4662);
IkReal x4669=((1.0)*x4663);
IkReal x4670=(sj5*x4663);
IkReal x4671=(sj5*x4662);
evalcond[0]=(((r12*x4663))+((r11*x4671))+(((-1.0)*x4665*x4668)));
evalcond[1]=((((-1.0)*x4667*x4669))+((x4663*x4666))+(((-1.0)*r22*x4668)));
evalcond[2]=((((-1.0)*x4664*x4669))+((r01*x4670))+(((-1.0)*r02*x4668)));
evalcond[3]=((-1.0)+((r11*x4670))+(((-1.0)*r12*x4668))+(((-1.0)*x4665*x4669)));
evalcond[4]=(((cj2*sj1))+((r02*x4663))+((cj1*sj2))+(((-1.0)*x4664*x4668))+((r01*x4671)));
evalcond[5]=((((-1.0)*x4667*x4668))+((x4662*x4666))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4672=((-1.0)*r00);
IkReal x4674 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4674)==0){
continue;
}
IkReal x4673=pow(x4674,-0.5);
CheckValue<IkReal> x4675 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4672),IKFAST_ATAN2_MAGTHRESH);
if(!x4675.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4675.value));
IkReal gconst109=(r01*x4673);
IkReal gconst110=(x4672*x4673);
CheckValue<IkReal> x4676 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4676.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4676.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4677=((-1.0)*r00);
IkReal x4678=x4673;
CheckValue<IkReal> x4680 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4677),IKFAST_ATAN2_MAGTHRESH);
if(!x4680.valid){
continue;
}
IkReal x4679=((-1.0)*(x4680.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4679;
IkReal gconst108=x4679;
IkReal gconst109=(r01*x4678);
IkReal gconst110=(x4677*x4678);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4681=((1.0)*sj0);
IkReal x4682=((1.0)*gconst109);
CheckValue<IkReal> x4683=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst110*r21))+(((-1.0)*r20*x4682)))),-1);
if(!x4683.valid){
continue;
}
CheckValue<IkReal> x4684 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4681)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*cj0*r01*x4682))+(((-1.0)*gconst109*r11*x4681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4683.value)))+(x4684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4685=IKsin(j4);
IkReal x4686=IKcos(j4);
IkReal x4687=(gconst109*r21);
IkReal x4688=((1.0)*cj2);
IkReal x4689=((1.0)*sj0);
IkReal x4690=(cj1*sj2);
IkReal x4691=((1.0)*x4686);
IkReal x4692=(gconst109*x4685);
IkReal x4693=(gconst109*x4686);
IkReal x4694=((1.0)*gconst110*x4685);
evalcond[0]=((((-1.0)*r20*x4694))+(((-1.0)*r22*x4691))+((x4685*x4687)));
evalcond[1]=((((-1.0)*r12*x4691))+cj0+((r11*x4692))+(((-1.0)*r10*x4694)));
evalcond[2]=((((-1.0)*r00*x4694))+(((-1.0)*r02*x4691))+((r01*x4692))+(((-1.0)*x4689)));
evalcond[3]=((((-1.0)*cj1*x4688))+((sj1*sj2))+((r22*x4685))+((x4686*x4687))+(((-1.0)*gconst110*r20*x4691)));
evalcond[4]=(((r02*x4685))+(((-1.0)*gconst110*r00*x4691))+(((-1.0)*cj0*sj1*x4688))+(((-1.0)*cj0*x4690))+((r01*x4693)));
evalcond[5]=((((-1.0)*gconst110*r10*x4691))+(((-1.0)*sj0*sj1*x4688))+((r12*x4685))+((r11*x4693))+(((-1.0)*x4689*x4690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4695=((1.0)*gconst110);
CheckValue<IkReal> x4696 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4695))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4696.valid){
continue;
}
CheckValue<IkReal> x4697=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x4695)))),-1);
if(!x4697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4696.value)+(((1.5707963267949)*(x4697.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4698=IKsin(j4);
IkReal x4699=IKcos(j4);
IkReal x4700=(gconst109*r21);
IkReal x4701=((1.0)*cj2);
IkReal x4702=((1.0)*sj0);
IkReal x4703=(cj1*sj2);
IkReal x4704=((1.0)*x4699);
IkReal x4705=(gconst109*x4698);
IkReal x4706=(gconst109*x4699);
IkReal x4707=((1.0)*gconst110*x4698);
evalcond[0]=((((-1.0)*r22*x4704))+((x4698*x4700))+(((-1.0)*r20*x4707)));
evalcond[1]=(cj0+(((-1.0)*r12*x4704))+(((-1.0)*r10*x4707))+((r11*x4705)));
evalcond[2]=((((-1.0)*r00*x4707))+(((-1.0)*r02*x4704))+((r01*x4705))+(((-1.0)*x4702)));
evalcond[3]=(((x4699*x4700))+(((-1.0)*gconst110*r20*x4704))+((sj1*sj2))+((r22*x4698))+(((-1.0)*cj1*x4701)));
evalcond[4]=(((r02*x4698))+(((-1.0)*gconst110*r00*x4704))+(((-1.0)*cj0*sj1*x4701))+(((-1.0)*cj0*x4703))+((r01*x4706)));
evalcond[5]=((((-1.0)*sj0*sj1*x4701))+(((-1.0)*x4702*x4703))+((r12*x4698))+(((-1.0)*gconst110*r10*x4704))+((r11*x4706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4708=((-1.0)*r01);
IkReal x4710 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4710)==0){
continue;
}
IkReal x4709=pow(x4710,-0.5);
CheckValue<IkReal> x4711 = IKatan2WithCheck(IkReal(x4708),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4711.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4711.value))));
IkReal gconst112=(x4708*x4709);
IkReal gconst113=((1.0)*r00*x4709);
CheckValue<IkReal> x4712 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4712.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4712.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4713=((-1.0)*r01);
CheckValue<IkReal> x4716 = IKatan2WithCheck(IkReal(x4713),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4716.valid){
continue;
}
IkReal x4714=((1.0)*(x4716.value));
IkReal x4715=x4709;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4714)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4714)));
IkReal gconst112=(x4713*x4715);
IkReal gconst113=((1.0)*r00*x4715);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4717=((-1.0)*r01);
CheckValue<IkReal> x4720 = IKatan2WithCheck(IkReal(x4717),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4720.valid){
continue;
}
IkReal x4718=((1.0)*(x4720.value));
IkReal x4719=x4709;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4718)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4718)));
IkReal gconst112=(x4717*x4719);
IkReal gconst113=((1.0)*r00*x4719);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4721=((-1.0)*r01);
CheckValue<IkReal> x4724 = IKatan2WithCheck(IkReal(x4721),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4724.valid){
continue;
}
IkReal x4722=((1.0)*(x4724.value));
IkReal x4723=x4709;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4722)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4722)));
IkReal gconst112=(x4721*x4723);
IkReal gconst113=((1.0)*r00*x4723);
IkReal x4725=r02*r02;
IkReal x4726=(r12*sj0);
IkReal x4727=((1.0)*cj0);
IkReal x4728=x4709;
j4eval[0]=((IKabs(((((-1.0)*x4726))+(((-1.0)*r02*x4727)))))+(IKabs(((((-1.0)*x4727*x4728))+((r02*x4726*x4728))+((cj0*x4725*x4728))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4729=((1.0)*sj0);
IkReal x4730=((1.0)*gconst112);
CheckValue<IkReal> x4731 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4729))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst112*r11*x4729))+((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4730)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4731.valid){
continue;
}
CheckValue<IkReal> x4732=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4730))+(((-1.0)*gconst113*r21)))),-1);
if(!x4732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4731.value)+(((1.5707963267949)*(x4732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4733=IKsin(j4);
IkReal x4734=IKcos(j4);
IkReal x4735=(gconst113*r20);
IkReal x4736=(gconst112*r21);
IkReal x4737=((1.0)*cj2);
IkReal x4738=(gconst113*r00);
IkReal x4739=(gconst113*r10);
IkReal x4740=((1.0)*sj0);
IkReal x4741=(cj1*sj2);
IkReal x4742=((1.0)*x4734);
IkReal x4743=((1.0)*x4733);
IkReal x4744=(gconst112*x4734);
IkReal x4745=(gconst112*x4733);
evalcond[0]=((((-1.0)*r22*x4742))+((x4733*x4736))+(((-1.0)*x4735*x4743)));
evalcond[1]=(((r11*x4745))+(((-1.0)*r12*x4742))+cj0+(((-1.0)*x4739*x4743)));
evalcond[2]=(((r01*x4745))+(((-1.0)*x4740))+(((-1.0)*x4738*x4743))+(((-1.0)*r02*x4742)));
evalcond[3]=(((x4734*x4736))+(((-1.0)*cj1*x4737))+((sj1*sj2))+((r22*x4733))+(((-1.0)*x4735*x4742)));
evalcond[4]=((((-1.0)*cj0*x4741))+((r01*x4744))+(((-1.0)*cj0*sj1*x4737))+((r02*x4733))+(((-1.0)*x4738*x4742)));
evalcond[5]=(((r11*x4744))+(((-1.0)*sj0*sj1*x4737))+(((-1.0)*x4740*x4741))+(((-1.0)*x4739*x4742))+((r12*x4733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4746=((1.0)*gconst113);
CheckValue<IkReal> x4747=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4746))+(((-1.0)*gconst112*r10)))),-1);
if(!x4747.valid){
continue;
}
CheckValue<IkReal> x4748 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4746)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4747.value)))+(x4748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4749=IKsin(j4);
IkReal x4750=IKcos(j4);
IkReal x4751=(gconst113*r20);
IkReal x4752=(gconst112*r21);
IkReal x4753=((1.0)*cj2);
IkReal x4754=(gconst113*r00);
IkReal x4755=(gconst113*r10);
IkReal x4756=((1.0)*sj0);
IkReal x4757=(cj1*sj2);
IkReal x4758=((1.0)*x4750);
IkReal x4759=((1.0)*x4749);
IkReal x4760=(gconst112*x4750);
IkReal x4761=(gconst112*x4749);
evalcond[0]=((((-1.0)*r22*x4758))+(((-1.0)*x4751*x4759))+((x4749*x4752)));
evalcond[1]=((((-1.0)*x4755*x4759))+cj0+(((-1.0)*r12*x4758))+((r11*x4761)));
evalcond[2]=((((-1.0)*x4754*x4759))+((r01*x4761))+(((-1.0)*x4756))+(((-1.0)*r02*x4758)));
evalcond[3]=((((-1.0)*cj1*x4753))+((sj1*sj2))+((x4750*x4752))+(((-1.0)*x4751*x4758))+((r22*x4749)));
evalcond[4]=((((-1.0)*x4754*x4758))+(((-1.0)*cj0*sj1*x4753))+((r01*x4760))+((r02*x4749))+(((-1.0)*cj0*x4757)));
evalcond[5]=((((-1.0)*x4755*x4758))+(((-1.0)*x4756*x4757))+((r12*x4749))+(((-1.0)*sj0*sj1*x4753))+((r11*x4760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4762=((1.0)*gconst113);
CheckValue<IkReal> x4763=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r00))+(((-1.0)*r01*x4762)))),-1);
if(!x4763.valid){
continue;
}
CheckValue<IkReal> x4764 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4763.value)))+(x4764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4765=IKsin(j4);
IkReal x4766=IKcos(j4);
IkReal x4767=(gconst113*r20);
IkReal x4768=(gconst112*r21);
IkReal x4769=((1.0)*cj2);
IkReal x4770=(gconst113*r00);
IkReal x4771=(gconst113*r10);
IkReal x4772=((1.0)*sj0);
IkReal x4773=(cj1*sj2);
IkReal x4774=((1.0)*x4766);
IkReal x4775=((1.0)*x4765);
IkReal x4776=(gconst112*x4766);
IkReal x4777=(gconst112*x4765);
evalcond[0]=((((-1.0)*x4767*x4775))+(((-1.0)*r22*x4774))+((x4765*x4768)));
evalcond[1]=(((r11*x4777))+cj0+(((-1.0)*r12*x4774))+(((-1.0)*x4771*x4775)));
evalcond[2]=(((r01*x4777))+(((-1.0)*x4770*x4775))+(((-1.0)*x4772))+(((-1.0)*r02*x4774)));
evalcond[3]=(((r22*x4765))+((x4766*x4768))+(((-1.0)*x4767*x4774))+((sj1*sj2))+(((-1.0)*cj1*x4769)));
evalcond[4]=(((r02*x4765))+(((-1.0)*cj0*x4773))+((r01*x4776))+(((-1.0)*cj0*sj1*x4769))+(((-1.0)*x4770*x4774)));
evalcond[5]=(((r11*x4776))+(((-1.0)*sj0*sj1*x4769))+(((-1.0)*x4771*x4774))+(((-1.0)*x4772*x4773))+((r12*x4765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4778=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4778;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4778);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4779=((1.0)*cj5);
IkReal x4780=((((-1.0)*r11*x4779))+(((-1.0)*r10*sj5)));
j4eval[0]=x4780;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4779)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4780);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4781=cj5*cj5;
IkReal x4782=r01*r01;
IkReal x4783=(cj5*r00);
IkReal x4784=(r01*sj5);
IkReal x4785=(((x4781*(r00*r00)))+(((-2.0)*x4783*x4784))+x4782+(((-1.0)*x4781*x4782))+(r02*r02));
j4eval[0]=x4785;
j4eval[1]=IKsign(x4785);
j4eval[2]=((IKabs(r02))+(IKabs((x4784+(((-1.0)*x4783))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4786=cj5*cj5;
IkReal x4787=r01*r01;
IkReal x4788=(r01*sj5);
IkReal x4789=(cj5*r00);
CheckValue<IkReal> x4790 = IKatan2WithCheck(IkReal((x4788+(((-1.0)*x4789)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4790.valid){
continue;
}
CheckValue<IkReal> x4791=IKPowWithIntegerCheck(IKsign((x4787+(((-2.0)*x4788*x4789))+(r02*r02)+(((-1.0)*x4786*x4787))+((x4786*(r00*r00))))),-1);
if(!x4791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4790.value)+(((1.5707963267949)*(x4791.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4792=IKcos(j4);
IkReal x4793=IKsin(j4);
IkReal x4794=(cj5*r00);
IkReal x4795=(cj5*r10);
IkReal x4796=(r21*sj5);
IkReal x4797=((1.0)*cj2);
IkReal x4798=(cj5*r20);
IkReal x4799=((1.0)*x4792);
IkReal x4800=((1.0)*x4793);
IkReal x4801=(sj5*x4793);
IkReal x4802=(sj5*x4792);
evalcond[0]=(((r01*x4802))+(((-1.0)*x4794*x4799))+((r02*x4793)));
evalcond[1]=(((x4793*x4796))+(((-1.0)*r22*x4799))+(((-1.0)*x4798*x4800)));
evalcond[2]=((((-1.0)*r12*x4799))+(((-1.0)*x4795*x4800))+((r11*x4801)));
evalcond[3]=((-1.0)+((r01*x4801))+(((-1.0)*r02*x4799))+(((-1.0)*x4794*x4800)));
evalcond[4]=(((sj1*sj2))+((x4792*x4796))+(((-1.0)*cj1*x4797))+(((-1.0)*x4798*x4799))+((r22*x4793)));
evalcond[5]=((((-1.0)*sj1*x4797))+(((-1.0)*cj1*sj2))+(((-1.0)*x4795*x4799))+((r12*x4793))+((r11*x4802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4803=((1.0)*cj5);
CheckValue<IkReal> x4804=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4803)))),-1);
if(!x4804.valid){
continue;
}
CheckValue<IkReal> x4805 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4803)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4804.value)))+(x4805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4806=IKcos(j4);
IkReal x4807=IKsin(j4);
IkReal x4808=(cj5*r00);
IkReal x4809=(cj5*r10);
IkReal x4810=(r21*sj5);
IkReal x4811=((1.0)*cj2);
IkReal x4812=(cj5*r20);
IkReal x4813=((1.0)*x4806);
IkReal x4814=((1.0)*x4807);
IkReal x4815=(sj5*x4807);
IkReal x4816=(sj5*x4806);
evalcond[0]=(((r02*x4807))+(((-1.0)*x4808*x4813))+((r01*x4816)));
evalcond[1]=(((x4807*x4810))+(((-1.0)*r22*x4813))+(((-1.0)*x4812*x4814)));
evalcond[2]=((((-1.0)*x4809*x4814))+((r11*x4815))+(((-1.0)*r12*x4813)));
evalcond[3]=((-1.0)+(((-1.0)*x4808*x4814))+(((-1.0)*r02*x4813))+((r01*x4815)));
evalcond[4]=(((x4806*x4810))+((sj1*sj2))+(((-1.0)*cj1*x4811))+((r22*x4807))+(((-1.0)*x4812*x4813)));
evalcond[5]=((((-1.0)*x4809*x4813))+((r11*x4816))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4811))+((r12*x4807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4817=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4817.valid){
continue;
}
CheckValue<IkReal> x4818 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4817.value)))+(x4818.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4819=IKcos(j4);
IkReal x4820=IKsin(j4);
IkReal x4821=(cj5*r00);
IkReal x4822=(cj5*r10);
IkReal x4823=(r21*sj5);
IkReal x4824=((1.0)*cj2);
IkReal x4825=(cj5*r20);
IkReal x4826=((1.0)*x4819);
IkReal x4827=((1.0)*x4820);
IkReal x4828=(sj5*x4820);
IkReal x4829=(sj5*x4819);
evalcond[0]=(((r02*x4820))+(((-1.0)*x4821*x4826))+((r01*x4829)));
evalcond[1]=(((x4820*x4823))+(((-1.0)*r22*x4826))+(((-1.0)*x4825*x4827)));
evalcond[2]=(((r11*x4828))+(((-1.0)*x4822*x4827))+(((-1.0)*r12*x4826)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4826))+(((-1.0)*x4821*x4827))+((r01*x4828)));
evalcond[4]=(((r22*x4820))+((x4819*x4823))+((sj1*sj2))+(((-1.0)*x4825*x4826))+(((-1.0)*cj1*x4824)));
evalcond[5]=(((r11*x4829))+(((-1.0)*x4822*x4826))+(((-1.0)*cj1*sj2))+((r12*x4820))+(((-1.0)*sj1*x4824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4830=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4830;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4830);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4831=((1.0)*cj5);
IkReal x4832=((((-1.0)*r21*x4831))+(((-1.0)*r20*sj5)));
j4eval[0]=x4832;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4831))+((r11*sj5))))));
j4eval[2]=IKsign(x4832);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4833=cj5*cj5;
IkReal x4834=r01*r01;
IkReal x4835=(r01*sj5);
IkReal x4836=(cj5*r00);
IkReal x4837=((((2.0)*x4835*x4836))+(((-1.0)*(r02*r02)))+(((-1.0)*x4834))+((x4833*x4834))+(((-1.0)*x4833*(r00*r00))));
j4eval[0]=x4837;
j4eval[1]=IKsign(x4837);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4836))+x4835))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4838=cj5*cj5;
IkReal x4839=r01*r01;
IkReal x4840=(r01*sj5);
IkReal x4841=(cj5*r00);
CheckValue<IkReal> x4842=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x4839))+((x4838*x4839))+(((-1.0)*x4838*(r00*r00)))+(((2.0)*x4840*x4841)))),-1);
if(!x4842.valid){
continue;
}
CheckValue<IkReal> x4843 = IKatan2WithCheck(IkReal(((((-1.0)*x4841))+x4840)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4842.value)))+(x4843.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4844=IKcos(j4);
IkReal x4845=IKsin(j4);
IkReal x4846=(cj5*r00);
IkReal x4847=(cj5*r10);
IkReal x4848=(r21*sj5);
IkReal x4849=(cj5*r20);
IkReal x4850=((1.0)*x4844);
IkReal x4851=((1.0)*x4845);
IkReal x4852=(sj5*x4845);
IkReal x4853=(sj5*x4844);
evalcond[0]=(((r02*x4845))+((r01*x4853))+(((-1.0)*x4846*x4850)));
evalcond[1]=((((-1.0)*r22*x4850))+((x4845*x4848))+(((-1.0)*x4849*x4851)));
evalcond[2]=((((-1.0)*x4847*x4851))+(((-1.0)*r12*x4850))+((r11*x4852)));
evalcond[3]=((1.0)+((r01*x4852))+(((-1.0)*r02*x4850))+(((-1.0)*x4846*x4851)));
evalcond[4]=((((-1.0)*x4847*x4850))+((cj2*sj1))+((cj1*sj2))+((r12*x4845))+((r11*x4853)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4845))+((x4844*x4848))+(((-1.0)*x4849*x4850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4854=((1.0)*cj5);
CheckValue<IkReal> x4855 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4854))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4855.valid){
continue;
}
CheckValue<IkReal> x4856=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4854))+(((-1.0)*r20*sj5)))),-1);
if(!x4856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4855.value)+(((1.5707963267949)*(x4856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4857=IKcos(j4);
IkReal x4858=IKsin(j4);
IkReal x4859=(cj5*r00);
IkReal x4860=(cj5*r10);
IkReal x4861=(r21*sj5);
IkReal x4862=(cj5*r20);
IkReal x4863=((1.0)*x4857);
IkReal x4864=((1.0)*x4858);
IkReal x4865=(sj5*x4858);
IkReal x4866=(sj5*x4857);
evalcond[0]=(((r01*x4866))+(((-1.0)*x4859*x4863))+((r02*x4858)));
evalcond[1]=((((-1.0)*x4862*x4864))+(((-1.0)*r22*x4863))+((x4858*x4861)));
evalcond[2]=(((r11*x4865))+(((-1.0)*r12*x4863))+(((-1.0)*x4860*x4864)));
evalcond[3]=((1.0)+((r01*x4865))+(((-1.0)*x4859*x4864))+(((-1.0)*r02*x4863)));
evalcond[4]=(((r11*x4866))+((cj2*sj1))+((r12*x4858))+((cj1*sj2))+(((-1.0)*x4860*x4863)));
evalcond[5]=((((-1.0)*x4862*x4863))+((r22*x4858))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4857*x4861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4867 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4867.valid){
continue;
}
CheckValue<IkReal> x4868=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4867.value)+(((1.5707963267949)*(x4868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4869=IKcos(j4);
IkReal x4870=IKsin(j4);
IkReal x4871=(cj5*r00);
IkReal x4872=(cj5*r10);
IkReal x4873=(r21*sj5);
IkReal x4874=(cj5*r20);
IkReal x4875=((1.0)*x4869);
IkReal x4876=((1.0)*x4870);
IkReal x4877=(sj5*x4870);
IkReal x4878=(sj5*x4869);
evalcond[0]=(((r02*x4870))+((r01*x4878))+(((-1.0)*x4871*x4875)));
evalcond[1]=((((-1.0)*r22*x4875))+(((-1.0)*x4874*x4876))+((x4870*x4873)));
evalcond[2]=((((-1.0)*r12*x4875))+((r11*x4877))+(((-1.0)*x4872*x4876)));
evalcond[3]=((1.0)+((r01*x4877))+(((-1.0)*x4871*x4876))+(((-1.0)*r02*x4875)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4870))+((r11*x4878))+(((-1.0)*x4872*x4875)));
evalcond[5]=(((x4869*x4873))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4874*x4875))+((r22*x4870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4879=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4879);
rxp1_1=(px*r21);
rxp1_2=(r11*x4879);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4880=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4880);
rxp1_1=(px*r21);
rxp1_2=(r11*x4880);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4881=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4881);
rxp1_1=(px*r21);
rxp1_2=(r11*x4881);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4884=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4884.valid){
continue;
}
IkReal x4882=x4884.value;
IkReal x4883=(sj0*x4882);
cj4array[0]=(((cj1*sj2*x4883))+((cj2*sj1*x4883)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4885=IKsin(j4);
IkReal x4886=IKcos(j4);
IkReal x4887=(r21*sj5);
IkReal x4888=((1.0)*cj5*r20);
evalcond[0]=(r02*x4885);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4886)));
evalcond[2]=(((x4885*x4887))+(((-1.0)*x4885*x4888)));
evalcond[3]=((((-1.0)*cj5*r10*x4885))+((r11*sj5*x4885)));
evalcond[4]=(((x4886*x4887))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4886*x4888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4890=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4890.valid){
continue;
}
IkReal x4889=x4890.value;
cj4array[0]=(((cj1*cj2*x4889))+(((-1.0)*sj1*sj2*x4889)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4891=IKsin(j4);
IkReal x4892=IKcos(j4);
IkReal x4893=((1.0)*sj0);
IkReal x4894=((1.0)*cj5);
IkReal x4895=(sj5*x4891);
evalcond[0]=(r02*x4891);
evalcond[1]=((((-1.0)*x4893))+(((-1.0)*r02*x4892)));
evalcond[2]=(((r21*x4895))+(((-1.0)*r20*x4891*x4894)));
evalcond[3]=(((r11*x4895))+(((-1.0)*r10*x4891*x4894)));
evalcond[4]=((((-1.0)*r10*x4892*x4894))+(((-1.0)*cj1*sj2*x4893))+((r11*sj5*x4892))+(((-1.0)*cj2*sj1*x4893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4896=IKPowWithIntegerCheck(r02,-1);
if(!x4896.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4896.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4897=IKsin(j4);
IkReal x4898=IKcos(j4);
IkReal x4899=((1.0)*cj1);
IkReal x4900=(r21*sj5);
IkReal x4901=((1.0)*cj5);
IkReal x4902=(r11*sj5);
evalcond[0]=(r02*x4897);
evalcond[1]=((((-1.0)*r20*x4897*x4901))+((x4897*x4900)));
evalcond[2]=((((-1.0)*r10*x4897*x4901))+((x4897*x4902)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj2*x4899))+(((-1.0)*r20*x4898*x4901))+((x4898*x4900)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x4898*x4901))+(((-1.0)*sj0*sj2*x4899))+((x4898*x4902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4903=((1.0)*sj0);
IkReal x4904=((1.0)*cj0);
CheckValue<IkReal> x4905=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4905.valid){
continue;
}
CheckValue<IkReal> x4906 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4903))+(((-1.0)*r02*x4904)))),IkReal(((((-1.0)*r01*sj5*x4904))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4905.value)))+(x4906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4907=IKsin(j4);
IkReal x4908=IKcos(j4);
IkReal x4909=(cj5*r00);
IkReal x4910=(cj5*r10);
IkReal x4911=(r21*sj5);
IkReal x4912=((1.0)*cj2);
IkReal x4913=((1.0)*sj0);
IkReal x4914=(cj1*sj2);
IkReal x4915=(cj5*r20);
IkReal x4916=((1.0)*x4908);
IkReal x4917=((1.0)*x4907);
IkReal x4918=(sj5*x4907);
IkReal x4919=(sj5*x4908);
evalcond[0]=((((-1.0)*x4915*x4917))+((x4907*x4911))+(((-1.0)*r22*x4916)));
evalcond[1]=(cj0+(((-1.0)*r12*x4916))+(((-1.0)*x4910*x4917))+((r11*x4918)));
evalcond[2]=((((-1.0)*x4909*x4917))+(((-1.0)*r02*x4916))+(((-1.0)*x4913))+((r01*x4918)));
evalcond[3]=((((-1.0)*x4915*x4916))+((sj1*sj2))+((x4908*x4911))+((r22*x4907))+(((-1.0)*cj1*x4912)));
evalcond[4]=((((-1.0)*cj0*sj1*x4912))+(((-1.0)*x4909*x4916))+((r02*x4907))+((r01*x4919))+(((-1.0)*cj0*x4914)));
evalcond[5]=((((-1.0)*x4910*x4916))+(((-1.0)*sj0*sj1*x4912))+(((-1.0)*x4913*x4914))+((r11*x4919))+((r12*x4907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4920=((1.0)*cj5);
CheckValue<IkReal> x4921 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4921.valid){
continue;
}
CheckValue<IkReal> x4922=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4920)))),-1);
if(!x4922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4921.value)+(((1.5707963267949)*(x4922.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4923=IKsin(j4);
IkReal x4924=IKcos(j4);
IkReal x4925=(cj5*r00);
IkReal x4926=(cj5*r10);
IkReal x4927=(r21*sj5);
IkReal x4928=((1.0)*cj2);
IkReal x4929=((1.0)*sj0);
IkReal x4930=(cj1*sj2);
IkReal x4931=(cj5*r20);
IkReal x4932=((1.0)*x4924);
IkReal x4933=((1.0)*x4923);
IkReal x4934=(sj5*x4923);
IkReal x4935=(sj5*x4924);
evalcond[0]=((((-1.0)*x4931*x4933))+((x4923*x4927))+(((-1.0)*r22*x4932)));
evalcond[1]=(cj0+(((-1.0)*x4926*x4933))+(((-1.0)*r12*x4932))+((r11*x4934)));
evalcond[2]=((((-1.0)*x4925*x4933))+(((-1.0)*r02*x4932))+((r01*x4934))+(((-1.0)*x4929)));
evalcond[3]=(((x4924*x4927))+(((-1.0)*x4931*x4932))+((sj1*sj2))+((r22*x4923))+(((-1.0)*cj1*x4928)));
evalcond[4]=((((-1.0)*x4925*x4932))+(((-1.0)*cj0*sj1*x4928))+((r01*x4935))+((r02*x4923))+(((-1.0)*cj0*x4930)));
evalcond[5]=((((-1.0)*x4926*x4932))+(((-1.0)*x4929*x4930))+((r11*x4935))+(((-1.0)*sj0*sj1*x4928))+((r12*x4923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4936=((1.0)*cj5);
CheckValue<IkReal> x4937 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4936)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4937.valid){
continue;
}
CheckValue<IkReal> x4938=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4936))+(((-1.0)*r00*sj5)))),-1);
if(!x4938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4937.value)+(((1.5707963267949)*(x4938.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4939=IKsin(j4);
IkReal x4940=IKcos(j4);
IkReal x4941=(cj5*r00);
IkReal x4942=(cj5*r10);
IkReal x4943=(r21*sj5);
IkReal x4944=((1.0)*cj2);
IkReal x4945=((1.0)*sj0);
IkReal x4946=(cj1*sj2);
IkReal x4947=(cj5*r20);
IkReal x4948=((1.0)*x4940);
IkReal x4949=((1.0)*x4939);
IkReal x4950=(sj5*x4939);
IkReal x4951=(sj5*x4940);
evalcond[0]=((((-1.0)*x4947*x4949))+((x4939*x4943))+(((-1.0)*r22*x4948)));
evalcond[1]=((((-1.0)*x4942*x4949))+cj0+(((-1.0)*r12*x4948))+((r11*x4950)));
evalcond[2]=((((-1.0)*x4941*x4949))+(((-1.0)*x4945))+(((-1.0)*r02*x4948))+((r01*x4950)));
evalcond[3]=((((-1.0)*cj1*x4944))+(((-1.0)*x4947*x4948))+((x4940*x4943))+((sj1*sj2))+((r22*x4939)));
evalcond[4]=((((-1.0)*x4941*x4948))+(((-1.0)*cj0*sj1*x4944))+(((-1.0)*cj0*x4946))+((r02*x4939))+((r01*x4951)));
evalcond[5]=((((-1.0)*x4942*x4948))+((r12*x4939))+(((-1.0)*x4945*x4946))+((r11*x4951))+(((-1.0)*sj0*sj1*x4944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4952=((1.0)*cj5);
IkReal x4953=((1.0)*sj5);
IkReal x4954=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4954;
j0eval[1]=((IKabs(((((-1.0)*r11*x4952))+(((-1.0)*r10*x4953)))))+(IKabs(((((-1.0)*r01*x4952))+(((-1.0)*r00*x4953))))));
j0eval[2]=IKsign(x4954);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4955=r21*r21;
IkReal x4956=cj5*cj5;
IkReal x4957=(cj2*sj1);
IkReal x4958=(cj1*sj2);
IkReal x4959=(r21*sj5);
IkReal x4960=((1.0)*cj5*r20);
IkReal x4961=((((-1.0)*x4955))+(((-1.0)*x4956*(r20*r20)))+(((-1.0)*(r22*r22)))+((x4955*x4956))+(((2.0)*cj5*r20*x4959)));
j4eval[0]=x4961;
j4eval[1]=((IKabs((((r22*x4957))+((r22*x4958)))))+(IKabs(((((-1.0)*x4958*x4960))+(((-1.0)*x4957*x4960))+((x4957*x4959))+((x4958*x4959))))));
j4eval[2]=IKsign(x4961);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4962=cj1*cj1;
IkReal x4963=(cj2*sj2);
IkReal x4964=(cj2*sj1);
IkReal x4965=(cj1*sj1);
j0eval[0]=(x4965+x4963+(((-2.0)*x4962*x4963))+(((-1.08418367346939)*sj2*x4962))+(((-1.08418367346939)*cj1*x4964))+(((-2.0)*cj1*cj2*x4964)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x4964)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.19192641276835)*py))+(((-0.195493438569105)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19192641276835)*px))+(((0.195493438569105)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.19192641276835)*py))+(((-0.195493438569105)*px))))+IKsqr(((((1.19192641276835)*px))+(((0.195493438569105)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.19192641276835)*py))+(((-0.195493438569105)*px))), ((((1.19192641276835)*px))+(((0.195493438569105)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4966=IKcos(j0);
IkReal x4967=IKsin(j0);
evalcond[0]=((((0.817)*x4966))+(((-1.0)*px))+(((-0.134)*x4967)));
evalcond[1]=((((0.817)*x4967))+(((-1.0)*py))+(((0.134)*x4966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4968=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4968;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4968);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4969=((1.0)*cj5);
IkReal x4970=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4969)));
j4eval[0]=x4970;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4969)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4970);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4971=((1.0)*cj5);
IkReal x4972=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4971)));
j4eval[0]=x4972;
j4eval[1]=IKsign(x4972);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4971))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4973=((1.0)*cj5);
CheckValue<IkReal> x4974 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4973))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4974.valid){
continue;
}
CheckValue<IkReal> x4975=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4973)))),-1);
if(!x4975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4974.value)+(((1.5707963267949)*(x4975.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4976=IKcos(j4);
IkReal x4977=IKsin(j4);
IkReal x4978=((1.0)*sj0);
IkReal x4979=(cj5*r00);
IkReal x4980=(cj5*r10);
IkReal x4981=(cj5*r20);
IkReal x4982=((1.0)*x4976);
IkReal x4983=((1.0)*x4977);
IkReal x4984=(sj5*x4976);
IkReal x4985=(sj5*x4977);
evalcond[0]=(((r22*x4977))+((r21*x4984))+(((-1.0)*x4981*x4982)));
evalcond[1]=((((-1.0)*r22*x4982))+((r21*x4985))+(((-1.0)*x4981*x4983)));
evalcond[2]=(cj0+((r11*x4985))+(((-1.0)*r12*x4982))+(((-1.0)*x4980*x4983)));
evalcond[3]=(((r01*x4984))+((r02*x4977))+(((-1.0)*x4979*x4982))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x4984))+((r12*x4977))+(((-1.0)*x4978))+(((-1.0)*x4980*x4982)));
evalcond[5]=(((r01*x4985))+(((-1.0)*x4978))+(((-1.0)*x4979*x4983))+(((-1.0)*r02*x4982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4986=((1.0)*cj5);
CheckValue<IkReal> x4987=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4986)))),-1);
if(!x4987.valid){
continue;
}
CheckValue<IkReal> x4988 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4987.value)))+(x4988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4989=IKcos(j4);
IkReal x4990=IKsin(j4);
IkReal x4991=((1.0)*sj0);
IkReal x4992=(cj5*r00);
IkReal x4993=(cj5*r10);
IkReal x4994=(cj5*r20);
IkReal x4995=((1.0)*x4989);
IkReal x4996=((1.0)*x4990);
IkReal x4997=(sj5*x4989);
IkReal x4998=(sj5*x4990);
evalcond[0]=(((r22*x4990))+(((-1.0)*x4994*x4995))+((r21*x4997)));
evalcond[1]=((((-1.0)*r22*x4995))+(((-1.0)*x4994*x4996))+((r21*x4998)));
evalcond[2]=(cj0+(((-1.0)*r12*x4995))+((r11*x4998))+(((-1.0)*x4993*x4996)));
evalcond[3]=(((r02*x4990))+((r01*x4997))+(((-1.0)*cj0))+(((-1.0)*x4992*x4995)));
evalcond[4]=((((-1.0)*x4991))+((r11*x4997))+(((-1.0)*x4993*x4995))+((r12*x4990)));
evalcond[5]=((((-1.0)*x4991))+(((-1.0)*r02*x4995))+((r01*x4998))+(((-1.0)*x4992*x4996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4999 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4999.valid){
continue;
}
CheckValue<IkReal> x5000=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4999.value)+(((1.5707963267949)*(x5000.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5001=IKcos(j4);
IkReal x5002=IKsin(j4);
IkReal x5003=((1.0)*sj0);
IkReal x5004=(cj5*r00);
IkReal x5005=(cj5*r10);
IkReal x5006=(cj5*r20);
IkReal x5007=((1.0)*x5001);
IkReal x5008=((1.0)*x5002);
IkReal x5009=(sj5*x5001);
IkReal x5010=(sj5*x5002);
evalcond[0]=((((-1.0)*x5006*x5007))+((r22*x5002))+((r21*x5009)));
evalcond[1]=((((-1.0)*x5006*x5008))+((r21*x5010))+(((-1.0)*r22*x5007)));
evalcond[2]=(cj0+(((-1.0)*r12*x5007))+((r11*x5010))+(((-1.0)*x5005*x5008)));
evalcond[3]=(((r02*x5002))+(((-1.0)*x5004*x5007))+((r01*x5009))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5002))+((r11*x5009))+(((-1.0)*x5005*x5007))+(((-1.0)*x5003)));
evalcond[5]=((((-1.0)*x5004*x5008))+((r01*x5010))+(((-1.0)*r02*x5007))+(((-1.0)*x5003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.73273825150958)*px))+(((7.03596744552376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((1.73273825150958)*px))+(((7.03596744552376)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((1.73273825150958)*px))+(((7.03596744552376)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5011=IKcos(j0);
IkReal x5012=IKsin(j0);
evalcond[0]=((((0.033)*x5011))+(((-1.0)*px))+(((-0.134)*x5012)));
evalcond[1]=((((0.033)*x5012))+(((-1.0)*py))+(((0.134)*x5011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5013=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5013;
j4eval[1]=IKsign(x5013);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5014=((1.0)*cj5);
IkReal x5015=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5014)));
j4eval[0]=x5015;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5014))))));
j4eval[2]=IKsign(x5015);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5016=cj5*cj5;
IkReal x5017=((1.0)*r20);
IkReal x5018=(r01*r21);
IkReal x5019=(r21*sj5);
IkReal x5020=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5016*x5017))+((x5016*x5018))+(((-1.0)*x5018))+((cj5*r00*x5019)));
j4eval[0]=x5020;
j4eval[1]=((IKabs((((cj0*x5019))+(((-1.0)*cj0*cj5*x5017)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5020);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5021=cj5*cj5;
IkReal x5022=((1.0)*r20);
IkReal x5023=(r01*r21);
IkReal x5024=(r21*sj5);
CheckValue<IkReal> x5025 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5024))+(((-1.0)*cj0*cj5*x5022)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5025.valid){
continue;
}
CheckValue<IkReal> x5026=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5021*x5023))+(((-1.0)*r00*x5021*x5022))+(((-1.0)*x5023))+((cj5*r00*x5024)))),-1);
if(!x5026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5025.value)+(((1.5707963267949)*(x5026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5027=IKcos(j4);
IkReal x5028=IKsin(j4);
IkReal x5029=(cj5*r00);
IkReal x5030=(cj5*r10);
IkReal x5031=(cj5*r20);
IkReal x5032=((1.0)*x5027);
IkReal x5033=((1.0)*x5028);
IkReal x5034=(sj5*x5027);
IkReal x5035=(sj5*x5028);
evalcond[0]=((((-1.0)*x5031*x5032))+((r22*x5028))+((r21*x5034)));
evalcond[1]=((((-1.0)*x5031*x5033))+((r21*x5035))+(((-1.0)*r22*x5032)));
evalcond[2]=(((r02*x5028))+cj0+(((-1.0)*x5029*x5032))+((r01*x5034)));
evalcond[3]=(sj0+(((-1.0)*x5030*x5032))+((r12*x5028))+((r11*x5034)));
evalcond[4]=(cj0+(((-1.0)*x5030*x5033))+((r11*x5035))+(((-1.0)*r12*x5032)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5029*x5033))+((r01*x5035))+(((-1.0)*r02*x5032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5036=((1.0)*cj5);
CheckValue<IkReal> x5037=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5036)))),-1);
if(!x5037.valid){
continue;
}
CheckValue<IkReal> x5038 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5036)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5037.value)))+(x5038.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5039=IKcos(j4);
IkReal x5040=IKsin(j4);
IkReal x5041=(cj5*r00);
IkReal x5042=(cj5*r10);
IkReal x5043=(cj5*r20);
IkReal x5044=((1.0)*x5039);
IkReal x5045=((1.0)*x5040);
IkReal x5046=(sj5*x5039);
IkReal x5047=(sj5*x5040);
evalcond[0]=((((-1.0)*x5043*x5044))+((r21*x5046))+((r22*x5040)));
evalcond[1]=((((-1.0)*x5043*x5045))+((r21*x5047))+(((-1.0)*r22*x5044)));
evalcond[2]=(cj0+(((-1.0)*x5041*x5044))+((r02*x5040))+((r01*x5046)));
evalcond[3]=(sj0+(((-1.0)*x5042*x5044))+((r12*x5040))+((r11*x5046)));
evalcond[4]=(cj0+(((-1.0)*x5042*x5045))+(((-1.0)*r12*x5044))+((r11*x5047)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5044))+(((-1.0)*x5041*x5045))+((r01*x5047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5048 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5048.valid){
continue;
}
CheckValue<IkReal> x5049=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5048.value)+(((1.5707963267949)*(x5049.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5050=IKcos(j4);
IkReal x5051=IKsin(j4);
IkReal x5052=(cj5*r00);
IkReal x5053=(cj5*r10);
IkReal x5054=(cj5*r20);
IkReal x5055=((1.0)*x5050);
IkReal x5056=((1.0)*x5051);
IkReal x5057=(sj5*x5050);
IkReal x5058=(sj5*x5051);
evalcond[0]=(((r21*x5057))+(((-1.0)*x5054*x5055))+((r22*x5051)));
evalcond[1]=(((r21*x5058))+(((-1.0)*x5054*x5056))+(((-1.0)*r22*x5055)));
evalcond[2]=(cj0+((r01*x5057))+(((-1.0)*x5052*x5055))+((r02*x5051)));
evalcond[3]=(sj0+((r12*x5051))+((r11*x5057))+(((-1.0)*x5053*x5055)));
evalcond[4]=(cj0+(((-1.0)*r12*x5055))+((r11*x5058))+(((-1.0)*x5053*x5056)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5058))+(((-1.0)*x5052*x5056))+(((-1.0)*r02*x5055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5059=IKsin(j0);
IkReal x5060=IKcos(j0);
IkReal x5061=((0.1)*sj5);
IkReal x5062=(cj5*r11);
IkReal x5063=(cj5*r01);
evalcond[0]=(((r00*sj5))+x5063+(((-1.0)*x5060)));
evalcond[1]=(((r10*sj5))+x5062+(((-1.0)*x5059)));
evalcond[2]=((((-0.134)*x5059))+(((-1.0)*px))+(((-0.1)*x5063))+(((-1.0)*r00*x5061)));
evalcond[3]=((((-1.0)*r10*x5061))+(((-1.0)*py))+(((-0.1)*x5062))+(((0.134)*x5060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5064=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5064;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5064);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5065=((1.0)*cj5);
IkReal x5066=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5065)));
j4eval[0]=x5066;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5065))))));
j4eval[2]=IKsign(x5066);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5067=cj5*cj5;
IkReal x5068=(r01*r11);
IkReal x5069=((1.0)*r00);
IkReal x5070=(r01*sj5);
IkReal x5071=((((-1.0)*r10*x5067*x5069))+(((-1.0)*r02*r12))+((x5067*x5068))+(((-1.0)*x5068))+((cj5*r10*x5070))+((cj5*r00*r11*sj5)));
j4eval[0]=x5071;
j4eval[1]=IKsign(x5071);
j4eval[2]=((IKabs((((cj0*x5070))+(((-1.0)*cj0*cj5*x5069)))))+(IKabs((cj0*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5072=cj5*cj5;
IkReal x5073=(r01*r11);
IkReal x5074=(cj5*r00);
IkReal x5075=(r01*sj5);
CheckValue<IkReal> x5076 = IKatan2WithCheck(IkReal((((cj0*x5075))+(((-1.0)*cj0*x5074)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5076.valid){
continue;
}
CheckValue<IkReal> x5077=IKPowWithIntegerCheck(IKsign((((r11*sj5*x5074))+(((-1.0)*r02*r12))+(((-1.0)*x5073))+(((-1.0)*r00*r10*x5072))+((x5072*x5073))+((cj5*r10*x5075)))),-1);
if(!x5077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5076.value)+(((1.5707963267949)*(x5077.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5078=IKcos(j4);
IkReal x5079=IKsin(j4);
IkReal x5080=(cj5*r00);
IkReal x5081=(r01*sj5);
IkReal x5082=(cj5*r10);
IkReal x5083=(cj5*r20);
IkReal x5084=((1.0)*x5078);
IkReal x5085=((1.0)*x5079);
IkReal x5086=(sj5*x5079);
IkReal x5087=(sj5*x5078);
evalcond[0]=((((-1.0)*x5080*x5084))+((r02*x5079))+((x5078*x5081)));
evalcond[1]=((((-1.0)*x5082*x5084))+((r11*x5087))+((r12*x5079)));
evalcond[2]=(((r21*x5086))+(((-1.0)*x5083*x5085))+(((-1.0)*r22*x5084)));
evalcond[3]=((1.0)+((r21*x5087))+(((-1.0)*x5083*x5084))+((r22*x5079)));
evalcond[4]=((((-1.0)*r12*x5084))+cj0+(((-1.0)*x5082*x5085))+((r11*x5086)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5080*x5085))+((x5079*x5081))+(((-1.0)*r02*x5084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5088=((1.0)*cj5);
CheckValue<IkReal> x5089 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5088))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5089.valid){
continue;
}
CheckValue<IkReal> x5090=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5088))+(((-1.0)*r00*sj5)))),-1);
if(!x5090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5089.value)+(((1.5707963267949)*(x5090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5091=IKcos(j4);
IkReal x5092=IKsin(j4);
IkReal x5093=(cj5*r00);
IkReal x5094=(r01*sj5);
IkReal x5095=(cj5*r10);
IkReal x5096=(cj5*r20);
IkReal x5097=((1.0)*x5091);
IkReal x5098=((1.0)*x5092);
IkReal x5099=(sj5*x5092);
IkReal x5100=(sj5*x5091);
evalcond[0]=((((-1.0)*x5093*x5097))+((x5091*x5094))+((r02*x5092)));
evalcond[1]=(((r12*x5092))+((r11*x5100))+(((-1.0)*x5095*x5097)));
evalcond[2]=((((-1.0)*r22*x5097))+((r21*x5099))+(((-1.0)*x5096*x5098)));
evalcond[3]=((1.0)+((r22*x5092))+(((-1.0)*x5096*x5097))+((r21*x5100)));
evalcond[4]=(cj0+((r11*x5099))+(((-1.0)*r12*x5097))+(((-1.0)*x5095*x5098)));
evalcond[5]=((((-1.0)*x5093*x5098))+(((-1.0)*sj0))+(((-1.0)*r02*x5097))+((x5092*x5094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5101 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5101.valid){
continue;
}
CheckValue<IkReal> x5102=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5101.value)+(((1.5707963267949)*(x5102.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5103=IKcos(j4);
IkReal x5104=IKsin(j4);
IkReal x5105=(cj5*r00);
IkReal x5106=(r01*sj5);
IkReal x5107=(cj5*r10);
IkReal x5108=(cj5*r20);
IkReal x5109=((1.0)*x5103);
IkReal x5110=((1.0)*x5104);
IkReal x5111=(sj5*x5104);
IkReal x5112=(sj5*x5103);
evalcond[0]=(((r02*x5104))+((x5103*x5106))+(((-1.0)*x5105*x5109)));
evalcond[1]=(((r12*x5104))+(((-1.0)*x5107*x5109))+((r11*x5112)));
evalcond[2]=((((-1.0)*r22*x5109))+((r21*x5111))+(((-1.0)*x5108*x5110)));
evalcond[3]=((1.0)+((r22*x5104))+((r21*x5112))+(((-1.0)*x5108*x5109)));
evalcond[4]=(cj0+(((-1.0)*x5107*x5110))+(((-1.0)*r12*x5109))+((r11*x5111)));
evalcond[5]=((((-1.0)*sj0))+((x5104*x5106))+(((-1.0)*r02*x5109))+(((-1.0)*x5105*x5110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5113=IKcos(j0);
IkReal x5114=IKsin(j0);
evalcond[0]=((((-0.134)*x5114))+(((-0.392)*x5113))+(((-1.0)*px)));
evalcond[1]=((((-0.392)*x5114))+(((-1.0)*py))+(((0.134)*x5113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5115=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5115;
j4eval[1]=IKsign(x5115);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5116=((1.0)*cj5);
IkReal x5117=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5116)));
j4eval[0]=x5117;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5116)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5117);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5118=cj5*cj5;
IkReal x5119=((1.0)*r20);
IkReal x5120=(r01*r21);
IkReal x5121=(r21*sj5);
IkReal x5122=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5121))+(((-1.0)*x5120))+((x5118*x5120))+(((-1.0)*r00*x5118*x5119)));
j4eval[0]=x5122;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5119))+((cj0*x5121)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5122);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5123=cj5*cj5;
IkReal x5124=((1.0)*r20);
IkReal x5125=(r01*r21);
IkReal x5126=(r21*sj5);
CheckValue<IkReal> x5127=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5123*x5124))+((cj5*r00*x5126))+((x5123*x5125))+(((-1.0)*x5125)))),-1);
if(!x5127.valid){
continue;
}
CheckValue<IkReal> x5128 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5126))+(((-1.0)*cj0*cj5*x5124)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5127.value)))+(x5128.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5129=IKcos(j4);
IkReal x5130=IKsin(j4);
IkReal x5131=(cj5*r00);
IkReal x5132=(cj5*r10);
IkReal x5133=(cj5*r20);
IkReal x5134=((1.0)*x5129);
IkReal x5135=((1.0)*x5130);
IkReal x5136=(sj5*x5129);
IkReal x5137=(sj5*x5130);
evalcond[0]=(((r22*x5130))+((r21*x5136))+(((-1.0)*x5133*x5134)));
evalcond[1]=(((r21*x5137))+(((-1.0)*r22*x5134))+(((-1.0)*x5133*x5135)));
evalcond[2]=((((-1.0)*x5131*x5134))+cj0+((r01*x5136))+((r02*x5130)));
evalcond[3]=(sj0+(((-1.0)*x5132*x5134))+((r12*x5130))+((r11*x5136)));
evalcond[4]=((((-1.0)*x5132*x5135))+cj0+((r11*x5137))+(((-1.0)*r12*x5134)));
evalcond[5]=((((-1.0)*x5131*x5135))+(((-1.0)*sj0))+((r01*x5137))+(((-1.0)*r02*x5134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5138=((1.0)*cj5);
CheckValue<IkReal> x5139=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5138)))),-1);
if(!x5139.valid){
continue;
}
CheckValue<IkReal> x5140 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5138))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5139.value)))+(x5140.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5141=IKcos(j4);
IkReal x5142=IKsin(j4);
IkReal x5143=(cj5*r00);
IkReal x5144=(cj5*r10);
IkReal x5145=(cj5*r20);
IkReal x5146=((1.0)*x5141);
IkReal x5147=((1.0)*x5142);
IkReal x5148=(sj5*x5141);
IkReal x5149=(sj5*x5142);
evalcond[0]=(((r21*x5148))+((r22*x5142))+(((-1.0)*x5145*x5146)));
evalcond[1]=(((r21*x5149))+(((-1.0)*r22*x5146))+(((-1.0)*x5145*x5147)));
evalcond[2]=(((r01*x5148))+cj0+(((-1.0)*x5143*x5146))+((r02*x5142)));
evalcond[3]=(sj0+((r12*x5142))+((r11*x5148))+(((-1.0)*x5144*x5146)));
evalcond[4]=(cj0+(((-1.0)*r12*x5146))+((r11*x5149))+(((-1.0)*x5144*x5147)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5149))+(((-1.0)*x5143*x5147))+(((-1.0)*r02*x5146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5150 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5150.valid){
continue;
}
CheckValue<IkReal> x5151=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5150.value)+(((1.5707963267949)*(x5151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5152=IKcos(j4);
IkReal x5153=IKsin(j4);
IkReal x5154=(cj5*r00);
IkReal x5155=(cj5*r10);
IkReal x5156=(cj5*r20);
IkReal x5157=((1.0)*x5152);
IkReal x5158=((1.0)*x5153);
IkReal x5159=(sj5*x5152);
IkReal x5160=(sj5*x5153);
evalcond[0]=(((r21*x5159))+((r22*x5153))+(((-1.0)*x5156*x5157)));
evalcond[1]=(((r21*x5160))+(((-1.0)*r22*x5157))+(((-1.0)*x5156*x5158)));
evalcond[2]=((((-1.0)*x5154*x5157))+((r01*x5159))+cj0+((r02*x5153)));
evalcond[3]=(((r11*x5159))+sj0+((r12*x5153))+(((-1.0)*x5155*x5157)));
evalcond[4]=(cj0+(((-1.0)*r12*x5157))+((r11*x5160))+(((-1.0)*x5155*x5158)));
evalcond[5]=((((-1.0)*x5154*x5158))+(((-1.0)*sj0))+((r01*x5160))+(((-1.0)*r02*x5157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5161=((1.0)*sj5);
IkReal x5162=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5162))+(((-1.0)*r10*x5161)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5161))+(((-1.0)*r01*x5162)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5162))+(((-1.0)*r10*x5161))))+IKsqr(((((-1.0)*r00*x5161))+(((-1.0)*r01*x5162))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5162))+(((-1.0)*r10*x5161))), ((((-1.0)*r00*x5161))+(((-1.0)*r01*x5162))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5163=IKsin(j0);
IkReal x5164=IKcos(j0);
IkReal x5165=(r10*sj5);
IkReal x5166=(r00*sj5);
IkReal x5167=(cj5*r11);
IkReal x5168=(cj5*r01);
evalcond[0]=(x5164+x5166+x5168);
evalcond[1]=(x5163+x5165+x5167);
evalcond[2]=((((-1.0)*px))+(((-0.1)*x5168))+(((-0.1)*x5166))+(((-0.134)*x5163)));
evalcond[3]=((((-1.0)*py))+(((-0.1)*x5167))+(((-0.1)*x5165))+(((0.134)*x5164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5169=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5169;
j4eval[1]=IKsign(x5169);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5170=((1.0)*cj5);
IkReal x5171=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5170)));
j4eval[0]=x5171;
j4eval[1]=IKsign(x5171);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5170))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5172=cj5*cj5;
IkReal x5173=(r01*r11);
IkReal x5174=((1.0)*r00);
IkReal x5175=(r01*sj5);
IkReal x5176=((((-1.0)*r02*r12))+(((-1.0)*r10*x5172*x5174))+(((-1.0)*x5173))+((cj5*r10*x5175))+((x5172*x5173))+((cj5*r00*r11*sj5)));
j4eval[0]=x5176;
j4eval[1]=IKsign(x5176);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5175))+(((-1.0)*cj0*cj5*x5174))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5177=cj5*cj5;
IkReal x5178=(r01*r11);
IkReal x5179=(cj5*r00);
IkReal x5180=(r01*sj5);
CheckValue<IkReal> x5181=IKPowWithIntegerCheck(IKsign((((r11*sj5*x5179))+(((-1.0)*r02*r12))+(((-1.0)*x5178))+(((-1.0)*r00*r10*x5177))+((cj5*r10*x5180))+((x5177*x5178)))),-1);
if(!x5181.valid){
continue;
}
CheckValue<IkReal> x5182 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5179))+((cj0*x5180)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5181.value)))+(x5182.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5183=IKcos(j4);
IkReal x5184=IKsin(j4);
IkReal x5185=(cj5*r00);
IkReal x5186=(r01*sj5);
IkReal x5187=(cj5*r10);
IkReal x5188=(cj5*r20);
IkReal x5189=((1.0)*x5183);
IkReal x5190=((1.0)*x5184);
IkReal x5191=(sj5*x5184);
IkReal x5192=(sj5*x5183);
evalcond[0]=(((x5183*x5186))+(((-1.0)*x5185*x5189))+((r02*x5184)));
evalcond[1]=(((r11*x5192))+(((-1.0)*x5187*x5189))+((r12*x5184)));
evalcond[2]=((((-1.0)*r22*x5189))+((r21*x5191))+(((-1.0)*x5188*x5190)));
evalcond[3]=((-1.0)+((r22*x5184))+(((-1.0)*x5188*x5189))+((r21*x5192)));
evalcond[4]=(cj0+((r11*x5191))+(((-1.0)*x5187*x5190))+(((-1.0)*r12*x5189)));
evalcond[5]=((((-1.0)*x5185*x5190))+(((-1.0)*sj0))+(((-1.0)*r02*x5189))+((x5184*x5186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5193=((1.0)*cj5);
CheckValue<IkReal> x5194 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5193)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5194.valid){
continue;
}
CheckValue<IkReal> x5195=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5193))+(((-1.0)*r10*sj5)))),-1);
if(!x5195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5194.value)+(((1.5707963267949)*(x5195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5196=IKcos(j4);
IkReal x5197=IKsin(j4);
IkReal x5198=(cj5*r00);
IkReal x5199=(r01*sj5);
IkReal x5200=(cj5*r10);
IkReal x5201=(cj5*r20);
IkReal x5202=((1.0)*x5196);
IkReal x5203=((1.0)*x5197);
IkReal x5204=(sj5*x5197);
IkReal x5205=(sj5*x5196);
evalcond[0]=(((r02*x5197))+(((-1.0)*x5198*x5202))+((x5196*x5199)));
evalcond[1]=((((-1.0)*x5200*x5202))+((r11*x5205))+((r12*x5197)));
evalcond[2]=((((-1.0)*x5201*x5203))+(((-1.0)*r22*x5202))+((r21*x5204)));
evalcond[3]=((-1.0)+(((-1.0)*x5201*x5202))+((r22*x5197))+((r21*x5205)));
evalcond[4]=((((-1.0)*x5200*x5203))+cj0+((r11*x5204))+(((-1.0)*r12*x5202)));
evalcond[5]=((((-1.0)*r02*x5202))+(((-1.0)*sj0))+(((-1.0)*x5198*x5203))+((x5197*x5199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5206=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5206.valid){
continue;
}
CheckValue<IkReal> x5207 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5206.value)))+(x5207.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5208=IKcos(j4);
IkReal x5209=IKsin(j4);
IkReal x5210=(cj5*r00);
IkReal x5211=(r01*sj5);
IkReal x5212=(cj5*r10);
IkReal x5213=(cj5*r20);
IkReal x5214=((1.0)*x5208);
IkReal x5215=((1.0)*x5209);
IkReal x5216=(sj5*x5209);
IkReal x5217=(sj5*x5208);
evalcond[0]=(((x5208*x5211))+((r02*x5209))+(((-1.0)*x5210*x5214)));
evalcond[1]=((((-1.0)*x5212*x5214))+((r11*x5217))+((r12*x5209)));
evalcond[2]=((((-1.0)*x5213*x5215))+(((-1.0)*r22*x5214))+((r21*x5216)));
evalcond[3]=((-1.0)+(((-1.0)*x5213*x5214))+((r22*x5209))+((r21*x5217)));
evalcond[4]=(cj0+(((-1.0)*x5212*x5215))+((r11*x5216))+(((-1.0)*r12*x5214)));
evalcond[5]=((((-1.0)*sj0))+((x5209*x5211))+(((-1.0)*x5210*x5215))+(((-1.0)*r02*x5214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5218=IKsin(j0);
IkReal x5219=IKcos(j0);
evalcond[0]=((((0.392)*x5219))+(((-0.134)*x5218))+(((-1.0)*px)));
evalcond[1]=((((0.392)*x5218))+(((-1.0)*py))+(((0.134)*x5219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5220=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5220;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5220);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5221=((1.0)*cj5);
IkReal x5222=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5221)));
j4eval[0]=x5222;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5221))))));
j4eval[2]=IKsign(x5222);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5223=((1.0)*cj5);
IkReal x5224=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5223)));
j4eval[0]=x5224;
j4eval[1]=IKsign(x5224);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5223))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5225=((1.0)*cj5);
CheckValue<IkReal> x5226=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5225)))),-1);
if(!x5226.valid){
continue;
}
CheckValue<IkReal> x5227 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5225))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5226.value)))+(x5227.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5228=IKcos(j4);
IkReal x5229=IKsin(j4);
IkReal x5230=((1.0)*sj0);
IkReal x5231=(cj5*r00);
IkReal x5232=(cj5*r10);
IkReal x5233=(cj5*r20);
IkReal x5234=((1.0)*x5228);
IkReal x5235=((1.0)*x5229);
IkReal x5236=(sj5*x5228);
IkReal x5237=(sj5*x5229);
evalcond[0]=(((r22*x5229))+((r21*x5236))+(((-1.0)*x5233*x5234)));
evalcond[1]=((((-1.0)*r22*x5234))+((r21*x5237))+(((-1.0)*x5233*x5235)));
evalcond[2]=(cj0+((r11*x5237))+(((-1.0)*r12*x5234))+(((-1.0)*x5232*x5235)));
evalcond[3]=(((r02*x5229))+((r01*x5236))+(((-1.0)*x5231*x5234))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5230))+((r11*x5236))+(((-1.0)*x5232*x5234))+((r12*x5229)));
evalcond[5]=((((-1.0)*x5230))+(((-1.0)*r02*x5234))+((r01*x5237))+(((-1.0)*x5231*x5235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5238=((1.0)*cj5);
CheckValue<IkReal> x5239=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5238)))),-1);
if(!x5239.valid){
continue;
}
CheckValue<IkReal> x5240 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5238))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5239.value)))+(x5240.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5241=IKcos(j4);
IkReal x5242=IKsin(j4);
IkReal x5243=((1.0)*sj0);
IkReal x5244=(cj5*r00);
IkReal x5245=(cj5*r10);
IkReal x5246=(cj5*r20);
IkReal x5247=((1.0)*x5241);
IkReal x5248=((1.0)*x5242);
IkReal x5249=(sj5*x5241);
IkReal x5250=(sj5*x5242);
evalcond[0]=(((r21*x5249))+(((-1.0)*x5246*x5247))+((r22*x5242)));
evalcond[1]=((((-1.0)*r22*x5247))+((r21*x5250))+(((-1.0)*x5246*x5248)));
evalcond[2]=((((-1.0)*r12*x5247))+cj0+((r11*x5250))+(((-1.0)*x5245*x5248)));
evalcond[3]=(((r01*x5249))+((r02*x5242))+(((-1.0)*cj0))+(((-1.0)*x5244*x5247)));
evalcond[4]=(((r11*x5249))+(((-1.0)*x5243))+((r12*x5242))+(((-1.0)*x5245*x5247)));
evalcond[5]=(((r01*x5250))+(((-1.0)*x5243))+(((-1.0)*r02*x5247))+(((-1.0)*x5244*x5248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5251 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5251.valid){
continue;
}
CheckValue<IkReal> x5252=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5251.value)+(((1.5707963267949)*(x5252.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5253=IKcos(j4);
IkReal x5254=IKsin(j4);
IkReal x5255=((1.0)*sj0);
IkReal x5256=(cj5*r00);
IkReal x5257=(cj5*r10);
IkReal x5258=(cj5*r20);
IkReal x5259=((1.0)*x5253);
IkReal x5260=((1.0)*x5254);
IkReal x5261=(sj5*x5253);
IkReal x5262=(sj5*x5254);
evalcond[0]=(((r22*x5254))+(((-1.0)*x5258*x5259))+((r21*x5261)));
evalcond[1]=((((-1.0)*x5258*x5260))+(((-1.0)*r22*x5259))+((r21*x5262)));
evalcond[2]=(cj0+((r11*x5262))+(((-1.0)*r12*x5259))+(((-1.0)*x5257*x5260)));
evalcond[3]=(((r01*x5261))+(((-1.0)*x5256*x5259))+(((-1.0)*cj0))+((r02*x5254)));
evalcond[4]=(((r12*x5254))+(((-1.0)*x5255))+((r11*x5261))+(((-1.0)*x5257*x5259)));
evalcond[5]=((((-1.0)*r02*x5259))+((r01*x5262))+(((-1.0)*x5255))+(((-1.0)*x5256*x5260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.195493438569105)*px))+(((-1.19192641276835)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.195493438569105)*py))+(((-1.19192641276835)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))))+IKsqr(((((0.195493438569105)*py))+(((-1.19192641276835)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))), ((((0.195493438569105)*py))+(((-1.19192641276835)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5263=IKcos(j0);
IkReal x5264=IKsin(j0);
evalcond[0]=((((-0.134)*x5264))+(((-1.0)*px))+(((-0.817)*x5263)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x5263))+(((-0.817)*x5264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5265=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5265;
j4eval[1]=IKsign(x5265);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5266=((1.0)*cj5);
IkReal x5267=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5266)));
j4eval[0]=x5267;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5266)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5267);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5268=cj5*cj5;
IkReal x5269=((1.0)*r20);
IkReal x5270=(r01*r21);
IkReal x5271=(r21*sj5);
IkReal x5272=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x5268*x5269))+(((-1.0)*r02*r22))+((cj5*r00*x5271))+((x5268*x5270))+(((-1.0)*x5270)));
j4eval[0]=x5272;
j4eval[1]=((IKabs((((cj0*x5271))+(((-1.0)*cj0*cj5*x5269)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5272);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5273=cj5*cj5;
IkReal x5274=((1.0)*r20);
IkReal x5275=(r01*r21);
IkReal x5276=(r21*sj5);
CheckValue<IkReal> x5277 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5276))+(((-1.0)*cj0*cj5*x5274)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5277.valid){
continue;
}
CheckValue<IkReal> x5278=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x5273*x5275))+(((-1.0)*r00*x5273*x5274))+(((-1.0)*r02*r22))+((cj5*r00*x5276))+(((-1.0)*x5275)))),-1);
if(!x5278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5277.value)+(((1.5707963267949)*(x5278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5279=IKcos(j4);
IkReal x5280=IKsin(j4);
IkReal x5281=(cj5*r00);
IkReal x5282=(cj5*r10);
IkReal x5283=(cj5*r20);
IkReal x5284=((1.0)*x5279);
IkReal x5285=((1.0)*x5280);
IkReal x5286=(sj5*x5279);
IkReal x5287=(sj5*x5280);
evalcond[0]=(((r22*x5280))+((r21*x5286))+(((-1.0)*x5283*x5284)));
evalcond[1]=((((-1.0)*r22*x5284))+((r21*x5287))+(((-1.0)*x5283*x5285)));
evalcond[2]=((((-1.0)*x5281*x5284))+((r02*x5280))+cj0+((r01*x5286)));
evalcond[3]=(((r12*x5280))+sj0+(((-1.0)*x5282*x5284))+((r11*x5286)));
evalcond[4]=(cj0+(((-1.0)*r12*x5284))+(((-1.0)*x5282*x5285))+((r11*x5287)));
evalcond[5]=((((-1.0)*x5281*x5285))+(((-1.0)*sj0))+((r01*x5287))+(((-1.0)*r02*x5284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5288=((1.0)*cj5);
CheckValue<IkReal> x5289=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5288)))),-1);
if(!x5289.valid){
continue;
}
CheckValue<IkReal> x5290 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5288)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5289.value)))+(x5290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5291=IKcos(j4);
IkReal x5292=IKsin(j4);
IkReal x5293=(cj5*r00);
IkReal x5294=(cj5*r10);
IkReal x5295=(cj5*r20);
IkReal x5296=((1.0)*x5291);
IkReal x5297=((1.0)*x5292);
IkReal x5298=(sj5*x5291);
IkReal x5299=(sj5*x5292);
evalcond[0]=(((r22*x5292))+((r21*x5298))+(((-1.0)*x5295*x5296)));
evalcond[1]=((((-1.0)*r22*x5296))+((r21*x5299))+(((-1.0)*x5295*x5297)));
evalcond[2]=(cj0+((r02*x5292))+((r01*x5298))+(((-1.0)*x5293*x5296)));
evalcond[3]=(((r12*x5292))+sj0+(((-1.0)*x5294*x5296))+((r11*x5298)));
evalcond[4]=(cj0+(((-1.0)*r12*x5296))+(((-1.0)*x5294*x5297))+((r11*x5299)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5299))+(((-1.0)*x5293*x5297))+(((-1.0)*r02*x5296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5300 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5300.valid){
continue;
}
CheckValue<IkReal> x5301=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5300.value)+(((1.5707963267949)*(x5301.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5302=IKcos(j4);
IkReal x5303=IKsin(j4);
IkReal x5304=(cj5*r00);
IkReal x5305=(cj5*r10);
IkReal x5306=(cj5*r20);
IkReal x5307=((1.0)*x5302);
IkReal x5308=((1.0)*x5303);
IkReal x5309=(sj5*x5302);
IkReal x5310=(sj5*x5303);
evalcond[0]=(((r21*x5309))+(((-1.0)*x5306*x5307))+((r22*x5303)));
evalcond[1]=((((-1.0)*r22*x5307))+(((-1.0)*x5306*x5308))+((r21*x5310)));
evalcond[2]=(cj0+((r02*x5303))+((r01*x5309))+(((-1.0)*x5304*x5307)));
evalcond[3]=(sj0+(((-1.0)*x5305*x5307))+((r12*x5303))+((r11*x5309)));
evalcond[4]=((((-1.0)*x5305*x5308))+cj0+(((-1.0)*r12*x5307))+((r11*x5310)));
evalcond[5]=(((r01*x5310))+(((-1.0)*sj0))+(((-1.0)*r02*x5307))+(((-1.0)*x5304*x5308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.03596744552376)*py))+(((-1.73273825150958)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((7.03596744552376)*py))+(((-1.73273825150958)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((7.03596744552376)*py))+(((-1.73273825150958)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5311=IKcos(j0);
IkReal x5312=IKsin(j0);
evalcond[0]=((((-0.134)*x5312))+(((-1.0)*px))+(((-0.033)*x5311)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x5311))+(((-0.033)*x5312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5313=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5313;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5313);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5314=((1.0)*cj5);
IkReal x5315=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5314)));
j4eval[0]=x5315;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5314)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5315);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5316=((1.0)*cj5);
IkReal x5317=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5316)));
j4eval[0]=x5317;
j4eval[1]=IKsign(x5317);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5316))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5318=((1.0)*cj5);
CheckValue<IkReal> x5319=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5318)))),-1);
if(!x5319.valid){
continue;
}
CheckValue<IkReal> x5320 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5318)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5319.value)))+(x5320.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5321=IKcos(j4);
IkReal x5322=IKsin(j4);
IkReal x5323=((1.0)*sj0);
IkReal x5324=(cj5*r00);
IkReal x5325=(cj5*r10);
IkReal x5326=(cj5*r20);
IkReal x5327=((1.0)*x5321);
IkReal x5328=((1.0)*x5322);
IkReal x5329=(sj5*x5321);
IkReal x5330=(sj5*x5322);
evalcond[0]=((((-1.0)*x5326*x5327))+((r22*x5322))+((r21*x5329)));
evalcond[1]=((((-1.0)*x5326*x5328))+(((-1.0)*r22*x5327))+((r21*x5330)));
evalcond[2]=((((-1.0)*x5325*x5328))+cj0+((r11*x5330))+(((-1.0)*r12*x5327)));
evalcond[3]=(((r01*x5329))+(((-1.0)*x5324*x5327))+((r02*x5322))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5325*x5327))+((r11*x5329))+((r12*x5322))+(((-1.0)*x5323)));
evalcond[5]=((((-1.0)*r02*x5327))+((r01*x5330))+(((-1.0)*x5323))+(((-1.0)*x5324*x5328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5331=((1.0)*cj5);
CheckValue<IkReal> x5332=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5331)))),-1);
if(!x5332.valid){
continue;
}
CheckValue<IkReal> x5333 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5331)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5332.value)))+(x5333.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5334=IKcos(j4);
IkReal x5335=IKsin(j4);
IkReal x5336=((1.0)*sj0);
IkReal x5337=(cj5*r00);
IkReal x5338=(cj5*r10);
IkReal x5339=(cj5*r20);
IkReal x5340=((1.0)*x5334);
IkReal x5341=((1.0)*x5335);
IkReal x5342=(sj5*x5334);
IkReal x5343=(sj5*x5335);
evalcond[0]=((((-1.0)*x5339*x5340))+((r22*x5335))+((r21*x5342)));
evalcond[1]=((((-1.0)*x5339*x5341))+(((-1.0)*r22*x5340))+((r21*x5343)));
evalcond[2]=(cj0+(((-1.0)*x5338*x5341))+((r11*x5343))+(((-1.0)*r12*x5340)));
evalcond[3]=(((r01*x5342))+((r02*x5335))+(((-1.0)*x5337*x5340))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5338*x5340))+((r12*x5335))+((r11*x5342))+(((-1.0)*x5336)));
evalcond[5]=((((-1.0)*r02*x5340))+((r01*x5343))+(((-1.0)*x5336))+(((-1.0)*x5337*x5341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5344 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5344.valid){
continue;
}
CheckValue<IkReal> x5345=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5344.value)+(((1.5707963267949)*(x5345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5346=IKcos(j4);
IkReal x5347=IKsin(j4);
IkReal x5348=((1.0)*sj0);
IkReal x5349=(cj5*r00);
IkReal x5350=(cj5*r10);
IkReal x5351=(cj5*r20);
IkReal x5352=((1.0)*x5346);
IkReal x5353=((1.0)*x5347);
IkReal x5354=(sj5*x5346);
IkReal x5355=(sj5*x5347);
evalcond[0]=((((-1.0)*x5351*x5352))+((r22*x5347))+((r21*x5354)));
evalcond[1]=((((-1.0)*x5351*x5353))+(((-1.0)*r22*x5352))+((r21*x5355)));
evalcond[2]=(cj0+((r11*x5355))+(((-1.0)*r12*x5352))+(((-1.0)*x5350*x5353)));
evalcond[3]=(((r01*x5354))+(((-1.0)*x5349*x5352))+((r02*x5347))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5347))+((r11*x5354))+(((-1.0)*x5348))+(((-1.0)*x5350*x5352)));
evalcond[5]=((((-1.0)*r02*x5352))+((r01*x5355))+(((-1.0)*x5348))+(((-1.0)*x5349*x5353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5356=((1.0)*sj5);
IkReal x5357=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5357))+(((-1.0)*r10*x5356)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5356))+(((-1.0)*r01*x5357)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5357))+(((-1.0)*r10*x5356))))+IKsqr(((((-1.0)*r00*x5356))+(((-1.0)*r01*x5357))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5357))+(((-1.0)*r10*x5356))), ((((-1.0)*r00*x5356))+(((-1.0)*r01*x5357))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5358=IKsin(j0);
IkReal x5359=IKcos(j0);
IkReal x5360=(r10*sj5);
IkReal x5361=(r00*sj5);
IkReal x5362=(cj5*r11);
IkReal x5363=(cj5*r01);
evalcond[0]=(x5363+x5361+x5359);
evalcond[1]=(x5362+x5360+x5358);
evalcond[2]=((((-1.0)*px))+(((-0.1)*x5361))+(((-0.1)*x5363))+(((-0.134)*x5358)));
evalcond[3]=((((0.134)*x5359))+(((-1.0)*py))+(((-0.1)*x5360))+(((-0.1)*x5362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5364=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5364;
j4eval[1]=IKsign(x5364);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5365=((1.0)*cj5);
IkReal x5366=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5365)));
j4eval[0]=x5366;
j4eval[1]=IKsign(x5366);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5365))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5367=cj5*cj5;
IkReal x5368=(r01*r11);
IkReal x5369=((1.0)*r00);
IkReal x5370=(r01*sj5);
IkReal x5371=((((-1.0)*r10*x5367*x5369))+(((-1.0)*r02*r12))+((cj5*r10*x5370))+(((-1.0)*x5368))+((x5367*x5368))+((cj5*r00*r11*sj5)));
j4eval[0]=x5371;
j4eval[1]=IKsign(x5371);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5370))+(((-1.0)*cj0*cj5*x5369))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5372=cj5*cj5;
IkReal x5373=(r01*r11);
IkReal x5374=(cj5*r00);
IkReal x5375=(r01*sj5);
CheckValue<IkReal> x5376 = IKatan2WithCheck(IkReal((((cj0*x5375))+(((-1.0)*cj0*x5374)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5376.valid){
continue;
}
CheckValue<IkReal> x5377=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((x5372*x5373))+((cj5*r10*x5375))+(((-1.0)*x5373))+(((-1.0)*r00*r10*x5372))+((r11*sj5*x5374)))),-1);
if(!x5377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5376.value)+(((1.5707963267949)*(x5377.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5378=IKcos(j4);
IkReal x5379=IKsin(j4);
IkReal x5380=(cj5*r00);
IkReal x5381=(r01*sj5);
IkReal x5382=(cj5*r10);
IkReal x5383=(cj5*r20);
IkReal x5384=((1.0)*x5378);
IkReal x5385=((1.0)*x5379);
IkReal x5386=(sj5*x5379);
IkReal x5387=(sj5*x5378);
evalcond[0]=(((x5378*x5381))+((r02*x5379))+(((-1.0)*x5380*x5384)));
evalcond[1]=((((-1.0)*x5382*x5384))+((r11*x5387))+((r12*x5379)));
evalcond[2]=((((-1.0)*x5383*x5385))+(((-1.0)*r22*x5384))+((r21*x5386)));
evalcond[3]=((-1.0)+((r22*x5379))+(((-1.0)*x5383*x5384))+((r21*x5387)));
evalcond[4]=((((-1.0)*x5382*x5385))+cj0+((r11*x5386))+(((-1.0)*r12*x5384)));
evalcond[5]=((((-1.0)*sj0))+((x5379*x5381))+(((-1.0)*r02*x5384))+(((-1.0)*x5380*x5385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5388=((1.0)*cj5);
CheckValue<IkReal> x5389 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5388)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5389.valid){
continue;
}
CheckValue<IkReal> x5390=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5388)))),-1);
if(!x5390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5389.value)+(((1.5707963267949)*(x5390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5391=IKcos(j4);
IkReal x5392=IKsin(j4);
IkReal x5393=(cj5*r00);
IkReal x5394=(r01*sj5);
IkReal x5395=(cj5*r10);
IkReal x5396=(cj5*r20);
IkReal x5397=((1.0)*x5391);
IkReal x5398=((1.0)*x5392);
IkReal x5399=(sj5*x5392);
IkReal x5400=(sj5*x5391);
evalcond[0]=(((r02*x5392))+((x5391*x5394))+(((-1.0)*x5393*x5397)));
evalcond[1]=(((r12*x5392))+((r11*x5400))+(((-1.0)*x5395*x5397)));
evalcond[2]=((((-1.0)*r22*x5397))+((r21*x5399))+(((-1.0)*x5396*x5398)));
evalcond[3]=((-1.0)+((r21*x5400))+((r22*x5392))+(((-1.0)*x5396*x5397)));
evalcond[4]=(cj0+((r11*x5399))+(((-1.0)*r12*x5397))+(((-1.0)*x5395*x5398)));
evalcond[5]=((((-1.0)*sj0))+((x5392*x5394))+(((-1.0)*x5393*x5398))+(((-1.0)*r02*x5397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5401=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5401.valid){
continue;
}
CheckValue<IkReal> x5402 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5401.value)))+(x5402.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5403=IKcos(j4);
IkReal x5404=IKsin(j4);
IkReal x5405=(cj5*r00);
IkReal x5406=(r01*sj5);
IkReal x5407=(cj5*r10);
IkReal x5408=(cj5*r20);
IkReal x5409=((1.0)*x5403);
IkReal x5410=((1.0)*x5404);
IkReal x5411=(sj5*x5404);
IkReal x5412=(sj5*x5403);
evalcond[0]=(((r02*x5404))+(((-1.0)*x5405*x5409))+((x5403*x5406)));
evalcond[1]=(((r12*x5404))+((r11*x5412))+(((-1.0)*x5407*x5409)));
evalcond[2]=((((-1.0)*r22*x5409))+((r21*x5411))+(((-1.0)*x5408*x5410)));
evalcond[3]=((-1.0)+((r22*x5404))+(((-1.0)*x5408*x5409))+((r21*x5412)));
evalcond[4]=(((r11*x5411))+cj0+(((-1.0)*x5407*x5410))+(((-1.0)*r12*x5409)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5409))+((x5404*x5406))+(((-1.0)*x5405*x5410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5413=IKsin(j0);
IkReal x5414=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.392)*x5414))+(((-0.134)*x5413)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x5414))+(((0.392)*x5413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5415=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5415;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5415);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5416=((1.0)*cj5);
IkReal x5417=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5416)));
j4eval[0]=x5417;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5416)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5417);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5418=((1.0)*cj5);
IkReal x5419=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5418)));
j4eval[0]=x5419;
j4eval[1]=IKsign(x5419);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5418)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5420=((1.0)*cj5);
CheckValue<IkReal> x5421 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5420))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5421.valid){
continue;
}
CheckValue<IkReal> x5422=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5420)))),-1);
if(!x5422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5421.value)+(((1.5707963267949)*(x5422.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5423=IKcos(j4);
IkReal x5424=IKsin(j4);
IkReal x5425=((1.0)*sj0);
IkReal x5426=(cj5*r00);
IkReal x5427=(cj5*r10);
IkReal x5428=(cj5*r20);
IkReal x5429=((1.0)*x5423);
IkReal x5430=((1.0)*x5424);
IkReal x5431=(sj5*x5423);
IkReal x5432=(sj5*x5424);
evalcond[0]=(((r22*x5424))+(((-1.0)*x5428*x5429))+((r21*x5431)));
evalcond[1]=((((-1.0)*x5428*x5430))+(((-1.0)*r22*x5429))+((r21*x5432)));
evalcond[2]=(cj0+(((-1.0)*x5427*x5430))+((r11*x5432))+(((-1.0)*r12*x5429)));
evalcond[3]=((((-1.0)*x5426*x5429))+((r02*x5424))+((r01*x5431))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5425))+((r12*x5424))+(((-1.0)*x5427*x5429))+((r11*x5431)));
evalcond[5]=((((-1.0)*x5425))+(((-1.0)*x5426*x5430))+(((-1.0)*r02*x5429))+((r01*x5432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5433=((1.0)*cj5);
CheckValue<IkReal> x5434=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5433))+(((-1.0)*r00*sj5)))),-1);
if(!x5434.valid){
continue;
}
CheckValue<IkReal> x5435 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5433))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5434.value)))+(x5435.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5436=IKcos(j4);
IkReal x5437=IKsin(j4);
IkReal x5438=((1.0)*sj0);
IkReal x5439=(cj5*r00);
IkReal x5440=(cj5*r10);
IkReal x5441=(cj5*r20);
IkReal x5442=((1.0)*x5436);
IkReal x5443=((1.0)*x5437);
IkReal x5444=(sj5*x5436);
IkReal x5445=(sj5*x5437);
evalcond[0]=(((r22*x5437))+(((-1.0)*x5441*x5442))+((r21*x5444)));
evalcond[1]=((((-1.0)*r22*x5442))+(((-1.0)*x5441*x5443))+((r21*x5445)));
evalcond[2]=(cj0+(((-1.0)*r12*x5442))+(((-1.0)*x5440*x5443))+((r11*x5445)));
evalcond[3]=(((r02*x5437))+((r01*x5444))+(((-1.0)*x5439*x5442))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5438))+(((-1.0)*x5440*x5442))+((r11*x5444))+((r12*x5437)));
evalcond[5]=(((r01*x5445))+(((-1.0)*x5438))+(((-1.0)*x5439*x5443))+(((-1.0)*r02*x5442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5446 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5446.valid){
continue;
}
CheckValue<IkReal> x5447=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5446.value)+(((1.5707963267949)*(x5447.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5448=IKcos(j4);
IkReal x5449=IKsin(j4);
IkReal x5450=((1.0)*sj0);
IkReal x5451=(cj5*r00);
IkReal x5452=(cj5*r10);
IkReal x5453=(cj5*r20);
IkReal x5454=((1.0)*x5448);
IkReal x5455=((1.0)*x5449);
IkReal x5456=(sj5*x5448);
IkReal x5457=(sj5*x5449);
evalcond[0]=(((r21*x5456))+((r22*x5449))+(((-1.0)*x5453*x5454)));
evalcond[1]=(((r21*x5457))+(((-1.0)*r22*x5454))+(((-1.0)*x5453*x5455)));
evalcond[2]=((((-1.0)*r12*x5454))+(((-1.0)*x5452*x5455))+cj0+((r11*x5457)));
evalcond[3]=((((-1.0)*x5451*x5454))+((r01*x5456))+((r02*x5449))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5452*x5454))+((r12*x5449))+(((-1.0)*x5450))+((r11*x5456)));
evalcond[5]=((((-1.0)*x5451*x5455))+((r01*x5457))+(((-1.0)*r02*x5454))+(((-1.0)*x5450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5458=IKsin(j0);
IkReal x5459=IKcos(j0);
IkReal x5460=((0.1)*sj5);
IkReal x5461=(cj5*r11);
IkReal x5462=(cj5*r01);
evalcond[0]=(((r00*sj5))+x5462+(((-1.0)*x5459)));
evalcond[1]=(x5461+((r10*sj5))+(((-1.0)*x5458)));
evalcond[2]=((((-0.134)*x5458))+(((-1.0)*px))+(((-0.1)*x5462))+(((-1.0)*r00*x5460)));
evalcond[3]=((((-1.0)*r10*x5460))+(((0.134)*x5459))+(((-1.0)*py))+(((-0.1)*x5461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5463=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5463;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5463);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5464=((1.0)*cj5);
IkReal x5465=((((-1.0)*r01*x5464))+(((-1.0)*r00*sj5)));
j4eval[0]=x5465;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5464))+((r11*sj5))))));
j4eval[2]=IKsign(x5465);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5466=cj5*cj5;
IkReal x5467=(r01*r11);
IkReal x5468=((1.0)*r00);
IkReal x5469=(r01*sj5);
IkReal x5470=(((x5466*x5467))+(((-1.0)*r02*r12))+(((-1.0)*r10*x5466*x5468))+(((-1.0)*x5467))+((cj5*r10*x5469))+((cj5*r00*r11*sj5)));
j4eval[0]=x5470;
j4eval[1]=IKsign(x5470);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5468))+((cj0*x5469))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5471=cj5*cj5;
IkReal x5472=(r01*r11);
IkReal x5473=(cj5*r00);
IkReal x5474=(r01*sj5);
CheckValue<IkReal> x5475=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5472))+((x5471*x5472))+(((-1.0)*r02*r12))+((cj5*r10*x5474))+((r11*sj5*x5473))+(((-1.0)*r00*r10*x5471)))),-1);
if(!x5475.valid){
continue;
}
CheckValue<IkReal> x5476 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5473))+((cj0*x5474)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5475.value)))+(x5476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5477=IKcos(j4);
IkReal x5478=IKsin(j4);
IkReal x5479=(cj5*r00);
IkReal x5480=(r01*sj5);
IkReal x5481=(cj5*r10);
IkReal x5482=(cj5*r20);
IkReal x5483=((1.0)*x5477);
IkReal x5484=((1.0)*x5478);
IkReal x5485=(sj5*x5478);
IkReal x5486=(sj5*x5477);
evalcond[0]=((((-1.0)*x5479*x5483))+((x5477*x5480))+((r02*x5478)));
evalcond[1]=((((-1.0)*x5481*x5483))+((r11*x5486))+((r12*x5478)));
evalcond[2]=((((-1.0)*r22*x5483))+((r21*x5485))+(((-1.0)*x5482*x5484)));
evalcond[3]=((1.0)+((r21*x5486))+((r22*x5478))+(((-1.0)*x5482*x5483)));
evalcond[4]=((((-1.0)*x5481*x5484))+(((-1.0)*r12*x5483))+cj0+((r11*x5485)));
evalcond[5]=((((-1.0)*x5479*x5484))+(((-1.0)*sj0))+((x5478*x5480))+(((-1.0)*r02*x5483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5487=((1.0)*cj5);
CheckValue<IkReal> x5488 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5487))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5488.valid){
continue;
}
CheckValue<IkReal> x5489=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5487)))),-1);
if(!x5489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5488.value)+(((1.5707963267949)*(x5489.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5490=IKcos(j4);
IkReal x5491=IKsin(j4);
IkReal x5492=(cj5*r00);
IkReal x5493=(r01*sj5);
IkReal x5494=(cj5*r10);
IkReal x5495=(cj5*r20);
IkReal x5496=((1.0)*x5490);
IkReal x5497=((1.0)*x5491);
IkReal x5498=(sj5*x5491);
IkReal x5499=(sj5*x5490);
evalcond[0]=((((-1.0)*x5492*x5496))+((x5490*x5493))+((r02*x5491)));
evalcond[1]=(((r12*x5491))+(((-1.0)*x5494*x5496))+((r11*x5499)));
evalcond[2]=((((-1.0)*x5495*x5497))+((r21*x5498))+(((-1.0)*r22*x5496)));
evalcond[3]=((1.0)+(((-1.0)*x5495*x5496))+((r21*x5499))+((r22*x5491)));
evalcond[4]=(cj0+(((-1.0)*x5494*x5497))+(((-1.0)*r12*x5496))+((r11*x5498)));
evalcond[5]=((((-1.0)*sj0))+((x5491*x5493))+(((-1.0)*x5492*x5497))+(((-1.0)*r02*x5496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5500 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5500.valid){
continue;
}
CheckValue<IkReal> x5501=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5500.value)+(((1.5707963267949)*(x5501.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5502=IKcos(j4);
IkReal x5503=IKsin(j4);
IkReal x5504=(cj5*r00);
IkReal x5505=(r01*sj5);
IkReal x5506=(cj5*r10);
IkReal x5507=(cj5*r20);
IkReal x5508=((1.0)*x5502);
IkReal x5509=((1.0)*x5503);
IkReal x5510=(sj5*x5503);
IkReal x5511=(sj5*x5502);
evalcond[0]=(((r02*x5503))+((x5502*x5505))+(((-1.0)*x5504*x5508)));
evalcond[1]=((((-1.0)*x5506*x5508))+((r12*x5503))+((r11*x5511)));
evalcond[2]=((((-1.0)*r22*x5508))+((r21*x5510))+(((-1.0)*x5507*x5509)));
evalcond[3]=((1.0)+((r21*x5511))+((r22*x5503))+(((-1.0)*x5507*x5508)));
evalcond[4]=(cj0+(((-1.0)*r12*x5508))+(((-1.0)*x5506*x5509))+((r11*x5510)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5508))+((x5503*x5505))+(((-1.0)*x5504*x5509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5512=IKcos(j0);
IkReal x5513=IKsin(j0);
evalcond[0]=((((-0.392)*x5512))+(((-1.0)*px))+(((-0.134)*x5513)));
evalcond[1]=((((-0.392)*x5513))+(((-1.0)*py))+(((0.134)*x5512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5514=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5514;
j4eval[1]=IKsign(x5514);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5515=((1.0)*cj5);
IkReal x5516=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5515)));
j4eval[0]=x5516;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5515)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5516);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5517=cj5*cj5;
IkReal x5518=((1.0)*r20);
IkReal x5519=(r01*r21);
IkReal x5520=(r21*sj5);
IkReal x5521=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5520))+(((-1.0)*x5519))+(((-1.0)*r00*x5517*x5518))+((x5517*x5519)));
j4eval[0]=x5521;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5518))+((cj0*x5520)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5522=cj5*cj5;
IkReal x5523=((1.0)*r20);
IkReal x5524=(r01*r21);
IkReal x5525=(r21*sj5);
CheckValue<IkReal> x5526 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5523))+((cj0*x5525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5526.valid){
continue;
}
CheckValue<IkReal> x5527=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5525))+((x5522*x5524))+(((-1.0)*r00*x5522*x5523))+(((-1.0)*x5524)))),-1);
if(!x5527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5526.value)+(((1.5707963267949)*(x5527.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5528=IKcos(j4);
IkReal x5529=IKsin(j4);
IkReal x5530=(cj5*r00);
IkReal x5531=(cj5*r10);
IkReal x5532=(cj5*r20);
IkReal x5533=((1.0)*x5528);
IkReal x5534=((1.0)*x5529);
IkReal x5535=(sj5*x5528);
IkReal x5536=(sj5*x5529);
evalcond[0]=(((r22*x5529))+((r21*x5535))+(((-1.0)*x5532*x5533)));
evalcond[1]=((((-1.0)*r22*x5533))+((r21*x5536))+(((-1.0)*x5532*x5534)));
evalcond[2]=(((r02*x5529))+cj0+(((-1.0)*x5530*x5533))+((r01*x5535)));
evalcond[3]=(sj0+((r11*x5535))+(((-1.0)*x5531*x5533))+((r12*x5529)));
evalcond[4]=(cj0+((r11*x5536))+(((-1.0)*x5531*x5534))+(((-1.0)*r12*x5533)));
evalcond[5]=((((-1.0)*r02*x5533))+(((-1.0)*sj0))+(((-1.0)*x5530*x5534))+((r01*x5536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5537=((1.0)*cj5);
CheckValue<IkReal> x5538 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5537)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5538.valid){
continue;
}
CheckValue<IkReal> x5539=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5537)))),-1);
if(!x5539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5538.value)+(((1.5707963267949)*(x5539.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5540=IKcos(j4);
IkReal x5541=IKsin(j4);
IkReal x5542=(cj5*r00);
IkReal x5543=(cj5*r10);
IkReal x5544=(cj5*r20);
IkReal x5545=((1.0)*x5540);
IkReal x5546=((1.0)*x5541);
IkReal x5547=(sj5*x5540);
IkReal x5548=(sj5*x5541);
evalcond[0]=((((-1.0)*x5544*x5545))+((r22*x5541))+((r21*x5547)));
evalcond[1]=((((-1.0)*x5544*x5546))+(((-1.0)*r22*x5545))+((r21*x5548)));
evalcond[2]=((((-1.0)*x5542*x5545))+cj0+((r02*x5541))+((r01*x5547)));
evalcond[3]=((((-1.0)*x5543*x5545))+sj0+((r12*x5541))+((r11*x5547)));
evalcond[4]=((((-1.0)*x5543*x5546))+cj0+((r11*x5548))+(((-1.0)*r12*x5545)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5542*x5546))+(((-1.0)*r02*x5545))+((r01*x5548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5549 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5549.valid){
continue;
}
CheckValue<IkReal> x5550=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5549.value)+(((1.5707963267949)*(x5550.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5551=IKcos(j4);
IkReal x5552=IKsin(j4);
IkReal x5553=(cj5*r00);
IkReal x5554=(cj5*r10);
IkReal x5555=(cj5*r20);
IkReal x5556=((1.0)*x5551);
IkReal x5557=((1.0)*x5552);
IkReal x5558=(sj5*x5551);
IkReal x5559=(sj5*x5552);
evalcond[0]=((((-1.0)*x5555*x5556))+((r21*x5558))+((r22*x5552)));
evalcond[1]=((((-1.0)*x5555*x5557))+((r21*x5559))+(((-1.0)*r22*x5556)));
evalcond[2]=(cj0+((r01*x5558))+(((-1.0)*x5553*x5556))+((r02*x5552)));
evalcond[3]=(sj0+((r11*x5558))+((r12*x5552))+(((-1.0)*x5554*x5556)));
evalcond[4]=(cj0+((r11*x5559))+(((-1.0)*r12*x5556))+(((-1.0)*x5554*x5557)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5559))+(((-1.0)*x5553*x5557))+(((-1.0)*r02*x5556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5560=cj1*cj1;
IkReal x5561=((500.0)*py);
IkReal x5562=(cj1*sj2);
IkReal x5563=(cj2*sj2);
IkReal x5564=(cj5*r01);
IkReal x5565=(cj2*sj1);
IkReal x5566=(cj1*sj1);
IkReal x5567=(r00*sj5);
IkReal x5568=((50.0)*r10*sj5);
IkReal x5569=((50.0)*cj5*r11);
CheckValue<IkReal> x5570=IKPowWithIntegerCheck(((((-392.0)*x5560*x5563))+(((-392.0)*cj1*cj2*x5565))+(((196.0)*x5563))+(((196.0)*x5566))+(((-212.5)*sj2*x5560))+(((-212.5)*cj1*x5565))),-1);
if(!x5570.valid){
continue;
}
CheckValue<IkReal> x5571=IKPowWithIntegerCheck(((((-1.0)*x5562))+(((-1.0)*x5565))),-1);
if(!x5571.valid){
continue;
}
if( IKabs(((x5570.value)*(((((-1.0)*x5562*x5569))+(((-1.0)*x5562*x5568))+(((-1.0)*x5561*x5562))+(((-1.0)*x5561*x5565))+(((67.0)*x5567))+(((67.0)*x5564))+(((-1.0)*x5565*x5568))+(((-1.0)*x5565*x5569)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5571.value)*(((((-1.0)*x5567))+(((-1.0)*x5564)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5570.value)*(((((-1.0)*x5562*x5569))+(((-1.0)*x5562*x5568))+(((-1.0)*x5561*x5562))+(((-1.0)*x5561*x5565))+(((67.0)*x5567))+(((67.0)*x5564))+(((-1.0)*x5565*x5568))+(((-1.0)*x5565*x5569))))))+IKsqr(((x5571.value)*(((((-1.0)*x5567))+(((-1.0)*x5564))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5570.value)*(((((-1.0)*x5562*x5569))+(((-1.0)*x5562*x5568))+(((-1.0)*x5561*x5562))+(((-1.0)*x5561*x5565))+(((67.0)*x5567))+(((67.0)*x5564))+(((-1.0)*x5565*x5568))+(((-1.0)*x5565*x5569))))), ((x5571.value)*(((((-1.0)*x5567))+(((-1.0)*x5564))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5572=IKcos(j0);
IkReal x5573=IKsin(j0);
IkReal x5574=((0.1)*sj5);
IkReal x5575=(cj5*r11);
IkReal x5576=(cj5*r01);
IkReal x5577=((0.392)*cj2);
IkReal x5578=((1.0)*cj2);
IkReal x5579=((0.392)*sj2);
IkReal x5580=((1.0)*cj1*sj2);
IkReal x5581=(cj1*x5572);
IkReal x5582=(cj1*x5573);
IkReal x5583=(sj1*x5572);
IkReal x5584=(sj1*x5573);
evalcond[0]=(((r00*sj5))+x5576+(((-1.0)*x5578*x5583))+(((-1.0)*x5572*x5580)));
evalcond[1]=(x5575+((r10*sj5))+(((-1.0)*x5578*x5584))+(((-1.0)*x5573*x5580)));
evalcond[2]=((((0.425)*x5581))+(((-1.0)*x5579*x5583))+(((-1.0)*r00*x5574))+(((-0.134)*x5573))+(((-1.0)*px))+(((-0.1)*x5576))+((x5577*x5581)));
evalcond[3]=((((-1.0)*r10*x5574))+(((0.425)*x5582))+(((-1.0)*x5579*x5584))+(((0.134)*x5572))+(((-1.0)*py))+(((-0.1)*x5575))+((x5577*x5582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5585=((1.0)*cj5);
IkReal x5586=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5585)));
j4eval[0]=x5586;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5585))))));
j4eval[2]=IKsign(x5586);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5587=((1.0)*cj5);
IkReal x5588=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5587)));
j4eval[0]=x5588;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5587))))));
j4eval[2]=IKsign(x5588);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5589=((1.0)*sj0);
IkReal x5590=((1.0)*cj0);
IkReal x5591=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5591;
j4eval[1]=((IKabs(((((-1.0)*r12*x5589))+(((-1.0)*r02*x5590)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x5590))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5589))))));
j4eval[2]=IKsign(x5591);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5592=((-1.0)*r20);
IkReal x5594 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5594)==0){
continue;
}
IkReal x5593=pow(x5594,-0.5);
CheckValue<IkReal> x5595 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5592),IKFAST_ATAN2_MAGTHRESH);
if(!x5595.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5595.value));
IkReal gconst115=(r21*x5593);
IkReal gconst116=(x5592*x5593);
CheckValue<IkReal> x5596 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5596.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5596.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5597=((-1.0)*r20);
IkReal x5598=x5593;
CheckValue<IkReal> x5600 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5597),IKFAST_ATAN2_MAGTHRESH);
if(!x5600.valid){
continue;
}
IkReal x5599=((-1.0)*(x5600.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5599;
IkReal gconst114=x5599;
IkReal gconst115=(r21*x5598);
IkReal gconst116=(x5597*x5598);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5601=((-1.0)*r20);
IkReal x5602=x5593;
CheckValue<IkReal> x5604 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5601),IKFAST_ATAN2_MAGTHRESH);
if(!x5604.valid){
continue;
}
IkReal x5603=((-1.0)*(x5604.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5603;
IkReal gconst114=x5603;
IkReal gconst115=(r21*x5602);
IkReal gconst116=(x5601*x5602);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5605=((-1.0)*r20);
IkReal x5606=x5593;
CheckValue<IkReal> x5608 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5605),IKFAST_ATAN2_MAGTHRESH);
if(!x5608.valid){
continue;
}
IkReal x5607=((-1.0)*(x5608.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5607;
IkReal gconst114=x5607;
IkReal gconst115=(r21*x5606);
IkReal gconst116=(x5605*x5606);
IkReal x5609=((1.0)*(r22*r22));
CheckValue<IkReal> x5613=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5609))),-1);
if(!x5613.valid){
continue;
}
IkReal x5610=x5613.value;
IkReal x5611=((1.0)*x5610);
IkReal x5612=((((-1.0)*x5611*(r20*r20*r20*r20)))+(((-1.0)*x5611*(r21*r21*r21*r21)))+(((-2.0)*x5610*(r20*r20)*(r21*r21)))+(((-1.0)*x5609)));
j4eval[0]=x5612;
j4eval[1]=IKsign(x5612);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5614=(cj2*sj1);
IkReal x5615=(gconst115*r21);
IkReal x5616=(cj1*sj2);
IkReal x5617=((1.0)*gconst116*r20);
CheckValue<IkReal> x5618=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5615))+(((-1.0)*gconst116*r20*x5617))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5615*x5615))))),-1);
if(!x5618.valid){
continue;
}
CheckValue<IkReal> x5619 = IKatan2WithCheck(IkReal((((r22*x5616))+((r22*x5614)))),IkReal((((x5615*x5616))+((x5614*x5615))+(((-1.0)*x5614*x5617))+(((-1.0)*x5616*x5617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5618.value)))+(x5619.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5620=IKsin(j4);
IkReal x5621=IKcos(j4);
IkReal x5622=(sj1*sj2);
IkReal x5623=((1.0)*x5621);
IkReal x5624=((1.0)*cj1*cj2);
IkReal x5625=(gconst115*x5620);
IkReal x5626=(gconst115*x5621);
IkReal x5627=((1.0)*gconst116*x5620);
evalcond[0]=((((-1.0)*r22*x5623))+((r21*x5625))+(((-1.0)*r20*x5627)));
evalcond[1]=(cj0+(((-1.0)*r10*x5627))+(((-1.0)*r12*x5623))+((r11*x5625)));
evalcond[2]=((((-1.0)*r00*x5627))+(((-1.0)*sj0))+((r01*x5625))+(((-1.0)*r02*x5623)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5623))+((r21*x5626))+((r22*x5620)));
evalcond[4]=(((cj0*x5622))+(((-1.0)*cj0*x5624))+((r02*x5620))+((r01*x5626))+(((-1.0)*gconst116*r00*x5623)));
evalcond[5]=(((sj0*x5622))+(((-1.0)*gconst116*r10*x5623))+((r12*x5620))+((r11*x5626))+(((-1.0)*sj0*x5624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5628=((1.0)*gconst116);
CheckValue<IkReal> x5629=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5628)))),-1);
if(!x5629.valid){
continue;
}
CheckValue<IkReal> x5630 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5628)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5629.value)))+(x5630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5631=IKsin(j4);
IkReal x5632=IKcos(j4);
IkReal x5633=(sj1*sj2);
IkReal x5634=((1.0)*x5632);
IkReal x5635=((1.0)*cj1*cj2);
IkReal x5636=(gconst115*x5631);
IkReal x5637=(gconst115*x5632);
IkReal x5638=((1.0)*gconst116*x5631);
evalcond[0]=((((-1.0)*r20*x5638))+(((-1.0)*r22*x5634))+((r21*x5636)));
evalcond[1]=((((-1.0)*r12*x5634))+((r11*x5636))+cj0+(((-1.0)*r10*x5638)));
evalcond[2]=(((r01*x5636))+(((-1.0)*sj0))+(((-1.0)*r02*x5634))+(((-1.0)*r00*x5638)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5631))+((r21*x5637))+(((-1.0)*gconst116*r20*x5634)));
evalcond[4]=(((r01*x5637))+(((-1.0)*gconst116*r00*x5634))+((cj0*x5633))+((r02*x5631))+(((-1.0)*cj0*x5635)));
evalcond[5]=(((r12*x5631))+(((-1.0)*sj0*x5635))+((r11*x5637))+((sj0*x5633))+(((-1.0)*gconst116*r10*x5634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5639=((1.0)*gconst116);
CheckValue<IkReal> x5640 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x5639)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5640.valid){
continue;
}
CheckValue<IkReal> x5641=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x5639)))),-1);
if(!x5641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5640.value)+(((1.5707963267949)*(x5641.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5642=IKsin(j4);
IkReal x5643=IKcos(j4);
IkReal x5644=(sj1*sj2);
IkReal x5645=((1.0)*x5643);
IkReal x5646=((1.0)*cj1*cj2);
IkReal x5647=(gconst115*x5642);
IkReal x5648=(gconst115*x5643);
IkReal x5649=((1.0)*gconst116*x5642);
evalcond[0]=((((-1.0)*r22*x5645))+(((-1.0)*r20*x5649))+((r21*x5647)));
evalcond[1]=((((-1.0)*r10*x5649))+cj0+(((-1.0)*r12*x5645))+((r11*x5647)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5647))+(((-1.0)*r02*x5645))+(((-1.0)*r00*x5649)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5645))+((r22*x5642))+((r21*x5648)));
evalcond[4]=(((cj0*x5644))+((r01*x5648))+(((-1.0)*gconst116*r00*x5645))+(((-1.0)*cj0*x5646))+((r02*x5642)));
evalcond[5]=((((-1.0)*sj0*x5646))+((sj0*x5644))+((r12*x5642))+(((-1.0)*gconst116*r10*x5645))+((r11*x5648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5650=((-1.0)*r21);
IkReal x5652 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5652)==0){
continue;
}
IkReal x5651=pow(x5652,-0.5);
CheckValue<IkReal> x5653 = IKatan2WithCheck(IkReal(x5650),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5653.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5653.value))));
IkReal gconst118=(x5650*x5651);
IkReal gconst119=((1.0)*r20*x5651);
CheckValue<IkReal> x5654 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5654.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5654.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5655=((-1.0)*r21);
CheckValue<IkReal> x5658 = IKatan2WithCheck(IkReal(x5655),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5658.valid){
continue;
}
IkReal x5656=((1.0)*(x5658.value));
IkReal x5657=x5651;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5656)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5656)));
IkReal gconst118=(x5655*x5657);
IkReal gconst119=((1.0)*r20*x5657);
IkReal x5659=r22*r22;
IkReal x5660=((1.0)*x5659);
CheckValue<IkReal> x5664=IKPowWithIntegerCheck(((-1.0)+x5659),-1);
if(!x5664.valid){
continue;
}
IkReal x5661=x5664.value;
if((((1.0)+(((-1.0)*x5660)))) < -0.00001)
continue;
IkReal x5662=IKsqrt(((1.0)+(((-1.0)*x5660))));
IkReal x5663=(cj0*x5661*x5662);
j4eval[0]=((IKabs((x5663+(((-1.0)*x5660*x5663)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5665=((-1.0)*r21);
CheckValue<IkReal> x5668 = IKatan2WithCheck(IkReal(x5665),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5668.valid){
continue;
}
IkReal x5666=((1.0)*(x5668.value));
IkReal x5667=x5651;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5666)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5666)));
IkReal gconst118=(x5665*x5667);
IkReal gconst119=((1.0)*r20*x5667);
IkReal x5669=r22*r22;
IkReal x5670=((1.0)*x5669);
CheckValue<IkReal> x5674=IKPowWithIntegerCheck(((-1.0)+x5669),-1);
if(!x5674.valid){
continue;
}
IkReal x5671=x5674.value;
if((((1.0)+(((-1.0)*x5670)))) < -0.00001)
continue;
IkReal x5672=IKsqrt(((1.0)+(((-1.0)*x5670))));
IkReal x5673=(sj0*x5671*x5672);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5673+(((-1.0)*x5670*x5673))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5675=((-1.0)*r21);
CheckValue<IkReal> x5678 = IKatan2WithCheck(IkReal(x5675),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5678.valid){
continue;
}
IkReal x5676=((1.0)*(x5678.value));
IkReal x5677=x5651;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5676)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5676)));
IkReal gconst118=(x5675*x5677);
IkReal gconst119=((1.0)*r20*x5677);
IkReal x5679=r22*r22;
IkReal x5680=(r12*sj0);
IkReal x5681=(cj0*r02);
CheckValue<IkReal> x5685=IKPowWithIntegerCheck(((-1.0)+x5679),-1);
if(!x5685.valid){
continue;
}
IkReal x5682=x5685.value;
if((((1.0)+(((-1.0)*x5679)))) < -0.00001)
continue;
IkReal x5683=IKsqrt(((1.0)+(((-1.0)*x5679))));
IkReal x5684=(r22*x5682*x5683);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x5681*x5684))+((x5680*x5684)))))+(IKabs(((((-1.0)*x5681))+(((-1.0)*x5680))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5686=((1.0)*sj0);
IkReal x5687=((1.0)*gconst118);
CheckValue<IkReal> x5688=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5687)))),-1);
if(!x5688.valid){
continue;
}
CheckValue<IkReal> x5689 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5686)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x5686))+(((-1.0)*cj0*r01*x5687))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5688.value)))+(x5689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5690=IKsin(j4);
IkReal x5691=IKcos(j4);
IkReal x5692=(gconst118*r01);
IkReal x5693=(sj1*sj2);
IkReal x5694=(gconst119*r20);
IkReal x5695=(gconst119*r10);
IkReal x5696=(gconst119*r00);
IkReal x5697=(gconst118*r21);
IkReal x5698=(gconst118*r11);
IkReal x5699=((1.0)*x5691);
IkReal x5700=((1.0)*cj1*cj2);
IkReal x5701=((1.0)*x5690);
evalcond[0]=((((-1.0)*x5694*x5701))+((x5690*x5697))+(((-1.0)*r22*x5699)));
evalcond[1]=(cj0+((x5690*x5698))+(((-1.0)*x5695*x5701))+(((-1.0)*r12*x5699)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5699))+((x5690*x5692))+(((-1.0)*x5696*x5701)));
evalcond[3]=(((cj2*sj1))+((r22*x5690))+((cj1*sj2))+((x5691*x5697))+(((-1.0)*x5694*x5699)));
evalcond[4]=((((-1.0)*x5696*x5699))+((x5691*x5692))+((r02*x5690))+(((-1.0)*cj0*x5700))+((cj0*x5693)));
evalcond[5]=(((x5691*x5698))+((sj0*x5693))+(((-1.0)*sj0*x5700))+((r12*x5690))+(((-1.0)*x5695*x5699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5702=((1.0)*gconst119);
CheckValue<IkReal> x5703=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5702)))),-1);
if(!x5703.valid){
continue;
}
CheckValue<IkReal> x5704 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5702))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5703.value)))+(x5704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5705=IKsin(j4);
IkReal x5706=IKcos(j4);
IkReal x5707=(gconst118*r01);
IkReal x5708=(sj1*sj2);
IkReal x5709=(gconst119*r20);
IkReal x5710=(gconst119*r10);
IkReal x5711=(gconst119*r00);
IkReal x5712=(gconst118*r21);
IkReal x5713=(gconst118*r11);
IkReal x5714=((1.0)*x5706);
IkReal x5715=((1.0)*cj1*cj2);
IkReal x5716=((1.0)*x5705);
evalcond[0]=((((-1.0)*r22*x5714))+(((-1.0)*x5709*x5716))+((x5705*x5712)));
evalcond[1]=(cj0+(((-1.0)*x5710*x5716))+(((-1.0)*r12*x5714))+((x5705*x5713)));
evalcond[2]=((((-1.0)*sj0))+((x5705*x5707))+(((-1.0)*x5711*x5716))+(((-1.0)*r02*x5714)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5709*x5714))+((r22*x5705))+((x5706*x5712)));
evalcond[4]=((((-1.0)*cj0*x5715))+((r02*x5705))+((x5706*x5707))+(((-1.0)*x5711*x5714))+((cj0*x5708)));
evalcond[5]=(((sj0*x5708))+((r12*x5705))+(((-1.0)*x5710*x5714))+(((-1.0)*sj0*x5715))+((x5706*x5713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5717=((1.0)*gconst119);
CheckValue<IkReal> x5718=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5717))+(((-1.0)*gconst118*r00)))),-1);
if(!x5718.valid){
continue;
}
CheckValue<IkReal> x5719 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5717))+((cj0*gconst118*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5718.value)))+(x5719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5720=IKsin(j4);
IkReal x5721=IKcos(j4);
IkReal x5722=(gconst118*r01);
IkReal x5723=(sj1*sj2);
IkReal x5724=(gconst119*r20);
IkReal x5725=(gconst119*r10);
IkReal x5726=(gconst119*r00);
IkReal x5727=(gconst118*r21);
IkReal x5728=(gconst118*r11);
IkReal x5729=((1.0)*x5721);
IkReal x5730=((1.0)*cj1*cj2);
IkReal x5731=((1.0)*x5720);
evalcond[0]=((((-1.0)*x5724*x5731))+(((-1.0)*r22*x5729))+((x5720*x5727)));
evalcond[1]=((((-1.0)*x5725*x5731))+cj0+(((-1.0)*r12*x5729))+((x5720*x5728)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5729))+(((-1.0)*x5726*x5731))+((x5720*x5722)));
evalcond[3]=(((x5721*x5727))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5724*x5729))+((r22*x5720)));
evalcond[4]=(((x5721*x5722))+(((-1.0)*cj0*x5730))+((cj0*x5723))+(((-1.0)*x5726*x5729))+((r02*x5720)));
evalcond[5]=(((x5721*x5728))+((sj0*x5723))+(((-1.0)*x5725*x5729))+((r12*x5720))+(((-1.0)*sj0*x5730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5732=((-1.0)*r10);
IkReal x5734 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5734)==0){
continue;
}
IkReal x5733=pow(x5734,-0.5);
CheckValue<IkReal> x5735 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5732),IKFAST_ATAN2_MAGTHRESH);
if(!x5735.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5735.value));
IkReal gconst121=(r11*x5733);
IkReal gconst122=(x5732*x5733);
CheckValue<IkReal> x5736 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5736.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5736.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5737=((-1.0)*r10);
IkReal x5738=x5733;
CheckValue<IkReal> x5740 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5737),IKFAST_ATAN2_MAGTHRESH);
if(!x5740.valid){
continue;
}
IkReal x5739=((-1.0)*(x5740.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5739;
IkReal gconst120=x5739;
IkReal gconst121=(r11*x5738);
IkReal gconst122=(x5737*x5738);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5741=((1.0)*sj0);
IkReal x5742=((1.0)*gconst121);
CheckValue<IkReal> x5743 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5741)))),IkReal(((((-1.0)*cj0*r01*x5742))+((cj0*gconst122*r00))+((gconst122*r10*sj0))+(((-1.0)*gconst121*r11*x5741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5743.valid){
continue;
}
CheckValue<IkReal> x5744=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5742))+(((-1.0)*gconst122*r21)))),-1);
if(!x5744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5743.value)+(((1.5707963267949)*(x5744.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5745=IKsin(j4);
IkReal x5746=IKcos(j4);
IkReal x5747=(gconst121*r11);
IkReal x5748=(sj1*sj2);
IkReal x5749=(gconst122*r00);
IkReal x5750=(gconst122*r10);
IkReal x5751=(gconst122*r20);
IkReal x5752=((1.0)*x5746);
IkReal x5753=((1.0)*cj1*cj2);
IkReal x5754=((1.0)*x5745);
IkReal x5755=(gconst121*x5745);
IkReal x5756=(gconst121*x5746);
evalcond[0]=(((r21*x5755))+(((-1.0)*x5751*x5754))+(((-1.0)*r22*x5752)));
evalcond[1]=(cj0+(((-1.0)*r12*x5752))+((x5745*x5747))+(((-1.0)*x5750*x5754)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5749*x5754))+((r01*x5755))+(((-1.0)*r02*x5752)));
evalcond[3]=(((cj2*sj1))+((r21*x5756))+(((-1.0)*x5751*x5752))+((r22*x5745))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x5749*x5752))+((r01*x5756))+(((-1.0)*cj0*x5753))+((cj0*x5748))+((r02*x5745)));
evalcond[5]=(((x5746*x5747))+(((-1.0)*sj0*x5753))+((sj0*x5748))+((r12*x5745))+(((-1.0)*x5750*x5752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5757=((1.0)*gconst122);
CheckValue<IkReal> x5758 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5757))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5758.valid){
continue;
}
CheckValue<IkReal> x5759=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5757)))),-1);
if(!x5759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5758.value)+(((1.5707963267949)*(x5759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5760=IKsin(j4);
IkReal x5761=IKcos(j4);
IkReal x5762=(gconst121*r11);
IkReal x5763=(sj1*sj2);
IkReal x5764=(gconst122*r00);
IkReal x5765=(gconst122*r10);
IkReal x5766=(gconst122*r20);
IkReal x5767=((1.0)*x5761);
IkReal x5768=((1.0)*cj1*cj2);
IkReal x5769=((1.0)*x5760);
IkReal x5770=(gconst121*x5760);
IkReal x5771=(gconst121*x5761);
evalcond[0]=((((-1.0)*x5766*x5769))+((r21*x5770))+(((-1.0)*r22*x5767)));
evalcond[1]=(cj0+(((-1.0)*r12*x5767))+((x5760*x5762))+(((-1.0)*x5765*x5769)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5770))+(((-1.0)*r02*x5767))+(((-1.0)*x5764*x5769)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5766*x5767))+((cj1*sj2))+((r22*x5760))+((r21*x5771)));
evalcond[4]=(((r01*x5771))+(((-1.0)*cj0*x5768))+((cj0*x5763))+((r02*x5760))+(((-1.0)*x5764*x5767)));
evalcond[5]=((((-1.0)*sj0*x5768))+((x5761*x5762))+(((-1.0)*x5765*x5767))+((r12*x5760))+((sj0*x5763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5772=((-1.0)*r11);
IkReal x5774 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5774)==0){
continue;
}
IkReal x5773=pow(x5774,-0.5);
CheckValue<IkReal> x5775 = IKatan2WithCheck(IkReal(x5772),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5775.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5775.value))));
IkReal gconst124=(x5772*x5773);
IkReal gconst125=((1.0)*r10*x5773);
CheckValue<IkReal> x5776 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5776.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5776.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5777=((-1.0)*r11);
CheckValue<IkReal> x5780 = IKatan2WithCheck(IkReal(x5777),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5780.valid){
continue;
}
IkReal x5778=((1.0)*(x5780.value));
IkReal x5779=x5773;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5778)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5778)));
IkReal gconst124=(x5777*x5779);
IkReal gconst125=((1.0)*r10*x5779);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5781=((-1.0)*r11);
CheckValue<IkReal> x5784 = IKatan2WithCheck(IkReal(x5781),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5784.valid){
continue;
}
IkReal x5782=((1.0)*(x5784.value));
IkReal x5783=x5773;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5782)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5782)));
IkReal gconst124=(x5781*x5783);
IkReal gconst125=((1.0)*r10*x5783);
IkReal x5785=r12*r12;
IkReal x5786=((1.0)*sj0);
IkReal x5787=(cj0*r02);
IkReal x5788=x5773;
j4eval[0]=((IKabs(((((-1.0)*r12*x5786))+(((-1.0)*x5787)))))+(IKabs(((((-1.0)*x5786*x5788))+((sj0*x5785*x5788))+((r12*x5787*x5788))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5789=((-1.0)*r11);
CheckValue<IkReal> x5792 = IKatan2WithCheck(IkReal(x5789),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5792.valid){
continue;
}
IkReal x5790=((1.0)*(x5792.value));
IkReal x5791=x5773;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5790)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5790)));
IkReal gconst124=(x5789*x5791);
IkReal gconst125=((1.0)*r10*x5791);
IkReal x5793=r12*r12;
IkReal x5794=((1.0)+(((-1.0)*x5793)));
IkReal x5795=(cj2*r22*sj1);
IkReal x5796=(cj1*r22*sj2);
CheckValue<IkReal> x5803=IKPowWithIntegerCheck(x5794,-1);
if(!x5803.valid){
continue;
}
IkReal x5797=x5803.value;
CheckValue<IkReal> x5804=IKPowWithIntegerCheck(((-1.0)+x5793),-1);
if(!x5804.valid){
continue;
}
IkReal x5798=x5804.value;
IkReal x5799=((1.0)*x5797);
if((x5794) < -0.00001)
continue;
IkReal x5800=IKsqrt(x5794);
IkReal x5801=((1.0)*r12*x5798*x5800);
IkReal x5802=((((-2.0)*r10*r11*r20*r21*x5797))+(((-1.0)*(r22*r22)))+(((-1.0)*x5799*(r10*r10)*(r20*r20)))+(((-1.0)*x5799*(r11*r11)*(r21*r21))));
j4eval[0]=x5802;
j4eval[1]=IKsign(x5802);
j4eval[2]=((IKabs((x5796+x5795)))+(IKabs(((((-1.0)*x5796*x5801))+(((-1.0)*x5795*x5801))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5805=(gconst124*r21);
IkReal x5806=(cj1*sj2);
IkReal x5807=(cj2*sj1);
IkReal x5808=(gconst125*r20);
CheckValue<IkReal> x5809=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5805*x5805)))+(((2.0)*x5805*x5808))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5808*x5808))))),-1);
if(!x5809.valid){
continue;
}
CheckValue<IkReal> x5810 = IKatan2WithCheck(IkReal((((r22*x5807))+((r22*x5806)))),IkReal(((((-1.0)*x5806*x5808))+(((-1.0)*x5807*x5808))+((x5805*x5806))+((x5805*x5807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5809.value)))+(x5810.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5811=IKsin(j4);
IkReal x5812=IKcos(j4);
IkReal x5813=(sj1*sj2);
IkReal x5814=(gconst125*r20);
IkReal x5815=(gconst124*r01);
IkReal x5816=(gconst125*r00);
IkReal x5817=(gconst125*r10);
IkReal x5818=((1.0)*x5812);
IkReal x5819=((1.0)*cj1*cj2);
IkReal x5820=((1.0)*x5811);
IkReal x5821=(gconst124*x5811);
IkReal x5822=(gconst124*x5812);
evalcond[0]=(((r21*x5821))+(((-1.0)*x5814*x5820))+(((-1.0)*r22*x5818)));
evalcond[1]=((((-1.0)*r12*x5818))+cj0+(((-1.0)*x5817*x5820))+((r11*x5821)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5818))+(((-1.0)*x5816*x5820))+((x5811*x5815)));
evalcond[3]=(((r21*x5822))+((cj2*sj1))+(((-1.0)*x5814*x5818))+((r22*x5811))+((cj1*sj2)));
evalcond[4]=((((-1.0)*cj0*x5819))+((r02*x5811))+((cj0*x5813))+((x5812*x5815))+(((-1.0)*x5816*x5818)));
evalcond[5]=((((-1.0)*sj0*x5819))+((sj0*x5813))+((r11*x5822))+((r12*x5811))+(((-1.0)*x5817*x5818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5823=((1.0)*sj0);
IkReal x5824=((1.0)*cj0);
CheckValue<IkReal> x5825 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5824))+(((-1.0)*r12*x5823)))),IkReal(((((-1.0)*gconst124*r11*x5823))+((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x5824))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5825.valid){
continue;
}
CheckValue<IkReal> x5826=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5825.value)+(((1.5707963267949)*(x5826.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5827=IKsin(j4);
IkReal x5828=IKcos(j4);
IkReal x5829=(sj1*sj2);
IkReal x5830=(gconst125*r20);
IkReal x5831=(gconst124*r01);
IkReal x5832=(gconst125*r00);
IkReal x5833=(gconst125*r10);
IkReal x5834=((1.0)*x5828);
IkReal x5835=((1.0)*cj1*cj2);
IkReal x5836=((1.0)*x5827);
IkReal x5837=(gconst124*x5827);
IkReal x5838=(gconst124*x5828);
evalcond[0]=(((r21*x5837))+(((-1.0)*r22*x5834))+(((-1.0)*x5830*x5836)));
evalcond[1]=((((-1.0)*x5833*x5836))+cj0+((r11*x5837))+(((-1.0)*r12*x5834)));
evalcond[2]=((((-1.0)*r02*x5834))+(((-1.0)*x5832*x5836))+(((-1.0)*sj0))+((x5827*x5831)));
evalcond[3]=(((r21*x5838))+((cj2*sj1))+(((-1.0)*x5830*x5834))+((cj1*sj2))+((r22*x5827)));
evalcond[4]=(((r02*x5827))+(((-1.0)*x5832*x5834))+((cj0*x5829))+(((-1.0)*cj0*x5835))+((x5828*x5831)));
evalcond[5]=((((-1.0)*x5833*x5834))+((r12*x5827))+((sj0*x5829))+((r11*x5838))+(((-1.0)*sj0*x5835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5839=((1.0)*gconst125);
CheckValue<IkReal> x5840 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5839))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5840.valid){
continue;
}
CheckValue<IkReal> x5841=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5839)))),-1);
if(!x5841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5840.value)+(((1.5707963267949)*(x5841.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5842=IKsin(j4);
IkReal x5843=IKcos(j4);
IkReal x5844=(sj1*sj2);
IkReal x5845=(gconst125*r20);
IkReal x5846=(gconst124*r01);
IkReal x5847=(gconst125*r00);
IkReal x5848=(gconst125*r10);
IkReal x5849=((1.0)*x5843);
IkReal x5850=((1.0)*cj1*cj2);
IkReal x5851=((1.0)*x5842);
IkReal x5852=(gconst124*x5842);
IkReal x5853=(gconst124*x5843);
evalcond[0]=((((-1.0)*x5845*x5851))+((r21*x5852))+(((-1.0)*r22*x5849)));
evalcond[1]=(cj0+((r11*x5852))+(((-1.0)*x5848*x5851))+(((-1.0)*r12*x5849)));
evalcond[2]=((((-1.0)*x5847*x5851))+(((-1.0)*sj0))+(((-1.0)*r02*x5849))+((x5842*x5846)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5845*x5849))+((r22*x5842))+((r21*x5853)));
evalcond[4]=((((-1.0)*x5847*x5849))+((x5843*x5846))+(((-1.0)*cj0*x5850))+((cj0*x5844))+((r02*x5842)));
evalcond[5]=(((r11*x5853))+((r12*x5842))+(((-1.0)*x5848*x5849))+((sj0*x5844))+(((-1.0)*sj0*x5850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5854=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5854;
j4eval[1]=IKsign(x5854);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5855=((1.0)*cj5);
IkReal x5856=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5855)));
j4eval[0]=x5856;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x5855))+((r21*sj5))))));
j4eval[2]=IKsign(x5856);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5857=cj5*cj5;
IkReal x5858=r11*r11;
IkReal x5859=(cj5*r10);
IkReal x5860=(r11*sj5);
IkReal x5861=((((-1.0)*x5857*(r10*r10)))+((x5857*x5858))+(((2.0)*x5859*x5860))+(((-1.0)*x5858))+(((-1.0)*(r12*r12))));
j4eval[0]=x5861;
j4eval[1]=IKsign(x5861);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5859))+x5860))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5862=cj5*cj5;
IkReal x5863=r11*r11;
IkReal x5864=(cj5*r10);
IkReal x5865=(r11*sj5);
CheckValue<IkReal> x5866=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5863))+(((-1.0)*x5862*(r10*r10)))+(((-1.0)*(r12*r12)))+((x5862*x5863))+(((2.0)*x5864*x5865)))),-1);
if(!x5866.valid){
continue;
}
CheckValue<IkReal> x5867 = IKatan2WithCheck(IkReal(((((-1.0)*x5864))+x5865)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5866.value)))+(x5867.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5868=IKcos(j4);
IkReal x5869=IKsin(j4);
IkReal x5870=(cj5*r00);
IkReal x5871=(cj5*r10);
IkReal x5872=(r21*sj5);
IkReal x5873=(cj5*r20);
IkReal x5874=((1.0)*x5868);
IkReal x5875=((1.0)*x5869);
IkReal x5876=(sj5*x5869);
IkReal x5877=(sj5*x5868);
evalcond[0]=(((r11*x5877))+(((-1.0)*x5871*x5874))+((r12*x5869)));
evalcond[1]=((((-1.0)*r22*x5874))+(((-1.0)*x5873*x5875))+((x5869*x5872)));
evalcond[2]=((((-1.0)*r02*x5874))+(((-1.0)*x5870*x5875))+((r01*x5876)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5874))+((r11*x5876))+(((-1.0)*x5871*x5875)));
evalcond[4]=(((cj2*sj1))+((r22*x5869))+((cj1*sj2))+(((-1.0)*x5873*x5874))+((x5868*x5872)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5869))+(((-1.0)*x5870*x5874))+((r01*x5877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5878=((1.0)*cj5);
CheckValue<IkReal> x5879 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5878)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5879.valid){
continue;
}
CheckValue<IkReal> x5880=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5878)))),-1);
if(!x5880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5879.value)+(((1.5707963267949)*(x5880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5881=IKcos(j4);
IkReal x5882=IKsin(j4);
IkReal x5883=(cj5*r00);
IkReal x5884=(cj5*r10);
IkReal x5885=(r21*sj5);
IkReal x5886=(cj5*r20);
IkReal x5887=((1.0)*x5881);
IkReal x5888=((1.0)*x5882);
IkReal x5889=(sj5*x5882);
IkReal x5890=(sj5*x5881);
evalcond[0]=(((r12*x5882))+(((-1.0)*x5884*x5887))+((r11*x5890)));
evalcond[1]=((((-1.0)*x5886*x5888))+((x5882*x5885))+(((-1.0)*r22*x5887)));
evalcond[2]=((((-1.0)*x5883*x5888))+((r01*x5889))+(((-1.0)*r02*x5887)));
evalcond[3]=((1.0)+((r11*x5889))+(((-1.0)*r12*x5887))+(((-1.0)*x5884*x5888)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5886*x5887))+((cj1*sj2))+((x5881*x5885))+((r22*x5882)));
evalcond[5]=((((-1.0)*x5883*x5887))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5890))+((r02*x5882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5891=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5891.valid){
continue;
}
CheckValue<IkReal> x5892 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5891.value)))+(x5892.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5893=IKcos(j4);
IkReal x5894=IKsin(j4);
IkReal x5895=(cj5*r00);
IkReal x5896=(cj5*r10);
IkReal x5897=(r21*sj5);
IkReal x5898=(cj5*r20);
IkReal x5899=((1.0)*x5893);
IkReal x5900=((1.0)*x5894);
IkReal x5901=(sj5*x5894);
IkReal x5902=(sj5*x5893);
evalcond[0]=((((-1.0)*x5896*x5899))+((r12*x5894))+((r11*x5902)));
evalcond[1]=((((-1.0)*r22*x5899))+(((-1.0)*x5898*x5900))+((x5894*x5897)));
evalcond[2]=((((-1.0)*x5895*x5900))+(((-1.0)*r02*x5899))+((r01*x5901)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5899))+(((-1.0)*x5896*x5900))+((r11*x5901)));
evalcond[4]=(((r22*x5894))+((cj2*sj1))+(((-1.0)*x5898*x5899))+((cj1*sj2))+((x5893*x5897)));
evalcond[5]=(((r02*x5894))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5895*x5899))+((r01*x5902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5903=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5903;
j4eval[1]=IKsign(x5903);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5904=((1.0)*cj5);
IkReal x5905=((((-1.0)*r21*x5904))+(((-1.0)*r20*sj5)));
j4eval[0]=x5905;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5904))+((r01*sj5))))));
j4eval[2]=IKsign(x5905);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5906=cj5*cj5;
IkReal x5907=r11*r11;
IkReal x5908=(r11*sj5);
IkReal x5909=(cj5*r10);
IkReal x5910=((r12*r12)+((x5906*(r10*r10)))+(((-2.0)*x5908*x5909))+(((-1.0)*x5906*x5907))+x5907);
j4eval[0]=x5910;
j4eval[1]=IKsign(x5910);
j4eval[2]=((IKabs(r12))+(IKabs((x5908+(((-1.0)*x5909))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5911=cj5*cj5;
IkReal x5912=r11*r11;
IkReal x5913=(cj5*r10);
IkReal x5914=(r11*sj5);
CheckValue<IkReal> x5915 = IKatan2WithCheck(IkReal((x5914+(((-1.0)*x5913)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5915.valid){
continue;
}
CheckValue<IkReal> x5916=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x5913*x5914))+x5912+(((-1.0)*x5911*x5912))+((x5911*(r10*r10))))),-1);
if(!x5916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5915.value)+(((1.5707963267949)*(x5916.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5917=IKcos(j4);
IkReal x5918=IKsin(j4);
IkReal x5919=(cj5*r00);
IkReal x5920=(cj5*r10);
IkReal x5921=(r21*sj5);
IkReal x5922=(cj5*r20);
IkReal x5923=((1.0)*x5917);
IkReal x5924=((1.0)*x5918);
IkReal x5925=(sj5*x5918);
IkReal x5926=(sj5*x5917);
evalcond[0]=(((r12*x5918))+((r11*x5926))+(((-1.0)*x5920*x5923)));
evalcond[1]=((((-1.0)*r22*x5923))+((x5918*x5921))+(((-1.0)*x5922*x5924)));
evalcond[2]=((((-1.0)*r02*x5923))+(((-1.0)*x5919*x5924))+((r01*x5925)));
evalcond[3]=((-1.0)+((r11*x5925))+(((-1.0)*x5920*x5924))+(((-1.0)*r12*x5923)));
evalcond[4]=(((cj2*sj1))+((r22*x5918))+((cj1*sj2))+((x5917*x5921))+(((-1.0)*x5922*x5923)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x5918))+(((-1.0)*x5919*x5923))+((cj1*cj2))+((r01*x5926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5927=((1.0)*cj5);
CheckValue<IkReal> x5928=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5927))+(((-1.0)*r20*sj5)))),-1);
if(!x5928.valid){
continue;
}
CheckValue<IkReal> x5929 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5927)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5928.value)))+(x5929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5930=IKcos(j4);
IkReal x5931=IKsin(j4);
IkReal x5932=(cj5*r00);
IkReal x5933=(cj5*r10);
IkReal x5934=(r21*sj5);
IkReal x5935=(cj5*r20);
IkReal x5936=((1.0)*x5930);
IkReal x5937=((1.0)*x5931);
IkReal x5938=(sj5*x5931);
IkReal x5939=(sj5*x5930);
evalcond[0]=(((r11*x5939))+((r12*x5931))+(((-1.0)*x5933*x5936)));
evalcond[1]=((((-1.0)*x5935*x5937))+((x5931*x5934))+(((-1.0)*r22*x5936)));
evalcond[2]=((((-1.0)*r02*x5936))+(((-1.0)*x5932*x5937))+((r01*x5938)));
evalcond[3]=((-1.0)+((r11*x5938))+(((-1.0)*x5933*x5937))+(((-1.0)*r12*x5936)));
evalcond[4]=(((cj2*sj1))+((x5930*x5934))+((cj1*sj2))+((r22*x5931))+(((-1.0)*x5935*x5936)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x5932*x5936))+((r01*x5939))+((cj1*cj2))+((r02*x5931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5940 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5940.valid){
continue;
}
CheckValue<IkReal> x5941=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5940.value)+(((1.5707963267949)*(x5941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5942=IKcos(j4);
IkReal x5943=IKsin(j4);
IkReal x5944=(cj5*r00);
IkReal x5945=(cj5*r10);
IkReal x5946=(r21*sj5);
IkReal x5947=(cj5*r20);
IkReal x5948=((1.0)*x5942);
IkReal x5949=((1.0)*x5943);
IkReal x5950=(sj5*x5943);
IkReal x5951=(sj5*x5942);
evalcond[0]=((((-1.0)*x5945*x5948))+((r11*x5951))+((r12*x5943)));
evalcond[1]=((((-1.0)*r22*x5948))+((x5943*x5946))+(((-1.0)*x5947*x5949)));
evalcond[2]=((((-1.0)*x5944*x5949))+((r01*x5950))+(((-1.0)*r02*x5948)));
evalcond[3]=((-1.0)+(((-1.0)*x5945*x5949))+((r11*x5950))+(((-1.0)*r12*x5948)));
evalcond[4]=(((cj2*sj1))+((x5942*x5946))+((cj1*sj2))+((r22*x5943))+(((-1.0)*x5947*x5948)));
evalcond[5]=((((-1.0)*x5944*x5948))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x5943))+((r01*x5951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5952=((-1.0)*r00);
IkReal x5954 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5954)==0){
continue;
}
IkReal x5953=pow(x5954,-0.5);
CheckValue<IkReal> x5955 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5952),IKFAST_ATAN2_MAGTHRESH);
if(!x5955.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5955.value));
IkReal gconst127=(r01*x5953);
IkReal gconst128=(x5952*x5953);
CheckValue<IkReal> x5956 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5956.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5956.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5957=((-1.0)*r00);
IkReal x5958=x5953;
CheckValue<IkReal> x5960 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5957),IKFAST_ATAN2_MAGTHRESH);
if(!x5960.valid){
continue;
}
IkReal x5959=((-1.0)*(x5960.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5959;
IkReal gconst126=x5959;
IkReal gconst127=(r01*x5958);
IkReal gconst128=(x5957*x5958);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5961=((1.0)*sj0);
IkReal x5962=((1.0)*gconst127);
CheckValue<IkReal> x5963=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5962))+(((-1.0)*gconst128*r21)))),-1);
if(!x5963.valid){
continue;
}
CheckValue<IkReal> x5964 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5961)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*gconst127*r11*x5961))+(((-1.0)*cj0*r01*x5962))+((cj0*gconst128*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5963.value)))+(x5964.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5965=IKsin(j4);
IkReal x5966=IKcos(j4);
IkReal x5967=(gconst127*r01);
IkReal x5968=(sj1*sj2);
IkReal x5969=(gconst128*r10);
IkReal x5970=(gconst128*r00);
IkReal x5971=(gconst128*r20);
IkReal x5972=((1.0)*x5966);
IkReal x5973=((1.0)*cj1*cj2);
IkReal x5974=((1.0)*x5965);
IkReal x5975=(gconst127*x5966);
IkReal x5976=(gconst127*x5965);
evalcond[0]=((((-1.0)*r22*x5972))+((r21*x5976))+(((-1.0)*x5971*x5974)));
evalcond[1]=(cj0+(((-1.0)*r12*x5972))+((r11*x5976))+(((-1.0)*x5969*x5974)));
evalcond[2]=((((-1.0)*r02*x5972))+(((-1.0)*sj0))+((x5965*x5967))+(((-1.0)*x5970*x5974)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5965))+((r21*x5975))+(((-1.0)*x5971*x5972)));
evalcond[4]=(((r02*x5965))+((cj0*x5968))+(((-1.0)*cj0*x5973))+((x5966*x5967))+(((-1.0)*x5970*x5972)));
evalcond[5]=((((-1.0)*sj0*x5973))+((r11*x5975))+((r12*x5965))+((sj0*x5968))+(((-1.0)*x5969*x5972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5977=((1.0)*gconst128);
CheckValue<IkReal> x5978=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5977))+(((-1.0)*gconst127*r10)))),-1);
if(!x5978.valid){
continue;
}
CheckValue<IkReal> x5979 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5977))+((gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5978.value)))+(x5979.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5980=IKsin(j4);
IkReal x5981=IKcos(j4);
IkReal x5982=(gconst127*r01);
IkReal x5983=(sj1*sj2);
IkReal x5984=(gconst128*r10);
IkReal x5985=(gconst128*r00);
IkReal x5986=(gconst128*r20);
IkReal x5987=((1.0)*x5981);
IkReal x5988=((1.0)*cj1*cj2);
IkReal x5989=((1.0)*x5980);
IkReal x5990=(gconst127*x5981);
IkReal x5991=(gconst127*x5980);
evalcond[0]=(((r21*x5991))+(((-1.0)*x5986*x5989))+(((-1.0)*r22*x5987)));
evalcond[1]=((((-1.0)*r12*x5987))+cj0+(((-1.0)*x5984*x5989))+((r11*x5991)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5985*x5989))+(((-1.0)*r02*x5987))+((x5980*x5982)));
evalcond[3]=(((r21*x5990))+((cj2*sj1))+(((-1.0)*x5986*x5987))+((cj1*sj2))+((r22*x5980)));
evalcond[4]=((((-1.0)*x5985*x5987))+((r02*x5980))+((cj0*x5983))+((x5981*x5982))+(((-1.0)*cj0*x5988)));
evalcond[5]=(((r12*x5980))+(((-1.0)*x5984*x5987))+((r11*x5990))+((sj0*x5983))+(((-1.0)*sj0*x5988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5992=((-1.0)*r01);
IkReal x5994 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5994)==0){
continue;
}
IkReal x5993=pow(x5994,-0.5);
CheckValue<IkReal> x5995 = IKatan2WithCheck(IkReal(x5992),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5995.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5995.value))));
IkReal gconst130=(x5992*x5993);
IkReal gconst131=((1.0)*r00*x5993);
CheckValue<IkReal> x5996 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5996.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5996.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5997=((-1.0)*r01);
CheckValue<IkReal> x6000 = IKatan2WithCheck(IkReal(x5997),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6000.valid){
continue;
}
IkReal x5998=((1.0)*(x6000.value));
IkReal x5999=x5993;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5998)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5998)));
IkReal gconst130=(x5997*x5999);
IkReal gconst131=((1.0)*r00*x5999);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6001=((-1.0)*r01);
CheckValue<IkReal> x6004 = IKatan2WithCheck(IkReal(x6001),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6004.valid){
continue;
}
IkReal x6002=((1.0)*(x6004.value));
IkReal x6003=x5993;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6002)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6002)));
IkReal gconst130=(x6001*x6003);
IkReal gconst131=((1.0)*r00*x6003);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6005=((-1.0)*r01);
CheckValue<IkReal> x6008 = IKatan2WithCheck(IkReal(x6005),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6008.valid){
continue;
}
IkReal x6006=((1.0)*(x6008.value));
IkReal x6007=x5993;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6006)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6006)));
IkReal gconst130=(x6005*x6007);
IkReal gconst131=((1.0)*r00*x6007);
IkReal x6009=r02*r02;
IkReal x6010=(r12*sj0);
IkReal x6011=((1.0)*cj0);
IkReal x6012=x5993;
j4eval[0]=((IKabs(((((-1.0)*x6011*x6012))+((r02*x6010*x6012))+((cj0*x6009*x6012)))))+(IKabs(((((-1.0)*x6010))+(((-1.0)*r02*x6011))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6013=((1.0)*sj0);
IkReal x6014=((1.0)*gconst130);
CheckValue<IkReal> x6015=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x6014)))),-1);
if(!x6015.valid){
continue;
}
CheckValue<IkReal> x6016 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6013))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst130*r11*x6013))+(((-1.0)*cj0*r01*x6014))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6015.value)))+(x6016.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6017=IKsin(j4);
IkReal x6018=IKcos(j4);
IkReal x6019=(gconst131*r10);
IkReal x6020=(sj1*sj2);
IkReal x6021=(gconst131*r20);
IkReal x6022=(gconst131*r00);
IkReal x6023=((1.0)*x6018);
IkReal x6024=((1.0)*cj1*cj2);
IkReal x6025=(gconst130*x6017);
IkReal x6026=((1.0)*x6017);
IkReal x6027=(gconst130*x6018);
evalcond[0]=((((-1.0)*x6021*x6026))+(((-1.0)*r22*x6023))+((r21*x6025)));
evalcond[1]=(cj0+(((-1.0)*x6019*x6026))+((r11*x6025))+(((-1.0)*r12*x6023)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6025))+(((-1.0)*r02*x6023))+(((-1.0)*x6022*x6026)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6021*x6023))+((r21*x6027))+((r22*x6017)));
evalcond[4]=((((-1.0)*cj0*x6024))+((r01*x6027))+((r02*x6017))+((cj0*x6020))+(((-1.0)*x6022*x6023)));
evalcond[5]=(((sj0*x6020))+((r12*x6017))+(((-1.0)*sj0*x6024))+(((-1.0)*x6019*x6023))+((r11*x6027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6028=((1.0)*gconst131);
CheckValue<IkReal> x6029=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6028))+(((-1.0)*gconst130*r10)))),-1);
if(!x6029.valid){
continue;
}
CheckValue<IkReal> x6030 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6029.value)))+(x6030.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6031=IKsin(j4);
IkReal x6032=IKcos(j4);
IkReal x6033=(gconst131*r10);
IkReal x6034=(sj1*sj2);
IkReal x6035=(gconst131*r20);
IkReal x6036=(gconst131*r00);
IkReal x6037=((1.0)*x6032);
IkReal x6038=((1.0)*cj1*cj2);
IkReal x6039=(gconst130*x6031);
IkReal x6040=((1.0)*x6031);
IkReal x6041=(gconst130*x6032);
evalcond[0]=(((r21*x6039))+(((-1.0)*x6035*x6040))+(((-1.0)*r22*x6037)));
evalcond[1]=(cj0+((r11*x6039))+(((-1.0)*r12*x6037))+(((-1.0)*x6033*x6040)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6036*x6040))+((r01*x6039))+(((-1.0)*r02*x6037)));
evalcond[3]=(((r22*x6031))+((cj2*sj1))+(((-1.0)*x6035*x6037))+((cj1*sj2))+((r21*x6041)));
evalcond[4]=(((cj0*x6034))+(((-1.0)*x6036*x6037))+(((-1.0)*cj0*x6038))+((r02*x6031))+((r01*x6041)));
evalcond[5]=(((r11*x6041))+((r12*x6031))+(((-1.0)*sj0*x6038))+((sj0*x6034))+(((-1.0)*x6033*x6037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6042=((1.0)*gconst131);
CheckValue<IkReal> x6043 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6042)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6043.valid){
continue;
}
CheckValue<IkReal> x6044=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6042))+(((-1.0)*gconst130*r00)))),-1);
if(!x6044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6043.value)+(((1.5707963267949)*(x6044.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6045=IKsin(j4);
IkReal x6046=IKcos(j4);
IkReal x6047=(gconst131*r10);
IkReal x6048=(sj1*sj2);
IkReal x6049=(gconst131*r20);
IkReal x6050=(gconst131*r00);
IkReal x6051=((1.0)*x6046);
IkReal x6052=((1.0)*cj1*cj2);
IkReal x6053=(gconst130*x6045);
IkReal x6054=((1.0)*x6045);
IkReal x6055=(gconst130*x6046);
evalcond[0]=((((-1.0)*r22*x6051))+(((-1.0)*x6049*x6054))+((r21*x6053)));
evalcond[1]=(cj0+(((-1.0)*r12*x6051))+(((-1.0)*x6047*x6054))+((r11*x6053)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6053))+(((-1.0)*x6050*x6054))+(((-1.0)*r02*x6051)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6045))+(((-1.0)*x6049*x6051))+((r21*x6055)));
evalcond[4]=((((-1.0)*cj0*x6052))+((r01*x6055))+((cj0*x6048))+(((-1.0)*x6050*x6051))+((r02*x6045)));
evalcond[5]=((((-1.0)*sj0*x6052))+((sj0*x6048))+(((-1.0)*x6047*x6051))+((r12*x6045))+((r11*x6055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6056=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6056;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6056);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6057=((1.0)*cj5);
IkReal x6058=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6057)));
j4eval[0]=x6058;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6057))))));
j4eval[2]=IKsign(x6058);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6059=cj5*cj5;
IkReal x6060=r01*r01;
IkReal x6061=(cj5*r00);
IkReal x6062=(r01*sj5);
IkReal x6063=((((-1.0)*x6059*x6060))+x6060+((x6059*(r00*r00)))+(((-2.0)*x6061*x6062))+(r02*r02));
j4eval[0]=x6063;
j4eval[1]=IKsign(x6063);
j4eval[2]=((IKabs(r02))+(IKabs((x6062+(((-1.0)*x6061))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6064=cj5*cj5;
IkReal x6065=r01*r01;
IkReal x6066=(r01*sj5);
IkReal x6067=(cj5*r00);
CheckValue<IkReal> x6068 = IKatan2WithCheck(IkReal((x6066+(((-1.0)*x6067)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6068.valid){
continue;
}
CheckValue<IkReal> x6069=IKPowWithIntegerCheck(IKsign((x6065+((x6064*(r00*r00)))+(((-2.0)*x6066*x6067))+(r02*r02)+(((-1.0)*x6064*x6065)))),-1);
if(!x6069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6068.value)+(((1.5707963267949)*(x6069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6070=IKcos(j4);
IkReal x6071=IKsin(j4);
IkReal x6072=(cj5*r00);
IkReal x6073=(cj5*r10);
IkReal x6074=(r21*sj5);
IkReal x6075=(cj5*r20);
IkReal x6076=((1.0)*x6070);
IkReal x6077=((1.0)*x6071);
IkReal x6078=(sj5*x6071);
IkReal x6079=(sj5*x6070);
evalcond[0]=(((r01*x6079))+(((-1.0)*x6072*x6076))+((r02*x6071)));
evalcond[1]=(((x6071*x6074))+(((-1.0)*r22*x6076))+(((-1.0)*x6075*x6077)));
evalcond[2]=(((r11*x6078))+(((-1.0)*x6073*x6077))+(((-1.0)*r12*x6076)));
evalcond[3]=((-1.0)+((r01*x6078))+(((-1.0)*r02*x6076))+(((-1.0)*x6072*x6077)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6071))+((x6070*x6074))+(((-1.0)*x6075*x6076)));
evalcond[5]=(((r11*x6079))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6073*x6076))+((r12*x6071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6080=((1.0)*cj5);
CheckValue<IkReal> x6081=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6080)))),-1);
if(!x6081.valid){
continue;
}
CheckValue<IkReal> x6082 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6080)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6081.value)))+(x6082.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6083=IKcos(j4);
IkReal x6084=IKsin(j4);
IkReal x6085=(cj5*r00);
IkReal x6086=(cj5*r10);
IkReal x6087=(r21*sj5);
IkReal x6088=(cj5*r20);
IkReal x6089=((1.0)*x6083);
IkReal x6090=((1.0)*x6084);
IkReal x6091=(sj5*x6084);
IkReal x6092=(sj5*x6083);
evalcond[0]=((((-1.0)*x6085*x6089))+((r01*x6092))+((r02*x6084)));
evalcond[1]=((((-1.0)*r22*x6089))+((x6084*x6087))+(((-1.0)*x6088*x6090)));
evalcond[2]=((((-1.0)*r12*x6089))+((r11*x6091))+(((-1.0)*x6086*x6090)));
evalcond[3]=((-1.0)+((r01*x6091))+(((-1.0)*r02*x6089))+(((-1.0)*x6085*x6090)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6088*x6089))+((cj1*sj2))+((r22*x6084))+((x6083*x6087)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6084))+((r11*x6092))+(((-1.0)*x6086*x6089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6093=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6093.valid){
continue;
}
CheckValue<IkReal> x6094 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6093.value)))+(x6094.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6095=IKcos(j4);
IkReal x6096=IKsin(j4);
IkReal x6097=(cj5*r00);
IkReal x6098=(cj5*r10);
IkReal x6099=(r21*sj5);
IkReal x6100=(cj5*r20);
IkReal x6101=((1.0)*x6095);
IkReal x6102=((1.0)*x6096);
IkReal x6103=(sj5*x6096);
IkReal x6104=(sj5*x6095);
evalcond[0]=(((r01*x6104))+((r02*x6096))+(((-1.0)*x6097*x6101)));
evalcond[1]=(((x6096*x6099))+(((-1.0)*r22*x6101))+(((-1.0)*x6100*x6102)));
evalcond[2]=(((r11*x6103))+(((-1.0)*x6098*x6102))+(((-1.0)*r12*x6101)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6101))+((r01*x6103))+(((-1.0)*x6097*x6102)));
evalcond[4]=(((x6095*x6099))+((cj2*sj1))+((cj1*sj2))+((r22*x6096))+(((-1.0)*x6100*x6101)));
evalcond[5]=(((r11*x6104))+(((-1.0)*x6098*x6101))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6105=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6105;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6105);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6106=((1.0)*cj5);
IkReal x6107=((((-1.0)*r21*x6106))+(((-1.0)*r20*sj5)));
j4eval[0]=x6107;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6106))))));
j4eval[2]=IKsign(x6107);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6108=(r01*sj5);
IkReal x6109=(cj1*sj2);
IkReal x6110=(cj2*sj1);
IkReal x6111=((1.0)*r02);
IkReal x6112=((1.0)*cj5*r00);
IkReal x6113=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6113;
j4eval[1]=((IKabs(((((-1.0)*x6109*x6112))+((x6108*x6109))+((x6108*x6110))+(((-1.0)*x6110*x6112)))))+(IKabs(((((-1.0)*x6109*x6111))+(((-1.0)*x6110*x6111))))));
j4eval[2]=IKsign(x6113);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6114=(r01*sj5);
IkReal x6115=(cj1*sj2);
IkReal x6116=(cj2*sj1);
IkReal x6117=((1.0)*r02);
IkReal x6118=((1.0)*cj5*r00);
CheckValue<IkReal> x6119 = IKatan2WithCheck(IkReal(((((-1.0)*x6115*x6118))+(((-1.0)*x6116*x6118))+((x6114*x6115))+((x6114*x6116)))),IkReal(((((-1.0)*x6115*x6117))+(((-1.0)*x6116*x6117)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6119.valid){
continue;
}
CheckValue<IkReal> x6120=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6119.value)+(((1.5707963267949)*(x6120.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6121=IKcos(j4);
IkReal x6122=IKsin(j4);
IkReal x6123=(cj5*r00);
IkReal x6124=(cj5*r10);
IkReal x6125=(r21*sj5);
IkReal x6126=(cj5*r20);
IkReal x6127=((1.0)*x6121);
IkReal x6128=((1.0)*x6122);
IkReal x6129=(sj5*x6122);
IkReal x6130=(sj5*x6121);
evalcond[0]=(((r02*x6122))+((r01*x6130))+(((-1.0)*x6123*x6127)));
evalcond[1]=((((-1.0)*x6126*x6128))+(((-1.0)*r22*x6127))+((x6122*x6125)));
evalcond[2]=((((-1.0)*x6124*x6128))+(((-1.0)*r12*x6127))+((r11*x6129)));
evalcond[3]=((1.0)+((r01*x6129))+(((-1.0)*r02*x6127))+(((-1.0)*x6123*x6128)));
evalcond[4]=(((cj2*sj1))+((x6121*x6125))+((cj1*sj2))+(((-1.0)*x6126*x6127))+((r22*x6122)));
evalcond[5]=(((r11*x6130))+((r12*x6122))+(((-1.0)*x6124*x6127))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6131=((1.0)*cj5);
CheckValue<IkReal> x6132 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6131)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6132.valid){
continue;
}
CheckValue<IkReal> x6133=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6131))+(((-1.0)*r20*sj5)))),-1);
if(!x6133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6132.value)+(((1.5707963267949)*(x6133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6134=IKcos(j4);
IkReal x6135=IKsin(j4);
IkReal x6136=(cj5*r00);
IkReal x6137=(cj5*r10);
IkReal x6138=(r21*sj5);
IkReal x6139=(cj5*r20);
IkReal x6140=((1.0)*x6134);
IkReal x6141=((1.0)*x6135);
IkReal x6142=(sj5*x6135);
IkReal x6143=(sj5*x6134);
evalcond[0]=((((-1.0)*x6136*x6140))+((r01*x6143))+((r02*x6135)));
evalcond[1]=((((-1.0)*x6139*x6141))+((x6135*x6138))+(((-1.0)*r22*x6140)));
evalcond[2]=((((-1.0)*x6137*x6141))+((r11*x6142))+(((-1.0)*r12*x6140)));
evalcond[3]=((1.0)+(((-1.0)*x6136*x6141))+(((-1.0)*r02*x6140))+((r01*x6142)));
evalcond[4]=((((-1.0)*x6139*x6140))+((cj2*sj1))+((r22*x6135))+((cj1*sj2))+((x6134*x6138)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x6137*x6140))+((r11*x6143))+((cj1*cj2))+((r12*x6135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6144 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6144.valid){
continue;
}
CheckValue<IkReal> x6145=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6144.value)+(((1.5707963267949)*(x6145.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6146=IKcos(j4);
IkReal x6147=IKsin(j4);
IkReal x6148=(cj5*r00);
IkReal x6149=(cj5*r10);
IkReal x6150=(r21*sj5);
IkReal x6151=(cj5*r20);
IkReal x6152=((1.0)*x6146);
IkReal x6153=((1.0)*x6147);
IkReal x6154=(sj5*x6147);
IkReal x6155=(sj5*x6146);
evalcond[0]=((((-1.0)*x6148*x6152))+((r02*x6147))+((r01*x6155)));
evalcond[1]=((((-1.0)*x6151*x6153))+(((-1.0)*r22*x6152))+((x6147*x6150)));
evalcond[2]=((((-1.0)*r12*x6152))+(((-1.0)*x6149*x6153))+((r11*x6154)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6152))+(((-1.0)*x6148*x6153))+((r01*x6154)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6151*x6152))+((x6146*x6150))+((cj1*sj2))+((r22*x6147)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x6147))+(((-1.0)*x6149*x6152))+((cj1*cj2))+((r11*x6155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6156=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6156);
rxp1_1=(px*r21);
rxp1_2=(r11*x6156);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6157=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6157);
rxp1_1=(px*r21);
rxp1_2=(r11*x6157);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6158=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6158);
rxp1_1=(px*r21);
rxp1_2=(r11*x6158);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6161=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6161.valid){
continue;
}
IkReal x6159=x6161.value;
IkReal x6160=(sj0*x6159);
cj4array[0]=((((-1.0)*sj1*sj2*x6160))+((cj1*cj2*x6160)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6162=IKsin(j4);
IkReal x6163=IKcos(j4);
IkReal x6164=(r21*sj5);
IkReal x6165=((1.0)*cj5*r20);
evalcond[0]=(r02*x6162);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6163)));
evalcond[2]=(((x6162*x6164))+(((-1.0)*x6162*x6165)));
evalcond[3]=((((-1.0)*cj5*r10*x6162))+((r11*sj5*x6162)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6163*x6164))+(((-1.0)*x6163*x6165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6168=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6168.valid){
continue;
}
IkReal x6166=x6168.value;
IkReal x6167=((1.0)*x6166);
cj4array[0]=((((-1.0)*cj2*sj1*x6167))+(((-1.0)*cj1*sj2*x6167)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6169=IKsin(j4);
IkReal x6170=IKcos(j4);
IkReal x6171=((1.0)*sj0);
IkReal x6172=((1.0)*cj5);
IkReal x6173=(sj5*x6169);
evalcond[0]=(r02*x6169);
evalcond[1]=((((-1.0)*x6171))+(((-1.0)*r02*x6170)));
evalcond[2]=(((r21*x6173))+(((-1.0)*r20*x6169*x6172)));
evalcond[3]=((((-1.0)*r10*x6169*x6172))+((r11*x6173)));
evalcond[4]=(((r11*sj5*x6170))+(((-1.0)*cj1*cj2*x6171))+((sj0*sj1*sj2))+(((-1.0)*r10*x6170*x6172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6174=IKPowWithIntegerCheck(r02,-1);
if(!x6174.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6174.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6175=IKsin(j4);
IkReal x6176=IKcos(j4);
IkReal x6177=(r21*sj5);
IkReal x6178=((1.0)*cj5);
IkReal x6179=(r11*sj5);
evalcond[0]=(r02*x6175);
evalcond[1]=(((x6175*x6177))+(((-1.0)*r20*x6175*x6178)));
evalcond[2]=(((x6175*x6179))+(((-1.0)*r10*x6175*x6178)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x6176*x6178))+((x6176*x6177)));
evalcond[4]=((((-1.0)*r10*x6176*x6178))+(((-1.0)*cj1*cj2*sj0))+((x6176*x6179))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6180=((1.0)*sj0);
IkReal x6181=((1.0)*cj0);
CheckValue<IkReal> x6182=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6182.valid){
continue;
}
CheckValue<IkReal> x6183 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6181))+(((-1.0)*r12*x6180)))),IkReal(((((-1.0)*r01*sj5*x6181))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6180)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6182.value)))+(x6183.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6184=IKsin(j4);
IkReal x6185=IKcos(j4);
IkReal x6186=(cj5*r00);
IkReal x6187=(cj5*r10);
IkReal x6188=(r21*sj5);
IkReal x6189=(sj1*sj2);
IkReal x6190=(cj5*r20);
IkReal x6191=((1.0)*x6185);
IkReal x6192=((1.0)*cj1*cj2);
IkReal x6193=((1.0)*x6184);
IkReal x6194=(sj5*x6184);
IkReal x6195=(sj5*x6185);
evalcond[0]=(((x6184*x6188))+(((-1.0)*x6190*x6193))+(((-1.0)*r22*x6191)));
evalcond[1]=(cj0+((r11*x6194))+(((-1.0)*r12*x6191))+(((-1.0)*x6187*x6193)));
evalcond[2]=((((-1.0)*x6186*x6193))+(((-1.0)*sj0))+((r01*x6194))+(((-1.0)*r02*x6191)));
evalcond[3]=(((cj2*sj1))+((r22*x6184))+((x6185*x6188))+((cj1*sj2))+(((-1.0)*x6190*x6191)));
evalcond[4]=((((-1.0)*x6186*x6191))+(((-1.0)*cj0*x6192))+((cj0*x6189))+((r02*x6184))+((r01*x6195)));
evalcond[5]=(((r11*x6195))+(((-1.0)*sj0*x6192))+((sj0*x6189))+(((-1.0)*x6187*x6191))+((r12*x6184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6196=((1.0)*cj5);
CheckValue<IkReal> x6197 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6196))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6197.valid){
continue;
}
CheckValue<IkReal> x6198=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6196)))),-1);
if(!x6198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6197.value)+(((1.5707963267949)*(x6198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6199=IKsin(j4);
IkReal x6200=IKcos(j4);
IkReal x6201=(cj5*r00);
IkReal x6202=(cj5*r10);
IkReal x6203=(r21*sj5);
IkReal x6204=(sj1*sj2);
IkReal x6205=(cj5*r20);
IkReal x6206=((1.0)*x6200);
IkReal x6207=((1.0)*cj1*cj2);
IkReal x6208=((1.0)*x6199);
IkReal x6209=(sj5*x6199);
IkReal x6210=(sj5*x6200);
evalcond[0]=(((x6199*x6203))+(((-1.0)*r22*x6206))+(((-1.0)*x6205*x6208)));
evalcond[1]=((((-1.0)*x6202*x6208))+cj0+(((-1.0)*r12*x6206))+((r11*x6209)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6209))+(((-1.0)*r02*x6206))+(((-1.0)*x6201*x6208)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6205*x6206))+((r22*x6199))+((x6200*x6203)));
evalcond[4]=(((r02*x6199))+((r01*x6210))+(((-1.0)*cj0*x6207))+(((-1.0)*x6201*x6206))+((cj0*x6204)));
evalcond[5]=(((r11*x6210))+(((-1.0)*x6202*x6206))+((sj0*x6204))+((r12*x6199))+(((-1.0)*sj0*x6207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6211=((1.0)*cj5);
CheckValue<IkReal> x6212=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6211)))),-1);
if(!x6212.valid){
continue;
}
CheckValue<IkReal> x6213 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6211)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6212.value)))+(x6213.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6214=IKsin(j4);
IkReal x6215=IKcos(j4);
IkReal x6216=(cj5*r00);
IkReal x6217=(cj5*r10);
IkReal x6218=(r21*sj5);
IkReal x6219=(sj1*sj2);
IkReal x6220=(cj5*r20);
IkReal x6221=((1.0)*x6215);
IkReal x6222=((1.0)*cj1*cj2);
IkReal x6223=((1.0)*x6214);
IkReal x6224=(sj5*x6214);
IkReal x6225=(sj5*x6215);
evalcond[0]=(((x6214*x6218))+(((-1.0)*x6220*x6223))+(((-1.0)*r22*x6221)));
evalcond[1]=(cj0+((r11*x6224))+(((-1.0)*r12*x6221))+(((-1.0)*x6217*x6223)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6224))+(((-1.0)*r02*x6221))+(((-1.0)*x6216*x6223)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6215*x6218))+((r22*x6214))+(((-1.0)*x6220*x6221)));
evalcond[4]=((((-1.0)*cj0*x6222))+((r02*x6214))+((r01*x6225))+(((-1.0)*x6216*x6221))+((cj0*x6219)));
evalcond[5]=(((r12*x6214))+((sj0*x6219))+((r11*x6225))+(((-1.0)*sj0*x6222))+(((-1.0)*x6217*x6221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6226=r21*r21;
IkReal x6227=cj5*cj5;
IkReal x6228=(cj2*sj1);
IkReal x6229=(cj1*sj2);
IkReal x6230=(r21*sj5);
IkReal x6231=((1.0)*cj5*r20);
CheckValue<IkReal> x6232 = IKatan2WithCheck(IkReal((((r22*x6228))+((r22*x6229)))),IkReal(((((-1.0)*x6228*x6231))+((x6228*x6230))+((x6229*x6230))+(((-1.0)*x6229*x6231)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6232.valid){
continue;
}
CheckValue<IkReal> x6233=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6226))+(((-1.0)*x6227*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*cj5*r20*x6230))+((x6226*x6227)))),-1);
if(!x6233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6232.value)+(((1.5707963267949)*(x6233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6234=IKsin(j4);
IkReal x6235=IKcos(j4);
IkReal x6236=(r21*sj5);
IkReal x6237=(cj5*r20);
IkReal x6238=((1.0)*x6235);
evalcond[0]=(((x6234*x6236))+(((-1.0)*r22*x6238))+(((-1.0)*x6234*x6237)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((x6235*x6236))+((r22*x6234))+(((-1.0)*x6237*x6238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6239=(cj5*sj4);
IkReal x6240=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x6239))+((r01*x6240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x6240))+((r10*x6239))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x6239))+((r01*x6240))))+IKsqr(((((-1.0)*r11*x6240))+((r10*x6239))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x6239))+((r01*x6240))), ((((-1.0)*r11*x6240))+((r10*x6239))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6241=IKcos(j0);
IkReal x6242=IKsin(j0);
IkReal x6243=((0.1)*sj5);
IkReal x6244=((0.392)*sj1);
IkReal x6245=(cj5*r11);
IkReal x6246=(cj5*r01);
IkReal x6247=((1.0)*cj1);
IkReal x6248=(r11*sj5);
IkReal x6249=((0.392)*cj2);
IkReal x6250=((1.0)*sj1);
IkReal x6251=((1.0)*cj4);
IkReal x6252=(r01*sj5);
IkReal x6253=(sj2*x6242);
IkReal x6254=(sj2*x6241);
IkReal x6255=(cj5*x6251);
IkReal x6256=(cj1*x6241);
IkReal x6257=(cj1*x6242);
IkReal x6258=(cj2*x6241);
IkReal x6259=((1.0)*cj5*sj4);
IkReal x6260=(cj2*x6242);
evalcond[0]=(x6241+((sj4*x6248))+(((-1.0)*r12*x6251))+(((-1.0)*r10*x6259)));
evalcond[1]=((((-1.0)*x6242))+(((-1.0)*r02*x6251))+(((-1.0)*r00*x6259))+((sj4*x6252)));
evalcond[2]=((((-1.0)*x6250*x6258))+((r00*sj5))+x6246+(((-1.0)*x6247*x6254)));
evalcond[3]=(x6245+(((-1.0)*x6247*x6253))+((r10*sj5))+(((-1.0)*x6250*x6260)));
evalcond[4]=((((-1.0)*x6247*x6258))+((cj4*x6252))+((sj1*x6254))+((r02*sj4))+(((-1.0)*r00*x6255)));
evalcond[5]=((((-1.0)*x6247*x6260))+((sj1*x6253))+((cj4*x6248))+((r12*sj4))+(((-1.0)*r10*x6255)));
evalcond[6]=(((x6249*x6256))+(((-1.0)*r00*x6243))+(((-1.0)*x6244*x6254))+(((-1.0)*px))+(((-0.134)*x6242))+(((-0.1)*x6246))+(((0.425)*x6256)));
evalcond[7]=((((0.134)*x6241))+(((-1.0)*r10*x6243))+((x6249*x6257))+(((-1.0)*x6244*x6253))+(((-1.0)*py))+(((-0.1)*x6245))+(((0.425)*x6257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6261=((1.0)*cj5);
IkReal x6262=((1.0)*sj5);
CheckValue<IkReal> x6263 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x6262))+(((-1.0)*r11*x6261)))),IkReal(((((-1.0)*r01*x6261))+(((-1.0)*r00*x6262)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6263.valid){
continue;
}
CheckValue<IkReal> x6264=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6264.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6263.value)+(((1.5707963267949)*(x6264.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6265=IKcos(j0);
IkReal x6266=IKsin(j0);
IkReal x6267=((0.1)*sj5);
IkReal x6268=(cj5*r11);
IkReal x6269=(cj5*r01);
IkReal x6270=((0.392)*cj2);
IkReal x6271=((1.0)*cj2);
IkReal x6272=((0.392)*sj2);
IkReal x6273=((1.0)*cj1*sj2);
IkReal x6274=(cj1*x6265);
IkReal x6275=(cj1*x6266);
IkReal x6276=(sj1*x6265);
IkReal x6277=(sj1*x6266);
evalcond[0]=(((r00*sj5))+x6269+(((-1.0)*x6271*x6276))+(((-1.0)*x6265*x6273)));
evalcond[1]=(x6268+((r10*sj5))+(((-1.0)*x6271*x6277))+(((-1.0)*x6266*x6273)));
evalcond[2]=((((-0.134)*x6266))+(((-1.0)*x6272*x6276))+(((-0.1)*x6269))+(((-1.0)*px))+(((0.425)*x6274))+((x6270*x6274))+(((-1.0)*r00*x6267)));
evalcond[3]=((((-1.0)*x6272*x6277))+(((-0.1)*x6268))+(((-1.0)*py))+(((0.425)*x6275))+((x6270*x6275))+(((-1.0)*r10*x6267))+(((0.134)*x6265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6278=((1.0)*cj5);
IkReal x6279=((((-1.0)*r01*x6278))+(((-1.0)*r00*sj5)));
j4eval[0]=x6279;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6278)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6279);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6280=((1.0)*cj5);
IkReal x6281=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6280)));
j4eval[0]=x6281;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6280))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6281);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6282=((1.0)*sj0);
IkReal x6283=((1.0)*cj0);
IkReal x6284=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6284;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x6282))+(((-1.0)*r01*sj5*x6283))+((cj0*cj5*r00))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r02*x6283))+(((-1.0)*r12*x6282))))));
j4eval[2]=IKsign(x6284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6285=((-1.0)*r20);
IkReal x6287 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6287)==0){
continue;
}
IkReal x6286=pow(x6287,-0.5);
CheckValue<IkReal> x6288 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6285),IKFAST_ATAN2_MAGTHRESH);
if(!x6288.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6288.value));
IkReal gconst115=(r21*x6286);
IkReal gconst116=(x6285*x6286);
CheckValue<IkReal> x6289 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6289.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6289.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6290=((-1.0)*r20);
IkReal x6291=x6286;
CheckValue<IkReal> x6293 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6290),IKFAST_ATAN2_MAGTHRESH);
if(!x6293.valid){
continue;
}
IkReal x6292=((-1.0)*(x6293.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6292;
IkReal gconst114=x6292;
IkReal gconst115=(r21*x6291);
IkReal gconst116=(x6290*x6291);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6294=((-1.0)*r20);
IkReal x6295=x6286;
CheckValue<IkReal> x6297 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6294),IKFAST_ATAN2_MAGTHRESH);
if(!x6297.valid){
continue;
}
IkReal x6296=((-1.0)*(x6297.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6296;
IkReal gconst114=x6296;
IkReal gconst115=(r21*x6295);
IkReal gconst116=(x6294*x6295);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6298=((-1.0)*r20);
IkReal x6299=x6286;
CheckValue<IkReal> x6301 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6298),IKFAST_ATAN2_MAGTHRESH);
if(!x6301.valid){
continue;
}
IkReal x6300=((-1.0)*(x6301.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6300;
IkReal gconst114=x6300;
IkReal gconst115=(r21*x6299);
IkReal gconst116=(x6298*x6299);
IkReal x6302=((1.0)*(r22*r22));
CheckValue<IkReal> x6306=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6302))),-1);
if(!x6306.valid){
continue;
}
IkReal x6303=x6306.value;
IkReal x6304=((1.0)*x6303);
IkReal x6305=((((-1.0)*x6304*(r20*r20*r20*r20)))+(((-1.0)*x6302))+(((-2.0)*x6303*(r20*r20)*(r21*r21)))+(((-1.0)*x6304*(r21*r21*r21*r21))));
j4eval[0]=x6305;
j4eval[1]=IKsign(x6305);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6307=(cj2*sj1);
IkReal x6308=(gconst115*r21);
IkReal x6309=(cj1*sj2);
IkReal x6310=((1.0)*gconst116*r20);
CheckValue<IkReal> x6311=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x6308))+(((-1.0)*gconst116*r20*x6310))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6308*x6308))))),-1);
if(!x6311.valid){
continue;
}
CheckValue<IkReal> x6312 = IKatan2WithCheck(IkReal((((r22*x6307))+((r22*x6309)))),IkReal(((((-1.0)*x6309*x6310))+(((-1.0)*x6307*x6310))+((x6307*x6308))+((x6308*x6309)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6311.value)))+(x6312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6313=IKsin(j4);
IkReal x6314=IKcos(j4);
IkReal x6315=(sj1*sj2);
IkReal x6316=((1.0)*x6314);
IkReal x6317=((1.0)*cj1*cj2);
IkReal x6318=(gconst115*x6313);
IkReal x6319=(gconst115*x6314);
IkReal x6320=((1.0)*gconst116*x6313);
evalcond[0]=((((-1.0)*r22*x6316))+(((-1.0)*r20*x6320))+((r21*x6318)));
evalcond[1]=(cj0+(((-1.0)*r12*x6316))+((r11*x6318))+(((-1.0)*r10*x6320)));
evalcond[2]=((((-1.0)*r00*x6320))+(((-1.0)*sj0))+(((-1.0)*r02*x6316))+((r01*x6318)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6313))+((r21*x6319))+(((-1.0)*gconst116*r20*x6316)));
evalcond[4]=(((r01*x6319))+((r02*x6313))+((cj0*x6315))+(((-1.0)*gconst116*r00*x6316))+(((-1.0)*cj0*x6317)));
evalcond[5]=(((r11*x6319))+(((-1.0)*sj0*x6317))+(((-1.0)*gconst116*r10*x6316))+((r12*x6313))+((sj0*x6315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6321=((1.0)*gconst116);
CheckValue<IkReal> x6322=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6321)))),-1);
if(!x6322.valid){
continue;
}
CheckValue<IkReal> x6323 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6321))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6322.value)))+(x6323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6324=IKsin(j4);
IkReal x6325=IKcos(j4);
IkReal x6326=(sj1*sj2);
IkReal x6327=((1.0)*x6325);
IkReal x6328=((1.0)*cj1*cj2);
IkReal x6329=(gconst115*x6324);
IkReal x6330=(gconst115*x6325);
IkReal x6331=((1.0)*gconst116*x6324);
evalcond[0]=((((-1.0)*r20*x6331))+(((-1.0)*r22*x6327))+((r21*x6329)));
evalcond[1]=(((r11*x6329))+cj0+(((-1.0)*r10*x6331))+(((-1.0)*r12*x6327)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6329))+(((-1.0)*r02*x6327))+(((-1.0)*r00*x6331)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x6327))+((cj1*sj2))+((r21*x6330))+((r22*x6324)));
evalcond[4]=(((r02*x6324))+(((-1.0)*gconst116*r00*x6327))+((cj0*x6326))+(((-1.0)*cj0*x6328))+((r01*x6330)));
evalcond[5]=((((-1.0)*sj0*x6328))+((r12*x6324))+((r11*x6330))+(((-1.0)*gconst116*r10*x6327))+((sj0*x6326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6332=((1.0)*gconst116);
CheckValue<IkReal> x6333=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6332)))),-1);
if(!x6333.valid){
continue;
}
CheckValue<IkReal> x6334 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x6332)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6333.value)))+(x6334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6335=IKsin(j4);
IkReal x6336=IKcos(j4);
IkReal x6337=(sj1*sj2);
IkReal x6338=((1.0)*x6336);
IkReal x6339=((1.0)*cj1*cj2);
IkReal x6340=(gconst115*x6335);
IkReal x6341=(gconst115*x6336);
IkReal x6342=((1.0)*gconst116*x6335);
evalcond[0]=((((-1.0)*r20*x6342))+((r21*x6340))+(((-1.0)*r22*x6338)));
evalcond[1]=((((-1.0)*r12*x6338))+cj0+(((-1.0)*r10*x6342))+((r11*x6340)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6338))+((r01*x6340))+(((-1.0)*r00*x6342)));
evalcond[3]=(((cj2*sj1))+((r22*x6335))+((cj1*sj2))+((r21*x6341))+(((-1.0)*gconst116*r20*x6338)));
evalcond[4]=(((r02*x6335))+(((-1.0)*cj0*x6339))+(((-1.0)*gconst116*r00*x6338))+((r01*x6341))+((cj0*x6337)));
evalcond[5]=(((r12*x6335))+((sj0*x6337))+(((-1.0)*gconst116*r10*x6338))+(((-1.0)*sj0*x6339))+((r11*x6341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6343=((-1.0)*r21);
IkReal x6345 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6345)==0){
continue;
}
IkReal x6344=pow(x6345,-0.5);
CheckValue<IkReal> x6346 = IKatan2WithCheck(IkReal(x6343),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6346.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6346.value))));
IkReal gconst118=(x6343*x6344);
IkReal gconst119=((1.0)*r20*x6344);
CheckValue<IkReal> x6347 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6347.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6347.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6348=((-1.0)*r21);
CheckValue<IkReal> x6351 = IKatan2WithCheck(IkReal(x6348),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6351.valid){
continue;
}
IkReal x6349=((1.0)*(x6351.value));
IkReal x6350=x6344;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6349)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6349)));
IkReal gconst118=(x6348*x6350);
IkReal gconst119=((1.0)*r20*x6350);
IkReal x6352=r22*r22;
IkReal x6353=((1.0)*x6352);
CheckValue<IkReal> x6357=IKPowWithIntegerCheck(((-1.0)+x6352),-1);
if(!x6357.valid){
continue;
}
IkReal x6354=x6357.value;
if((((1.0)+(((-1.0)*x6353)))) < -0.00001)
continue;
IkReal x6355=IKsqrt(((1.0)+(((-1.0)*x6353))));
IkReal x6356=(cj0*x6354*x6355);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x6356+(((-1.0)*x6353*x6356))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6358=((-1.0)*r21);
CheckValue<IkReal> x6361 = IKatan2WithCheck(IkReal(x6358),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6361.valid){
continue;
}
IkReal x6359=((1.0)*(x6361.value));
IkReal x6360=x6344;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6359)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6359)));
IkReal gconst118=(x6358*x6360);
IkReal gconst119=((1.0)*r20*x6360);
IkReal x6362=r22*r22;
IkReal x6363=((1.0)*x6362);
CheckValue<IkReal> x6367=IKPowWithIntegerCheck(((-1.0)+x6362),-1);
if(!x6367.valid){
continue;
}
IkReal x6364=x6367.value;
if((((1.0)+(((-1.0)*x6363)))) < -0.00001)
continue;
IkReal x6365=IKsqrt(((1.0)+(((-1.0)*x6363))));
IkReal x6366=(sj0*x6364*x6365);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6366+(((-1.0)*x6363*x6366))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6368=((-1.0)*r21);
CheckValue<IkReal> x6371 = IKatan2WithCheck(IkReal(x6368),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6371.valid){
continue;
}
IkReal x6369=((1.0)*(x6371.value));
IkReal x6370=x6344;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6369)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6369)));
IkReal gconst118=(x6368*x6370);
IkReal gconst119=((1.0)*r20*x6370);
IkReal x6372=r22*r22;
IkReal x6373=(r12*sj0);
IkReal x6374=(cj0*r02);
CheckValue<IkReal> x6378=IKPowWithIntegerCheck(((-1.0)+x6372),-1);
if(!x6378.valid){
continue;
}
IkReal x6375=x6378.value;
if((((1.0)+(((-1.0)*x6372)))) < -0.00001)
continue;
IkReal x6376=IKsqrt(((1.0)+(((-1.0)*x6372))));
IkReal x6377=(r22*x6375*x6376);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x6373*x6377))+((x6374*x6377)))))+(IKabs(((((-1.0)*x6373))+(((-1.0)*x6374))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6379=((1.0)*sj0);
IkReal x6380=((1.0)*gconst118);
CheckValue<IkReal> x6381 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6379)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x6379))+(((-1.0)*cj0*r01*x6380))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6381.valid){
continue;
}
CheckValue<IkReal> x6382=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6380)))),-1);
if(!x6382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6381.value)+(((1.5707963267949)*(x6382.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6383=IKsin(j4);
IkReal x6384=IKcos(j4);
IkReal x6385=(gconst118*r01);
IkReal x6386=(sj1*sj2);
IkReal x6387=(gconst119*r20);
IkReal x6388=(gconst119*r10);
IkReal x6389=(gconst119*r00);
IkReal x6390=(gconst118*r21);
IkReal x6391=(gconst118*r11);
IkReal x6392=((1.0)*x6384);
IkReal x6393=((1.0)*cj1*cj2);
IkReal x6394=((1.0)*x6383);
evalcond[0]=(((x6383*x6390))+(((-1.0)*x6387*x6394))+(((-1.0)*r22*x6392)));
evalcond[1]=(((x6383*x6391))+cj0+(((-1.0)*x6388*x6394))+(((-1.0)*r12*x6392)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6392))+((x6383*x6385))+(((-1.0)*x6389*x6394)));
evalcond[3]=(((cj2*sj1))+((x6384*x6390))+((r22*x6383))+((cj1*sj2))+(((-1.0)*x6387*x6392)));
evalcond[4]=(((cj0*x6386))+(((-1.0)*cj0*x6393))+((x6384*x6385))+((r02*x6383))+(((-1.0)*x6389*x6392)));
evalcond[5]=((((-1.0)*sj0*x6393))+((sj0*x6386))+((x6384*x6391))+(((-1.0)*x6388*x6392))+((r12*x6383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6395=((1.0)*gconst119);
CheckValue<IkReal> x6396 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6395))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6396.valid){
continue;
}
CheckValue<IkReal> x6397=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x6395)))),-1);
if(!x6397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6396.value)+(((1.5707963267949)*(x6397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6398=IKsin(j4);
IkReal x6399=IKcos(j4);
IkReal x6400=(gconst118*r01);
IkReal x6401=(sj1*sj2);
IkReal x6402=(gconst119*r20);
IkReal x6403=(gconst119*r10);
IkReal x6404=(gconst119*r00);
IkReal x6405=(gconst118*r21);
IkReal x6406=(gconst118*r11);
IkReal x6407=((1.0)*x6399);
IkReal x6408=((1.0)*cj1*cj2);
IkReal x6409=((1.0)*x6398);
evalcond[0]=((((-1.0)*x6402*x6409))+((x6398*x6405))+(((-1.0)*r22*x6407)));
evalcond[1]=((((-1.0)*x6403*x6409))+cj0+((x6398*x6406))+(((-1.0)*r12*x6407)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6407))+((x6398*x6400))+(((-1.0)*x6404*x6409)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6402*x6407))+((cj1*sj2))+((x6399*x6405))+((r22*x6398)));
evalcond[4]=(((cj0*x6401))+((x6399*x6400))+(((-1.0)*cj0*x6408))+(((-1.0)*x6404*x6407))+((r02*x6398)));
evalcond[5]=((((-1.0)*x6403*x6407))+((sj0*x6401))+((r12*x6398))+((x6399*x6406))+(((-1.0)*sj0*x6408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6410=((1.0)*gconst119);
CheckValue<IkReal> x6411=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x6410)))),-1);
if(!x6411.valid){
continue;
}
CheckValue<IkReal> x6412 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6410)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6411.value)))+(x6412.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6413=IKsin(j4);
IkReal x6414=IKcos(j4);
IkReal x6415=(gconst118*r01);
IkReal x6416=(sj1*sj2);
IkReal x6417=(gconst119*r20);
IkReal x6418=(gconst119*r10);
IkReal x6419=(gconst119*r00);
IkReal x6420=(gconst118*r21);
IkReal x6421=(gconst118*r11);
IkReal x6422=((1.0)*x6414);
IkReal x6423=((1.0)*cj1*cj2);
IkReal x6424=((1.0)*x6413);
evalcond[0]=((((-1.0)*x6417*x6424))+((x6413*x6420))+(((-1.0)*r22*x6422)));
evalcond[1]=((((-1.0)*x6418*x6424))+cj0+((x6413*x6421))+(((-1.0)*r12*x6422)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6419*x6424))+((x6413*x6415))+(((-1.0)*r02*x6422)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6417*x6422))+((cj1*sj2))+((r22*x6413))+((x6414*x6420)));
evalcond[4]=(((r02*x6413))+(((-1.0)*x6419*x6422))+(((-1.0)*cj0*x6423))+((cj0*x6416))+((x6414*x6415)));
evalcond[5]=((((-1.0)*x6418*x6422))+((sj0*x6416))+(((-1.0)*sj0*x6423))+((r12*x6413))+((x6414*x6421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6425=((-1.0)*r10);
IkReal x6427 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6427)==0){
continue;
}
IkReal x6426=pow(x6427,-0.5);
CheckValue<IkReal> x6428 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6425),IKFAST_ATAN2_MAGTHRESH);
if(!x6428.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6428.value));
IkReal gconst121=(r11*x6426);
IkReal gconst122=(x6425*x6426);
CheckValue<IkReal> x6429 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6429.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6429.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6430=((-1.0)*r10);
IkReal x6431=x6426;
CheckValue<IkReal> x6433 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6430),IKFAST_ATAN2_MAGTHRESH);
if(!x6433.valid){
continue;
}
IkReal x6432=((-1.0)*(x6433.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6432;
IkReal gconst120=x6432;
IkReal gconst121=(r11*x6431);
IkReal gconst122=(x6430*x6431);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6434=((1.0)*sj0);
IkReal x6435=((1.0)*gconst121);
CheckValue<IkReal> x6436=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x6435)))),-1);
if(!x6436.valid){
continue;
}
CheckValue<IkReal> x6437 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6434))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x6435))+(((-1.0)*gconst121*r11*x6434))+((cj0*gconst122*r00))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6436.value)))+(x6437.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6438=IKsin(j4);
IkReal x6439=IKcos(j4);
IkReal x6440=(gconst121*r11);
IkReal x6441=(sj1*sj2);
IkReal x6442=(gconst122*r00);
IkReal x6443=(gconst122*r10);
IkReal x6444=(gconst122*r20);
IkReal x6445=((1.0)*x6439);
IkReal x6446=((1.0)*cj1*cj2);
IkReal x6447=((1.0)*x6438);
IkReal x6448=(gconst121*x6438);
IkReal x6449=(gconst121*x6439);
evalcond[0]=((((-1.0)*x6444*x6447))+((r21*x6448))+(((-1.0)*r22*x6445)));
evalcond[1]=(cj0+((x6438*x6440))+(((-1.0)*r12*x6445))+(((-1.0)*x6443*x6447)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6448))+(((-1.0)*r02*x6445))+(((-1.0)*x6442*x6447)));
evalcond[3]=(((r22*x6438))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6444*x6445))+((r21*x6449)));
evalcond[4]=(((r01*x6449))+((cj0*x6441))+((r02*x6438))+(((-1.0)*cj0*x6446))+(((-1.0)*x6442*x6445)));
evalcond[5]=((((-1.0)*sj0*x6446))+((r12*x6438))+((sj0*x6441))+((x6439*x6440))+(((-1.0)*x6443*x6445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6450=((1.0)*gconst122);
CheckValue<IkReal> x6451=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6450)))),-1);
if(!x6451.valid){
continue;
}
CheckValue<IkReal> x6452 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6450))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6451.value)))+(x6452.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6453=IKsin(j4);
IkReal x6454=IKcos(j4);
IkReal x6455=(gconst121*r11);
IkReal x6456=(sj1*sj2);
IkReal x6457=(gconst122*r00);
IkReal x6458=(gconst122*r10);
IkReal x6459=(gconst122*r20);
IkReal x6460=((1.0)*x6454);
IkReal x6461=((1.0)*cj1*cj2);
IkReal x6462=((1.0)*x6453);
IkReal x6463=(gconst121*x6453);
IkReal x6464=(gconst121*x6454);
evalcond[0]=(((r21*x6463))+(((-1.0)*r22*x6460))+(((-1.0)*x6459*x6462)));
evalcond[1]=(cj0+(((-1.0)*x6458*x6462))+((x6453*x6455))+(((-1.0)*r12*x6460)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6457*x6462))+((r01*x6463))+(((-1.0)*r02*x6460)));
evalcond[3]=(((cj2*sj1))+((r21*x6464))+((cj1*sj2))+((r22*x6453))+(((-1.0)*x6459*x6460)));
evalcond[4]=((((-1.0)*x6457*x6460))+((cj0*x6456))+((r01*x6464))+((r02*x6453))+(((-1.0)*cj0*x6461)));
evalcond[5]=((((-1.0)*x6458*x6460))+((sj0*x6456))+((x6454*x6455))+(((-1.0)*sj0*x6461))+((r12*x6453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6465=((-1.0)*r11);
IkReal x6467 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6467)==0){
continue;
}
IkReal x6466=pow(x6467,-0.5);
CheckValue<IkReal> x6468 = IKatan2WithCheck(IkReal(x6465),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6468.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6468.value))));
IkReal gconst124=(x6465*x6466);
IkReal gconst125=((1.0)*r10*x6466);
CheckValue<IkReal> x6469 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6469.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6469.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6470=((-1.0)*r11);
CheckValue<IkReal> x6473 = IKatan2WithCheck(IkReal(x6470),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6473.valid){
continue;
}
IkReal x6471=((1.0)*(x6473.value));
IkReal x6472=x6466;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6471)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6471)));
IkReal gconst124=(x6470*x6472);
IkReal gconst125=((1.0)*r10*x6472);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6474=((-1.0)*r11);
CheckValue<IkReal> x6477 = IKatan2WithCheck(IkReal(x6474),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6477.valid){
continue;
}
IkReal x6475=((1.0)*(x6477.value));
IkReal x6476=x6466;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6475)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6475)));
IkReal gconst124=(x6474*x6476);
IkReal gconst125=((1.0)*r10*x6476);
IkReal x6478=r12*r12;
IkReal x6479=((1.0)*sj0);
IkReal x6480=(cj0*r02);
IkReal x6481=x6466;
j4eval[0]=((IKabs((((sj0*x6478*x6481))+((r12*x6480*x6481))+(((-1.0)*x6479*x6481)))))+(IKabs(((((-1.0)*r12*x6479))+(((-1.0)*x6480))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6482=((-1.0)*r11);
CheckValue<IkReal> x6485 = IKatan2WithCheck(IkReal(x6482),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6485.valid){
continue;
}
IkReal x6483=((1.0)*(x6485.value));
IkReal x6484=x6466;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6483)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6483)));
IkReal gconst124=(x6482*x6484);
IkReal gconst125=((1.0)*r10*x6484);
IkReal x6486=r12*r12;
IkReal x6487=((1.0)+(((-1.0)*x6486)));
IkReal x6488=(cj2*r22*sj1);
IkReal x6489=(cj1*r22*sj2);
CheckValue<IkReal> x6496=IKPowWithIntegerCheck(x6487,-1);
if(!x6496.valid){
continue;
}
IkReal x6490=x6496.value;
CheckValue<IkReal> x6497=IKPowWithIntegerCheck(((-1.0)+x6486),-1);
if(!x6497.valid){
continue;
}
IkReal x6491=x6497.value;
IkReal x6492=((1.0)*x6490);
if((x6487) < -0.00001)
continue;
IkReal x6493=IKsqrt(x6487);
IkReal x6494=((1.0)*r12*x6491*x6493);
IkReal x6495=((((-1.0)*x6492*(r10*r10)*(r20*r20)))+(((-1.0)*x6492*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x6490))+(((-1.0)*(r22*r22))));
j4eval[0]=x6495;
j4eval[1]=IKsign(x6495);
j4eval[2]=((IKabs(((((-1.0)*x6488*x6494))+(((-1.0)*x6489*x6494)))))+(IKabs((x6488+x6489))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6498=(gconst124*r21);
IkReal x6499=(cj1*sj2);
IkReal x6500=(cj2*sj1);
IkReal x6501=(gconst125*r20);
CheckValue<IkReal> x6502 = IKatan2WithCheck(IkReal((((r22*x6500))+((r22*x6499)))),IkReal((((x6498*x6500))+(((-1.0)*x6499*x6501))+(((-1.0)*x6500*x6501))+((x6498*x6499)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6502.valid){
continue;
}
CheckValue<IkReal> x6503=IKPowWithIntegerCheck(IKsign(((((2.0)*x6498*x6501))+(((-1.0)*(x6498*x6498)))+(((-1.0)*(x6501*x6501)))+(((-1.0)*(r22*r22))))),-1);
if(!x6503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6502.value)+(((1.5707963267949)*(x6503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6504=IKsin(j4);
IkReal x6505=IKcos(j4);
IkReal x6506=(sj1*sj2);
IkReal x6507=(gconst125*r20);
IkReal x6508=(gconst124*r01);
IkReal x6509=(gconst125*r00);
IkReal x6510=(gconst125*r10);
IkReal x6511=((1.0)*x6505);
IkReal x6512=((1.0)*cj1*cj2);
IkReal x6513=((1.0)*x6504);
IkReal x6514=(gconst124*x6504);
IkReal x6515=(gconst124*x6505);
evalcond[0]=((((-1.0)*r22*x6511))+(((-1.0)*x6507*x6513))+((r21*x6514)));
evalcond[1]=(cj0+((r11*x6514))+(((-1.0)*r12*x6511))+(((-1.0)*x6510*x6513)));
evalcond[2]=((((-1.0)*r02*x6511))+(((-1.0)*sj0))+((x6504*x6508))+(((-1.0)*x6509*x6513)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6504))+(((-1.0)*x6507*x6511))+((r21*x6515)));
evalcond[4]=((((-1.0)*cj0*x6512))+((r02*x6504))+((cj0*x6506))+(((-1.0)*x6509*x6511))+((x6505*x6508)));
evalcond[5]=(((r12*x6504))+((sj0*x6506))+((r11*x6515))+(((-1.0)*x6510*x6511))+(((-1.0)*sj0*x6512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6516=((1.0)*sj0);
IkReal x6517=((1.0)*cj0);
CheckValue<IkReal> x6518 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6517))+(((-1.0)*r12*x6516)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r11*x6516))+(((-1.0)*gconst124*r01*x6517))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6518.valid){
continue;
}
CheckValue<IkReal> x6519=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6518.value)+(((1.5707963267949)*(x6519.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6520=IKsin(j4);
IkReal x6521=IKcos(j4);
IkReal x6522=(sj1*sj2);
IkReal x6523=(gconst125*r20);
IkReal x6524=(gconst124*r01);
IkReal x6525=(gconst125*r00);
IkReal x6526=(gconst125*r10);
IkReal x6527=((1.0)*x6521);
IkReal x6528=((1.0)*cj1*cj2);
IkReal x6529=((1.0)*x6520);
IkReal x6530=(gconst124*x6520);
IkReal x6531=(gconst124*x6521);
evalcond[0]=(((r21*x6530))+(((-1.0)*r22*x6527))+(((-1.0)*x6523*x6529)));
evalcond[1]=(cj0+(((-1.0)*x6526*x6529))+(((-1.0)*r12*x6527))+((r11*x6530)));
evalcond[2]=((((-1.0)*sj0))+((x6520*x6524))+(((-1.0)*r02*x6527))+(((-1.0)*x6525*x6529)));
evalcond[3]=(((cj2*sj1))+((r21*x6531))+((cj1*sj2))+((r22*x6520))+(((-1.0)*x6523*x6527)));
evalcond[4]=(((x6521*x6524))+((r02*x6520))+(((-1.0)*cj0*x6528))+(((-1.0)*x6525*x6527))+((cj0*x6522)));
evalcond[5]=((((-1.0)*x6526*x6527))+((r12*x6520))+((sj0*x6522))+(((-1.0)*sj0*x6528))+((r11*x6531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6532=((1.0)*gconst125);
CheckValue<IkReal> x6533 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6532))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6533.valid){
continue;
}
CheckValue<IkReal> x6534=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6532)))),-1);
if(!x6534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6533.value)+(((1.5707963267949)*(x6534.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6535=IKsin(j4);
IkReal x6536=IKcos(j4);
IkReal x6537=(sj1*sj2);
IkReal x6538=(gconst125*r20);
IkReal x6539=(gconst124*r01);
IkReal x6540=(gconst125*r00);
IkReal x6541=(gconst125*r10);
IkReal x6542=((1.0)*x6536);
IkReal x6543=((1.0)*cj1*cj2);
IkReal x6544=((1.0)*x6535);
IkReal x6545=(gconst124*x6535);
IkReal x6546=(gconst124*x6536);
evalcond[0]=((((-1.0)*r22*x6542))+(((-1.0)*x6538*x6544))+((r21*x6545)));
evalcond[1]=(cj0+(((-1.0)*x6541*x6544))+(((-1.0)*r12*x6542))+((r11*x6545)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6540*x6544))+(((-1.0)*r02*x6542))+((x6535*x6539)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6535))+(((-1.0)*x6538*x6542))+((r21*x6546)));
evalcond[4]=(((r02*x6535))+((x6536*x6539))+(((-1.0)*x6540*x6542))+((cj0*x6537))+(((-1.0)*cj0*x6543)));
evalcond[5]=((((-1.0)*sj0*x6543))+((sj0*x6537))+(((-1.0)*x6541*x6542))+((r11*x6546))+((r12*x6535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6547=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6547;
j4eval[1]=IKsign(x6547);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6548=((1.0)*cj5);
IkReal x6549=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6548)));
j4eval[0]=x6549;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6548)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6549);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6550=cj5*cj5;
IkReal x6551=r11*r11;
IkReal x6552=(cj5*r10);
IkReal x6553=(r11*sj5);
IkReal x6554=((((2.0)*x6552*x6553))+((x6550*x6551))+(((-1.0)*x6550*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x6551)));
j4eval[0]=x6554;
j4eval[1]=IKsign(x6554);
j4eval[2]=((IKabs((x6553+(((-1.0)*x6552)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6555=cj5*cj5;
IkReal x6556=r11*r11;
IkReal x6557=(cj5*r10);
IkReal x6558=(r11*sj5);
CheckValue<IkReal> x6559=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6555*(r10*r10)))+(((2.0)*x6557*x6558))+(((-1.0)*(r12*r12)))+(((-1.0)*x6556))+((x6555*x6556)))),-1);
if(!x6559.valid){
continue;
}
CheckValue<IkReal> x6560 = IKatan2WithCheck(IkReal((x6558+(((-1.0)*x6557)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6559.value)))+(x6560.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6561=IKcos(j4);
IkReal x6562=IKsin(j4);
IkReal x6563=(cj5*r00);
IkReal x6564=(cj5*r10);
IkReal x6565=(r21*sj5);
IkReal x6566=(cj5*r20);
IkReal x6567=((1.0)*x6561);
IkReal x6568=((1.0)*x6562);
IkReal x6569=(sj5*x6562);
IkReal x6570=(sj5*x6561);
evalcond[0]=(((r12*x6562))+((r11*x6570))+(((-1.0)*x6564*x6567)));
evalcond[1]=((((-1.0)*x6566*x6568))+(((-1.0)*r22*x6567))+((x6562*x6565)));
evalcond[2]=((((-1.0)*x6563*x6568))+(((-1.0)*r02*x6567))+((r01*x6569)));
evalcond[3]=((1.0)+((r11*x6569))+(((-1.0)*r12*x6567))+(((-1.0)*x6564*x6568)));
evalcond[4]=(((cj2*sj1))+((x6561*x6565))+((r22*x6562))+(((-1.0)*x6566*x6567))+((cj1*sj2)));
evalcond[5]=(((r01*x6570))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6562))+(((-1.0)*x6563*x6567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6571=((1.0)*cj5);
CheckValue<IkReal> x6572=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6571)))),-1);
if(!x6572.valid){
continue;
}
CheckValue<IkReal> x6573 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6571)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6572.value)))+(x6573.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6574=IKcos(j4);
IkReal x6575=IKsin(j4);
IkReal x6576=(cj5*r00);
IkReal x6577=(cj5*r10);
IkReal x6578=(r21*sj5);
IkReal x6579=(cj5*r20);
IkReal x6580=((1.0)*x6574);
IkReal x6581=((1.0)*x6575);
IkReal x6582=(sj5*x6575);
IkReal x6583=(sj5*x6574);
evalcond[0]=(((r11*x6583))+((r12*x6575))+(((-1.0)*x6577*x6580)));
evalcond[1]=((((-1.0)*r22*x6580))+(((-1.0)*x6579*x6581))+((x6575*x6578)));
evalcond[2]=((((-1.0)*x6576*x6581))+(((-1.0)*r02*x6580))+((r01*x6582)));
evalcond[3]=((1.0)+((r11*x6582))+(((-1.0)*r12*x6580))+(((-1.0)*x6577*x6581)));
evalcond[4]=(((r22*x6575))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6579*x6580))+((x6574*x6578)));
evalcond[5]=((((-1.0)*x6576*x6580))+((r01*x6583))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6584=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6584.valid){
continue;
}
CheckValue<IkReal> x6585 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6584.value)))+(x6585.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6586=IKcos(j4);
IkReal x6587=IKsin(j4);
IkReal x6588=(cj5*r00);
IkReal x6589=(cj5*r10);
IkReal x6590=(r21*sj5);
IkReal x6591=(cj5*r20);
IkReal x6592=((1.0)*x6586);
IkReal x6593=((1.0)*x6587);
IkReal x6594=(sj5*x6587);
IkReal x6595=(sj5*x6586);
evalcond[0]=(((r11*x6595))+(((-1.0)*x6589*x6592))+((r12*x6587)));
evalcond[1]=((((-1.0)*x6591*x6593))+((x6587*x6590))+(((-1.0)*r22*x6592)));
evalcond[2]=((((-1.0)*r02*x6592))+((r01*x6594))+(((-1.0)*x6588*x6593)));
evalcond[3]=((1.0)+((r11*x6594))+(((-1.0)*x6589*x6593))+(((-1.0)*r12*x6592)));
evalcond[4]=(((cj2*sj1))+((r22*x6587))+((cj1*sj2))+(((-1.0)*x6591*x6592))+((x6586*x6590)));
evalcond[5]=(((r02*x6587))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6595))+(((-1.0)*x6588*x6592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6596=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6596;
j4eval[1]=IKsign(x6596);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6597=((1.0)*cj5);
IkReal x6598=((((-1.0)*r21*x6597))+(((-1.0)*r20*sj5)));
j4eval[0]=x6598;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x6597))+((r01*sj5))))));
j4eval[2]=IKsign(x6598);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6599=cj5*cj5;
IkReal x6600=r11*r11;
IkReal x6601=(r11*sj5);
IkReal x6602=(cj5*r10);
IkReal x6603=((r12*r12)+((x6599*(r10*r10)))+x6600+(((-2.0)*x6601*x6602))+(((-1.0)*x6599*x6600)));
j4eval[0]=x6603;
j4eval[1]=IKsign(x6603);
j4eval[2]=((IKabs(r12))+(IKabs((x6601+(((-1.0)*x6602))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6604=cj5*cj5;
IkReal x6605=r11*r11;
IkReal x6606=(cj5*r10);
IkReal x6607=(r11*sj5);
CheckValue<IkReal> x6608=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x6604*x6605))+(((-2.0)*x6606*x6607))+((x6604*(r10*r10)))+x6605)),-1);
if(!x6608.valid){
continue;
}
CheckValue<IkReal> x6609 = IKatan2WithCheck(IkReal((x6607+(((-1.0)*x6606)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6608.value)))+(x6609.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6610=IKcos(j4);
IkReal x6611=IKsin(j4);
IkReal x6612=(cj5*r00);
IkReal x6613=(cj5*r10);
IkReal x6614=(r21*sj5);
IkReal x6615=(cj5*r20);
IkReal x6616=((1.0)*x6610);
IkReal x6617=((1.0)*x6611);
IkReal x6618=(sj5*x6611);
IkReal x6619=(sj5*x6610);
evalcond[0]=((((-1.0)*x6613*x6616))+((r12*x6611))+((r11*x6619)));
evalcond[1]=(((x6611*x6614))+(((-1.0)*r22*x6616))+(((-1.0)*x6615*x6617)));
evalcond[2]=((((-1.0)*x6612*x6617))+((r01*x6618))+(((-1.0)*r02*x6616)));
evalcond[3]=((-1.0)+(((-1.0)*x6613*x6617))+(((-1.0)*r12*x6616))+((r11*x6618)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6611))+((x6610*x6614))+(((-1.0)*x6615*x6616)));
evalcond[5]=(((r02*x6611))+(((-1.0)*x6612*x6616))+((r01*x6619))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6620=((1.0)*cj5);
CheckValue<IkReal> x6621=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6620))+(((-1.0)*r20*sj5)))),-1);
if(!x6621.valid){
continue;
}
CheckValue<IkReal> x6622 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6620)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6621.value)))+(x6622.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6623=IKcos(j4);
IkReal x6624=IKsin(j4);
IkReal x6625=(cj5*r00);
IkReal x6626=(cj5*r10);
IkReal x6627=(r21*sj5);
IkReal x6628=(cj5*r20);
IkReal x6629=((1.0)*x6623);
IkReal x6630=((1.0)*x6624);
IkReal x6631=(sj5*x6624);
IkReal x6632=(sj5*x6623);
evalcond[0]=(((r12*x6624))+((r11*x6632))+(((-1.0)*x6626*x6629)));
evalcond[1]=((((-1.0)*x6628*x6630))+((x6624*x6627))+(((-1.0)*r22*x6629)));
evalcond[2]=(((r01*x6631))+(((-1.0)*r02*x6629))+(((-1.0)*x6625*x6630)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6629))+((r11*x6631))+(((-1.0)*x6626*x6630)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6628*x6629))+((cj1*sj2))+((r22*x6624))+((x6623*x6627)));
evalcond[5]=(((r02*x6624))+(((-1.0)*sj1*sj2))+((r01*x6632))+(((-1.0)*x6625*x6629))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6633 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6633.valid){
continue;
}
CheckValue<IkReal> x6634=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6633.value)+(((1.5707963267949)*(x6634.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6635=IKcos(j4);
IkReal x6636=IKsin(j4);
IkReal x6637=(cj5*r00);
IkReal x6638=(cj5*r10);
IkReal x6639=(r21*sj5);
IkReal x6640=(cj5*r20);
IkReal x6641=((1.0)*x6635);
IkReal x6642=((1.0)*x6636);
IkReal x6643=(sj5*x6636);
IkReal x6644=(sj5*x6635);
evalcond[0]=((((-1.0)*x6638*x6641))+((r11*x6644))+((r12*x6636)));
evalcond[1]=((((-1.0)*r22*x6641))+(((-1.0)*x6640*x6642))+((x6636*x6639)));
evalcond[2]=((((-1.0)*x6637*x6642))+((r01*x6643))+(((-1.0)*r02*x6641)));
evalcond[3]=((-1.0)+(((-1.0)*x6638*x6642))+((r11*x6643))+(((-1.0)*r12*x6641)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6640*x6641))+((cj1*sj2))+((r22*x6636))+((x6635*x6639)));
evalcond[5]=((((-1.0)*x6637*x6641))+(((-1.0)*sj1*sj2))+((r01*x6644))+((cj1*cj2))+((r02*x6636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6645=((-1.0)*r00);
IkReal x6647 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6647)==0){
continue;
}
IkReal x6646=pow(x6647,-0.5);
CheckValue<IkReal> x6648 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6645),IKFAST_ATAN2_MAGTHRESH);
if(!x6648.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6648.value));
IkReal gconst127=(r01*x6646);
IkReal gconst128=(x6645*x6646);
CheckValue<IkReal> x6649 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6649.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6649.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6650=((-1.0)*r00);
IkReal x6651=x6646;
CheckValue<IkReal> x6653 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6650),IKFAST_ATAN2_MAGTHRESH);
if(!x6653.valid){
continue;
}
IkReal x6652=((-1.0)*(x6653.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6652;
IkReal gconst126=x6652;
IkReal gconst127=(r01*x6651);
IkReal gconst128=(x6650*x6651);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6654=((1.0)*sj0);
IkReal x6655=((1.0)*gconst127);
CheckValue<IkReal> x6656 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6654))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst127*r11*x6654))+((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*cj0*r01*x6655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6656.valid){
continue;
}
CheckValue<IkReal> x6657=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6655))+(((-1.0)*gconst128*r21)))),-1);
if(!x6657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6656.value)+(((1.5707963267949)*(x6657.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6658=IKsin(j4);
IkReal x6659=IKcos(j4);
IkReal x6660=(gconst127*r01);
IkReal x6661=(sj1*sj2);
IkReal x6662=(gconst128*r10);
IkReal x6663=(gconst128*r00);
IkReal x6664=(gconst128*r20);
IkReal x6665=((1.0)*x6659);
IkReal x6666=((1.0)*cj1*cj2);
IkReal x6667=((1.0)*x6658);
IkReal x6668=(gconst127*x6659);
IkReal x6669=(gconst127*x6658);
evalcond[0]=((((-1.0)*x6664*x6667))+((r21*x6669))+(((-1.0)*r22*x6665)));
evalcond[1]=(cj0+((r11*x6669))+(((-1.0)*r12*x6665))+(((-1.0)*x6662*x6667)));
evalcond[2]=((((-1.0)*sj0))+((x6658*x6660))+(((-1.0)*r02*x6665))+(((-1.0)*x6663*x6667)));
evalcond[3]=((((-1.0)*x6664*x6665))+((cj2*sj1))+((cj1*sj2))+((r21*x6668))+((r22*x6658)));
evalcond[4]=(((x6659*x6660))+((r02*x6658))+(((-1.0)*cj0*x6666))+(((-1.0)*x6663*x6665))+((cj0*x6661)));
evalcond[5]=(((r12*x6658))+(((-1.0)*sj0*x6666))+((r11*x6668))+((sj0*x6661))+(((-1.0)*x6662*x6665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6670=((1.0)*gconst128);
CheckValue<IkReal> x6671=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6670))+(((-1.0)*gconst127*r10)))),-1);
if(!x6671.valid){
continue;
}
CheckValue<IkReal> x6672 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6670))+((gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6671.value)))+(x6672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6673=IKsin(j4);
IkReal x6674=IKcos(j4);
IkReal x6675=(gconst127*r01);
IkReal x6676=(sj1*sj2);
IkReal x6677=(gconst128*r10);
IkReal x6678=(gconst128*r00);
IkReal x6679=(gconst128*r20);
IkReal x6680=((1.0)*x6674);
IkReal x6681=((1.0)*cj1*cj2);
IkReal x6682=((1.0)*x6673);
IkReal x6683=(gconst127*x6674);
IkReal x6684=(gconst127*x6673);
evalcond[0]=((((-1.0)*x6679*x6682))+((r21*x6684))+(((-1.0)*r22*x6680)));
evalcond[1]=(cj0+((r11*x6684))+(((-1.0)*x6677*x6682))+(((-1.0)*r12*x6680)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6680))+(((-1.0)*x6678*x6682))+((x6673*x6675)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6679*x6680))+((cj1*sj2))+((r21*x6683))+((r22*x6673)));
evalcond[4]=(((cj0*x6676))+((r02*x6673))+(((-1.0)*x6678*x6680))+(((-1.0)*cj0*x6681))+((x6674*x6675)));
evalcond[5]=((((-1.0)*sj0*x6681))+((r11*x6683))+((r12*x6673))+(((-1.0)*x6677*x6680))+((sj0*x6676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6685=((-1.0)*r01);
IkReal x6687 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6687)==0){
continue;
}
IkReal x6686=pow(x6687,-0.5);
CheckValue<IkReal> x6688 = IKatan2WithCheck(IkReal(x6685),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6688.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6688.value))));
IkReal gconst130=(x6685*x6686);
IkReal gconst131=((1.0)*r00*x6686);
CheckValue<IkReal> x6689 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6689.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6689.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6690=((-1.0)*r01);
CheckValue<IkReal> x6693 = IKatan2WithCheck(IkReal(x6690),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6693.valid){
continue;
}
IkReal x6691=((1.0)*(x6693.value));
IkReal x6692=x6686;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6691)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6691)));
IkReal gconst130=(x6690*x6692);
IkReal gconst131=((1.0)*r00*x6692);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6694=((-1.0)*r01);
CheckValue<IkReal> x6697 = IKatan2WithCheck(IkReal(x6694),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6697.valid){
continue;
}
IkReal x6695=((1.0)*(x6697.value));
IkReal x6696=x6686;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6695)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6695)));
IkReal gconst130=(x6694*x6696);
IkReal gconst131=((1.0)*r00*x6696);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6698=((-1.0)*r01);
CheckValue<IkReal> x6701 = IKatan2WithCheck(IkReal(x6698),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6701.valid){
continue;
}
IkReal x6699=((1.0)*(x6701.value));
IkReal x6700=x6686;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6699)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6699)));
IkReal gconst130=(x6698*x6700);
IkReal gconst131=((1.0)*r00*x6700);
IkReal x6702=r02*r02;
IkReal x6703=(r12*sj0);
IkReal x6704=((1.0)*cj0);
IkReal x6705=x6686;
j4eval[0]=((IKabs(((((-1.0)*r02*x6704))+(((-1.0)*x6703)))))+(IKabs((((cj0*x6702*x6705))+((r02*x6703*x6705))+(((-1.0)*x6704*x6705))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6706=((1.0)*sj0);
IkReal x6707=((1.0)*gconst130);
CheckValue<IkReal> x6708=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x6707)))),-1);
if(!x6708.valid){
continue;
}
CheckValue<IkReal> x6709 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6706)))),IkReal(((((-1.0)*gconst130*r11*x6706))+(((-1.0)*cj0*r01*x6707))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6709.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6708.value)))+(x6709.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6710=IKsin(j4);
IkReal x6711=IKcos(j4);
IkReal x6712=(gconst131*r10);
IkReal x6713=(sj1*sj2);
IkReal x6714=(gconst131*r20);
IkReal x6715=(gconst131*r00);
IkReal x6716=((1.0)*x6711);
IkReal x6717=((1.0)*cj1*cj2);
IkReal x6718=(gconst130*x6710);
IkReal x6719=((1.0)*x6710);
IkReal x6720=(gconst130*x6711);
evalcond[0]=((((-1.0)*x6714*x6719))+((r21*x6718))+(((-1.0)*r22*x6716)));
evalcond[1]=(cj0+((r11*x6718))+(((-1.0)*x6712*x6719))+(((-1.0)*r12*x6716)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6716))+(((-1.0)*x6715*x6719))+((r01*x6718)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6710))+(((-1.0)*x6714*x6716))+((r21*x6720)));
evalcond[4]=(((cj0*x6713))+((r02*x6710))+(((-1.0)*cj0*x6717))+(((-1.0)*x6715*x6716))+((r01*x6720)));
evalcond[5]=((((-1.0)*sj0*x6717))+((r11*x6720))+(((-1.0)*x6712*x6716))+((sj0*x6713))+((r12*x6710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6721=((1.0)*gconst131);
CheckValue<IkReal> x6722 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6721))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6722.valid){
continue;
}
CheckValue<IkReal> x6723=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6721))+(((-1.0)*gconst130*r10)))),-1);
if(!x6723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6722.value)+(((1.5707963267949)*(x6723.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6724=IKsin(j4);
IkReal x6725=IKcos(j4);
IkReal x6726=(gconst131*r10);
IkReal x6727=(sj1*sj2);
IkReal x6728=(gconst131*r20);
IkReal x6729=(gconst131*r00);
IkReal x6730=((1.0)*x6725);
IkReal x6731=((1.0)*cj1*cj2);
IkReal x6732=(gconst130*x6724);
IkReal x6733=((1.0)*x6724);
IkReal x6734=(gconst130*x6725);
evalcond[0]=(((r21*x6732))+(((-1.0)*r22*x6730))+(((-1.0)*x6728*x6733)));
evalcond[1]=(cj0+(((-1.0)*r12*x6730))+((r11*x6732))+(((-1.0)*x6726*x6733)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6730))+((r01*x6732))+(((-1.0)*x6729*x6733)));
evalcond[3]=(((cj2*sj1))+((r21*x6734))+((cj1*sj2))+(((-1.0)*x6728*x6730))+((r22*x6724)));
evalcond[4]=(((cj0*x6727))+(((-1.0)*cj0*x6731))+((r02*x6724))+((r01*x6734))+(((-1.0)*x6729*x6730)));
evalcond[5]=(((r12*x6724))+((r11*x6734))+(((-1.0)*x6726*x6730))+(((-1.0)*sj0*x6731))+((sj0*x6727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6735=((1.0)*gconst131);
CheckValue<IkReal> x6736 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6735)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6736.valid){
continue;
}
CheckValue<IkReal> x6737=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6735))+(((-1.0)*gconst130*r00)))),-1);
if(!x6737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6736.value)+(((1.5707963267949)*(x6737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6738=IKsin(j4);
IkReal x6739=IKcos(j4);
IkReal x6740=(gconst131*r10);
IkReal x6741=(sj1*sj2);
IkReal x6742=(gconst131*r20);
IkReal x6743=(gconst131*r00);
IkReal x6744=((1.0)*x6739);
IkReal x6745=((1.0)*cj1*cj2);
IkReal x6746=(gconst130*x6738);
IkReal x6747=((1.0)*x6738);
IkReal x6748=(gconst130*x6739);
evalcond[0]=((((-1.0)*x6742*x6747))+((r21*x6746))+(((-1.0)*r22*x6744)));
evalcond[1]=((((-1.0)*r12*x6744))+cj0+((r11*x6746))+(((-1.0)*x6740*x6747)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6744))+(((-1.0)*x6743*x6747))+((r01*x6746)));
evalcond[3]=(((r22*x6738))+(((-1.0)*x6742*x6744))+((cj2*sj1))+((r21*x6748))+((cj1*sj2)));
evalcond[4]=(((cj0*x6741))+(((-1.0)*cj0*x6745))+(((-1.0)*x6743*x6744))+((r01*x6748))+((r02*x6738)));
evalcond[5]=(((r11*x6748))+((r12*x6738))+((sj0*x6741))+(((-1.0)*sj0*x6745))+(((-1.0)*x6740*x6744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6749=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6749;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6749);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6750=((1.0)*cj5);
IkReal x6751=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6750)));
j4eval[0]=x6751;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6750))+((r21*sj5))))));
j4eval[2]=IKsign(x6751);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6752=cj5*cj5;
IkReal x6753=r01*r01;
IkReal x6754=(cj5*r00);
IkReal x6755=(r01*sj5);
IkReal x6756=(x6753+(r02*r02)+(((-1.0)*x6752*x6753))+(((-2.0)*x6754*x6755))+((x6752*(r00*r00))));
j4eval[0]=x6756;
j4eval[1]=IKsign(x6756);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6754))+x6755))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6757=cj5*cj5;
IkReal x6758=r01*r01;
IkReal x6759=(r01*sj5);
IkReal x6760=(cj5*r00);
CheckValue<IkReal> x6761 = IKatan2WithCheck(IkReal((x6759+(((-1.0)*x6760)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6761.valid){
continue;
}
CheckValue<IkReal> x6762=IKPowWithIntegerCheck(IKsign((((x6757*(r00*r00)))+x6758+(((-2.0)*x6759*x6760))+(r02*r02)+(((-1.0)*x6757*x6758)))),-1);
if(!x6762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6761.value)+(((1.5707963267949)*(x6762.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6763=IKcos(j4);
IkReal x6764=IKsin(j4);
IkReal x6765=(cj5*r00);
IkReal x6766=(cj5*r10);
IkReal x6767=(r21*sj5);
IkReal x6768=(cj5*r20);
IkReal x6769=((1.0)*x6763);
IkReal x6770=((1.0)*x6764);
IkReal x6771=(sj5*x6764);
IkReal x6772=(sj5*x6763);
evalcond[0]=((((-1.0)*x6765*x6769))+((r02*x6764))+((r01*x6772)));
evalcond[1]=((((-1.0)*x6768*x6770))+(((-1.0)*r22*x6769))+((x6764*x6767)));
evalcond[2]=(((r11*x6771))+(((-1.0)*r12*x6769))+(((-1.0)*x6766*x6770)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6769))+(((-1.0)*x6765*x6770))+((r01*x6771)));
evalcond[4]=((((-1.0)*x6768*x6769))+((cj2*sj1))+((r22*x6764))+((cj1*sj2))+((x6763*x6767)));
evalcond[5]=(((r11*x6772))+((r12*x6764))+(((-1.0)*x6766*x6769))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6773=((1.0)*cj5);
CheckValue<IkReal> x6774=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6773)))),-1);
if(!x6774.valid){
continue;
}
CheckValue<IkReal> x6775 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6774.value)))+(x6775.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6776=IKcos(j4);
IkReal x6777=IKsin(j4);
IkReal x6778=(cj5*r00);
IkReal x6779=(cj5*r10);
IkReal x6780=(r21*sj5);
IkReal x6781=(cj5*r20);
IkReal x6782=((1.0)*x6776);
IkReal x6783=((1.0)*x6777);
IkReal x6784=(sj5*x6777);
IkReal x6785=(sj5*x6776);
evalcond[0]=(((r02*x6777))+(((-1.0)*x6778*x6782))+((r01*x6785)));
evalcond[1]=(((x6777*x6780))+(((-1.0)*x6781*x6783))+(((-1.0)*r22*x6782)));
evalcond[2]=(((r11*x6784))+(((-1.0)*r12*x6782))+(((-1.0)*x6779*x6783)));
evalcond[3]=((-1.0)+(((-1.0)*x6778*x6783))+(((-1.0)*r02*x6782))+((r01*x6784)));
evalcond[4]=(((cj2*sj1))+((x6776*x6780))+((cj1*sj2))+((r22*x6777))+(((-1.0)*x6781*x6782)));
evalcond[5]=(((r12*x6777))+((r11*x6785))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6779*x6782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6786=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6786.valid){
continue;
}
CheckValue<IkReal> x6787 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6786.value)))+(x6787.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6788=IKcos(j4);
IkReal x6789=IKsin(j4);
IkReal x6790=(cj5*r00);
IkReal x6791=(cj5*r10);
IkReal x6792=(r21*sj5);
IkReal x6793=(cj5*r20);
IkReal x6794=((1.0)*x6788);
IkReal x6795=((1.0)*x6789);
IkReal x6796=(sj5*x6789);
IkReal x6797=(sj5*x6788);
evalcond[0]=(((r01*x6797))+((r02*x6789))+(((-1.0)*x6790*x6794)));
evalcond[1]=((((-1.0)*x6793*x6795))+(((-1.0)*r22*x6794))+((x6789*x6792)));
evalcond[2]=(((r11*x6796))+(((-1.0)*x6791*x6795))+(((-1.0)*r12*x6794)));
evalcond[3]=((-1.0)+((r01*x6796))+(((-1.0)*x6790*x6795))+(((-1.0)*r02*x6794)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6793*x6794))+((cj1*sj2))+((r22*x6789))+((x6788*x6792)));
evalcond[5]=(((r12*x6789))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6797))+(((-1.0)*x6791*x6794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6798=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6798;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6798);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6799=((1.0)*cj5);
IkReal x6800=((((-1.0)*r21*x6799))+(((-1.0)*r20*sj5)));
j4eval[0]=x6800;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x6799))+((r11*sj5))))));
j4eval[2]=IKsign(x6800);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6801=(r01*sj5);
IkReal x6802=(cj1*sj2);
IkReal x6803=(cj2*sj1);
IkReal x6804=((1.0)*r02);
IkReal x6805=((1.0)*cj5*r00);
IkReal x6806=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6806;
j4eval[1]=((IKabs((((x6801*x6802))+((x6801*x6803))+(((-1.0)*x6803*x6805))+(((-1.0)*x6802*x6805)))))+(IKabs(((((-1.0)*x6803*x6804))+(((-1.0)*x6802*x6804))))));
j4eval[2]=IKsign(x6806);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6807=(r01*sj5);
IkReal x6808=(cj1*sj2);
IkReal x6809=(cj2*sj1);
IkReal x6810=((1.0)*r02);
IkReal x6811=((1.0)*cj5*r00);
CheckValue<IkReal> x6812 = IKatan2WithCheck(IkReal(((((-1.0)*x6808*x6811))+(((-1.0)*x6809*x6811))+((x6807*x6809))+((x6807*x6808)))),IkReal(((((-1.0)*x6808*x6810))+(((-1.0)*x6809*x6810)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6812.valid){
continue;
}
CheckValue<IkReal> x6813=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6812.value)+(((1.5707963267949)*(x6813.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6814=IKcos(j4);
IkReal x6815=IKsin(j4);
IkReal x6816=(cj5*r00);
IkReal x6817=(cj5*r10);
IkReal x6818=(r21*sj5);
IkReal x6819=(cj5*r20);
IkReal x6820=((1.0)*x6814);
IkReal x6821=((1.0)*x6815);
IkReal x6822=(sj5*x6815);
IkReal x6823=(sj5*x6814);
evalcond[0]=(((r01*x6823))+((r02*x6815))+(((-1.0)*x6816*x6820)));
evalcond[1]=(((x6815*x6818))+(((-1.0)*r22*x6820))+(((-1.0)*x6819*x6821)));
evalcond[2]=((((-1.0)*x6817*x6821))+(((-1.0)*r12*x6820))+((r11*x6822)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6820))+((r01*x6822))+(((-1.0)*x6816*x6821)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6814*x6818))+((r22*x6815))+(((-1.0)*x6819*x6820)));
evalcond[5]=((((-1.0)*x6817*x6820))+((r12*x6815))+(((-1.0)*sj1*sj2))+((r11*x6823))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6824=((1.0)*cj5);
CheckValue<IkReal> x6825=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6824))+(((-1.0)*r20*sj5)))),-1);
if(!x6825.valid){
continue;
}
CheckValue<IkReal> x6826 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6824))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6825.value)))+(x6826.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6827=IKcos(j4);
IkReal x6828=IKsin(j4);
IkReal x6829=(cj5*r00);
IkReal x6830=(cj5*r10);
IkReal x6831=(r21*sj5);
IkReal x6832=(cj5*r20);
IkReal x6833=((1.0)*x6827);
IkReal x6834=((1.0)*x6828);
IkReal x6835=(sj5*x6828);
IkReal x6836=(sj5*x6827);
evalcond[0]=(((r02*x6828))+((r01*x6836))+(((-1.0)*x6829*x6833)));
evalcond[1]=(((x6828*x6831))+(((-1.0)*x6832*x6834))+(((-1.0)*r22*x6833)));
evalcond[2]=((((-1.0)*r12*x6833))+((r11*x6835))+(((-1.0)*x6830*x6834)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6833))+((r01*x6835))+(((-1.0)*x6829*x6834)));
evalcond[4]=(((cj2*sj1))+((r22*x6828))+((cj1*sj2))+(((-1.0)*x6832*x6833))+((x6827*x6831)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x6836))+((r12*x6828))+((cj1*cj2))+(((-1.0)*x6830*x6833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6837 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6837.valid){
continue;
}
CheckValue<IkReal> x6838=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6837.value)+(((1.5707963267949)*(x6838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6839=IKcos(j4);
IkReal x6840=IKsin(j4);
IkReal x6841=(cj5*r00);
IkReal x6842=(cj5*r10);
IkReal x6843=(r21*sj5);
IkReal x6844=(cj5*r20);
IkReal x6845=((1.0)*x6839);
IkReal x6846=((1.0)*x6840);
IkReal x6847=(sj5*x6840);
IkReal x6848=(sj5*x6839);
evalcond[0]=((((-1.0)*x6841*x6845))+((r01*x6848))+((r02*x6840)));
evalcond[1]=((((-1.0)*r22*x6845))+(((-1.0)*x6844*x6846))+((x6840*x6843)));
evalcond[2]=(((r11*x6847))+(((-1.0)*r12*x6845))+(((-1.0)*x6842*x6846)));
evalcond[3]=((1.0)+(((-1.0)*x6841*x6846))+(((-1.0)*r02*x6845))+((r01*x6847)));
evalcond[4]=(((cj2*sj1))+((r22*x6840))+((cj1*sj2))+((x6839*x6843))+(((-1.0)*x6844*x6845)));
evalcond[5]=(((r11*x6848))+((r12*x6840))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x6842*x6845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6849=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6849);
rxp1_1=(px*r21);
rxp1_2=(r11*x6849);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6850=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6850);
rxp1_1=(px*r21);
rxp1_2=(r11*x6850);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6851=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6851);
rxp1_1=(px*r21);
rxp1_2=(r11*x6851);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6854=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6854.valid){
continue;
}
IkReal x6852=x6854.value;
IkReal x6853=(sj0*x6852);
cj4array[0]=(((cj1*cj2*x6853))+(((-1.0)*sj1*sj2*x6853)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6855=IKsin(j4);
IkReal x6856=IKcos(j4);
IkReal x6857=(r21*sj5);
IkReal x6858=((1.0)*cj5*r20);
evalcond[0]=(r02*x6855);
evalcond[1]=((((-1.0)*r02*x6856))+(((-1.0)*sj0)));
evalcond[2]=(((x6855*x6857))+(((-1.0)*x6855*x6858)));
evalcond[3]=(((r11*sj5*x6855))+(((-1.0)*cj5*r10*x6855)));
evalcond[4]=(((cj2*sj1))+((x6856*x6857))+(((-1.0)*x6856*x6858))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6861=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6861.valid){
continue;
}
IkReal x6859=x6861.value;
IkReal x6860=((1.0)*x6859);
cj4array[0]=((((-1.0)*cj1*sj2*x6860))+(((-1.0)*cj2*sj1*x6860)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6862=IKsin(j4);
IkReal x6863=IKcos(j4);
IkReal x6864=((1.0)*sj0);
IkReal x6865=((1.0)*cj5);
IkReal x6866=(sj5*x6862);
evalcond[0]=(r02*x6862);
evalcond[1]=((((-1.0)*x6864))+(((-1.0)*r02*x6863)));
evalcond[2]=(((r21*x6866))+(((-1.0)*r20*x6862*x6865)));
evalcond[3]=(((r11*x6866))+(((-1.0)*r10*x6862*x6865)));
evalcond[4]=(((r11*sj5*x6863))+(((-1.0)*r10*x6863*x6865))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x6864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6867=IKPowWithIntegerCheck(r02,-1);
if(!x6867.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6867.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6868=IKsin(j4);
IkReal x6869=IKcos(j4);
IkReal x6870=(r21*sj5);
IkReal x6871=((1.0)*cj5);
IkReal x6872=(r11*sj5);
evalcond[0]=(r02*x6868);
evalcond[1]=((((-1.0)*r20*x6868*x6871))+((x6868*x6870)));
evalcond[2]=(((x6868*x6872))+(((-1.0)*r10*x6868*x6871)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6869*x6870))+(((-1.0)*r20*x6869*x6871)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x6869*x6872))+(((-1.0)*r10*x6869*x6871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6873=((1.0)*sj0);
IkReal x6874=((1.0)*cj0);
CheckValue<IkReal> x6875 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6873))+(((-1.0)*r02*x6874)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6874))+(((-1.0)*r11*sj5*x6873)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6875.valid){
continue;
}
CheckValue<IkReal> x6876=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6875.value)+(((1.5707963267949)*(x6876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6877=IKsin(j4);
IkReal x6878=IKcos(j4);
IkReal x6879=(cj5*r00);
IkReal x6880=(cj5*r10);
IkReal x6881=(r21*sj5);
IkReal x6882=(sj1*sj2);
IkReal x6883=(cj5*r20);
IkReal x6884=((1.0)*x6878);
IkReal x6885=((1.0)*cj1*cj2);
IkReal x6886=((1.0)*x6877);
IkReal x6887=(sj5*x6877);
IkReal x6888=(sj5*x6878);
evalcond[0]=(((x6877*x6881))+(((-1.0)*x6883*x6886))+(((-1.0)*r22*x6884)));
evalcond[1]=(((r11*x6887))+cj0+(((-1.0)*x6880*x6886))+(((-1.0)*r12*x6884)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6884))+(((-1.0)*x6879*x6886))+((r01*x6887)));
evalcond[3]=(((cj2*sj1))+((r22*x6877))+((cj1*sj2))+((x6878*x6881))+(((-1.0)*x6883*x6884)));
evalcond[4]=(((r02*x6877))+((cj0*x6882))+(((-1.0)*x6879*x6884))+((r01*x6888))+(((-1.0)*cj0*x6885)));
evalcond[5]=(((r11*x6888))+((r12*x6877))+((sj0*x6882))+(((-1.0)*sj0*x6885))+(((-1.0)*x6880*x6884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6889=((1.0)*cj5);
CheckValue<IkReal> x6890=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6889)))),-1);
if(!x6890.valid){
continue;
}
CheckValue<IkReal> x6891 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6889)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6890.value)))+(x6891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6892=IKsin(j4);
IkReal x6893=IKcos(j4);
IkReal x6894=(cj5*r00);
IkReal x6895=(cj5*r10);
IkReal x6896=(r21*sj5);
IkReal x6897=(sj1*sj2);
IkReal x6898=(cj5*r20);
IkReal x6899=((1.0)*x6893);
IkReal x6900=((1.0)*cj1*cj2);
IkReal x6901=((1.0)*x6892);
IkReal x6902=(sj5*x6892);
IkReal x6903=(sj5*x6893);
evalcond[0]=(((x6892*x6896))+(((-1.0)*x6898*x6901))+(((-1.0)*r22*x6899)));
evalcond[1]=(cj0+((r11*x6902))+(((-1.0)*r12*x6899))+(((-1.0)*x6895*x6901)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6902))+(((-1.0)*r02*x6899))+(((-1.0)*x6894*x6901)));
evalcond[3]=(((cj2*sj1))+((x6893*x6896))+((cj1*sj2))+((r22*x6892))+(((-1.0)*x6898*x6899)));
evalcond[4]=(((r01*x6903))+(((-1.0)*x6894*x6899))+((r02*x6892))+((cj0*x6897))+(((-1.0)*cj0*x6900)));
evalcond[5]=(((r12*x6892))+(((-1.0)*x6895*x6899))+((r11*x6903))+((sj0*x6897))+(((-1.0)*sj0*x6900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6904=((1.0)*cj5);
CheckValue<IkReal> x6905=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6904)))),-1);
if(!x6905.valid){
continue;
}
CheckValue<IkReal> x6906 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6904)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6905.value)))+(x6906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6907=IKsin(j4);
IkReal x6908=IKcos(j4);
IkReal x6909=(cj5*r00);
IkReal x6910=(cj5*r10);
IkReal x6911=(r21*sj5);
IkReal x6912=(sj1*sj2);
IkReal x6913=(cj5*r20);
IkReal x6914=((1.0)*x6908);
IkReal x6915=((1.0)*cj1*cj2);
IkReal x6916=((1.0)*x6907);
IkReal x6917=(sj5*x6907);
IkReal x6918=(sj5*x6908);
evalcond[0]=(((x6907*x6911))+(((-1.0)*r22*x6914))+(((-1.0)*x6913*x6916)));
evalcond[1]=(cj0+(((-1.0)*x6910*x6916))+(((-1.0)*r12*x6914))+((r11*x6917)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6909*x6916))+(((-1.0)*r02*x6914))+((r01*x6917)));
evalcond[3]=(((cj2*sj1))+((r22*x6907))+((cj1*sj2))+((x6908*x6911))+(((-1.0)*x6913*x6914)));
evalcond[4]=((((-1.0)*cj0*x6915))+(((-1.0)*x6909*x6914))+((r02*x6907))+((cj0*x6912))+((r01*x6918)));
evalcond[5]=((((-1.0)*x6910*x6914))+(((-1.0)*sj0*x6915))+((sj0*x6912))+((r12*x6907))+((r11*x6918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6919=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6919;
j0eval[1]=IKsign(x6919);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6920=cj5*cj5;
IkReal x6921=r21*r21;
IkReal x6922=(cj2*sj1);
IkReal x6923=(cj1*sj2);
IkReal x6924=(r21*sj5);
IkReal x6925=((1.0)*cj5*r20);
IkReal x6926=(((x6920*(r20*r20)))+(r22*r22)+(((-2.0)*cj5*r20*x6924))+(((-1.0)*x6920*x6921))+x6921);
j4eval[0]=x6926;
j4eval[1]=IKsign(x6926);
j4eval[2]=((IKabs((((r22*x6923))+((r22*x6922)))))+(IKabs((((x6922*x6924))+((x6923*x6924))+(((-1.0)*x6922*x6925))+(((-1.0)*x6923*x6925))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6927=cj1*cj1;
IkReal x6928=(cj2*sj2);
IkReal x6929=(cj2*sj1);
IkReal x6930=(cj1*sj1);
j0eval[0]=((((-1.08418367346939)*cj1*x6929))+(((-2.0)*x6927*x6928))+(((-1.08418367346939)*sj2*x6927))+x6930+x6928+(((-2.0)*cj1*cj2*x6929)));
j0eval[1]=((((-1.0)*x6929))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.19192641276835)*py))+(((-0.195493438569105)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19192641276835)*px))+(((0.195493438569105)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.19192641276835)*py))+(((-0.195493438569105)*px))))+IKsqr(((((1.19192641276835)*px))+(((0.195493438569105)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.19192641276835)*py))+(((-0.195493438569105)*px))), ((((1.19192641276835)*px))+(((0.195493438569105)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6931=IKcos(j0);
IkReal x6932=IKsin(j0);
evalcond[0]=((((-0.134)*x6932))+(((-1.0)*px))+(((0.817)*x6931)));
evalcond[1]=((((-1.0)*py))+(((0.817)*x6932))+(((0.134)*x6931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6933=((1.0)*cj5);
IkReal x6934=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6933)));
j4eval[0]=x6934;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6933)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6934);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6935=((1.0)*cj5);
IkReal x6936=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6935)));
j4eval[0]=x6936;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6935))))));
j4eval[2]=IKsign(x6936);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6937=cj5*cj5;
IkReal x6938=((1.0)*sj5);
IkReal x6939=(cj5*r20);
IkReal x6940=(r11*r21);
IkReal x6941=((((-1.0)*cj5*r10*r21*x6938))+(((-1.0)*r11*x6938*x6939))+((r12*r22))+(((-1.0)*x6937*x6940))+x6940+((r10*r20*x6937)));
j4eval[0]=x6941;
j4eval[1]=IKsign(x6941);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x6938))+((cj0*x6939))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6942=cj5*cj5;
IkReal x6943=((1.0)*sj5);
IkReal x6944=(cj5*r20);
IkReal x6945=(r11*r21);
CheckValue<IkReal> x6946 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6943))+((cj0*x6944)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6946.valid){
continue;
}
CheckValue<IkReal> x6947=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6942*x6945))+(((-1.0)*r11*x6943*x6944))+(((-1.0)*cj5*r10*r21*x6943))+((r12*r22))+x6945+((r10*r20*x6942)))),-1);
if(!x6947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6946.value)+(((1.5707963267949)*(x6947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6948=IKsin(j4);
IkReal x6949=IKcos(j4);
IkReal x6950=((1.0)*sj0);
IkReal x6951=(cj5*r00);
IkReal x6952=(r11*sj5);
IkReal x6953=(cj5*r10);
IkReal x6954=(r21*sj5);
IkReal x6955=(cj5*r20);
IkReal x6956=(r01*sj5);
IkReal x6957=((1.0)*x6949);
IkReal x6958=((1.0)*x6948);
evalcond[0]=((((-1.0)*x6955*x6958))+(((-1.0)*r22*x6957))+((x6948*x6954)));
evalcond[1]=(((x6949*x6955))+(((-1.0)*r22*x6958))+(((-1.0)*x6954*x6957)));
evalcond[2]=(cj0+(((-1.0)*r12*x6957))+((x6948*x6952))+(((-1.0)*x6953*x6958)));
evalcond[3]=((((-1.0)*x6951*x6958))+(((-1.0)*x6950))+(((-1.0)*r02*x6957))+((x6948*x6956)));
evalcond[4]=((((-1.0)*x6956*x6957))+((x6949*x6951))+(((-1.0)*r02*x6958))+(((-1.0)*cj0)));
evalcond[5]=(((x6949*x6953))+(((-1.0)*r12*x6958))+(((-1.0)*x6950))+(((-1.0)*x6952*x6957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6959=((1.0)*cj5);
CheckValue<IkReal> x6960 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6959)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6960.valid){
continue;
}
CheckValue<IkReal> x6961=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6959))+(((-1.0)*r10*sj5)))),-1);
if(!x6961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6960.value)+(((1.5707963267949)*(x6961.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6962=IKsin(j4);
IkReal x6963=IKcos(j4);
IkReal x6964=((1.0)*sj0);
IkReal x6965=(cj5*r00);
IkReal x6966=(r11*sj5);
IkReal x6967=(cj5*r10);
IkReal x6968=(r21*sj5);
IkReal x6969=(cj5*r20);
IkReal x6970=(r01*sj5);
IkReal x6971=((1.0)*x6963);
IkReal x6972=((1.0)*x6962);
evalcond[0]=(((x6962*x6968))+(((-1.0)*x6969*x6972))+(((-1.0)*r22*x6971)));
evalcond[1]=(((x6963*x6969))+(((-1.0)*x6968*x6971))+(((-1.0)*r22*x6972)));
evalcond[2]=(((x6962*x6966))+cj0+(((-1.0)*r12*x6971))+(((-1.0)*x6967*x6972)));
evalcond[3]=((((-1.0)*x6965*x6972))+((x6962*x6970))+(((-1.0)*r02*x6971))+(((-1.0)*x6964)));
evalcond[4]=((((-1.0)*x6970*x6971))+(((-1.0)*r02*x6972))+((x6963*x6965))+(((-1.0)*cj0)));
evalcond[5]=(((x6963*x6967))+(((-1.0)*r12*x6972))+(((-1.0)*x6966*x6971))+(((-1.0)*x6964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6973=((1.0)*cj5);
CheckValue<IkReal> x6974=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6973)))),-1);
if(!x6974.valid){
continue;
}
CheckValue<IkReal> x6975 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6973))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6974.value)))+(x6975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6976=IKsin(j4);
IkReal x6977=IKcos(j4);
IkReal x6978=((1.0)*sj0);
IkReal x6979=(cj5*r00);
IkReal x6980=(r11*sj5);
IkReal x6981=(cj5*r10);
IkReal x6982=(r21*sj5);
IkReal x6983=(cj5*r20);
IkReal x6984=(r01*sj5);
IkReal x6985=((1.0)*x6977);
IkReal x6986=((1.0)*x6976);
evalcond[0]=((((-1.0)*r22*x6985))+((x6976*x6982))+(((-1.0)*x6983*x6986)));
evalcond[1]=((((-1.0)*r22*x6986))+((x6977*x6983))+(((-1.0)*x6982*x6985)));
evalcond[2]=(cj0+(((-1.0)*r12*x6985))+((x6976*x6980))+(((-1.0)*x6981*x6986)));
evalcond[3]=((((-1.0)*x6978))+(((-1.0)*x6979*x6986))+((x6976*x6984))+(((-1.0)*r02*x6985)));
evalcond[4]=((((-1.0)*x6984*x6985))+((x6977*x6979))+(((-1.0)*cj0))+(((-1.0)*r02*x6986)));
evalcond[5]=((((-1.0)*r12*x6986))+(((-1.0)*x6978))+((x6977*x6981))+(((-1.0)*x6980*x6985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.73273825150958)*px))+(((7.03596744552376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((1.73273825150958)*px))+(((7.03596744552376)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((1.73273825150958)*px))+(((7.03596744552376)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6987=IKcos(j0);
IkReal x6988=IKsin(j0);
evalcond[0]=((((0.033)*x6987))+(((-1.0)*px))+(((-0.134)*x6988)));
evalcond[1]=((((0.033)*x6988))+(((-1.0)*py))+(((0.134)*x6987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6989=((1.0)*cj5);
IkReal x6990=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6989)));
j4eval[0]=x6990;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x6989))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6990);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6991=cj5*cj5;
IkReal x6992=((1.0)*r21);
IkReal x6993=(cj5*sj5);
IkReal x6994=((1.0)*r20);
IkReal x6995=(((r01*r21))+(((-1.0)*r01*x6991*x6992))+(((-1.0)*r01*x6993*x6994))+((r00*r20*x6991))+(((-1.0)*r00*x6992*x6993))+((r02*r22)));
j4eval[0]=x6995;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6994)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6995);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6996=cj5*cj5;
IkReal x6997=(r21*sj5);
IkReal x6998=(r11*r21);
IkReal x6999=((1.0)*cj5*r20);
IkReal x7000=(((r12*r22))+x6998+((r10*r20*x6996))+(((-1.0)*cj5*r10*x6997))+(((-1.0)*x6996*x6998))+(((-1.0)*r11*sj5*x6999)));
j4eval[0]=x7000;
j4eval[1]=((IKabs((((sj0*x6997))+(((-1.0)*sj0*x6999)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7000);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7001=cj5*cj5;
IkReal x7002=(r21*sj5);
IkReal x7003=(r11*r21);
IkReal x7004=((1.0)*cj5*r20);
CheckValue<IkReal> x7005=IKPowWithIntegerCheck(IKsign((x7003+((r10*r20*x7001))+((r12*r22))+(((-1.0)*x7001*x7003))+(((-1.0)*r11*sj5*x7004))+(((-1.0)*cj5*r10*x7002)))),-1);
if(!x7005.valid){
continue;
}
CheckValue<IkReal> x7006 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7004))+((sj0*x7002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7005.value)))+(x7006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7007=IKsin(j4);
IkReal x7008=IKcos(j4);
IkReal x7009=(r11*sj5);
IkReal x7010=(cj5*r00);
IkReal x7011=(cj5*r10);
IkReal x7012=(r21*sj5);
IkReal x7013=(cj5*r20);
IkReal x7014=(r01*sj5);
IkReal x7015=((1.0)*x7008);
IkReal x7016=((1.0)*x7007);
evalcond[0]=((((-1.0)*r22*x7015))+((x7007*x7012))+(((-1.0)*x7013*x7016)));
evalcond[1]=((((-1.0)*r22*x7016))+(((-1.0)*x7012*x7015))+((x7008*x7013)));
evalcond[2]=((((-1.0)*x7011*x7016))+cj0+((x7007*x7009))+(((-1.0)*r12*x7015)));
evalcond[3]=(cj0+((x7008*x7010))+(((-1.0)*r02*x7016))+(((-1.0)*x7014*x7015)));
evalcond[4]=((((-1.0)*x7009*x7015))+sj0+((x7008*x7011))+(((-1.0)*r12*x7016)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7010*x7016))+((x7007*x7014))+(((-1.0)*r02*x7015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7017=cj5*cj5;
IkReal x7018=((1.0)*r21);
IkReal x7019=(cj5*sj5);
IkReal x7020=((1.0)*r20);
CheckValue<IkReal> x7021 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x7020))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7021.valid){
continue;
}
CheckValue<IkReal> x7022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7019*x7020))+(((-1.0)*r01*x7017*x7018))+(((-1.0)*r00*x7018*x7019))+((r01*r21))+((r00*r20*x7017))+((r02*r22)))),-1);
if(!x7022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7021.value)+(((1.5707963267949)*(x7022.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7023=IKsin(j4);
IkReal x7024=IKcos(j4);
IkReal x7025=(r11*sj5);
IkReal x7026=(cj5*r00);
IkReal x7027=(cj5*r10);
IkReal x7028=(r21*sj5);
IkReal x7029=(cj5*r20);
IkReal x7030=(r01*sj5);
IkReal x7031=((1.0)*x7024);
IkReal x7032=((1.0)*x7023);
evalcond[0]=((((-1.0)*r22*x7031))+((x7023*x7028))+(((-1.0)*x7029*x7032)));
evalcond[1]=((((-1.0)*r22*x7032))+((x7024*x7029))+(((-1.0)*x7028*x7031)));
evalcond[2]=(cj0+(((-1.0)*r12*x7031))+((x7023*x7025))+(((-1.0)*x7027*x7032)));
evalcond[3]=((((-1.0)*r02*x7032))+cj0+((x7024*x7026))+(((-1.0)*x7030*x7031)));
evalcond[4]=(sj0+((x7024*x7027))+(((-1.0)*r12*x7032))+(((-1.0)*x7025*x7031)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7031))+((x7023*x7030))+(((-1.0)*x7026*x7032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7033=((1.0)*cj5);
CheckValue<IkReal> x7034=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7033))+(((-1.0)*r00*sj5)))),-1);
if(!x7034.valid){
continue;
}
CheckValue<IkReal> x7035 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7033)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7034.value)))+(x7035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7036=IKsin(j4);
IkReal x7037=IKcos(j4);
IkReal x7038=(r11*sj5);
IkReal x7039=(cj5*r00);
IkReal x7040=(cj5*r10);
IkReal x7041=(r21*sj5);
IkReal x7042=(cj5*r20);
IkReal x7043=(r01*sj5);
IkReal x7044=((1.0)*x7037);
IkReal x7045=((1.0)*x7036);
evalcond[0]=((((-1.0)*r22*x7044))+(((-1.0)*x7042*x7045))+((x7036*x7041)));
evalcond[1]=((((-1.0)*r22*x7045))+((x7037*x7042))+(((-1.0)*x7041*x7044)));
evalcond[2]=(cj0+(((-1.0)*r12*x7044))+(((-1.0)*x7040*x7045))+((x7036*x7038)));
evalcond[3]=(cj0+(((-1.0)*r02*x7045))+(((-1.0)*x7043*x7044))+((x7037*x7039)));
evalcond[4]=(sj0+(((-1.0)*r12*x7045))+((x7037*x7040))+(((-1.0)*x7038*x7044)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7044))+((x7036*x7043))+(((-1.0)*x7039*x7045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7046=((1.0)*sj5);
IkReal x7047=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7047))+(((-1.0)*r10*x7046)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7046))+(((-1.0)*r01*x7047)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7047))+(((-1.0)*r10*x7046))))+IKsqr(((((-1.0)*r00*x7046))+(((-1.0)*r01*x7047))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7047))+(((-1.0)*r10*x7046))), ((((-1.0)*r00*x7046))+(((-1.0)*r01*x7047))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7048=IKsin(j0);
IkReal x7049=IKcos(j0);
IkReal x7050=((0.1)*sj5);
IkReal x7051=(cj5*r11);
IkReal x7052=(cj5*r01);
IkReal x7053=((1.0)*sj5);
evalcond[0]=((((-1.0)*r00*x7053))+(((-1.0)*x7049))+(((-1.0)*x7052)));
evalcond[1]=((((-1.0)*x7048))+(((-1.0)*x7051))+(((-1.0)*r10*x7053)));
evalcond[2]=((((-1.0)*r00*x7050))+(((-0.1)*x7052))+(((-1.0)*px))+(((-0.134)*x7048)));
evalcond[3]=((((-0.1)*x7051))+(((-1.0)*py))+(((-1.0)*r10*x7050))+(((0.134)*x7049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7054=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7054;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7054);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7055=((1.0)*cj5);
IkReal x7056=((((-1.0)*r01*x7055))+(((-1.0)*r00*sj5)));
j4eval[0]=x7056;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7055))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7056);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7057=cj5*cj5;
IkReal x7058=r21*r21;
IkReal x7059=(r21*sj5);
IkReal x7060=(cj5*r20);
IkReal x7061=((((-1.0)*x7057*x7058))+x7058+(r22*r22)+(((-2.0)*x7059*x7060))+((x7057*(r20*r20))));
j4eval[0]=x7061;
j4eval[1]=IKsign(x7061);
j4eval[2]=((IKabs(r22))+(IKabs((x7059+(((-1.0)*x7060))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7062=cj5*cj5;
IkReal x7063=r21*r21;
IkReal x7064=(r21*sj5);
IkReal x7065=(cj5*r20);
CheckValue<IkReal> x7066 = IKatan2WithCheck(IkReal(r22),IkReal((x7064+(((-1.0)*x7065)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7066.valid){
continue;
}
CheckValue<IkReal> x7067=IKPowWithIntegerCheck(IKsign((x7063+(((-1.0)*x7062*x7063))+(r22*r22)+((x7062*(r20*r20)))+(((-2.0)*x7064*x7065)))),-1);
if(!x7067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7066.value)+(((1.5707963267949)*(x7067.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7068=IKsin(j4);
IkReal x7069=IKcos(j4);
IkReal x7070=(r11*sj5);
IkReal x7071=(r21*sj5);
IkReal x7072=(cj5*r00);
IkReal x7073=(cj5*r20);
IkReal x7074=(r01*sj5);
IkReal x7075=(cj5*r10);
IkReal x7076=((1.0)*x7069);
IkReal x7077=((1.0)*x7068);
evalcond[0]=(((x7068*x7071))+(((-1.0)*x7073*x7077))+(((-1.0)*r22*x7076)));
evalcond[1]=((((-1.0)*r02*x7077))+((x7069*x7072))+(((-1.0)*x7074*x7076)));
evalcond[2]=((((-1.0)*x7070*x7076))+(((-1.0)*r12*x7077))+((x7069*x7075)));
evalcond[3]=(cj0+((x7068*x7070))+(((-1.0)*r12*x7076))+(((-1.0)*x7075*x7077)));
evalcond[4]=((1.0)+(((-1.0)*x7071*x7076))+((x7069*x7073))+(((-1.0)*r22*x7077)));
evalcond[5]=((((-1.0)*sj0))+((x7068*x7074))+(((-1.0)*x7072*x7077))+(((-1.0)*r02*x7076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7078=((1.0)*cj5);
CheckValue<IkReal> x7079=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7078))+(((-1.0)*r00*sj5)))),-1);
if(!x7079.valid){
continue;
}
CheckValue<IkReal> x7080 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7078)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7079.value)))+(x7080.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7081=IKsin(j4);
IkReal x7082=IKcos(j4);
IkReal x7083=(r11*sj5);
IkReal x7084=(r21*sj5);
IkReal x7085=(cj5*r00);
IkReal x7086=(cj5*r20);
IkReal x7087=(r01*sj5);
IkReal x7088=(cj5*r10);
IkReal x7089=((1.0)*x7082);
IkReal x7090=((1.0)*x7081);
evalcond[0]=(((x7081*x7084))+(((-1.0)*x7086*x7090))+(((-1.0)*r22*x7089)));
evalcond[1]=((((-1.0)*x7087*x7089))+((x7082*x7085))+(((-1.0)*r02*x7090)));
evalcond[2]=((((-1.0)*r12*x7090))+(((-1.0)*x7083*x7089))+((x7082*x7088)));
evalcond[3]=(cj0+(((-1.0)*x7088*x7090))+((x7081*x7083))+(((-1.0)*r12*x7089)));
evalcond[4]=((1.0)+(((-1.0)*x7084*x7089))+(((-1.0)*r22*x7090))+((x7082*x7086)));
evalcond[5]=((((-1.0)*sj0))+((x7081*x7087))+(((-1.0)*r02*x7089))+(((-1.0)*x7085*x7090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7091 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7091.valid){
continue;
}
CheckValue<IkReal> x7092=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7091.value)+(((1.5707963267949)*(x7092.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7093=IKsin(j4);
IkReal x7094=IKcos(j4);
IkReal x7095=(r11*sj5);
IkReal x7096=(r21*sj5);
IkReal x7097=(cj5*r00);
IkReal x7098=(cj5*r20);
IkReal x7099=(r01*sj5);
IkReal x7100=(cj5*r10);
IkReal x7101=((1.0)*x7094);
IkReal x7102=((1.0)*x7093);
evalcond[0]=(((x7093*x7096))+(((-1.0)*r22*x7101))+(((-1.0)*x7098*x7102)));
evalcond[1]=((((-1.0)*r02*x7102))+((x7094*x7097))+(((-1.0)*x7099*x7101)));
evalcond[2]=((((-1.0)*r12*x7102))+(((-1.0)*x7095*x7101))+((x7094*x7100)));
evalcond[3]=(cj0+(((-1.0)*r12*x7101))+(((-1.0)*x7100*x7102))+((x7093*x7095)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7102))+((x7094*x7098))+(((-1.0)*x7096*x7101)));
evalcond[5]=((((-1.0)*sj0))+((x7093*x7099))+(((-1.0)*r02*x7101))+(((-1.0)*x7097*x7102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7103=IKcos(j0);
IkReal x7104=IKsin(j0);
evalcond[0]=((((-0.134)*x7104))+(((-1.0)*px))+(((-0.392)*x7103)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x7103))+(((-0.392)*x7104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7105=((1.0)*cj5);
IkReal x7106=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7105)));
j4eval[0]=x7106;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7105)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7106);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7107=cj5*cj5;
IkReal x7108=((1.0)*r21);
IkReal x7109=(cj5*sj5);
IkReal x7110=((1.0)*r20);
IkReal x7111=((((-1.0)*r01*x7109*x7110))+(((-1.0)*r00*x7108*x7109))+((r01*r21))+(((-1.0)*r01*x7107*x7108))+((r00*r20*x7107))+((r02*r22)));
j4eval[0]=x7111;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7110)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7111);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7112=cj5*cj5;
IkReal x7113=(r21*sj5);
IkReal x7114=(r11*r21);
IkReal x7115=((1.0)*cj5*r20);
IkReal x7116=(x7114+(((-1.0)*x7112*x7114))+((r12*r22))+((r10*r20*x7112))+(((-1.0)*cj5*r10*x7113))+(((-1.0)*r11*sj5*x7115)));
j4eval[0]=x7116;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7113))+(((-1.0)*sj0*x7115))))));
j4eval[2]=IKsign(x7116);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7117=cj5*cj5;
IkReal x7118=(r21*sj5);
IkReal x7119=(r11*r21);
IkReal x7120=((1.0)*cj5*r20);
CheckValue<IkReal> x7121 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7118))+(((-1.0)*sj0*x7120)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7121.valid){
continue;
}
CheckValue<IkReal> x7122=IKPowWithIntegerCheck(IKsign((x7119+(((-1.0)*x7117*x7119))+((r12*r22))+((r10*r20*x7117))+(((-1.0)*r11*sj5*x7120))+(((-1.0)*cj5*r10*x7118)))),-1);
if(!x7122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7121.value)+(((1.5707963267949)*(x7122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7123=IKsin(j4);
IkReal x7124=IKcos(j4);
IkReal x7125=(r11*sj5);
IkReal x7126=(cj5*r00);
IkReal x7127=(cj5*r10);
IkReal x7128=(r21*sj5);
IkReal x7129=(cj5*r20);
IkReal x7130=(r01*sj5);
IkReal x7131=((1.0)*x7124);
IkReal x7132=((1.0)*x7123);
evalcond[0]=(((x7123*x7128))+(((-1.0)*r22*x7131))+(((-1.0)*x7129*x7132)));
evalcond[1]=((((-1.0)*r22*x7132))+((x7124*x7129))+(((-1.0)*x7128*x7131)));
evalcond[2]=((((-1.0)*r12*x7131))+(((-1.0)*x7127*x7132))+cj0+((x7123*x7125)));
evalcond[3]=((((-1.0)*x7130*x7131))+cj0+((x7124*x7126))+(((-1.0)*r02*x7132)));
evalcond[4]=(sj0+(((-1.0)*r12*x7132))+(((-1.0)*x7125*x7131))+((x7124*x7127)));
evalcond[5]=((((-1.0)*sj0))+((x7123*x7130))+(((-1.0)*x7126*x7132))+(((-1.0)*r02*x7131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7133=cj5*cj5;
IkReal x7134=((1.0)*r21);
IkReal x7135=(cj5*sj5);
IkReal x7136=((1.0)*r20);
CheckValue<IkReal> x7137=IKPowWithIntegerCheck(IKsign((((r00*r20*x7133))+(((-1.0)*r01*x7133*x7134))+(((-1.0)*r00*x7134*x7135))+(((-1.0)*r01*x7135*x7136))+((r01*r21))+((r02*r22)))),-1);
if(!x7137.valid){
continue;
}
CheckValue<IkReal> x7138 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x7136))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7137.value)))+(x7138.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7139=IKsin(j4);
IkReal x7140=IKcos(j4);
IkReal x7141=(r11*sj5);
IkReal x7142=(cj5*r00);
IkReal x7143=(cj5*r10);
IkReal x7144=(r21*sj5);
IkReal x7145=(cj5*r20);
IkReal x7146=(r01*sj5);
IkReal x7147=((1.0)*x7140);
IkReal x7148=((1.0)*x7139);
evalcond[0]=((((-1.0)*r22*x7147))+((x7139*x7144))+(((-1.0)*x7145*x7148)));
evalcond[1]=(((x7140*x7145))+(((-1.0)*r22*x7148))+(((-1.0)*x7144*x7147)));
evalcond[2]=(cj0+((x7139*x7141))+(((-1.0)*r12*x7147))+(((-1.0)*x7143*x7148)));
evalcond[3]=(((x7140*x7142))+cj0+(((-1.0)*x7146*x7147))+(((-1.0)*r02*x7148)));
evalcond[4]=(sj0+((x7140*x7143))+(((-1.0)*x7141*x7147))+(((-1.0)*r12*x7148)));
evalcond[5]=((((-1.0)*x7142*x7148))+(((-1.0)*sj0))+((x7139*x7146))+(((-1.0)*r02*x7147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7149=((1.0)*cj5);
CheckValue<IkReal> x7150 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7149)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7150.valid){
continue;
}
CheckValue<IkReal> x7151=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7149)))),-1);
if(!x7151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7150.value)+(((1.5707963267949)*(x7151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7152=IKsin(j4);
IkReal x7153=IKcos(j4);
IkReal x7154=(r11*sj5);
IkReal x7155=(cj5*r00);
IkReal x7156=(cj5*r10);
IkReal x7157=(r21*sj5);
IkReal x7158=(cj5*r20);
IkReal x7159=(r01*sj5);
IkReal x7160=((1.0)*x7153);
IkReal x7161=((1.0)*x7152);
evalcond[0]=((((-1.0)*r22*x7160))+(((-1.0)*x7158*x7161))+((x7152*x7157)));
evalcond[1]=((((-1.0)*r22*x7161))+(((-1.0)*x7157*x7160))+((x7153*x7158)));
evalcond[2]=((((-1.0)*x7156*x7161))+cj0+(((-1.0)*r12*x7160))+((x7152*x7154)));
evalcond[3]=((((-1.0)*r02*x7161))+(((-1.0)*x7159*x7160))+cj0+((x7153*x7155)));
evalcond[4]=(sj0+(((-1.0)*x7154*x7160))+((x7153*x7156))+(((-1.0)*r12*x7161)));
evalcond[5]=((((-1.0)*r02*x7160))+(((-1.0)*sj0))+(((-1.0)*x7155*x7161))+((x7152*x7159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7162=IKsin(j0);
IkReal x7163=IKcos(j0);
IkReal x7164=((0.1)*sj5);
IkReal x7165=(cj5*r11);
IkReal x7166=(cj5*r01);
IkReal x7167=((1.0)*sj5);
evalcond[0]=(x7163+(((-1.0)*r00*x7167))+(((-1.0)*x7166)));
evalcond[1]=(x7162+(((-1.0)*x7165))+(((-1.0)*r10*x7167)));
evalcond[2]=((((-1.0)*r00*x7164))+(((-1.0)*px))+(((-0.1)*x7166))+(((-0.134)*x7162)));
evalcond[3]=((((0.134)*x7163))+(((-1.0)*py))+(((-0.1)*x7165))+(((-1.0)*r10*x7164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7168=((1.0)*sj5);
IkReal x7169=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7168)));
j4eval[0]=x7169;
j4eval[1]=IKsign(x7169);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7168))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7170=((1.0)*cj5);
IkReal x7171=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7170)));
j4eval[0]=x7171;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7170))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7171);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7172=r21*r21;
IkReal x7173=cj5*cj5;
IkReal x7174=(r21*sj5);
IkReal x7175=(cj5*r20);
IkReal x7176=((((-1.0)*x7172))+((x7172*x7173))+(((-1.0)*(r22*r22)))+(((-1.0)*x7173*(r20*r20)))+(((2.0)*x7174*x7175)));
j4eval[0]=x7176;
j4eval[1]=((IKabs(r22))+(IKabs((x7174+(((-1.0)*x7175))))));
j4eval[2]=IKsign(x7176);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7177=r21*r21;
IkReal x7178=cj5*cj5;
IkReal x7179=(r21*sj5);
IkReal x7180=(cj5*r20);
CheckValue<IkReal> x7181 = IKatan2WithCheck(IkReal(r22),IkReal((x7179+(((-1.0)*x7180)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7181.valid){
continue;
}
CheckValue<IkReal> x7182=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7177))+((x7177*x7178))+(((-1.0)*(r22*r22)))+(((2.0)*x7179*x7180))+(((-1.0)*x7178*(r20*r20))))),-1);
if(!x7182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7181.value)+(((1.5707963267949)*(x7182.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7183=IKsin(j4);
IkReal x7184=IKcos(j4);
IkReal x7185=(r11*sj5);
IkReal x7186=(r21*sj5);
IkReal x7187=(cj5*r00);
IkReal x7188=(cj5*r20);
IkReal x7189=(r01*sj5);
IkReal x7190=(cj5*r10);
IkReal x7191=((1.0)*x7184);
IkReal x7192=((1.0)*x7183);
evalcond[0]=(((x7183*x7186))+(((-1.0)*x7188*x7192))+(((-1.0)*r22*x7191)));
evalcond[1]=((((-1.0)*x7189*x7191))+(((-1.0)*r02*x7192))+((x7184*x7187)));
evalcond[2]=((((-1.0)*x7185*x7191))+(((-1.0)*r12*x7192))+((x7184*x7190)));
evalcond[3]=(cj0+((x7183*x7185))+(((-1.0)*x7190*x7192))+(((-1.0)*r12*x7191)));
evalcond[4]=((-1.0)+(((-1.0)*x7186*x7191))+(((-1.0)*r22*x7192))+((x7184*x7188)));
evalcond[5]=((((-1.0)*sj0))+((x7183*x7189))+(((-1.0)*x7187*x7192))+(((-1.0)*r02*x7191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7193=((1.0)*cj5);
CheckValue<IkReal> x7194=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7193)))),-1);
if(!x7194.valid){
continue;
}
CheckValue<IkReal> x7195 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7194.value)))+(x7195.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7196=IKsin(j4);
IkReal x7197=IKcos(j4);
IkReal x7198=(r11*sj5);
IkReal x7199=(r21*sj5);
IkReal x7200=(cj5*r00);
IkReal x7201=(cj5*r20);
IkReal x7202=(r01*sj5);
IkReal x7203=(cj5*r10);
IkReal x7204=((1.0)*x7197);
IkReal x7205=((1.0)*x7196);
evalcond[0]=(((x7196*x7199))+(((-1.0)*x7201*x7205))+(((-1.0)*r22*x7204)));
evalcond[1]=((((-1.0)*x7202*x7204))+((x7197*x7200))+(((-1.0)*r02*x7205)));
evalcond[2]=((((-1.0)*x7198*x7204))+((x7197*x7203))+(((-1.0)*r12*x7205)));
evalcond[3]=(cj0+((x7196*x7198))+(((-1.0)*x7203*x7205))+(((-1.0)*r12*x7204)));
evalcond[4]=((-1.0)+(((-1.0)*x7199*x7204))+((x7197*x7201))+(((-1.0)*r22*x7205)));
evalcond[5]=((((-1.0)*sj0))+((x7196*x7202))+(((-1.0)*x7200*x7205))+(((-1.0)*r02*x7204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7206=((1.0)*sj5);
CheckValue<IkReal> x7207=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7206)))),-1);
if(!x7207.valid){
continue;
}
CheckValue<IkReal> x7208 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7206))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7207.value)))+(x7208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7209=IKsin(j4);
IkReal x7210=IKcos(j4);
IkReal x7211=(r11*sj5);
IkReal x7212=(r21*sj5);
IkReal x7213=(cj5*r00);
IkReal x7214=(cj5*r20);
IkReal x7215=(r01*sj5);
IkReal x7216=(cj5*r10);
IkReal x7217=((1.0)*x7210);
IkReal x7218=((1.0)*x7209);
evalcond[0]=(((x7209*x7212))+(((-1.0)*x7214*x7218))+(((-1.0)*r22*x7217)));
evalcond[1]=((((-1.0)*x7215*x7217))+((x7210*x7213))+(((-1.0)*r02*x7218)));
evalcond[2]=(((x7210*x7216))+(((-1.0)*r12*x7218))+(((-1.0)*x7211*x7217)));
evalcond[3]=(cj0+((x7209*x7211))+(((-1.0)*r12*x7217))+(((-1.0)*x7216*x7218)));
evalcond[4]=((-1.0)+(((-1.0)*x7212*x7217))+((x7210*x7214))+(((-1.0)*r22*x7218)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7213*x7218))+((x7209*x7215))+(((-1.0)*r02*x7217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7219=IKsin(j0);
IkReal x7220=IKcos(j0);
evalcond[0]=((((-0.134)*x7219))+(((0.392)*x7220))+(((-1.0)*px)));
evalcond[1]=((((0.392)*x7219))+(((-1.0)*py))+(((0.134)*x7220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7221=((1.0)*cj5);
IkReal x7222=((((-1.0)*r01*x7221))+(((-1.0)*r00*sj5)));
j4eval[0]=x7222;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7221))))));
j4eval[2]=IKsign(x7222);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7223=((1.0)*cj5);
IkReal x7224=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7223)));
j4eval[0]=x7224;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7223))))));
j4eval[2]=IKsign(x7224);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7225=cj5*cj5;
IkReal x7226=((1.0)*sj5);
IkReal x7227=(cj5*r20);
IkReal x7228=(r11*r21);
IkReal x7229=(((r10*r20*x7225))+x7228+((r12*r22))+(((-1.0)*r11*x7226*x7227))+(((-1.0)*cj5*r10*r21*x7226))+(((-1.0)*x7225*x7228)));
j4eval[0]=x7229;
j4eval[1]=IKsign(x7229);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7226))+((cj0*x7227))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7230=cj5*cj5;
IkReal x7231=((1.0)*sj5);
IkReal x7232=(cj5*r20);
IkReal x7233=(r11*r21);
CheckValue<IkReal> x7234 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7231))+((cj0*x7232)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7234.valid){
continue;
}
CheckValue<IkReal> x7235=IKPowWithIntegerCheck(IKsign((((r10*r20*x7230))+x7233+(((-1.0)*r11*x7231*x7232))+((r12*r22))+(((-1.0)*x7230*x7233))+(((-1.0)*cj5*r10*r21*x7231)))),-1);
if(!x7235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7234.value)+(((1.5707963267949)*(x7235.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7236=IKsin(j4);
IkReal x7237=IKcos(j4);
IkReal x7238=((1.0)*sj0);
IkReal x7239=(cj5*r00);
IkReal x7240=(r11*sj5);
IkReal x7241=(cj5*r10);
IkReal x7242=(r21*sj5);
IkReal x7243=(cj5*r20);
IkReal x7244=(r01*sj5);
IkReal x7245=((1.0)*x7237);
IkReal x7246=((1.0)*x7236);
evalcond[0]=((((-1.0)*r22*x7245))+((x7236*x7242))+(((-1.0)*x7243*x7246)));
evalcond[1]=((((-1.0)*r22*x7246))+(((-1.0)*x7242*x7245))+((x7237*x7243)));
evalcond[2]=((((-1.0)*r12*x7245))+cj0+((x7236*x7240))+(((-1.0)*x7241*x7246)));
evalcond[3]=(((x7236*x7244))+(((-1.0)*r02*x7245))+(((-1.0)*x7239*x7246))+(((-1.0)*x7238)));
evalcond[4]=((((-1.0)*x7244*x7245))+(((-1.0)*r02*x7246))+((x7237*x7239))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7246))+(((-1.0)*x7240*x7245))+((x7237*x7241))+(((-1.0)*x7238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7247=((1.0)*cj5);
CheckValue<IkReal> x7248 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7247))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7248.valid){
continue;
}
CheckValue<IkReal> x7249=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7247)))),-1);
if(!x7249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7248.value)+(((1.5707963267949)*(x7249.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7250=IKsin(j4);
IkReal x7251=IKcos(j4);
IkReal x7252=((1.0)*sj0);
IkReal x7253=(cj5*r00);
IkReal x7254=(r11*sj5);
IkReal x7255=(cj5*r10);
IkReal x7256=(r21*sj5);
IkReal x7257=(cj5*r20);
IkReal x7258=(r01*sj5);
IkReal x7259=((1.0)*x7251);
IkReal x7260=((1.0)*x7250);
evalcond[0]=(((x7250*x7256))+(((-1.0)*x7257*x7260))+(((-1.0)*r22*x7259)));
evalcond[1]=((((-1.0)*r22*x7260))+((x7251*x7257))+(((-1.0)*x7256*x7259)));
evalcond[2]=(((x7250*x7254))+cj0+(((-1.0)*x7255*x7260))+(((-1.0)*r12*x7259)));
evalcond[3]=((((-1.0)*x7252))+((x7250*x7258))+(((-1.0)*x7253*x7260))+(((-1.0)*r02*x7259)));
evalcond[4]=(((x7251*x7253))+(((-1.0)*r02*x7260))+(((-1.0)*x7258*x7259))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7252))+((x7251*x7255))+(((-1.0)*x7254*x7259))+(((-1.0)*r12*x7260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7261=((1.0)*cj5);
CheckValue<IkReal> x7262=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7261))+(((-1.0)*r00*sj5)))),-1);
if(!x7262.valid){
continue;
}
CheckValue<IkReal> x7263 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7261)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7262.value)))+(x7263.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7264=IKsin(j4);
IkReal x7265=IKcos(j4);
IkReal x7266=((1.0)*sj0);
IkReal x7267=(cj5*r00);
IkReal x7268=(r11*sj5);
IkReal x7269=(cj5*r10);
IkReal x7270=(r21*sj5);
IkReal x7271=(cj5*r20);
IkReal x7272=(r01*sj5);
IkReal x7273=((1.0)*x7265);
IkReal x7274=((1.0)*x7264);
evalcond[0]=((((-1.0)*r22*x7273))+(((-1.0)*x7271*x7274))+((x7264*x7270)));
evalcond[1]=(((x7265*x7271))+(((-1.0)*r22*x7274))+(((-1.0)*x7270*x7273)));
evalcond[2]=(cj0+(((-1.0)*r12*x7273))+((x7264*x7268))+(((-1.0)*x7269*x7274)));
evalcond[3]=((((-1.0)*x7267*x7274))+(((-1.0)*x7266))+(((-1.0)*r02*x7273))+((x7264*x7272)));
evalcond[4]=(((x7265*x7267))+(((-1.0)*x7272*x7273))+(((-1.0)*r02*x7274))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7274))+((x7265*x7269))+(((-1.0)*x7266))+(((-1.0)*x7268*x7273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.195493438569105)*px))+(((-1.19192641276835)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.195493438569105)*py))+(((-1.19192641276835)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))))+IKsqr(((((0.195493438569105)*py))+(((-1.19192641276835)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))), ((((0.195493438569105)*py))+(((-1.19192641276835)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7275=IKcos(j0);
IkReal x7276=IKsin(j0);
evalcond[0]=((((-0.817)*x7275))+(((-1.0)*px))+(((-0.134)*x7276)));
evalcond[1]=((((0.134)*x7275))+(((-0.817)*x7276))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7277=((1.0)*cj5);
IkReal x7278=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7277)));
j4eval[0]=x7278;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7277)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7278);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7279=cj5*cj5;
IkReal x7280=((1.0)*r21);
IkReal x7281=(cj5*sj5);
IkReal x7282=((1.0)*r20);
IkReal x7283=((((-1.0)*r01*x7279*x7280))+(((-1.0)*r00*x7280*x7281))+((r01*r21))+((r00*r20*x7279))+((r02*r22))+(((-1.0)*r01*x7281*x7282)));
j4eval[0]=x7283;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7282))))));
j4eval[2]=IKsign(x7283);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7284=cj5*cj5;
IkReal x7285=(r21*sj5);
IkReal x7286=(r11*r21);
IkReal x7287=((1.0)*cj5*r20);
IkReal x7288=(x7286+(((-1.0)*x7284*x7286))+(((-1.0)*cj5*r10*x7285))+((r10*r20*x7284))+((r12*r22))+(((-1.0)*r11*sj5*x7287)));
j4eval[0]=x7288;
j4eval[1]=((IKabs((((sj0*x7285))+(((-1.0)*sj0*x7287)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7288);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7289=cj5*cj5;
IkReal x7290=(r21*sj5);
IkReal x7291=(r11*r21);
IkReal x7292=((1.0)*cj5*r20);
CheckValue<IkReal> x7293 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7290))+(((-1.0)*sj0*x7292)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7293.valid){
continue;
}
CheckValue<IkReal> x7294=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7292))+(((-1.0)*cj5*r10*x7290))+x7291+((r10*r20*x7289))+((r12*r22))+(((-1.0)*x7289*x7291)))),-1);
if(!x7294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7293.value)+(((1.5707963267949)*(x7294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7295=IKsin(j4);
IkReal x7296=IKcos(j4);
IkReal x7297=(r11*sj5);
IkReal x7298=(cj5*r00);
IkReal x7299=(cj5*r10);
IkReal x7300=(r21*sj5);
IkReal x7301=(cj5*r20);
IkReal x7302=(r01*sj5);
IkReal x7303=((1.0)*x7296);
IkReal x7304=((1.0)*x7295);
evalcond[0]=(((x7295*x7300))+(((-1.0)*x7301*x7304))+(((-1.0)*r22*x7303)));
evalcond[1]=(((x7296*x7301))+(((-1.0)*x7300*x7303))+(((-1.0)*r22*x7304)));
evalcond[2]=(cj0+(((-1.0)*r12*x7303))+((x7295*x7297))+(((-1.0)*x7299*x7304)));
evalcond[3]=((((-1.0)*r02*x7304))+cj0+(((-1.0)*x7302*x7303))+((x7296*x7298)));
evalcond[4]=((((-1.0)*x7297*x7303))+sj0+(((-1.0)*r12*x7304))+((x7296*x7299)));
evalcond[5]=((((-1.0)*r02*x7303))+(((-1.0)*sj0))+((x7295*x7302))+(((-1.0)*x7298*x7304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7305=cj5*cj5;
IkReal x7306=((1.0)*r21);
IkReal x7307=(cj5*sj5);
IkReal x7308=((1.0)*r20);
CheckValue<IkReal> x7309 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7308)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7309.valid){
continue;
}
CheckValue<IkReal> x7310=IKPowWithIntegerCheck(IKsign((((r00*r20*x7305))+((r01*r21))+(((-1.0)*r01*x7307*x7308))+(((-1.0)*r01*x7305*x7306))+((r02*r22))+(((-1.0)*r00*x7306*x7307)))),-1);
if(!x7310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7309.value)+(((1.5707963267949)*(x7310.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7311=IKsin(j4);
IkReal x7312=IKcos(j4);
IkReal x7313=(r11*sj5);
IkReal x7314=(cj5*r00);
IkReal x7315=(cj5*r10);
IkReal x7316=(r21*sj5);
IkReal x7317=(cj5*r20);
IkReal x7318=(r01*sj5);
IkReal x7319=((1.0)*x7312);
IkReal x7320=((1.0)*x7311);
evalcond[0]=((((-1.0)*x7317*x7320))+(((-1.0)*r22*x7319))+((x7311*x7316)));
evalcond[1]=(((x7312*x7317))+(((-1.0)*r22*x7320))+(((-1.0)*x7316*x7319)));
evalcond[2]=(cj0+(((-1.0)*x7315*x7320))+(((-1.0)*r12*x7319))+((x7311*x7313)));
evalcond[3]=(((x7312*x7314))+cj0+(((-1.0)*x7318*x7319))+(((-1.0)*r02*x7320)));
evalcond[4]=(sj0+((x7312*x7315))+(((-1.0)*x7313*x7319))+(((-1.0)*r12*x7320)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7314*x7320))+((x7311*x7318))+(((-1.0)*r02*x7319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7321=((1.0)*cj5);
CheckValue<IkReal> x7322=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7321)))),-1);
if(!x7322.valid){
continue;
}
CheckValue<IkReal> x7323 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7322.value)))+(x7323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7324=IKsin(j4);
IkReal x7325=IKcos(j4);
IkReal x7326=(r11*sj5);
IkReal x7327=(cj5*r00);
IkReal x7328=(cj5*r10);
IkReal x7329=(r21*sj5);
IkReal x7330=(cj5*r20);
IkReal x7331=(r01*sj5);
IkReal x7332=((1.0)*x7325);
IkReal x7333=((1.0)*x7324);
evalcond[0]=((((-1.0)*r22*x7332))+((x7324*x7329))+(((-1.0)*x7330*x7333)));
evalcond[1]=(((x7325*x7330))+(((-1.0)*x7329*x7332))+(((-1.0)*r22*x7333)));
evalcond[2]=(cj0+(((-1.0)*r12*x7332))+(((-1.0)*x7328*x7333))+((x7324*x7326)));
evalcond[3]=((((-1.0)*r02*x7333))+cj0+((x7325*x7327))+(((-1.0)*x7331*x7332)));
evalcond[4]=(sj0+(((-1.0)*x7326*x7332))+(((-1.0)*r12*x7333))+((x7325*x7328)));
evalcond[5]=((((-1.0)*r02*x7332))+(((-1.0)*sj0))+(((-1.0)*x7327*x7333))+((x7324*x7331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.03596744552376)*py))+(((-1.73273825150958)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((7.03596744552376)*py))+(((-1.73273825150958)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((7.03596744552376)*py))+(((-1.73273825150958)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7334=IKcos(j0);
IkReal x7335=IKsin(j0);
evalcond[0]=((((-0.134)*x7335))+(((-1.0)*px))+(((-0.033)*x7334)));
evalcond[1]=((((-1.0)*py))+(((-0.033)*x7335))+(((0.134)*x7334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7336=((1.0)*cj5);
IkReal x7337=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7336)));
j4eval[0]=x7337;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7336)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7337);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7338=((1.0)*cj5);
IkReal x7339=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7338)));
j4eval[0]=x7339;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x7338))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7339);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7340=cj5*cj5;
IkReal x7341=((1.0)*sj5);
IkReal x7342=(cj5*r20);
IkReal x7343=(r11*r21);
IkReal x7344=(x7343+((r12*r22))+(((-1.0)*cj5*r10*r21*x7341))+(((-1.0)*x7340*x7343))+(((-1.0)*r11*x7341*x7342))+((r10*r20*x7340)));
j4eval[0]=x7344;
j4eval[1]=IKsign(x7344);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7341))+((cj0*x7342))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7345=cj5*cj5;
IkReal x7346=((1.0)*sj5);
IkReal x7347=(cj5*r20);
IkReal x7348=(r11*r21);
CheckValue<IkReal> x7349=IKPowWithIntegerCheck(IKsign((x7348+(((-1.0)*r11*x7346*x7347))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7346))+(((-1.0)*x7345*x7348))+((r10*r20*x7345)))),-1);
if(!x7349.valid){
continue;
}
CheckValue<IkReal> x7350 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7346))+((cj0*x7347)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7349.value)))+(x7350.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7351=IKsin(j4);
IkReal x7352=IKcos(j4);
IkReal x7353=((1.0)*sj0);
IkReal x7354=(cj5*r00);
IkReal x7355=(r11*sj5);
IkReal x7356=(cj5*r10);
IkReal x7357=(r21*sj5);
IkReal x7358=(cj5*r20);
IkReal x7359=(r01*sj5);
IkReal x7360=((1.0)*x7352);
IkReal x7361=((1.0)*x7351);
evalcond[0]=((((-1.0)*r22*x7360))+((x7351*x7357))+(((-1.0)*x7358*x7361)));
evalcond[1]=(((x7352*x7358))+(((-1.0)*r22*x7361))+(((-1.0)*x7357*x7360)));
evalcond[2]=(cj0+(((-1.0)*r12*x7360))+(((-1.0)*x7356*x7361))+((x7351*x7355)));
evalcond[3]=((((-1.0)*x7353))+(((-1.0)*x7354*x7361))+(((-1.0)*r02*x7360))+((x7351*x7359)));
evalcond[4]=(((x7352*x7354))+(((-1.0)*r02*x7361))+(((-1.0)*x7359*x7360))+(((-1.0)*cj0)));
evalcond[5]=(((x7352*x7356))+(((-1.0)*x7353))+(((-1.0)*r12*x7361))+(((-1.0)*x7355*x7360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7362=((1.0)*cj5);
CheckValue<IkReal> x7363 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7362)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7363.valid){
continue;
}
CheckValue<IkReal> x7364=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7362)))),-1);
if(!x7364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7363.value)+(((1.5707963267949)*(x7364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7365=IKsin(j4);
IkReal x7366=IKcos(j4);
IkReal x7367=((1.0)*sj0);
IkReal x7368=(cj5*r00);
IkReal x7369=(r11*sj5);
IkReal x7370=(cj5*r10);
IkReal x7371=(r21*sj5);
IkReal x7372=(cj5*r20);
IkReal x7373=(r01*sj5);
IkReal x7374=((1.0)*x7366);
IkReal x7375=((1.0)*x7365);
evalcond[0]=((((-1.0)*r22*x7374))+((x7365*x7371))+(((-1.0)*x7372*x7375)));
evalcond[1]=((((-1.0)*r22*x7375))+((x7366*x7372))+(((-1.0)*x7371*x7374)));
evalcond[2]=(cj0+(((-1.0)*r12*x7374))+(((-1.0)*x7370*x7375))+((x7365*x7369)));
evalcond[3]=(((x7365*x7373))+(((-1.0)*x7367))+(((-1.0)*x7368*x7375))+(((-1.0)*r02*x7374)));
evalcond[4]=(((x7366*x7368))+(((-1.0)*r02*x7375))+(((-1.0)*x7373*x7374))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7375))+(((-1.0)*x7367))+((x7366*x7370))+(((-1.0)*x7369*x7374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7376=((1.0)*cj5);
CheckValue<IkReal> x7377 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7377.valid){
continue;
}
CheckValue<IkReal> x7378=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7376))+(((-1.0)*r00*sj5)))),-1);
if(!x7378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7377.value)+(((1.5707963267949)*(x7378.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7379=IKsin(j4);
IkReal x7380=IKcos(j4);
IkReal x7381=((1.0)*sj0);
IkReal x7382=(cj5*r00);
IkReal x7383=(r11*sj5);
IkReal x7384=(cj5*r10);
IkReal x7385=(r21*sj5);
IkReal x7386=(cj5*r20);
IkReal x7387=(r01*sj5);
IkReal x7388=((1.0)*x7380);
IkReal x7389=((1.0)*x7379);
evalcond[0]=((((-1.0)*x7386*x7389))+(((-1.0)*r22*x7388))+((x7379*x7385)));
evalcond[1]=((((-1.0)*r22*x7389))+((x7380*x7386))+(((-1.0)*x7385*x7388)));
evalcond[2]=(cj0+((x7379*x7383))+(((-1.0)*x7384*x7389))+(((-1.0)*r12*x7388)));
evalcond[3]=((((-1.0)*r02*x7388))+((x7379*x7387))+(((-1.0)*x7381))+(((-1.0)*x7382*x7389)));
evalcond[4]=((((-1.0)*r02*x7389))+((x7380*x7382))+(((-1.0)*cj0))+(((-1.0)*x7387*x7388)));
evalcond[5]=(((x7380*x7384))+(((-1.0)*x7381))+(((-1.0)*x7383*x7388))+(((-1.0)*r12*x7389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7390=IKsin(j0);
IkReal x7391=IKcos(j0);
IkReal x7392=((0.1)*sj5);
IkReal x7393=(cj5*r11);
IkReal x7394=(cj5*r01);
IkReal x7395=((1.0)*sj5);
evalcond[0]=(x7391+(((-1.0)*r00*x7395))+(((-1.0)*x7394)));
evalcond[1]=(x7390+(((-1.0)*x7393))+(((-1.0)*r10*x7395)));
evalcond[2]=((((-0.1)*x7394))+(((-0.134)*x7390))+(((-1.0)*r00*x7392))+(((-1.0)*px)));
evalcond[3]=((((-0.1)*x7393))+(((-1.0)*py))+(((-1.0)*r10*x7392))+(((0.134)*x7391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7396=((1.0)*sj5);
IkReal x7397=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7396)));
j4eval[0]=x7397;
j4eval[1]=IKsign(x7397);
j4eval[2]=((IKabs(((((-1.0)*r01*x7396))+((cj5*r00)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7398=((1.0)*cj5);
IkReal x7399=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7398)));
j4eval[0]=x7399;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7398)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7399);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7400=r21*r21;
IkReal x7401=cj5*cj5;
IkReal x7402=(r21*sj5);
IkReal x7403=(cj5*r20);
IkReal x7404=(((x7400*x7401))+(((-1.0)*x7400))+(((-1.0)*(r22*r22)))+(((2.0)*x7402*x7403))+(((-1.0)*x7401*(r20*r20))));
j4eval[0]=x7404;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*x7403))+x7402))));
j4eval[2]=IKsign(x7404);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7405=r21*r21;
IkReal x7406=cj5*cj5;
IkReal x7407=(r21*sj5);
IkReal x7408=(cj5*r20);
CheckValue<IkReal> x7409 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7408))+x7407)),IKFAST_ATAN2_MAGTHRESH);
if(!x7409.valid){
continue;
}
CheckValue<IkReal> x7410=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7406*(r20*r20)))+((x7405*x7406))+(((-1.0)*x7405))+(((-1.0)*(r22*r22)))+(((2.0)*x7407*x7408)))),-1);
if(!x7410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7409.value)+(((1.5707963267949)*(x7410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7411=IKsin(j4);
IkReal x7412=IKcos(j4);
IkReal x7413=(r11*sj5);
IkReal x7414=(r21*sj5);
IkReal x7415=(cj5*r00);
IkReal x7416=(cj5*r20);
IkReal x7417=(r01*sj5);
IkReal x7418=(cj5*r10);
IkReal x7419=((1.0)*x7412);
IkReal x7420=((1.0)*x7411);
evalcond[0]=((((-1.0)*x7416*x7420))+((x7411*x7414))+(((-1.0)*r22*x7419)));
evalcond[1]=((((-1.0)*r02*x7420))+(((-1.0)*x7417*x7419))+((x7412*x7415)));
evalcond[2]=((((-1.0)*r12*x7420))+(((-1.0)*x7413*x7419))+((x7412*x7418)));
evalcond[3]=((((-1.0)*r12*x7419))+cj0+(((-1.0)*x7418*x7420))+((x7411*x7413)));
evalcond[4]=((-1.0)+(((-1.0)*x7414*x7419))+(((-1.0)*r22*x7420))+((x7412*x7416)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7415*x7420))+((x7411*x7417))+(((-1.0)*r02*x7419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7421=((1.0)*cj5);
CheckValue<IkReal> x7422=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7421)))),-1);
if(!x7422.valid){
continue;
}
CheckValue<IkReal> x7423 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7421)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7422.value)))+(x7423.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7424=IKsin(j4);
IkReal x7425=IKcos(j4);
IkReal x7426=(r11*sj5);
IkReal x7427=(r21*sj5);
IkReal x7428=(cj5*r00);
IkReal x7429=(cj5*r20);
IkReal x7430=(r01*sj5);
IkReal x7431=(cj5*r10);
IkReal x7432=((1.0)*x7425);
IkReal x7433=((1.0)*x7424);
evalcond[0]=((((-1.0)*r22*x7432))+((x7424*x7427))+(((-1.0)*x7429*x7433)));
evalcond[1]=((((-1.0)*x7430*x7432))+(((-1.0)*r02*x7433))+((x7425*x7428)));
evalcond[2]=((((-1.0)*r12*x7433))+((x7425*x7431))+(((-1.0)*x7426*x7432)));
evalcond[3]=(cj0+((x7424*x7426))+(((-1.0)*r12*x7432))+(((-1.0)*x7431*x7433)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7433))+((x7425*x7429))+(((-1.0)*x7427*x7432)));
evalcond[5]=((((-1.0)*sj0))+((x7424*x7430))+(((-1.0)*r02*x7432))+(((-1.0)*x7428*x7433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7434=((1.0)*sj5);
CheckValue<IkReal> x7435 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7434))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7435.valid){
continue;
}
CheckValue<IkReal> x7436=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7434)))),-1);
if(!x7436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7435.value)+(((1.5707963267949)*(x7436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7437=IKsin(j4);
IkReal x7438=IKcos(j4);
IkReal x7439=(r11*sj5);
IkReal x7440=(r21*sj5);
IkReal x7441=(cj5*r00);
IkReal x7442=(cj5*r20);
IkReal x7443=(r01*sj5);
IkReal x7444=(cj5*r10);
IkReal x7445=((1.0)*x7438);
IkReal x7446=((1.0)*x7437);
evalcond[0]=((((-1.0)*x7442*x7446))+((x7437*x7440))+(((-1.0)*r22*x7445)));
evalcond[1]=(((x7438*x7441))+(((-1.0)*r02*x7446))+(((-1.0)*x7443*x7445)));
evalcond[2]=(((x7438*x7444))+(((-1.0)*x7439*x7445))+(((-1.0)*r12*x7446)));
evalcond[3]=(((x7437*x7439))+cj0+(((-1.0)*x7444*x7446))+(((-1.0)*r12*x7445)));
evalcond[4]=((-1.0)+(((-1.0)*x7440*x7445))+((x7438*x7442))+(((-1.0)*r22*x7446)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7445))+((x7437*x7443))+(((-1.0)*x7441*x7446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7447=IKsin(j0);
IkReal x7448=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x7447))+(((0.392)*x7448)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x7448))+(((0.392)*x7447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7449=((1.0)*cj5);
IkReal x7450=((((-1.0)*r01*x7449))+(((-1.0)*r00*sj5)));
j4eval[0]=x7450;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7449)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7450);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7451=((1.0)*cj5);
IkReal x7452=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7451)));
j4eval[0]=x7452;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7451))))));
j4eval[2]=IKsign(x7452);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7453=cj5*cj5;
IkReal x7454=((1.0)*sj5);
IkReal x7455=(cj5*r20);
IkReal x7456=(r11*r21);
IkReal x7457=((((-1.0)*cj5*r10*r21*x7454))+((r10*r20*x7453))+(((-1.0)*r11*x7454*x7455))+((r12*r22))+(((-1.0)*x7453*x7456))+x7456);
j4eval[0]=x7457;
j4eval[1]=IKsign(x7457);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7454))+((cj0*x7455)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7458=cj5*cj5;
IkReal x7459=((1.0)*sj5);
IkReal x7460=(cj5*r20);
IkReal x7461=(r11*r21);
CheckValue<IkReal> x7462 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7459))+((cj0*x7460)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7462.valid){
continue;
}
CheckValue<IkReal> x7463=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x7459))+((r10*r20*x7458))+(((-1.0)*r11*x7459*x7460))+((r12*r22))+(((-1.0)*x7458*x7461))+x7461)),-1);
if(!x7463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7462.value)+(((1.5707963267949)*(x7463.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7464=IKsin(j4);
IkReal x7465=IKcos(j4);
IkReal x7466=((1.0)*sj0);
IkReal x7467=(cj5*r00);
IkReal x7468=(r11*sj5);
IkReal x7469=(cj5*r10);
IkReal x7470=(r21*sj5);
IkReal x7471=(cj5*r20);
IkReal x7472=(r01*sj5);
IkReal x7473=((1.0)*x7465);
IkReal x7474=((1.0)*x7464);
evalcond[0]=((((-1.0)*r22*x7473))+((x7464*x7470))+(((-1.0)*x7471*x7474)));
evalcond[1]=(((x7465*x7471))+(((-1.0)*r22*x7474))+(((-1.0)*x7470*x7473)));
evalcond[2]=(cj0+((x7464*x7468))+(((-1.0)*x7469*x7474))+(((-1.0)*r12*x7473)));
evalcond[3]=((((-1.0)*r02*x7473))+(((-1.0)*x7467*x7474))+(((-1.0)*x7466))+((x7464*x7472)));
evalcond[4]=((((-1.0)*r02*x7474))+((x7465*x7467))+(((-1.0)*x7472*x7473))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7466))+((x7465*x7469))+(((-1.0)*x7468*x7473))+(((-1.0)*r12*x7474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7475=((1.0)*cj5);
CheckValue<IkReal> x7476 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7476.valid){
continue;
}
CheckValue<IkReal> x7477=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7475))+(((-1.0)*r10*sj5)))),-1);
if(!x7477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7476.value)+(((1.5707963267949)*(x7477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7478=IKsin(j4);
IkReal x7479=IKcos(j4);
IkReal x7480=((1.0)*sj0);
IkReal x7481=(cj5*r00);
IkReal x7482=(r11*sj5);
IkReal x7483=(cj5*r10);
IkReal x7484=(r21*sj5);
IkReal x7485=(cj5*r20);
IkReal x7486=(r01*sj5);
IkReal x7487=((1.0)*x7479);
IkReal x7488=((1.0)*x7478);
evalcond[0]=(((x7478*x7484))+(((-1.0)*r22*x7487))+(((-1.0)*x7485*x7488)));
evalcond[1]=((((-1.0)*r22*x7488))+(((-1.0)*x7484*x7487))+((x7479*x7485)));
evalcond[2]=(((x7478*x7482))+cj0+(((-1.0)*r12*x7487))+(((-1.0)*x7483*x7488)));
evalcond[3]=(((x7478*x7486))+(((-1.0)*x7481*x7488))+(((-1.0)*x7480))+(((-1.0)*r02*x7487)));
evalcond[4]=((((-1.0)*x7486*x7487))+(((-1.0)*r02*x7488))+(((-1.0)*cj0))+((x7479*x7481)));
evalcond[5]=((((-1.0)*x7482*x7487))+(((-1.0)*x7480))+(((-1.0)*r12*x7488))+((x7479*x7483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7489=((1.0)*cj5);
CheckValue<IkReal> x7490 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7489)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7490.valid){
continue;
}
CheckValue<IkReal> x7491=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7489)))),-1);
if(!x7491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7490.value)+(((1.5707963267949)*(x7491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7492=IKsin(j4);
IkReal x7493=IKcos(j4);
IkReal x7494=((1.0)*sj0);
IkReal x7495=(cj5*r00);
IkReal x7496=(r11*sj5);
IkReal x7497=(cj5*r10);
IkReal x7498=(r21*sj5);
IkReal x7499=(cj5*r20);
IkReal x7500=(r01*sj5);
IkReal x7501=((1.0)*x7493);
IkReal x7502=((1.0)*x7492);
evalcond[0]=((((-1.0)*r22*x7501))+(((-1.0)*x7499*x7502))+((x7492*x7498)));
evalcond[1]=((((-1.0)*r22*x7502))+(((-1.0)*x7498*x7501))+((x7493*x7499)));
evalcond[2]=((((-1.0)*x7497*x7502))+cj0+((x7492*x7496))+(((-1.0)*r12*x7501)));
evalcond[3]=((((-1.0)*r02*x7501))+(((-1.0)*x7494))+((x7492*x7500))+(((-1.0)*x7495*x7502)));
evalcond[4]=((((-1.0)*x7500*x7501))+(((-1.0)*r02*x7502))+((x7493*x7495))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7496*x7501))+((x7493*x7497))+(((-1.0)*x7494))+(((-1.0)*r12*x7502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7503=((1.0)*sj5);
IkReal x7504=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x7503))+(((-1.0)*r11*x7504)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x7504))+(((-1.0)*r00*x7503)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x7503))+(((-1.0)*r11*x7504))))+IKsqr(((((-1.0)*r01*x7504))+(((-1.0)*r00*x7503))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x7503))+(((-1.0)*r11*x7504))), ((((-1.0)*r01*x7504))+(((-1.0)*r00*x7503))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7505=IKsin(j0);
IkReal x7506=IKcos(j0);
IkReal x7507=((0.1)*sj5);
IkReal x7508=(cj5*r11);
IkReal x7509=(cj5*r01);
IkReal x7510=((1.0)*sj5);
evalcond[0]=((((-1.0)*r00*x7510))+(((-1.0)*x7509))+(((-1.0)*x7506)));
evalcond[1]=((((-1.0)*r10*x7510))+(((-1.0)*x7508))+(((-1.0)*x7505)));
evalcond[2]=((((-0.1)*x7509))+(((-1.0)*r00*x7507))+(((-1.0)*px))+(((-0.134)*x7505)));
evalcond[3]=((((-0.1)*x7508))+(((-1.0)*py))+(((0.134)*x7506))+(((-1.0)*r10*x7507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7511=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7511;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7511);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7512=((1.0)*cj5);
IkReal x7513=((((-1.0)*r01*x7512))+(((-1.0)*r00*sj5)));
j4eval[0]=x7513;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7512))))));
j4eval[2]=IKsign(x7513);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7514=cj5*cj5;
IkReal x7515=r21*r21;
IkReal x7516=(r21*sj5);
IkReal x7517=(cj5*r20);
IkReal x7518=(((x7514*(r20*r20)))+(r22*r22)+(((-2.0)*x7516*x7517))+x7515+(((-1.0)*x7514*x7515)));
j4eval[0]=x7518;
j4eval[1]=IKsign(x7518);
j4eval[2]=((IKabs(r22))+(IKabs((x7516+(((-1.0)*x7517))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7519=cj5*cj5;
IkReal x7520=r21*r21;
IkReal x7521=(r21*sj5);
IkReal x7522=(cj5*r20);
CheckValue<IkReal> x7523 = IKatan2WithCheck(IkReal(r22),IkReal((x7521+(((-1.0)*x7522)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7523.valid){
continue;
}
CheckValue<IkReal> x7524=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7521*x7522))+(((-1.0)*x7519*x7520))+x7520+((x7519*(r20*r20))))),-1);
if(!x7524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7523.value)+(((1.5707963267949)*(x7524.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7525=IKsin(j4);
IkReal x7526=IKcos(j4);
IkReal x7527=(r11*sj5);
IkReal x7528=(r21*sj5);
IkReal x7529=(cj5*r00);
IkReal x7530=(cj5*r20);
IkReal x7531=(r01*sj5);
IkReal x7532=(cj5*r10);
IkReal x7533=((1.0)*x7526);
IkReal x7534=((1.0)*x7525);
evalcond[0]=(((x7525*x7528))+(((-1.0)*r22*x7533))+(((-1.0)*x7530*x7534)));
evalcond[1]=(((x7526*x7529))+(((-1.0)*x7531*x7533))+(((-1.0)*r02*x7534)));
evalcond[2]=((((-1.0)*x7527*x7533))+(((-1.0)*r12*x7534))+((x7526*x7532)));
evalcond[3]=(((x7525*x7527))+(((-1.0)*x7532*x7534))+cj0+(((-1.0)*r12*x7533)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7534))+(((-1.0)*x7528*x7533))+((x7526*x7530)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7529*x7534))+((x7525*x7531))+(((-1.0)*r02*x7533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7535=((1.0)*cj5);
CheckValue<IkReal> x7536 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7535)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7536.valid){
continue;
}
CheckValue<IkReal> x7537=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7535)))),-1);
if(!x7537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7536.value)+(((1.5707963267949)*(x7537.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7538=IKsin(j4);
IkReal x7539=IKcos(j4);
IkReal x7540=(r11*sj5);
IkReal x7541=(r21*sj5);
IkReal x7542=(cj5*r00);
IkReal x7543=(cj5*r20);
IkReal x7544=(r01*sj5);
IkReal x7545=(cj5*r10);
IkReal x7546=((1.0)*x7539);
IkReal x7547=((1.0)*x7538);
evalcond[0]=((((-1.0)*x7543*x7547))+(((-1.0)*r22*x7546))+((x7538*x7541)));
evalcond[1]=((((-1.0)*x7544*x7546))+((x7539*x7542))+(((-1.0)*r02*x7547)));
evalcond[2]=((((-1.0)*x7540*x7546))+((x7539*x7545))+(((-1.0)*r12*x7547)));
evalcond[3]=(cj0+((x7538*x7540))+(((-1.0)*r12*x7546))+(((-1.0)*x7545*x7547)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7547))+((x7539*x7543))+(((-1.0)*x7541*x7546)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7542*x7547))+((x7538*x7544))+(((-1.0)*r02*x7546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7548 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7548.valid){
continue;
}
CheckValue<IkReal> x7549=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7548.value)+(((1.5707963267949)*(x7549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7550=IKsin(j4);
IkReal x7551=IKcos(j4);
IkReal x7552=(r11*sj5);
IkReal x7553=(r21*sj5);
IkReal x7554=(cj5*r00);
IkReal x7555=(cj5*r20);
IkReal x7556=(r01*sj5);
IkReal x7557=(cj5*r10);
IkReal x7558=((1.0)*x7551);
IkReal x7559=((1.0)*x7550);
evalcond[0]=((((-1.0)*x7555*x7559))+((x7550*x7553))+(((-1.0)*r22*x7558)));
evalcond[1]=(((x7551*x7554))+(((-1.0)*x7556*x7558))+(((-1.0)*r02*x7559)));
evalcond[2]=(((x7551*x7557))+(((-1.0)*r12*x7559))+(((-1.0)*x7552*x7558)));
evalcond[3]=(cj0+((x7550*x7552))+(((-1.0)*x7557*x7559))+(((-1.0)*r12*x7558)));
evalcond[4]=((1.0)+((x7551*x7555))+(((-1.0)*r22*x7559))+(((-1.0)*x7553*x7558)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7554*x7559))+((x7550*x7556))+(((-1.0)*r02*x7558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7560=IKcos(j0);
IkReal x7561=IKsin(j0);
evalcond[0]=((((-0.134)*x7561))+(((-1.0)*px))+(((-0.392)*x7560)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x7560))+(((-0.392)*x7561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7562=((1.0)*cj5);
IkReal x7563=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7562)));
j4eval[0]=x7563;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7562))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7563);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7564=cj5*cj5;
IkReal x7565=((1.0)*r21);
IkReal x7566=(cj5*sj5);
IkReal x7567=((1.0)*r20);
IkReal x7568=(((r00*r20*x7564))+((r01*r21))+(((-1.0)*r00*x7565*x7566))+(((-1.0)*r01*x7566*x7567))+(((-1.0)*r01*x7564*x7565))+((r02*r22)));
j4eval[0]=x7568;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7567))))));
j4eval[2]=IKsign(x7568);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7569=cj5*cj5;
IkReal x7570=(r21*sj5);
IkReal x7571=(r11*r21);
IkReal x7572=((1.0)*cj5*r20);
IkReal x7573=((((-1.0)*x7569*x7571))+((r10*r20*x7569))+(((-1.0)*cj5*r10*x7570))+((r12*r22))+(((-1.0)*r11*sj5*x7572))+x7571);
j4eval[0]=x7573;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7572))+((sj0*x7570))))));
j4eval[2]=IKsign(x7573);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7574=cj5*cj5;
IkReal x7575=(r21*sj5);
IkReal x7576=(r11*r21);
IkReal x7577=((1.0)*cj5*r20);
CheckValue<IkReal> x7578 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7577))+((sj0*x7575)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7578.valid){
continue;
}
CheckValue<IkReal> x7579=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7574*x7576))+(((-1.0)*cj5*r10*x7575))+((r12*r22))+(((-1.0)*r11*sj5*x7577))+((r10*r20*x7574))+x7576)),-1);
if(!x7579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7578.value)+(((1.5707963267949)*(x7579.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7580=IKsin(j4);
IkReal x7581=IKcos(j4);
IkReal x7582=(r11*sj5);
IkReal x7583=(cj5*r00);
IkReal x7584=(cj5*r10);
IkReal x7585=(r21*sj5);
IkReal x7586=(cj5*r20);
IkReal x7587=(r01*sj5);
IkReal x7588=((1.0)*x7581);
IkReal x7589=((1.0)*x7580);
evalcond[0]=((((-1.0)*x7586*x7589))+(((-1.0)*r22*x7588))+((x7580*x7585)));
evalcond[1]=((((-1.0)*x7585*x7588))+(((-1.0)*r22*x7589))+((x7581*x7586)));
evalcond[2]=((((-1.0)*x7584*x7589))+cj0+(((-1.0)*r12*x7588))+((x7580*x7582)));
evalcond[3]=(cj0+(((-1.0)*x7587*x7588))+(((-1.0)*r02*x7589))+((x7581*x7583)));
evalcond[4]=(sj0+(((-1.0)*x7582*x7588))+((x7581*x7584))+(((-1.0)*r12*x7589)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7588))+(((-1.0)*x7583*x7589))+((x7580*x7587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7590=cj5*cj5;
IkReal x7591=((1.0)*r21);
IkReal x7592=(cj5*sj5);
IkReal x7593=((1.0)*r20);
CheckValue<IkReal> x7594=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7592*x7593))+((r00*r20*x7590))+((r01*r21))+(((-1.0)*r01*x7590*x7591))+(((-1.0)*r00*x7591*x7592))+((r02*r22)))),-1);
if(!x7594.valid){
continue;
}
CheckValue<IkReal> x7595 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7593)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7594.value)))+(x7595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7596=IKsin(j4);
IkReal x7597=IKcos(j4);
IkReal x7598=(r11*sj5);
IkReal x7599=(cj5*r00);
IkReal x7600=(cj5*r10);
IkReal x7601=(r21*sj5);
IkReal x7602=(cj5*r20);
IkReal x7603=(r01*sj5);
IkReal x7604=((1.0)*x7597);
IkReal x7605=((1.0)*x7596);
evalcond[0]=(((x7596*x7601))+(((-1.0)*r22*x7604))+(((-1.0)*x7602*x7605)));
evalcond[1]=((((-1.0)*r22*x7605))+((x7597*x7602))+(((-1.0)*x7601*x7604)));
evalcond[2]=(cj0+(((-1.0)*x7600*x7605))+(((-1.0)*r12*x7604))+((x7596*x7598)));
evalcond[3]=(cj0+((x7597*x7599))+(((-1.0)*x7603*x7604))+(((-1.0)*r02*x7605)));
evalcond[4]=(sj0+((x7597*x7600))+(((-1.0)*x7598*x7604))+(((-1.0)*r12*x7605)));
evalcond[5]=(((x7596*x7603))+(((-1.0)*sj0))+(((-1.0)*x7599*x7605))+(((-1.0)*r02*x7604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7606=((1.0)*cj5);
CheckValue<IkReal> x7607=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7606)))),-1);
if(!x7607.valid){
continue;
}
CheckValue<IkReal> x7608 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7606)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7607.value)))+(x7608.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7609=IKsin(j4);
IkReal x7610=IKcos(j4);
IkReal x7611=(r11*sj5);
IkReal x7612=(cj5*r00);
IkReal x7613=(cj5*r10);
IkReal x7614=(r21*sj5);
IkReal x7615=(cj5*r20);
IkReal x7616=(r01*sj5);
IkReal x7617=((1.0)*x7610);
IkReal x7618=((1.0)*x7609);
evalcond[0]=((((-1.0)*r22*x7617))+(((-1.0)*x7615*x7618))+((x7609*x7614)));
evalcond[1]=((((-1.0)*r22*x7618))+(((-1.0)*x7614*x7617))+((x7610*x7615)));
evalcond[2]=((((-1.0)*r12*x7617))+cj0+(((-1.0)*x7613*x7618))+((x7609*x7611)));
evalcond[3]=(cj0+(((-1.0)*r02*x7618))+((x7610*x7612))+(((-1.0)*x7616*x7617)));
evalcond[4]=((((-1.0)*r12*x7618))+sj0+(((-1.0)*x7611*x7617))+((x7610*x7613)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7612*x7618))+(((-1.0)*r02*x7617))+((x7609*x7616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7619=cj1*cj1;
IkReal x7620=((500.0)*py);
IkReal x7621=(cj1*sj2);
IkReal x7622=(cj2*sj2);
IkReal x7623=(cj5*r01);
IkReal x7624=(cj2*sj1);
IkReal x7625=(cj1*sj1);
IkReal x7626=(r00*sj5);
IkReal x7627=((50.0)*r10*sj5);
IkReal x7628=((50.0)*cj5*r11);
CheckValue<IkReal> x7629=IKPowWithIntegerCheck(((((196.0)*x7622))+(((196.0)*x7625))+(((-212.5)*sj2*x7619))+(((-212.5)*cj1*x7624))+(((-392.0)*cj1*cj2*x7624))+(((-392.0)*x7619*x7622))),-1);
if(!x7629.valid){
continue;
}
CheckValue<IkReal> x7630=IKPowWithIntegerCheck(((((-1.0)*x7621))+(((-1.0)*x7624))),-1);
if(!x7630.valid){
continue;
}
if( IKabs(((x7629.value)*(((((-67.0)*x7626))+(((-67.0)*x7623))+(((-1.0)*x7621*x7628))+(((-1.0)*x7621*x7627))+(((-1.0)*x7620*x7624))+(((-1.0)*x7620*x7621))+(((-1.0)*x7624*x7628))+(((-1.0)*x7624*x7627)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7630.value)*((x7626+x7623)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7629.value)*(((((-67.0)*x7626))+(((-67.0)*x7623))+(((-1.0)*x7621*x7628))+(((-1.0)*x7621*x7627))+(((-1.0)*x7620*x7624))+(((-1.0)*x7620*x7621))+(((-1.0)*x7624*x7628))+(((-1.0)*x7624*x7627))))))+IKsqr(((x7630.value)*((x7626+x7623))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7629.value)*(((((-67.0)*x7626))+(((-67.0)*x7623))+(((-1.0)*x7621*x7628))+(((-1.0)*x7621*x7627))+(((-1.0)*x7620*x7624))+(((-1.0)*x7620*x7621))+(((-1.0)*x7624*x7628))+(((-1.0)*x7624*x7627))))), ((x7630.value)*((x7626+x7623))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7631=IKcos(j0);
IkReal x7632=IKsin(j0);
IkReal x7633=(r00*sj5);
IkReal x7634=(cj5*r11);
IkReal x7635=(r10*sj5);
IkReal x7636=((1.0)*cj2);
IkReal x7637=(cj5*r01);
IkReal x7638=((0.392)*sj2);
IkReal x7639=((0.425)*cj1);
IkReal x7640=((1.0)*cj1*sj2);
IkReal x7641=((0.392)*cj1*cj2);
IkReal x7642=(sj1*x7631);
IkReal x7643=(sj1*x7632);
evalcond[0]=((((-1.0)*x7631*x7640))+(((-1.0)*x7636*x7642))+(((-1.0)*x7637))+(((-1.0)*x7633)));
evalcond[1]=((((-1.0)*x7632*x7640))+(((-1.0)*x7636*x7643))+(((-1.0)*x7634))+(((-1.0)*x7635)));
evalcond[2]=(((x7631*x7639))+((x7631*x7641))+(((-0.134)*x7632))+(((-1.0)*px))+(((-1.0)*x7638*x7642))+(((-0.1)*x7633))+(((-0.1)*x7637)));
evalcond[3]=(((x7632*x7639))+(((0.134)*x7631))+(((-1.0)*py))+(((-1.0)*x7638*x7643))+(((-0.1)*x7635))+(((-0.1)*x7634))+((x7632*x7641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7644=((1.0)*cj5);
IkReal x7645=((((-1.0)*r01*x7644))+(((-1.0)*r00*sj5)));
j4eval[0]=x7645;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x7644))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x7645);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7646=((1.0)*cj5);
IkReal x7647=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7646)));
j4eval[0]=x7647;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7646))))));
j4eval[2]=IKsign(x7647);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7648=((1.0)*sj0);
IkReal x7649=((1.0)*cj0);
IkReal x7650=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7650;
j4eval[1]=((IKabs(((((-1.0)*r02*x7649))+(((-1.0)*r12*x7648)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x7649))+(((-1.0)*r11*sj5*x7648))))));
j4eval[2]=IKsign(x7650);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7651=((-1.0)*r20);
IkReal x7653 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7653)==0){
continue;
}
IkReal x7652=pow(x7653,-0.5);
CheckValue<IkReal> x7654 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7651),IKFAST_ATAN2_MAGTHRESH);
if(!x7654.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7654.value));
IkReal gconst133=(r21*x7652);
IkReal gconst134=(x7651*x7652);
CheckValue<IkReal> x7655 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7655.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7655.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7656=((-1.0)*r20);
IkReal x7657=x7652;
CheckValue<IkReal> x7659 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7656),IKFAST_ATAN2_MAGTHRESH);
if(!x7659.valid){
continue;
}
IkReal x7658=((-1.0)*(x7659.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7658;
IkReal gconst132=x7658;
IkReal gconst133=(r21*x7657);
IkReal gconst134=(x7656*x7657);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7660=((-1.0)*r20);
IkReal x7661=x7652;
CheckValue<IkReal> x7663 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7660),IKFAST_ATAN2_MAGTHRESH);
if(!x7663.valid){
continue;
}
IkReal x7662=((-1.0)*(x7663.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7662;
IkReal gconst132=x7662;
IkReal gconst133=(r21*x7661);
IkReal gconst134=(x7660*x7661);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7664=((-1.0)*r20);
IkReal x7665=x7652;
CheckValue<IkReal> x7667 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7664),IKFAST_ATAN2_MAGTHRESH);
if(!x7667.valid){
continue;
}
IkReal x7666=((-1.0)*(x7667.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7666;
IkReal gconst132=x7666;
IkReal gconst133=(r21*x7665);
IkReal gconst134=(x7664*x7665);
IkReal x7668=r22*r22;
CheckValue<IkReal> x7671=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7668))),-1);
if(!x7671.valid){
continue;
}
IkReal x7669=x7671.value;
IkReal x7670=(((x7669*(r20*r20*r20*r20)))+(((2.0)*x7669*(r20*r20)*(r21*r21)))+((x7669*(r21*r21*r21*r21)))+x7668);
j4eval[0]=x7670;
j4eval[1]=IKsign(x7670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7672=(gconst133*r21);
IkReal x7673=(cj1*sj2);
IkReal x7674=(gconst134*r20);
IkReal x7675=(cj2*sj1);
CheckValue<IkReal> x7676 = IKatan2WithCheck(IkReal((((r22*x7675))+((r22*x7673)))),IkReal((((x7672*x7675))+((x7672*x7673))+(((-1.0)*x7673*x7674))+(((-1.0)*x7674*x7675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7676.valid){
continue;
}
CheckValue<IkReal> x7677=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7672*x7672)+(((-2.0)*x7672*x7674))+(x7674*x7674))),-1);
if(!x7677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7676.value)+(((1.5707963267949)*(x7677.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7678=IKsin(j4);
IkReal x7679=IKcos(j4);
IkReal x7680=(sj1*sj2);
IkReal x7681=(gconst133*r11);
IkReal x7682=(gconst133*r21);
IkReal x7683=(gconst133*r01);
IkReal x7684=((1.0)*x7679);
IkReal x7685=(gconst134*x7679);
IkReal x7686=((1.0)*x7678);
IkReal x7687=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7686))+(((-1.0)*r22*x7684))+((x7678*x7682)));
evalcond[1]=((((-1.0)*gconst134*r10*x7686))+cj0+(((-1.0)*r12*x7684))+((x7678*x7681)));
evalcond[2]=((((-1.0)*gconst134*r00*x7686))+(((-1.0)*sj0))+((x7678*x7683))+(((-1.0)*r02*x7684)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7686))+(((-1.0)*x7682*x7684))+((r20*x7685)));
evalcond[4]=((((-1.0)*cj0*x7687))+((cj0*x7680))+((r00*x7685))+(((-1.0)*x7683*x7684))+(((-1.0)*r02*x7686)));
evalcond[5]=(((sj0*x7680))+((r10*x7685))+(((-1.0)*x7681*x7684))+(((-1.0)*r12*x7686))+(((-1.0)*sj0*x7687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7688=((1.0)*gconst134);
CheckValue<IkReal> x7689 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7688))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7689.valid){
continue;
}
CheckValue<IkReal> x7690=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7688)))),-1);
if(!x7690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7689.value)+(((1.5707963267949)*(x7690.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7691=IKsin(j4);
IkReal x7692=IKcos(j4);
IkReal x7693=(sj1*sj2);
IkReal x7694=(gconst133*r11);
IkReal x7695=(gconst133*r21);
IkReal x7696=(gconst133*r01);
IkReal x7697=((1.0)*x7692);
IkReal x7698=(gconst134*x7692);
IkReal x7699=((1.0)*x7691);
IkReal x7700=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7699))+((x7691*x7695))+(((-1.0)*r22*x7697)));
evalcond[1]=((((-1.0)*gconst134*r10*x7699))+cj0+((x7691*x7694))+(((-1.0)*r12*x7697)));
evalcond[2]=((((-1.0)*r02*x7697))+(((-1.0)*sj0))+(((-1.0)*gconst134*r00*x7699))+((x7691*x7696)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7695*x7697))+((cj1*sj2))+(((-1.0)*r22*x7699))+((r20*x7698)));
evalcond[4]=((((-1.0)*r02*x7699))+(((-1.0)*x7696*x7697))+((r00*x7698))+((cj0*x7693))+(((-1.0)*cj0*x7700)));
evalcond[5]=(((r10*x7698))+((sj0*x7693))+(((-1.0)*r12*x7699))+(((-1.0)*x7694*x7697))+(((-1.0)*sj0*x7700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7701=((1.0)*gconst134);
CheckValue<IkReal> x7702=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7701)))),-1);
if(!x7702.valid){
continue;
}
CheckValue<IkReal> x7703 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7701))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7702.value)))+(x7703.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7704=IKsin(j4);
IkReal x7705=IKcos(j4);
IkReal x7706=(sj1*sj2);
IkReal x7707=(gconst133*r11);
IkReal x7708=(gconst133*r21);
IkReal x7709=(gconst133*r01);
IkReal x7710=((1.0)*x7705);
IkReal x7711=(gconst134*x7705);
IkReal x7712=((1.0)*x7704);
IkReal x7713=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7710))+(((-1.0)*gconst134*r20*x7712))+((x7704*x7708)));
evalcond[1]=(cj0+(((-1.0)*r12*x7710))+(((-1.0)*gconst134*r10*x7712))+((x7704*x7707)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x7712))+((x7704*x7709))+(((-1.0)*r02*x7710)));
evalcond[3]=((((-1.0)*x7708*x7710))+((cj2*sj1))+(((-1.0)*r22*x7712))+((cj1*sj2))+((r20*x7711)));
evalcond[4]=((((-1.0)*cj0*x7713))+((cj0*x7706))+(((-1.0)*r02*x7712))+((r00*x7711))+(((-1.0)*x7709*x7710)));
evalcond[5]=((((-1.0)*x7707*x7710))+(((-1.0)*r12*x7712))+((sj0*x7706))+((r10*x7711))+(((-1.0)*sj0*x7713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7714=((-1.0)*r21);
IkReal x7716 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7716)==0){
continue;
}
IkReal x7715=pow(x7716,-0.5);
CheckValue<IkReal> x7717 = IKatan2WithCheck(IkReal(x7714),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7717.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7717.value))));
IkReal gconst136=(x7714*x7715);
IkReal gconst137=((1.0)*r20*x7715);
CheckValue<IkReal> x7718 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7718.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7718.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7719=((-1.0)*r21);
CheckValue<IkReal> x7722 = IKatan2WithCheck(IkReal(x7719),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7722.valid){
continue;
}
IkReal x7720=((1.0)*(x7722.value));
IkReal x7721=x7715;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7720)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7720)));
IkReal gconst136=(x7719*x7721);
IkReal gconst137=((1.0)*r20*x7721);
IkReal x7723=r22*r22;
IkReal x7724=((1.0)*x7723);
CheckValue<IkReal> x7728=IKPowWithIntegerCheck(((-1.0)+x7723),-1);
if(!x7728.valid){
continue;
}
IkReal x7725=x7728.value;
if((((1.0)+(((-1.0)*x7724)))) < -0.00001)
continue;
IkReal x7726=IKsqrt(((1.0)+(((-1.0)*x7724))));
IkReal x7727=(cj0*x7725*x7726);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x7724*x7727))+x7727))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7729=((-1.0)*r21);
CheckValue<IkReal> x7732 = IKatan2WithCheck(IkReal(x7729),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7732.valid){
continue;
}
IkReal x7730=((1.0)*(x7732.value));
IkReal x7731=x7715;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7730)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7730)));
IkReal gconst136=(x7729*x7731);
IkReal gconst137=((1.0)*r20*x7731);
IkReal x7733=r22*r22;
IkReal x7734=((1.0)*x7733);
CheckValue<IkReal> x7738=IKPowWithIntegerCheck(((-1.0)+x7733),-1);
if(!x7738.valid){
continue;
}
IkReal x7735=x7738.value;
if((((1.0)+(((-1.0)*x7734)))) < -0.00001)
continue;
IkReal x7736=IKsqrt(((1.0)+(((-1.0)*x7734))));
IkReal x7737=(sj0*x7735*x7736);
j4eval[0]=((IKabs(((((-1.0)*x7734*x7737))+x7737)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7739=((-1.0)*r21);
CheckValue<IkReal> x7742 = IKatan2WithCheck(IkReal(x7739),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7742.valid){
continue;
}
IkReal x7740=((1.0)*(x7742.value));
IkReal x7741=x7715;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7740)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7740)));
IkReal gconst136=(x7739*x7741);
IkReal gconst137=((1.0)*r20*x7741);
IkReal x7743=r22*r22;
IkReal x7744=(r12*sj0);
IkReal x7745=(cj0*r02);
CheckValue<IkReal> x7749=IKPowWithIntegerCheck(((-1.0)+x7743),-1);
if(!x7749.valid){
continue;
}
IkReal x7746=x7749.value;
if((((1.0)+(((-1.0)*x7743)))) < -0.00001)
continue;
IkReal x7747=IKsqrt(((1.0)+(((-1.0)*x7743))));
IkReal x7748=(r22*x7746*x7747);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7744))+(((-1.0)*x7745)))))+(IKabs((((x7745*x7748))+((x7744*x7748))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7750=((1.0)*sj0);
IkReal x7751=((1.0)*cj0);
CheckValue<IkReal> x7752=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7752.valid){
continue;
}
CheckValue<IkReal> x7753 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7751))+(((-1.0)*r12*x7750)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x7750))+(((-1.0)*gconst136*r01*x7751))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7752.value)))+(x7753.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7754=IKsin(j4);
IkReal x7755=IKcos(j4);
IkReal x7756=(gconst136*r01);
IkReal x7757=(gconst137*r10);
IkReal x7758=(sj1*sj2);
IkReal x7759=(gconst137*r20);
IkReal x7760=(gconst136*r11);
IkReal x7761=(gconst136*r21);
IkReal x7762=(gconst137*r00);
IkReal x7763=((1.0)*x7755);
IkReal x7764=((1.0)*cj1*cj2);
IkReal x7765=((1.0)*x7754);
evalcond[0]=((((-1.0)*r22*x7763))+(((-1.0)*x7759*x7765))+((x7754*x7761)));
evalcond[1]=(cj0+(((-1.0)*x7757*x7765))+(((-1.0)*r12*x7763))+((x7754*x7760)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7763))+(((-1.0)*x7762*x7765))+((x7754*x7756)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7765))+((cj1*sj2))+((x7755*x7759))+(((-1.0)*x7761*x7763)));
evalcond[4]=((((-1.0)*r02*x7765))+(((-1.0)*cj0*x7764))+((cj0*x7758))+((x7755*x7762))+(((-1.0)*x7756*x7763)));
evalcond[5]=((((-1.0)*x7760*x7763))+((sj0*x7758))+((x7755*x7757))+(((-1.0)*sj0*x7764))+(((-1.0)*r12*x7765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7766=((1.0)*gconst137);
CheckValue<IkReal> x7767=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7766)))),-1);
if(!x7767.valid){
continue;
}
CheckValue<IkReal> x7768 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7766))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7767.value)))+(x7768.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7769=IKsin(j4);
IkReal x7770=IKcos(j4);
IkReal x7771=(gconst136*r01);
IkReal x7772=(gconst137*r10);
IkReal x7773=(sj1*sj2);
IkReal x7774=(gconst137*r20);
IkReal x7775=(gconst136*r11);
IkReal x7776=(gconst136*r21);
IkReal x7777=(gconst137*r00);
IkReal x7778=((1.0)*x7770);
IkReal x7779=((1.0)*cj1*cj2);
IkReal x7780=((1.0)*x7769);
evalcond[0]=((((-1.0)*r22*x7778))+((x7769*x7776))+(((-1.0)*x7774*x7780)));
evalcond[1]=(cj0+(((-1.0)*x7772*x7780))+((x7769*x7775))+(((-1.0)*r12*x7778)));
evalcond[2]=((((-1.0)*r02*x7778))+(((-1.0)*sj0))+((x7769*x7771))+(((-1.0)*x7777*x7780)));
evalcond[3]=(((cj2*sj1))+((x7770*x7774))+((cj1*sj2))+(((-1.0)*x7776*x7778))+(((-1.0)*r22*x7780)));
evalcond[4]=((((-1.0)*x7771*x7778))+((x7770*x7777))+(((-1.0)*cj0*x7779))+((cj0*x7773))+(((-1.0)*r02*x7780)));
evalcond[5]=(((x7770*x7772))+((sj0*x7773))+(((-1.0)*x7775*x7778))+(((-1.0)*sj0*x7779))+(((-1.0)*r12*x7780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7781=((1.0)*gconst137);
CheckValue<IkReal> x7782 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7781))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7782.valid){
continue;
}
CheckValue<IkReal> x7783=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7781))+(((-1.0)*gconst136*r00)))),-1);
if(!x7783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7782.value)+(((1.5707963267949)*(x7783.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7784=IKsin(j4);
IkReal x7785=IKcos(j4);
IkReal x7786=(gconst136*r01);
IkReal x7787=(gconst137*r10);
IkReal x7788=(sj1*sj2);
IkReal x7789=(gconst137*r20);
IkReal x7790=(gconst136*r11);
IkReal x7791=(gconst136*r21);
IkReal x7792=(gconst137*r00);
IkReal x7793=((1.0)*x7785);
IkReal x7794=((1.0)*cj1*cj2);
IkReal x7795=((1.0)*x7784);
evalcond[0]=((((-1.0)*r22*x7793))+((x7784*x7791))+(((-1.0)*x7789*x7795)));
evalcond[1]=(cj0+(((-1.0)*r12*x7793))+(((-1.0)*x7787*x7795))+((x7784*x7790)));
evalcond[2]=((((-1.0)*sj0))+((x7784*x7786))+(((-1.0)*x7792*x7795))+(((-1.0)*r02*x7793)));
evalcond[3]=((((-1.0)*r22*x7795))+((cj2*sj1))+((x7785*x7789))+(((-1.0)*x7791*x7793))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x7786*x7793))+(((-1.0)*cj0*x7794))+(((-1.0)*r02*x7795))+((cj0*x7788))+((x7785*x7792)));
evalcond[5]=(((sj0*x7788))+((x7785*x7787))+(((-1.0)*r12*x7795))+(((-1.0)*x7790*x7793))+(((-1.0)*sj0*x7794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7796=((-1.0)*r10);
IkReal x7798 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7798)==0){
continue;
}
IkReal x7797=pow(x7798,-0.5);
CheckValue<IkReal> x7799 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7796),IKFAST_ATAN2_MAGTHRESH);
if(!x7799.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7799.value));
IkReal gconst139=(r11*x7797);
IkReal gconst140=(x7796*x7797);
CheckValue<IkReal> x7800 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7800.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7800.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7801=((-1.0)*r10);
IkReal x7802=x7797;
CheckValue<IkReal> x7804 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7801),IKFAST_ATAN2_MAGTHRESH);
if(!x7804.valid){
continue;
}
IkReal x7803=((-1.0)*(x7804.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7803;
IkReal gconst138=x7803;
IkReal gconst139=(r11*x7802);
IkReal gconst140=(x7801*x7802);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7805=((1.0)*sj0);
IkReal x7806=((1.0)*gconst139);
CheckValue<IkReal> x7807=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7806)))),-1);
if(!x7807.valid){
continue;
}
CheckValue<IkReal> x7808 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7805))+(((-1.0)*cj0*r02)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x7805))+(((-1.0)*cj0*r01*x7806))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7807.value)))+(x7808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7809=IKsin(j4);
IkReal x7810=IKcos(j4);
IkReal x7811=(gconst140*r00);
IkReal x7812=(sj1*sj2);
IkReal x7813=(gconst139*r11);
IkReal x7814=(gconst139*r01);
IkReal x7815=(gconst139*r21);
IkReal x7816=((1.0)*x7810);
IkReal x7817=((1.0)*x7809);
IkReal x7818=((1.0)*cj1*cj2);
IkReal x7819=(gconst140*x7810);
evalcond[0]=((((-1.0)*r22*x7816))+((x7809*x7815))+(((-1.0)*gconst140*r20*x7817)));
evalcond[1]=((((-1.0)*gconst140*r10*x7817))+cj0+(((-1.0)*r12*x7816))+((x7809*x7813)));
evalcond[2]=((((-1.0)*x7811*x7817))+(((-1.0)*sj0))+(((-1.0)*r02*x7816))+((x7809*x7814)));
evalcond[3]=(((cj2*sj1))+((r20*x7819))+((cj1*sj2))+(((-1.0)*r22*x7817))+(((-1.0)*x7815*x7816)));
evalcond[4]=(((x7810*x7811))+(((-1.0)*r02*x7817))+(((-1.0)*x7814*x7816))+(((-1.0)*cj0*x7818))+((cj0*x7812)));
evalcond[5]=(((r10*x7819))+((sj0*x7812))+(((-1.0)*r12*x7817))+(((-1.0)*x7813*x7816))+(((-1.0)*sj0*x7818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7820=((1.0)*gconst140);
CheckValue<IkReal> x7821 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7820)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7821.valid){
continue;
}
CheckValue<IkReal> x7822=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7820))+(((-1.0)*gconst139*r00)))),-1);
if(!x7822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7821.value)+(((1.5707963267949)*(x7822.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7823=IKsin(j4);
IkReal x7824=IKcos(j4);
IkReal x7825=(gconst140*r00);
IkReal x7826=(sj1*sj2);
IkReal x7827=(gconst139*r11);
IkReal x7828=(gconst139*r01);
IkReal x7829=(gconst139*r21);
IkReal x7830=((1.0)*x7824);
IkReal x7831=((1.0)*x7823);
IkReal x7832=((1.0)*cj1*cj2);
IkReal x7833=(gconst140*x7824);
evalcond[0]=((((-1.0)*r22*x7830))+(((-1.0)*gconst140*r20*x7831))+((x7823*x7829)));
evalcond[1]=(cj0+((x7823*x7827))+(((-1.0)*r12*x7830))+(((-1.0)*gconst140*r10*x7831)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7830))+((x7823*x7828))+(((-1.0)*x7825*x7831)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7829*x7830))+(((-1.0)*r22*x7831))+((r20*x7833))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x7828*x7830))+(((-1.0)*cj0*x7832))+(((-1.0)*r02*x7831))+((cj0*x7826))+((x7824*x7825)));
evalcond[5]=(((r10*x7833))+((sj0*x7826))+(((-1.0)*r12*x7831))+(((-1.0)*sj0*x7832))+(((-1.0)*x7827*x7830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7834=((-1.0)*r11);
IkReal x7836 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7836)==0){
continue;
}
IkReal x7835=pow(x7836,-0.5);
CheckValue<IkReal> x7837 = IKatan2WithCheck(IkReal(x7834),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7837.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7837.value))));
IkReal gconst142=(x7834*x7835);
IkReal gconst143=((1.0)*r10*x7835);
CheckValue<IkReal> x7838 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7838.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7838.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7839=((-1.0)*r11);
CheckValue<IkReal> x7842 = IKatan2WithCheck(IkReal(x7839),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7842.valid){
continue;
}
IkReal x7840=((1.0)*(x7842.value));
IkReal x7841=x7835;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7840)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7840)));
IkReal gconst142=(x7839*x7841);
IkReal gconst143=((1.0)*r10*x7841);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7843=((-1.0)*r11);
CheckValue<IkReal> x7846 = IKatan2WithCheck(IkReal(x7843),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7846.valid){
continue;
}
IkReal x7844=((1.0)*(x7846.value));
IkReal x7845=x7835;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7844)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7844)));
IkReal gconst142=(x7843*x7845);
IkReal gconst143=((1.0)*r10*x7845);
IkReal x7847=r12*r12;
IkReal x7848=((1.0)*sj0);
IkReal x7849=(cj0*r02);
IkReal x7850=x7835;
j4eval[0]=((IKabs(((((-1.0)*x7848*x7850))+((r12*x7849*x7850))+((sj0*x7847*x7850)))))+(IKabs(((((-1.0)*r12*x7848))+(((-1.0)*x7849))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7851=((-1.0)*r11);
CheckValue<IkReal> x7854 = IKatan2WithCheck(IkReal(x7851),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7854.valid){
continue;
}
IkReal x7852=((1.0)*(x7854.value));
IkReal x7853=x7835;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7852)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7852)));
IkReal gconst142=(x7851*x7853);
IkReal gconst143=((1.0)*r10*x7853);
IkReal x7855=r12*r12;
IkReal x7856=(cj1*r22*sj2);
IkReal x7857=(cj2*r22*sj1);
CheckValue<IkReal> x7861=IKPowWithIntegerCheck(((-1.0)+x7855),-1);
if(!x7861.valid){
continue;
}
IkReal x7858=x7861.value;
if((((1.0)+(((-1.0)*x7855)))) < -0.00001)
continue;
IkReal x7859=IKsqrt(((1.0)+(((-1.0)*x7855))));
IkReal x7860=((1.0)*r12*x7858*x7859);
j4eval[0]=((IKabs((x7856+x7857)))+(IKabs(((((-1.0)*x7857*x7860))+(((-1.0)*x7856*x7860))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7862=(gconst142*r21);
IkReal x7863=(cj1*sj2);
IkReal x7864=(cj2*sj1);
IkReal x7865=(gconst143*r20);
CheckValue<IkReal> x7866=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7862*x7862)+(((-2.0)*x7862*x7865))+(x7865*x7865))),-1);
if(!x7866.valid){
continue;
}
CheckValue<IkReal> x7867 = IKatan2WithCheck(IkReal((((r22*x7864))+((r22*x7863)))),IkReal(((((-1.0)*x7863*x7865))+((x7862*x7864))+((x7862*x7863))+(((-1.0)*x7864*x7865)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7866.value)))+(x7867.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7868=IKsin(j4);
IkReal x7869=IKcos(j4);
IkReal x7870=(sj1*sj2);
IkReal x7871=(gconst143*r20);
IkReal x7872=((1.0)*x7869);
IkReal x7873=((1.0)*cj1*cj2);
IkReal x7874=((1.0)*x7868);
IkReal x7875=(gconst142*x7868);
IkReal x7876=(gconst143*x7869);
evalcond[0]=((((-1.0)*r22*x7872))+(((-1.0)*x7871*x7874))+((r21*x7875)));
evalcond[1]=(cj0+((r11*x7875))+(((-1.0)*r12*x7872))+(((-1.0)*gconst143*r10*x7874)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7875))+(((-1.0)*r02*x7872))+(((-1.0)*gconst143*r00*x7874)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7874))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7872))+((x7869*x7871)));
evalcond[4]=(((cj0*x7870))+(((-1.0)*gconst142*r01*x7872))+((r00*x7876))+(((-1.0)*r02*x7874))+(((-1.0)*cj0*x7873)));
evalcond[5]=((((-1.0)*gconst142*r11*x7872))+((r10*x7876))+(((-1.0)*r12*x7874))+((sj0*x7870))+(((-1.0)*sj0*x7873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7877=((1.0)*sj0);
IkReal x7878=((1.0)*gconst142);
CheckValue<IkReal> x7879 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7877))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst142*r11*x7877))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7878))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7879.valid){
continue;
}
CheckValue<IkReal> x7880=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7878))+(((-1.0)*gconst143*r21)))),-1);
if(!x7880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7879.value)+(((1.5707963267949)*(x7880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7881=IKsin(j4);
IkReal x7882=IKcos(j4);
IkReal x7883=(sj1*sj2);
IkReal x7884=(gconst143*r20);
IkReal x7885=((1.0)*x7882);
IkReal x7886=((1.0)*cj1*cj2);
IkReal x7887=((1.0)*x7881);
IkReal x7888=(gconst142*x7881);
IkReal x7889=(gconst143*x7882);
evalcond[0]=((((-1.0)*r22*x7885))+(((-1.0)*x7884*x7887))+((r21*x7888)));
evalcond[1]=(cj0+((r11*x7888))+(((-1.0)*r12*x7885))+(((-1.0)*gconst143*r10*x7887)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x7887))+((r01*x7888))+(((-1.0)*r02*x7885)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7887))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7885))+((x7882*x7884)));
evalcond[4]=(((cj0*x7883))+(((-1.0)*r02*x7887))+((r00*x7889))+(((-1.0)*gconst142*r01*x7885))+(((-1.0)*cj0*x7886)));
evalcond[5]=((((-1.0)*sj0*x7886))+((sj0*x7883))+((r10*x7889))+(((-1.0)*r12*x7887))+(((-1.0)*gconst142*r11*x7885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7890=((1.0)*gconst143);
CheckValue<IkReal> x7891=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x7890)))),-1);
if(!x7891.valid){
continue;
}
CheckValue<IkReal> x7892 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7890))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7891.value)))+(x7892.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7893=IKsin(j4);
IkReal x7894=IKcos(j4);
IkReal x7895=(sj1*sj2);
IkReal x7896=(gconst143*r20);
IkReal x7897=((1.0)*x7894);
IkReal x7898=((1.0)*cj1*cj2);
IkReal x7899=((1.0)*x7893);
IkReal x7900=(gconst142*x7893);
IkReal x7901=(gconst143*x7894);
evalcond[0]=(((r21*x7900))+(((-1.0)*r22*x7897))+(((-1.0)*x7896*x7899)));
evalcond[1]=(cj0+(((-1.0)*r12*x7897))+(((-1.0)*gconst143*r10*x7899))+((r11*x7900)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x7899))+((r01*x7900))+(((-1.0)*r02*x7897)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7894*x7896))+(((-1.0)*r22*x7899))+(((-1.0)*gconst142*r21*x7897)));
evalcond[4]=((((-1.0)*cj0*x7898))+((cj0*x7895))+((r00*x7901))+(((-1.0)*gconst142*r01*x7897))+(((-1.0)*r02*x7899)));
evalcond[5]=(((r10*x7901))+(((-1.0)*r12*x7899))+(((-1.0)*gconst142*r11*x7897))+(((-1.0)*sj0*x7898))+((sj0*x7895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7902=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7902;
j4eval[1]=IKsign(x7902);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7903=((1.0)*cj5);
IkReal x7904=((((-1.0)*r01*x7903))+(((-1.0)*r00*sj5)));
j4eval[0]=x7904;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x7903)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7904);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7905=cj5*cj5;
IkReal x7906=r11*r11;
IkReal x7907=(r11*sj5);
IkReal x7908=(cj5*r10);
IkReal x7909=(((x7905*(r10*r10)))+(r12*r12)+x7906+(((-1.0)*x7905*x7906))+(((-2.0)*x7907*x7908)));
j4eval[0]=x7909;
j4eval[1]=IKsign(x7909);
j4eval[2]=((IKabs(((((-1.0)*x7907))+x7908)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7910=cj5*cj5;
IkReal x7911=r11*r11;
IkReal x7912=(cj5*r10);
IkReal x7913=(r11*sj5);
CheckValue<IkReal> x7914=IKPowWithIntegerCheck(IKsign(((r12*r12)+x7911+((x7910*(r10*r10)))+(((-1.0)*x7910*x7911))+(((-2.0)*x7912*x7913)))),-1);
if(!x7914.valid){
continue;
}
CheckValue<IkReal> x7915 = IKatan2WithCheck(IkReal(((((-1.0)*x7913))+x7912)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7914.value)))+(x7915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7916=IKsin(j4);
IkReal x7917=IKcos(j4);
IkReal x7918=(cj5*r10);
IkReal x7919=(r01*sj5);
IkReal x7920=(cj5*r00);
IkReal x7921=(cj5*r20);
IkReal x7922=((1.0)*x7917);
IkReal x7923=((1.0)*x7916);
IkReal x7924=(sj5*x7916);
evalcond[0]=((((-1.0)*x7921*x7923))+(((-1.0)*r22*x7922))+((r21*x7924)));
evalcond[1]=((((-1.0)*x7920*x7923))+(((-1.0)*r02*x7922))+((x7916*x7919)));
evalcond[2]=((((-1.0)*r11*sj5*x7922))+(((-1.0)*r12*x7923))+((x7917*x7918)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7922))+((r11*x7924))+(((-1.0)*x7918*x7923)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7923))+(((-1.0)*r21*sj5*x7922))+((x7917*x7921)));
evalcond[5]=((((-1.0)*r02*x7923))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7917*x7920))+(((-1.0)*x7919*x7922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7925=((1.0)*cj5);
CheckValue<IkReal> x7926 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7925)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7926.valid){
continue;
}
CheckValue<IkReal> x7927=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7925)))),-1);
if(!x7927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7926.value)+(((1.5707963267949)*(x7927.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7928=IKsin(j4);
IkReal x7929=IKcos(j4);
IkReal x7930=(cj5*r10);
IkReal x7931=(r01*sj5);
IkReal x7932=(cj5*r00);
IkReal x7933=(cj5*r20);
IkReal x7934=((1.0)*x7929);
IkReal x7935=((1.0)*x7928);
IkReal x7936=(sj5*x7928);
evalcond[0]=(((r21*x7936))+(((-1.0)*r22*x7934))+(((-1.0)*x7933*x7935)));
evalcond[1]=((((-1.0)*x7932*x7935))+(((-1.0)*r02*x7934))+((x7928*x7931)));
evalcond[2]=((((-1.0)*r11*sj5*x7934))+(((-1.0)*r12*x7935))+((x7929*x7930)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7934))+((r11*x7936))+(((-1.0)*x7930*x7935)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7935))+(((-1.0)*r21*sj5*x7934))+((cj1*sj2))+((x7929*x7933)));
evalcond[5]=((((-1.0)*r02*x7935))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7929*x7932))+(((-1.0)*x7931*x7934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7937=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7937.valid){
continue;
}
CheckValue<IkReal> x7938 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7937.value)))+(x7938.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7939=IKsin(j4);
IkReal x7940=IKcos(j4);
IkReal x7941=(cj5*r10);
IkReal x7942=(r01*sj5);
IkReal x7943=(cj5*r00);
IkReal x7944=(cj5*r20);
IkReal x7945=((1.0)*x7940);
IkReal x7946=((1.0)*x7939);
IkReal x7947=(sj5*x7939);
evalcond[0]=(((r21*x7947))+(((-1.0)*r22*x7945))+(((-1.0)*x7944*x7946)));
evalcond[1]=((((-1.0)*r02*x7945))+((x7939*x7942))+(((-1.0)*x7943*x7946)));
evalcond[2]=((((-1.0)*r11*sj5*x7945))+(((-1.0)*r12*x7946))+((x7940*x7941)));
evalcond[3]=((1.0)+(((-1.0)*x7941*x7946))+((r11*x7947))+(((-1.0)*r12*x7945)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7946))+(((-1.0)*r21*sj5*x7945))+((cj1*sj2))+((x7940*x7944)));
evalcond[5]=((((-1.0)*r02*x7946))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7940*x7943))+(((-1.0)*x7942*x7945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7948=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7948;
j4eval[1]=IKsign(x7948);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7949=((1.0)*cj5);
IkReal x7950=((((-1.0)*r21*x7949))+(((-1.0)*r20*sj5)));
j4eval[0]=x7950;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x7949))+((r01*sj5))))));
j4eval[2]=IKsign(x7950);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7951=cj5*cj5;
IkReal x7952=r11*r11;
IkReal x7953=(cj5*r10);
IkReal x7954=(r11*sj5);
IkReal x7955=(((x7951*x7952))+(((-1.0)*x7952))+(((2.0)*x7953*x7954))+(((-1.0)*(r12*r12)))+(((-1.0)*x7951*(r10*r10))));
j4eval[0]=x7955;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7954))+x7953))));
j4eval[2]=IKsign(x7955);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7956=cj5*cj5;
IkReal x7957=r11*r11;
IkReal x7958=(cj5*r10);
IkReal x7959=(r11*sj5);
CheckValue<IkReal> x7960 = IKatan2WithCheck(IkReal(((((-1.0)*x7959))+x7958)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7960.valid){
continue;
}
CheckValue<IkReal> x7961=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7957))+(((-1.0)*(r12*r12)))+(((2.0)*x7958*x7959))+((x7956*x7957))+(((-1.0)*x7956*(r10*r10))))),-1);
if(!x7961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7960.value)+(((1.5707963267949)*(x7961.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7962=IKsin(j4);
IkReal x7963=IKcos(j4);
IkReal x7964=(cj5*r10);
IkReal x7965=(r01*sj5);
IkReal x7966=(cj5*r00);
IkReal x7967=(cj5*r20);
IkReal x7968=((1.0)*x7963);
IkReal x7969=((1.0)*x7962);
IkReal x7970=(sj5*x7962);
evalcond[0]=((((-1.0)*r22*x7968))+(((-1.0)*x7967*x7969))+((r21*x7970)));
evalcond[1]=((((-1.0)*x7966*x7969))+(((-1.0)*r02*x7968))+((x7962*x7965)));
evalcond[2]=(((x7963*x7964))+(((-1.0)*r11*sj5*x7968))+(((-1.0)*r12*x7969)));
evalcond[3]=((-1.0)+((r11*x7970))+(((-1.0)*x7964*x7969))+(((-1.0)*r12*x7968)));
evalcond[4]=(((x7963*x7967))+((cj2*sj1))+(((-1.0)*r22*x7969))+((cj1*sj2))+(((-1.0)*r21*sj5*x7968)));
evalcond[5]=(((x7963*x7966))+(((-1.0)*sj1*sj2))+(((-1.0)*x7965*x7968))+(((-1.0)*r02*x7969))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7971=((1.0)*cj5);
CheckValue<IkReal> x7972 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7972.valid){
continue;
}
CheckValue<IkReal> x7973=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7971))+(((-1.0)*r20*sj5)))),-1);
if(!x7973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7972.value)+(((1.5707963267949)*(x7973.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7974=IKsin(j4);
IkReal x7975=IKcos(j4);
IkReal x7976=(cj5*r10);
IkReal x7977=(r01*sj5);
IkReal x7978=(cj5*r00);
IkReal x7979=(cj5*r20);
IkReal x7980=((1.0)*x7975);
IkReal x7981=((1.0)*x7974);
IkReal x7982=(sj5*x7974);
evalcond[0]=((((-1.0)*r22*x7980))+(((-1.0)*x7979*x7981))+((r21*x7982)));
evalcond[1]=((((-1.0)*x7978*x7981))+((x7974*x7977))+(((-1.0)*r02*x7980)));
evalcond[2]=((((-1.0)*r12*x7981))+((x7975*x7976))+(((-1.0)*r11*sj5*x7980)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7980))+(((-1.0)*x7976*x7981))+((r11*x7982)));
evalcond[4]=((((-1.0)*r22*x7981))+((cj2*sj1))+((x7975*x7979))+(((-1.0)*r21*sj5*x7980))+((cj1*sj2)));
evalcond[5]=(((x7975*x7978))+(((-1.0)*sj1*sj2))+(((-1.0)*x7977*x7980))+((cj1*cj2))+(((-1.0)*r02*x7981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7983 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7983.valid){
continue;
}
CheckValue<IkReal> x7984=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7983.value)+(((1.5707963267949)*(x7984.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7985=IKsin(j4);
IkReal x7986=IKcos(j4);
IkReal x7987=(cj5*r10);
IkReal x7988=(r01*sj5);
IkReal x7989=(cj5*r00);
IkReal x7990=(cj5*r20);
IkReal x7991=((1.0)*x7986);
IkReal x7992=((1.0)*x7985);
IkReal x7993=(sj5*x7985);
evalcond[0]=((((-1.0)*x7990*x7992))+((r21*x7993))+(((-1.0)*r22*x7991)));
evalcond[1]=((((-1.0)*x7989*x7992))+(((-1.0)*r02*x7991))+((x7985*x7988)));
evalcond[2]=(((x7986*x7987))+(((-1.0)*r12*x7992))+(((-1.0)*r11*sj5*x7991)));
evalcond[3]=((-1.0)+((r11*x7993))+(((-1.0)*r12*x7991))+(((-1.0)*x7987*x7992)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7992))+((x7986*x7990))+(((-1.0)*r21*sj5*x7991)));
evalcond[5]=(((x7986*x7989))+(((-1.0)*sj1*sj2))+(((-1.0)*x7988*x7991))+(((-1.0)*r02*x7992))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7994=((-1.0)*r00);
IkReal x7996 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7996)==0){
continue;
}
IkReal x7995=pow(x7996,-0.5);
CheckValue<IkReal> x7997 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7994),IKFAST_ATAN2_MAGTHRESH);
if(!x7997.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7997.value));
IkReal gconst145=(r01*x7995);
IkReal gconst146=(x7994*x7995);
CheckValue<IkReal> x7998 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7998.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7998.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7999=((-1.0)*r00);
IkReal x8000=x7995;
CheckValue<IkReal> x8002 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7999),IKFAST_ATAN2_MAGTHRESH);
if(!x8002.valid){
continue;
}
IkReal x8001=((-1.0)*(x8002.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8001;
IkReal gconst144=x8001;
IkReal gconst145=(r01*x8000);
IkReal gconst146=(x7999*x8000);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8003=((1.0)*sj0);
IkReal x8004=((1.0)*gconst145);
CheckValue<IkReal> x8005=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8004))+(((-1.0)*gconst146*r21)))),-1);
if(!x8005.valid){
continue;
}
CheckValue<IkReal> x8006 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8003))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*gconst145*r11*x8003))+((gconst146*r10*sj0))+(((-1.0)*cj0*r01*x8004)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8005.value)))+(x8006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8007=IKsin(j4);
IkReal x8008=IKcos(j4);
IkReal x8009=(gconst146*r10);
IkReal x8010=(sj1*sj2);
IkReal x8011=(gconst146*r20);
IkReal x8012=(gconst146*r00);
IkReal x8013=((1.0)*x8008);
IkReal x8014=((1.0)*x8007);
IkReal x8015=(gconst145*x8007);
IkReal x8016=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x8011*x8014))+(((-1.0)*r22*x8013))+((r21*x8015)));
evalcond[1]=((((-1.0)*x8009*x8014))+cj0+((r11*x8015))+(((-1.0)*r12*x8013)));
evalcond[2]=((((-1.0)*x8012*x8014))+(((-1.0)*sj0))+(((-1.0)*r02*x8013))+((r01*x8015)));
evalcond[3]=((((-1.0)*r22*x8014))+((cj2*sj1))+((cj1*sj2))+((x8008*x8011))+(((-1.0)*gconst145*r21*x8013)));
evalcond[4]=((((-1.0)*r02*x8014))+((cj0*x8010))+((x8008*x8012))+(((-1.0)*cj0*x8016))+(((-1.0)*gconst145*r01*x8013)));
evalcond[5]=(((x8008*x8009))+(((-1.0)*gconst145*r11*x8013))+((sj0*x8010))+(((-1.0)*sj0*x8016))+(((-1.0)*r12*x8014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8017=((1.0)*gconst146);
CheckValue<IkReal> x8018 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst145*r21*sj0))+(((-1.0)*r20*sj0*x8017)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8018.valid){
continue;
}
CheckValue<IkReal> x8019=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r10))+(((-1.0)*r11*x8017)))),-1);
if(!x8019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8018.value)+(((1.5707963267949)*(x8019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8020=IKsin(j4);
IkReal x8021=IKcos(j4);
IkReal x8022=(gconst146*r10);
IkReal x8023=(sj1*sj2);
IkReal x8024=(gconst146*r20);
IkReal x8025=(gconst146*r00);
IkReal x8026=((1.0)*x8021);
IkReal x8027=((1.0)*x8020);
IkReal x8028=(gconst145*x8020);
IkReal x8029=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8028))+(((-1.0)*r22*x8026))+(((-1.0)*x8024*x8027)));
evalcond[1]=((((-1.0)*r12*x8026))+cj0+(((-1.0)*x8022*x8027))+((r11*x8028)));
evalcond[2]=((((-1.0)*x8025*x8027))+(((-1.0)*sj0))+(((-1.0)*r02*x8026))+((r01*x8028)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8026))+((cj1*sj2))+(((-1.0)*r22*x8027))+((x8021*x8024)));
evalcond[4]=((((-1.0)*r02*x8027))+((cj0*x8023))+(((-1.0)*gconst145*r01*x8026))+(((-1.0)*cj0*x8029))+((x8021*x8025)));
evalcond[5]=((((-1.0)*r12*x8027))+(((-1.0)*sj0*x8029))+((sj0*x8023))+(((-1.0)*gconst145*r11*x8026))+((x8021*x8022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8030=((-1.0)*r01);
IkReal x8032 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8032)==0){
continue;
}
IkReal x8031=pow(x8032,-0.5);
CheckValue<IkReal> x8033 = IKatan2WithCheck(IkReal(x8030),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8033.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8033.value))));
IkReal gconst148=(x8030*x8031);
IkReal gconst149=((1.0)*r00*x8031);
CheckValue<IkReal> x8034 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8034.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8034.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8035=((-1.0)*r01);
CheckValue<IkReal> x8038 = IKatan2WithCheck(IkReal(x8035),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8038.valid){
continue;
}
IkReal x8036=((1.0)*(x8038.value));
IkReal x8037=x8031;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8036)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8036)));
IkReal gconst148=(x8035*x8037);
IkReal gconst149=((1.0)*r00*x8037);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8039=((-1.0)*r01);
CheckValue<IkReal> x8042 = IKatan2WithCheck(IkReal(x8039),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8042.valid){
continue;
}
IkReal x8040=((1.0)*(x8042.value));
IkReal x8041=x8031;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8040)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8040)));
IkReal gconst148=(x8039*x8041);
IkReal gconst149=((1.0)*r00*x8041);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8043=((-1.0)*r01);
CheckValue<IkReal> x8046 = IKatan2WithCheck(IkReal(x8043),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8046.valid){
continue;
}
IkReal x8044=((1.0)*(x8046.value));
IkReal x8045=x8031;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8044)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8044)));
IkReal gconst148=(x8043*x8045);
IkReal gconst149=((1.0)*r00*x8045);
IkReal x8047=r02*r02;
IkReal x8048=(r12*sj0);
IkReal x8049=((1.0)*cj0);
IkReal x8050=x8031;
j4eval[0]=((IKabs(((((-1.0)*x8048))+(((-1.0)*r02*x8049)))))+(IKabs((((cj0*x8047*x8050))+(((-1.0)*x8049*x8050))+((r02*x8048*x8050))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8051=((1.0)*sj0);
IkReal x8052=((1.0)*gconst148);
CheckValue<IkReal> x8053 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8051))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x8052))+((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8053.valid){
continue;
}
CheckValue<IkReal> x8054=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8052)))),-1);
if(!x8054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8053.value)+(((1.5707963267949)*(x8054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8055=IKsin(j4);
IkReal x8056=IKcos(j4);
IkReal x8057=(gconst148*r11);
IkReal x8058=(sj1*sj2);
IkReal x8059=((1.0)*x8056);
IkReal x8060=(gconst149*x8056);
IkReal x8061=(gconst148*x8055);
IkReal x8062=((1.0)*cj1*cj2);
IkReal x8063=((1.0)*x8055);
evalcond[0]=(((r21*x8061))+(((-1.0)*gconst149*r20*x8063))+(((-1.0)*r22*x8059)));
evalcond[1]=((((-1.0)*r12*x8059))+cj0+((x8055*x8057))+(((-1.0)*gconst149*r10*x8063)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8061))+(((-1.0)*r02*x8059))+(((-1.0)*gconst149*r00*x8063)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8059))+((cj1*sj2))+((r20*x8060))+(((-1.0)*r22*x8063)));
evalcond[4]=((((-1.0)*cj0*x8062))+((r00*x8060))+(((-1.0)*gconst148*r01*x8059))+((cj0*x8058))+(((-1.0)*r02*x8063)));
evalcond[5]=(((r10*x8060))+(((-1.0)*sj0*x8062))+(((-1.0)*x8057*x8059))+((sj0*x8058))+(((-1.0)*r12*x8063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8064=((1.0)*gconst149);
CheckValue<IkReal> x8065=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8064))+(((-1.0)*gconst148*r10)))),-1);
if(!x8065.valid){
continue;
}
CheckValue<IkReal> x8066 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8064))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8065.value)))+(x8066.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8067=IKsin(j4);
IkReal x8068=IKcos(j4);
IkReal x8069=(gconst148*r11);
IkReal x8070=(sj1*sj2);
IkReal x8071=((1.0)*x8068);
IkReal x8072=(gconst149*x8068);
IkReal x8073=(gconst148*x8067);
IkReal x8074=((1.0)*cj1*cj2);
IkReal x8075=((1.0)*x8067);
evalcond[0]=((((-1.0)*gconst149*r20*x8075))+((r21*x8073))+(((-1.0)*r22*x8071)));
evalcond[1]=(cj0+((x8067*x8069))+(((-1.0)*gconst149*r10*x8075))+(((-1.0)*r12*x8071)));
evalcond[2]=((((-1.0)*gconst149*r00*x8075))+(((-1.0)*sj0))+(((-1.0)*r02*x8071))+((r01*x8073)));
evalcond[3]=(((cj2*sj1))+((r20*x8072))+((cj1*sj2))+(((-1.0)*r22*x8075))+(((-1.0)*gconst148*r21*x8071)));
evalcond[4]=((((-1.0)*r02*x8075))+(((-1.0)*cj0*x8074))+((r00*x8072))+(((-1.0)*gconst148*r01*x8071))+((cj0*x8070)));
evalcond[5]=(((r10*x8072))+((sj0*x8070))+(((-1.0)*x8069*x8071))+(((-1.0)*sj0*x8074))+(((-1.0)*r12*x8075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8076=((1.0)*gconst149);
CheckValue<IkReal> x8077=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8076))+(((-1.0)*gconst148*r00)))),-1);
if(!x8077.valid){
continue;
}
CheckValue<IkReal> x8078 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8076)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8077.value)))+(x8078.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8079=IKsin(j4);
IkReal x8080=IKcos(j4);
IkReal x8081=(gconst148*r11);
IkReal x8082=(sj1*sj2);
IkReal x8083=((1.0)*x8080);
IkReal x8084=(gconst149*x8080);
IkReal x8085=(gconst148*x8079);
IkReal x8086=((1.0)*cj1*cj2);
IkReal x8087=((1.0)*x8079);
evalcond[0]=((((-1.0)*gconst149*r20*x8087))+((r21*x8085))+(((-1.0)*r22*x8083)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8087))+((x8079*x8081))+(((-1.0)*r12*x8083)));
evalcond[2]=((((-1.0)*gconst149*r00*x8087))+(((-1.0)*r02*x8083))+(((-1.0)*sj0))+((r01*x8085)));
evalcond[3]=((((-1.0)*gconst148*r21*x8083))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8087))+((r20*x8084)));
evalcond[4]=((((-1.0)*r02*x8087))+(((-1.0)*cj0*x8086))+((r00*x8084))+((cj0*x8082))+(((-1.0)*gconst148*r01*x8083)));
evalcond[5]=(((r10*x8084))+((sj0*x8082))+(((-1.0)*sj0*x8086))+(((-1.0)*x8081*x8083))+(((-1.0)*r12*x8087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8088=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8088;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8088);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8089=((1.0)*cj5);
IkReal x8090=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8089)));
j4eval[0]=x8090;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8089))))));
j4eval[2]=IKsign(x8090);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8091=cj5*cj5;
IkReal x8092=r01*r01;
IkReal x8093=(r01*sj5);
IkReal x8094=(cj5*r00);
IkReal x8095=((((-1.0)*x8091*(r00*r00)))+(((-1.0)*x8092))+((x8091*x8092))+(((-1.0)*(r02*r02)))+(((2.0)*x8093*x8094)));
j4eval[0]=x8095;
j4eval[1]=IKsign(x8095);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8093))+x8094))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8096=cj5*cj5;
IkReal x8097=r01*r01;
IkReal x8098=(r01*sj5);
IkReal x8099=(cj5*r00);
CheckValue<IkReal> x8100 = IKatan2WithCheck(IkReal(((((-1.0)*x8098))+x8099)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8100.valid){
continue;
}
CheckValue<IkReal> x8101=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8097))+(((2.0)*x8098*x8099))+(((-1.0)*(r02*r02)))+(((-1.0)*x8096*(r00*r00)))+((x8096*x8097)))),-1);
if(!x8101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8100.value)+(((1.5707963267949)*(x8101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8102=IKsin(j4);
IkReal x8103=IKcos(j4);
IkReal x8104=(cj5*r10);
IkReal x8105=(r01*sj5);
IkReal x8106=(cj5*r00);
IkReal x8107=(cj5*r20);
IkReal x8108=((1.0)*x8103);
IkReal x8109=((1.0)*x8102);
IkReal x8110=(sj5*x8102);
evalcond[0]=((((-1.0)*x8107*x8109))+((r21*x8110))+(((-1.0)*r22*x8108)));
evalcond[1]=((((-1.0)*x8104*x8109))+((r11*x8110))+(((-1.0)*r12*x8108)));
evalcond[2]=((((-1.0)*x8105*x8108))+((x8103*x8106))+(((-1.0)*r02*x8109)));
evalcond[3]=((-1.0)+((x8102*x8105))+(((-1.0)*x8106*x8109))+(((-1.0)*r02*x8108)));
evalcond[4]=((((-1.0)*r21*sj5*x8108))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8109))+((x8103*x8107)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8103*x8104))+(((-1.0)*r11*sj5*x8108))+(((-1.0)*r12*x8109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8111=((1.0)*cj5);
CheckValue<IkReal> x8112 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8111))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8112.valid){
continue;
}
CheckValue<IkReal> x8113=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8111))+(((-1.0)*r10*sj5)))),-1);
if(!x8113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8112.value)+(((1.5707963267949)*(x8113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8114=IKsin(j4);
IkReal x8115=IKcos(j4);
IkReal x8116=(cj5*r10);
IkReal x8117=(r01*sj5);
IkReal x8118=(cj5*r00);
IkReal x8119=(cj5*r20);
IkReal x8120=((1.0)*x8115);
IkReal x8121=((1.0)*x8114);
IkReal x8122=(sj5*x8114);
evalcond[0]=(((r21*x8122))+(((-1.0)*r22*x8120))+(((-1.0)*x8119*x8121)));
evalcond[1]=((((-1.0)*r12*x8120))+(((-1.0)*x8116*x8121))+((r11*x8122)));
evalcond[2]=(((x8115*x8118))+(((-1.0)*x8117*x8120))+(((-1.0)*r02*x8121)));
evalcond[3]=((-1.0)+((x8114*x8117))+(((-1.0)*r02*x8120))+(((-1.0)*x8118*x8121)));
evalcond[4]=(((x8115*x8119))+((cj2*sj1))+(((-1.0)*r21*sj5*x8120))+((cj1*sj2))+(((-1.0)*r22*x8121)));
evalcond[5]=((((-1.0)*r11*sj5*x8120))+((x8115*x8116))+(((-1.0)*r12*x8121))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8123=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8123.valid){
continue;
}
CheckValue<IkReal> x8124 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8123.value)))+(x8124.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8125=IKsin(j4);
IkReal x8126=IKcos(j4);
IkReal x8127=(cj5*r10);
IkReal x8128=(r01*sj5);
IkReal x8129=(cj5*r00);
IkReal x8130=(cj5*r20);
IkReal x8131=((1.0)*x8126);
IkReal x8132=((1.0)*x8125);
IkReal x8133=(sj5*x8125);
evalcond[0]=((((-1.0)*r22*x8131))+(((-1.0)*x8130*x8132))+((r21*x8133)));
evalcond[1]=(((r11*x8133))+(((-1.0)*r12*x8131))+(((-1.0)*x8127*x8132)));
evalcond[2]=((((-1.0)*r02*x8132))+(((-1.0)*x8128*x8131))+((x8126*x8129)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8131))+((x8125*x8128))+(((-1.0)*x8129*x8132)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8132))+(((-1.0)*r21*sj5*x8131))+((cj1*sj2))+((x8126*x8130)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8132))+(((-1.0)*r11*sj5*x8131))+((x8126*x8127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8134=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8134;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8134);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8135=((1.0)*cj5);
IkReal x8136=((((-1.0)*r21*x8135))+(((-1.0)*r20*sj5)));
j4eval[0]=x8136;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8135))))));
j4eval[2]=IKsign(x8136);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8137=cj5*cj5;
IkReal x8138=r01*r01;
IkReal x8139=(cj5*r00);
IkReal x8140=(r01*sj5);
IkReal x8141=((((-2.0)*x8139*x8140))+(((-1.0)*x8137*x8138))+((x8137*(r00*r00)))+(r02*r02)+x8138);
j4eval[0]=x8141;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8140))+x8139))));
j4eval[2]=IKsign(x8141);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8142=cj5*cj5;
IkReal x8143=r01*r01;
IkReal x8144=(r01*sj5);
IkReal x8145=(cj5*r00);
CheckValue<IkReal> x8146=IKPowWithIntegerCheck(IKsign((((x8142*(r00*r00)))+(((-1.0)*x8142*x8143))+(((-2.0)*x8144*x8145))+(r02*r02)+x8143)),-1);
if(!x8146.valid){
continue;
}
CheckValue<IkReal> x8147 = IKatan2WithCheck(IkReal(((((-1.0)*x8144))+x8145)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8146.value)))+(x8147.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8148=IKsin(j4);
IkReal x8149=IKcos(j4);
IkReal x8150=(cj5*r10);
IkReal x8151=(r01*sj5);
IkReal x8152=(cj5*r00);
IkReal x8153=(cj5*r20);
IkReal x8154=((1.0)*x8149);
IkReal x8155=((1.0)*x8148);
IkReal x8156=(sj5*x8148);
evalcond[0]=((((-1.0)*x8153*x8155))+(((-1.0)*r22*x8154))+((r21*x8156)));
evalcond[1]=((((-1.0)*x8150*x8155))+((r11*x8156))+(((-1.0)*r12*x8154)));
evalcond[2]=((((-1.0)*r02*x8155))+((x8149*x8152))+(((-1.0)*x8151*x8154)));
evalcond[3]=((1.0)+((x8148*x8151))+(((-1.0)*r02*x8154))+(((-1.0)*x8152*x8155)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8149*x8153))+(((-1.0)*r21*sj5*x8154))+(((-1.0)*r22*x8155)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8154))+((x8149*x8150))+((cj1*cj2))+(((-1.0)*r12*x8155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8157=((1.0)*cj5);
CheckValue<IkReal> x8158 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8157))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8158.valid){
continue;
}
CheckValue<IkReal> x8159=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8157))+(((-1.0)*r20*sj5)))),-1);
if(!x8159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8158.value)+(((1.5707963267949)*(x8159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8160=IKsin(j4);
IkReal x8161=IKcos(j4);
IkReal x8162=(cj5*r10);
IkReal x8163=(r01*sj5);
IkReal x8164=(cj5*r00);
IkReal x8165=(cj5*r20);
IkReal x8166=((1.0)*x8161);
IkReal x8167=((1.0)*x8160);
IkReal x8168=(sj5*x8160);
evalcond[0]=((((-1.0)*x8165*x8167))+((r21*x8168))+(((-1.0)*r22*x8166)));
evalcond[1]=(((r11*x8168))+(((-1.0)*x8162*x8167))+(((-1.0)*r12*x8166)));
evalcond[2]=((((-1.0)*r02*x8167))+(((-1.0)*x8163*x8166))+((x8161*x8164)));
evalcond[3]=((1.0)+((x8160*x8163))+(((-1.0)*r02*x8166))+(((-1.0)*x8164*x8167)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8166))+((cj1*sj2))+((x8161*x8165))+(((-1.0)*r22*x8167)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x8167))+((x8161*x8162))+(((-1.0)*r11*sj5*x8166))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8169 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8169.valid){
continue;
}
CheckValue<IkReal> x8170=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8169.value)+(((1.5707963267949)*(x8170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8171=IKsin(j4);
IkReal x8172=IKcos(j4);
IkReal x8173=(cj5*r10);
IkReal x8174=(r01*sj5);
IkReal x8175=(cj5*r00);
IkReal x8176=(cj5*r20);
IkReal x8177=((1.0)*x8172);
IkReal x8178=((1.0)*x8171);
IkReal x8179=(sj5*x8171);
evalcond[0]=((((-1.0)*x8176*x8178))+(((-1.0)*r22*x8177))+((r21*x8179)));
evalcond[1]=((((-1.0)*r12*x8177))+((r11*x8179))+(((-1.0)*x8173*x8178)));
evalcond[2]=((((-1.0)*x8174*x8177))+(((-1.0)*r02*x8178))+((x8172*x8175)));
evalcond[3]=((1.0)+(((-1.0)*x8175*x8178))+(((-1.0)*r02*x8177))+((x8171*x8174)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8178))+((x8172*x8176))+(((-1.0)*r21*sj5*x8177)));
evalcond[5]=((((-1.0)*r12*x8178))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x8172*x8173))+(((-1.0)*r11*sj5*x8177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8180=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8180);
rxp1_1=(px*r21);
rxp1_2=(r11*x8180);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8181=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8181);
rxp1_1=(px*r21);
rxp1_2=(r11*x8181);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8182=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8182);
rxp1_1=(px*r21);
rxp1_2=(r11*x8182);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8185=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8185.valid){
continue;
}
IkReal x8183=x8185.value;
IkReal x8184=(sj0*x8183);
cj4array[0]=((((-1.0)*sj1*sj2*x8184))+((cj1*cj2*x8184)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8186=IKsin(j4);
IkReal x8187=IKcos(j4);
IkReal x8188=(r21*sj5);
IkReal x8189=(cj5*r20);
IkReal x8190=((1.0)*x8186);
IkReal x8191=((1.0)*x8187);
evalcond[0]=((-1.0)*r02*x8186);
evalcond[1]=((((-1.0)*r02*x8191))+(((-1.0)*sj0)));
evalcond[2]=(((x8186*x8188))+(((-1.0)*x8189*x8190)));
evalcond[3]=(((r11*sj5*x8186))+(((-1.0)*cj5*r10*x8190)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8188*x8191))+((x8187*x8189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8194=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8194.valid){
continue;
}
IkReal x8192=x8194.value;
IkReal x8193=((1.0)*x8192);
cj4array[0]=((((-1.0)*cj2*sj1*x8193))+(((-1.0)*cj1*sj2*x8193)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8195=IKsin(j4);
IkReal x8196=IKcos(j4);
IkReal x8197=(r11*sj5);
IkReal x8198=((1.0)*sj0);
IkReal x8199=((1.0)*x8196);
IkReal x8200=((1.0)*cj5*x8195);
evalcond[0]=((-1.0)*r02*x8195);
evalcond[1]=((((-1.0)*r02*x8199))+(((-1.0)*x8198)));
evalcond[2]=(((r21*sj5*x8195))+(((-1.0)*r20*x8200)));
evalcond[3]=((((-1.0)*r10*x8200))+((x8195*x8197)));
evalcond[4]=((((-1.0)*x8197*x8199))+(((-1.0)*cj1*cj2*x8198))+((sj0*sj1*sj2))+((cj5*r10*x8196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8201=IKPowWithIntegerCheck(r02,-1);
if(!x8201.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8201.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8202=IKsin(j4);
IkReal x8203=IKcos(j4);
IkReal x8204=(cj5*x8203);
IkReal x8205=(sj5*x8202);
IkReal x8206=((1.0)*sj5*x8203);
IkReal x8207=((1.0)*cj5*x8202);
evalcond[0]=((-1.0)*r02*x8202);
evalcond[1]=(((r21*x8205))+(((-1.0)*r20*x8207)));
evalcond[2]=((((-1.0)*r10*x8207))+((r11*x8205)));
evalcond[3]=((((-1.0)*r21*x8206))+((cj2*sj1))+((cj1*sj2))+((r20*x8204)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*r11*x8206))+((sj0*sj1*sj2))+((r10*x8204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8208=((1.0)*sj0);
IkReal x8209=((1.0)*cj0);
CheckValue<IkReal> x8210=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8210.valid){
continue;
}
CheckValue<IkReal> x8211 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8209))+(((-1.0)*r12*x8208)))),IkReal(((((-1.0)*r01*sj5*x8209))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8208)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8210.value)))+(x8211.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8212=IKsin(j4);
IkReal x8213=IKcos(j4);
IkReal x8214=(cj5*r10);
IkReal x8215=(sj1*sj2);
IkReal x8216=(r01*sj5);
IkReal x8217=(cj5*r00);
IkReal x8218=(cj5*r20);
IkReal x8219=((1.0)*x8213);
IkReal x8220=((1.0)*cj1*cj2);
IkReal x8221=((1.0)*x8212);
IkReal x8222=(sj5*x8212);
evalcond[0]=((((-1.0)*x8218*x8221))+(((-1.0)*r22*x8219))+((r21*x8222)));
evalcond[1]=(cj0+((r11*x8222))+(((-1.0)*r12*x8219))+(((-1.0)*x8214*x8221)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8219))+((x8212*x8216))+(((-1.0)*x8217*x8221)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8219))+(((-1.0)*r22*x8221))+((x8213*x8218)));
evalcond[4]=(((cj0*x8215))+(((-1.0)*r02*x8221))+(((-1.0)*x8216*x8219))+(((-1.0)*cj0*x8220))+((x8213*x8217)));
evalcond[5]=((((-1.0)*r12*x8221))+(((-1.0)*sj0*x8220))+(((-1.0)*r11*sj5*x8219))+((x8213*x8214))+((sj0*x8215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8223=((1.0)*cj5);
CheckValue<IkReal> x8224=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8223)))),-1);
if(!x8224.valid){
continue;
}
CheckValue<IkReal> x8225 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8223))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8224.value)))+(x8225.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8226=IKsin(j4);
IkReal x8227=IKcos(j4);
IkReal x8228=(cj5*r10);
IkReal x8229=(sj1*sj2);
IkReal x8230=(r01*sj5);
IkReal x8231=(cj5*r00);
IkReal x8232=(cj5*r20);
IkReal x8233=((1.0)*x8227);
IkReal x8234=((1.0)*cj1*cj2);
IkReal x8235=((1.0)*x8226);
IkReal x8236=(sj5*x8226);
evalcond[0]=(((r21*x8236))+(((-1.0)*r22*x8233))+(((-1.0)*x8232*x8235)));
evalcond[1]=((((-1.0)*x8228*x8235))+cj0+((r11*x8236))+(((-1.0)*r12*x8233)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8233))+(((-1.0)*x8231*x8235))+((x8226*x8230)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8233))+(((-1.0)*r22*x8235))+((x8227*x8232)));
evalcond[4]=(((cj0*x8229))+(((-1.0)*r02*x8235))+(((-1.0)*cj0*x8234))+((x8227*x8231))+(((-1.0)*x8230*x8233)));
evalcond[5]=((((-1.0)*r11*sj5*x8233))+(((-1.0)*r12*x8235))+(((-1.0)*sj0*x8234))+((sj0*x8229))+((x8227*x8228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8237=((1.0)*cj5);
CheckValue<IkReal> x8238 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8237)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8238.valid){
continue;
}
CheckValue<IkReal> x8239=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8237)))),-1);
if(!x8239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8238.value)+(((1.5707963267949)*(x8239.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8240=IKsin(j4);
IkReal x8241=IKcos(j4);
IkReal x8242=(cj5*r10);
IkReal x8243=(sj1*sj2);
IkReal x8244=(r01*sj5);
IkReal x8245=(cj5*r00);
IkReal x8246=(cj5*r20);
IkReal x8247=((1.0)*x8241);
IkReal x8248=((1.0)*cj1*cj2);
IkReal x8249=((1.0)*x8240);
IkReal x8250=(sj5*x8240);
evalcond[0]=(((r21*x8250))+(((-1.0)*r22*x8247))+(((-1.0)*x8246*x8249)));
evalcond[1]=(cj0+(((-1.0)*x8242*x8249))+((r11*x8250))+(((-1.0)*r12*x8247)));
evalcond[2]=((((-1.0)*x8245*x8249))+(((-1.0)*sj0))+((x8240*x8244))+(((-1.0)*r02*x8247)));
evalcond[3]=(((cj2*sj1))+((x8241*x8246))+((cj1*sj2))+(((-1.0)*r22*x8249))+(((-1.0)*r21*sj5*x8247)));
evalcond[4]=((((-1.0)*x8244*x8247))+((x8241*x8245))+(((-1.0)*cj0*x8248))+((cj0*x8243))+(((-1.0)*r02*x8249)));
evalcond[5]=(((x8241*x8242))+(((-1.0)*sj0*x8248))+(((-1.0)*r11*sj5*x8247))+((sj0*x8243))+(((-1.0)*r12*x8249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8251=cj5*cj5;
IkReal x8252=r21*r21;
IkReal x8253=(cj2*sj1);
IkReal x8254=(cj1*sj2);
IkReal x8255=(r21*sj5);
IkReal x8256=((1.0)*cj5*r20);
CheckValue<IkReal> x8257 = IKatan2WithCheck(IkReal((((r22*x8253))+((r22*x8254)))),IkReal((((x8254*x8255))+(((-1.0)*x8254*x8256))+((x8253*x8255))+(((-1.0)*x8253*x8256)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8257.valid){
continue;
}
CheckValue<IkReal> x8258=IKPowWithIntegerCheck(IKsign(((r22*r22)+((x8251*(r20*r20)))+(((-2.0)*cj5*r20*x8255))+(((-1.0)*x8251*x8252))+x8252)),-1);
if(!x8258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8257.value)+(((1.5707963267949)*(x8258.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8259=IKsin(j4);
IkReal x8260=IKcos(j4);
IkReal x8261=(r21*sj5);
IkReal x8262=(cj5*r20);
IkReal x8263=((1.0)*x8260);
IkReal x8264=((1.0)*x8259);
evalcond[0]=((((-1.0)*x8262*x8264))+(((-1.0)*r22*x8263))+((x8259*x8261)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*x8261*x8263))+((cj1*sj2))+(((-1.0)*r22*x8264))+((x8260*x8262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8265=(cj5*sj4);
IkReal x8266=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8266))+(((-1.0)*r00*x8265)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x8266))+((r10*x8265))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8266))+(((-1.0)*r00*x8265))))+IKsqr(((((-1.0)*r11*x8266))+((r10*x8265))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8266))+(((-1.0)*r00*x8265))), ((((-1.0)*r11*x8266))+((r10*x8265))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8267=IKcos(j0);
IkReal x8268=IKsin(j0);
IkReal x8269=(cj4*cj5);
IkReal x8270=((0.1)*sj5);
IkReal x8271=((0.392)*sj1);
IkReal x8272=(cj5*r11);
IkReal x8273=((1.0)*cj1);
IkReal x8274=(r11*sj5);
IkReal x8275=((1.0)*sj5);
IkReal x8276=((1.0)*sj4);
IkReal x8277=((0.392)*cj1);
IkReal x8278=((1.0)*sj1);
IkReal x8279=(cj5*r01);
IkReal x8280=((0.425)*cj1);
IkReal x8281=((1.0)*cj4);
IkReal x8282=(sj2*x8268);
IkReal x8283=(sj2*x8267);
IkReal x8284=(cj2*x8267);
IkReal x8285=(cj2*x8268);
evalcond[0]=((((-1.0)*cj5*r10*x8276))+(((-1.0)*r12*x8281))+((sj4*x8274))+x8267);
evalcond[1]=((((-1.0)*r02*x8281))+((r01*sj4*sj5))+(((-1.0)*cj5*r00*x8276))+(((-1.0)*x8268)));
evalcond[2]=((((-1.0)*x8278*x8284))+(((-1.0)*r00*x8275))+(((-1.0)*x8279))+(((-1.0)*x8273*x8283)));
evalcond[3]=((((-1.0)*r10*x8275))+(((-1.0)*x8278*x8285))+(((-1.0)*x8272))+(((-1.0)*x8273*x8282)));
evalcond[4]=((((-1.0)*cj4*r01*x8275))+((sj1*x8283))+(((-1.0)*r02*x8276))+((r00*x8269))+(((-1.0)*x8273*x8284)));
evalcond[5]=(((sj1*x8282))+(((-1.0)*r12*x8276))+(((-1.0)*x8274*x8281))+((r10*x8269))+(((-1.0)*x8273*x8285)));
evalcond[6]=((((-1.0)*x8271*x8283))+((x8277*x8284))+((x8267*x8280))+(((-1.0)*px))+(((-0.1)*x8279))+(((-1.0)*r00*x8270))+(((-0.134)*x8268)));
evalcond[7]=((((-1.0)*x8271*x8282))+((x8277*x8285))+((x8268*x8280))+(((-1.0)*py))+(((-0.1)*x8272))+(((-1.0)*r10*x8270))+(((0.134)*x8267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8286 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8286.valid){
continue;
}
CheckValue<IkReal> x8287=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8287.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8286.value)+(((1.5707963267949)*(x8287.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8288=IKcos(j0);
IkReal x8289=IKsin(j0);
IkReal x8290=(r00*sj5);
IkReal x8291=(cj5*r11);
IkReal x8292=(r10*sj5);
IkReal x8293=((1.0)*cj2);
IkReal x8294=(cj5*r01);
IkReal x8295=((0.392)*sj2);
IkReal x8296=((0.425)*cj1);
IkReal x8297=((1.0)*cj1*sj2);
IkReal x8298=((0.392)*cj1*cj2);
IkReal x8299=(sj1*x8288);
IkReal x8300=(sj1*x8289);
evalcond[0]=((((-1.0)*x8294))+(((-1.0)*x8290))+(((-1.0)*x8293*x8299))+(((-1.0)*x8288*x8297)));
evalcond[1]=((((-1.0)*x8292))+(((-1.0)*x8291))+(((-1.0)*x8289*x8297))+(((-1.0)*x8293*x8300)));
evalcond[2]=(((x8288*x8298))+((x8288*x8296))+(((-1.0)*px))+(((-1.0)*x8295*x8299))+(((-0.1)*x8294))+(((-0.1)*x8290))+(((-0.134)*x8289)));
evalcond[3]=((((-1.0)*x8295*x8300))+((x8289*x8298))+((x8289*x8296))+(((0.134)*x8288))+(((-1.0)*py))+(((-0.1)*x8292))+(((-0.1)*x8291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8301=((1.0)*cj5);
IkReal x8302=((((-1.0)*r01*x8301))+(((-1.0)*r00*sj5)));
j4eval[0]=x8302;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8301)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8302);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8303=((1.0)*cj5);
IkReal x8304=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8303)));
j4eval[0]=x8304;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x8303))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x8304);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8305=((1.0)*sj0);
IkReal x8306=((1.0)*cj0);
IkReal x8307=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8307;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8306))+(((-1.0)*r11*sj5*x8305)))))+(IKabs(((((-1.0)*r12*x8305))+(((-1.0)*r02*x8306))))));
j4eval[2]=IKsign(x8307);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8308=((-1.0)*r20);
IkReal x8310 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8310)==0){
continue;
}
IkReal x8309=pow(x8310,-0.5);
CheckValue<IkReal> x8311 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8308),IKFAST_ATAN2_MAGTHRESH);
if(!x8311.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8311.value));
IkReal gconst133=(r21*x8309);
IkReal gconst134=(x8308*x8309);
CheckValue<IkReal> x8312 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8312.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8312.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8313=((-1.0)*r20);
IkReal x8314=x8309;
CheckValue<IkReal> x8316 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8313),IKFAST_ATAN2_MAGTHRESH);
if(!x8316.valid){
continue;
}
IkReal x8315=((-1.0)*(x8316.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8315;
IkReal gconst132=x8315;
IkReal gconst133=(r21*x8314);
IkReal gconst134=(x8313*x8314);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8317=((-1.0)*r20);
IkReal x8318=x8309;
CheckValue<IkReal> x8320 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8317),IKFAST_ATAN2_MAGTHRESH);
if(!x8320.valid){
continue;
}
IkReal x8319=((-1.0)*(x8320.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8319;
IkReal gconst132=x8319;
IkReal gconst133=(r21*x8318);
IkReal gconst134=(x8317*x8318);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8321=((-1.0)*r20);
IkReal x8322=x8309;
CheckValue<IkReal> x8324 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8321),IKFAST_ATAN2_MAGTHRESH);
if(!x8324.valid){
continue;
}
IkReal x8323=((-1.0)*(x8324.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8323;
IkReal gconst132=x8323;
IkReal gconst133=(r21*x8322);
IkReal gconst134=(x8321*x8322);
IkReal x8325=r22*r22;
CheckValue<IkReal> x8328=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8325))),-1);
if(!x8328.valid){
continue;
}
IkReal x8326=x8328.value;
IkReal x8327=(x8325+((x8326*(r20*r20*r20*r20)))+(((2.0)*x8326*(r20*r20)*(r21*r21)))+((x8326*(r21*r21*r21*r21))));
j4eval[0]=x8327;
j4eval[1]=IKsign(x8327);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8329=(gconst133*r21);
IkReal x8330=(cj1*sj2);
IkReal x8331=(gconst134*r20);
IkReal x8332=(cj2*sj1);
CheckValue<IkReal> x8333=IKPowWithIntegerCheck(IKsign(((x8329*x8329)+(r22*r22)+(x8331*x8331)+(((-2.0)*x8329*x8331)))),-1);
if(!x8333.valid){
continue;
}
CheckValue<IkReal> x8334 = IKatan2WithCheck(IkReal((((r22*x8332))+((r22*x8330)))),IkReal((((x8329*x8330))+((x8329*x8332))+(((-1.0)*x8330*x8331))+(((-1.0)*x8331*x8332)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8333.value)))+(x8334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8335=IKsin(j4);
IkReal x8336=IKcos(j4);
IkReal x8337=(sj1*sj2);
IkReal x8338=(gconst133*r11);
IkReal x8339=(gconst133*r21);
IkReal x8340=(gconst133*r01);
IkReal x8341=((1.0)*x8336);
IkReal x8342=(gconst134*x8336);
IkReal x8343=((1.0)*x8335);
IkReal x8344=((1.0)*cj1*cj2);
evalcond[0]=(((x8335*x8339))+(((-1.0)*r22*x8341))+(((-1.0)*gconst134*r20*x8343)));
evalcond[1]=(((x8335*x8338))+(((-1.0)*gconst134*r10*x8343))+cj0+(((-1.0)*r12*x8341)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8341))+((x8335*x8340))+(((-1.0)*gconst134*r00*x8343)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8339*x8341))+((cj1*sj2))+((r20*x8342))+(((-1.0)*r22*x8343)));
evalcond[4]=((((-1.0)*r02*x8343))+(((-1.0)*x8340*x8341))+(((-1.0)*cj0*x8344))+((cj0*x8337))+((r00*x8342)));
evalcond[5]=((((-1.0)*x8338*x8341))+(((-1.0)*r12*x8343))+((sj0*x8337))+(((-1.0)*sj0*x8344))+((r10*x8342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8345=((1.0)*gconst134);
CheckValue<IkReal> x8346=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8345))+(((-1.0)*gconst133*r10)))),-1);
if(!x8346.valid){
continue;
}
CheckValue<IkReal> x8347 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8345))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8346.value)))+(x8347.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8348=IKsin(j4);
IkReal x8349=IKcos(j4);
IkReal x8350=(sj1*sj2);
IkReal x8351=(gconst133*r11);
IkReal x8352=(gconst133*r21);
IkReal x8353=(gconst133*r01);
IkReal x8354=((1.0)*x8349);
IkReal x8355=(gconst134*x8349);
IkReal x8356=((1.0)*x8348);
IkReal x8357=((1.0)*cj1*cj2);
evalcond[0]=(((x8348*x8352))+(((-1.0)*r22*x8354))+(((-1.0)*gconst134*r20*x8356)));
evalcond[1]=(((x8348*x8351))+cj0+(((-1.0)*r12*x8354))+(((-1.0)*gconst134*r10*x8356)));
evalcond[2]=(((x8348*x8353))+(((-1.0)*sj0))+(((-1.0)*r02*x8354))+(((-1.0)*gconst134*r00*x8356)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8356))+((cj1*sj2))+(((-1.0)*x8352*x8354))+((r20*x8355)));
evalcond[4]=((((-1.0)*r02*x8356))+(((-1.0)*cj0*x8357))+((cj0*x8350))+(((-1.0)*x8353*x8354))+((r00*x8355)));
evalcond[5]=(((r10*x8355))+(((-1.0)*r12*x8356))+((sj0*x8350))+(((-1.0)*sj0*x8357))+(((-1.0)*x8351*x8354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8358=((1.0)*gconst134);
CheckValue<IkReal> x8359=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8358)))),-1);
if(!x8359.valid){
continue;
}
CheckValue<IkReal> x8360 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8358))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8359.value)))+(x8360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8361=IKsin(j4);
IkReal x8362=IKcos(j4);
IkReal x8363=(sj1*sj2);
IkReal x8364=(gconst133*r11);
IkReal x8365=(gconst133*r21);
IkReal x8366=(gconst133*r01);
IkReal x8367=((1.0)*x8362);
IkReal x8368=(gconst134*x8362);
IkReal x8369=((1.0)*x8361);
IkReal x8370=((1.0)*cj1*cj2);
evalcond[0]=(((x8361*x8365))+(((-1.0)*gconst134*r20*x8369))+(((-1.0)*r22*x8367)));
evalcond[1]=((((-1.0)*gconst134*r10*x8369))+cj0+((x8361*x8364))+(((-1.0)*r12*x8367)));
evalcond[2]=((((-1.0)*gconst134*r00*x8369))+(((-1.0)*sj0))+((x8361*x8366))+(((-1.0)*r02*x8367)));
evalcond[3]=((((-1.0)*x8365*x8367))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8369))+((r20*x8368)));
evalcond[4]=((((-1.0)*x8366*x8367))+((r00*x8368))+(((-1.0)*cj0*x8370))+(((-1.0)*r02*x8369))+((cj0*x8363)));
evalcond[5]=((((-1.0)*x8364*x8367))+(((-1.0)*r12*x8369))+((sj0*x8363))+((r10*x8368))+(((-1.0)*sj0*x8370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8371=((-1.0)*r21);
IkReal x8373 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8373)==0){
continue;
}
IkReal x8372=pow(x8373,-0.5);
CheckValue<IkReal> x8374 = IKatan2WithCheck(IkReal(x8371),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8374.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8374.value))));
IkReal gconst136=(x8371*x8372);
IkReal gconst137=((1.0)*r20*x8372);
CheckValue<IkReal> x8375 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8375.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8375.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8376=((-1.0)*r21);
CheckValue<IkReal> x8379 = IKatan2WithCheck(IkReal(x8376),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8379.valid){
continue;
}
IkReal x8377=((1.0)*(x8379.value));
IkReal x8378=x8372;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8377)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8377)));
IkReal gconst136=(x8376*x8378);
IkReal gconst137=((1.0)*r20*x8378);
IkReal x8380=r22*r22;
IkReal x8381=((1.0)*x8380);
CheckValue<IkReal> x8385=IKPowWithIntegerCheck(((-1.0)+x8380),-1);
if(!x8385.valid){
continue;
}
IkReal x8382=x8385.value;
if((((1.0)+(((-1.0)*x8381)))) < -0.00001)
continue;
IkReal x8383=IKsqrt(((1.0)+(((-1.0)*x8381))));
IkReal x8384=(cj0*x8382*x8383);
j4eval[0]=((IKabs((x8384+(((-1.0)*x8381*x8384)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8386=((-1.0)*r21);
CheckValue<IkReal> x8389 = IKatan2WithCheck(IkReal(x8386),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8389.valid){
continue;
}
IkReal x8387=((1.0)*(x8389.value));
IkReal x8388=x8372;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8387)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8387)));
IkReal gconst136=(x8386*x8388);
IkReal gconst137=((1.0)*r20*x8388);
IkReal x8390=r22*r22;
IkReal x8391=((1.0)*x8390);
CheckValue<IkReal> x8395=IKPowWithIntegerCheck(((-1.0)+x8390),-1);
if(!x8395.valid){
continue;
}
IkReal x8392=x8395.value;
if((((1.0)+(((-1.0)*x8391)))) < -0.00001)
continue;
IkReal x8393=IKsqrt(((1.0)+(((-1.0)*x8391))));
IkReal x8394=(sj0*x8392*x8393);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8394+(((-1.0)*x8391*x8394))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8396=((-1.0)*r21);
CheckValue<IkReal> x8399 = IKatan2WithCheck(IkReal(x8396),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8399.valid){
continue;
}
IkReal x8397=((1.0)*(x8399.value));
IkReal x8398=x8372;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8397)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8397)));
IkReal gconst136=(x8396*x8398);
IkReal gconst137=((1.0)*r20*x8398);
IkReal x8400=r22*r22;
IkReal x8401=(r12*sj0);
IkReal x8402=(cj0*r02);
CheckValue<IkReal> x8406=IKPowWithIntegerCheck(((-1.0)+x8400),-1);
if(!x8406.valid){
continue;
}
IkReal x8403=x8406.value;
if((((1.0)+(((-1.0)*x8400)))) < -0.00001)
continue;
IkReal x8404=IKsqrt(((1.0)+(((-1.0)*x8400))));
IkReal x8405=(r22*x8403*x8404);
j4eval[0]=0;
j4eval[1]=((IKabs((((x8401*x8405))+((x8402*x8405)))))+(IKabs(((((-1.0)*x8401))+(((-1.0)*x8402))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8407=((1.0)*sj0);
IkReal x8408=((1.0)*cj0);
CheckValue<IkReal> x8409=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8409.valid){
continue;
}
CheckValue<IkReal> x8410 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8408))+(((-1.0)*r12*x8407)))),IkReal(((((-1.0)*gconst136*r11*x8407))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r01*x8408))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8409.value)))+(x8410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8411=IKsin(j4);
IkReal x8412=IKcos(j4);
IkReal x8413=(gconst136*r01);
IkReal x8414=(gconst137*r10);
IkReal x8415=(sj1*sj2);
IkReal x8416=(gconst137*r20);
IkReal x8417=(gconst136*r11);
IkReal x8418=(gconst136*r21);
IkReal x8419=(gconst137*r00);
IkReal x8420=((1.0)*x8412);
IkReal x8421=((1.0)*cj1*cj2);
IkReal x8422=((1.0)*x8411);
evalcond[0]=(((x8411*x8418))+(((-1.0)*r22*x8420))+(((-1.0)*x8416*x8422)));
evalcond[1]=(cj0+((x8411*x8417))+(((-1.0)*x8414*x8422))+(((-1.0)*r12*x8420)));
evalcond[2]=((((-1.0)*sj0))+((x8411*x8413))+(((-1.0)*r02*x8420))+(((-1.0)*x8419*x8422)));
evalcond[3]=(((cj2*sj1))+((x8412*x8416))+((cj1*sj2))+(((-1.0)*r22*x8422))+(((-1.0)*x8418*x8420)));
evalcond[4]=(((x8412*x8419))+(((-1.0)*x8413*x8420))+(((-1.0)*cj0*x8421))+(((-1.0)*r02*x8422))+((cj0*x8415)));
evalcond[5]=(((x8412*x8414))+(((-1.0)*x8417*x8420))+(((-1.0)*sj0*x8421))+((sj0*x8415))+(((-1.0)*r12*x8422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8423=((1.0)*gconst137);
CheckValue<IkReal> x8424=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x8423)))),-1);
if(!x8424.valid){
continue;
}
CheckValue<IkReal> x8425 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8423))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8424.value)))+(x8425.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8426=IKsin(j4);
IkReal x8427=IKcos(j4);
IkReal x8428=(gconst136*r01);
IkReal x8429=(gconst137*r10);
IkReal x8430=(sj1*sj2);
IkReal x8431=(gconst137*r20);
IkReal x8432=(gconst136*r11);
IkReal x8433=(gconst136*r21);
IkReal x8434=(gconst137*r00);
IkReal x8435=((1.0)*x8427);
IkReal x8436=((1.0)*cj1*cj2);
IkReal x8437=((1.0)*x8426);
evalcond[0]=(((x8426*x8433))+(((-1.0)*x8431*x8437))+(((-1.0)*r22*x8435)));
evalcond[1]=(((x8426*x8432))+(((-1.0)*x8429*x8437))+cj0+(((-1.0)*r12*x8435)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8434*x8437))+(((-1.0)*r02*x8435))+((x8426*x8428)));
evalcond[3]=(((cj2*sj1))+((x8427*x8431))+((cj1*sj2))+(((-1.0)*r22*x8437))+(((-1.0)*x8433*x8435)));
evalcond[4]=(((x8427*x8434))+(((-1.0)*r02*x8437))+(((-1.0)*cj0*x8436))+((cj0*x8430))+(((-1.0)*x8428*x8435)));
evalcond[5]=((((-1.0)*x8432*x8435))+(((-1.0)*sj0*x8436))+(((-1.0)*r12*x8437))+((sj0*x8430))+((x8427*x8429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8438=((1.0)*gconst137);
CheckValue<IkReal> x8439 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x8438)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8439.valid){
continue;
}
CheckValue<IkReal> x8440=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8438))+(((-1.0)*gconst136*r00)))),-1);
if(!x8440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8439.value)+(((1.5707963267949)*(x8440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8441=IKsin(j4);
IkReal x8442=IKcos(j4);
IkReal x8443=(gconst136*r01);
IkReal x8444=(gconst137*r10);
IkReal x8445=(sj1*sj2);
IkReal x8446=(gconst137*r20);
IkReal x8447=(gconst136*r11);
IkReal x8448=(gconst136*r21);
IkReal x8449=(gconst137*r00);
IkReal x8450=((1.0)*x8442);
IkReal x8451=((1.0)*cj1*cj2);
IkReal x8452=((1.0)*x8441);
evalcond[0]=(((x8441*x8448))+(((-1.0)*r22*x8450))+(((-1.0)*x8446*x8452)));
evalcond[1]=(((x8441*x8447))+cj0+(((-1.0)*r12*x8450))+(((-1.0)*x8444*x8452)));
evalcond[2]=((((-1.0)*sj0))+((x8441*x8443))+(((-1.0)*x8449*x8452))+(((-1.0)*r02*x8450)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8448*x8450))+(((-1.0)*r22*x8452))+((x8442*x8446)));
evalcond[4]=((((-1.0)*x8443*x8450))+((x8442*x8449))+(((-1.0)*cj0*x8451))+(((-1.0)*r02*x8452))+((cj0*x8445)));
evalcond[5]=((((-1.0)*x8447*x8450))+(((-1.0)*sj0*x8451))+(((-1.0)*r12*x8452))+((sj0*x8445))+((x8442*x8444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8453=((-1.0)*r10);
IkReal x8455 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8455)==0){
continue;
}
IkReal x8454=pow(x8455,-0.5);
CheckValue<IkReal> x8456 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8453),IKFAST_ATAN2_MAGTHRESH);
if(!x8456.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8456.value));
IkReal gconst139=(r11*x8454);
IkReal gconst140=(x8453*x8454);
CheckValue<IkReal> x8457 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8457.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8457.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8458=((-1.0)*r10);
IkReal x8459=x8454;
CheckValue<IkReal> x8461 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8458),IKFAST_ATAN2_MAGTHRESH);
if(!x8461.valid){
continue;
}
IkReal x8460=((-1.0)*(x8461.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8460;
IkReal gconst138=x8460;
IkReal gconst139=(r11*x8459);
IkReal gconst140=(x8458*x8459);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8462=((1.0)*sj0);
IkReal x8463=((1.0)*gconst139);
CheckValue<IkReal> x8464=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8463)))),-1);
if(!x8464.valid){
continue;
}
CheckValue<IkReal> x8465 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8462)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x8462))+(((-1.0)*cj0*r01*x8463))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8464.value)))+(x8465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8466=IKsin(j4);
IkReal x8467=IKcos(j4);
IkReal x8468=(gconst140*r00);
IkReal x8469=(sj1*sj2);
IkReal x8470=(gconst139*r11);
IkReal x8471=(gconst139*r01);
IkReal x8472=(gconst139*r21);
IkReal x8473=((1.0)*x8467);
IkReal x8474=((1.0)*x8466);
IkReal x8475=((1.0)*cj1*cj2);
IkReal x8476=(gconst140*x8467);
evalcond[0]=((((-1.0)*gconst140*r20*x8474))+(((-1.0)*r22*x8473))+((x8466*x8472)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8474))+(((-1.0)*r12*x8473))+((x8466*x8470)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8473))+(((-1.0)*x8468*x8474))+((x8466*x8471)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8472*x8473))+(((-1.0)*r22*x8474))+((r20*x8476)));
evalcond[4]=((((-1.0)*r02*x8474))+(((-1.0)*x8471*x8473))+((x8467*x8468))+((cj0*x8469))+(((-1.0)*cj0*x8475)));
evalcond[5]=((((-1.0)*x8470*x8473))+(((-1.0)*sj0*x8475))+((r10*x8476))+(((-1.0)*r12*x8474))+((sj0*x8469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8477=((1.0)*gconst140);
CheckValue<IkReal> x8478=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x8477)))),-1);
if(!x8478.valid){
continue;
}
CheckValue<IkReal> x8479 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8477))+((cj0*gconst139*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8478.value)))+(x8479.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8480=IKsin(j4);
IkReal x8481=IKcos(j4);
IkReal x8482=(gconst140*r00);
IkReal x8483=(sj1*sj2);
IkReal x8484=(gconst139*r11);
IkReal x8485=(gconst139*r01);
IkReal x8486=(gconst139*r21);
IkReal x8487=((1.0)*x8481);
IkReal x8488=((1.0)*x8480);
IkReal x8489=((1.0)*cj1*cj2);
IkReal x8490=(gconst140*x8481);
evalcond[0]=((((-1.0)*gconst140*r20*x8488))+((x8480*x8486))+(((-1.0)*r22*x8487)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8488))+((x8480*x8484))+(((-1.0)*r12*x8487)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8487))+(((-1.0)*x8482*x8488))+((x8480*x8485)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8488))+(((-1.0)*x8486*x8487))+((r20*x8490)));
evalcond[4]=(((cj0*x8483))+(((-1.0)*cj0*x8489))+(((-1.0)*r02*x8488))+(((-1.0)*x8485*x8487))+((x8481*x8482)));
evalcond[5]=(((r10*x8490))+(((-1.0)*sj0*x8489))+((sj0*x8483))+(((-1.0)*x8484*x8487))+(((-1.0)*r12*x8488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8491=((-1.0)*r11);
IkReal x8493 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8493)==0){
continue;
}
IkReal x8492=pow(x8493,-0.5);
CheckValue<IkReal> x8494 = IKatan2WithCheck(IkReal(x8491),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8494.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8494.value))));
IkReal gconst142=(x8491*x8492);
IkReal gconst143=((1.0)*r10*x8492);
CheckValue<IkReal> x8495 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8495.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8495.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8496=((-1.0)*r11);
CheckValue<IkReal> x8499 = IKatan2WithCheck(IkReal(x8496),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8499.valid){
continue;
}
IkReal x8497=((1.0)*(x8499.value));
IkReal x8498=x8492;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8497)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8497)));
IkReal gconst142=(x8496*x8498);
IkReal gconst143=((1.0)*r10*x8498);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8500=((-1.0)*r11);
CheckValue<IkReal> x8503 = IKatan2WithCheck(IkReal(x8500),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8503.valid){
continue;
}
IkReal x8501=((1.0)*(x8503.value));
IkReal x8502=x8492;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8501)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8501)));
IkReal gconst142=(x8500*x8502);
IkReal gconst143=((1.0)*r10*x8502);
IkReal x8504=r12*r12;
IkReal x8505=((1.0)*sj0);
IkReal x8506=(cj0*r02);
IkReal x8507=x8492;
j4eval[0]=((IKabs(((((-1.0)*x8505*x8507))+((sj0*x8504*x8507))+((r12*x8506*x8507)))))+(IKabs(((((-1.0)*x8506))+(((-1.0)*r12*x8505))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8508=((-1.0)*r11);
CheckValue<IkReal> x8511 = IKatan2WithCheck(IkReal(x8508),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8511.valid){
continue;
}
IkReal x8509=((1.0)*(x8511.value));
IkReal x8510=x8492;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8509)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8509)));
IkReal gconst142=(x8508*x8510);
IkReal gconst143=((1.0)*r10*x8510);
IkReal x8512=r12*r12;
IkReal x8513=(cj1*r22*sj2);
IkReal x8514=(cj2*r22*sj1);
CheckValue<IkReal> x8518=IKPowWithIntegerCheck(((-1.0)+x8512),-1);
if(!x8518.valid){
continue;
}
IkReal x8515=x8518.value;
if((((1.0)+(((-1.0)*x8512)))) < -0.00001)
continue;
IkReal x8516=IKsqrt(((1.0)+(((-1.0)*x8512))));
IkReal x8517=((1.0)*r12*x8515*x8516);
j4eval[0]=((IKabs(((((-1.0)*x8513*x8517))+(((-1.0)*x8514*x8517)))))+(IKabs((x8514+x8513))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8519=(gconst142*r21);
IkReal x8520=(cj1*sj2);
IkReal x8521=(cj2*sj1);
IkReal x8522=(gconst143*r20);
CheckValue<IkReal> x8523=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x8519*x8522))+(x8522*x8522)+(x8519*x8519))),-1);
if(!x8523.valid){
continue;
}
CheckValue<IkReal> x8524 = IKatan2WithCheck(IkReal((((r22*x8521))+((r22*x8520)))),IkReal(((((-1.0)*x8520*x8522))+(((-1.0)*x8521*x8522))+((x8519*x8521))+((x8519*x8520)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8523.value)))+(x8524.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8525=IKsin(j4);
IkReal x8526=IKcos(j4);
IkReal x8527=(sj1*sj2);
IkReal x8528=(gconst143*r20);
IkReal x8529=((1.0)*x8526);
IkReal x8530=((1.0)*cj1*cj2);
IkReal x8531=((1.0)*x8525);
IkReal x8532=(gconst142*x8525);
IkReal x8533=(gconst143*x8526);
evalcond[0]=(((r21*x8532))+(((-1.0)*r22*x8529))+(((-1.0)*x8528*x8531)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x8531))+(((-1.0)*r12*x8529))+((r11*x8532)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8532))+(((-1.0)*gconst143*r00*x8531))+(((-1.0)*r02*x8529)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8529))+(((-1.0)*r22*x8531))+((cj1*sj2))+((x8526*x8528)));
evalcond[4]=((((-1.0)*r02*x8531))+(((-1.0)*cj0*x8530))+((r00*x8533))+((cj0*x8527))+(((-1.0)*gconst142*r01*x8529)));
evalcond[5]=((((-1.0)*sj0*x8530))+((sj0*x8527))+((r10*x8533))+(((-1.0)*r12*x8531))+(((-1.0)*gconst142*r11*x8529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8534=((1.0)*sj0);
IkReal x8535=((1.0)*gconst142);
CheckValue<IkReal> x8536 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8534))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x8535))+(((-1.0)*gconst142*r11*x8534))+((cj0*gconst143*r00))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8536.valid){
continue;
}
CheckValue<IkReal> x8537=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r21))+(((-1.0)*r20*x8535)))),-1);
if(!x8537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8536.value)+(((1.5707963267949)*(x8537.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8538=IKsin(j4);
IkReal x8539=IKcos(j4);
IkReal x8540=(sj1*sj2);
IkReal x8541=(gconst143*r20);
IkReal x8542=((1.0)*x8539);
IkReal x8543=((1.0)*cj1*cj2);
IkReal x8544=((1.0)*x8538);
IkReal x8545=(gconst142*x8538);
IkReal x8546=(gconst143*x8539);
evalcond[0]=((((-1.0)*r22*x8542))+((r21*x8545))+(((-1.0)*x8541*x8544)));
evalcond[1]=(cj0+(((-1.0)*r12*x8542))+((r11*x8545))+(((-1.0)*gconst143*r10*x8544)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8542))+(((-1.0)*gconst143*r00*x8544))+((r01*x8545)));
evalcond[3]=(((cj2*sj1))+((x8539*x8541))+((cj1*sj2))+(((-1.0)*r22*x8544))+(((-1.0)*gconst142*r21*x8542)));
evalcond[4]=((((-1.0)*r02*x8544))+((r00*x8546))+(((-1.0)*cj0*x8543))+(((-1.0)*gconst142*r01*x8542))+((cj0*x8540)));
evalcond[5]=((((-1.0)*sj0*x8543))+((r10*x8546))+(((-1.0)*gconst142*r11*x8542))+(((-1.0)*r12*x8544))+((sj0*x8540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8547=((1.0)*gconst143);
CheckValue<IkReal> x8548=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8547))+(((-1.0)*gconst142*r00)))),-1);
if(!x8548.valid){
continue;
}
CheckValue<IkReal> x8549 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8547))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8548.value)))+(x8549.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8550=IKsin(j4);
IkReal x8551=IKcos(j4);
IkReal x8552=(sj1*sj2);
IkReal x8553=(gconst143*r20);
IkReal x8554=((1.0)*x8551);
IkReal x8555=((1.0)*cj1*cj2);
IkReal x8556=((1.0)*x8550);
IkReal x8557=(gconst142*x8550);
IkReal x8558=(gconst143*x8551);
evalcond[0]=(((r21*x8557))+(((-1.0)*r22*x8554))+(((-1.0)*x8553*x8556)));
evalcond[1]=((((-1.0)*r12*x8554))+((r11*x8557))+cj0+(((-1.0)*gconst143*r10*x8556)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8557))+(((-1.0)*gconst143*r00*x8556))+(((-1.0)*r02*x8554)));
evalcond[3]=(((x8551*x8553))+((cj2*sj1))+(((-1.0)*r22*x8556))+((cj1*sj2))+(((-1.0)*gconst142*r21*x8554)));
evalcond[4]=((((-1.0)*gconst142*r01*x8554))+((r00*x8558))+((cj0*x8552))+(((-1.0)*r02*x8556))+(((-1.0)*cj0*x8555)));
evalcond[5]=((((-1.0)*r12*x8556))+(((-1.0)*gconst142*r11*x8554))+((sj0*x8552))+((r10*x8558))+(((-1.0)*sj0*x8555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8559=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8559;
j4eval[1]=IKsign(x8559);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8560=((1.0)*cj5);
IkReal x8561=((((-1.0)*r01*x8560))+(((-1.0)*r00*sj5)));
j4eval[0]=x8561;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8560)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8561);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8562=cj5*cj5;
IkReal x8563=r11*r11;
IkReal x8564=(r11*sj5);
IkReal x8565=(cj5*r10);
IkReal x8566=((r12*r12)+(((-1.0)*x8562*x8563))+x8563+((x8562*(r10*r10)))+(((-2.0)*x8564*x8565)));
j4eval[0]=x8566;
j4eval[1]=IKsign(x8566);
j4eval[2]=((IKabs(r12))+(IKabs((x8565+(((-1.0)*x8564))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8567=cj5*cj5;
IkReal x8568=r11*r11;
IkReal x8569=(cj5*r10);
IkReal x8570=(r11*sj5);
CheckValue<IkReal> x8571 = IKatan2WithCheck(IkReal((x8569+(((-1.0)*x8570)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8571.valid){
continue;
}
CheckValue<IkReal> x8572=IKPowWithIntegerCheck(IKsign(((r12*r12)+x8568+((x8567*(r10*r10)))+(((-1.0)*x8567*x8568))+(((-2.0)*x8569*x8570)))),-1);
if(!x8572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8571.value)+(((1.5707963267949)*(x8572.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8573=IKsin(j4);
IkReal x8574=IKcos(j4);
IkReal x8575=(cj5*r10);
IkReal x8576=(r01*sj5);
IkReal x8577=(cj5*r00);
IkReal x8578=(cj5*r20);
IkReal x8579=((1.0)*x8574);
IkReal x8580=((1.0)*x8573);
IkReal x8581=(sj5*x8573);
evalcond[0]=(((r21*x8581))+(((-1.0)*x8578*x8580))+(((-1.0)*r22*x8579)));
evalcond[1]=((((-1.0)*x8577*x8580))+(((-1.0)*r02*x8579))+((x8573*x8576)));
evalcond[2]=((((-1.0)*r11*sj5*x8579))+(((-1.0)*r12*x8580))+((x8574*x8575)));
evalcond[3]=((1.0)+((r11*x8581))+(((-1.0)*r12*x8579))+(((-1.0)*x8575*x8580)));
evalcond[4]=((((-1.0)*r21*sj5*x8579))+((cj2*sj1))+(((-1.0)*r22*x8580))+((cj1*sj2))+((x8574*x8578)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8580))+((x8574*x8577))+(((-1.0)*x8576*x8579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8582=((1.0)*cj5);
CheckValue<IkReal> x8583 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8582))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8583.valid){
continue;
}
CheckValue<IkReal> x8584=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8582)))),-1);
if(!x8584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8583.value)+(((1.5707963267949)*(x8584.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8585=IKsin(j4);
IkReal x8586=IKcos(j4);
IkReal x8587=(cj5*r10);
IkReal x8588=(r01*sj5);
IkReal x8589=(cj5*r00);
IkReal x8590=(cj5*r20);
IkReal x8591=((1.0)*x8586);
IkReal x8592=((1.0)*x8585);
IkReal x8593=(sj5*x8585);
evalcond[0]=((((-1.0)*r22*x8591))+(((-1.0)*x8590*x8592))+((r21*x8593)));
evalcond[1]=((((-1.0)*x8589*x8592))+(((-1.0)*r02*x8591))+((x8585*x8588)));
evalcond[2]=(((x8586*x8587))+(((-1.0)*r11*sj5*x8591))+(((-1.0)*r12*x8592)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8591))+((r11*x8593))+(((-1.0)*x8587*x8592)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8592))+((x8586*x8590))+((cj1*sj2))+(((-1.0)*r21*sj5*x8591)));
evalcond[5]=(((x8586*x8589))+(((-1.0)*r02*x8592))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8588*x8591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8594=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8594.valid){
continue;
}
CheckValue<IkReal> x8595 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8594.value)))+(x8595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8596=IKsin(j4);
IkReal x8597=IKcos(j4);
IkReal x8598=(cj5*r10);
IkReal x8599=(r01*sj5);
IkReal x8600=(cj5*r00);
IkReal x8601=(cj5*r20);
IkReal x8602=((1.0)*x8597);
IkReal x8603=((1.0)*x8596);
IkReal x8604=(sj5*x8596);
evalcond[0]=((((-1.0)*x8601*x8603))+(((-1.0)*r22*x8602))+((r21*x8604)));
evalcond[1]=(((x8596*x8599))+(((-1.0)*r02*x8602))+(((-1.0)*x8600*x8603)));
evalcond[2]=((((-1.0)*r12*x8603))+(((-1.0)*r11*sj5*x8602))+((x8597*x8598)));
evalcond[3]=((1.0)+((r11*x8604))+(((-1.0)*r12*x8602))+(((-1.0)*x8598*x8603)));
evalcond[4]=(((cj2*sj1))+((x8597*x8601))+((cj1*sj2))+(((-1.0)*r22*x8603))+(((-1.0)*r21*sj5*x8602)));
evalcond[5]=(((x8597*x8600))+(((-1.0)*r02*x8603))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8599*x8602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8605=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8605;
j4eval[1]=IKsign(x8605);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8606=((1.0)*cj5);
IkReal x8607=((((-1.0)*r21*x8606))+(((-1.0)*r20*sj5)));
j4eval[0]=x8607;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x8606))+((r01*sj5))))));
j4eval[2]=IKsign(x8607);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8608=cj5*cj5;
IkReal x8609=r11*r11;
IkReal x8610=(cj5*r10);
IkReal x8611=(r11*sj5);
IkReal x8612=((((-1.0)*x8608*(r10*r10)))+(((2.0)*x8610*x8611))+((x8608*x8609))+(((-1.0)*(r12*r12)))+(((-1.0)*x8609)));
j4eval[0]=x8612;
j4eval[1]=((IKabs(r12))+(IKabs((x8610+(((-1.0)*x8611))))));
j4eval[2]=IKsign(x8612);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8613=cj5*cj5;
IkReal x8614=r11*r11;
IkReal x8615=(cj5*r10);
IkReal x8616=(r11*sj5);
CheckValue<IkReal> x8617 = IKatan2WithCheck(IkReal((x8615+(((-1.0)*x8616)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8617.valid){
continue;
}
CheckValue<IkReal> x8618=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8613*(r10*r10)))+(((2.0)*x8615*x8616))+(((-1.0)*(r12*r12)))+((x8613*x8614))+(((-1.0)*x8614)))),-1);
if(!x8618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8617.value)+(((1.5707963267949)*(x8618.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8619=IKsin(j4);
IkReal x8620=IKcos(j4);
IkReal x8621=(cj5*r10);
IkReal x8622=(r01*sj5);
IkReal x8623=(cj5*r00);
IkReal x8624=(cj5*r20);
IkReal x8625=((1.0)*x8620);
IkReal x8626=((1.0)*x8619);
IkReal x8627=(sj5*x8619);
evalcond[0]=(((r21*x8627))+(((-1.0)*x8624*x8626))+(((-1.0)*r22*x8625)));
evalcond[1]=((((-1.0)*x8623*x8626))+((x8619*x8622))+(((-1.0)*r02*x8625)));
evalcond[2]=(((x8620*x8621))+(((-1.0)*r12*x8626))+(((-1.0)*r11*sj5*x8625)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8625))+(((-1.0)*x8621*x8626))+((r11*x8627)));
evalcond[4]=(((cj2*sj1))+((x8620*x8624))+((cj1*sj2))+(((-1.0)*r21*sj5*x8625))+(((-1.0)*r22*x8626)));
evalcond[5]=(((x8620*x8623))+(((-1.0)*sj1*sj2))+(((-1.0)*x8622*x8625))+((cj1*cj2))+(((-1.0)*r02*x8626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8628=((1.0)*cj5);
CheckValue<IkReal> x8629=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8628))+(((-1.0)*r20*sj5)))),-1);
if(!x8629.valid){
continue;
}
CheckValue<IkReal> x8630 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x8628)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8629.value)))+(x8630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8631=IKsin(j4);
IkReal x8632=IKcos(j4);
IkReal x8633=(cj5*r10);
IkReal x8634=(r01*sj5);
IkReal x8635=(cj5*r00);
IkReal x8636=(cj5*r20);
IkReal x8637=((1.0)*x8632);
IkReal x8638=((1.0)*x8631);
IkReal x8639=(sj5*x8631);
evalcond[0]=(((r21*x8639))+(((-1.0)*r22*x8637))+(((-1.0)*x8636*x8638)));
evalcond[1]=((((-1.0)*x8635*x8638))+((x8631*x8634))+(((-1.0)*r02*x8637)));
evalcond[2]=((((-1.0)*r12*x8638))+(((-1.0)*r11*sj5*x8637))+((x8632*x8633)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8637))+((r11*x8639))+(((-1.0)*x8633*x8638)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8637))+(((-1.0)*r22*x8638))+((x8632*x8636)));
evalcond[5]=((((-1.0)*x8634*x8637))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x8632*x8635))+(((-1.0)*r02*x8638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8640 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8640.valid){
continue;
}
CheckValue<IkReal> x8641=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8640.value)+(((1.5707963267949)*(x8641.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8642=IKsin(j4);
IkReal x8643=IKcos(j4);
IkReal x8644=(cj5*r10);
IkReal x8645=(r01*sj5);
IkReal x8646=(cj5*r00);
IkReal x8647=(cj5*r20);
IkReal x8648=((1.0)*x8643);
IkReal x8649=((1.0)*x8642);
IkReal x8650=(sj5*x8642);
evalcond[0]=(((r21*x8650))+(((-1.0)*r22*x8648))+(((-1.0)*x8647*x8649)));
evalcond[1]=((((-1.0)*x8646*x8649))+(((-1.0)*r02*x8648))+((x8642*x8645)));
evalcond[2]=((((-1.0)*r11*sj5*x8648))+(((-1.0)*r12*x8649))+((x8643*x8644)));
evalcond[3]=((-1.0)+(((-1.0)*x8644*x8649))+((r11*x8650))+(((-1.0)*r12*x8648)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8649))+((x8643*x8647))+(((-1.0)*r21*sj5*x8648)));
evalcond[5]=((((-1.0)*x8645*x8648))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x8649))+((cj1*cj2))+((x8643*x8646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8651=((-1.0)*r00);
IkReal x8653 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8653)==0){
continue;
}
IkReal x8652=pow(x8653,-0.5);
CheckValue<IkReal> x8654 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8651),IKFAST_ATAN2_MAGTHRESH);
if(!x8654.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8654.value));
IkReal gconst145=(r01*x8652);
IkReal gconst146=(x8651*x8652);
CheckValue<IkReal> x8655 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8655.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8655.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8656=((-1.0)*r00);
IkReal x8657=x8652;
CheckValue<IkReal> x8659 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8656),IKFAST_ATAN2_MAGTHRESH);
if(!x8659.valid){
continue;
}
IkReal x8658=((-1.0)*(x8659.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8658;
IkReal gconst144=x8658;
IkReal gconst145=(r01*x8657);
IkReal gconst146=(x8656*x8657);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8660=((1.0)*sj0);
IkReal x8661=((1.0)*gconst145);
CheckValue<IkReal> x8662 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8660))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*gconst145*r11*x8660))+((gconst146*r10*sj0))+(((-1.0)*cj0*r01*x8661)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8662.valid){
continue;
}
CheckValue<IkReal> x8663=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8661))+(((-1.0)*gconst146*r21)))),-1);
if(!x8663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8662.value)+(((1.5707963267949)*(x8663.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8664=IKsin(j4);
IkReal x8665=IKcos(j4);
IkReal x8666=(gconst146*r10);
IkReal x8667=(sj1*sj2);
IkReal x8668=(gconst146*r20);
IkReal x8669=(gconst146*r00);
IkReal x8670=((1.0)*x8665);
IkReal x8671=((1.0)*x8664);
IkReal x8672=(gconst145*x8664);
IkReal x8673=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8670))+(((-1.0)*x8668*x8671))+((r21*x8672)));
evalcond[1]=(cj0+(((-1.0)*r12*x8670))+((r11*x8672))+(((-1.0)*x8666*x8671)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8670))+((r01*x8672))+(((-1.0)*x8669*x8671)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8671))+((cj1*sj2))+(((-1.0)*gconst145*r21*x8670))+((x8665*x8668)));
evalcond[4]=((((-1.0)*cj0*x8673))+((cj0*x8667))+(((-1.0)*r02*x8671))+((x8665*x8669))+(((-1.0)*gconst145*r01*x8670)));
evalcond[5]=(((sj0*x8667))+(((-1.0)*gconst145*r11*x8670))+(((-1.0)*r12*x8671))+((x8665*x8666))+(((-1.0)*sj0*x8673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8674=((1.0)*gconst146);
CheckValue<IkReal> x8675 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8674))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8675.valid){
continue;
}
CheckValue<IkReal> x8676=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8674))+(((-1.0)*gconst145*r10)))),-1);
if(!x8676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8675.value)+(((1.5707963267949)*(x8676.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8677=IKsin(j4);
IkReal x8678=IKcos(j4);
IkReal x8679=(gconst146*r10);
IkReal x8680=(sj1*sj2);
IkReal x8681=(gconst146*r20);
IkReal x8682=(gconst146*r00);
IkReal x8683=((1.0)*x8678);
IkReal x8684=((1.0)*x8677);
IkReal x8685=(gconst145*x8677);
IkReal x8686=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x8681*x8684))+(((-1.0)*r22*x8683))+((r21*x8685)));
evalcond[1]=(cj0+(((-1.0)*r12*x8683))+((r11*x8685))+(((-1.0)*x8679*x8684)));
evalcond[2]=((((-1.0)*x8682*x8684))+(((-1.0)*sj0))+(((-1.0)*r02*x8683))+((r01*x8685)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8684))+((x8678*x8681))+(((-1.0)*gconst145*r21*x8683)));
evalcond[4]=((((-1.0)*cj0*x8686))+(((-1.0)*gconst145*r01*x8683))+(((-1.0)*r02*x8684))+((x8678*x8682))+((cj0*x8680)));
evalcond[5]=((((-1.0)*gconst145*r11*x8683))+(((-1.0)*r12*x8684))+((x8678*x8679))+(((-1.0)*sj0*x8686))+((sj0*x8680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8687=((-1.0)*r01);
IkReal x8689 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8689)==0){
continue;
}
IkReal x8688=pow(x8689,-0.5);
CheckValue<IkReal> x8690 = IKatan2WithCheck(IkReal(x8687),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8690.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8690.value))));
IkReal gconst148=(x8687*x8688);
IkReal gconst149=((1.0)*r00*x8688);
CheckValue<IkReal> x8691 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8691.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8691.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8692=((-1.0)*r01);
CheckValue<IkReal> x8695 = IKatan2WithCheck(IkReal(x8692),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8695.valid){
continue;
}
IkReal x8693=((1.0)*(x8695.value));
IkReal x8694=x8688;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8693)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8693)));
IkReal gconst148=(x8692*x8694);
IkReal gconst149=((1.0)*r00*x8694);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8696=((-1.0)*r01);
CheckValue<IkReal> x8699 = IKatan2WithCheck(IkReal(x8696),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8699.valid){
continue;
}
IkReal x8697=((1.0)*(x8699.value));
IkReal x8698=x8688;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8697)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8697)));
IkReal gconst148=(x8696*x8698);
IkReal gconst149=((1.0)*r00*x8698);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8700=((-1.0)*r01);
CheckValue<IkReal> x8703 = IKatan2WithCheck(IkReal(x8700),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8703.valid){
continue;
}
IkReal x8701=((1.0)*(x8703.value));
IkReal x8702=x8688;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8701)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8701)));
IkReal gconst148=(x8700*x8702);
IkReal gconst149=((1.0)*r00*x8702);
IkReal x8704=r02*r02;
IkReal x8705=(r12*sj0);
IkReal x8706=((1.0)*cj0);
IkReal x8707=x8688;
j4eval[0]=((IKabs(((((-1.0)*x8705))+(((-1.0)*r02*x8706)))))+(IKabs((((cj0*x8704*x8707))+((r02*x8705*x8707))+(((-1.0)*x8706*x8707))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8708=((1.0)*sj0);
IkReal x8709=((1.0)*gconst148);
CheckValue<IkReal> x8710 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8708)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*cj0*r01*x8709))+(((-1.0)*gconst148*r11*x8708)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8710.valid){
continue;
}
CheckValue<IkReal> x8711=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8709)))),-1);
if(!x8711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8710.value)+(((1.5707963267949)*(x8711.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8712=IKsin(j4);
IkReal x8713=IKcos(j4);
IkReal x8714=(gconst148*r11);
IkReal x8715=(sj1*sj2);
IkReal x8716=((1.0)*x8713);
IkReal x8717=(gconst149*x8713);
IkReal x8718=(gconst148*x8712);
IkReal x8719=((1.0)*cj1*cj2);
IkReal x8720=((1.0)*x8712);
evalcond[0]=((((-1.0)*r22*x8716))+(((-1.0)*gconst149*r20*x8720))+((r21*x8718)));
evalcond[1]=((((-1.0)*gconst149*r10*x8720))+cj0+(((-1.0)*r12*x8716))+((x8712*x8714)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8716))+((r01*x8718))+(((-1.0)*gconst149*r00*x8720)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8716))+((cj1*sj2))+((r20*x8717))+(((-1.0)*r22*x8720)));
evalcond[4]=(((cj0*x8715))+(((-1.0)*gconst148*r01*x8716))+((r00*x8717))+(((-1.0)*cj0*x8719))+(((-1.0)*r02*x8720)));
evalcond[5]=((((-1.0)*sj0*x8719))+(((-1.0)*x8714*x8716))+((sj0*x8715))+((r10*x8717))+(((-1.0)*r12*x8720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8721=((1.0)*gconst149);
CheckValue<IkReal> x8722=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8721)))),-1);
if(!x8722.valid){
continue;
}
CheckValue<IkReal> x8723 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8721))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8722.value)))+(x8723.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8724=IKsin(j4);
IkReal x8725=IKcos(j4);
IkReal x8726=(gconst148*r11);
IkReal x8727=(sj1*sj2);
IkReal x8728=((1.0)*x8725);
IkReal x8729=(gconst149*x8725);
IkReal x8730=(gconst148*x8724);
IkReal x8731=((1.0)*cj1*cj2);
IkReal x8732=((1.0)*x8724);
evalcond[0]=(((r21*x8730))+(((-1.0)*gconst149*r20*x8732))+(((-1.0)*r22*x8728)));
evalcond[1]=((((-1.0)*gconst149*r10*x8732))+cj0+((x8724*x8726))+(((-1.0)*r12*x8728)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8732))+(((-1.0)*r02*x8728))+((r01*x8730)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8728))+((cj1*sj2))+((r20*x8729))+(((-1.0)*r22*x8732)));
evalcond[4]=((((-1.0)*cj0*x8731))+((cj0*x8727))+(((-1.0)*gconst148*r01*x8728))+(((-1.0)*r02*x8732))+((r00*x8729)));
evalcond[5]=(((r10*x8729))+(((-1.0)*x8726*x8728))+(((-1.0)*sj0*x8731))+(((-1.0)*r12*x8732))+((sj0*x8727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8733=((1.0)*gconst149);
CheckValue<IkReal> x8734 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8733))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8734.valid){
continue;
}
CheckValue<IkReal> x8735=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8733)))),-1);
if(!x8735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8734.value)+(((1.5707963267949)*(x8735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8736=IKsin(j4);
IkReal x8737=IKcos(j4);
IkReal x8738=(gconst148*r11);
IkReal x8739=(sj1*sj2);
IkReal x8740=((1.0)*x8737);
IkReal x8741=(gconst149*x8737);
IkReal x8742=(gconst148*x8736);
IkReal x8743=((1.0)*cj1*cj2);
IkReal x8744=((1.0)*x8736);
evalcond[0]=((((-1.0)*gconst149*r20*x8744))+(((-1.0)*r22*x8740))+((r21*x8742)));
evalcond[1]=(cj0+(((-1.0)*r12*x8740))+(((-1.0)*gconst149*r10*x8744))+((x8736*x8738)));
evalcond[2]=((((-1.0)*gconst149*r00*x8744))+((r01*x8742))+(((-1.0)*sj0))+(((-1.0)*r02*x8740)));
evalcond[3]=(((cj2*sj1))+((r20*x8741))+((cj1*sj2))+(((-1.0)*r22*x8744))+(((-1.0)*gconst148*r21*x8740)));
evalcond[4]=(((r00*x8741))+(((-1.0)*cj0*x8743))+((cj0*x8739))+(((-1.0)*gconst148*r01*x8740))+(((-1.0)*r02*x8744)));
evalcond[5]=((((-1.0)*r12*x8744))+(((-1.0)*x8738*x8740))+(((-1.0)*sj0*x8743))+((r10*x8741))+((sj0*x8739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8745=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8745;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8745);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8746=((1.0)*cj5);
IkReal x8747=((((-1.0)*r11*x8746))+(((-1.0)*r10*sj5)));
j4eval[0]=x8747;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8746)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8747);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8748=cj5*cj5;
IkReal x8749=r01*r01;
IkReal x8750=(r01*sj5);
IkReal x8751=(cj5*r00);
IkReal x8752=(((x8748*x8749))+(((-1.0)*(r02*r02)))+(((-1.0)*x8748*(r00*r00)))+(((2.0)*x8750*x8751))+(((-1.0)*x8749)));
j4eval[0]=x8752;
j4eval[1]=IKsign(x8752);
j4eval[2]=((IKabs(r02))+(IKabs((x8751+(((-1.0)*x8750))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8753=cj5*cj5;
IkReal x8754=r01*r01;
IkReal x8755=(r01*sj5);
IkReal x8756=(cj5*r00);
CheckValue<IkReal> x8757=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x8753*x8754))+(((-1.0)*x8753*(r00*r00)))+(((2.0)*x8755*x8756))+(((-1.0)*x8754)))),-1);
if(!x8757.valid){
continue;
}
CheckValue<IkReal> x8758 = IKatan2WithCheck(IkReal((x8756+(((-1.0)*x8755)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8757.value)))+(x8758.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8759=IKsin(j4);
IkReal x8760=IKcos(j4);
IkReal x8761=(cj5*r10);
IkReal x8762=(r01*sj5);
IkReal x8763=(cj5*r00);
IkReal x8764=(cj5*r20);
IkReal x8765=((1.0)*x8760);
IkReal x8766=((1.0)*x8759);
IkReal x8767=(sj5*x8759);
evalcond[0]=((((-1.0)*r22*x8765))+((r21*x8767))+(((-1.0)*x8764*x8766)));
evalcond[1]=((((-1.0)*x8761*x8766))+(((-1.0)*r12*x8765))+((r11*x8767)));
evalcond[2]=((((-1.0)*r02*x8766))+((x8760*x8763))+(((-1.0)*x8762*x8765)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8765))+((x8759*x8762))+(((-1.0)*x8763*x8766)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8760*x8764))+(((-1.0)*r22*x8766))+(((-1.0)*r21*sj5*x8765)));
evalcond[5]=((((-1.0)*r11*sj5*x8765))+((x8760*x8761))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8768=((1.0)*cj5);
CheckValue<IkReal> x8769=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8768)))),-1);
if(!x8769.valid){
continue;
}
CheckValue<IkReal> x8770 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8768))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8769.value)))+(x8770.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8771=IKsin(j4);
IkReal x8772=IKcos(j4);
IkReal x8773=(cj5*r10);
IkReal x8774=(r01*sj5);
IkReal x8775=(cj5*r00);
IkReal x8776=(cj5*r20);
IkReal x8777=((1.0)*x8772);
IkReal x8778=((1.0)*x8771);
IkReal x8779=(sj5*x8771);
evalcond[0]=((((-1.0)*x8776*x8778))+(((-1.0)*r22*x8777))+((r21*x8779)));
evalcond[1]=((((-1.0)*x8773*x8778))+(((-1.0)*r12*x8777))+((r11*x8779)));
evalcond[2]=(((x8772*x8775))+(((-1.0)*r02*x8778))+(((-1.0)*x8774*x8777)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8777))+((x8771*x8774))+(((-1.0)*x8775*x8778)));
evalcond[4]=(((x8772*x8776))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8778))+(((-1.0)*r21*sj5*x8777)));
evalcond[5]=(((x8772*x8773))+(((-1.0)*r11*sj5*x8777))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8780=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8780.valid){
continue;
}
CheckValue<IkReal> x8781 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8780.value)))+(x8781.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8782=IKsin(j4);
IkReal x8783=IKcos(j4);
IkReal x8784=(cj5*r10);
IkReal x8785=(r01*sj5);
IkReal x8786=(cj5*r00);
IkReal x8787=(cj5*r20);
IkReal x8788=((1.0)*x8783);
IkReal x8789=((1.0)*x8782);
IkReal x8790=(sj5*x8782);
evalcond[0]=(((r21*x8790))+(((-1.0)*x8787*x8789))+(((-1.0)*r22*x8788)));
evalcond[1]=(((r11*x8790))+(((-1.0)*x8784*x8789))+(((-1.0)*r12*x8788)));
evalcond[2]=((((-1.0)*x8785*x8788))+((x8783*x8786))+(((-1.0)*r02*x8789)));
evalcond[3]=((-1.0)+(((-1.0)*x8786*x8789))+(((-1.0)*r02*x8788))+((x8782*x8785)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8783*x8787))+(((-1.0)*r22*x8789))+(((-1.0)*r21*sj5*x8788)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8783*x8784))+(((-1.0)*r12*x8789))+(((-1.0)*r11*sj5*x8788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8791=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8791;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8791);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8792=((1.0)*cj5);
IkReal x8793=((((-1.0)*r21*x8792))+(((-1.0)*r20*sj5)));
j4eval[0]=x8793;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8792))))));
j4eval[2]=IKsign(x8793);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8794=cj5*cj5;
IkReal x8795=r01*r01;
IkReal x8796=(cj5*r00);
IkReal x8797=(r01*sj5);
IkReal x8798=(x8795+(((-2.0)*x8796*x8797))+((x8794*(r00*r00)))+(((-1.0)*x8794*x8795))+(r02*r02));
j4eval[0]=x8798;
j4eval[1]=((IKabs(r02))+(IKabs((x8796+(((-1.0)*x8797))))));
j4eval[2]=IKsign(x8798);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8799=cj5*cj5;
IkReal x8800=r01*r01;
IkReal x8801=(r01*sj5);
IkReal x8802=(cj5*r00);
CheckValue<IkReal> x8803=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8801*x8802))+x8800+((x8799*(r00*r00)))+(((-1.0)*x8799*x8800))+(r02*r02))),-1);
if(!x8803.valid){
continue;
}
CheckValue<IkReal> x8804 = IKatan2WithCheck(IkReal(((((-1.0)*x8801))+x8802)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8803.value)))+(x8804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8805=IKsin(j4);
IkReal x8806=IKcos(j4);
IkReal x8807=(cj5*r10);
IkReal x8808=(r01*sj5);
IkReal x8809=(cj5*r00);
IkReal x8810=(cj5*r20);
IkReal x8811=((1.0)*x8806);
IkReal x8812=((1.0)*x8805);
IkReal x8813=(sj5*x8805);
evalcond[0]=(((r21*x8813))+(((-1.0)*r22*x8811))+(((-1.0)*x8810*x8812)));
evalcond[1]=((((-1.0)*r12*x8811))+(((-1.0)*x8807*x8812))+((r11*x8813)));
evalcond[2]=((((-1.0)*r02*x8812))+((x8806*x8809))+(((-1.0)*x8808*x8811)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8811))+(((-1.0)*x8809*x8812))+((x8805*x8808)));
evalcond[4]=((((-1.0)*r22*x8812))+((cj2*sj1))+((x8806*x8810))+((cj1*sj2))+(((-1.0)*r21*sj5*x8811)));
evalcond[5]=((((-1.0)*r12*x8812))+((x8806*x8807))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8814=((1.0)*cj5);
CheckValue<IkReal> x8815=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8814))+(((-1.0)*r20*sj5)))),-1);
if(!x8815.valid){
continue;
}
CheckValue<IkReal> x8816 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8814))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8815.value)))+(x8816.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8817=IKsin(j4);
IkReal x8818=IKcos(j4);
IkReal x8819=(cj5*r10);
IkReal x8820=(r01*sj5);
IkReal x8821=(cj5*r00);
IkReal x8822=(cj5*r20);
IkReal x8823=((1.0)*x8818);
IkReal x8824=((1.0)*x8817);
IkReal x8825=(sj5*x8817);
evalcond[0]=(((r21*x8825))+(((-1.0)*x8822*x8824))+(((-1.0)*r22*x8823)));
evalcond[1]=((((-1.0)*r12*x8823))+((r11*x8825))+(((-1.0)*x8819*x8824)));
evalcond[2]=((((-1.0)*r02*x8824))+(((-1.0)*x8820*x8823))+((x8818*x8821)));
evalcond[3]=((1.0)+(((-1.0)*x8821*x8824))+((x8817*x8820))+(((-1.0)*r02*x8823)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8823))+((x8818*x8822))+(((-1.0)*r22*x8824)));
evalcond[5]=((((-1.0)*r11*sj5*x8823))+(((-1.0)*r12*x8824))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x8818*x8819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8826 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8826.valid){
continue;
}
CheckValue<IkReal> x8827=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8826.value)+(((1.5707963267949)*(x8827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8828=IKsin(j4);
IkReal x8829=IKcos(j4);
IkReal x8830=(cj5*r10);
IkReal x8831=(r01*sj5);
IkReal x8832=(cj5*r00);
IkReal x8833=(cj5*r20);
IkReal x8834=((1.0)*x8829);
IkReal x8835=((1.0)*x8828);
IkReal x8836=(sj5*x8828);
evalcond[0]=((((-1.0)*x8833*x8835))+((r21*x8836))+(((-1.0)*r22*x8834)));
evalcond[1]=(((r11*x8836))+(((-1.0)*x8830*x8835))+(((-1.0)*r12*x8834)));
evalcond[2]=((((-1.0)*r02*x8835))+(((-1.0)*x8831*x8834))+((x8829*x8832)));
evalcond[3]=((1.0)+((x8828*x8831))+(((-1.0)*x8832*x8835))+(((-1.0)*r02*x8834)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8834))+(((-1.0)*r22*x8835))+((x8829*x8833)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8834))+(((-1.0)*r12*x8835))+((x8829*x8830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8837=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8837);
rxp1_1=(px*r21);
rxp1_2=(r11*x8837);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8838=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8838);
rxp1_1=(px*r21);
rxp1_2=(r11*x8838);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8839=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8839);
rxp1_1=(px*r21);
rxp1_2=(r11*x8839);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8842=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8842.valid){
continue;
}
IkReal x8840=x8842.value;
IkReal x8841=(sj0*x8840);
cj4array[0]=((((-1.0)*sj1*sj2*x8841))+((cj1*cj2*x8841)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8843=IKsin(j4);
IkReal x8844=IKcos(j4);
IkReal x8845=(r21*sj5);
IkReal x8846=(cj5*r20);
IkReal x8847=((1.0)*x8843);
IkReal x8848=((1.0)*x8844);
evalcond[0]=((-1.0)*r02*x8843);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8848)));
evalcond[2]=(((x8843*x8845))+(((-1.0)*x8846*x8847)));
evalcond[3]=((((-1.0)*cj5*r10*x8847))+((r11*sj5*x8843)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8845*x8848))+((x8844*x8846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8851=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8851.valid){
continue;
}
IkReal x8849=x8851.value;
IkReal x8850=((1.0)*x8849);
cj4array[0]=((((-1.0)*cj1*sj2*x8850))+(((-1.0)*cj2*sj1*x8850)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8852=IKsin(j4);
IkReal x8853=IKcos(j4);
IkReal x8854=(r11*sj5);
IkReal x8855=((1.0)*sj0);
IkReal x8856=((1.0)*x8853);
IkReal x8857=((1.0)*cj5*x8852);
evalcond[0]=((-1.0)*r02*x8852);
evalcond[1]=((((-1.0)*x8855))+(((-1.0)*r02*x8856)));
evalcond[2]=(((r21*sj5*x8852))+(((-1.0)*r20*x8857)));
evalcond[3]=((((-1.0)*r10*x8857))+((x8852*x8854)));
evalcond[4]=(((cj5*r10*x8853))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x8855))+(((-1.0)*x8854*x8856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8858=IKPowWithIntegerCheck(r02,-1);
if(!x8858.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8858.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8859=IKsin(j4);
IkReal x8860=IKcos(j4);
IkReal x8861=(cj5*x8860);
IkReal x8862=(sj5*x8859);
IkReal x8863=((1.0)*sj5*x8860);
IkReal x8864=((1.0)*cj5*x8859);
evalcond[0]=((-1.0)*r02*x8859);
evalcond[1]=(((r21*x8862))+(((-1.0)*r20*x8864)));
evalcond[2]=((((-1.0)*r10*x8864))+((r11*x8862)));
evalcond[3]=(((cj2*sj1))+((r20*x8861))+((cj1*sj2))+(((-1.0)*r21*x8863)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r11*x8863))+((r10*x8861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8865=((1.0)*sj0);
IkReal x8866=((1.0)*cj0);
CheckValue<IkReal> x8867 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8865))+(((-1.0)*r02*x8866)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x8865))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8866)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8867.valid){
continue;
}
CheckValue<IkReal> x8868=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8867.value)+(((1.5707963267949)*(x8868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8869=IKsin(j4);
IkReal x8870=IKcos(j4);
IkReal x8871=(cj5*r10);
IkReal x8872=(sj1*sj2);
IkReal x8873=(r01*sj5);
IkReal x8874=(cj5*r00);
IkReal x8875=(cj5*r20);
IkReal x8876=((1.0)*x8870);
IkReal x8877=((1.0)*cj1*cj2);
IkReal x8878=((1.0)*x8869);
IkReal x8879=(sj5*x8869);
evalcond[0]=((((-1.0)*x8875*x8878))+(((-1.0)*r22*x8876))+((r21*x8879)));
evalcond[1]=((((-1.0)*x8871*x8878))+cj0+((r11*x8879))+(((-1.0)*r12*x8876)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8876))+((x8869*x8873))+(((-1.0)*x8874*x8878)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8876))+(((-1.0)*r22*x8878))+((cj1*sj2))+((x8870*x8875)));
evalcond[4]=((((-1.0)*x8873*x8876))+(((-1.0)*r02*x8878))+(((-1.0)*cj0*x8877))+((cj0*x8872))+((x8870*x8874)));
evalcond[5]=((((-1.0)*r11*sj5*x8876))+(((-1.0)*r12*x8878))+(((-1.0)*sj0*x8877))+((sj0*x8872))+((x8870*x8871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8880=((1.0)*cj5);
CheckValue<IkReal> x8881=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8880))+(((-1.0)*r10*sj5)))),-1);
if(!x8881.valid){
continue;
}
CheckValue<IkReal> x8882 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8880))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8881.value)))+(x8882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8883=IKsin(j4);
IkReal x8884=IKcos(j4);
IkReal x8885=(cj5*r10);
IkReal x8886=(sj1*sj2);
IkReal x8887=(r01*sj5);
IkReal x8888=(cj5*r00);
IkReal x8889=(cj5*r20);
IkReal x8890=((1.0)*x8884);
IkReal x8891=((1.0)*cj1*cj2);
IkReal x8892=((1.0)*x8883);
IkReal x8893=(sj5*x8883);
evalcond[0]=((((-1.0)*x8889*x8892))+((r21*x8893))+(((-1.0)*r22*x8890)));
evalcond[1]=(cj0+(((-1.0)*x8885*x8892))+(((-1.0)*r12*x8890))+((r11*x8893)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8890))+(((-1.0)*x8888*x8892))+((x8883*x8887)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8890))+((x8884*x8889))+(((-1.0)*r22*x8892)));
evalcond[4]=((((-1.0)*cj0*x8891))+((x8884*x8888))+(((-1.0)*x8887*x8890))+(((-1.0)*r02*x8892))+((cj0*x8886)));
evalcond[5]=((((-1.0)*sj0*x8891))+((x8884*x8885))+(((-1.0)*r11*sj5*x8890))+((sj0*x8886))+(((-1.0)*r12*x8892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8894=((1.0)*cj5);
CheckValue<IkReal> x8895 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8894))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8895.valid){
continue;
}
CheckValue<IkReal> x8896=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8894))+(((-1.0)*r00*sj5)))),-1);
if(!x8896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8895.value)+(((1.5707963267949)*(x8896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8897=IKsin(j4);
IkReal x8898=IKcos(j4);
IkReal x8899=(cj5*r10);
IkReal x8900=(sj1*sj2);
IkReal x8901=(r01*sj5);
IkReal x8902=(cj5*r00);
IkReal x8903=(cj5*r20);
IkReal x8904=((1.0)*x8898);
IkReal x8905=((1.0)*cj1*cj2);
IkReal x8906=((1.0)*x8897);
IkReal x8907=(sj5*x8897);
evalcond[0]=((((-1.0)*x8903*x8906))+((r21*x8907))+(((-1.0)*r22*x8904)));
evalcond[1]=((((-1.0)*x8899*x8906))+((r11*x8907))+cj0+(((-1.0)*r12*x8904)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8902*x8906))+((x8897*x8901))+(((-1.0)*r02*x8904)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8904))+((cj1*sj2))+(((-1.0)*r22*x8906))+((x8898*x8903)));
evalcond[4]=((((-1.0)*x8901*x8904))+(((-1.0)*r02*x8906))+((cj0*x8900))+(((-1.0)*cj0*x8905))+((x8898*x8902)));
evalcond[5]=((((-1.0)*r11*sj5*x8904))+((sj0*x8900))+(((-1.0)*r12*x8906))+(((-1.0)*sj0*x8905))+((x8898*x8899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8908=cj1*cj1;
IkReal x8909=cj2*cj2;
IkReal x8910=(r10*sj5);
IkReal x8911=(cj1*px);
IkReal x8912=((98000.0)*cj2);
IkReal x8913=(r00*sj5);
IkReal x8914=(cj5*r11);
IkReal x8915=(cj5*r01);
IkReal x8916=((10625.0)*cj1);
IkReal x8917=(sj1*sj2);
IkReal x8918=(cj1*py);
IkReal x8919=((9800.0)*x8917);
IkReal x8920=((9800.0)*cj1*cj2);
CheckValue<IkReal> x8921=IKPowWithIntegerCheck(IKsign(((42905.0)+(((83300.0)*cj2*x8908))+(((76832.0)*x8908*x8909))+(((-38416.0)*x8909))+(((-83300.0)*cj1*x8917))+(((-76832.0)*cj1*cj2*x8917))+(((6740.25)*x8908)))),-1);
if(!x8921.valid){
continue;
}
CheckValue<IkReal> x8922 = IKatan2WithCheck(IkReal((((x8910*x8916))+(((106250.0)*x8918))+((x8914*x8920))+((x8914*x8916))+(((-1.0)*x8910*x8919))+(((-1.0)*x8914*x8919))+(((-3350.0)*x8915))+(((-3350.0)*x8913))+(((-33500.0)*px))+((x8912*x8918))+(((-98000.0)*py*x8917))+((x8910*x8920)))),IkReal((((x8913*x8916))+((x8911*x8912))+((x8915*x8916))+((x8913*x8920))+(((106250.0)*x8911))+(((33500.0)*py))+((x8915*x8920))+(((-98000.0)*px*x8917))+(((-1.0)*x8915*x8919))+(((-1.0)*x8913*x8919))+(((3350.0)*x8910))+(((3350.0)*x8914)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8922.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8921.value)))+(x8922.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8923=IKcos(j0);
IkReal x8924=IKsin(j0);
IkReal x8925=((0.1)*sj5);
IkReal x8926=((0.425)*cj1);
IkReal x8927=((0.1)*cj5);
IkReal x8928=((0.392)*cj1*cj2);
IkReal x8929=((0.392)*sj1*sj2);
evalcond[0]=(((x8923*x8926))+((x8923*x8928))+(((-0.134)*x8924))+(((-1.0)*px))+(((-1.0)*r00*x8925))+(((-1.0)*r01*x8927))+(((-1.0)*x8923*x8929)));
evalcond[1]=(((x8924*x8926))+((x8924*x8928))+(((0.134)*x8923))+(((-1.0)*py))+(((-1.0)*r11*x8927))+(((-1.0)*r10*x8925))+(((-1.0)*x8924*x8929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8930=((1.0)*cj5);
IkReal x8931=((((-1.0)*r01*x8930))+(((-1.0)*r00*sj5)));
j4eval[0]=x8931;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8930)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8931);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8932=((1.0)*cj5);
IkReal x8933=((((-1.0)*r11*x8932))+(((-1.0)*r10*sj5)));
j4eval[0]=x8933;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8932))))));
j4eval[2]=IKsign(x8933);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8934=((1.0)*sj0);
IkReal x8935=((1.0)*cj0);
IkReal x8936=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8936;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8935))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8934)))))+(IKabs(((((-1.0)*r12*x8934))+(((-1.0)*r02*x8935))))));
j4eval[2]=IKsign(x8936);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8937=((-1.0)*r20);
IkReal x8939 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8939)==0){
continue;
}
IkReal x8938=pow(x8939,-0.5);
CheckValue<IkReal> x8940 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8937),IKFAST_ATAN2_MAGTHRESH);
if(!x8940.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8940.value));
IkReal gconst1=(r21*x8938);
IkReal gconst2=(x8937*x8938);
CheckValue<IkReal> x8941 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8941.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8941.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8942=((-1.0)*r20);
IkReal x8943=x8938;
CheckValue<IkReal> x8945 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8942),IKFAST_ATAN2_MAGTHRESH);
if(!x8945.valid){
continue;
}
IkReal x8944=((-1.0)*(x8945.value));
sj5=gconst1;
cj5=gconst2;
j5=x8944;
IkReal gconst0=x8944;
IkReal gconst1=(r21*x8943);
IkReal gconst2=(x8942*x8943);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8946=((-1.0)*r20);
IkReal x8947=x8938;
CheckValue<IkReal> x8949 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8946),IKFAST_ATAN2_MAGTHRESH);
if(!x8949.valid){
continue;
}
IkReal x8948=((-1.0)*(x8949.value));
sj5=gconst1;
cj5=gconst2;
j5=x8948;
IkReal gconst0=x8948;
IkReal gconst1=(r21*x8947);
IkReal gconst2=(x8946*x8947);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8950=((-1.0)*r20);
IkReal x8951=x8938;
CheckValue<IkReal> x8953 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8950),IKFAST_ATAN2_MAGTHRESH);
if(!x8953.valid){
continue;
}
IkReal x8952=((-1.0)*(x8953.value));
sj5=gconst1;
cj5=gconst2;
j5=x8952;
IkReal gconst0=x8952;
IkReal gconst1=(r21*x8951);
IkReal gconst2=(x8950*x8951);
IkReal x8954=r22*r22;
CheckValue<IkReal> x8958=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8954))),-1);
if(!x8958.valid){
continue;
}
IkReal x8955=x8958.value;
IkReal x8956=(sj3*x8955);
IkReal x8957=((((2.0)*x8956*(r20*r20)*(r21*r21)))+((x8956*(r21*r21*r21*r21)))+((x8956*(r20*r20*r20*r20)))+((sj3*x8954)));
j4eval[0]=x8957;
j4eval[1]=IKsign(x8957);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8959=((-1.0)*r20);
IkReal x8960=x8938;
CheckValue<IkReal> x8962 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8959),IKFAST_ATAN2_MAGTHRESH);
if(!x8962.valid){
continue;
}
IkReal x8961=((-1.0)*(x8962.value));
sj5=gconst1;
cj5=gconst2;
j5=x8961;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8961;
IkReal gconst1=(r21*x8960);
IkReal gconst2=(x8959*x8960);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8963=((-1.0)*r20);
IkReal x8964=x8938;
CheckValue<IkReal> x8966 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8963),IKFAST_ATAN2_MAGTHRESH);
if(!x8966.valid){
continue;
}
IkReal x8965=((-1.0)*(x8966.value));
sj5=gconst1;
cj5=gconst2;
j5=x8965;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8965;
IkReal gconst1=(r21*x8964);
IkReal gconst2=(x8963*x8964);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8967=((-1.0)*r20);
IkReal x8968=x8938;
CheckValue<IkReal> x8970 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8967),IKFAST_ATAN2_MAGTHRESH);
if(!x8970.valid){
continue;
}
IkReal x8969=((-1.0)*(x8970.value));
sj5=gconst1;
cj5=gconst2;
j5=x8969;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8969;
IkReal gconst1=(r21*x8968);
IkReal gconst2=(x8967*x8968);
IkReal x8971=((1.0)*(r22*r22));
CheckValue<IkReal> x8975=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8971))),-1);
if(!x8975.valid){
continue;
}
IkReal x8972=x8975.value;
IkReal x8973=((1.0)*x8972);
IkReal x8974=((((-2.0)*x8972*(r20*r20)*(r21*r21)))+(((-1.0)*x8971))+(((-1.0)*x8973*(r21*r21*r21*r21)))+(((-1.0)*x8973*(r20*r20*r20*r20))));
j4eval[0]=x8974;
j4eval[1]=IKsign(x8974);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8976=((-1.0)*r20);
IkReal x8977=x8938;
CheckValue<IkReal> x8979 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8976),IKFAST_ATAN2_MAGTHRESH);
if(!x8979.valid){
continue;
}
IkReal x8978=((-1.0)*(x8979.value));
sj5=gconst1;
cj5=gconst2;
j5=x8978;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8978;
IkReal gconst1=(r21*x8977);
IkReal gconst2=(x8976*x8977);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8980=((-1.0)*r20);
IkReal x8981=x8938;
CheckValue<IkReal> x8983 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8980),IKFAST_ATAN2_MAGTHRESH);
if(!x8983.valid){
continue;
}
IkReal x8982=((-1.0)*(x8983.value));
sj5=gconst1;
cj5=gconst2;
j5=x8982;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8982;
IkReal gconst1=(r21*x8981);
IkReal gconst2=(x8980*x8981);
IkReal x8984=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8988=IKPowWithIntegerCheck(x8984,-1);
if(!x8988.valid){
continue;
}
IkReal x8985=x8988.value;
IkReal x8986=((1.0)*x8985);
IkReal x8987=((((-1.0)*x8986*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x8985))+(((-1.0)*(r12*r12)))+(((-1.0)*x8986*(r11*r11)*(r21*r21))));
j4eval[0]=x8987;
j4eval[1]=r12;
j4eval[2]=x8984;
j4eval[3]=IKsign(x8987);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8989=((-1.0)*r20);
IkReal x8990=x8938;
CheckValue<IkReal> x8992 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8989),IKFAST_ATAN2_MAGTHRESH);
if(!x8992.valid){
continue;
}
IkReal x8991=((-1.0)*(x8992.value));
sj5=gconst1;
cj5=gconst2;
j5=x8991;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8991;
IkReal gconst1=(r21*x8990);
IkReal gconst2=(x8989*x8990);
IkReal x8993=r22*r22;
IkReal x8994=(cj1*r12*sj2);
IkReal x8995=(cj2*r12*sj1);
CheckValue<IkReal> x8999=IKPowWithIntegerCheck(((-1.0)+x8993),-1);
if(!x8999.valid){
continue;
}
IkReal x8996=x8999.value;
if((((1.0)+(((-1.0)*x8993)))) < -0.00001)
continue;
IkReal x8997=IKsqrt(((1.0)+(((-1.0)*x8993))));
IkReal x8998=(r22*x8996*x8997);
j4eval[0]=((IKabs(((((-1.0)*x8994))+(((-1.0)*x8995)))))+(IKabs((((x8995*x8998))+((x8994*x8998))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9000=(cj1*sj2);
IkReal x9001=(cj2*sj1);
IkReal x9002=((1.0)*r12);
IkReal x9003=(gconst1*r11);
IkReal x9004=((1.0)*gconst2*r10);
CheckValue<IkReal> x9005=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9005.valid){
continue;
}
CheckValue<IkReal> x9006 = IKatan2WithCheck(IkReal((((x9001*x9003))+((x9000*x9003))+(((-1.0)*x9001*x9004))+(((-1.0)*x9000*x9004)))),IkReal(((((-1.0)*x9001*x9002))+(((-1.0)*x9000*x9002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9005.value)))+(x9006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9007=IKcos(j4);
IkReal x9008=IKsin(j4);
IkReal x9009=((1.0)*x9007);
IkReal x9010=(gconst1*x9007);
IkReal x9011=(gconst1*x9008);
IkReal x9012=((1.0)*gconst2*x9008);
evalcond[0]=((((-1.0)*gconst2*r10*x9009))+((r12*x9008))+((r11*x9010)));
evalcond[1]=((((-1.0)*r22*x9009))+(((-1.0)*r20*x9012))+((r21*x9011)));
evalcond[2]=((((-1.0)*r02*x9009))+(((-1.0)*r00*x9012))+((r01*x9011)));
evalcond[3]=((1.0)+(((-1.0)*r10*x9012))+(((-1.0)*r12*x9009))+((r11*x9011)));
evalcond[4]=(((cj2*sj1))+((r22*x9008))+((cj1*sj2))+((r21*x9010))+(((-1.0)*gconst2*r20*x9009)));
evalcond[5]=(((r02*x9008))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9009))+((r01*x9010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9013=(gconst2*r10);
IkReal x9014=(gconst1*r11);
CheckValue<IkReal> x9015 = IKatan2WithCheck(IkReal(((((-1.0)*x9013))+x9014)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9015.valid){
continue;
}
CheckValue<IkReal> x9016=IKPowWithIntegerCheck(IKsign(((((2.0)*x9013*x9014))+(((-1.0)*(x9013*x9013)))+(((-1.0)*(x9014*x9014)))+(((-1.0)*(r12*r12))))),-1);
if(!x9016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9015.value)+(((1.5707963267949)*(x9016.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9017=IKcos(j4);
IkReal x9018=IKsin(j4);
IkReal x9019=((1.0)*x9017);
IkReal x9020=(gconst1*x9017);
IkReal x9021=(gconst1*x9018);
IkReal x9022=((1.0)*gconst2*x9018);
evalcond[0]=(((r12*x9018))+((r11*x9020))+(((-1.0)*gconst2*r10*x9019)));
evalcond[1]=((((-1.0)*r22*x9019))+((r21*x9021))+(((-1.0)*r20*x9022)));
evalcond[2]=(((r01*x9021))+(((-1.0)*r02*x9019))+(((-1.0)*r00*x9022)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9019))+((r11*x9021))+(((-1.0)*r10*x9022)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9019))+((cj1*sj2))+((r21*x9020))+((r22*x9018)));
evalcond[5]=(((r01*x9020))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x9018))+(((-1.0)*gconst2*r00*x9019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9023=((1.0)*gconst2);
CheckValue<IkReal> x9024 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9023))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9024.valid){
continue;
}
CheckValue<IkReal> x9025=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9023)))),-1);
if(!x9025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9024.value)+(((1.5707963267949)*(x9025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9026=IKcos(j4);
IkReal x9027=IKsin(j4);
IkReal x9028=((1.0)*x9026);
IkReal x9029=(gconst1*x9026);
IkReal x9030=(gconst1*x9027);
IkReal x9031=((1.0)*gconst2*x9027);
evalcond[0]=((((-1.0)*gconst2*r10*x9028))+((r11*x9029))+((r12*x9027)));
evalcond[1]=(((r21*x9030))+(((-1.0)*r20*x9031))+(((-1.0)*r22*x9028)));
evalcond[2]=(((r01*x9030))+(((-1.0)*r00*x9031))+(((-1.0)*r02*x9028)));
evalcond[3]=((1.0)+(((-1.0)*r10*x9031))+(((-1.0)*r12*x9028))+((r11*x9030)));
evalcond[4]=((((-1.0)*gconst2*r20*x9028))+((cj2*sj1))+((cj1*sj2))+((r21*x9029))+((r22*x9027)));
evalcond[5]=((((-1.0)*gconst2*r00*x9028))+((r01*x9029))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x9027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9032=((-1.0)*r20);
IkReal x9033=x8938;
CheckValue<IkReal> x9035 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9032),IKFAST_ATAN2_MAGTHRESH);
if(!x9035.valid){
continue;
}
IkReal x9034=((-1.0)*(x9035.value));
sj5=gconst1;
cj5=gconst2;
j5=x9034;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9034;
IkReal gconst1=(r21*x9033);
IkReal gconst2=(x9032*x9033);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9036=((-1.0)*r20);
IkReal x9037=x8938;
CheckValue<IkReal> x9039 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9036),IKFAST_ATAN2_MAGTHRESH);
if(!x9039.valid){
continue;
}
IkReal x9038=((-1.0)*(x9039.value));
sj5=gconst1;
cj5=gconst2;
j5=x9038;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9038;
IkReal gconst1=(r21*x9037);
IkReal gconst2=(x9036*x9037);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9040=((-1.0)*r20);
IkReal x9041=x8938;
CheckValue<IkReal> x9043 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9040),IKFAST_ATAN2_MAGTHRESH);
if(!x9043.valid){
continue;
}
IkReal x9042=((-1.0)*(x9043.value));
sj5=gconst1;
cj5=gconst2;
j5=x9042;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9042;
IkReal gconst1=(r21*x9041);
IkReal gconst2=(x9040*x9041);
IkReal x9044=r22*r22;
IkReal x9045=(cj1*r12*sj2);
IkReal x9046=(cj2*r12*sj1);
CheckValue<IkReal> x9050=IKPowWithIntegerCheck(((-1.0)+x9044),-1);
if(!x9050.valid){
continue;
}
IkReal x9047=x9050.value;
if((((1.0)+(((-1.0)*x9044)))) < -0.00001)
continue;
IkReal x9048=IKsqrt(((1.0)+(((-1.0)*x9044))));
IkReal x9049=(r22*x9047*x9048);
j4eval[0]=((IKabs(((((-1.0)*x9046))+(((-1.0)*x9045)))))+(IKabs((((x9045*x9049))+((x9046*x9049))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9051=(cj1*sj2);
IkReal x9052=(cj2*sj1);
IkReal x9053=((1.0)*r12);
IkReal x9054=(gconst1*r11);
IkReal x9055=((1.0)*gconst2*r10);
CheckValue<IkReal> x9056 = IKatan2WithCheck(IkReal((((x9051*x9054))+((x9052*x9054))+(((-1.0)*x9051*x9055))+(((-1.0)*x9052*x9055)))),IkReal(((((-1.0)*x9051*x9053))+(((-1.0)*x9052*x9053)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9056.valid){
continue;
}
CheckValue<IkReal> x9057=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9056.value)+(((1.5707963267949)*(x9057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9058=IKcos(j4);
IkReal x9059=IKsin(j4);
IkReal x9060=((1.0)*x9058);
IkReal x9061=(gconst1*x9058);
IkReal x9062=(gconst1*x9059);
IkReal x9063=((1.0)*gconst2*x9059);
evalcond[0]=(((r11*x9061))+((r12*x9059))+(((-1.0)*gconst2*r10*x9060)));
evalcond[1]=((((-1.0)*r20*x9063))+((r21*x9062))+(((-1.0)*r22*x9060)));
evalcond[2]=(((r01*x9062))+(((-1.0)*r02*x9060))+(((-1.0)*r00*x9063)));
evalcond[3]=((-1.0)+((r11*x9062))+(((-1.0)*r10*x9063))+(((-1.0)*r12*x9060)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9060))+((r21*x9061))+((r22*x9059)));
evalcond[5]=(((r01*x9061))+(((-1.0)*gconst2*r00*x9060))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x9059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9064=(gconst1*r11);
IkReal x9065=(gconst2*r10);
CheckValue<IkReal> x9066=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9064*x9065))+(x9064*x9064)+(x9065*x9065))),-1);
if(!x9066.valid){
continue;
}
CheckValue<IkReal> x9067 = IKatan2WithCheck(IkReal((x9064+(((-1.0)*x9065)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9066.value)))+(x9067.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9068=IKcos(j4);
IkReal x9069=IKsin(j4);
IkReal x9070=((1.0)*x9068);
IkReal x9071=(gconst1*x9068);
IkReal x9072=(gconst1*x9069);
IkReal x9073=((1.0)*gconst2*x9069);
evalcond[0]=(((r12*x9069))+(((-1.0)*gconst2*r10*x9070))+((r11*x9071)));
evalcond[1]=(((r21*x9072))+(((-1.0)*r22*x9070))+(((-1.0)*r20*x9073)));
evalcond[2]=((((-1.0)*r02*x9070))+(((-1.0)*r00*x9073))+((r01*x9072)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9070))+((r11*x9072))+(((-1.0)*r10*x9073)));
evalcond[4]=(((cj2*sj1))+((r22*x9069))+((r21*x9071))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9070)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x9069))+(((-1.0)*gconst2*r00*x9070))+((r01*x9071))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9074 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9074.valid){
continue;
}
CheckValue<IkReal> x9075=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9074.value)+(((1.5707963267949)*(x9075.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9076=IKcos(j4);
IkReal x9077=IKsin(j4);
IkReal x9078=((1.0)*x9076);
IkReal x9079=(gconst1*x9076);
IkReal x9080=(gconst1*x9077);
IkReal x9081=((1.0)*gconst2*x9077);
evalcond[0]=((((-1.0)*gconst2*r10*x9078))+((r11*x9079))+((r12*x9077)));
evalcond[1]=((((-1.0)*r22*x9078))+((r21*x9080))+(((-1.0)*r20*x9081)));
evalcond[2]=((((-1.0)*r02*x9078))+(((-1.0)*r00*x9081))+((r01*x9080)));
evalcond[3]=((-1.0)+((r11*x9080))+(((-1.0)*r12*x9078))+(((-1.0)*r10*x9081)));
evalcond[4]=(((cj2*sj1))+((r21*x9079))+((cj1*sj2))+((r22*x9077))+(((-1.0)*gconst2*r20*x9078)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x9078))+((r01*x9079))+((cj1*cj2))+((r02*x9077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9082=((-1.0)*r20);
IkReal x9083=x8938;
CheckValue<IkReal> x9085 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9082),IKFAST_ATAN2_MAGTHRESH);
if(!x9085.valid){
continue;
}
IkReal x9084=((-1.0)*(x9085.value));
sj5=gconst1;
cj5=gconst2;
j5=x9084;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9084;
IkReal gconst1=(r21*x9083);
IkReal gconst2=(x9082*x9083);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9086=((-1.0)*r20);
IkReal x9087=x8938;
CheckValue<IkReal> x9089 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9086),IKFAST_ATAN2_MAGTHRESH);
if(!x9089.valid){
continue;
}
IkReal x9088=((-1.0)*(x9089.value));
sj5=gconst1;
cj5=gconst2;
j5=x9088;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9088;
IkReal gconst1=(r21*x9087);
IkReal gconst2=(x9086*x9087);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9090=((-1.0)*r20);
IkReal x9091=x8938;
CheckValue<IkReal> x9093 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9090),IKFAST_ATAN2_MAGTHRESH);
if(!x9093.valid){
continue;
}
IkReal x9092=((-1.0)*(x9093.value));
sj5=gconst1;
cj5=gconst2;
j5=x9092;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9092;
IkReal gconst1=(r21*x9091);
IkReal gconst2=(x9090*x9091);
IkReal x9094=r22*r22;
IkReal x9095=((1.0)*r02);
IkReal x9096=(cj1*sj2);
IkReal x9097=(cj2*sj1);
CheckValue<IkReal> x9101=IKPowWithIntegerCheck(((-1.0)+x9094),-1);
if(!x9101.valid){
continue;
}
IkReal x9098=x9101.value;
if((((1.0)+(((-1.0)*x9094)))) < -0.00001)
continue;
IkReal x9099=IKsqrt(((1.0)+(((-1.0)*x9094))));
IkReal x9100=(r02*r22*x9098*x9099);
j4eval[0]=((IKabs((((x9097*x9100))+((x9096*x9100)))))+(IKabs(((((-1.0)*x9095*x9097))+(((-1.0)*x9095*x9096))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9102=(cj1*sj2);
IkReal x9103=(gconst1*r01);
IkReal x9104=((1.0)*r02);
IkReal x9105=(cj2*sj1);
IkReal x9106=((1.0)*gconst2*r00);
CheckValue<IkReal> x9107 = IKatan2WithCheck(IkReal(((((-1.0)*x9102*x9106))+((x9103*x9105))+((x9102*x9103))+(((-1.0)*x9105*x9106)))),IkReal(((((-1.0)*x9102*x9104))+(((-1.0)*x9104*x9105)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9107.valid){
continue;
}
CheckValue<IkReal> x9108=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9107.value)+(((1.5707963267949)*(x9108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9109=IKcos(j4);
IkReal x9110=IKsin(j4);
IkReal x9111=((1.0)*x9109);
IkReal x9112=(gconst1*x9109);
IkReal x9113=(gconst1*x9110);
IkReal x9114=((1.0)*gconst2*x9110);
evalcond[0]=((((-1.0)*gconst2*r00*x9111))+((r01*x9112))+((r02*x9110)));
evalcond[1]=(((r21*x9113))+(((-1.0)*r22*x9111))+(((-1.0)*r20*x9114)));
evalcond[2]=((((-1.0)*r10*x9114))+((r11*x9113))+(((-1.0)*r12*x9111)));
evalcond[3]=((-1.0)+((r01*x9113))+(((-1.0)*r02*x9111))+(((-1.0)*r00*x9114)));
evalcond[4]=(((r21*x9112))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9111))+((r22*x9110)));
evalcond[5]=(((r12*x9110))+((r11*x9112))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9115=(gconst1*r01);
IkReal x9116=(gconst2*r00);
CheckValue<IkReal> x9117=IKPowWithIntegerCheck(IKsign(((x9115*x9115)+(x9116*x9116)+(((-2.0)*x9115*x9116))+(r02*r02))),-1);
if(!x9117.valid){
continue;
}
CheckValue<IkReal> x9118 = IKatan2WithCheck(IkReal((x9115+(((-1.0)*x9116)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9117.value)))+(x9118.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9119=IKcos(j4);
IkReal x9120=IKsin(j4);
IkReal x9121=((1.0)*x9119);
IkReal x9122=(gconst1*x9119);
IkReal x9123=(gconst1*x9120);
IkReal x9124=((1.0)*gconst2*x9120);
evalcond[0]=((((-1.0)*gconst2*r00*x9121))+((r02*x9120))+((r01*x9122)));
evalcond[1]=((((-1.0)*r20*x9124))+(((-1.0)*r22*x9121))+((r21*x9123)));
evalcond[2]=((((-1.0)*r12*x9121))+(((-1.0)*r10*x9124))+((r11*x9123)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9121))+((r01*x9123))+(((-1.0)*r00*x9124)));
evalcond[4]=(((r22*x9120))+((cj2*sj1))+(((-1.0)*gconst2*r20*x9121))+((cj1*sj2))+((r21*x9122)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9121))+((r11*x9122))+((r12*x9120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9125=((1.0)*gconst2);
CheckValue<IkReal> x9126=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9125))+(((-1.0)*gconst1*r10)))),-1);
if(!x9126.valid){
continue;
}
CheckValue<IkReal> x9127 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9125))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9126.value)))+(x9127.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9128=IKcos(j4);
IkReal x9129=IKsin(j4);
IkReal x9130=((1.0)*x9128);
IkReal x9131=(gconst1*x9128);
IkReal x9132=(gconst1*x9129);
IkReal x9133=((1.0)*gconst2*x9129);
evalcond[0]=(((r02*x9129))+(((-1.0)*gconst2*r00*x9130))+((r01*x9131)));
evalcond[1]=((((-1.0)*r22*x9130))+(((-1.0)*r20*x9133))+((r21*x9132)));
evalcond[2]=((((-1.0)*r12*x9130))+(((-1.0)*r10*x9133))+((r11*x9132)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9130))+(((-1.0)*r00*x9133))+((r01*x9132)));
evalcond[4]=(((r22*x9129))+((cj2*sj1))+((cj1*sj2))+((r21*x9131))+(((-1.0)*gconst2*r20*x9130)));
evalcond[5]=((((-1.0)*gconst2*r10*x9130))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x9131))+((r12*x9129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9134=((-1.0)*r20);
IkReal x9135=x8938;
CheckValue<IkReal> x9137 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9134),IKFAST_ATAN2_MAGTHRESH);
if(!x9137.valid){
continue;
}
IkReal x9136=((-1.0)*(x9137.value));
sj5=gconst1;
cj5=gconst2;
j5=x9136;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9136;
IkReal gconst1=(r21*x9135);
IkReal gconst2=(x9134*x9135);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9138=((-1.0)*r20);
IkReal x9139=x8938;
CheckValue<IkReal> x9141 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9138),IKFAST_ATAN2_MAGTHRESH);
if(!x9141.valid){
continue;
}
IkReal x9140=((-1.0)*(x9141.value));
sj5=gconst1;
cj5=gconst2;
j5=x9140;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9140;
IkReal gconst1=(r21*x9139);
IkReal gconst2=(x9138*x9139);
IkReal x9142=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9146=IKPowWithIntegerCheck(x9142,-1);
if(!x9146.valid){
continue;
}
IkReal x9143=x9146.value;
IkReal x9144=((1.0)*x9143);
IkReal x9145=((((-1.0)*x9144*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x9144*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x9143)));
j4eval[0]=x9145;
j4eval[1]=IKsign(x9145);
j4eval[2]=r02;
j4eval[3]=x9142;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9147=((-1.0)*r20);
IkReal x9148=x8938;
CheckValue<IkReal> x9150 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9147),IKFAST_ATAN2_MAGTHRESH);
if(!x9150.valid){
continue;
}
IkReal x9149=((-1.0)*(x9150.value));
sj5=gconst1;
cj5=gconst2;
j5=x9149;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9149;
IkReal gconst1=(r21*x9148);
IkReal gconst2=(x9147*x9148);
IkReal x9151=r22*r22;
IkReal x9152=((1.0)*r02);
IkReal x9153=(cj1*sj2);
IkReal x9154=(cj2*sj1);
CheckValue<IkReal> x9158=IKPowWithIntegerCheck(((-1.0)+x9151),-1);
if(!x9158.valid){
continue;
}
IkReal x9155=x9158.value;
if((((1.0)+(((-1.0)*x9151)))) < -0.00001)
continue;
IkReal x9156=IKsqrt(((1.0)+(((-1.0)*x9151))));
IkReal x9157=(r02*r22*x9155*x9156);
j4eval[0]=((IKabs((((x9154*x9157))+((x9153*x9157)))))+(IKabs(((((-1.0)*x9152*x9154))+(((-1.0)*x9152*x9153))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9159=(cj1*sj2);
IkReal x9160=(gconst1*r01);
IkReal x9161=((1.0)*r02);
IkReal x9162=(cj2*sj1);
IkReal x9163=((1.0)*gconst2*r00);
CheckValue<IkReal> x9164 = IKatan2WithCheck(IkReal(((((-1.0)*x9159*x9163))+((x9159*x9160))+(((-1.0)*x9162*x9163))+((x9160*x9162)))),IkReal(((((-1.0)*x9159*x9161))+(((-1.0)*x9161*x9162)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9164.valid){
continue;
}
CheckValue<IkReal> x9165=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9164.value)+(((1.5707963267949)*(x9165.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9166=IKcos(j4);
IkReal x9167=IKsin(j4);
IkReal x9168=((1.0)*x9166);
IkReal x9169=(gconst1*x9166);
IkReal x9170=(gconst1*x9167);
IkReal x9171=((1.0)*gconst2*x9167);
evalcond[0]=(((r01*x9169))+((r02*x9167))+(((-1.0)*gconst2*r00*x9168)));
evalcond[1]=((((-1.0)*r22*x9168))+((r21*x9170))+(((-1.0)*r20*x9171)));
evalcond[2]=((((-1.0)*r12*x9168))+(((-1.0)*r10*x9171))+((r11*x9170)));
evalcond[3]=((1.0)+((r01*x9170))+(((-1.0)*r02*x9168))+(((-1.0)*r00*x9171)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9167))+((r21*x9169))+(((-1.0)*gconst2*r20*x9168)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9168))+((r11*x9169))+((r12*x9167))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9172=(gconst1*r01);
IkReal x9173=(gconst2*r00);
CheckValue<IkReal> x9174 = IKatan2WithCheck(IkReal(((((-1.0)*x9173))+x9172)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9174.valid){
continue;
}
CheckValue<IkReal> x9175=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9172*x9172)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9173*x9173)))+(((2.0)*x9172*x9173)))),-1);
if(!x9175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9174.value)+(((1.5707963267949)*(x9175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9176=IKcos(j4);
IkReal x9177=IKsin(j4);
IkReal x9178=((1.0)*x9176);
IkReal x9179=(gconst1*x9176);
IkReal x9180=(gconst1*x9177);
IkReal x9181=((1.0)*gconst2*x9177);
evalcond[0]=((((-1.0)*gconst2*r00*x9178))+((r02*x9177))+((r01*x9179)));
evalcond[1]=((((-1.0)*r20*x9181))+(((-1.0)*r22*x9178))+((r21*x9180)));
evalcond[2]=(((r11*x9180))+(((-1.0)*r12*x9178))+(((-1.0)*r10*x9181)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9178))+(((-1.0)*r00*x9181))+((r01*x9180)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9178))+((cj1*sj2))+((r21*x9179))+((r22*x9177)));
evalcond[5]=((((-1.0)*gconst2*r10*x9178))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x9177))+((r11*x9179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9182 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9182.valid){
continue;
}
CheckValue<IkReal> x9183=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9182.value)+(((1.5707963267949)*(x9183.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9184=IKcos(j4);
IkReal x9185=IKsin(j4);
IkReal x9186=((1.0)*x9184);
IkReal x9187=(gconst1*x9184);
IkReal x9188=(gconst1*x9185);
IkReal x9189=((1.0)*gconst2*x9185);
evalcond[0]=((((-1.0)*gconst2*r00*x9186))+((r02*x9185))+((r01*x9187)));
evalcond[1]=((((-1.0)*r20*x9189))+(((-1.0)*r22*x9186))+((r21*x9188)));
evalcond[2]=((((-1.0)*r12*x9186))+((r11*x9188))+(((-1.0)*r10*x9189)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9186))+(((-1.0)*r00*x9189))+((r01*x9188)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9186))+((cj1*sj2))+((r22*x9185))+((r21*x9187)));
evalcond[5]=(((r11*x9187))+((r12*x9185))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9186))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9190=((-1.0)*r20);
IkReal x9191=((-1.0)*px);
CheckValue<IkReal> x9193 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9190),IKFAST_ATAN2_MAGTHRESH);
if(!x9193.valid){
continue;
}
IkReal x9192=((-1.0)*(x9193.value));
sj5=gconst1;
cj5=gconst2;
j5=x9192;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9191);
rxp1_1=(px*r21);
rxp1_2=(r11*x9191);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9192;
IkReal gconst1=r21;
IkReal gconst2=x9190;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9194=((-1.0)*r20);
IkReal x9195=((-1.0)*px);
CheckValue<IkReal> x9197 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9194),IKFAST_ATAN2_MAGTHRESH);
if(!x9197.valid){
continue;
}
IkReal x9196=((-1.0)*(x9197.value));
sj5=gconst1;
cj5=gconst2;
j5=x9196;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9195);
rxp1_1=(px*r21);
rxp1_2=(r11*x9195);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9196;
IkReal gconst1=r21;
IkReal gconst2=x9194;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9198=((-1.0)*r20);
IkReal x9199=((-1.0)*px);
CheckValue<IkReal> x9201 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9198),IKFAST_ATAN2_MAGTHRESH);
if(!x9201.valid){
continue;
}
IkReal x9200=((-1.0)*(x9201.value));
sj5=gconst1;
cj5=gconst2;
j5=x9200;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9199);
rxp1_1=(px*r21);
rxp1_2=(r11*x9199);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9200;
IkReal gconst1=r21;
IkReal gconst2=x9198;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9204=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9204.valid){
continue;
}
IkReal x9202=x9204.value;
IkReal x9203=(sj0*x9202);
cj4array[0]=((((-1.0)*sj1*sj2*x9203))+((cj1*cj2*x9203)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9205=IKsin(j4);
IkReal x9206=IKcos(j4);
IkReal x9207=((1.0)*gconst2);
IkReal x9208=(gconst1*r21);
evalcond[0]=(r02*x9205);
evalcond[1]=((((-1.0)*r02*x9206))+(((-1.0)*sj0)));
evalcond[2]=(((x9205*x9208))+(((-1.0)*r20*x9205*x9207)));
evalcond[3]=(((gconst1*r11*x9205))+(((-1.0)*r10*x9205*x9207)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r20*x9206*x9207))+((cj1*sj2))+((x9206*x9208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9211=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9211.valid){
continue;
}
IkReal x9209=x9211.value;
IkReal x9210=((1.0)*x9209);
cj4array[0]=((((-1.0)*cj1*sj2*x9210))+(((-1.0)*cj2*sj1*x9210)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9212=IKsin(j4);
IkReal x9213=IKcos(j4);
IkReal x9214=((1.0)*sj0);
IkReal x9215=(gconst1*x9212);
IkReal x9216=((1.0)*x9213);
IkReal x9217=((1.0)*gconst2*x9212);
evalcond[0]=(r02*x9212);
evalcond[1]=((((-1.0)*r02*x9216))+(((-1.0)*x9214)));
evalcond[2]=(((r21*x9215))+(((-1.0)*r20*x9217)));
evalcond[3]=((((-1.0)*r10*x9217))+((r11*x9215)));
evalcond[4]=(((gconst1*r11*x9213))+(((-1.0)*gconst2*r10*x9216))+(((-1.0)*cj1*cj2*x9214))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9218=IKPowWithIntegerCheck(r02,-1);
if(!x9218.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9218.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9219=IKsin(j4);
IkReal x9220=IKcos(j4);
IkReal x9221=(gconst1*r21);
IkReal x9222=(gconst1*r11);
IkReal x9223=((1.0)*gconst2*r10);
IkReal x9224=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9219);
evalcond[1]=((((-1.0)*x9219*x9224))+((x9219*x9221)));
evalcond[2]=((((-1.0)*x9219*x9223))+((x9219*x9222)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9220*x9224))+((x9220*x9221)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9220*x9223))+((x9220*x9222))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9225=(cj2*sj1);
IkReal x9226=(cj1*sj2);
IkReal x9227=(gconst1*r21);
IkReal x9228=((1.0)*gconst2*r20);
CheckValue<IkReal> x9229 = IKatan2WithCheck(IkReal((((r22*x9226))+((r22*x9225)))),IkReal(((((-1.0)*x9225*x9228))+((x9225*x9227))+((x9226*x9227))+(((-1.0)*x9226*x9228)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9229.valid){
continue;
}
CheckValue<IkReal> x9230=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst2*r20*x9227))+(((-1.0)*gconst2*r20*x9228))+(((-1.0)*(x9227*x9227)))+(((-1.0)*(r22*r22))))),-1);
if(!x9230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9229.value)+(((1.5707963267949)*(x9230.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9231=IKsin(j4);
IkReal x9232=IKcos(j4);
IkReal x9233=(sj1*sj2);
IkReal x9234=(gconst2*r10);
IkReal x9235=(gconst2*r00);
IkReal x9236=(gconst2*r20);
IkReal x9237=((1.0)*x9232);
IkReal x9238=(gconst1*x9232);
IkReal x9239=((1.0)*cj1*cj2);
IkReal x9240=(gconst1*x9231);
IkReal x9241=((1.0)*x9231);
evalcond[0]=((((-1.0)*x9236*x9241))+((r21*x9240))+(((-1.0)*r22*x9237)));
evalcond[1]=(cj0+(((-1.0)*r12*x9237))+((r11*x9240))+(((-1.0)*x9234*x9241)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9235*x9241))+((r01*x9240))+(((-1.0)*r02*x9237)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9236*x9237))+((cj1*sj2))+((r22*x9231))+((r21*x9238)));
evalcond[4]=((((-1.0)*cj0*x9239))+((r02*x9231))+((cj0*x9233))+(((-1.0)*x9235*x9237))+((r01*x9238)));
evalcond[5]=((((-1.0)*sj0*x9239))+((r11*x9238))+((sj0*x9233))+(((-1.0)*x9234*x9237))+((r12*x9231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9242=((1.0)*gconst2);
CheckValue<IkReal> x9243 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9242))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9243.valid){
continue;
}
CheckValue<IkReal> x9244=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9242))+(((-1.0)*gconst1*r10)))),-1);
if(!x9244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9243.value)+(((1.5707963267949)*(x9244.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9245=IKsin(j4);
IkReal x9246=IKcos(j4);
IkReal x9247=(sj1*sj2);
IkReal x9248=(gconst2*r10);
IkReal x9249=(gconst2*r00);
IkReal x9250=(gconst2*r20);
IkReal x9251=((1.0)*x9246);
IkReal x9252=(gconst1*x9246);
IkReal x9253=((1.0)*cj1*cj2);
IkReal x9254=(gconst1*x9245);
IkReal x9255=((1.0)*x9245);
evalcond[0]=((((-1.0)*r22*x9251))+(((-1.0)*x9250*x9255))+((r21*x9254)));
evalcond[1]=(cj0+(((-1.0)*r12*x9251))+((r11*x9254))+(((-1.0)*x9248*x9255)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9254))+(((-1.0)*x9249*x9255))+(((-1.0)*r02*x9251)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9250*x9251))+((cj1*sj2))+((r21*x9252))+((r22*x9245)));
evalcond[4]=((((-1.0)*cj0*x9253))+((cj0*x9247))+((r02*x9245))+((r01*x9252))+(((-1.0)*x9249*x9251)));
evalcond[5]=(((r12*x9245))+((sj0*x9247))+((r11*x9252))+(((-1.0)*x9248*x9251))+(((-1.0)*sj0*x9253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9256=((1.0)*gconst2);
CheckValue<IkReal> x9257=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9256)))),-1);
if(!x9257.valid){
continue;
}
CheckValue<IkReal> x9258 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9256))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9257.value)))+(x9258.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9259=IKsin(j4);
IkReal x9260=IKcos(j4);
IkReal x9261=(sj1*sj2);
IkReal x9262=(gconst2*r10);
IkReal x9263=(gconst2*r00);
IkReal x9264=(gconst2*r20);
IkReal x9265=((1.0)*x9260);
IkReal x9266=(gconst1*x9260);
IkReal x9267=((1.0)*cj1*cj2);
IkReal x9268=(gconst1*x9259);
IkReal x9269=((1.0)*x9259);
evalcond[0]=((((-1.0)*r22*x9265))+((r21*x9268))+(((-1.0)*x9264*x9269)));
evalcond[1]=(cj0+(((-1.0)*x9262*x9269))+(((-1.0)*r12*x9265))+((r11*x9268)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9263*x9269))+((r01*x9268))+(((-1.0)*r02*x9265)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x9259))+((r21*x9266))+(((-1.0)*x9264*x9265)));
evalcond[4]=(((cj0*x9261))+(((-1.0)*x9263*x9265))+((r02*x9259))+((r01*x9266))+(((-1.0)*cj0*x9267)));
evalcond[5]=(((sj0*x9261))+(((-1.0)*sj0*x9267))+(((-1.0)*x9262*x9265))+((r12*x9259))+((r11*x9266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9270=((-1.0)*r20);
IkReal x9271=x8938;
CheckValue<IkReal> x9273 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9270),IKFAST_ATAN2_MAGTHRESH);
if(!x9273.valid){
continue;
}
IkReal x9272=((-1.0)*(x9273.value));
sj5=gconst1;
cj5=gconst2;
j5=x9272;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9272;
IkReal gconst1=(r21*x9271);
IkReal gconst2=(x9270*x9271);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9274=((-1.0)*r20);
IkReal x9275=x8938;
CheckValue<IkReal> x9277 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9274),IKFAST_ATAN2_MAGTHRESH);
if(!x9277.valid){
continue;
}
IkReal x9276=((-1.0)*(x9277.value));
sj5=gconst1;
cj5=gconst2;
j5=x9276;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9276;
IkReal gconst1=(r21*x9275);
IkReal gconst2=(x9274*x9275);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9278=((-1.0)*r20);
IkReal x9279=x8938;
CheckValue<IkReal> x9281 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9278),IKFAST_ATAN2_MAGTHRESH);
if(!x9281.valid){
continue;
}
IkReal x9280=((-1.0)*(x9281.value));
sj5=gconst1;
cj5=gconst2;
j5=x9280;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9280;
IkReal gconst1=(r21*x9279);
IkReal gconst2=(x9278*x9279);
IkReal x9282=r22*r22;
CheckValue<IkReal> x9285=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9282))),-1);
if(!x9285.valid){
continue;
}
IkReal x9283=x9285.value;
IkReal x9284=(x9282+((x9283*(r21*r21*r21*r21)))+((x9283*(r20*r20*r20*r20)))+(((2.0)*x9283*(r20*r20)*(r21*r21))));
j4eval[0]=x9284;
j4eval[1]=IKsign(x9284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9286=((-1.0)*r20);
IkReal x9287=x8938;
CheckValue<IkReal> x9289 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9286),IKFAST_ATAN2_MAGTHRESH);
if(!x9289.valid){
continue;
}
IkReal x9288=((-1.0)*(x9289.value));
sj5=gconst1;
cj5=gconst2;
j5=x9288;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9288;
IkReal gconst1=(r21*x9287);
IkReal gconst2=(x9286*x9287);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9290=((-1.0)*r20);
IkReal x9291=x8938;
CheckValue<IkReal> x9293 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9290),IKFAST_ATAN2_MAGTHRESH);
if(!x9293.valid){
continue;
}
IkReal x9292=((-1.0)*(x9293.value));
sj5=gconst1;
cj5=gconst2;
j5=x9292;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9292;
IkReal gconst1=(r21*x9291);
IkReal gconst2=(x9290*x9291);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9294=((-1.0)*r20);
IkReal x9295=x8938;
CheckValue<IkReal> x9297 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9294),IKFAST_ATAN2_MAGTHRESH);
if(!x9297.valid){
continue;
}
IkReal x9296=((-1.0)*(x9297.value));
sj5=gconst1;
cj5=gconst2;
j5=x9296;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9296;
IkReal gconst1=(r21*x9295);
IkReal gconst2=(x9294*x9295);
IkReal x9298=r22*r22;
IkReal x9299=(cj1*r12*sj2);
IkReal x9300=(cj2*r12*sj1);
CheckValue<IkReal> x9304=IKPowWithIntegerCheck(((-1.0)+x9298),-1);
if(!x9304.valid){
continue;
}
IkReal x9301=x9304.value;
if((((1.0)+(((-1.0)*x9298)))) < -0.00001)
continue;
IkReal x9302=IKsqrt(((1.0)+(((-1.0)*x9298))));
IkReal x9303=((1.0)*r22*x9301*x9302);
j4eval[0]=((IKabs((x9300+x9299)))+(IKabs(((((-1.0)*x9300*x9303))+(((-1.0)*x9299*x9303))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9305=((1.0)*gconst1);
IkReal x9306=(cj2*sj1);
IkReal x9307=(gconst2*r10);
IkReal x9308=(cj1*sj2);
CheckValue<IkReal> x9309=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9305))+(((-1.0)*gconst2*r01)))),-1);
if(!x9309.valid){
continue;
}
CheckValue<IkReal> x9310 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9305*x9308))+(((-1.0)*r11*x9305*x9306))+((x9306*x9307))+((x9307*x9308)))),IkReal((((r12*x9306))+((r12*x9308)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9309.value)))+(x9310.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9311=IKsin(j4);
IkReal x9312=IKcos(j4);
IkReal x9313=((1.0)*x9312);
IkReal x9314=(gconst2*x9312);
IkReal x9315=(gconst1*x9311);
IkReal x9316=((1.0)*x9311);
evalcond[0]=(((r21*x9315))+(((-1.0)*r22*x9313))+(((-1.0)*gconst2*r20*x9316)));
evalcond[1]=((((-1.0)*gconst2*r00*x9316))+((r01*x9315))+(((-1.0)*r02*x9313)));
evalcond[2]=((((-1.0)*gconst1*r11*x9313))+((r10*x9314))+(((-1.0)*r12*x9316)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9316))+((r11*x9315))+(((-1.0)*r12*x9313)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9313))+((cj1*sj2))+((r20*x9314))+(((-1.0)*r22*x9316)));
evalcond[5]=((((-1.0)*gconst1*r01*x9313))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9316))+((r00*x9314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9317=(gconst1*r11);
IkReal x9318=(gconst2*r10);
CheckValue<IkReal> x9319 = IKatan2WithCheck(IkReal((x9318+(((-1.0)*x9317)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9319.valid){
continue;
}
CheckValue<IkReal> x9320=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9317*x9318))+(x9317*x9317)+(x9318*x9318))),-1);
if(!x9320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9319.value)+(((1.5707963267949)*(x9320.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9321=IKsin(j4);
IkReal x9322=IKcos(j4);
IkReal x9323=((1.0)*x9322);
IkReal x9324=(gconst2*x9322);
IkReal x9325=(gconst1*x9321);
IkReal x9326=((1.0)*x9321);
evalcond[0]=((((-1.0)*r22*x9323))+(((-1.0)*gconst2*r20*x9326))+((r21*x9325)));
evalcond[1]=((((-1.0)*r02*x9323))+((r01*x9325))+(((-1.0)*gconst2*r00*x9326)));
evalcond[2]=((((-1.0)*r12*x9326))+((r10*x9324))+(((-1.0)*gconst1*r11*x9323)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9323))+(((-1.0)*gconst2*r10*x9326))+((r11*x9325)));
evalcond[4]=(((cj2*sj1))+((r20*x9324))+(((-1.0)*r22*x9326))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9323)));
evalcond[5]=((((-1.0)*gconst1*r01*x9323))+(((-1.0)*r02*x9326))+((r00*x9324))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9327=((1.0)*gconst2);
CheckValue<IkReal> x9328 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9327))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9328.valid){
continue;
}
CheckValue<IkReal> x9329=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9327))+(((-1.0)*gconst1*r00)))),-1);
if(!x9329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9328.value)+(((1.5707963267949)*(x9329.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9330=IKsin(j4);
IkReal x9331=IKcos(j4);
IkReal x9332=((1.0)*x9331);
IkReal x9333=(gconst2*x9331);
IkReal x9334=(gconst1*x9330);
IkReal x9335=((1.0)*x9330);
evalcond[0]=((((-1.0)*r22*x9332))+(((-1.0)*gconst2*r20*x9335))+((r21*x9334)));
evalcond[1]=((((-1.0)*r02*x9332))+((r01*x9334))+(((-1.0)*gconst2*r00*x9335)));
evalcond[2]=((((-1.0)*r12*x9335))+((r10*x9333))+(((-1.0)*gconst1*r11*x9332)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9335))+(((-1.0)*r12*x9332))+((r11*x9334)));
evalcond[4]=(((cj2*sj1))+((r20*x9333))+(((-1.0)*r22*x9335))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9332)));
evalcond[5]=((((-1.0)*r02*x9335))+((r00*x9333))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9336=((-1.0)*r20);
IkReal x9337=x8938;
CheckValue<IkReal> x9339 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9336),IKFAST_ATAN2_MAGTHRESH);
if(!x9339.valid){
continue;
}
IkReal x9338=((-1.0)*(x9339.value));
sj5=gconst1;
cj5=gconst2;
j5=x9338;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9338;
IkReal gconst1=(r21*x9337);
IkReal gconst2=(x9336*x9337);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9340=((-1.0)*r20);
IkReal x9341=x8938;
CheckValue<IkReal> x9343 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9340),IKFAST_ATAN2_MAGTHRESH);
if(!x9343.valid){
continue;
}
IkReal x9342=((-1.0)*(x9343.value));
sj5=gconst1;
cj5=gconst2;
j5=x9342;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9342;
IkReal gconst1=(r21*x9341);
IkReal gconst2=(x9340*x9341);
IkReal x9344=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9348=IKPowWithIntegerCheck(x9344,-1);
if(!x9348.valid){
continue;
}
IkReal x9345=x9348.value;
IkReal x9346=((1.0)*x9345);
IkReal x9347=((((-1.0)*x9346*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9345))+(((-1.0)*x9346*(r11*r11)*(r21*r21))));
j4eval[0]=x9347;
j4eval[1]=r12;
j4eval[2]=x9344;
j4eval[3]=IKsign(x9347);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9349=((-1.0)*r20);
IkReal x9350=x8938;
CheckValue<IkReal> x9352 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9349),IKFAST_ATAN2_MAGTHRESH);
if(!x9352.valid){
continue;
}
IkReal x9351=((-1.0)*(x9352.value));
sj5=gconst1;
cj5=gconst2;
j5=x9351;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9351;
IkReal gconst1=(r21*x9350);
IkReal gconst2=(x9349*x9350);
IkReal x9353=r22*r22;
IkReal x9354=(cj1*r12*sj2);
IkReal x9355=(cj2*r12*sj1);
CheckValue<IkReal> x9359=IKPowWithIntegerCheck(((-1.0)+x9353),-1);
if(!x9359.valid){
continue;
}
IkReal x9356=x9359.value;
if((((1.0)+(((-1.0)*x9353)))) < -0.00001)
continue;
IkReal x9357=IKsqrt(((1.0)+(((-1.0)*x9353))));
IkReal x9358=((1.0)*r22*x9356*x9357);
j4eval[0]=((IKabs((x9355+x9354)))+(IKabs(((((-1.0)*x9355*x9358))+(((-1.0)*x9354*x9358))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9360=((1.0)*gconst1);
IkReal x9361=(cj2*sj1);
IkReal x9362=(gconst2*r10);
IkReal x9363=(cj1*sj2);
CheckValue<IkReal> x9364=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9360)))),-1);
if(!x9364.valid){
continue;
}
CheckValue<IkReal> x9365 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9360*x9361))+(((-1.0)*r11*x9360*x9363))+((x9361*x9362))+((x9362*x9363)))),IkReal((((r12*x9363))+((r12*x9361)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9364.value)))+(x9365.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9366=IKsin(j4);
IkReal x9367=IKcos(j4);
IkReal x9368=((1.0)*x9367);
IkReal x9369=(gconst2*x9367);
IkReal x9370=(gconst1*x9366);
IkReal x9371=((1.0)*x9366);
evalcond[0]=(((r21*x9370))+(((-1.0)*gconst2*r20*x9371))+(((-1.0)*r22*x9368)));
evalcond[1]=((((-1.0)*r02*x9368))+(((-1.0)*gconst2*r00*x9371))+((r01*x9370)));
evalcond[2]=((((-1.0)*gconst1*r11*x9368))+(((-1.0)*r12*x9371))+((r10*x9369)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9371))+((r11*x9370))+(((-1.0)*r12*x9368)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9368))+((cj1*sj2))+(((-1.0)*r22*x9371))+((r20*x9369)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9371))+(((-1.0)*gconst1*r01*x9368))+((cj1*cj2))+((r00*x9369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9372=(gconst1*r11);
IkReal x9373=(gconst2*r10);
CheckValue<IkReal> x9374=IKPowWithIntegerCheck(IKsign(((((2.0)*x9372*x9373))+(((-1.0)*(x9372*x9372)))+(((-1.0)*(x9373*x9373)))+(((-1.0)*(r12*r12))))),-1);
if(!x9374.valid){
continue;
}
CheckValue<IkReal> x9375 = IKatan2WithCheck(IkReal((x9373+(((-1.0)*x9372)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9374.value)))+(x9375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9376=IKsin(j4);
IkReal x9377=IKcos(j4);
IkReal x9378=((1.0)*x9377);
IkReal x9379=(gconst2*x9377);
IkReal x9380=(gconst1*x9376);
IkReal x9381=((1.0)*x9376);
evalcond[0]=(((r21*x9380))+(((-1.0)*gconst2*r20*x9381))+(((-1.0)*r22*x9378)));
evalcond[1]=((((-1.0)*r02*x9378))+(((-1.0)*gconst2*r00*x9381))+((r01*x9380)));
evalcond[2]=((((-1.0)*r12*x9381))+((r10*x9379))+(((-1.0)*gconst1*r11*x9378)));
evalcond[3]=((-1.0)+((r11*x9380))+(((-1.0)*r12*x9378))+(((-1.0)*gconst2*r10*x9381)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9378))+((cj1*sj2))+(((-1.0)*r22*x9381))+((r20*x9379)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9381))+((cj1*cj2))+((r00*x9379))+(((-1.0)*gconst1*r01*x9378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9382 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9382.valid){
continue;
}
CheckValue<IkReal> x9383=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9382.value)+(((1.5707963267949)*(x9383.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9384=IKsin(j4);
IkReal x9385=IKcos(j4);
IkReal x9386=((1.0)*x9385);
IkReal x9387=(gconst2*x9385);
IkReal x9388=(gconst1*x9384);
IkReal x9389=((1.0)*x9384);
evalcond[0]=(((r21*x9388))+(((-1.0)*gconst2*r20*x9389))+(((-1.0)*r22*x9386)));
evalcond[1]=((((-1.0)*r02*x9386))+(((-1.0)*gconst2*r00*x9389))+((r01*x9388)));
evalcond[2]=(((r10*x9387))+(((-1.0)*gconst1*r11*x9386))+(((-1.0)*r12*x9389)));
evalcond[3]=((-1.0)+((r11*x9388))+(((-1.0)*r12*x9386))+(((-1.0)*gconst2*r10*x9389)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9389))+((r20*x9387))+(((-1.0)*gconst1*r21*x9386)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9389))+((cj1*cj2))+((r00*x9387))+(((-1.0)*gconst1*r01*x9386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9390=((-1.0)*r20);
IkReal x9391=x8938;
CheckValue<IkReal> x9393 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9390),IKFAST_ATAN2_MAGTHRESH);
if(!x9393.valid){
continue;
}
IkReal x9392=((-1.0)*(x9393.value));
sj5=gconst1;
cj5=gconst2;
j5=x9392;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9392;
IkReal gconst1=(r21*x9391);
IkReal gconst2=(x9390*x9391);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9394=((-1.0)*r20);
IkReal x9395=x8938;
CheckValue<IkReal> x9397 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9394),IKFAST_ATAN2_MAGTHRESH);
if(!x9397.valid){
continue;
}
IkReal x9396=((-1.0)*(x9397.value));
sj5=gconst1;
cj5=gconst2;
j5=x9396;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9396;
IkReal gconst1=(r21*x9395);
IkReal gconst2=(x9394*x9395);
IkReal x9398=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9402=IKPowWithIntegerCheck(x9398,-1);
if(!x9402.valid){
continue;
}
IkReal x9399=x9402.value;
IkReal x9400=((1.0)*x9399);
IkReal x9401=((((-1.0)*x9400*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x9400*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x9399)));
j4eval[0]=x9401;
j4eval[1]=IKsign(x9401);
j4eval[2]=r02;
j4eval[3]=x9398;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9403=((-1.0)*r20);
IkReal x9404=x8938;
CheckValue<IkReal> x9406 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9403),IKFAST_ATAN2_MAGTHRESH);
if(!x9406.valid){
continue;
}
IkReal x9405=((-1.0)*(x9406.value));
sj5=gconst1;
cj5=gconst2;
j5=x9405;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9405;
IkReal gconst1=(r21*x9404);
IkReal gconst2=(x9403*x9404);
IkReal x9407=r22*r22;
IkReal x9408=(cj1*r02*sj2);
IkReal x9409=(cj2*r02*sj1);
CheckValue<IkReal> x9413=IKPowWithIntegerCheck(((-1.0)+x9407),-1);
if(!x9413.valid){
continue;
}
IkReal x9410=x9413.value;
if((((1.0)+(((-1.0)*x9407)))) < -0.00001)
continue;
IkReal x9411=IKsqrt(((1.0)+(((-1.0)*x9407))));
IkReal x9412=((1.0)*r22*x9410*x9411);
j4eval[0]=((IKabs(((((-1.0)*x9408*x9412))+(((-1.0)*x9409*x9412)))))+(IKabs((x9409+x9408))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9414=(cj2*sj1);
IkReal x9415=(cj1*sj2);
IkReal x9416=(gconst2*r00);
IkReal x9417=((1.0)*gconst1*r01);
CheckValue<IkReal> x9418 = IKatan2WithCheck(IkReal(((((-1.0)*x9414*x9417))+(((-1.0)*x9415*x9417))+((x9414*x9416))+((x9415*x9416)))),IkReal((((r02*x9414))+((r02*x9415)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9418.valid){
continue;
}
CheckValue<IkReal> x9419=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9418.value)+(((1.5707963267949)*(x9419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9420=IKsin(j4);
IkReal x9421=IKcos(j4);
IkReal x9422=(gconst1*r11);
IkReal x9423=(gconst1*r21);
IkReal x9424=(gconst1*r01);
IkReal x9425=((1.0)*x9421);
IkReal x9426=(gconst2*x9421);
IkReal x9427=((1.0)*x9420);
evalcond[0]=(((x9420*x9423))+(((-1.0)*gconst2*r20*x9427))+(((-1.0)*r22*x9425)));
evalcond[1]=((((-1.0)*gconst2*r10*x9427))+((x9420*x9422))+(((-1.0)*r12*x9425)));
evalcond[2]=((((-1.0)*x9424*x9425))+((r00*x9426))+(((-1.0)*r02*x9427)));
evalcond[3]=((-1.0)+((x9420*x9424))+(((-1.0)*r02*x9425))+(((-1.0)*gconst2*r00*x9427)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9423*x9425))+((cj1*sj2))+((r20*x9426))+(((-1.0)*r22*x9427)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9427))+(((-1.0)*x9422*x9425))+((r10*x9426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9428=(gconst2*r00);
IkReal x9429=(gconst1*r01);
CheckValue<IkReal> x9430 = IKatan2WithCheck(IkReal(((((-1.0)*x9429))+x9428)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9430.valid){
continue;
}
CheckValue<IkReal> x9431=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9429*x9429)))+(((2.0)*x9428*x9429))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9428*x9428))))),-1);
if(!x9431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9430.value)+(((1.5707963267949)*(x9431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9432=IKsin(j4);
IkReal x9433=IKcos(j4);
IkReal x9434=(gconst1*r11);
IkReal x9435=(gconst1*r21);
IkReal x9436=(gconst1*r01);
IkReal x9437=((1.0)*x9433);
IkReal x9438=(gconst2*x9433);
IkReal x9439=((1.0)*x9432);
evalcond[0]=(((x9432*x9435))+(((-1.0)*gconst2*r20*x9439))+(((-1.0)*r22*x9437)));
evalcond[1]=((((-1.0)*gconst2*r10*x9439))+(((-1.0)*r12*x9437))+((x9432*x9434)));
evalcond[2]=((((-1.0)*r02*x9439))+(((-1.0)*x9436*x9437))+((r00*x9438)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r00*x9439))+(((-1.0)*r02*x9437))+((x9432*x9436)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9438))+(((-1.0)*x9435*x9437))+(((-1.0)*r22*x9439)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9434*x9437))+(((-1.0)*r12*x9439))+((r10*x9438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9440=((1.0)*gconst2);
CheckValue<IkReal> x9441=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9440)))),-1);
if(!x9441.valid){
continue;
}
CheckValue<IkReal> x9442 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9440)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9441.value)))+(x9442.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9443=IKsin(j4);
IkReal x9444=IKcos(j4);
IkReal x9445=(gconst1*r11);
IkReal x9446=(gconst1*r21);
IkReal x9447=(gconst1*r01);
IkReal x9448=((1.0)*x9444);
IkReal x9449=(gconst2*x9444);
IkReal x9450=((1.0)*x9443);
evalcond[0]=(((x9443*x9446))+(((-1.0)*gconst2*r20*x9450))+(((-1.0)*r22*x9448)));
evalcond[1]=(((x9443*x9445))+(((-1.0)*gconst2*r10*x9450))+(((-1.0)*r12*x9448)));
evalcond[2]=(((r00*x9449))+(((-1.0)*r02*x9450))+(((-1.0)*x9447*x9448)));
evalcond[3]=((-1.0)+((x9443*x9447))+(((-1.0)*gconst2*r00*x9450))+(((-1.0)*r02*x9448)));
evalcond[4]=((((-1.0)*x9446*x9448))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9450))+((r20*x9449)));
evalcond[5]=(((r10*x9449))+(((-1.0)*x9445*x9448))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9451=((-1.0)*r20);
IkReal x9452=x8938;
CheckValue<IkReal> x9454 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9451),IKFAST_ATAN2_MAGTHRESH);
if(!x9454.valid){
continue;
}
IkReal x9453=((-1.0)*(x9454.value));
sj5=gconst1;
cj5=gconst2;
j5=x9453;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9453;
IkReal gconst1=(r21*x9452);
IkReal gconst2=(x9451*x9452);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9455=((-1.0)*r20);
IkReal x9456=x8938;
CheckValue<IkReal> x9458 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9455),IKFAST_ATAN2_MAGTHRESH);
if(!x9458.valid){
continue;
}
IkReal x9457=((-1.0)*(x9458.value));
sj5=gconst1;
cj5=gconst2;
j5=x9457;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9457;
IkReal gconst1=(r21*x9456);
IkReal gconst2=(x9455*x9456);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9459=((-1.0)*r20);
IkReal x9460=x8938;
CheckValue<IkReal> x9462 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9459),IKFAST_ATAN2_MAGTHRESH);
if(!x9462.valid){
continue;
}
IkReal x9461=((-1.0)*(x9462.value));
sj5=gconst1;
cj5=gconst2;
j5=x9461;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9461;
IkReal gconst1=(r21*x9460);
IkReal gconst2=(x9459*x9460);
IkReal x9463=r22*r22;
IkReal x9464=(cj1*r02*sj2);
IkReal x9465=(cj2*r02*sj1);
CheckValue<IkReal> x9469=IKPowWithIntegerCheck(((-1.0)+x9463),-1);
if(!x9469.valid){
continue;
}
IkReal x9466=x9469.value;
if((((1.0)+(((-1.0)*x9463)))) < -0.00001)
continue;
IkReal x9467=IKsqrt(((1.0)+(((-1.0)*x9463))));
IkReal x9468=((1.0)*r22*x9466*x9467);
j4eval[0]=((IKabs((x9465+x9464)))+(IKabs(((((-1.0)*x9464*x9468))+(((-1.0)*x9465*x9468))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9470=(cj2*sj1);
IkReal x9471=(cj1*sj2);
IkReal x9472=(gconst2*r00);
IkReal x9473=((1.0)*gconst1*r01);
CheckValue<IkReal> x9474 = IKatan2WithCheck(IkReal((((x9470*x9472))+(((-1.0)*x9471*x9473))+(((-1.0)*x9470*x9473))+((x9471*x9472)))),IkReal((((r02*x9470))+((r02*x9471)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9474.valid){
continue;
}
CheckValue<IkReal> x9475=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9474.value)+(((1.5707963267949)*(x9475.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9476=IKsin(j4);
IkReal x9477=IKcos(j4);
IkReal x9478=(gconst1*r11);
IkReal x9479=(gconst1*r21);
IkReal x9480=(gconst1*r01);
IkReal x9481=((1.0)*x9477);
IkReal x9482=(gconst2*x9477);
IkReal x9483=((1.0)*x9476);
evalcond[0]=((((-1.0)*r22*x9481))+(((-1.0)*gconst2*r20*x9483))+((x9476*x9479)));
evalcond[1]=((((-1.0)*gconst2*r10*x9483))+((x9476*x9478))+(((-1.0)*r12*x9481)));
evalcond[2]=((((-1.0)*x9480*x9481))+((r00*x9482))+(((-1.0)*r02*x9483)));
evalcond[3]=((1.0)+((x9476*x9480))+(((-1.0)*gconst2*r00*x9483))+(((-1.0)*r02*x9481)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9479*x9481))+((r20*x9482))+(((-1.0)*r22*x9483)));
evalcond[5]=((((-1.0)*x9478*x9481))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r10*x9482))+(((-1.0)*r12*x9483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9484=(gconst1*r01);
IkReal x9485=(gconst2*r00);
CheckValue<IkReal> x9486 = IKatan2WithCheck(IkReal(((((-1.0)*x9484))+x9485)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9486.valid){
continue;
}
CheckValue<IkReal> x9487=IKPowWithIntegerCheck(IKsign(((x9484*x9484)+(x9485*x9485)+(r02*r02)+(((-2.0)*x9484*x9485)))),-1);
if(!x9487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9486.value)+(((1.5707963267949)*(x9487.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9488=IKsin(j4);
IkReal x9489=IKcos(j4);
IkReal x9490=(gconst1*r11);
IkReal x9491=(gconst1*r21);
IkReal x9492=(gconst1*r01);
IkReal x9493=((1.0)*x9489);
IkReal x9494=(gconst2*x9489);
IkReal x9495=((1.0)*x9488);
evalcond[0]=((((-1.0)*gconst2*r20*x9495))+(((-1.0)*r22*x9493))+((x9488*x9491)));
evalcond[1]=((((-1.0)*gconst2*r10*x9495))+(((-1.0)*r12*x9493))+((x9488*x9490)));
evalcond[2]=((((-1.0)*r02*x9495))+(((-1.0)*x9492*x9493))+((r00*x9494)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9493))+(((-1.0)*gconst2*r00*x9495))+((x9488*x9492)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9495))+((cj1*sj2))+(((-1.0)*x9491*x9493))+((r20*x9494)));
evalcond[5]=(((r10*x9494))+(((-1.0)*sj1*sj2))+(((-1.0)*x9490*x9493))+(((-1.0)*r12*x9495))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9496 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9496.valid){
continue;
}
CheckValue<IkReal> x9497=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9496.value)+(((1.5707963267949)*(x9497.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9498=IKsin(j4);
IkReal x9499=IKcos(j4);
IkReal x9500=(gconst1*r11);
IkReal x9501=(gconst1*r21);
IkReal x9502=(gconst1*r01);
IkReal x9503=((1.0)*x9499);
IkReal x9504=(gconst2*x9499);
IkReal x9505=((1.0)*x9498);
evalcond[0]=(((x9498*x9501))+(((-1.0)*r22*x9503))+(((-1.0)*gconst2*r20*x9505)));
evalcond[1]=(((x9498*x9500))+(((-1.0)*r12*x9503))+(((-1.0)*gconst2*r10*x9505)));
evalcond[2]=((((-1.0)*x9502*x9503))+(((-1.0)*r02*x9505))+((r00*x9504)));
evalcond[3]=((1.0)+((x9498*x9502))+(((-1.0)*gconst2*r00*x9505))+(((-1.0)*r02*x9503)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9505))+((r20*x9504))+(((-1.0)*x9501*x9503)));
evalcond[5]=(((r10*x9504))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9505))+(((-1.0)*x9500*x9503))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9506=((-1.0)*r20);
IkReal x9507=((-1.0)*px);
CheckValue<IkReal> x9509 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9506),IKFAST_ATAN2_MAGTHRESH);
if(!x9509.valid){
continue;
}
IkReal x9508=((-1.0)*(x9509.value));
sj5=gconst1;
cj5=gconst2;
j5=x9508;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9507);
rxp1_1=(px*r21);
rxp1_2=(r11*x9507);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9508;
IkReal gconst1=r21;
IkReal gconst2=x9506;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9510=((-1.0)*r20);
IkReal x9511=((-1.0)*px);
CheckValue<IkReal> x9513 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9510),IKFAST_ATAN2_MAGTHRESH);
if(!x9513.valid){
continue;
}
IkReal x9512=((-1.0)*(x9513.value));
sj5=gconst1;
cj5=gconst2;
j5=x9512;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9511);
rxp1_1=(px*r21);
rxp1_2=(r11*x9511);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9512;
IkReal gconst1=r21;
IkReal gconst2=x9510;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9514=((-1.0)*r20);
IkReal x9515=((-1.0)*px);
CheckValue<IkReal> x9517 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9514),IKFAST_ATAN2_MAGTHRESH);
if(!x9517.valid){
continue;
}
IkReal x9516=((-1.0)*(x9517.value));
sj5=gconst1;
cj5=gconst2;
j5=x9516;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9515);
rxp1_1=(px*r21);
rxp1_2=(r11*x9515);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9516;
IkReal gconst1=r21;
IkReal gconst2=x9514;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9520=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9520.valid){
continue;
}
IkReal x9518=x9520.value;
IkReal x9519=(sj0*x9518);
cj4array[0]=(((cj1*cj2*x9519))+(((-1.0)*sj1*sj2*x9519)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9521=IKsin(j4);
IkReal x9522=IKcos(j4);
IkReal x9523=(gconst1*x9521);
IkReal x9524=((1.0)*x9522);
IkReal x9525=((1.0)*gconst2*x9521);
evalcond[0]=((-1.0)*r02*x9521);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9524)));
evalcond[2]=((((-1.0)*r20*x9525))+((r21*x9523)));
evalcond[3]=((((-1.0)*r10*x9525))+((r11*x9523)));
evalcond[4]=(((cj2*sj1))+((gconst2*r20*x9522))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9528=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9528.valid){
continue;
}
IkReal x9526=x9528.value;
IkReal x9527=((1.0)*x9526);
cj4array[0]=((((-1.0)*cj2*sj1*x9527))+(((-1.0)*cj1*sj2*x9527)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9529=IKsin(j4);
IkReal x9530=IKcos(j4);
IkReal x9531=(gconst2*r10);
IkReal x9532=((1.0)*sj0);
IkReal x9533=(gconst1*r11);
IkReal x9534=((1.0)*x9529);
IkReal x9535=((1.0)*x9530);
evalcond[0]=((-1.0)*r02*x9529);
evalcond[1]=((((-1.0)*r02*x9535))+(((-1.0)*x9532)));
evalcond[2]=(((gconst1*r21*x9529))+(((-1.0)*gconst2*r20*x9534)));
evalcond[3]=(((x9529*x9533))+(((-1.0)*x9531*x9534)));
evalcond[4]=((((-1.0)*x9533*x9535))+(((-1.0)*cj1*cj2*x9532))+((sj0*sj1*sj2))+((x9530*x9531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9536=IKPowWithIntegerCheck(r02,-1);
if(!x9536.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9536.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9537=IKsin(j4);
IkReal x9538=IKcos(j4);
IkReal x9539=(gconst2*r10);
IkReal x9540=(gconst1*r11);
IkReal x9541=(gconst1*r21);
IkReal x9542=(gconst2*r20);
IkReal x9543=((1.0)*x9537);
IkReal x9544=((1.0)*x9538);
evalcond[0]=((-1.0)*r02*x9537);
evalcond[1]=(((x9537*x9541))+(((-1.0)*x9542*x9543)));
evalcond[2]=(((x9537*x9540))+(((-1.0)*x9539*x9543)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9541*x9544))+((x9538*x9542))+((cj1*sj2)));
evalcond[4]=(((x9538*x9539))+(((-1.0)*x9540*x9544))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9545=(cj2*sj1);
IkReal x9546=(cj1*sj2);
IkReal x9547=(gconst1*r21);
IkReal x9548=((1.0)*gconst2*r20);
CheckValue<IkReal> x9549=IKPowWithIntegerCheck(IKsign(((((-2.0)*gconst2*r20*x9547))+(r22*r22)+(x9547*x9547)+(((gconst2*gconst2)*(r20*r20))))),-1);
if(!x9549.valid){
continue;
}
CheckValue<IkReal> x9550 = IKatan2WithCheck(IkReal((((r22*x9546))+((r22*x9545)))),IkReal((((x9546*x9547))+(((-1.0)*x9546*x9548))+((x9545*x9547))+(((-1.0)*x9545*x9548)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9549.value)))+(x9550.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9551=IKsin(j4);
IkReal x9552=IKcos(j4);
IkReal x9553=(gconst1*r11);
IkReal x9554=(sj1*sj2);
IkReal x9555=(gconst1*r21);
IkReal x9556=(gconst1*r01);
IkReal x9557=((1.0)*x9552);
IkReal x9558=(gconst2*x9552);
IkReal x9559=((1.0)*cj1*cj2);
IkReal x9560=((1.0)*x9551);
evalcond[0]=((((-1.0)*gconst2*r20*x9560))+(((-1.0)*r22*x9557))+((x9551*x9555)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x9560))+((x9551*x9553))+(((-1.0)*r12*x9557)));
evalcond[2]=((((-1.0)*gconst2*r00*x9560))+(((-1.0)*sj0))+(((-1.0)*r02*x9557))+((x9551*x9556)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9555*x9557))+((cj1*sj2))+((r20*x9558))+(((-1.0)*r22*x9560)));
evalcond[4]=((((-1.0)*x9556*x9557))+(((-1.0)*cj0*x9559))+((r00*x9558))+((cj0*x9554))+(((-1.0)*r02*x9560)));
evalcond[5]=(((sj0*x9554))+(((-1.0)*sj0*x9559))+(((-1.0)*x9553*x9557))+((r10*x9558))+(((-1.0)*r12*x9560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9561=((1.0)*gconst2);
CheckValue<IkReal> x9562=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9561)))),-1);
if(!x9562.valid){
continue;
}
CheckValue<IkReal> x9563 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9561))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9562.value)))+(x9563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9564=IKsin(j4);
IkReal x9565=IKcos(j4);
IkReal x9566=(gconst1*r11);
IkReal x9567=(sj1*sj2);
IkReal x9568=(gconst1*r21);
IkReal x9569=(gconst1*r01);
IkReal x9570=((1.0)*x9565);
IkReal x9571=(gconst2*x9565);
IkReal x9572=((1.0)*cj1*cj2);
IkReal x9573=((1.0)*x9564);
evalcond[0]=((((-1.0)*gconst2*r20*x9573))+((x9564*x9568))+(((-1.0)*r22*x9570)));
evalcond[1]=(((x9564*x9566))+cj0+(((-1.0)*r12*x9570))+(((-1.0)*gconst2*r10*x9573)));
evalcond[2]=((((-1.0)*sj0))+((x9564*x9569))+(((-1.0)*r02*x9570))+(((-1.0)*gconst2*r00*x9573)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9573))+(((-1.0)*x9568*x9570))+((r20*x9571)));
evalcond[4]=((((-1.0)*cj0*x9572))+((cj0*x9567))+(((-1.0)*r02*x9573))+((r00*x9571))+(((-1.0)*x9569*x9570)));
evalcond[5]=((((-1.0)*sj0*x9572))+((sj0*x9567))+(((-1.0)*x9566*x9570))+(((-1.0)*r12*x9573))+((r10*x9571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9574=((1.0)*gconst2);
CheckValue<IkReal> x9575 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9574)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9575.valid){
continue;
}
CheckValue<IkReal> x9576=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9574)))),-1);
if(!x9576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9575.value)+(((1.5707963267949)*(x9576.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9577=IKsin(j4);
IkReal x9578=IKcos(j4);
IkReal x9579=(gconst1*r11);
IkReal x9580=(sj1*sj2);
IkReal x9581=(gconst1*r21);
IkReal x9582=(gconst1*r01);
IkReal x9583=((1.0)*x9578);
IkReal x9584=(gconst2*x9578);
IkReal x9585=((1.0)*cj1*cj2);
IkReal x9586=((1.0)*x9577);
evalcond[0]=((((-1.0)*r22*x9583))+(((-1.0)*gconst2*r20*x9586))+((x9577*x9581)));
evalcond[1]=(cj0+((x9577*x9579))+(((-1.0)*gconst2*r10*x9586))+(((-1.0)*r12*x9583)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst2*r00*x9586))+((x9577*x9582))+(((-1.0)*r02*x9583)));
evalcond[3]=(((cj2*sj1))+((r20*x9584))+(((-1.0)*x9581*x9583))+((cj1*sj2))+(((-1.0)*r22*x9586)));
evalcond[4]=(((r00*x9584))+(((-1.0)*cj0*x9585))+((cj0*x9580))+(((-1.0)*x9582*x9583))+(((-1.0)*r02*x9586)));
evalcond[5]=(((sj0*x9580))+((r10*x9584))+(((-1.0)*r12*x9586))+(((-1.0)*sj0*x9585))+(((-1.0)*x9579*x9583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9587=((-1.0)*r20);
IkReal x9588=x8938;
CheckValue<IkReal> x9590 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9587),IKFAST_ATAN2_MAGTHRESH);
if(!x9590.valid){
continue;
}
IkReal x9589=((-1.0)*(x9590.value));
sj5=gconst1;
cj5=gconst2;
j5=x9589;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9589;
IkReal gconst1=(r21*x9588);
IkReal gconst2=(x9587*x9588);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9591=((-1.0)*r20);
IkReal x9592=x8938;
CheckValue<IkReal> x9594 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9591),IKFAST_ATAN2_MAGTHRESH);
if(!x9594.valid){
continue;
}
IkReal x9593=((-1.0)*(x9594.value));
sj5=gconst1;
cj5=gconst2;
j5=x9593;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9593;
IkReal gconst1=(r21*x9592);
IkReal gconst2=(x9591*x9592);
CheckValue<IkReal> x9602=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9602.valid){
continue;
}
IkReal x9595=x9602.value;
IkReal x9596=(sj3*x9595);
IkReal x9597=(r11*x9596);
IkReal x9598=(r00*x9596);
IkReal x9599=(r01*x9596);
IkReal x9600=(r10*x9596);
IkReal x9601=(r20*r21*x9596);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9598*(r20*r20)))+((r10*r20*r21*x9599))+((r01*x9597*(r21*r21)))+((r00*r20*r21*x9597))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9603=gconst2*gconst2;
IkReal x9604=gconst1*gconst1;
IkReal x9605=((1.0)*cj3);
IkReal x9606=((1.0)*sj3);
IkReal x9607=(r11*sj3);
IkReal x9608=(r10*sj3);
IkReal x9609=(gconst1*gconst2*r00);
IkReal x9610=(gconst1*gconst2*r01);
IkReal x9611=(r00*x9603);
IkReal x9612=(r01*x9604);
CheckValue<IkReal> x9613=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9605*x9611))+(((-1.0)*r11*x9605*x9612))+(((-1.0)*r02*r12*x9605))+((cj3*r11*x9609))+((cj3*r10*x9610)))),-1);
if(!x9613.valid){
continue;
}
CheckValue<IkReal> x9614 = IKatan2WithCheck(IkReal((((gconst1*r02*x9608))+((gconst2*r02*x9607)))),IkReal((((x9607*x9610))+(((-1.0)*r11*x9606*x9611))+(((-1.0)*r10*x9606*x9609))+((x9608*x9612)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9613.value)))+(x9614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9615=IKsin(j4);
IkReal x9616=IKcos(j4);
IkReal x9617=(sj1*sj2);
IkReal x9618=(gconst1*sj3);
IkReal x9619=(cj3*gconst1);
IkReal x9620=(cj3*gconst2);
IkReal x9621=((1.0)*cj2);
IkReal x9622=(cj1*sj2);
IkReal x9623=(gconst2*sj3);
IkReal x9624=(cj1*x9621);
IkReal x9625=((1.0)*x9616);
IkReal x9626=((1.0)*x9615);
IkReal x9627=(gconst1*x9615);
IkReal x9628=(cj3*x9615);
IkReal x9629=(x9616*x9623);
evalcond[0]=((((-1.0)*r22*x9625))+((r21*x9627))+(((-1.0)*gconst2*r20*x9626)));
evalcond[1]=(((r01*x9627))+(((-1.0)*gconst2*r00*x9626))+(((-1.0)*r02*x9625)));
evalcond[2]=((1.0)+(((-1.0)*r12*x9625))+((r11*x9627))+(((-1.0)*gconst2*r10*x9626)));
evalcond[3]=((((-1.0)*r10*x9620*x9625))+((r10*x9618))+((r11*x9616*x9619))+((r12*x9628))+((r11*x9623)));
evalcond[4]=((((-1.0)*r11*x9618*x9625))+((r10*x9629))+((r10*x9619))+(((-1.0)*r12*sj3*x9626))+((r11*x9620)));
evalcond[5]=(((cj2*sj1))+((r20*x9618))+((r21*x9623))+((r21*x9616*x9619))+((r22*x9628))+x9622+(((-1.0)*r20*x9620*x9625)));
evalcond[6]=(((r01*x9623))+((r00*x9618))+((r02*x9628))+x9617+(((-1.0)*r00*x9620*x9625))+((r01*x9616*x9619))+(((-1.0)*x9624)));
evalcond[7]=(((r20*x9619))+((r20*x9629))+(((-1.0)*r22*sj3*x9626))+((r21*x9620))+(((-1.0)*r21*x9618*x9625))+x9617+(((-1.0)*x9624)));
evalcond[8]=(((r01*x9620))+((r00*x9629))+((r00*x9619))+(((-1.0)*x9622))+(((-1.0)*r01*x9618*x9625))+(((-1.0)*r02*sj3*x9626))+(((-1.0)*sj1*x9621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9630=gconst2*gconst2;
IkReal x9631=gconst1*gconst1;
IkReal x9632=(gconst2*r11);
IkReal x9633=(cj3*r02);
IkReal x9634=(gconst1*r01);
IkReal x9635=(cj3*r10);
IkReal x9636=(r10*sj3);
IkReal x9637=((1.0)*gconst1*r00);
IkReal x9638=(r01*x9631);
IkReal x9639=(r00*x9630);
CheckValue<IkReal> x9640 = IKatan2WithCheck(IkReal((((gconst1*r10*x9633))+((x9632*x9633)))),IkReal((((x9635*x9638))+((cj3*x9632*x9634))+(((-1.0)*cj3*r11*x9639))+(((-1.0)*gconst2*x9635*x9637)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9640.valid){
continue;
}
CheckValue<IkReal> x9641=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r11*sj3*x9638))+(((-1.0)*sj3*x9632*x9637))+(((-1.0)*gconst2*x9634*x9636))+((x9636*x9639)))),-1);
if(!x9641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9640.value)+(((1.5707963267949)*(x9641.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9642=IKsin(j4);
IkReal x9643=IKcos(j4);
IkReal x9644=(sj1*sj2);
IkReal x9645=(gconst1*sj3);
IkReal x9646=(cj3*gconst1);
IkReal x9647=(cj3*gconst2);
IkReal x9648=((1.0)*cj2);
IkReal x9649=(cj1*sj2);
IkReal x9650=(gconst2*sj3);
IkReal x9651=(cj1*x9648);
IkReal x9652=((1.0)*x9643);
IkReal x9653=((1.0)*x9642);
IkReal x9654=(gconst1*x9642);
IkReal x9655=(cj3*x9642);
IkReal x9656=(x9643*x9650);
evalcond[0]=((((-1.0)*gconst2*r20*x9653))+((r21*x9654))+(((-1.0)*r22*x9652)));
evalcond[1]=(((r01*x9654))+(((-1.0)*gconst2*r00*x9653))+(((-1.0)*r02*x9652)));
evalcond[2]=((1.0)+((r11*x9654))+(((-1.0)*r12*x9652))+(((-1.0)*gconst2*r10*x9653)));
evalcond[3]=(((r11*x9650))+((r12*x9655))+((r11*x9643*x9646))+((r10*x9645))+(((-1.0)*r10*x9647*x9652)));
evalcond[4]=(((r11*x9647))+((r10*x9646))+((r10*x9656))+(((-1.0)*r12*sj3*x9653))+(((-1.0)*r11*x9645*x9652)));
evalcond[5]=(((cj2*sj1))+((r21*x9643*x9646))+((r21*x9650))+(((-1.0)*r20*x9647*x9652))+x9649+((r20*x9645))+((r22*x9655)));
evalcond[6]=(((r01*x9643*x9646))+((r01*x9650))+((r00*x9645))+x9644+((r02*x9655))+(((-1.0)*r00*x9647*x9652))+(((-1.0)*x9651)));
evalcond[7]=((((-1.0)*r21*x9645*x9652))+((r20*x9656))+x9644+((r20*x9646))+(((-1.0)*r22*sj3*x9653))+((r21*x9647))+(((-1.0)*x9651)));
evalcond[8]=((((-1.0)*r01*x9645*x9652))+(((-1.0)*sj1*x9648))+(((-1.0)*r02*sj3*x9653))+((r00*x9656))+((r00*x9646))+((r01*x9647))+(((-1.0)*x9649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9657=((1.0)*gconst2);
CheckValue<IkReal> x9658 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9657))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9658.valid){
continue;
}
CheckValue<IkReal> x9659=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9657))+(((-1.0)*gconst1*r00)))),-1);
if(!x9659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9658.value)+(((1.5707963267949)*(x9659.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9660=IKsin(j4);
IkReal x9661=IKcos(j4);
IkReal x9662=(sj1*sj2);
IkReal x9663=(gconst1*sj3);
IkReal x9664=(cj3*gconst1);
IkReal x9665=(cj3*gconst2);
IkReal x9666=((1.0)*cj2);
IkReal x9667=(cj1*sj2);
IkReal x9668=(gconst2*sj3);
IkReal x9669=(cj1*x9666);
IkReal x9670=((1.0)*x9661);
IkReal x9671=((1.0)*x9660);
IkReal x9672=(gconst1*x9660);
IkReal x9673=(cj3*x9660);
IkReal x9674=(x9661*x9668);
evalcond[0]=(((r21*x9672))+(((-1.0)*gconst2*r20*x9671))+(((-1.0)*r22*x9670)));
evalcond[1]=(((r01*x9672))+(((-1.0)*r02*x9670))+(((-1.0)*gconst2*r00*x9671)));
evalcond[2]=((1.0)+((r11*x9672))+(((-1.0)*gconst2*r10*x9671))+(((-1.0)*r12*x9670)));
evalcond[3]=(((r12*x9673))+((r11*x9668))+(((-1.0)*r10*x9665*x9670))+((r10*x9663))+((r11*x9661*x9664)));
evalcond[4]=((((-1.0)*r11*x9663*x9670))+((r11*x9665))+((r10*x9674))+((r10*x9664))+(((-1.0)*r12*sj3*x9671)));
evalcond[5]=(((cj2*sj1))+((r21*x9668))+((r20*x9663))+x9667+(((-1.0)*r20*x9665*x9670))+((r22*x9673))+((r21*x9661*x9664)));
evalcond[6]=((((-1.0)*x9669))+(((-1.0)*r00*x9665*x9670))+((r00*x9663))+x9662+((r01*x9668))+((r01*x9661*x9664))+((r02*x9673)));
evalcond[7]=((((-1.0)*x9669))+((r21*x9665))+(((-1.0)*r21*x9663*x9670))+((r20*x9664))+((r20*x9674))+x9662+(((-1.0)*r22*sj3*x9671)));
evalcond[8]=((((-1.0)*sj1*x9666))+(((-1.0)*r02*sj3*x9671))+((r00*x9674))+((r00*x9664))+((r01*x9665))+(((-1.0)*x9667))+(((-1.0)*r01*x9663*x9670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9675=((-1.0)*r20);
IkReal x9676=x8938;
CheckValue<IkReal> x9678 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9675),IKFAST_ATAN2_MAGTHRESH);
if(!x9678.valid){
continue;
}
IkReal x9677=((-1.0)*(x9678.value));
sj5=gconst1;
cj5=gconst2;
j5=x9677;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9677;
IkReal gconst1=(r21*x9676);
IkReal gconst2=(x9675*x9676);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9679=((-1.0)*r20);
IkReal x9680=x8938;
CheckValue<IkReal> x9682 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9679),IKFAST_ATAN2_MAGTHRESH);
if(!x9682.valid){
continue;
}
IkReal x9681=((-1.0)*(x9682.value));
sj5=gconst1;
cj5=gconst2;
j5=x9681;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9681;
IkReal gconst1=(r21*x9680);
IkReal gconst2=(x9679*x9680);
CheckValue<IkReal> x9690=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9690.valid){
continue;
}
IkReal x9683=x9690.value;
IkReal x9684=(sj3*x9683);
IkReal x9685=(r11*x9684);
IkReal x9686=(r00*x9684);
IkReal x9687=(r01*x9684);
IkReal x9688=(r10*x9684);
IkReal x9689=(r20*r21*x9684);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9685))+((r01*x9685*(r21*r21)))+((r10*x9686*(r20*r20)))+((r10*r20*r21*x9687))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9691=gconst2*gconst2;
IkReal x9692=gconst1*gconst1;
IkReal x9693=((1.0)*cj3);
IkReal x9694=((1.0)*sj3);
IkReal x9695=(r11*sj3);
IkReal x9696=(r10*sj3);
IkReal x9697=(gconst1*gconst2*r00);
IkReal x9698=(gconst1*gconst2*r01);
IkReal x9699=(r00*x9691);
IkReal x9700=(r01*x9692);
CheckValue<IkReal> x9701=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9693*x9700))+((cj3*r11*x9697))+((cj3*r10*x9698))+(((-1.0)*r10*x9693*x9699))+(((-1.0)*r02*r12*x9693)))),-1);
if(!x9701.valid){
continue;
}
CheckValue<IkReal> x9702 = IKatan2WithCheck(IkReal((((gconst1*r02*x9696))+((gconst2*r02*x9695)))),IkReal((((x9696*x9700))+((x9695*x9698))+(((-1.0)*r10*x9694*x9697))+(((-1.0)*r11*x9694*x9699)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9701.value)))+(x9702.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9703=IKsin(j4);
IkReal x9704=IKcos(j4);
IkReal x9705=(cj2*sj1);
IkReal x9706=(cj1*sj2);
IkReal x9707=(gconst1*sj3);
IkReal x9708=(cj3*gconst1);
IkReal x9709=(sj1*sj2);
IkReal x9710=(cj3*gconst2);
IkReal x9711=(cj1*cj2);
IkReal x9712=(gconst2*sj3);
IkReal x9713=((1.0)*x9704);
IkReal x9714=((1.0)*x9703);
IkReal x9715=(gconst1*x9703);
IkReal x9716=(cj3*x9703);
IkReal x9717=(x9705+x9706);
IkReal x9718=(x9704*x9712);
evalcond[0]=((((-1.0)*gconst2*r20*x9714))+((r21*x9715))+(((-1.0)*r22*x9713)));
evalcond[1]=((((-1.0)*r02*x9713))+(((-1.0)*gconst2*r00*x9714))+((r01*x9715)));
evalcond[2]=((-1.0)+((r11*x9715))+(((-1.0)*gconst2*r10*x9714))+(((-1.0)*r12*x9713)));
evalcond[3]=((((-1.0)*r10*x9710*x9713))+((r10*x9707))+((r12*x9716))+((r11*x9712))+((r11*x9704*x9708)));
evalcond[4]=(((r10*x9708))+(((-1.0)*r12*sj3*x9714))+((r11*x9710))+(((-1.0)*r11*x9707*x9713))+((r10*x9718)));
evalcond[5]=(((r22*x9716))+((r20*x9707))+(((-1.0)*r20*x9710*x9713))+x9717+((r21*x9712))+((r21*x9704*x9708)));
evalcond[6]=(((r01*x9704*x9708))+(((-1.0)*x9709))+(((-1.0)*r00*x9710*x9713))+((r02*x9716))+((r00*x9707))+x9711+((r01*x9712)));
evalcond[7]=((((-1.0)*r02*sj3*x9714))+((r00*x9708))+x9717+(((-1.0)*r01*x9707*x9713))+((r01*x9710))+((r00*x9718)));
evalcond[8]=(((r20*x9708))+(((-1.0)*r22*sj3*x9714))+x9709+((r20*x9718))+((r21*x9710))+(((-1.0)*x9711))+(((-1.0)*r21*x9707*x9713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9719=gconst2*gconst2;
IkReal x9720=gconst1*gconst1;
IkReal x9721=(gconst2*r11);
IkReal x9722=(cj3*r02);
IkReal x9723=(gconst1*r01);
IkReal x9724=(cj3*r10);
IkReal x9725=(r10*sj3);
IkReal x9726=((1.0)*gconst1*r00);
IkReal x9727=(r01*x9720);
IkReal x9728=(r00*x9719);
CheckValue<IkReal> x9729=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst2*x9723*x9725))+((x9725*x9728))+((r11*sj3*x9727))+(((-1.0)*sj3*x9721*x9726)))),-1);
if(!x9729.valid){
continue;
}
CheckValue<IkReal> x9730 = IKatan2WithCheck(IkReal((((gconst1*r10*x9722))+((x9721*x9722)))),IkReal((((cj3*x9721*x9723))+(((-1.0)*gconst2*x9724*x9726))+(((-1.0)*cj3*r11*x9728))+((x9724*x9727)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9729.value)))+(x9730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9731=IKsin(j4);
IkReal x9732=IKcos(j4);
IkReal x9733=(cj2*sj1);
IkReal x9734=(cj1*sj2);
IkReal x9735=(gconst1*sj3);
IkReal x9736=(cj3*gconst1);
IkReal x9737=(sj1*sj2);
IkReal x9738=(cj3*gconst2);
IkReal x9739=(cj1*cj2);
IkReal x9740=(gconst2*sj3);
IkReal x9741=((1.0)*x9732);
IkReal x9742=((1.0)*x9731);
IkReal x9743=(gconst1*x9731);
IkReal x9744=(cj3*x9731);
IkReal x9745=(x9733+x9734);
IkReal x9746=(x9732*x9740);
evalcond[0]=(((r21*x9743))+(((-1.0)*gconst2*r20*x9742))+(((-1.0)*r22*x9741)));
evalcond[1]=((((-1.0)*gconst2*r00*x9742))+(((-1.0)*r02*x9741))+((r01*x9743)));
evalcond[2]=((-1.0)+((r11*x9743))+(((-1.0)*gconst2*r10*x9742))+(((-1.0)*r12*x9741)));
evalcond[3]=(((r11*x9740))+((r11*x9732*x9736))+((r12*x9744))+(((-1.0)*r10*x9738*x9741))+((r10*x9735)));
evalcond[4]=(((r11*x9738))+((r10*x9746))+(((-1.0)*r12*sj3*x9742))+(((-1.0)*r11*x9735*x9741))+((r10*x9736)));
evalcond[5]=(((r21*x9740))+(((-1.0)*r20*x9738*x9741))+((r22*x9744))+((r21*x9732*x9736))+((r20*x9735))+x9745);
evalcond[6]=(((r02*x9744))+x9739+(((-1.0)*r00*x9738*x9741))+((r01*x9740))+((r01*x9732*x9736))+(((-1.0)*x9737))+((r00*x9735)));
evalcond[7]=((((-1.0)*r02*sj3*x9742))+x9745+(((-1.0)*r01*x9735*x9741))+((r00*x9746))+((r01*x9738))+((r00*x9736)));
evalcond[8]=((((-1.0)*r21*x9735*x9741))+((r20*x9736))+x9737+((r20*x9746))+((r21*x9738))+(((-1.0)*r22*sj3*x9742))+(((-1.0)*x9739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9747 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9747.valid){
continue;
}
CheckValue<IkReal> x9748=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9747.value)+(((1.5707963267949)*(x9748.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9749=IKsin(j4);
IkReal x9750=IKcos(j4);
IkReal x9751=(cj2*sj1);
IkReal x9752=(cj1*sj2);
IkReal x9753=(gconst1*sj3);
IkReal x9754=(cj3*gconst1);
IkReal x9755=(sj1*sj2);
IkReal x9756=(cj3*gconst2);
IkReal x9757=(cj1*cj2);
IkReal x9758=(gconst2*sj3);
IkReal x9759=((1.0)*x9750);
IkReal x9760=((1.0)*x9749);
IkReal x9761=(gconst1*x9749);
IkReal x9762=(cj3*x9749);
IkReal x9763=(x9752+x9751);
IkReal x9764=(x9750*x9758);
evalcond[0]=((((-1.0)*r22*x9759))+((r21*x9761))+(((-1.0)*gconst2*r20*x9760)));
evalcond[1]=((((-1.0)*gconst2*r00*x9760))+(((-1.0)*r02*x9759))+((r01*x9761)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9760))+((r11*x9761))+(((-1.0)*r12*x9759)));
evalcond[3]=(((r10*x9753))+((r11*x9758))+((r12*x9762))+((r11*x9750*x9754))+(((-1.0)*r10*x9756*x9759)));
evalcond[4]=(((r10*x9754))+((r11*x9756))+((r10*x9764))+(((-1.0)*r12*sj3*x9760))+(((-1.0)*r11*x9753*x9759)));
evalcond[5]=(((r22*x9762))+((r21*x9750*x9754))+((r21*x9758))+x9763+((r20*x9753))+(((-1.0)*r20*x9756*x9759)));
evalcond[6]=(((r01*x9758))+(((-1.0)*x9755))+((r00*x9753))+((r01*x9750*x9754))+x9757+(((-1.0)*r00*x9756*x9759))+((r02*x9762)));
evalcond[7]=(((r01*x9756))+((r00*x9754))+(((-1.0)*r01*x9753*x9759))+((r00*x9764))+x9763+(((-1.0)*r02*sj3*x9760)));
evalcond[8]=((((-1.0)*x9757))+(((-1.0)*r21*x9753*x9759))+((r21*x9756))+x9755+((r20*x9764))+((r20*x9754))+(((-1.0)*r22*sj3*x9760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9765=((-1.0)*r20);
IkReal x9766=x8938;
CheckValue<IkReal> x9768 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9765),IKFAST_ATAN2_MAGTHRESH);
if(!x9768.valid){
continue;
}
IkReal x9767=((-1.0)*(x9768.value));
sj5=gconst1;
cj5=gconst2;
j5=x9767;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9767;
IkReal gconst1=(r21*x9766);
IkReal gconst2=(x9765*x9766);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9769=((-1.0)*r20);
IkReal x9770=x8938;
CheckValue<IkReal> x9772 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9769),IKFAST_ATAN2_MAGTHRESH);
if(!x9772.valid){
continue;
}
IkReal x9771=((-1.0)*(x9772.value));
sj5=gconst1;
cj5=gconst2;
j5=x9771;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9771;
IkReal gconst1=(r21*x9770);
IkReal gconst2=(x9769*x9770);
CheckValue<IkReal> x9780=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9780.valid){
continue;
}
IkReal x9773=x9780.value;
IkReal x9774=(sj3*x9773);
IkReal x9775=(r11*x9774);
IkReal x9776=(r00*x9774);
IkReal x9777=(r01*x9774);
IkReal x9778=(r10*x9774);
IkReal x9779=(r20*r21*x9774);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9776*(r20*r20)))+((r00*r20*r21*x9775))+((r01*x9775*(r21*r21)))+((r10*r20*r21*x9777))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9781=gconst1*gconst1;
IkReal x9782=gconst2*gconst2;
IkReal x9783=((1.0)*cj3);
IkReal x9784=(gconst2*r10);
IkReal x9785=(r01*sj3);
IkReal x9786=(gconst1*r00*sj3);
IkReal x9787=(gconst1*gconst2*r11);
IkReal x9788=(r10*x9782);
IkReal x9789=(r11*x9781);
CheckValue<IkReal> x9790=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9783*x9788))+((cj3*r00*x9787))+(((-1.0)*r01*x9783*x9789))+(((-1.0)*r02*r12*x9783))+((cj3*gconst1*r01*x9784)))),-1);
if(!x9790.valid){
continue;
}
CheckValue<IkReal> x9791 = IKatan2WithCheck(IkReal((((gconst2*r12*x9785))+((r12*x9786)))),IkReal(((((-1.0)*x9785*x9788))+((r00*sj3*x9789))+((x9785*x9787))+(((-1.0)*x9784*x9786)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9790.value)))+(x9791.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9792=IKsin(j4);
IkReal x9793=IKcos(j4);
IkReal x9794=(sj1*sj2);
IkReal x9795=(gconst1*sj3);
IkReal x9796=(cj3*gconst1);
IkReal x9797=(cj3*gconst2);
IkReal x9798=((1.0)*cj2);
IkReal x9799=(cj1*sj2);
IkReal x9800=(gconst2*sj3);
IkReal x9801=(cj1*x9798);
IkReal x9802=((1.0)*x9793);
IkReal x9803=((1.0)*x9792);
IkReal x9804=(gconst1*x9792);
IkReal x9805=(cj3*x9792);
IkReal x9806=(x9793*x9800);
evalcond[0]=(((r21*x9804))+(((-1.0)*r22*x9802))+(((-1.0)*gconst2*r20*x9803)));
evalcond[1]=((((-1.0)*gconst2*r10*x9803))+((r11*x9804))+(((-1.0)*r12*x9802)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9803))+(((-1.0)*r02*x9802))+((r01*x9804)));
evalcond[3]=(((r00*x9795))+((r02*x9805))+((r01*x9793*x9796))+(((-1.0)*r00*x9797*x9802))+((r01*x9800)));
evalcond[4]=(((r00*x9806))+(((-1.0)*r01*x9795*x9802))+((r00*x9796))+((r01*x9797))+(((-1.0)*r02*sj3*x9803)));
evalcond[5]=(((cj2*sj1))+((r21*x9800))+((r21*x9793*x9796))+((r20*x9795))+(((-1.0)*r20*x9797*x9802))+((r22*x9805))+x9799);
evalcond[6]=((((-1.0)*x9801))+((r12*x9805))+((r11*x9793*x9796))+((r10*x9795))+(((-1.0)*r10*x9797*x9802))+((r11*x9800))+x9794);
evalcond[7]=((((-1.0)*x9801))+(((-1.0)*r22*sj3*x9803))+((r20*x9796))+x9794+((r21*x9797))+(((-1.0)*r21*x9795*x9802))+((r20*x9806)));
evalcond[8]=(((r10*x9806))+(((-1.0)*sj1*x9798))+((r11*x9797))+((r10*x9796))+(((-1.0)*r11*x9795*x9802))+(((-1.0)*x9799))+(((-1.0)*r12*sj3*x9803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9807=gconst2*gconst2;
IkReal x9808=gconst1*gconst1;
IkReal x9809=(gconst1*r00);
IkReal x9810=(r11*sj3);
IkReal x9811=((1.0)*gconst2);
IkReal x9812=(cj3*r12);
IkReal x9813=(cj3*r11);
IkReal x9814=(gconst2*r01);
IkReal x9815=(cj3*r10);
IkReal x9816=(r10*sj3);
CheckValue<IkReal> x9817 = IKatan2WithCheck(IkReal((((x9809*x9812))+((x9812*x9814)))),IkReal(((((-1.0)*x9809*x9811*x9815))+(((-1.0)*r01*x9807*x9815))+((r00*x9808*x9813))+((gconst1*x9813*x9814)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9817.valid){
continue;
}
CheckValue<IkReal> x9818=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r01*x9808*x9810))+(((-1.0)*x9809*x9810*x9811))+((r00*x9807*x9816))+(((-1.0)*gconst1*r01*x9811*x9816)))),-1);
if(!x9818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9817.value)+(((1.5707963267949)*(x9818.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9819=IKsin(j4);
IkReal x9820=IKcos(j4);
IkReal x9821=(sj1*sj2);
IkReal x9822=(gconst1*sj3);
IkReal x9823=(cj3*gconst1);
IkReal x9824=(cj3*gconst2);
IkReal x9825=((1.0)*cj2);
IkReal x9826=(cj1*sj2);
IkReal x9827=(gconst2*sj3);
IkReal x9828=(cj1*x9825);
IkReal x9829=((1.0)*x9820);
IkReal x9830=((1.0)*x9819);
IkReal x9831=(gconst1*x9819);
IkReal x9832=(cj3*x9819);
IkReal x9833=(x9820*x9827);
evalcond[0]=(((r21*x9831))+(((-1.0)*gconst2*r20*x9830))+(((-1.0)*r22*x9829)));
evalcond[1]=(((r11*x9831))+(((-1.0)*gconst2*r10*x9830))+(((-1.0)*r12*x9829)));
evalcond[2]=((-1.0)+((r01*x9831))+(((-1.0)*r02*x9829))+(((-1.0)*gconst2*r00*x9830)));
evalcond[3]=((((-1.0)*r00*x9824*x9829))+((r00*x9822))+((r01*x9820*x9823))+((r01*x9827))+((r02*x9832)));
evalcond[4]=((((-1.0)*r02*sj3*x9830))+((r00*x9833))+((r00*x9823))+((r01*x9824))+(((-1.0)*r01*x9822*x9829)));
evalcond[5]=(((r20*x9822))+((cj2*sj1))+((r21*x9820*x9823))+((r22*x9832))+((r21*x9827))+(((-1.0)*r20*x9824*x9829))+x9826);
evalcond[6]=(((r11*x9827))+(((-1.0)*x9828))+((r12*x9832))+((r11*x9820*x9823))+(((-1.0)*r10*x9824*x9829))+x9821+((r10*x9822)));
evalcond[7]=(((r20*x9823))+(((-1.0)*x9828))+(((-1.0)*r21*x9822*x9829))+(((-1.0)*r22*sj3*x9830))+((r21*x9824))+((r20*x9833))+x9821);
evalcond[8]=(((r10*x9833))+((r11*x9824))+(((-1.0)*r12*sj3*x9830))+(((-1.0)*r11*x9822*x9829))+(((-1.0)*x9826))+((r10*x9823))+(((-1.0)*sj1*x9825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9834=((1.0)*gconst2);
CheckValue<IkReal> x9835 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9834))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9835.valid){
continue;
}
CheckValue<IkReal> x9836=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9834)))),-1);
if(!x9836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9835.value)+(((1.5707963267949)*(x9836.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9837=IKsin(j4);
IkReal x9838=IKcos(j4);
IkReal x9839=(sj1*sj2);
IkReal x9840=(gconst1*sj3);
IkReal x9841=(cj3*gconst1);
IkReal x9842=(cj3*gconst2);
IkReal x9843=((1.0)*cj2);
IkReal x9844=(cj1*sj2);
IkReal x9845=(gconst2*sj3);
IkReal x9846=(cj1*x9843);
IkReal x9847=((1.0)*x9838);
IkReal x9848=((1.0)*x9837);
IkReal x9849=(gconst1*x9837);
IkReal x9850=(cj3*x9837);
IkReal x9851=(x9838*x9845);
evalcond[0]=((((-1.0)*gconst2*r20*x9848))+(((-1.0)*r22*x9847))+((r21*x9849)));
evalcond[1]=(((r11*x9849))+(((-1.0)*r12*x9847))+(((-1.0)*gconst2*r10*x9848)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9848))+(((-1.0)*r02*x9847))+((r01*x9849)));
evalcond[3]=(((r02*x9850))+(((-1.0)*r00*x9842*x9847))+((r01*x9845))+((r00*x9840))+((r01*x9838*x9841)));
evalcond[4]=((((-1.0)*r02*sj3*x9848))+((r01*x9842))+((r00*x9851))+(((-1.0)*r01*x9840*x9847))+((r00*x9841)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x9842*x9847))+((r20*x9840))+((r21*x9838*x9841))+((r22*x9850))+x9844+((r21*x9845)));
evalcond[6]=(((r11*x9845))+((r10*x9840))+((r11*x9838*x9841))+(((-1.0)*r10*x9842*x9847))+(((-1.0)*x9846))+x9839+((r12*x9850)));
evalcond[7]=(((r20*x9841))+(((-1.0)*r22*sj3*x9848))+((r20*x9851))+(((-1.0)*x9846))+(((-1.0)*r21*x9840*x9847))+x9839+((r21*x9842)));
evalcond[8]=(((r10*x9851))+((r11*x9842))+(((-1.0)*r12*sj3*x9848))+((r10*x9841))+(((-1.0)*x9844))+(((-1.0)*sj1*x9843))+(((-1.0)*r11*x9840*x9847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9852=((-1.0)*r20);
IkReal x9853=x8938;
CheckValue<IkReal> x9855 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9852),IKFAST_ATAN2_MAGTHRESH);
if(!x9855.valid){
continue;
}
IkReal x9854=((-1.0)*(x9855.value));
sj5=gconst1;
cj5=gconst2;
j5=x9854;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9854;
IkReal gconst1=(r21*x9853);
IkReal gconst2=(x9852*x9853);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9856=((-1.0)*r20);
IkReal x9857=x8938;
CheckValue<IkReal> x9859 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9856),IKFAST_ATAN2_MAGTHRESH);
if(!x9859.valid){
continue;
}
IkReal x9858=((-1.0)*(x9859.value));
sj5=gconst1;
cj5=gconst2;
j5=x9858;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9858;
IkReal gconst1=(r21*x9857);
IkReal gconst2=(x9856*x9857);
CheckValue<IkReal> x9867=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9867.valid){
continue;
}
IkReal x9860=x9867.value;
IkReal x9861=(sj3*x9860);
IkReal x9862=(r11*x9861);
IkReal x9863=(r00*x9861);
IkReal x9864=(r01*x9861);
IkReal x9865=(r10*x9861);
IkReal x9866=(r20*r21*x9861);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9864))+((r01*x9862*(r21*r21)))+((r10*x9863*(r20*r20)))+((r00*r20*r21*x9862))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9868=gconst1*gconst1;
IkReal x9869=gconst2*gconst2;
IkReal x9870=((1.0)*cj3);
IkReal x9871=(gconst2*r10);
IkReal x9872=(r01*sj3);
IkReal x9873=(gconst1*r00*sj3);
IkReal x9874=(gconst1*gconst2*r11);
IkReal x9875=(r10*x9869);
IkReal x9876=(r11*x9868);
CheckValue<IkReal> x9877 = IKatan2WithCheck(IkReal((((r12*x9873))+((gconst2*r12*x9872)))),IkReal(((((-1.0)*x9872*x9875))+((x9872*x9874))+(((-1.0)*x9871*x9873))+((r00*sj3*x9876)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9877.valid){
continue;
}
CheckValue<IkReal> x9878=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9870))+(((-1.0)*r01*x9870*x9876))+(((-1.0)*r00*x9870*x9875))+((cj3*gconst1*r01*x9871))+((cj3*r00*x9874)))),-1);
if(!x9878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9877.value)+(((1.5707963267949)*(x9878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9879=IKsin(j4);
IkReal x9880=IKcos(j4);
IkReal x9881=(cj2*sj1);
IkReal x9882=(cj1*sj2);
IkReal x9883=(gconst1*sj3);
IkReal x9884=(cj3*gconst1);
IkReal x9885=(sj1*sj2);
IkReal x9886=(cj3*gconst2);
IkReal x9887=(cj1*cj2);
IkReal x9888=(gconst2*sj3);
IkReal x9889=((1.0)*x9880);
IkReal x9890=((1.0)*x9879);
IkReal x9891=(gconst1*x9879);
IkReal x9892=(cj3*x9879);
IkReal x9893=(x9882+x9881);
IkReal x9894=(x9880*x9888);
evalcond[0]=((((-1.0)*r22*x9889))+((r21*x9891))+(((-1.0)*gconst2*r20*x9890)));
evalcond[1]=(((r11*x9891))+(((-1.0)*gconst2*r10*x9890))+(((-1.0)*r12*x9889)));
evalcond[2]=((1.0)+((r01*x9891))+(((-1.0)*gconst2*r00*x9890))+(((-1.0)*r02*x9889)));
evalcond[3]=((((-1.0)*r00*x9886*x9889))+((r01*x9888))+((r00*x9883))+((r02*x9892))+((r01*x9880*x9884)));
evalcond[4]=((((-1.0)*r01*x9883*x9889))+((r01*x9886))+((r00*x9894))+((r00*x9884))+(((-1.0)*r02*sj3*x9890)));
evalcond[5]=(((r20*x9883))+((r22*x9892))+((r21*x9888))+(((-1.0)*r20*x9886*x9889))+x9893+((r21*x9880*x9884)));
evalcond[6]=(((r11*x9880*x9884))+((r11*x9888))+((r12*x9892))+(((-1.0)*r10*x9886*x9889))+((r10*x9883))+(((-1.0)*x9885))+x9887);
evalcond[7]=((((-1.0)*r11*x9883*x9889))+((r11*x9886))+((r10*x9884))+((r10*x9894))+(((-1.0)*r12*sj3*x9890))+x9893);
evalcond[8]=(((r20*x9884))+((r21*x9886))+(((-1.0)*r21*x9883*x9889))+((r20*x9894))+(((-1.0)*x9887))+x9885+(((-1.0)*r22*sj3*x9890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9895=gconst2*gconst2;
IkReal x9896=gconst1*gconst1;
IkReal x9897=(gconst1*r00);
IkReal x9898=(r11*sj3);
IkReal x9899=((1.0)*gconst2);
IkReal x9900=(cj3*r12);
IkReal x9901=(cj3*r11);
IkReal x9902=(gconst2*r01);
IkReal x9903=(cj3*r10);
IkReal x9904=(r10*sj3);
CheckValue<IkReal> x9905 = IKatan2WithCheck(IkReal((((x9900*x9902))+((x9897*x9900)))),IkReal(((((-1.0)*r01*x9895*x9903))+((gconst1*x9901*x9902))+((r00*x9896*x9901))+(((-1.0)*x9897*x9899*x9903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9905.valid){
continue;
}
CheckValue<IkReal> x9906=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9899*x9904))+(((-1.0)*x9897*x9898*x9899))+((r00*x9895*x9904))+((r01*x9896*x9898)))),-1);
if(!x9906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9905.value)+(((1.5707963267949)*(x9906.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9907=IKsin(j4);
IkReal x9908=IKcos(j4);
IkReal x9909=(cj2*sj1);
IkReal x9910=(cj1*sj2);
IkReal x9911=(gconst1*sj3);
IkReal x9912=(cj3*gconst1);
IkReal x9913=(sj1*sj2);
IkReal x9914=(cj3*gconst2);
IkReal x9915=(cj1*cj2);
IkReal x9916=(gconst2*sj3);
IkReal x9917=((1.0)*x9908);
IkReal x9918=((1.0)*x9907);
IkReal x9919=(gconst1*x9907);
IkReal x9920=(cj3*x9907);
IkReal x9921=(x9909+x9910);
IkReal x9922=(x9908*x9916);
evalcond[0]=((((-1.0)*gconst2*r20*x9918))+(((-1.0)*r22*x9917))+((r21*x9919)));
evalcond[1]=((((-1.0)*gconst2*r10*x9918))+(((-1.0)*r12*x9917))+((r11*x9919)));
evalcond[2]=((1.0)+((r01*x9919))+(((-1.0)*r02*x9917))+(((-1.0)*gconst2*r00*x9918)));
evalcond[3]=((((-1.0)*r00*x9914*x9917))+((r02*x9920))+((r01*x9908*x9912))+((r01*x9916))+((r00*x9911)));
evalcond[4]=(((r01*x9914))+((r00*x9912))+(((-1.0)*r01*x9911*x9917))+((r00*x9922))+(((-1.0)*r02*sj3*x9918)));
evalcond[5]=(((r20*x9911))+((r21*x9908*x9912))+((r21*x9916))+x9921+(((-1.0)*r20*x9914*x9917))+((r22*x9920)));
evalcond[6]=((((-1.0)*x9913))+((r11*x9916))+(((-1.0)*r10*x9914*x9917))+((r11*x9908*x9912))+((r12*x9920))+x9915+((r10*x9911)));
evalcond[7]=(((r10*x9922))+((r11*x9914))+(((-1.0)*r11*x9911*x9917))+x9921+((r10*x9912))+(((-1.0)*r12*sj3*x9918)));
evalcond[8]=((((-1.0)*r22*sj3*x9918))+((r20*x9912))+(((-1.0)*x9915))+((r20*x9922))+(((-1.0)*r21*x9911*x9917))+((r21*x9914))+x9913);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9923 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9923.valid){
continue;
}
CheckValue<IkReal> x9924=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9923.value)+(((1.5707963267949)*(x9924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9925=IKsin(j4);
IkReal x9926=IKcos(j4);
IkReal x9927=(cj2*sj1);
IkReal x9928=(cj1*sj2);
IkReal x9929=(gconst1*sj3);
IkReal x9930=(cj3*gconst1);
IkReal x9931=(sj1*sj2);
IkReal x9932=(cj3*gconst2);
IkReal x9933=(cj1*cj2);
IkReal x9934=(gconst2*sj3);
IkReal x9935=((1.0)*x9926);
IkReal x9936=((1.0)*x9925);
IkReal x9937=(gconst1*x9925);
IkReal x9938=(cj3*x9925);
IkReal x9939=(x9928+x9927);
IkReal x9940=(x9926*x9934);
evalcond[0]=((((-1.0)*gconst2*r20*x9936))+(((-1.0)*r22*x9935))+((r21*x9937)));
evalcond[1]=(((r11*x9937))+(((-1.0)*r12*x9935))+(((-1.0)*gconst2*r10*x9936)));
evalcond[2]=((1.0)+((r01*x9937))+(((-1.0)*r02*x9935))+(((-1.0)*gconst2*r00*x9936)));
evalcond[3]=((((-1.0)*r00*x9932*x9935))+((r01*x9934))+((r01*x9926*x9930))+((r02*x9938))+((r00*x9929)));
evalcond[4]=((((-1.0)*r01*x9929*x9935))+((r00*x9930))+((r01*x9932))+(((-1.0)*r02*sj3*x9936))+((r00*x9940)));
evalcond[5]=((((-1.0)*r20*x9932*x9935))+((r22*x9938))+((r20*x9929))+((r21*x9934))+((r21*x9926*x9930))+x9939);
evalcond[6]=(((r10*x9929))+(((-1.0)*r10*x9932*x9935))+((r12*x9938))+((r11*x9934))+(((-1.0)*x9931))+((r11*x9926*x9930))+x9933);
evalcond[7]=(((r10*x9930))+((r11*x9932))+(((-1.0)*r11*x9929*x9935))+(((-1.0)*r12*sj3*x9936))+x9939+((r10*x9940)));
evalcond[8]=((((-1.0)*r22*sj3*x9936))+((r21*x9932))+((r20*x9940))+(((-1.0)*x9933))+x9931+((r20*x9930))+(((-1.0)*r21*x9929*x9935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9941=((-1.0)*r20);
IkReal x9942=((-1.0)*px);
CheckValue<IkReal> x9944 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9941),IKFAST_ATAN2_MAGTHRESH);
if(!x9944.valid){
continue;
}
IkReal x9943=((-1.0)*(x9944.value));
sj5=gconst1;
cj5=gconst2;
j5=x9943;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9942);
rxp1_1=(px*r21);
rxp1_2=(r11*x9942);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9943;
IkReal gconst1=r21;
IkReal gconst2=x9941;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9945=((-1.0)*r20);
IkReal x9946=((-1.0)*px);
CheckValue<IkReal> x9948 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9945),IKFAST_ATAN2_MAGTHRESH);
if(!x9948.valid){
continue;
}
IkReal x9947=((-1.0)*(x9948.value));
sj5=gconst1;
cj5=gconst2;
j5=x9947;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9946);
rxp1_1=(px*r21);
rxp1_2=(r11*x9946);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9947;
IkReal gconst1=r21;
IkReal gconst2=x9945;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9949=((-1.0)*r20);
IkReal x9950=((-1.0)*px);
CheckValue<IkReal> x9952 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9949),IKFAST_ATAN2_MAGTHRESH);
if(!x9952.valid){
continue;
}
IkReal x9951=((-1.0)*(x9952.value));
sj5=gconst1;
cj5=gconst2;
j5=x9951;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9950);
rxp1_1=(px*r21);
rxp1_2=(r11*x9950);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9951;
IkReal gconst1=r21;
IkReal gconst2=x9949;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9953=((-1.0)*r20);
IkReal x9954=((-1.0)*px);
CheckValue<IkReal> x9956 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9953),IKFAST_ATAN2_MAGTHRESH);
if(!x9956.valid){
continue;
}
IkReal x9955=((-1.0)*(x9956.value));
sj5=gconst1;
cj5=gconst2;
j5=x9955;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9954);
rxp1_1=(px*r21);
rxp1_2=(r11*x9954);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9955;
IkReal gconst1=r21;
IkReal gconst2=x9953;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9957=((-1.0)*r20);
IkReal x9958=((-1.0)*px);
CheckValue<IkReal> x9960 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9957),IKFAST_ATAN2_MAGTHRESH);
if(!x9960.valid){
continue;
}
IkReal x9959=((-1.0)*(x9960.value));
sj5=gconst1;
cj5=gconst2;
j5=x9959;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9958);
rxp1_1=(px*r21);
rxp1_2=(r11*x9958);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9959;
IkReal gconst1=r21;
IkReal gconst2=x9957;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9961=((-1.0)*r20);
IkReal x9962=((-1.0)*px);
CheckValue<IkReal> x9964 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9961),IKFAST_ATAN2_MAGTHRESH);
if(!x9964.valid){
continue;
}
IkReal x9963=((-1.0)*(x9964.value));
sj5=gconst1;
cj5=gconst2;
j5=x9963;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9962);
rxp1_1=(px*r21);
rxp1_2=(r11*x9962);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9963;
IkReal gconst1=r21;
IkReal gconst2=x9961;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9967=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9967.valid){
continue;
}
IkReal x9965=x9967.value;
IkReal x9966=(sj0*x9965);
cj4array[0]=(((cj2*sj1*x9966))+((cj1*sj2*x9966)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9968=IKsin(j4);
IkReal x9969=IKcos(j4);
IkReal x9970=(gconst1*x9968);
IkReal x9971=((1.0)*x9969);
IkReal x9972=((1.0)*gconst2*x9968);
evalcond[0]=((-1.0)*r02*x9968);
evalcond[1]=((((-1.0)*r02*x9971))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*r20*x9972))+((r21*x9970)));
evalcond[3]=((((-1.0)*r10*x9972))+((r11*x9970)));
evalcond[4]=(((gconst2*r20*x9969))+(((-1.0)*gconst1*r21*x9971))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9974=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9974.valid){
continue;
}
IkReal x9973=x9974.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9973))+((cj1*cj2*x9973)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9975=IKsin(j4);
IkReal x9976=IKcos(j4);
IkReal x9977=(gconst2*r10);
IkReal x9978=((1.0)*sj0);
IkReal x9979=((1.0)*x9975);
IkReal x9980=(gconst1*x9975);
IkReal x9981=((1.0)*x9976);
evalcond[0]=((-1.0)*r02*x9975);
evalcond[1]=((((-1.0)*r02*x9981))+(((-1.0)*x9978)));
evalcond[2]=((((-1.0)*gconst2*r20*x9979))+((r21*x9980)));
evalcond[3]=(((r11*x9980))+(((-1.0)*x9977*x9979)));
evalcond[4]=(((x9976*x9977))+(((-1.0)*gconst1*r11*x9981))+(((-1.0)*cj2*sj1*x9978))+(((-1.0)*cj1*sj2*x9978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9982=IKPowWithIntegerCheck(r02,-1);
if(!x9982.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9982.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9983=IKsin(j4);
IkReal x9984=IKcos(j4);
IkReal x9985=(gconst2*r10);
IkReal x9986=((1.0)*sj0);
IkReal x9987=(gconst1*r11);
IkReal x9988=(gconst1*r21);
IkReal x9989=(gconst2*r20);
IkReal x9990=((1.0)*x9983);
IkReal x9991=((1.0)*x9984);
evalcond[0]=((-1.0)*r02*x9983);
evalcond[1]=(((x9983*x9988))+(((-1.0)*x9989*x9990)));
evalcond[2]=(((x9983*x9987))+(((-1.0)*x9985*x9990)));
evalcond[3]=((((-1.0)*x9988*x9991))+((x9984*x9989))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj2*sj1*x9986))+(((-1.0)*cj1*sj2*x9986))+((x9984*x9985))+(((-1.0)*x9987*x9991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9992=((-1.0)*r20);
IkReal x9993=((-1.0)*px);
CheckValue<IkReal> x9995 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9992),IKFAST_ATAN2_MAGTHRESH);
if(!x9995.valid){
continue;
}
IkReal x9994=((-1.0)*(x9995.value));
sj5=gconst1;
cj5=gconst2;
j5=x9994;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9993);
rxp1_1=(px*r21);
rxp1_2=(r11*x9993);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9994;
IkReal gconst1=r21;
IkReal gconst2=x9992;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9996=((-1.0)*r20);
IkReal x9997=((-1.0)*px);
CheckValue<IkReal> x9999 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9996),IKFAST_ATAN2_MAGTHRESH);
if(!x9999.valid){
continue;
}
IkReal x9998=((-1.0)*(x9999.value));
sj5=gconst1;
cj5=gconst2;
j5=x9998;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9997);
rxp1_1=(px*r21);
rxp1_2=(r11*x9997);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9998;
IkReal gconst1=r21;
IkReal gconst2=x9996;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10000=((-1.0)*r20);
IkReal x10001=((-1.0)*px);
CheckValue<IkReal> x10003 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10000),IKFAST_ATAN2_MAGTHRESH);
if(!x10003.valid){
continue;
}
IkReal x10002=((-1.0)*(x10003.value));
sj5=gconst1;
cj5=gconst2;
j5=x10002;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10001);
rxp1_1=(px*r21);
rxp1_2=(r11*x10001);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x10002;
IkReal gconst1=r21;
IkReal gconst2=x10000;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10006=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10006.valid){
continue;
}
IkReal x10004=x10006.value;
IkReal x10005=(sj0*x10004);
cj4array[0]=(((cj1*sj2*x10005))+((cj2*sj1*x10005)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10007=IKsin(j4);
IkReal x10008=IKcos(j4);
IkReal x10009=((1.0)*gconst2);
IkReal x10010=(gconst1*r21);
evalcond[0]=(r02*x10007);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x10008)));
evalcond[2]=((((-1.0)*r20*x10007*x10009))+((x10007*x10010)));
evalcond[3]=(((gconst1*r11*x10007))+(((-1.0)*r10*x10007*x10009)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x10008*x10009))+((x10008*x10010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10012=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x10012.valid){
continue;
}
IkReal x10011=x10012.value;
cj4array[0]=(((cj1*cj2*x10011))+(((-1.0)*sj1*sj2*x10011)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10013=IKsin(j4);
IkReal x10014=IKcos(j4);
IkReal x10015=((1.0)*sj0);
IkReal x10016=(gconst1*x10013);
IkReal x10017=((1.0)*x10014);
IkReal x10018=((1.0)*gconst2*x10013);
evalcond[0]=(r02*x10013);
evalcond[1]=((((-1.0)*r02*x10017))+(((-1.0)*x10015)));
evalcond[2]=(((r21*x10016))+(((-1.0)*r20*x10018)));
evalcond[3]=(((r11*x10016))+(((-1.0)*r10*x10018)));
evalcond[4]=((((-1.0)*gconst2*r10*x10017))+(((-1.0)*cj2*sj1*x10015))+(((-1.0)*cj1*sj2*x10015))+((gconst1*r11*x10014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10019=IKPowWithIntegerCheck(r02,-1);
if(!x10019.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10019.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10020=IKsin(j4);
IkReal x10021=IKcos(j4);
IkReal x10022=(gconst1*r21);
IkReal x10023=((1.0)*sj0);
IkReal x10024=(gconst1*r11);
IkReal x10025=((1.0)*gconst2*r10);
IkReal x10026=((1.0)*gconst2*r20);
evalcond[0]=(r02*x10020);
evalcond[1]=(((x10020*x10022))+(((-1.0)*x10020*x10026)));
evalcond[2]=(((x10020*x10024))+(((-1.0)*x10020*x10025)));
evalcond[3]=(((x10021*x10022))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10021*x10026)));
evalcond[4]=(((x10021*x10024))+(((-1.0)*cj2*sj1*x10023))+(((-1.0)*x10021*x10025))+(((-1.0)*cj1*sj2*x10023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10028=IKPowWithIntegerCheck(r02,-1);
if(!x10028.valid){
continue;
}
IkReal x10027=x10028.value;
CheckValue<IkReal> x10029=IKPowWithIntegerCheck(cj3,-1);
if(!x10029.valid){
continue;
}
if( IKabs((x10027*(x10029.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x10027)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10027*(x10029.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x10027))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10027*(x10029.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x10027));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10030=IKsin(j4);
IkReal x10031=IKcos(j4);
IkReal x10032=(gconst2*r10);
IkReal x10033=(gconst1*r11);
IkReal x10034=(sj1*sj2);
IkReal x10035=(gconst2*r20);
IkReal x10036=(cj2*sj1);
IkReal x10037=((1.0)*sj0);
IkReal x10038=(gconst1*r20);
IkReal x10039=(gconst2*r11);
IkReal x10040=(gconst1*r21);
IkReal x10041=((1.0)*cj0);
IkReal x10042=(gconst1*r10);
IkReal x10043=(cj1*sj2);
IkReal x10044=(gconst2*r21);
IkReal x10045=(sj3*x10031);
IkReal x10046=((1.0)*cj1*cj2);
IkReal x10047=(cj3*x10031);
IkReal x10048=(r02*x10030);
IkReal x10049=((1.0)*x10030);
evalcond[0]=((((-1.0)*r02*x10031))+(((-1.0)*x10037)));
evalcond[1]=((((-1.0)*x10035*x10049))+((x10030*x10040)));
evalcond[2]=(cj0+(((-1.0)*x10032*x10049))+((x10030*x10033)));
evalcond[3]=(((cj0*x10034))+(((-1.0)*cj1*cj2*x10041))+((cj3*x10048)));
evalcond[4]=((((-1.0)*x10041*x10043))+(((-1.0)*sj3*x10048))+(((-1.0)*x10036*x10041)));
evalcond[5]=(((sj3*x10038))+((sj3*x10044))+(((-1.0)*x10035*x10047))+x10043+x10036+((x10040*x10047)));
evalcond[6]=((((-1.0)*x10040*x10045))+x10034+((cj3*x10038))+((cj3*x10044))+(((-1.0)*x10046))+((x10035*x10045)));
evalcond[7]=(((sj0*x10034))+((sj3*x10039))+((sj3*x10042))+((x10033*x10047))+(((-1.0)*cj1*cj2*x10037))+(((-1.0)*x10032*x10047)));
evalcond[8]=((((-1.0)*x10037*x10043))+((x10032*x10045))+(((-1.0)*x10036*x10037))+((cj3*x10039))+((cj3*x10042))+(((-1.0)*x10033*x10045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10050=((1.0)*sj3);
IkReal x10051=((1.0)*gconst2);
CheckValue<IkReal> x10052=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x10051))),-1);
if(!x10052.valid){
continue;
}
CheckValue<IkReal> x10053=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x10051))),-1);
if(!x10053.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10052.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10053.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x10050))+(((-1.0)*gconst1*r20*x10050)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10052.value)))+IKsqr(((x10053.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x10050))+(((-1.0)*gconst1*r20*x10050))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10052.value)), ((x10053.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x10050))+(((-1.0)*gconst1*r20*x10050))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10054=IKsin(j4);
IkReal x10055=IKcos(j4);
IkReal x10056=(gconst2*r10);
IkReal x10057=(gconst1*r11);
IkReal x10058=(sj1*sj2);
IkReal x10059=(gconst2*r20);
IkReal x10060=(cj2*sj1);
IkReal x10061=((1.0)*sj0);
IkReal x10062=(gconst1*r20);
IkReal x10063=(gconst2*r11);
IkReal x10064=(gconst1*r21);
IkReal x10065=((1.0)*cj0);
IkReal x10066=(gconst1*r10);
IkReal x10067=(cj1*sj2);
IkReal x10068=(gconst2*r21);
IkReal x10069=(sj3*x10055);
IkReal x10070=((1.0)*cj1*cj2);
IkReal x10071=(cj3*x10055);
IkReal x10072=(r02*x10054);
IkReal x10073=((1.0)*x10054);
evalcond[0]=((((-1.0)*x10061))+(((-1.0)*r02*x10055)));
evalcond[1]=((((-1.0)*x10059*x10073))+((x10054*x10064)));
evalcond[2]=(cj0+(((-1.0)*x10056*x10073))+((x10054*x10057)));
evalcond[3]=((((-1.0)*cj1*cj2*x10065))+((cj0*x10058))+((cj3*x10072)));
evalcond[4]=((((-1.0)*x10060*x10065))+(((-1.0)*sj3*x10072))+(((-1.0)*x10065*x10067)));
evalcond[5]=(((sj3*x10062))+((sj3*x10068))+((x10064*x10071))+x10060+x10067+(((-1.0)*x10059*x10071)));
evalcond[6]=((((-1.0)*x10064*x10069))+(((-1.0)*x10070))+x10058+((x10059*x10069))+((cj3*x10062))+((cj3*x10068)));
evalcond[7]=(((sj3*x10063))+((sj3*x10066))+(((-1.0)*cj1*cj2*x10061))+((sj0*x10058))+((x10057*x10071))+(((-1.0)*x10056*x10071)));
evalcond[8]=((((-1.0)*x10057*x10069))+(((-1.0)*x10060*x10061))+(((-1.0)*x10061*x10067))+((cj3*x10063))+((cj3*x10066))+((x10056*x10069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10074=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10074.valid){
continue;
}
CheckValue<IkReal> x10075=IKPowWithIntegerCheck(r02,-1);
if(!x10075.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10074.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10075.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10074.value)))+IKsqr(((-1.0)*sj0*(x10075.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10074.value)), ((-1.0)*sj0*(x10075.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10076=IKsin(j4);
IkReal x10077=IKcos(j4);
IkReal x10078=(gconst2*r10);
IkReal x10079=(gconst1*r11);
IkReal x10080=(sj1*sj2);
IkReal x10081=(gconst2*r20);
IkReal x10082=(cj2*sj1);
IkReal x10083=((1.0)*sj0);
IkReal x10084=(gconst1*r20);
IkReal x10085=(gconst2*r11);
IkReal x10086=(gconst1*r21);
IkReal x10087=((1.0)*cj0);
IkReal x10088=(gconst1*r10);
IkReal x10089=(cj1*sj2);
IkReal x10090=(gconst2*r21);
IkReal x10091=(sj3*x10077);
IkReal x10092=((1.0)*cj1*cj2);
IkReal x10093=(cj3*x10077);
IkReal x10094=(r02*x10076);
IkReal x10095=((1.0)*x10076);
evalcond[0]=((((-1.0)*x10083))+(((-1.0)*r02*x10077)));
evalcond[1]=((((-1.0)*x10081*x10095))+((x10076*x10086)));
evalcond[2]=(((x10076*x10079))+cj0+(((-1.0)*x10078*x10095)));
evalcond[3]=((((-1.0)*cj1*cj2*x10087))+((cj0*x10080))+((cj3*x10094)));
evalcond[4]=((((-1.0)*x10087*x10089))+(((-1.0)*x10082*x10087))+(((-1.0)*sj3*x10094)));
evalcond[5]=(((sj3*x10084))+((x10086*x10093))+x10089+x10082+((sj3*x10090))+(((-1.0)*x10081*x10093)));
evalcond[6]=(((cj3*x10084))+((x10081*x10091))+(((-1.0)*x10086*x10091))+x10080+(((-1.0)*x10092))+((cj3*x10090)));
evalcond[7]=(((sj3*x10085))+((sj3*x10088))+(((-1.0)*cj1*cj2*x10083))+((sj0*x10080))+(((-1.0)*x10078*x10093))+((x10079*x10093)));
evalcond[8]=(((cj3*x10088))+((cj3*x10085))+(((-1.0)*x10079*x10091))+((x10078*x10091))+(((-1.0)*x10082*x10083))+(((-1.0)*x10083*x10089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10096=gconst1*gconst1;
IkReal x10097=r21*r21;
IkReal x10098=gconst2*gconst2;
IkReal x10099=r20*r20;
IkReal x10100=(gconst2*r20);
IkReal x10101=(cj1*cj2);
IkReal x10102=(sj1*sj2);
IkReal x10103=(gconst1*r21);
IkReal x10104=(cj3*gconst2);
IkReal x10105=(cj3*r20);
CheckValue<IkReal> x10106=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x10100*x10103))+((sj3*x10096*x10097))+((sj3*x10098*x10099)))),-1);
if(!x10106.valid){
continue;
}
CheckValue<IkReal> x10107 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x10101))+((gconst1*r22*x10105))+((r22*x10102))+((r21*r22*x10104)))),IkReal((((x10102*x10103))+((gconst1*x10097*x10104))+(((-1.0)*r21*x10098*x10105))+((r21*x10096*x10105))+(((-1.0)*x10100*x10102))+(((-1.0)*gconst1*x10099*x10104))+(((-1.0)*x10101*x10103))+((x10100*x10101)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10106.value)))+(x10107.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10108=IKsin(j4);
IkReal x10109=IKcos(j4);
IkReal x10110=(cj3*gconst1);
IkReal x10111=(gconst1*r01);
IkReal x10112=(gconst1*r11);
IkReal x10113=(sj1*sj2);
IkReal x10114=(cj3*gconst2);
IkReal x10115=(gconst1*sj3);
IkReal x10116=(gconst2*sj3);
IkReal x10117=((1.0)*sj0);
IkReal x10118=(cj1*sj2);
IkReal x10119=((1.0)*x10109);
IkReal x10120=((1.0)*x10108);
IkReal x10121=((1.0)*cj1*cj2);
IkReal x10122=(cj3*x10108);
IkReal x10123=((1.0)*cj2*sj1);
IkReal x10124=(x10109*x10116);
evalcond[0]=((((-1.0)*r22*x10119))+((gconst1*r21*x10108))+(((-1.0)*gconst2*r20*x10120)));
evalcond[1]=((((-1.0)*r12*x10119))+cj0+((x10108*x10112))+(((-1.0)*gconst2*r10*x10120)));
evalcond[2]=((((-1.0)*gconst2*r00*x10120))+((x10108*x10111))+(((-1.0)*r02*x10119))+(((-1.0)*x10117)));
evalcond[3]=(((r21*x10116))+((cj2*sj1))+((r20*x10115))+x10118+((r21*x10109*x10110))+((r22*x10122))+(((-1.0)*r20*x10114*x10119)));
evalcond[4]=(((r21*x10114))+(((-1.0)*r21*x10115*x10119))+((r20*x10124))+((r20*x10110))+(((-1.0)*r22*sj3*x10120))+x10113+(((-1.0)*x10121)));
evalcond[5]=(((r01*x10116))+((cj0*x10113))+((r00*x10115))+(((-1.0)*r00*x10114*x10119))+((r02*x10122))+((r01*x10109*x10110))+(((-1.0)*cj0*x10121)));
evalcond[6]=(((r11*x10109*x10110))+(((-1.0)*cj1*cj2*x10117))+((r11*x10116))+(((-1.0)*r10*x10114*x10119))+((sj0*x10113))+((r10*x10115))+((r12*x10122)));
evalcond[7]=(((r01*x10114))+((r00*x10110))+(((-1.0)*sj3*x10111*x10119))+((r00*x10124))+(((-1.0)*cj0*x10123))+(((-1.0)*cj0*x10118))+(((-1.0)*r02*sj3*x10120)));
evalcond[8]=((((-1.0)*sj3*x10112*x10119))+(((-1.0)*x10117*x10118))+((r10*x10124))+(((-1.0)*cj2*sj1*x10117))+((r11*x10114))+(((-1.0)*r12*sj3*x10120))+((r10*x10110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10125=((1.0)*gconst2);
CheckValue<IkReal> x10126=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10125)))),-1);
if(!x10126.valid){
continue;
}
CheckValue<IkReal> x10127 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10125))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10126.value)))+(x10127.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10128=IKsin(j4);
IkReal x10129=IKcos(j4);
IkReal x10130=(cj3*gconst1);
IkReal x10131=(gconst1*r01);
IkReal x10132=(gconst1*r11);
IkReal x10133=(sj1*sj2);
IkReal x10134=(cj3*gconst2);
IkReal x10135=(gconst1*sj3);
IkReal x10136=(gconst2*sj3);
IkReal x10137=((1.0)*sj0);
IkReal x10138=(cj1*sj2);
IkReal x10139=((1.0)*x10129);
IkReal x10140=((1.0)*x10128);
IkReal x10141=((1.0)*cj1*cj2);
IkReal x10142=(cj3*x10128);
IkReal x10143=((1.0)*cj2*sj1);
IkReal x10144=(x10129*x10136);
evalcond[0]=(((gconst1*r21*x10128))+(((-1.0)*gconst2*r20*x10140))+(((-1.0)*r22*x10139)));
evalcond[1]=(cj0+((x10128*x10132))+(((-1.0)*r12*x10139))+(((-1.0)*gconst2*r10*x10140)));
evalcond[2]=((((-1.0)*r02*x10139))+((x10128*x10131))+(((-1.0)*x10137))+(((-1.0)*gconst2*r00*x10140)));
evalcond[3]=(((cj2*sj1))+((r20*x10135))+((r21*x10136))+((r21*x10129*x10130))+x10138+((r22*x10142))+(((-1.0)*r20*x10134*x10139)));
evalcond[4]=(((r20*x10130))+((r21*x10134))+x10133+(((-1.0)*r22*sj3*x10140))+(((-1.0)*x10141))+(((-1.0)*r21*x10135*x10139))+((r20*x10144)));
evalcond[5]=(((r02*x10142))+((cj0*x10133))+((r01*x10136))+((r00*x10135))+((r01*x10129*x10130))+(((-1.0)*r00*x10134*x10139))+(((-1.0)*cj0*x10141)));
evalcond[6]=(((r11*x10136))+((r12*x10142))+((r11*x10129*x10130))+((r10*x10135))+(((-1.0)*r10*x10134*x10139))+((sj0*x10133))+(((-1.0)*cj1*cj2*x10137)));
evalcond[7]=((((-1.0)*r02*sj3*x10140))+(((-1.0)*cj0*x10138))+(((-1.0)*sj3*x10131*x10139))+((r01*x10134))+((r00*x10130))+((r00*x10144))+(((-1.0)*cj0*x10143)));
evalcond[8]=(((r11*x10134))+((r10*x10130))+(((-1.0)*sj3*x10132*x10139))+((r10*x10144))+(((-1.0)*cj2*sj1*x10137))+(((-1.0)*r12*sj3*x10140))+(((-1.0)*x10137*x10138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10145=((1.0)*gconst2);
CheckValue<IkReal> x10146 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x10145)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10146.valid){
continue;
}
CheckValue<IkReal> x10147=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10145)))),-1);
if(!x10147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10146.value)+(((1.5707963267949)*(x10147.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10148=IKsin(j4);
IkReal x10149=IKcos(j4);
IkReal x10150=(cj3*gconst1);
IkReal x10151=(gconst1*r01);
IkReal x10152=(gconst1*r11);
IkReal x10153=(sj1*sj2);
IkReal x10154=(cj3*gconst2);
IkReal x10155=(gconst1*sj3);
IkReal x10156=(gconst2*sj3);
IkReal x10157=((1.0)*sj0);
IkReal x10158=(cj1*sj2);
IkReal x10159=((1.0)*x10149);
IkReal x10160=((1.0)*x10148);
IkReal x10161=((1.0)*cj1*cj2);
IkReal x10162=(cj3*x10148);
IkReal x10163=((1.0)*cj2*sj1);
IkReal x10164=(x10149*x10156);
evalcond[0]=((((-1.0)*gconst2*r20*x10160))+(((-1.0)*r22*x10159))+((gconst1*r21*x10148)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x10160))+((x10148*x10152))+(((-1.0)*r12*x10159)));
evalcond[2]=((((-1.0)*r02*x10159))+((x10148*x10151))+(((-1.0)*x10157))+(((-1.0)*gconst2*r00*x10160)));
evalcond[3]=(((cj2*sj1))+((r22*x10162))+((r21*x10156))+x10158+((r21*x10149*x10150))+(((-1.0)*r20*x10154*x10159))+((r20*x10155)));
evalcond[4]=((((-1.0)*x10161))+(((-1.0)*r21*x10155*x10159))+((r21*x10154))+((r20*x10164))+x10153+(((-1.0)*r22*sj3*x10160))+((r20*x10150)));
evalcond[5]=(((r01*x10149*x10150))+(((-1.0)*cj0*x10161))+((r02*x10162))+((r01*x10156))+((cj0*x10153))+((r00*x10155))+(((-1.0)*r00*x10154*x10159)));
evalcond[6]=((((-1.0)*cj1*cj2*x10157))+((r10*x10155))+((r12*x10162))+((r11*x10149*x10150))+(((-1.0)*r10*x10154*x10159))+((sj0*x10153))+((r11*x10156)));
evalcond[7]=((((-1.0)*sj3*x10151*x10159))+(((-1.0)*cj0*x10163))+((r00*x10164))+(((-1.0)*cj0*x10158))+(((-1.0)*r02*sj3*x10160))+((r01*x10154))+((r00*x10150)));
evalcond[8]=(((r10*x10164))+(((-1.0)*sj3*x10152*x10159))+((r10*x10150))+(((-1.0)*r12*sj3*x10160))+(((-1.0)*cj2*sj1*x10157))+((r11*x10154))+(((-1.0)*x10157*x10158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10165=((-1.0)*r21);
IkReal x10167 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10167)==0){
continue;
}
IkReal x10166=pow(x10167,-0.5);
CheckValue<IkReal> x10168 = IKatan2WithCheck(IkReal(x10165),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10168.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10168.value))));
IkReal gconst4=(x10165*x10166);
IkReal gconst5=((1.0)*r20*x10166);
CheckValue<IkReal> x10169 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10169.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10169.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10170=((-1.0)*r21);
CheckValue<IkReal> x10173 = IKatan2WithCheck(IkReal(x10170),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10173.valid){
continue;
}
IkReal x10171=((1.0)*(x10173.value));
IkReal x10172=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10171)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10171)));
IkReal gconst4=(x10170*x10172);
IkReal gconst5=((1.0)*r20*x10172);
IkReal x10174=r22*r22;
IkReal x10175=((1.0)*x10174);
CheckValue<IkReal> x10179=IKPowWithIntegerCheck(((-1.0)+x10174),-1);
if(!x10179.valid){
continue;
}
IkReal x10176=x10179.value;
if((((1.0)+(((-1.0)*x10175)))) < -0.00001)
continue;
IkReal x10177=IKsqrt(((1.0)+(((-1.0)*x10175))));
IkReal x10178=(cj0*x10176*x10177);
j4eval[0]=((IKabs((x10178+(((-1.0)*x10175*x10178)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10180=((-1.0)*r21);
CheckValue<IkReal> x10183 = IKatan2WithCheck(IkReal(x10180),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10183.valid){
continue;
}
IkReal x10181=((1.0)*(x10183.value));
IkReal x10182=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10181)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10181)));
IkReal gconst4=(x10180*x10182);
IkReal gconst5=((1.0)*r20*x10182);
IkReal x10184=r22*r22;
IkReal x10185=((1.0)*x10184);
CheckValue<IkReal> x10189=IKPowWithIntegerCheck(((-1.0)+x10184),-1);
if(!x10189.valid){
continue;
}
IkReal x10186=x10189.value;
if((((1.0)+(((-1.0)*x10185)))) < -0.00001)
continue;
IkReal x10187=IKsqrt(((1.0)+(((-1.0)*x10185))));
IkReal x10188=(sj0*x10186*x10187);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x10188+(((-1.0)*x10185*x10188))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10190=((-1.0)*r21);
CheckValue<IkReal> x10193 = IKatan2WithCheck(IkReal(x10190),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10193.valid){
continue;
}
IkReal x10191=((1.0)*(x10193.value));
IkReal x10192=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10191)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10191)));
IkReal gconst4=(x10190*x10192);
IkReal gconst5=((1.0)*r20*x10192);
IkReal x10194=r22*r22;
IkReal x10195=(r12*sj0);
IkReal x10196=(cj0*r02);
CheckValue<IkReal> x10200=IKPowWithIntegerCheck(((-1.0)+x10194),-1);
if(!x10200.valid){
continue;
}
IkReal x10197=x10200.value;
if((((1.0)+(((-1.0)*x10194)))) < -0.00001)
continue;
IkReal x10198=IKsqrt(((1.0)+(((-1.0)*x10194))));
IkReal x10199=(r22*x10197*x10198);
j4eval[0]=0;
j4eval[1]=((IKabs((((x10196*x10199))+((x10195*x10199)))))+(IKabs(((((-1.0)*x10196))+(((-1.0)*x10195))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10201=((-1.0)*r21);
CheckValue<IkReal> x10204 = IKatan2WithCheck(IkReal(x10201),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10204.valid){
continue;
}
IkReal x10202=((1.0)*(x10204.value));
IkReal x10203=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10202)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10202)));
IkReal gconst4=(x10201*x10203);
IkReal gconst5=((1.0)*r20*x10203);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10205=((-1.0)*r21);
CheckValue<IkReal> x10208 = IKatan2WithCheck(IkReal(x10205),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10208.valid){
continue;
}
IkReal x10206=((1.0)*(x10208.value));
IkReal x10207=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10206)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10206)));
IkReal gconst4=(x10205*x10207);
IkReal gconst5=((1.0)*r20*x10207);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10209=((-1.0)*r21);
CheckValue<IkReal> x10212 = IKatan2WithCheck(IkReal(x10209),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10212.valid){
continue;
}
IkReal x10210=((1.0)*(x10212.value));
IkReal x10211=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10210)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10210)));
IkReal gconst4=(x10209*x10211);
IkReal gconst5=((1.0)*r20*x10211);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10213=((-1.0)*r21);
CheckValue<IkReal> x10216 = IKatan2WithCheck(IkReal(x10213),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10216.valid){
continue;
}
IkReal x10214=((1.0)*(x10216.value));
IkReal x10215=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10214)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10214)));
IkReal gconst4=(x10213*x10215);
IkReal gconst5=((1.0)*r20*x10215);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10217=((-1.0)*r21);
CheckValue<IkReal> x10220 = IKatan2WithCheck(IkReal(x10217),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10220.valid){
continue;
}
IkReal x10218=((1.0)*(x10220.value));
IkReal x10219=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10218)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10218)));
IkReal gconst4=(x10217*x10219);
IkReal gconst5=((1.0)*r20*x10219);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10221=((-1.0)*r21);
CheckValue<IkReal> x10224 = IKatan2WithCheck(IkReal(x10221),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10224.valid){
continue;
}
IkReal x10222=((1.0)*(x10224.value));
IkReal x10223=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10222)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10222)));
IkReal gconst4=(x10221*x10223);
IkReal gconst5=((1.0)*r20*x10223);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10225=(gconst5*r10);
IkReal x10226=(gconst4*r11);
CheckValue<IkReal> x10227=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10225*x10226))+(x10226*x10226)+(x10225*x10225))),-1);
if(!x10227.valid){
continue;
}
CheckValue<IkReal> x10228 = IKatan2WithCheck(IkReal((x10225+(((-1.0)*x10226)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10227.value)))+(x10228.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10229=IKsin(j4);
IkReal x10230=IKcos(j4);
IkReal x10231=(gconst4*r11);
IkReal x10232=((1.0)*cj1);
IkReal x10233=(gconst5*r10);
IkReal x10234=(gconst4*r01);
IkReal x10235=(gconst5*r00);
IkReal x10236=(gconst4*r21);
IkReal x10237=(gconst5*r20);
IkReal x10238=((1.0)*x10230);
IkReal x10239=((1.0)*x10229);
evalcond[0]=((((-1.0)*x10237*x10239))+((x10229*x10236))+(((-1.0)*r22*x10238)));
evalcond[1]=((((-1.0)*x10235*x10239))+((x10229*x10234))+(((-1.0)*r02*x10238)));
evalcond[2]=(((x10230*x10233))+(((-1.0)*r12*x10239))+(((-1.0)*x10231*x10238)));
evalcond[3]=((1.0)+(((-1.0)*x10233*x10239))+((x10229*x10231))+(((-1.0)*r12*x10238)));
evalcond[4]=(((x10230*x10237))+((sj1*sj2))+(((-1.0)*cj2*x10232))+(((-1.0)*x10236*x10238))+(((-1.0)*r22*x10239)));
evalcond[5]=((((-1.0)*x10234*x10238))+((x10230*x10235))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10232))+(((-1.0)*r02*x10239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10240=((1.0)*gconst5);
CheckValue<IkReal> x10241=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10240)))),-1);
if(!x10241.valid){
continue;
}
CheckValue<IkReal> x10242 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10240))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10241.value)))+(x10242.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10243=IKsin(j4);
IkReal x10244=IKcos(j4);
IkReal x10245=(gconst4*r11);
IkReal x10246=((1.0)*cj1);
IkReal x10247=(gconst5*r10);
IkReal x10248=(gconst4*r01);
IkReal x10249=(gconst5*r00);
IkReal x10250=(gconst4*r21);
IkReal x10251=(gconst5*r20);
IkReal x10252=((1.0)*x10244);
IkReal x10253=((1.0)*x10243);
evalcond[0]=((((-1.0)*x10251*x10253))+((x10243*x10250))+(((-1.0)*r22*x10252)));
evalcond[1]=(((x10243*x10248))+(((-1.0)*r02*x10252))+(((-1.0)*x10249*x10253)));
evalcond[2]=((((-1.0)*x10245*x10252))+(((-1.0)*r12*x10253))+((x10244*x10247)));
evalcond[3]=((1.0)+((x10243*x10245))+(((-1.0)*x10247*x10253))+(((-1.0)*r12*x10252)));
evalcond[4]=((((-1.0)*cj2*x10246))+((sj1*sj2))+(((-1.0)*r22*x10253))+(((-1.0)*x10250*x10252))+((x10244*x10251)));
evalcond[5]=((((-1.0)*r02*x10253))+(((-1.0)*x10248*x10252))+(((-1.0)*cj2*sj1))+((x10244*x10249))+(((-1.0)*sj2*x10246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10254 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10254.valid){
continue;
}
CheckValue<IkReal> x10255=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10254.value)+(((1.5707963267949)*(x10255.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10256=IKsin(j4);
IkReal x10257=IKcos(j4);
IkReal x10258=(gconst4*r11);
IkReal x10259=((1.0)*cj1);
IkReal x10260=(gconst5*r10);
IkReal x10261=(gconst4*r01);
IkReal x10262=(gconst5*r00);
IkReal x10263=(gconst4*r21);
IkReal x10264=(gconst5*r20);
IkReal x10265=((1.0)*x10257);
IkReal x10266=((1.0)*x10256);
evalcond[0]=((((-1.0)*r22*x10265))+((x10256*x10263))+(((-1.0)*x10264*x10266)));
evalcond[1]=(((x10256*x10261))+(((-1.0)*x10262*x10266))+(((-1.0)*r02*x10265)));
evalcond[2]=(((x10257*x10260))+(((-1.0)*r12*x10266))+(((-1.0)*x10258*x10265)));
evalcond[3]=((1.0)+(((-1.0)*x10260*x10266))+((x10256*x10258))+(((-1.0)*r12*x10265)));
evalcond[4]=((((-1.0)*r22*x10266))+((x10257*x10264))+(((-1.0)*cj2*x10259))+((sj1*sj2))+(((-1.0)*x10263*x10265)));
evalcond[5]=((((-1.0)*x10261*x10265))+((x10257*x10262))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x10266))+(((-1.0)*sj2*x10259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10267=((-1.0)*r21);
CheckValue<IkReal> x10270 = IKatan2WithCheck(IkReal(x10267),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10270.valid){
continue;
}
IkReal x10268=((1.0)*(x10270.value));
IkReal x10269=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10268)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10268)));
IkReal gconst4=(x10267*x10269);
IkReal gconst5=((1.0)*r20*x10269);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10271=((-1.0)*r21);
CheckValue<IkReal> x10274 = IKatan2WithCheck(IkReal(x10271),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10274.valid){
continue;
}
IkReal x10272=((1.0)*(x10274.value));
IkReal x10273=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10272)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10272)));
IkReal gconst4=(x10271*x10273);
IkReal gconst5=((1.0)*r20*x10273);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10275=((-1.0)*r21);
CheckValue<IkReal> x10278 = IKatan2WithCheck(IkReal(x10275),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10278.valid){
continue;
}
IkReal x10276=((1.0)*(x10278.value));
IkReal x10277=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10276)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10276)));
IkReal gconst4=(x10275*x10277);
IkReal gconst5=((1.0)*r20*x10277);
IkReal x10279=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10283=IKPowWithIntegerCheck(x10279,-1);
if(!x10283.valid){
continue;
}
IkReal x10280=x10283.value;
IkReal x10281=((1.0)*x10280);
IkReal x10282=((((-1.0)*x10281*(r10*r10)*(r20*r20)))+(((-1.0)*x10281*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10280))+(((-1.0)*(r12*r12))));
j4eval[0]=x10282;
j4eval[1]=r12;
j4eval[2]=x10279;
j4eval[3]=IKsign(x10282);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10284=(gconst5*r10);
IkReal x10285=(gconst4*r11);
CheckValue<IkReal> x10286 = IKatan2WithCheck(IkReal((x10285+(((-1.0)*x10284)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10286.valid){
continue;
}
CheckValue<IkReal> x10287=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10284*x10284)))+(((2.0)*x10284*x10285))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10285*x10285))))),-1);
if(!x10287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10286.value)+(((1.5707963267949)*(x10287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10288=IKcos(j4);
IkReal x10289=IKsin(j4);
IkReal x10290=(gconst4*r11);
IkReal x10291=(gconst5*r10);
IkReal x10292=((1.0)*cj1);
IkReal x10293=(gconst5*r00);
IkReal x10294=(gconst5*r20);
IkReal x10295=((1.0)*x10288);
IkReal x10296=(gconst4*x10288);
IkReal x10297=((1.0)*x10289);
IkReal x10298=(gconst4*x10289);
evalcond[0]=(((x10288*x10290))+((r12*x10289))+(((-1.0)*x10291*x10295)));
evalcond[1]=((((-1.0)*x10294*x10297))+((r21*x10298))+(((-1.0)*r22*x10295)));
evalcond[2]=((((-1.0)*x10293*x10297))+(((-1.0)*r02*x10295))+((r01*x10298)));
evalcond[3]=((1.0)+((x10289*x10290))+(((-1.0)*x10291*x10297))+(((-1.0)*r12*x10295)));
evalcond[4]=((((-1.0)*x10294*x10295))+((sj1*sj2))+((r22*x10289))+((r21*x10296))+(((-1.0)*cj2*x10292)));
evalcond[5]=((((-1.0)*sj2*x10292))+(((-1.0)*cj2*sj1))+(((-1.0)*x10293*x10295))+((r02*x10289))+((r01*x10296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10299=((1.0)*gconst5);
CheckValue<IkReal> x10300=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10299)))),-1);
if(!x10300.valid){
continue;
}
CheckValue<IkReal> x10301 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10299)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10300.value)))+(x10301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10302=IKcos(j4);
IkReal x10303=IKsin(j4);
IkReal x10304=(gconst4*r11);
IkReal x10305=(gconst5*r10);
IkReal x10306=((1.0)*cj1);
IkReal x10307=(gconst5*r00);
IkReal x10308=(gconst5*r20);
IkReal x10309=((1.0)*x10302);
IkReal x10310=(gconst4*x10302);
IkReal x10311=((1.0)*x10303);
IkReal x10312=(gconst4*x10303);
evalcond[0]=((((-1.0)*x10305*x10309))+((r12*x10303))+((x10302*x10304)));
evalcond[1]=((((-1.0)*r22*x10309))+((r21*x10312))+(((-1.0)*x10308*x10311)));
evalcond[2]=(((r01*x10312))+(((-1.0)*x10307*x10311))+(((-1.0)*r02*x10309)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10309))+(((-1.0)*x10305*x10311))+((x10303*x10304)));
evalcond[4]=((((-1.0)*cj2*x10306))+((r21*x10310))+((sj1*sj2))+((r22*x10303))+(((-1.0)*x10308*x10309)));
evalcond[5]=(((r02*x10303))+((r01*x10310))+(((-1.0)*sj2*x10306))+(((-1.0)*cj2*sj1))+(((-1.0)*x10307*x10309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10313 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10313.valid){
continue;
}
CheckValue<IkReal> x10314=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10313.value)+(((1.5707963267949)*(x10314.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10315=IKcos(j4);
IkReal x10316=IKsin(j4);
IkReal x10317=(gconst4*r11);
IkReal x10318=(gconst5*r10);
IkReal x10319=((1.0)*cj1);
IkReal x10320=(gconst5*r00);
IkReal x10321=(gconst5*r20);
IkReal x10322=((1.0)*x10315);
IkReal x10323=(gconst4*x10315);
IkReal x10324=((1.0)*x10316);
IkReal x10325=(gconst4*x10316);
evalcond[0]=(((r12*x10316))+(((-1.0)*x10318*x10322))+((x10315*x10317)));
evalcond[1]=((((-1.0)*x10321*x10324))+(((-1.0)*r22*x10322))+((r21*x10325)));
evalcond[2]=((((-1.0)*r02*x10322))+((r01*x10325))+(((-1.0)*x10320*x10324)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10322))+(((-1.0)*x10318*x10324))+((x10316*x10317)));
evalcond[4]=((((-1.0)*x10321*x10322))+((r22*x10316))+((sj1*sj2))+((r21*x10323))+(((-1.0)*cj2*x10319)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r01*x10323))+((r02*x10316))+(((-1.0)*x10320*x10322))+(((-1.0)*sj2*x10319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10326=((-1.0)*r21);
CheckValue<IkReal> x10329 = IKatan2WithCheck(IkReal(x10326),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10329.valid){
continue;
}
IkReal x10327=((1.0)*(x10329.value));
IkReal x10328=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10327)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10327)));
IkReal gconst4=(x10326*x10328);
IkReal gconst5=((1.0)*r20*x10328);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10330=((-1.0)*r21);
CheckValue<IkReal> x10333 = IKatan2WithCheck(IkReal(x10330),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10333.valid){
continue;
}
IkReal x10331=((1.0)*(x10333.value));
IkReal x10332=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10331)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10331)));
IkReal gconst4=(x10330*x10332);
IkReal gconst5=((1.0)*r20*x10332);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10334=((-1.0)*r21);
CheckValue<IkReal> x10337 = IKatan2WithCheck(IkReal(x10334),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10337.valid){
continue;
}
IkReal x10335=((1.0)*(x10337.value));
IkReal x10336=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10335)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10335)));
IkReal gconst4=(x10334*x10336);
IkReal gconst5=((1.0)*r20*x10336);
IkReal x10338=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10342=IKPowWithIntegerCheck(x10338,-1);
if(!x10342.valid){
continue;
}
IkReal x10339=x10342.value;
IkReal x10340=((1.0)*x10339);
IkReal x10341=((((-1.0)*(r12*r12)))+(((-1.0)*x10340*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10339))+(((-1.0)*x10340*(r11*r11)*(r21*r21))));
j4eval[0]=x10341;
j4eval[1]=r12;
j4eval[2]=x10338;
j4eval[3]=IKsign(x10341);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10343=(gconst5*r10);
IkReal x10344=(gconst4*r11);
CheckValue<IkReal> x10345=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*(x10344*x10344)))+(((-1.0)*(x10343*x10343)))+(((2.0)*x10343*x10344)))),-1);
if(!x10345.valid){
continue;
}
CheckValue<IkReal> x10346 = IKatan2WithCheck(IkReal((x10344+(((-1.0)*x10343)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10345.value)))+(x10346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10347=IKcos(j4);
IkReal x10348=IKsin(j4);
IkReal x10349=(gconst4*r11);
IkReal x10350=(gconst5*r10);
IkReal x10351=(gconst5*r00);
IkReal x10352=(gconst5*r20);
IkReal x10353=((1.0)*x10347);
IkReal x10354=(gconst4*x10347);
IkReal x10355=((1.0)*x10348);
IkReal x10356=(gconst4*x10348);
evalcond[0]=(((r12*x10348))+((x10347*x10349))+(((-1.0)*x10350*x10353)));
evalcond[1]=(((r21*x10356))+(((-1.0)*r22*x10353))+(((-1.0)*x10352*x10355)));
evalcond[2]=(((r01*x10356))+(((-1.0)*x10351*x10355))+(((-1.0)*r02*x10353)));
evalcond[3]=((1.0)+(((-1.0)*x10350*x10355))+(((-1.0)*r12*x10353))+((x10348*x10349)));
evalcond[4]=(((r21*x10354))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10352*x10353))+((r22*x10348)));
evalcond[5]=(((r01*x10354))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10351*x10353))+((r02*x10348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10357=((1.0)*gconst5);
CheckValue<IkReal> x10358 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10358.valid){
continue;
}
CheckValue<IkReal> x10359=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10357)))),-1);
if(!x10359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10358.value)+(((1.5707963267949)*(x10359.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10360=IKcos(j4);
IkReal x10361=IKsin(j4);
IkReal x10362=(gconst4*r11);
IkReal x10363=(gconst5*r10);
IkReal x10364=(gconst5*r00);
IkReal x10365=(gconst5*r20);
IkReal x10366=((1.0)*x10360);
IkReal x10367=(gconst4*x10360);
IkReal x10368=((1.0)*x10361);
IkReal x10369=(gconst4*x10361);
evalcond[0]=((((-1.0)*x10363*x10366))+((x10360*x10362))+((r12*x10361)));
evalcond[1]=(((r21*x10369))+(((-1.0)*x10365*x10368))+(((-1.0)*r22*x10366)));
evalcond[2]=(((r01*x10369))+(((-1.0)*r02*x10366))+(((-1.0)*x10364*x10368)));
evalcond[3]=((1.0)+((x10361*x10362))+(((-1.0)*x10363*x10368))+(((-1.0)*r12*x10366)));
evalcond[4]=(((r22*x10361))+((cj2*sj1))+((r21*x10367))+((cj1*sj2))+(((-1.0)*x10365*x10366)));
evalcond[5]=(((r01*x10367))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10361))+(((-1.0)*x10364*x10366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10370 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10370.valid){
continue;
}
CheckValue<IkReal> x10371=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10370.value)+(((1.5707963267949)*(x10371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10372=IKcos(j4);
IkReal x10373=IKsin(j4);
IkReal x10374=(gconst4*r11);
IkReal x10375=(gconst5*r10);
IkReal x10376=(gconst5*r00);
IkReal x10377=(gconst5*r20);
IkReal x10378=((1.0)*x10372);
IkReal x10379=(gconst4*x10372);
IkReal x10380=((1.0)*x10373);
IkReal x10381=(gconst4*x10373);
evalcond[0]=((((-1.0)*x10375*x10378))+((x10372*x10374))+((r12*x10373)));
evalcond[1]=(((r21*x10381))+(((-1.0)*x10377*x10380))+(((-1.0)*r22*x10378)));
evalcond[2]=((((-1.0)*x10376*x10380))+(((-1.0)*r02*x10378))+((r01*x10381)));
evalcond[3]=((1.0)+(((-1.0)*x10375*x10380))+((x10373*x10374))+(((-1.0)*r12*x10378)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10377*x10378))+((r22*x10373))+((cj1*sj2))+((r21*x10379)));
evalcond[5]=((((-1.0)*x10376*x10378))+((r01*x10379))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10382=((-1.0)*r21);
CheckValue<IkReal> x10385 = IKatan2WithCheck(IkReal(x10382),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10385.valid){
continue;
}
IkReal x10383=((1.0)*(x10385.value));
IkReal x10384=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10383)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10383)));
IkReal gconst4=(x10382*x10384);
IkReal gconst5=((1.0)*r20*x10384);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10386=((-1.0)*r21);
CheckValue<IkReal> x10389 = IKatan2WithCheck(IkReal(x10386),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10389.valid){
continue;
}
IkReal x10387=((1.0)*(x10389.value));
IkReal x10388=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10387)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10387)));
IkReal gconst4=(x10386*x10388);
IkReal gconst5=((1.0)*r20*x10388);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10390=((-1.0)*r21);
CheckValue<IkReal> x10393 = IKatan2WithCheck(IkReal(x10390),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10393.valid){
continue;
}
IkReal x10391=((1.0)*(x10393.value));
IkReal x10392=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10391)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10391)));
IkReal gconst4=(x10390*x10392);
IkReal gconst5=((1.0)*r20*x10392);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10394=(gconst5*r10);
IkReal x10395=(gconst4*r11);
CheckValue<IkReal> x10396=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10394*x10394)+(x10395*x10395)+(((-2.0)*x10394*x10395)))),-1);
if(!x10396.valid){
continue;
}
CheckValue<IkReal> x10397 = IKatan2WithCheck(IkReal((x10394+(((-1.0)*x10395)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10396.value)))+(x10397.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10398=IKsin(j4);
IkReal x10399=IKcos(j4);
IkReal x10400=(gconst4*r11);
IkReal x10401=(gconst5*r10);
IkReal x10402=(gconst4*r01);
IkReal x10403=(gconst5*r00);
IkReal x10404=(gconst4*r21);
IkReal x10405=(gconst5*r20);
IkReal x10406=((1.0)*x10399);
IkReal x10407=((1.0)*x10398);
evalcond[0]=(((x10398*x10404))+(((-1.0)*x10405*x10407))+(((-1.0)*r22*x10406)));
evalcond[1]=(((x10398*x10402))+(((-1.0)*r02*x10406))+(((-1.0)*x10403*x10407)));
evalcond[2]=(((x10399*x10401))+(((-1.0)*r12*x10407))+(((-1.0)*x10400*x10406)));
evalcond[3]=((1.0)+((x10398*x10400))+(((-1.0)*x10401*x10407))+(((-1.0)*r12*x10406)));
evalcond[4]=(((cj2*sj1))+((x10399*x10405))+((cj1*sj2))+(((-1.0)*r22*x10407))+(((-1.0)*x10404*x10406)));
evalcond[5]=((((-1.0)*x10402*x10406))+((x10399*x10403))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10408=((1.0)*gconst5);
CheckValue<IkReal> x10409=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10408)))),-1);
if(!x10409.valid){
continue;
}
CheckValue<IkReal> x10410 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10408))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10409.value)))+(x10410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10411=IKsin(j4);
IkReal x10412=IKcos(j4);
IkReal x10413=(gconst4*r11);
IkReal x10414=(gconst5*r10);
IkReal x10415=(gconst4*r01);
IkReal x10416=(gconst5*r00);
IkReal x10417=(gconst4*r21);
IkReal x10418=(gconst5*r20);
IkReal x10419=((1.0)*x10412);
IkReal x10420=((1.0)*x10411);
evalcond[0]=(((x10411*x10417))+(((-1.0)*x10418*x10420))+(((-1.0)*r22*x10419)));
evalcond[1]=((((-1.0)*r02*x10419))+((x10411*x10415))+(((-1.0)*x10416*x10420)));
evalcond[2]=((((-1.0)*x10413*x10419))+(((-1.0)*r12*x10420))+((x10412*x10414)));
evalcond[3]=((1.0)+((x10411*x10413))+(((-1.0)*r12*x10419))+(((-1.0)*x10414*x10420)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10412*x10418))+(((-1.0)*r22*x10420))+(((-1.0)*x10417*x10419)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10412*x10416))+(((-1.0)*x10415*x10419))+(((-1.0)*r02*x10420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10421 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10421.valid){
continue;
}
CheckValue<IkReal> x10422=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10421.value)+(((1.5707963267949)*(x10422.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10423=IKsin(j4);
IkReal x10424=IKcos(j4);
IkReal x10425=(gconst4*r11);
IkReal x10426=(gconst5*r10);
IkReal x10427=(gconst4*r01);
IkReal x10428=(gconst5*r00);
IkReal x10429=(gconst4*r21);
IkReal x10430=(gconst5*r20);
IkReal x10431=((1.0)*x10424);
IkReal x10432=((1.0)*x10423);
evalcond[0]=((((-1.0)*x10430*x10432))+((x10423*x10429))+(((-1.0)*r22*x10431)));
evalcond[1]=((((-1.0)*x10428*x10432))+((x10423*x10427))+(((-1.0)*r02*x10431)));
evalcond[2]=((((-1.0)*r12*x10432))+((x10424*x10426))+(((-1.0)*x10425*x10431)));
evalcond[3]=((1.0)+(((-1.0)*x10426*x10432))+((x10423*x10425))+(((-1.0)*r12*x10431)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10429*x10431))+(((-1.0)*r22*x10432))+((x10424*x10430)));
evalcond[5]=((((-1.0)*x10427*x10431))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10432))+((x10424*x10428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10433=gconst4*gconst4;
IkReal x10434=gconst5*gconst5;
IkReal x10435=(r10*r21);
IkReal x10436=((1.0)*cj3);
IkReal x10437=(r11*r21);
IkReal x10438=(r11*r20);
IkReal x10439=(r22*sj3);
IkReal x10440=(gconst4*r10);
IkReal x10441=((1.0)*sj3);
IkReal x10442=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10443=IKPowWithIntegerCheck(IKsign((((x10438*x10442))+(((-1.0)*r12*r22*x10436))+(((-1.0)*x10433*x10436*x10437))+((x10435*x10442))+(((-1.0)*r10*r20*x10434*x10436)))),-1);
if(!x10443.valid){
continue;
}
CheckValue<IkReal> x10444 = IKatan2WithCheck(IkReal((((gconst5*r11*x10439))+((x10439*x10440)))),IkReal(((((-1.0)*gconst5*r20*x10440*x10441))+(((-1.0)*x10434*x10438*x10441))+((gconst4*gconst5*sj3*x10437))+((sj3*x10433*x10435)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10443.value)))+(x10444.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10445=IKsin(j4);
IkReal x10446=IKcos(j4);
IkReal x10447=(sj1*sj2);
IkReal x10448=(gconst5*sj3);
IkReal x10449=(cj3*gconst5);
IkReal x10450=(gconst4*r11);
IkReal x10451=((1.0)*cj1);
IkReal x10452=(gconst4*r01);
IkReal x10453=(cj2*sj1);
IkReal x10454=(gconst4*r21);
IkReal x10455=(gconst4*sj3);
IkReal x10456=(cj3*gconst4);
IkReal x10457=(cj2*x10451);
IkReal x10458=((1.0)*x10446);
IkReal x10459=((1.0)*x10445);
IkReal x10460=(cj3*x10445);
IkReal x10461=(cj3*x10446);
evalcond[0]=((((-1.0)*gconst5*r20*x10459))+(((-1.0)*r22*x10458))+((x10445*x10454)));
evalcond[1]=((((-1.0)*gconst5*r00*x10459))+(((-1.0)*r02*x10458))+((x10445*x10452)));
evalcond[2]=((1.0)+((x10445*x10450))+(((-1.0)*r12*x10458))+(((-1.0)*gconst5*r10*x10459)));
evalcond[3]=(((r10*x10455))+((r12*x10460))+((r11*x10448))+(((-1.0)*r10*x10449*x10458))+((x10450*x10461)));
evalcond[4]=((((-1.0)*sj3*x10450*x10458))+((r10*x10456))+((r10*x10446*x10448))+((r11*x10449))+(((-1.0)*r12*sj3*x10459)));
evalcond[5]=(((cj1*sj2))+((r22*x10460))+((r21*x10448))+((x10454*x10461))+x10453+(((-1.0)*r20*x10449*x10458))+((r20*x10455)));
evalcond[6]=((((-1.0)*r00*x10449*x10458))+((x10452*x10461))+((r00*x10455))+x10447+((r01*x10448))+((r02*x10460))+(((-1.0)*x10457)));
evalcond[7]=((((-1.0)*sj3*x10454*x10458))+(((-1.0)*r22*sj3*x10459))+((r21*x10449))+x10447+(((-1.0)*x10457))+((r20*x10456))+((r20*x10446*x10448)));
evalcond[8]=((((-1.0)*x10453))+((r00*x10456))+(((-1.0)*r02*sj3*x10459))+(((-1.0)*sj2*x10451))+((r01*x10449))+((r00*x10446*x10448))+(((-1.0)*sj3*x10452*x10458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10462=((1.0)*gconst5);
CheckValue<IkReal> x10463 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10462)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10463.valid){
continue;
}
CheckValue<IkReal> x10464=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10462)))),-1);
if(!x10464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10463.value)+(((1.5707963267949)*(x10464.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10465=IKsin(j4);
IkReal x10466=IKcos(j4);
IkReal x10467=(sj1*sj2);
IkReal x10468=(gconst5*sj3);
IkReal x10469=(cj3*gconst5);
IkReal x10470=(gconst4*r11);
IkReal x10471=((1.0)*cj1);
IkReal x10472=(gconst4*r01);
IkReal x10473=(cj2*sj1);
IkReal x10474=(gconst4*r21);
IkReal x10475=(gconst4*sj3);
IkReal x10476=(cj3*gconst4);
IkReal x10477=(cj2*x10471);
IkReal x10478=((1.0)*x10466);
IkReal x10479=((1.0)*x10465);
IkReal x10480=(cj3*x10465);
IkReal x10481=(cj3*x10466);
evalcond[0]=((((-1.0)*gconst5*r20*x10479))+((x10465*x10474))+(((-1.0)*r22*x10478)));
evalcond[1]=((((-1.0)*r02*x10478))+(((-1.0)*gconst5*r00*x10479))+((x10465*x10472)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10479))+((x10465*x10470))+(((-1.0)*r12*x10478)));
evalcond[3]=(((r12*x10480))+((x10470*x10481))+((r11*x10468))+((r10*x10475))+(((-1.0)*r10*x10469*x10478)));
evalcond[4]=(((r10*x10466*x10468))+(((-1.0)*sj3*x10470*x10478))+((r11*x10469))+(((-1.0)*r12*sj3*x10479))+((r10*x10476)));
evalcond[5]=(((r20*x10475))+((x10474*x10481))+(((-1.0)*r20*x10469*x10478))+((cj1*sj2))+((r22*x10480))+((r21*x10468))+x10473);
evalcond[6]=(((r01*x10468))+((x10472*x10481))+((r00*x10475))+((r02*x10480))+x10467+(((-1.0)*r00*x10469*x10478))+(((-1.0)*x10477)));
evalcond[7]=(((r20*x10476))+((r20*x10466*x10468))+(((-1.0)*r22*sj3*x10479))+(((-1.0)*sj3*x10474*x10478))+((r21*x10469))+x10467+(((-1.0)*x10477)));
evalcond[8]=((((-1.0)*x10473))+((r01*x10469))+((r00*x10476))+(((-1.0)*sj3*x10472*x10478))+(((-1.0)*r02*sj3*x10479))+((r00*x10466*x10468))+(((-1.0)*sj2*x10471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10482 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10482.valid){
continue;
}
CheckValue<IkReal> x10483=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10482.value)+(((1.5707963267949)*(x10483.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10484=IKsin(j4);
IkReal x10485=IKcos(j4);
IkReal x10486=(sj1*sj2);
IkReal x10487=(gconst5*sj3);
IkReal x10488=(cj3*gconst5);
IkReal x10489=(gconst4*r11);
IkReal x10490=((1.0)*cj1);
IkReal x10491=(gconst4*r01);
IkReal x10492=(cj2*sj1);
IkReal x10493=(gconst4*r21);
IkReal x10494=(gconst4*sj3);
IkReal x10495=(cj3*gconst4);
IkReal x10496=(cj2*x10490);
IkReal x10497=((1.0)*x10485);
IkReal x10498=((1.0)*x10484);
IkReal x10499=(cj3*x10484);
IkReal x10500=(cj3*x10485);
evalcond[0]=((((-1.0)*gconst5*r20*x10498))+(((-1.0)*r22*x10497))+((x10484*x10493)));
evalcond[1]=((((-1.0)*r02*x10497))+(((-1.0)*gconst5*r00*x10498))+((x10484*x10491)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10497))+(((-1.0)*gconst5*r10*x10498))+((x10484*x10489)));
evalcond[3]=(((r10*x10494))+(((-1.0)*r10*x10488*x10497))+((r12*x10499))+((r11*x10487))+((x10489*x10500)));
evalcond[4]=(((r10*x10495))+((r10*x10485*x10487))+((r11*x10488))+(((-1.0)*r12*sj3*x10498))+(((-1.0)*sj3*x10489*x10497)));
evalcond[5]=(((x10493*x10500))+(((-1.0)*r20*x10488*x10497))+((r21*x10487))+((cj1*sj2))+((r22*x10499))+x10492+((r20*x10494)));
evalcond[6]=(((x10491*x10500))+(((-1.0)*x10496))+(((-1.0)*r00*x10488*x10497))+x10486+((r02*x10499))+((r00*x10494))+((r01*x10487)));
evalcond[7]=(((r21*x10488))+(((-1.0)*r22*sj3*x10498))+(((-1.0)*x10496))+x10486+((r20*x10485*x10487))+(((-1.0)*sj3*x10493*x10497))+((r20*x10495)));
evalcond[8]=((((-1.0)*sj3*x10491*x10497))+(((-1.0)*x10492))+(((-1.0)*r02*sj3*x10498))+((r00*x10485*x10487))+((r00*x10495))+(((-1.0)*sj2*x10490))+((r01*x10488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10501=((-1.0)*r21);
CheckValue<IkReal> x10504 = IKatan2WithCheck(IkReal(x10501),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10504.valid){
continue;
}
IkReal x10502=((1.0)*(x10504.value));
IkReal x10503=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10502)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10502)));
IkReal gconst4=(x10501*x10503);
IkReal gconst5=((1.0)*r20*x10503);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10505=((-1.0)*r21);
CheckValue<IkReal> x10508 = IKatan2WithCheck(IkReal(x10505),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10508.valid){
continue;
}
IkReal x10506=((1.0)*(x10508.value));
IkReal x10507=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10506)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10506)));
IkReal gconst4=(x10505*x10507);
IkReal gconst5=((1.0)*r20*x10507);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10509=((-1.0)*r21);
CheckValue<IkReal> x10512 = IKatan2WithCheck(IkReal(x10509),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10512.valid){
continue;
}
IkReal x10510=((1.0)*(x10512.value));
IkReal x10511=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10510)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10510)));
IkReal gconst4=(x10509*x10511);
IkReal gconst5=((1.0)*r20*x10511);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10513=((-1.0)*r21);
CheckValue<IkReal> x10516 = IKatan2WithCheck(IkReal(x10513),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10516.valid){
continue;
}
IkReal x10514=((1.0)*(x10516.value));
IkReal x10515=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10514)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10514)));
IkReal gconst4=(x10513*x10515);
IkReal gconst5=((1.0)*r20*x10515);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10517=((-1.0)*r21);
CheckValue<IkReal> x10520 = IKatan2WithCheck(IkReal(x10517),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10520.valid){
continue;
}
IkReal x10518=((1.0)*(x10520.value));
IkReal x10519=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10518)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10518)));
IkReal gconst4=(x10517*x10519);
IkReal gconst5=((1.0)*r20*x10519);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10521=((-1.0)*r21);
CheckValue<IkReal> x10524 = IKatan2WithCheck(IkReal(x10521),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10524.valid){
continue;
}
IkReal x10522=((1.0)*(x10524.value));
IkReal x10523=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10522)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10522)));
IkReal gconst4=(x10521*x10523);
IkReal gconst5=((1.0)*r20*x10523);
IkReal x10525=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10529=IKPowWithIntegerCheck(x10525,-1);
if(!x10529.valid){
continue;
}
IkReal x10526=x10529.value;
IkReal x10527=((1.0)*x10526);
IkReal x10528=((((-2.0)*r10*r11*r20*r21*x10526))+(((-1.0)*x10527*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10527*(r11*r11)*(r21*r21))));
j4eval[0]=x10528;
j4eval[1]=r12;
j4eval[2]=x10525;
j4eval[3]=IKsign(x10528);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10530=(gconst5*r10);
IkReal x10531=(gconst4*r11);
CheckValue<IkReal> x10532=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10530*x10530)))+(((2.0)*x10530*x10531))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10531*x10531))))),-1);
if(!x10532.valid){
continue;
}
CheckValue<IkReal> x10533 = IKatan2WithCheck(IkReal(((((-1.0)*x10531))+x10530)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10532.value)))+(x10533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10534=IKsin(j4);
IkReal x10535=IKcos(j4);
IkReal x10536=(gconst4*r11);
IkReal x10537=(gconst5*r10);
IkReal x10538=(gconst4*r01);
IkReal x10539=(gconst5*r00);
IkReal x10540=(gconst4*r21);
IkReal x10541=(gconst5*r20);
IkReal x10542=((1.0)*x10535);
IkReal x10543=((1.0)*x10534);
evalcond[0]=(((x10534*x10540))+(((-1.0)*x10541*x10543))+(((-1.0)*r22*x10542)));
evalcond[1]=((((-1.0)*x10539*x10543))+(((-1.0)*r02*x10542))+((x10534*x10538)));
evalcond[2]=((((-1.0)*r12*x10543))+(((-1.0)*x10536*x10542))+((x10535*x10537)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10542))+((x10534*x10536))+(((-1.0)*x10537*x10543)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10538*x10542))+((cj1*sj2))+(((-1.0)*r02*x10543))+((x10535*x10539)));
evalcond[5]=(((x10535*x10541))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10543))+(((-1.0)*x10540*x10542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10544=((1.0)*gconst5);
CheckValue<IkReal> x10545=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x10544)))),-1);
if(!x10545.valid){
continue;
}
CheckValue<IkReal> x10546 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10544))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10545.value)))+(x10546.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10547=IKsin(j4);
IkReal x10548=IKcos(j4);
IkReal x10549=(gconst4*r11);
IkReal x10550=(gconst5*r10);
IkReal x10551=(gconst4*r01);
IkReal x10552=(gconst5*r00);
IkReal x10553=(gconst4*r21);
IkReal x10554=(gconst5*r20);
IkReal x10555=((1.0)*x10548);
IkReal x10556=((1.0)*x10547);
evalcond[0]=((((-1.0)*x10554*x10556))+((x10547*x10553))+(((-1.0)*r22*x10555)));
evalcond[1]=(((x10547*x10551))+(((-1.0)*r02*x10555))+(((-1.0)*x10552*x10556)));
evalcond[2]=((((-1.0)*r12*x10556))+((x10548*x10550))+(((-1.0)*x10549*x10555)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10555))+(((-1.0)*x10550*x10556))+((x10547*x10549)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10551*x10555))+((cj1*sj2))+(((-1.0)*r02*x10556))+((x10548*x10552)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10548*x10554))+(((-1.0)*x10553*x10555))+(((-1.0)*r22*x10556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10557=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10557.valid){
continue;
}
CheckValue<IkReal> x10558 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10557.value)))+(x10558.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10559=IKsin(j4);
IkReal x10560=IKcos(j4);
IkReal x10561=(gconst4*r11);
IkReal x10562=(gconst5*r10);
IkReal x10563=(gconst4*r01);
IkReal x10564=(gconst5*r00);
IkReal x10565=(gconst4*r21);
IkReal x10566=(gconst5*r20);
IkReal x10567=((1.0)*x10560);
IkReal x10568=((1.0)*x10559);
evalcond[0]=((((-1.0)*r22*x10567))+(((-1.0)*x10566*x10568))+((x10559*x10565)));
evalcond[1]=((((-1.0)*x10564*x10568))+(((-1.0)*r02*x10567))+((x10559*x10563)));
evalcond[2]=((((-1.0)*x10561*x10567))+(((-1.0)*r12*x10568))+((x10560*x10562)));
evalcond[3]=((-1.0)+(((-1.0)*x10562*x10568))+(((-1.0)*r12*x10567))+((x10559*x10561)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10563*x10567))+((cj1*sj2))+(((-1.0)*r02*x10568))+((x10560*x10564)));
evalcond[5]=((((-1.0)*r22*x10568))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10565*x10567))+((x10560*x10566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10569=((-1.0)*r21);
CheckValue<IkReal> x10572 = IKatan2WithCheck(IkReal(x10569),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10572.valid){
continue;
}
IkReal x10570=((1.0)*(x10572.value));
IkReal x10571=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10570)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10570)));
IkReal gconst4=(x10569*x10571);
IkReal gconst5=((1.0)*r20*x10571);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10573=((-1.0)*r21);
CheckValue<IkReal> x10576 = IKatan2WithCheck(IkReal(x10573),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10576.valid){
continue;
}
IkReal x10574=((1.0)*(x10576.value));
IkReal x10575=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10574)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10574)));
IkReal gconst4=(x10573*x10575);
IkReal gconst5=((1.0)*r20*x10575);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10577=((-1.0)*r21);
CheckValue<IkReal> x10580 = IKatan2WithCheck(IkReal(x10577),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10580.valid){
continue;
}
IkReal x10578=((1.0)*(x10580.value));
IkReal x10579=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10578)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10578)));
IkReal gconst4=(x10577*x10579);
IkReal gconst5=((1.0)*r20*x10579);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10581=(gconst5*r10);
IkReal x10582=(gconst4*r11);
CheckValue<IkReal> x10583 = IKatan2WithCheck(IkReal((x10582+(((-1.0)*x10581)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10583.valid){
continue;
}
CheckValue<IkReal> x10584=IKPowWithIntegerCheck(IKsign(((x10581*x10581)+(r12*r12)+(((-2.0)*x10581*x10582))+(x10582*x10582))),-1);
if(!x10584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10583.value)+(((1.5707963267949)*(x10584.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10585=IKcos(j4);
IkReal x10586=IKsin(j4);
IkReal x10587=(gconst4*r11);
IkReal x10588=(gconst5*r10);
IkReal x10589=(gconst5*r00);
IkReal x10590=(gconst5*r20);
IkReal x10591=((1.0)*x10585);
IkReal x10592=(gconst4*x10585);
IkReal x10593=((1.0)*x10586);
IkReal x10594=(gconst4*x10586);
evalcond[0]=(((r12*x10586))+(((-1.0)*x10588*x10591))+((x10585*x10587)));
evalcond[1]=(((r21*x10594))+(((-1.0)*r22*x10591))+(((-1.0)*x10590*x10593)));
evalcond[2]=((((-1.0)*r02*x10591))+((r01*x10594))+(((-1.0)*x10589*x10593)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10591))+((x10586*x10587))+(((-1.0)*x10588*x10593)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x10592))+(((-1.0)*x10589*x10591))+((r02*x10586)));
evalcond[5]=(((r21*x10592))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10590*x10591))+((r22*x10586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10595=((1.0)*gconst5);
CheckValue<IkReal> x10596=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10595))+(((-1.0)*gconst4*r20)))),-1);
if(!x10596.valid){
continue;
}
CheckValue<IkReal> x10597 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10595)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10596.value)))+(x10597.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10598=IKcos(j4);
IkReal x10599=IKsin(j4);
IkReal x10600=(gconst4*r11);
IkReal x10601=(gconst5*r10);
IkReal x10602=(gconst5*r00);
IkReal x10603=(gconst5*r20);
IkReal x10604=((1.0)*x10598);
IkReal x10605=(gconst4*x10598);
IkReal x10606=((1.0)*x10599);
IkReal x10607=(gconst4*x10599);
evalcond[0]=(((r12*x10599))+((x10598*x10600))+(((-1.0)*x10601*x10604)));
evalcond[1]=(((r21*x10607))+(((-1.0)*r22*x10604))+(((-1.0)*x10603*x10606)));
evalcond[2]=(((r01*x10607))+(((-1.0)*r02*x10604))+(((-1.0)*x10602*x10606)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10604))+((x10599*x10600))+(((-1.0)*x10601*x10606)));
evalcond[4]=(((r01*x10605))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10602*x10604))+((r02*x10599)));
evalcond[5]=(((r21*x10605))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10603*x10604))+((r22*x10599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10608=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10608.valid){
continue;
}
CheckValue<IkReal> x10609 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10608.value)))+(x10609.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10610=IKcos(j4);
IkReal x10611=IKsin(j4);
IkReal x10612=(gconst4*r11);
IkReal x10613=(gconst5*r10);
IkReal x10614=(gconst5*r00);
IkReal x10615=(gconst5*r20);
IkReal x10616=((1.0)*x10610);
IkReal x10617=(gconst4*x10610);
IkReal x10618=((1.0)*x10611);
IkReal x10619=(gconst4*x10611);
evalcond[0]=(((r12*x10611))+((x10610*x10612))+(((-1.0)*x10613*x10616)));
evalcond[1]=((((-1.0)*x10615*x10618))+(((-1.0)*r22*x10616))+((r21*x10619)));
evalcond[2]=((((-1.0)*x10614*x10618))+(((-1.0)*r02*x10616))+((r01*x10619)));
evalcond[3]=((-1.0)+((x10611*x10612))+(((-1.0)*r12*x10616))+(((-1.0)*x10613*x10618)));
evalcond[4]=(((cj2*sj1))+((r02*x10611))+((cj1*sj2))+(((-1.0)*x10614*x10616))+((r01*x10617)));
evalcond[5]=((((-1.0)*x10615*x10616))+((r22*x10611))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10620=((-1.0)*r21);
CheckValue<IkReal> x10623 = IKatan2WithCheck(IkReal(x10620),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10623.valid){
continue;
}
IkReal x10621=((1.0)*(x10623.value));
IkReal x10622=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10621)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10621)));
IkReal gconst4=(x10620*x10622);
IkReal gconst5=((1.0)*r20*x10622);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10624=((-1.0)*r21);
CheckValue<IkReal> x10627 = IKatan2WithCheck(IkReal(x10624),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10627.valid){
continue;
}
IkReal x10625=((1.0)*(x10627.value));
IkReal x10626=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10625)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10625)));
IkReal gconst4=(x10624*x10626);
IkReal gconst5=((1.0)*r20*x10626);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10628=((-1.0)*r21);
CheckValue<IkReal> x10631 = IKatan2WithCheck(IkReal(x10628),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10631.valid){
continue;
}
IkReal x10629=((1.0)*(x10631.value));
IkReal x10630=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10629)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10629)));
IkReal gconst4=(x10628*x10630);
IkReal gconst5=((1.0)*r20*x10630);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10632=(gconst5*r10);
IkReal x10633=(gconst4*r11);
CheckValue<IkReal> x10634=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10632*x10632)+(x10633*x10633)+(((-2.0)*x10632*x10633)))),-1);
if(!x10634.valid){
continue;
}
CheckValue<IkReal> x10635 = IKatan2WithCheck(IkReal(((((-1.0)*x10632))+x10633)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10634.value)))+(x10635.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10636=IKcos(j4);
IkReal x10637=IKsin(j4);
IkReal x10638=(gconst5*r10);
IkReal x10639=(gconst5*r00);
IkReal x10640=(gconst5*r20);
IkReal x10641=((1.0)*x10636);
IkReal x10642=(gconst4*x10637);
IkReal x10643=(gconst4*x10636);
IkReal x10644=((1.0)*x10637);
evalcond[0]=((((-1.0)*x10638*x10641))+((r11*x10643))+((r12*x10637)));
evalcond[1]=(((r21*x10642))+(((-1.0)*x10640*x10644))+(((-1.0)*r22*x10641)));
evalcond[2]=((((-1.0)*r02*x10641))+(((-1.0)*x10639*x10644))+((r01*x10642)));
evalcond[3]=((-1.0)+(((-1.0)*x10638*x10644))+(((-1.0)*r12*x10641))+((r11*x10642)));
evalcond[4]=(((r21*x10643))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10640*x10641))+((r22*x10637)));
evalcond[5]=((((-1.0)*x10639*x10641))+((r01*x10643))+(((-1.0)*sj1*sj2))+((r02*x10637))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10645=((1.0)*gconst5);
CheckValue<IkReal> x10646 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10645))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10646.valid){
continue;
}
CheckValue<IkReal> x10647=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10645))+(((-1.0)*gconst4*r20)))),-1);
if(!x10647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10646.value)+(((1.5707963267949)*(x10647.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10648=IKcos(j4);
IkReal x10649=IKsin(j4);
IkReal x10650=(gconst5*r10);
IkReal x10651=(gconst5*r00);
IkReal x10652=(gconst5*r20);
IkReal x10653=((1.0)*x10648);
IkReal x10654=(gconst4*x10649);
IkReal x10655=(gconst4*x10648);
IkReal x10656=((1.0)*x10649);
evalcond[0]=(((r11*x10655))+(((-1.0)*x10650*x10653))+((r12*x10649)));
evalcond[1]=((((-1.0)*r22*x10653))+((r21*x10654))+(((-1.0)*x10652*x10656)));
evalcond[2]=((((-1.0)*r02*x10653))+(((-1.0)*x10651*x10656))+((r01*x10654)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10653))+((r11*x10654))+(((-1.0)*x10650*x10656)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10649))+((r21*x10655))+(((-1.0)*x10652*x10653)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x10649))+((cj1*cj2))+(((-1.0)*x10651*x10653))+((r01*x10655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10657=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10657.valid){
continue;
}
CheckValue<IkReal> x10658 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10657.value)))+(x10658.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10659=IKcos(j4);
IkReal x10660=IKsin(j4);
IkReal x10661=(gconst5*r10);
IkReal x10662=(gconst5*r00);
IkReal x10663=(gconst5*r20);
IkReal x10664=((1.0)*x10659);
IkReal x10665=(gconst4*x10660);
IkReal x10666=(gconst4*x10659);
IkReal x10667=((1.0)*x10660);
evalcond[0]=(((r12*x10660))+(((-1.0)*x10661*x10664))+((r11*x10666)));
evalcond[1]=((((-1.0)*r22*x10664))+(((-1.0)*x10663*x10667))+((r21*x10665)));
evalcond[2]=((((-1.0)*r02*x10664))+((r01*x10665))+(((-1.0)*x10662*x10667)));
evalcond[3]=((-1.0)+(((-1.0)*x10661*x10667))+(((-1.0)*r12*x10664))+((r11*x10665)));
evalcond[4]=(((cj2*sj1))+((r22*x10660))+((cj1*sj2))+(((-1.0)*x10663*x10664))+((r21*x10666)));
evalcond[5]=(((r02*x10660))+(((-1.0)*sj1*sj2))+((r01*x10666))+(((-1.0)*x10662*x10664))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10668=((-1.0)*r21);
CheckValue<IkReal> x10671 = IKatan2WithCheck(IkReal(x10668),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10671.valid){
continue;
}
IkReal x10669=((1.0)*(x10671.value));
IkReal x10670=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10669)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10669)));
IkReal gconst4=(x10668*x10670);
IkReal gconst5=((1.0)*r20*x10670);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10672=((-1.0)*r21);
CheckValue<IkReal> x10675 = IKatan2WithCheck(IkReal(x10672),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10675.valid){
continue;
}
IkReal x10673=((1.0)*(x10675.value));
IkReal x10674=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10673)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10673)));
IkReal gconst4=(x10672*x10674);
IkReal gconst5=((1.0)*r20*x10674);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10676=((-1.0)*r21);
CheckValue<IkReal> x10679 = IKatan2WithCheck(IkReal(x10676),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10679.valid){
continue;
}
IkReal x10677=((1.0)*(x10679.value));
IkReal x10678=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10677)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10677)));
IkReal gconst4=(x10676*x10678);
IkReal gconst5=((1.0)*r20*x10678);
IkReal x10680=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10684=IKPowWithIntegerCheck(x10680,-1);
if(!x10684.valid){
continue;
}
IkReal x10681=x10684.value;
IkReal x10682=((1.0)*x10681);
IkReal x10683=((((-1.0)*x10682*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10681))+(((-1.0)*(r12*r12)))+(((-1.0)*x10682*(r11*r11)*(r21*r21))));
j4eval[0]=x10683;
j4eval[1]=r12;
j4eval[2]=x10680;
j4eval[3]=IKsign(x10683);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10685=(gconst5*r10);
IkReal x10686=(gconst4*r11);
CheckValue<IkReal> x10687 = IKatan2WithCheck(IkReal(((((-1.0)*x10686))+x10685)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10687.valid){
continue;
}
CheckValue<IkReal> x10688=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10686*x10686)))+(((-1.0)*(r12*r12)))+(((2.0)*x10685*x10686))+(((-1.0)*(x10685*x10685))))),-1);
if(!x10688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10687.value)+(((1.5707963267949)*(x10688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10689=IKsin(j4);
IkReal x10690=IKcos(j4);
IkReal x10691=(gconst4*r11);
IkReal x10692=(gconst5*r10);
IkReal x10693=(gconst5*r00);
IkReal x10694=(gconst5*r20);
IkReal x10695=((1.0)*x10690);
IkReal x10696=(gconst4*x10689);
IkReal x10697=((1.0)*x10689);
evalcond[0]=((((-1.0)*x10694*x10697))+((r21*x10696))+(((-1.0)*r22*x10695)));
evalcond[1]=((((-1.0)*x10693*x10697))+(((-1.0)*r02*x10695))+((r01*x10696)));
evalcond[2]=((((-1.0)*x10691*x10695))+(((-1.0)*r12*x10697))+((x10690*x10692)));
evalcond[3]=((-1.0)+((x10689*x10691))+(((-1.0)*x10692*x10697))+(((-1.0)*r12*x10695)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x10695))+((cj1*sj2))+((x10690*x10694))+(((-1.0)*r22*x10697)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x10697))+(((-1.0)*gconst4*r01*x10695))+((cj1*cj2))+((x10690*x10693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10698=((1.0)*gconst5);
CheckValue<IkReal> x10699 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10698)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10699.valid){
continue;
}
CheckValue<IkReal> x10700=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10698))+(((-1.0)*gconst4*r20)))),-1);
if(!x10700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10699.value)+(((1.5707963267949)*(x10700.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10701=IKsin(j4);
IkReal x10702=IKcos(j4);
IkReal x10703=(gconst4*r11);
IkReal x10704=(gconst5*r10);
IkReal x10705=(gconst5*r00);
IkReal x10706=(gconst5*r20);
IkReal x10707=((1.0)*x10702);
IkReal x10708=(gconst4*x10701);
IkReal x10709=((1.0)*x10701);
evalcond[0]=((((-1.0)*r22*x10707))+((r21*x10708))+(((-1.0)*x10706*x10709)));
evalcond[1]=(((r01*x10708))+(((-1.0)*x10705*x10709))+(((-1.0)*r02*x10707)));
evalcond[2]=((((-1.0)*r12*x10709))+((x10702*x10704))+(((-1.0)*x10703*x10707)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10707))+((x10701*x10703))+(((-1.0)*x10704*x10709)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x10707))+((cj1*sj2))+(((-1.0)*r22*x10709))+((x10702*x10706)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r01*x10707))+((x10702*x10705))+(((-1.0)*r02*x10709))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10710=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10710.valid){
continue;
}
CheckValue<IkReal> x10711 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10710.value)))+(x10711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10712=IKsin(j4);
IkReal x10713=IKcos(j4);
IkReal x10714=(gconst4*r11);
IkReal x10715=(gconst5*r10);
IkReal x10716=(gconst5*r00);
IkReal x10717=(gconst5*r20);
IkReal x10718=((1.0)*x10713);
IkReal x10719=(gconst4*x10712);
IkReal x10720=((1.0)*x10712);
evalcond[0]=((((-1.0)*r22*x10718))+((r21*x10719))+(((-1.0)*x10717*x10720)));
evalcond[1]=((((-1.0)*x10716*x10720))+((r01*x10719))+(((-1.0)*r02*x10718)));
evalcond[2]=((((-1.0)*x10714*x10718))+(((-1.0)*r12*x10720))+((x10713*x10715)));
evalcond[3]=((-1.0)+((x10712*x10714))+(((-1.0)*r12*x10718))+(((-1.0)*x10715*x10720)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x10720))+((cj1*sj2))+((x10713*x10717))+(((-1.0)*gconst4*r21*x10718)));
evalcond[5]=((((-1.0)*r02*x10720))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r01*x10718))+((cj1*cj2))+((x10713*x10716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10721=((-1.0)*r21);
IkReal x10722=((-1.0)*px);
CheckValue<IkReal> x10724 = IKatan2WithCheck(IkReal(x10721),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10724.valid){
continue;
}
IkReal x10723=((1.0)*(x10724.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10723)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10722);
rxp1_1=(px*r21);
rxp1_2=(r11*x10722);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10723)));
IkReal gconst4=x10721;
IkReal gconst5=((1.0)*r20);
IkReal x10725=((1.0)*cj3);
IkReal x10726=(r10*r20);
IkReal x10727=(r11*r21);
j4eval[0]=((((-1.0)*x10726))+(((-1.0)*x10727)));
j4eval[1]=((((-1.0)*x10725*x10727))+(((-1.0)*x10725*x10726)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10728=((-1.0)*r21);
IkReal x10729=((-1.0)*px);
CheckValue<IkReal> x10731 = IKatan2WithCheck(IkReal(x10728),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10731.valid){
continue;
}
IkReal x10730=((1.0)*(x10731.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10730)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10729);
rxp1_1=(px*r21);
rxp1_2=(r11*x10729);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10730)));
IkReal gconst4=x10728;
IkReal gconst5=((1.0)*r20);
IkReal x10732=((1.0)*r11*r21);
IkReal x10733=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10733))+(((-1.0)*x10732)));
j4eval[1]=(((sj3*x10733))+((sj3*x10732)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10734=((-1.0)*r21);
IkReal x10735=((-1.0)*px);
CheckValue<IkReal> x10737 = IKatan2WithCheck(IkReal(x10734),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10737.valid){
continue;
}
IkReal x10736=((1.0)*(x10737.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10736)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10735);
rxp1_1=(px*r21);
rxp1_2=(r11*x10735);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10736)));
IkReal gconst4=x10734;
IkReal gconst5=((1.0)*r20);
IkReal x10738=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x10738))+(((-1.0)*r11*r21*x10738)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10739=((1.0)*r10);
CheckValue<IkReal> x10740=IKPowWithIntegerCheck(cj3,-1);
if(!x10740.valid){
continue;
}
CheckValue<IkReal> x10741=IKPowWithIntegerCheck(r02,-1);
if(!x10741.valid){
continue;
}
CheckValue<IkReal> x10742=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x10739))),-1);
if(!x10742.valid){
continue;
}
if( IKabs(((x10740.value)*(x10741.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10742.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10739)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10740.value)*(x10741.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10742.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10739))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10740.value)*(x10741.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10742.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10739))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10743=IKsin(j4);
IkReal x10744=IKcos(j4);
IkReal x10745=(cj2*sj1);
IkReal x10746=(cj1*sj2);
IkReal x10747=(gconst5*sj3);
IkReal x10748=(gconst4*r11);
IkReal x10749=(sj1*sj2);
IkReal x10750=((1.0)*gconst5);
IkReal x10751=(cj1*cj2);
IkReal x10752=(gconst4*r21);
IkReal x10753=(cj3*gconst4);
IkReal x10754=(gconst4*sj3);
IkReal x10755=(cj3*gconst5);
IkReal x10756=(r20*x10744);
IkReal x10757=(r10*x10744);
IkReal x10758=(cj3*x10744);
IkReal x10759=(r02*x10743);
IkReal x10760=(x10745+x10746);
IkReal x10761=((1.0)*sj3*x10744);
evalcond[0]=((-1.0)*r02*x10744);
evalcond[1]=(((x10743*x10752))+(((-1.0)*r20*x10743*x10750)));
evalcond[2]=((((-1.0)*x10749))+((cj3*x10759))+x10751);
evalcond[3]=((((-1.0)*sj3*x10759))+x10760);
evalcond[4]=((-1.0)+((x10743*x10748))+(((-1.0)*r10*x10743*x10750)));
evalcond[5]=(((r10*x10754))+(((-1.0)*cj3*x10750*x10757))+((x10748*x10758))+((r11*x10747)));
evalcond[6]=(((r10*x10753))+((x10747*x10757))+((r11*x10755))+(((-1.0)*x10748*x10761)));
evalcond[7]=((((-1.0)*cj3*x10750*x10756))+((x10752*x10758))+((r20*x10754))+x10760+((r21*x10747)));
evalcond[8]=((((-1.0)*x10752*x10761))+((x10747*x10756))+((r20*x10753))+x10749+((r21*x10755))+(((-1.0)*x10751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10762=((1.0)*gconst5);
IkReal x10763=(gconst4*r11);
CheckValue<IkReal> x10764=IKPowWithIntegerCheck(((((-1.0)*r10*x10762))+x10763),-1);
if(!x10764.valid){
continue;
}
CheckValue<IkReal> x10765=IKPowWithIntegerCheck(((((-1.0)*sj3*x10763))+((gconst5*r10*sj3))),-1);
if(!x10765.valid){
continue;
}
if( IKabs(x10764.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10765.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10762)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10764.value)+IKsqr(((x10765.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10762))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10764.value, ((x10765.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10762))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10766=IKsin(j4);
IkReal x10767=IKcos(j4);
IkReal x10768=(cj2*sj1);
IkReal x10769=(cj1*sj2);
IkReal x10770=(gconst5*sj3);
IkReal x10771=(gconst4*r11);
IkReal x10772=(sj1*sj2);
IkReal x10773=((1.0)*gconst5);
IkReal x10774=(cj1*cj2);
IkReal x10775=(gconst4*r21);
IkReal x10776=(cj3*gconst4);
IkReal x10777=(gconst4*sj3);
IkReal x10778=(cj3*gconst5);
IkReal x10779=(r20*x10767);
IkReal x10780=(r10*x10767);
IkReal x10781=(cj3*x10767);
IkReal x10782=(r02*x10766);
IkReal x10783=(x10769+x10768);
IkReal x10784=((1.0)*sj3*x10767);
evalcond[0]=((-1.0)*r02*x10767);
evalcond[1]=((((-1.0)*r20*x10766*x10773))+((x10766*x10775)));
evalcond[2]=((((-1.0)*x10772))+x10774+((cj3*x10782)));
evalcond[3]=((((-1.0)*sj3*x10782))+x10783);
evalcond[4]=((-1.0)+((x10766*x10771))+(((-1.0)*r10*x10766*x10773)));
evalcond[5]=(((r11*x10770))+(((-1.0)*cj3*x10773*x10780))+((x10771*x10781))+((r10*x10777)));
evalcond[6]=(((r11*x10778))+((x10770*x10780))+(((-1.0)*x10771*x10784))+((r10*x10776)));
evalcond[7]=(((r20*x10777))+(((-1.0)*cj3*x10773*x10779))+((x10775*x10781))+((r21*x10770))+x10783);
evalcond[8]=((((-1.0)*x10775*x10784))+((r20*x10776))+(((-1.0)*x10774))+((x10770*x10779))+((r21*x10778))+x10772);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10785=((1.0)*sj3);
IkReal x10786=(gconst4*r11);
IkReal x10787=((1.0)*gconst5*r10);
CheckValue<IkReal> x10788=IKPowWithIntegerCheck(((((-1.0)*x10787))+x10786),-1);
if(!x10788.valid){
continue;
}
CheckValue<IkReal> x10789=IKPowWithIntegerCheck(((((-1.0)*cj3*x10787))+((cj3*x10786))),-1);
if(!x10789.valid){
continue;
}
if( IKabs(x10788.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10789.value)*(((((-1.0)*gconst5*r11*x10785))+(((-1.0)*gconst4*r10*x10785)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10788.value)+IKsqr(((x10789.value)*(((((-1.0)*gconst5*r11*x10785))+(((-1.0)*gconst4*r10*x10785))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10788.value, ((x10789.value)*(((((-1.0)*gconst5*r11*x10785))+(((-1.0)*gconst4*r10*x10785))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10790=IKsin(j4);
IkReal x10791=IKcos(j4);
IkReal x10792=(cj2*sj1);
IkReal x10793=(cj1*sj2);
IkReal x10794=(gconst5*sj3);
IkReal x10795=(gconst4*r11);
IkReal x10796=(sj1*sj2);
IkReal x10797=((1.0)*gconst5);
IkReal x10798=(cj1*cj2);
IkReal x10799=(gconst4*r21);
IkReal x10800=(cj3*gconst4);
IkReal x10801=(gconst4*sj3);
IkReal x10802=(cj3*gconst5);
IkReal x10803=(r20*x10791);
IkReal x10804=(r10*x10791);
IkReal x10805=(cj3*x10791);
IkReal x10806=(r02*x10790);
IkReal x10807=(x10792+x10793);
IkReal x10808=((1.0)*sj3*x10791);
evalcond[0]=((-1.0)*r02*x10791);
evalcond[1]=((((-1.0)*r20*x10790*x10797))+((x10790*x10799)));
evalcond[2]=(((cj3*x10806))+(((-1.0)*x10796))+x10798);
evalcond[3]=((((-1.0)*sj3*x10806))+x10807);
evalcond[4]=((-1.0)+((x10790*x10795))+(((-1.0)*r10*x10790*x10797)));
evalcond[5]=(((x10795*x10805))+((r10*x10801))+(((-1.0)*cj3*x10797*x10804))+((r11*x10794)));
evalcond[6]=((((-1.0)*x10795*x10808))+((r10*x10800))+((r11*x10802))+((x10794*x10804)));
evalcond[7]=(((r20*x10801))+((r21*x10794))+((x10799*x10805))+(((-1.0)*cj3*x10797*x10803))+x10807);
evalcond[8]=(((r20*x10800))+(((-1.0)*x10799*x10808))+((r21*x10802))+(((-1.0)*x10798))+x10796+((x10794*x10803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10809=gconst4*gconst4;
IkReal x10810=gconst5*gconst5;
IkReal x10811=(r10*r21);
IkReal x10812=((1.0)*cj3);
IkReal x10813=(r11*r21);
IkReal x10814=(r11*r20);
IkReal x10815=(r22*sj3);
IkReal x10816=(gconst4*r10);
IkReal x10817=((1.0)*sj3);
IkReal x10818=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10819=IKPowWithIntegerCheck(IKsign((((x10814*x10818))+(((-1.0)*r10*r20*x10810*x10812))+(((-1.0)*r12*r22*x10812))+((x10811*x10818))+(((-1.0)*x10809*x10812*x10813)))),-1);
if(!x10819.valid){
continue;
}
CheckValue<IkReal> x10820 = IKatan2WithCheck(IkReal((((x10815*x10816))+((gconst5*r11*x10815)))),IkReal(((((-1.0)*x10810*x10814*x10817))+((gconst4*gconst5*sj3*x10813))+(((-1.0)*gconst5*r20*x10816*x10817))+((sj3*x10809*x10811)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10819.value)))+(x10820.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10821=IKsin(j4);
IkReal x10822=IKcos(j4);
IkReal x10823=(cj2*sj1);
IkReal x10824=(cj1*sj2);
IkReal x10825=(gconst5*sj3);
IkReal x10826=(gconst4*r11);
IkReal x10827=(sj1*sj2);
IkReal x10828=(gconst5*r10);
IkReal x10829=(cj1*cj2);
IkReal x10830=(gconst4*r01);
IkReal x10831=(gconst4*r21);
IkReal x10832=(gconst5*r00);
IkReal x10833=(gconst4*sj3);
IkReal x10834=(cj3*gconst5);
IkReal x10835=(cj3*gconst4);
IkReal x10836=((1.0)*x10822);
IkReal x10837=((1.0)*x10821);
IkReal x10838=(cj3*x10821);
IkReal x10839=(cj3*x10822);
IkReal x10840=(x10824+x10823);
evalcond[0]=((((-1.0)*gconst5*r20*x10837))+(((-1.0)*r22*x10836))+((x10821*x10831)));
evalcond[1]=((((-1.0)*x10832*x10837))+(((-1.0)*r02*x10836))+((x10821*x10830)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10836))+(((-1.0)*x10828*x10837))+((x10821*x10826)));
evalcond[3]=(((x10826*x10839))+((r10*x10833))+(((-1.0)*cj3*x10828*x10836))+((r12*x10838))+((r11*x10825)));
evalcond[4]=(((r10*x10822*x10825))+(((-1.0)*sj3*x10826*x10836))+((r10*x10835))+(((-1.0)*r12*sj3*x10837))+((r11*x10834)));
evalcond[5]=(((r21*x10825))+((r22*x10838))+((x10831*x10839))+((r20*x10833))+(((-1.0)*r20*x10834*x10836))+x10840);
evalcond[6]=((((-1.0)*x10827))+((r02*x10838))+((r00*x10833))+(((-1.0)*cj3*x10832*x10836))+((r01*x10825))+((x10830*x10839))+x10829);
evalcond[7]=(((r00*x10822*x10825))+(((-1.0)*sj3*x10830*x10836))+(((-1.0)*r02*sj3*x10837))+((r01*x10834))+((r00*x10835))+x10840);
evalcond[8]=((((-1.0)*x10829))+((r20*x10822*x10825))+(((-1.0)*sj3*x10831*x10836))+(((-1.0)*r22*sj3*x10837))+((r20*x10835))+((r21*x10834))+x10827);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10841=((1.0)*gconst5);
CheckValue<IkReal> x10842=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10841))+(((-1.0)*gconst4*r20)))),-1);
if(!x10842.valid){
continue;
}
CheckValue<IkReal> x10843 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10841)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10842.value)))+(x10843.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10844=IKsin(j4);
IkReal x10845=IKcos(j4);
IkReal x10846=(cj2*sj1);
IkReal x10847=(cj1*sj2);
IkReal x10848=(gconst5*sj3);
IkReal x10849=(gconst4*r11);
IkReal x10850=(sj1*sj2);
IkReal x10851=(gconst5*r10);
IkReal x10852=(cj1*cj2);
IkReal x10853=(gconst4*r01);
IkReal x10854=(gconst4*r21);
IkReal x10855=(gconst5*r00);
IkReal x10856=(gconst4*sj3);
IkReal x10857=(cj3*gconst5);
IkReal x10858=(cj3*gconst4);
IkReal x10859=((1.0)*x10845);
IkReal x10860=((1.0)*x10844);
IkReal x10861=(cj3*x10844);
IkReal x10862=(cj3*x10845);
IkReal x10863=(x10846+x10847);
evalcond[0]=(((x10844*x10854))+(((-1.0)*gconst5*r20*x10860))+(((-1.0)*r22*x10859)));
evalcond[1]=(((x10844*x10853))+(((-1.0)*r02*x10859))+(((-1.0)*x10855*x10860)));
evalcond[2]=((-1.0)+(((-1.0)*x10851*x10860))+(((-1.0)*r12*x10859))+((x10844*x10849)));
evalcond[3]=((((-1.0)*cj3*x10851*x10859))+((r12*x10861))+((r10*x10856))+((x10849*x10862))+((r11*x10848)));
evalcond[4]=(((r11*x10857))+(((-1.0)*sj3*x10849*x10859))+((r10*x10858))+(((-1.0)*r12*sj3*x10860))+((r10*x10845*x10848)));
evalcond[5]=((((-1.0)*r20*x10857*x10859))+((x10854*x10862))+((r20*x10856))+((r21*x10848))+((r22*x10861))+x10863);
evalcond[6]=(((r01*x10848))+(((-1.0)*cj3*x10855*x10859))+((x10853*x10862))+((r00*x10856))+(((-1.0)*x10850))+((r02*x10861))+x10852);
evalcond[7]=(((r00*x10845*x10848))+(((-1.0)*sj3*x10853*x10859))+((r01*x10857))+((r00*x10858))+(((-1.0)*r02*sj3*x10860))+x10863);
evalcond[8]=((((-1.0)*sj3*x10854*x10859))+(((-1.0)*r22*sj3*x10860))+((r21*x10857))+((r20*x10858))+((r20*x10845*x10848))+(((-1.0)*x10852))+x10850);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10864=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10864.valid){
continue;
}
CheckValue<IkReal> x10865 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10864.value)))+(x10865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10866=IKsin(j4);
IkReal x10867=IKcos(j4);
IkReal x10868=(cj2*sj1);
IkReal x10869=(cj1*sj2);
IkReal x10870=(gconst5*sj3);
IkReal x10871=(gconst4*r11);
IkReal x10872=(sj1*sj2);
IkReal x10873=(gconst5*r10);
IkReal x10874=(cj1*cj2);
IkReal x10875=(gconst4*r01);
IkReal x10876=(gconst4*r21);
IkReal x10877=(gconst5*r00);
IkReal x10878=(gconst4*sj3);
IkReal x10879=(cj3*gconst5);
IkReal x10880=(cj3*gconst4);
IkReal x10881=((1.0)*x10867);
IkReal x10882=((1.0)*x10866);
IkReal x10883=(cj3*x10866);
IkReal x10884=(cj3*x10867);
IkReal x10885=(x10868+x10869);
evalcond[0]=(((x10866*x10876))+(((-1.0)*gconst5*r20*x10882))+(((-1.0)*r22*x10881)));
evalcond[1]=(((x10866*x10875))+(((-1.0)*r02*x10881))+(((-1.0)*x10877*x10882)));
evalcond[2]=((-1.0)+((x10866*x10871))+(((-1.0)*x10873*x10882))+(((-1.0)*r12*x10881)));
evalcond[3]=((((-1.0)*cj3*x10873*x10881))+((r11*x10870))+((r10*x10878))+((x10871*x10884))+((r12*x10883)));
evalcond[4]=(((r10*x10867*x10870))+((r11*x10879))+(((-1.0)*sj3*x10871*x10881))+((r10*x10880))+(((-1.0)*r12*sj3*x10882)));
evalcond[5]=(((r21*x10870))+((r22*x10883))+((x10876*x10884))+((r20*x10878))+(((-1.0)*r20*x10879*x10881))+x10885);
evalcond[6]=(((r02*x10883))+((r01*x10870))+((r00*x10878))+(((-1.0)*cj3*x10877*x10881))+((x10875*x10884))+(((-1.0)*x10872))+x10874);
evalcond[7]=((((-1.0)*sj3*x10875*x10881))+((r00*x10880))+(((-1.0)*r02*sj3*x10882))+((r00*x10867*x10870))+((r01*x10879))+x10885);
evalcond[8]=(((r21*x10879))+(((-1.0)*sj3*x10876*x10881))+(((-1.0)*r22*sj3*x10882))+(((-1.0)*x10874))+((r20*x10880))+((r20*x10867*x10870))+x10872);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10886=((-1.0)*r21);
CheckValue<IkReal> x10889 = IKatan2WithCheck(IkReal(x10886),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10889.valid){
continue;
}
IkReal x10887=((1.0)*(x10889.value));
IkReal x10888=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10887)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10887)));
IkReal gconst4=(x10886*x10888);
IkReal gconst5=((1.0)*r20*x10888);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10890=((-1.0)*r21);
CheckValue<IkReal> x10893 = IKatan2WithCheck(IkReal(x10890),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10893.valid){
continue;
}
IkReal x10891=((1.0)*(x10893.value));
IkReal x10892=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10891)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10891)));
IkReal gconst4=(x10890*x10892);
IkReal gconst5=((1.0)*r20*x10892);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10894=((-1.0)*r21);
CheckValue<IkReal> x10897 = IKatan2WithCheck(IkReal(x10894),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10897.valid){
continue;
}
IkReal x10895=((1.0)*(x10897.value));
IkReal x10896=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10895)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10895)));
IkReal gconst4=(x10894*x10896);
IkReal gconst5=((1.0)*r20*x10896);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10898=((-1.0)*r21);
CheckValue<IkReal> x10901 = IKatan2WithCheck(IkReal(x10898),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10901.valid){
continue;
}
IkReal x10899=((1.0)*(x10901.value));
IkReal x10900=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10899)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10899)));
IkReal gconst4=(x10898*x10900);
IkReal gconst5=((1.0)*r20*x10900);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10902=((-1.0)*r21);
CheckValue<IkReal> x10905 = IKatan2WithCheck(IkReal(x10902),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10905.valid){
continue;
}
IkReal x10903=((1.0)*(x10905.value));
IkReal x10904=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10903)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10903)));
IkReal gconst4=(x10902*x10904);
IkReal gconst5=((1.0)*r20*x10904);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10906=((-1.0)*r21);
CheckValue<IkReal> x10909 = IKatan2WithCheck(IkReal(x10906),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10909.valid){
continue;
}
IkReal x10907=((1.0)*(x10909.value));
IkReal x10908=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10907)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10907)));
IkReal gconst4=(x10906*x10908);
IkReal gconst5=((1.0)*r20*x10908);
IkReal x10910=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10914=IKPowWithIntegerCheck(x10910,-1);
if(!x10914.valid){
continue;
}
IkReal x10911=x10914.value;
IkReal x10912=((1.0)*x10911);
IkReal x10913=((((-1.0)*x10912*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10912*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10911)));
j4eval[0]=x10913;
j4eval[1]=r02;
j4eval[2]=x10910;
j4eval[3]=IKsign(x10913);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10915=(gconst5*r00);
IkReal x10916=(gconst4*r01);
CheckValue<IkReal> x10917 = IKatan2WithCheck(IkReal((x10915+(((-1.0)*x10916)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10917.valid){
continue;
}
CheckValue<IkReal> x10918=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10915*x10915)))+(((-1.0)*(r02*r02)))+(((2.0)*x10915*x10916))+(((-1.0)*(x10916*x10916))))),-1);
if(!x10918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10917.value)+(((1.5707963267949)*(x10918.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10919=IKsin(j4);
IkReal x10920=IKcos(j4);
IkReal x10921=(gconst4*r11);
IkReal x10922=((1.0)*cj1);
IkReal x10923=(gconst5*r10);
IkReal x10924=(gconst4*r01);
IkReal x10925=(gconst5*r00);
IkReal x10926=(gconst4*r21);
IkReal x10927=(gconst5*r20);
IkReal x10928=((1.0)*x10920);
IkReal x10929=((1.0)*x10919);
evalcond[0]=((((-1.0)*r22*x10928))+(((-1.0)*x10927*x10929))+((x10919*x10926)));
evalcond[1]=((((-1.0)*r12*x10928))+((x10919*x10921))+(((-1.0)*x10923*x10929)));
evalcond[2]=((((-1.0)*r02*x10929))+(((-1.0)*x10924*x10928))+((x10920*x10925)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10928))+(((-1.0)*x10925*x10929))+((x10919*x10924)));
evalcond[4]=((((-1.0)*r22*x10929))+((sj1*sj2))+(((-1.0)*cj2*x10922))+((x10920*x10927))+(((-1.0)*x10926*x10928)));
evalcond[5]=((((-1.0)*sj2*x10922))+(((-1.0)*r12*x10929))+(((-1.0)*cj2*sj1))+(((-1.0)*x10921*x10928))+((x10920*x10923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10930=((1.0)*gconst5);
CheckValue<IkReal> x10931=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10930))+(((-1.0)*gconst4*r10)))),-1);
if(!x10931.valid){
continue;
}
CheckValue<IkReal> x10932 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10930))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10931.value)))+(x10932.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10933=IKsin(j4);
IkReal x10934=IKcos(j4);
IkReal x10935=(gconst4*r11);
IkReal x10936=((1.0)*cj1);
IkReal x10937=(gconst5*r10);
IkReal x10938=(gconst4*r01);
IkReal x10939=(gconst5*r00);
IkReal x10940=(gconst4*r21);
IkReal x10941=(gconst5*r20);
IkReal x10942=((1.0)*x10934);
IkReal x10943=((1.0)*x10933);
evalcond[0]=((((-1.0)*x10941*x10943))+(((-1.0)*r22*x10942))+((x10933*x10940)));
evalcond[1]=(((x10933*x10935))+(((-1.0)*r12*x10942))+(((-1.0)*x10937*x10943)));
evalcond[2]=((((-1.0)*x10938*x10942))+(((-1.0)*r02*x10943))+((x10934*x10939)));
evalcond[3]=((-1.0)+(((-1.0)*x10939*x10943))+((x10933*x10938))+(((-1.0)*r02*x10942)));
evalcond[4]=(((x10934*x10941))+((sj1*sj2))+(((-1.0)*r22*x10943))+(((-1.0)*cj2*x10936))+(((-1.0)*x10940*x10942)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10935*x10942))+(((-1.0)*r12*x10943))+((x10934*x10937))+(((-1.0)*sj2*x10936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10944 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10944.valid){
continue;
}
CheckValue<IkReal> x10945=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10944.value)+(((1.5707963267949)*(x10945.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10946=IKsin(j4);
IkReal x10947=IKcos(j4);
IkReal x10948=(gconst4*r11);
IkReal x10949=((1.0)*cj1);
IkReal x10950=(gconst5*r10);
IkReal x10951=(gconst4*r01);
IkReal x10952=(gconst5*r00);
IkReal x10953=(gconst4*r21);
IkReal x10954=(gconst5*r20);
IkReal x10955=((1.0)*x10947);
IkReal x10956=((1.0)*x10946);
evalcond[0]=((((-1.0)*r22*x10955))+((x10946*x10953))+(((-1.0)*x10954*x10956)));
evalcond[1]=(((x10946*x10948))+(((-1.0)*x10950*x10956))+(((-1.0)*r12*x10955)));
evalcond[2]=(((x10947*x10952))+(((-1.0)*x10951*x10955))+(((-1.0)*r02*x10956)));
evalcond[3]=((-1.0)+((x10946*x10951))+(((-1.0)*x10952*x10956))+(((-1.0)*r02*x10955)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x10956))+((x10947*x10954))+(((-1.0)*x10953*x10955))+(((-1.0)*cj2*x10949)));
evalcond[5]=((((-1.0)*x10948*x10955))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10949))+((x10947*x10950))+(((-1.0)*r12*x10956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10957=((-1.0)*r21);
CheckValue<IkReal> x10960 = IKatan2WithCheck(IkReal(x10957),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10960.valid){
continue;
}
IkReal x10958=((1.0)*(x10960.value));
IkReal x10959=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10958)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10958)));
IkReal gconst4=(x10957*x10959);
IkReal gconst5=((1.0)*r20*x10959);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10961=((-1.0)*r21);
CheckValue<IkReal> x10964 = IKatan2WithCheck(IkReal(x10961),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10964.valid){
continue;
}
IkReal x10962=((1.0)*(x10964.value));
IkReal x10963=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10962)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10962)));
IkReal gconst4=(x10961*x10963);
IkReal gconst5=((1.0)*r20*x10963);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10965=((-1.0)*r21);
CheckValue<IkReal> x10968 = IKatan2WithCheck(IkReal(x10965),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10968.valid){
continue;
}
IkReal x10966=((1.0)*(x10968.value));
IkReal x10967=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10966)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10966)));
IkReal gconst4=(x10965*x10967);
IkReal gconst5=((1.0)*r20*x10967);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10969=(gconst4*r01);
IkReal x10970=(gconst5*r00);
CheckValue<IkReal> x10971 = IKatan2WithCheck(IkReal(((((-1.0)*x10970))+x10969)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10971.valid){
continue;
}
CheckValue<IkReal> x10972=IKPowWithIntegerCheck(IKsign(((x10969*x10969)+(x10970*x10970)+(r02*r02)+(((-2.0)*x10969*x10970)))),-1);
if(!x10972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10971.value)+(((1.5707963267949)*(x10972.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10973=IKcos(j4);
IkReal x10974=IKsin(j4);
IkReal x10975=(gconst4*r11);
IkReal x10976=(gconst5*r10);
IkReal x10977=((1.0)*cj1);
IkReal x10978=(gconst5*r00);
IkReal x10979=(gconst5*r20);
IkReal x10980=((1.0)*x10973);
IkReal x10981=(gconst4*x10973);
IkReal x10982=((1.0)*x10974);
IkReal x10983=(gconst4*x10974);
evalcond[0]=(((r02*x10974))+((r01*x10981))+(((-1.0)*x10978*x10980)));
evalcond[1]=(((r21*x10983))+(((-1.0)*r22*x10980))+(((-1.0)*x10979*x10982)));
evalcond[2]=((((-1.0)*r12*x10980))+((x10974*x10975))+(((-1.0)*x10976*x10982)));
evalcond[3]=((-1.0)+((r01*x10983))+(((-1.0)*r02*x10980))+(((-1.0)*x10978*x10982)));
evalcond[4]=((((-1.0)*cj2*x10977))+((r21*x10981))+((r22*x10974))+((sj1*sj2))+(((-1.0)*x10979*x10980)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x10973*x10975))+(((-1.0)*sj2*x10977))+((r12*x10974))+(((-1.0)*x10976*x10980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10984=((1.0)*gconst5);
CheckValue<IkReal> x10985 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10984))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10985.valid){
continue;
}
CheckValue<IkReal> x10986=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10984))+(((-1.0)*gconst4*r10)))),-1);
if(!x10986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10985.value)+(((1.5707963267949)*(x10986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10987=IKcos(j4);
IkReal x10988=IKsin(j4);
IkReal x10989=(gconst4*r11);
IkReal x10990=(gconst5*r10);
IkReal x10991=((1.0)*cj1);
IkReal x10992=(gconst5*r00);
IkReal x10993=(gconst5*r20);
IkReal x10994=((1.0)*x10987);
IkReal x10995=(gconst4*x10987);
IkReal x10996=((1.0)*x10988);
IkReal x10997=(gconst4*x10988);
evalcond[0]=((((-1.0)*x10992*x10994))+((r01*x10995))+((r02*x10988)));
evalcond[1]=(((r21*x10997))+(((-1.0)*x10993*x10996))+(((-1.0)*r22*x10994)));
evalcond[2]=((((-1.0)*x10990*x10996))+(((-1.0)*r12*x10994))+((x10988*x10989)));
evalcond[3]=((-1.0)+(((-1.0)*x10992*x10996))+((r01*x10997))+(((-1.0)*r02*x10994)));
evalcond[4]=(((r22*x10988))+((r21*x10995))+(((-1.0)*x10993*x10994))+(((-1.0)*cj2*x10991))+((sj1*sj2)));
evalcond[5]=(((r12*x10988))+((x10987*x10989))+(((-1.0)*sj2*x10991))+(((-1.0)*cj2*sj1))+(((-1.0)*x10990*x10994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10998 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10998.valid){
continue;
}
CheckValue<IkReal> x10999=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10998.value)+(((1.5707963267949)*(x10999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11000=IKcos(j4);
IkReal x11001=IKsin(j4);
IkReal x11002=(gconst4*r11);
IkReal x11003=(gconst5*r10);
IkReal x11004=((1.0)*cj1);
IkReal x11005=(gconst5*r00);
IkReal x11006=(gconst5*r20);
IkReal x11007=((1.0)*x11000);
IkReal x11008=(gconst4*x11000);
IkReal x11009=((1.0)*x11001);
IkReal x11010=(gconst4*x11001);
evalcond[0]=(((r02*x11001))+(((-1.0)*x11005*x11007))+((r01*x11008)));
evalcond[1]=((((-1.0)*r22*x11007))+((r21*x11010))+(((-1.0)*x11006*x11009)));
evalcond[2]=(((x11001*x11002))+(((-1.0)*x11003*x11009))+(((-1.0)*r12*x11007)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11007))+(((-1.0)*x11005*x11009))+((r01*x11010)));
evalcond[4]=(((sj1*sj2))+((r21*x11008))+((r22*x11001))+(((-1.0)*cj2*x11004))+(((-1.0)*x11006*x11007)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x11000*x11002))+((r12*x11001))+(((-1.0)*sj2*x11004))+(((-1.0)*x11003*x11007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11011=((-1.0)*r21);
CheckValue<IkReal> x11014 = IKatan2WithCheck(IkReal(x11011),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11014.valid){
continue;
}
IkReal x11012=((1.0)*(x11014.value));
IkReal x11013=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11012)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11012)));
IkReal gconst4=(x11011*x11013);
IkReal gconst5=((1.0)*r20*x11013);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11015=((-1.0)*r21);
CheckValue<IkReal> x11018 = IKatan2WithCheck(IkReal(x11015),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11018.valid){
continue;
}
IkReal x11016=((1.0)*(x11018.value));
IkReal x11017=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11016)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11016)));
IkReal gconst4=(x11015*x11017);
IkReal gconst5=((1.0)*r20*x11017);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11019=((-1.0)*r21);
CheckValue<IkReal> x11022 = IKatan2WithCheck(IkReal(x11019),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11022.valid){
continue;
}
IkReal x11020=((1.0)*(x11022.value));
IkReal x11021=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11020)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11020)));
IkReal gconst4=(x11019*x11021);
IkReal gconst5=((1.0)*r20*x11021);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11023=(gconst4*r01);
IkReal x11024=(gconst5*r00);
CheckValue<IkReal> x11025=IKPowWithIntegerCheck(IKsign(((x11023*x11023)+(x11024*x11024)+(r02*r02)+(((-2.0)*x11023*x11024)))),-1);
if(!x11025.valid){
continue;
}
CheckValue<IkReal> x11026 = IKatan2WithCheck(IkReal(((((-1.0)*x11024))+x11023)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11025.value)))+(x11026.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11027=IKcos(j4);
IkReal x11028=IKsin(j4);
IkReal x11029=(gconst4*r11);
IkReal x11030=(gconst5*r10);
IkReal x11031=(gconst5*r00);
IkReal x11032=(gconst5*r20);
IkReal x11033=((1.0)*x11027);
IkReal x11034=(gconst4*x11027);
IkReal x11035=((1.0)*x11028);
IkReal x11036=(gconst4*x11028);
evalcond[0]=(((r01*x11034))+(((-1.0)*x11031*x11033))+((r02*x11028)));
evalcond[1]=(((r21*x11036))+(((-1.0)*r22*x11033))+(((-1.0)*x11032*x11035)));
evalcond[2]=((((-1.0)*x11030*x11035))+(((-1.0)*r12*x11033))+((x11028*x11029)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11033))+((r01*x11036))+(((-1.0)*x11031*x11035)));
evalcond[4]=(((cj2*sj1))+((r21*x11034))+((cj1*sj2))+((r22*x11028))+(((-1.0)*x11032*x11033)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11027*x11029))+((r12*x11028))+(((-1.0)*x11030*x11033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11037=((1.0)*gconst5);
CheckValue<IkReal> x11038=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11037))+(((-1.0)*gconst4*r10)))),-1);
if(!x11038.valid){
continue;
}
CheckValue<IkReal> x11039 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11037))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11038.value)))+(x11039.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11040=IKcos(j4);
IkReal x11041=IKsin(j4);
IkReal x11042=(gconst4*r11);
IkReal x11043=(gconst5*r10);
IkReal x11044=(gconst5*r00);
IkReal x11045=(gconst5*r20);
IkReal x11046=((1.0)*x11040);
IkReal x11047=(gconst4*x11040);
IkReal x11048=((1.0)*x11041);
IkReal x11049=(gconst4*x11041);
evalcond[0]=(((r01*x11047))+(((-1.0)*x11044*x11046))+((r02*x11041)));
evalcond[1]=((((-1.0)*x11045*x11048))+(((-1.0)*r22*x11046))+((r21*x11049)));
evalcond[2]=(((x11041*x11042))+(((-1.0)*r12*x11046))+(((-1.0)*x11043*x11048)));
evalcond[3]=((-1.0)+((r01*x11049))+(((-1.0)*r02*x11046))+(((-1.0)*x11044*x11048)));
evalcond[4]=((((-1.0)*x11045*x11046))+((cj2*sj1))+((cj1*sj2))+((r22*x11041))+((r21*x11047)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11040*x11042))+(((-1.0)*x11043*x11046))+((r12*x11041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11050 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11050.valid){
continue;
}
CheckValue<IkReal> x11051=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11050.value)+(((1.5707963267949)*(x11051.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11052=IKcos(j4);
IkReal x11053=IKsin(j4);
IkReal x11054=(gconst4*r11);
IkReal x11055=(gconst5*r10);
IkReal x11056=(gconst5*r00);
IkReal x11057=(gconst5*r20);
IkReal x11058=((1.0)*x11052);
IkReal x11059=(gconst4*x11052);
IkReal x11060=((1.0)*x11053);
IkReal x11061=(gconst4*x11053);
evalcond[0]=(((r01*x11059))+(((-1.0)*x11056*x11058))+((r02*x11053)));
evalcond[1]=((((-1.0)*r22*x11058))+((r21*x11061))+(((-1.0)*x11057*x11060)));
evalcond[2]=((((-1.0)*r12*x11058))+(((-1.0)*x11055*x11060))+((x11053*x11054)));
evalcond[3]=((-1.0)+((r01*x11061))+(((-1.0)*x11056*x11060))+(((-1.0)*r02*x11058)));
evalcond[4]=(((cj2*sj1))+((r22*x11053))+((cj1*sj2))+((r21*x11059))+(((-1.0)*x11057*x11058)));
evalcond[5]=(((r12*x11053))+((x11052*x11054))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11055*x11058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11062=((-1.0)*r21);
CheckValue<IkReal> x11065 = IKatan2WithCheck(IkReal(x11062),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11065.valid){
continue;
}
IkReal x11063=((1.0)*(x11065.value));
IkReal x11064=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11063)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11063)));
IkReal gconst4=(x11062*x11064);
IkReal gconst5=((1.0)*r20*x11064);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11066=((-1.0)*r21);
CheckValue<IkReal> x11069 = IKatan2WithCheck(IkReal(x11066),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11069.valid){
continue;
}
IkReal x11067=((1.0)*(x11069.value));
IkReal x11068=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11067)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11067)));
IkReal gconst4=(x11066*x11068);
IkReal gconst5=((1.0)*r20*x11068);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11070=((-1.0)*r21);
CheckValue<IkReal> x11073 = IKatan2WithCheck(IkReal(x11070),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11073.valid){
continue;
}
IkReal x11071=((1.0)*(x11073.value));
IkReal x11072=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11071)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11071)));
IkReal gconst4=(x11070*x11072);
IkReal gconst5=((1.0)*r20*x11072);
IkReal x11074=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11078=IKPowWithIntegerCheck(x11074,-1);
if(!x11078.valid){
continue;
}
IkReal x11075=x11078.value;
IkReal x11076=((1.0)*x11075);
IkReal x11077=((((-1.0)*(r02*r02)))+(((-1.0)*x11076*(r00*r00)*(r20*r20)))+(((-1.0)*x11076*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x11075)));
j4eval[0]=x11077;
j4eval[1]=r02;
j4eval[2]=x11074;
j4eval[3]=IKsign(x11077);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11079=(gconst5*r00);
IkReal x11080=(gconst4*r01);
CheckValue<IkReal> x11081 = IKatan2WithCheck(IkReal(((((-1.0)*x11080))+x11079)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11081.valid){
continue;
}
CheckValue<IkReal> x11082=IKPowWithIntegerCheck(IKsign(((((2.0)*x11079*x11080))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11079*x11079)))+(((-1.0)*(x11080*x11080))))),-1);
if(!x11082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11081.value)+(((1.5707963267949)*(x11082.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11083=IKsin(j4);
IkReal x11084=IKcos(j4);
IkReal x11085=(gconst4*r11);
IkReal x11086=(gconst5*r10);
IkReal x11087=(gconst4*r01);
IkReal x11088=(gconst5*r00);
IkReal x11089=(gconst4*r21);
IkReal x11090=(gconst5*r20);
IkReal x11091=((1.0)*x11084);
IkReal x11092=((1.0)*x11083);
evalcond[0]=((((-1.0)*r22*x11091))+(((-1.0)*x11090*x11092))+((x11083*x11089)));
evalcond[1]=((((-1.0)*x11086*x11092))+(((-1.0)*r12*x11091))+((x11083*x11085)));
evalcond[2]=((((-1.0)*r02*x11092))+((x11084*x11088))+(((-1.0)*x11087*x11091)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11091))+((x11083*x11087))+(((-1.0)*x11088*x11092)));
evalcond[4]=(((cj2*sj1))+((x11084*x11090))+(((-1.0)*r22*x11092))+((cj1*sj2))+(((-1.0)*x11089*x11091)));
evalcond[5]=((((-1.0)*r12*x11092))+(((-1.0)*x11085*x11091))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11084*x11086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11093=((1.0)*gconst5);
CheckValue<IkReal> x11094 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11093))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11094.valid){
continue;
}
CheckValue<IkReal> x11095=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11093))+(((-1.0)*gconst4*r10)))),-1);
if(!x11095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11094.value)+(((1.5707963267949)*(x11095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11096=IKsin(j4);
IkReal x11097=IKcos(j4);
IkReal x11098=(gconst4*r11);
IkReal x11099=(gconst5*r10);
IkReal x11100=(gconst4*r01);
IkReal x11101=(gconst5*r00);
IkReal x11102=(gconst4*r21);
IkReal x11103=(gconst5*r20);
IkReal x11104=((1.0)*x11097);
IkReal x11105=((1.0)*x11096);
evalcond[0]=((((-1.0)*x11103*x11105))+(((-1.0)*r22*x11104))+((x11096*x11102)));
evalcond[1]=(((x11096*x11098))+(((-1.0)*r12*x11104))+(((-1.0)*x11099*x11105)));
evalcond[2]=((((-1.0)*x11100*x11104))+(((-1.0)*r02*x11105))+((x11097*x11101)));
evalcond[3]=((-1.0)+(((-1.0)*x11101*x11105))+(((-1.0)*r02*x11104))+((x11096*x11100)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11102*x11104))+(((-1.0)*r22*x11105))+((x11097*x11103)));
evalcond[5]=(((x11097*x11099))+(((-1.0)*x11098*x11104))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11106 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11106.valid){
continue;
}
CheckValue<IkReal> x11107=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11106.value)+(((1.5707963267949)*(x11107.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11108=IKsin(j4);
IkReal x11109=IKcos(j4);
IkReal x11110=(gconst4*r11);
IkReal x11111=(gconst5*r10);
IkReal x11112=(gconst4*r01);
IkReal x11113=(gconst5*r00);
IkReal x11114=(gconst4*r21);
IkReal x11115=(gconst5*r20);
IkReal x11116=((1.0)*x11109);
IkReal x11117=((1.0)*x11108);
evalcond[0]=((((-1.0)*x11115*x11117))+(((-1.0)*r22*x11116))+((x11108*x11114)));
evalcond[1]=((((-1.0)*x11111*x11117))+(((-1.0)*r12*x11116))+((x11108*x11110)));
evalcond[2]=((((-1.0)*r02*x11117))+(((-1.0)*x11112*x11116))+((x11109*x11113)));
evalcond[3]=((-1.0)+(((-1.0)*x11113*x11117))+(((-1.0)*r02*x11116))+((x11108*x11112)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11114*x11116))+(((-1.0)*r22*x11117))+((x11109*x11115)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11110*x11116))+(((-1.0)*r12*x11117))+((x11109*x11111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11118=gconst4*gconst4;
IkReal x11119=gconst5*gconst5;
IkReal x11120=(r01*r20);
IkReal x11121=(gconst4*sj3);
IkReal x11122=(r01*r21);
IkReal x11123=((1.0)*cj3);
IkReal x11124=(r00*r21);
IkReal x11125=(r00*r20);
IkReal x11126=(cj3*gconst4*gconst5);
IkReal x11127=((1.0)*x11119);
CheckValue<IkReal> x11128=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11118*x11122*x11123))+((x11124*x11126))+(((-1.0)*x11119*x11123*x11125))+((x11120*x11126))+(((-1.0)*r02*r22*x11123)))),-1);
if(!x11128.valid){
continue;
}
CheckValue<IkReal> x11129 = IKatan2WithCheck(IkReal((((r00*r22*x11121))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x11118*x11124))+(((-1.0)*sj3*x11120*x11127))+(((-1.0)*gconst5*x11121*x11125))+((gconst5*x11121*x11122)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11128.value)))+(x11129.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11130=IKsin(j4);
IkReal x11131=IKcos(j4);
IkReal x11132=(sj1*sj2);
IkReal x11133=(gconst5*sj3);
IkReal x11134=(gconst4*r11);
IkReal x11135=(gconst5*r10);
IkReal x11136=((1.0)*cj1);
IkReal x11137=(gconst4*r01);
IkReal x11138=(cj2*sj1);
IkReal x11139=(gconst5*r00);
IkReal x11140=(gconst4*sj3);
IkReal x11141=(cj3*gconst5);
IkReal x11142=(cj3*gconst4);
IkReal x11143=(gconst4*r21);
IkReal x11144=(cj2*x11136);
IkReal x11145=((1.0)*x11131);
IkReal x11146=((1.0)*x11130);
IkReal x11147=(cj3*x11130);
IkReal x11148=(cj3*x11131);
evalcond[0]=((((-1.0)*r22*x11145))+((x11130*x11143))+(((-1.0)*gconst5*r20*x11146)));
evalcond[1]=(((x11130*x11134))+(((-1.0)*x11135*x11146))+(((-1.0)*r12*x11145)));
evalcond[2]=((-1.0)+((x11130*x11137))+(((-1.0)*x11139*x11146))+(((-1.0)*r02*x11145)));
evalcond[3]=(((r00*x11140))+((r02*x11147))+((x11137*x11148))+((r01*x11133))+(((-1.0)*cj3*x11139*x11145)));
evalcond[4]=(((r01*x11141))+(((-1.0)*sj3*x11137*x11145))+((r00*x11142))+((r00*x11131*x11133))+(((-1.0)*r02*sj3*x11146)));
evalcond[5]=((((-1.0)*r20*x11141*x11145))+((r22*x11147))+((cj1*sj2))+((r21*x11131*x11142))+((r21*x11133))+x11138+((r20*x11140)));
evalcond[6]=(((x11134*x11148))+x11132+((r12*x11147))+(((-1.0)*cj3*x11135*x11145))+((r10*x11140))+((r11*x11133))+(((-1.0)*x11144)));
evalcond[7]=(((r21*x11141))+x11132+((r20*x11131*x11133))+((r20*x11142))+(((-1.0)*r21*x11140*x11145))+(((-1.0)*r22*sj3*x11146))+(((-1.0)*x11144)));
evalcond[8]=((((-1.0)*sj3*x11134*x11145))+(((-1.0)*x11138))+((r11*x11141))+(((-1.0)*r12*sj3*x11146))+((r10*x11142))+(((-1.0)*sj2*x11136))+((r10*x11131*x11133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11149=((1.0)*gconst5);
CheckValue<IkReal> x11150=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11149))+(((-1.0)*gconst4*r10)))),-1);
if(!x11150.valid){
continue;
}
CheckValue<IkReal> x11151 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11149))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11150.value)))+(x11151.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11152=IKsin(j4);
IkReal x11153=IKcos(j4);
IkReal x11154=(sj1*sj2);
IkReal x11155=(gconst5*sj3);
IkReal x11156=(gconst4*r11);
IkReal x11157=(gconst5*r10);
IkReal x11158=((1.0)*cj1);
IkReal x11159=(gconst4*r01);
IkReal x11160=(cj2*sj1);
IkReal x11161=(gconst5*r00);
IkReal x11162=(gconst4*sj3);
IkReal x11163=(cj3*gconst5);
IkReal x11164=(cj3*gconst4);
IkReal x11165=(gconst4*r21);
IkReal x11166=(cj2*x11158);
IkReal x11167=((1.0)*x11153);
IkReal x11168=((1.0)*x11152);
IkReal x11169=(cj3*x11152);
IkReal x11170=(cj3*x11153);
evalcond[0]=((((-1.0)*r22*x11167))+((x11152*x11165))+(((-1.0)*gconst5*r20*x11168)));
evalcond[1]=((((-1.0)*x11157*x11168))+((x11152*x11156))+(((-1.0)*r12*x11167)));
evalcond[2]=((-1.0)+(((-1.0)*x11161*x11168))+((x11152*x11159))+(((-1.0)*r02*x11167)));
evalcond[3]=(((r01*x11155))+((r00*x11162))+((x11159*x11170))+((r02*x11169))+(((-1.0)*cj3*x11161*x11167)));
evalcond[4]=(((r01*x11163))+((r00*x11164))+(((-1.0)*r02*sj3*x11168))+(((-1.0)*sj3*x11159*x11167))+((r00*x11153*x11155)));
evalcond[5]=(((r20*x11162))+((r21*x11155))+(((-1.0)*r20*x11163*x11167))+((cj1*sj2))+x11160+((r21*x11153*x11164))+((r22*x11169)));
evalcond[6]=(((r12*x11169))+(((-1.0)*x11166))+((r11*x11155))+x11154+(((-1.0)*cj3*x11157*x11167))+((x11156*x11170))+((r10*x11162)));
evalcond[7]=(((r20*x11153*x11155))+((r20*x11164))+(((-1.0)*r21*x11162*x11167))+(((-1.0)*x11166))+x11154+((r21*x11163))+(((-1.0)*r22*sj3*x11168)));
evalcond[8]=(((r10*x11153*x11155))+((r11*x11163))+(((-1.0)*sj3*x11156*x11167))+(((-1.0)*x11160))+(((-1.0)*r12*sj3*x11168))+(((-1.0)*sj2*x11158))+((r10*x11164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11171 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11171.valid){
continue;
}
CheckValue<IkReal> x11172=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11171.value)+(((1.5707963267949)*(x11172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11173=IKsin(j4);
IkReal x11174=IKcos(j4);
IkReal x11175=(sj1*sj2);
IkReal x11176=(gconst5*sj3);
IkReal x11177=(gconst4*r11);
IkReal x11178=(gconst5*r10);
IkReal x11179=((1.0)*cj1);
IkReal x11180=(gconst4*r01);
IkReal x11181=(cj2*sj1);
IkReal x11182=(gconst5*r00);
IkReal x11183=(gconst4*sj3);
IkReal x11184=(cj3*gconst5);
IkReal x11185=(cj3*gconst4);
IkReal x11186=(gconst4*r21);
IkReal x11187=(cj2*x11179);
IkReal x11188=((1.0)*x11174);
IkReal x11189=((1.0)*x11173);
IkReal x11190=(cj3*x11173);
IkReal x11191=(cj3*x11174);
evalcond[0]=((((-1.0)*r22*x11188))+(((-1.0)*gconst5*r20*x11189))+((x11173*x11186)));
evalcond[1]=(((x11173*x11177))+(((-1.0)*r12*x11188))+(((-1.0)*x11178*x11189)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11188))+(((-1.0)*x11182*x11189))+((x11173*x11180)));
evalcond[3]=(((r01*x11176))+((r00*x11183))+((x11180*x11191))+((r02*x11190))+(((-1.0)*cj3*x11182*x11188)));
evalcond[4]=((((-1.0)*sj3*x11180*x11188))+((r01*x11184))+((r00*x11185))+((r00*x11174*x11176))+(((-1.0)*r02*sj3*x11189)));
evalcond[5]=(((r20*x11183))+((r21*x11174*x11185))+((cj1*sj2))+(((-1.0)*r20*x11184*x11188))+((r22*x11190))+x11181+((r21*x11176)));
evalcond[6]=((((-1.0)*x11187))+((r11*x11176))+((r12*x11190))+((x11177*x11191))+x11175+(((-1.0)*cj3*x11178*x11188))+((r10*x11183)));
evalcond[7]=(((r20*x11185))+(((-1.0)*r22*sj3*x11189))+(((-1.0)*x11187))+(((-1.0)*r21*x11183*x11188))+((r20*x11174*x11176))+x11175+((r21*x11184)));
evalcond[8]=(((r11*x11184))+(((-1.0)*sj2*x11179))+(((-1.0)*sj3*x11177*x11188))+(((-1.0)*x11181))+((r10*x11174*x11176))+(((-1.0)*r12*sj3*x11189))+((r10*x11185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11192=((-1.0)*r21);
CheckValue<IkReal> x11195 = IKatan2WithCheck(IkReal(x11192),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11195.valid){
continue;
}
IkReal x11193=((1.0)*(x11195.value));
IkReal x11194=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11193)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11193)));
IkReal gconst4=(x11192*x11194);
IkReal gconst5=((1.0)*r20*x11194);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11196=((-1.0)*r21);
CheckValue<IkReal> x11199 = IKatan2WithCheck(IkReal(x11196),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11199.valid){
continue;
}
IkReal x11197=((1.0)*(x11199.value));
IkReal x11198=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11197)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11197)));
IkReal gconst4=(x11196*x11198);
IkReal gconst5=((1.0)*r20*x11198);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11200=((-1.0)*r21);
CheckValue<IkReal> x11203 = IKatan2WithCheck(IkReal(x11200),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11203.valid){
continue;
}
IkReal x11201=((1.0)*(x11203.value));
IkReal x11202=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11201)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11201)));
IkReal gconst4=(x11200*x11202);
IkReal gconst5=((1.0)*r20*x11202);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11204=((-1.0)*r21);
CheckValue<IkReal> x11207 = IKatan2WithCheck(IkReal(x11204),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11207.valid){
continue;
}
IkReal x11205=((1.0)*(x11207.value));
IkReal x11206=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11205)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11205)));
IkReal gconst4=(x11204*x11206);
IkReal gconst5=((1.0)*r20*x11206);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11208=((-1.0)*r21);
CheckValue<IkReal> x11211 = IKatan2WithCheck(IkReal(x11208),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11211.valid){
continue;
}
IkReal x11209=((1.0)*(x11211.value));
IkReal x11210=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11209)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11209)));
IkReal gconst4=(x11208*x11210);
IkReal gconst5=((1.0)*r20*x11210);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11212=((-1.0)*r21);
CheckValue<IkReal> x11215 = IKatan2WithCheck(IkReal(x11212),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11215.valid){
continue;
}
IkReal x11213=((1.0)*(x11215.value));
IkReal x11214=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11213)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11213)));
IkReal gconst4=(x11212*x11214);
IkReal gconst5=((1.0)*r20*x11214);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11216=(gconst5*r00);
IkReal x11217=(gconst4*r01);
CheckValue<IkReal> x11218=IKPowWithIntegerCheck(IKsign(((x11217*x11217)+(((-2.0)*x11216*x11217))+(x11216*x11216)+(r02*r02))),-1);
if(!x11218.valid){
continue;
}
CheckValue<IkReal> x11219 = IKatan2WithCheck(IkReal((x11216+(((-1.0)*x11217)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11218.value)))+(x11219.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11220=IKsin(j4);
IkReal x11221=IKcos(j4);
IkReal x11222=(gconst4*r11);
IkReal x11223=(gconst5*r10);
IkReal x11224=(gconst4*r01);
IkReal x11225=(gconst5*r00);
IkReal x11226=(gconst4*r21);
IkReal x11227=(gconst5*r20);
IkReal x11228=((1.0)*x11221);
IkReal x11229=((1.0)*x11220);
evalcond[0]=(((x11220*x11226))+(((-1.0)*x11227*x11229))+(((-1.0)*r22*x11228)));
evalcond[1]=(((x11220*x11222))+(((-1.0)*x11223*x11229))+(((-1.0)*r12*x11228)));
evalcond[2]=(((x11221*x11225))+(((-1.0)*x11224*x11228))+(((-1.0)*r02*x11229)));
evalcond[3]=((1.0)+(((-1.0)*x11225*x11229))+((x11220*x11224))+(((-1.0)*r02*x11228)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11221*x11223))+(((-1.0)*x11222*x11228))+(((-1.0)*r12*x11229)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11221*x11227))+(((-1.0)*x11226*x11228))+(((-1.0)*r22*x11229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11230=((1.0)*gconst5);
CheckValue<IkReal> x11231 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11230)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11231.valid){
continue;
}
CheckValue<IkReal> x11232=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11230))+(((-1.0)*gconst4*r20)))),-1);
if(!x11232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11231.value)+(((1.5707963267949)*(x11232.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11233=IKsin(j4);
IkReal x11234=IKcos(j4);
IkReal x11235=(gconst4*r11);
IkReal x11236=(gconst5*r10);
IkReal x11237=(gconst4*r01);
IkReal x11238=(gconst5*r00);
IkReal x11239=(gconst4*r21);
IkReal x11240=(gconst5*r20);
IkReal x11241=((1.0)*x11234);
IkReal x11242=((1.0)*x11233);
evalcond[0]=(((x11233*x11239))+(((-1.0)*r22*x11241))+(((-1.0)*x11240*x11242)));
evalcond[1]=((((-1.0)*x11236*x11242))+((x11233*x11235))+(((-1.0)*r12*x11241)));
evalcond[2]=((((-1.0)*r02*x11242))+((x11234*x11238))+(((-1.0)*x11237*x11241)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11241))+(((-1.0)*x11238*x11242))+((x11233*x11237)));
evalcond[4]=(((cj2*sj1))+((x11234*x11236))+((cj1*sj2))+(((-1.0)*x11235*x11241))+(((-1.0)*r12*x11242)));
evalcond[5]=(((x11234*x11240))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11239*x11241))+(((-1.0)*r22*x11242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11243=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11243.valid){
continue;
}
CheckValue<IkReal> x11244 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11243.value)))+(x11244.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11245=IKsin(j4);
IkReal x11246=IKcos(j4);
IkReal x11247=(gconst4*r11);
IkReal x11248=(gconst5*r10);
IkReal x11249=(gconst4*r01);
IkReal x11250=(gconst5*r00);
IkReal x11251=(gconst4*r21);
IkReal x11252=(gconst5*r20);
IkReal x11253=((1.0)*x11246);
IkReal x11254=((1.0)*x11245);
evalcond[0]=((((-1.0)*r22*x11253))+(((-1.0)*x11252*x11254))+((x11245*x11251)));
evalcond[1]=((((-1.0)*x11248*x11254))+((x11245*x11247))+(((-1.0)*r12*x11253)));
evalcond[2]=((((-1.0)*r02*x11254))+(((-1.0)*x11249*x11253))+((x11246*x11250)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11253))+(((-1.0)*x11250*x11254))+((x11245*x11249)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11247*x11253))+(((-1.0)*r12*x11254))+((x11246*x11248)));
evalcond[5]=((((-1.0)*x11251*x11253))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11254))+((x11246*x11252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11255=((-1.0)*r21);
CheckValue<IkReal> x11258 = IKatan2WithCheck(IkReal(x11255),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11258.valid){
continue;
}
IkReal x11256=((1.0)*(x11258.value));
IkReal x11257=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11256)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11256)));
IkReal gconst4=(x11255*x11257);
IkReal gconst5=((1.0)*r20*x11257);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11259=((-1.0)*r21);
CheckValue<IkReal> x11262 = IKatan2WithCheck(IkReal(x11259),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11262.valid){
continue;
}
IkReal x11260=((1.0)*(x11262.value));
IkReal x11261=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11260)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11260)));
IkReal gconst4=(x11259*x11261);
IkReal gconst5=((1.0)*r20*x11261);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11263=((-1.0)*r21);
CheckValue<IkReal> x11266 = IKatan2WithCheck(IkReal(x11263),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11266.valid){
continue;
}
IkReal x11264=((1.0)*(x11266.value));
IkReal x11265=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11264)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11264)));
IkReal gconst4=(x11263*x11265);
IkReal gconst5=((1.0)*r20*x11265);
IkReal x11267=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11271=IKPowWithIntegerCheck(x11267,-1);
if(!x11271.valid){
continue;
}
IkReal x11268=x11271.value;
IkReal x11269=((1.0)*x11268);
IkReal x11270=((((-1.0)*x11269*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11269*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11268)));
j4eval[0]=x11270;
j4eval[1]=IKsign(x11270);
j4eval[2]=r02;
j4eval[3]=x11267;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11272=(gconst4*r01);
IkReal x11273=(gconst5*r00);
CheckValue<IkReal> x11274=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11273*x11273)))+(((-1.0)*(r02*r02)))+(((2.0)*x11272*x11273))+(((-1.0)*(x11272*x11272))))),-1);
if(!x11274.valid){
continue;
}
CheckValue<IkReal> x11275 = IKatan2WithCheck(IkReal((x11272+(((-1.0)*x11273)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11274.value)))+(x11275.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11276=IKcos(j4);
IkReal x11277=IKsin(j4);
IkReal x11278=(gconst4*r11);
IkReal x11279=(gconst5*r10);
IkReal x11280=(gconst5*r00);
IkReal x11281=(gconst5*r20);
IkReal x11282=((1.0)*x11276);
IkReal x11283=(gconst4*x11276);
IkReal x11284=((1.0)*x11277);
IkReal x11285=(gconst4*x11277);
evalcond[0]=(((r02*x11277))+((r01*x11283))+(((-1.0)*x11280*x11282)));
evalcond[1]=((((-1.0)*r22*x11282))+((r21*x11285))+(((-1.0)*x11281*x11284)));
evalcond[2]=((((-1.0)*r12*x11282))+(((-1.0)*x11279*x11284))+((x11277*x11278)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11282))+((r01*x11285))+(((-1.0)*x11280*x11284)));
evalcond[4]=(((cj2*sj1))+((x11276*x11278))+((r12*x11277))+((cj1*sj2))+(((-1.0)*x11279*x11282)));
evalcond[5]=(((r22*x11277))+((r21*x11283))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11281*x11282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11286=((1.0)*gconst5);
CheckValue<IkReal> x11287 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11286))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11287.valid){
continue;
}
CheckValue<IkReal> x11288=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11286))+(((-1.0)*gconst4*r20)))),-1);
if(!x11288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11287.value)+(((1.5707963267949)*(x11288.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11289=IKcos(j4);
IkReal x11290=IKsin(j4);
IkReal x11291=(gconst4*r11);
IkReal x11292=(gconst5*r10);
IkReal x11293=(gconst5*r00);
IkReal x11294=(gconst5*r20);
IkReal x11295=((1.0)*x11289);
IkReal x11296=(gconst4*x11289);
IkReal x11297=((1.0)*x11290);
IkReal x11298=(gconst4*x11290);
evalcond[0]=(((r01*x11296))+((r02*x11290))+(((-1.0)*x11293*x11295)));
evalcond[1]=((((-1.0)*r22*x11295))+((r21*x11298))+(((-1.0)*x11294*x11297)));
evalcond[2]=(((x11290*x11291))+(((-1.0)*x11292*x11297))+(((-1.0)*r12*x11295)));
evalcond[3]=((1.0)+((r01*x11298))+(((-1.0)*r02*x11295))+(((-1.0)*x11293*x11297)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11289*x11291))+(((-1.0)*x11292*x11295))+((r12*x11290)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11296))+(((-1.0)*x11294*x11295))+((r22*x11290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11299=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11299.valid){
continue;
}
CheckValue<IkReal> x11300 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11299.value)))+(x11300.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11301=IKcos(j4);
IkReal x11302=IKsin(j4);
IkReal x11303=(gconst4*r11);
IkReal x11304=(gconst5*r10);
IkReal x11305=(gconst5*r00);
IkReal x11306=(gconst5*r20);
IkReal x11307=((1.0)*x11301);
IkReal x11308=(gconst4*x11301);
IkReal x11309=((1.0)*x11302);
IkReal x11310=(gconst4*x11302);
evalcond[0]=(((r02*x11302))+(((-1.0)*x11305*x11307))+((r01*x11308)));
evalcond[1]=(((r21*x11310))+(((-1.0)*x11306*x11309))+(((-1.0)*r22*x11307)));
evalcond[2]=((((-1.0)*x11304*x11309))+((x11302*x11303))+(((-1.0)*r12*x11307)));
evalcond[3]=((1.0)+(((-1.0)*x11305*x11309))+(((-1.0)*r02*x11307))+((r01*x11310)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11304*x11307))+((cj1*sj2))+((r12*x11302))+((x11301*x11303)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11306*x11307))+((r21*x11308))+((r22*x11302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11311=((-1.0)*r21);
CheckValue<IkReal> x11314 = IKatan2WithCheck(IkReal(x11311),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11314.valid){
continue;
}
IkReal x11312=((1.0)*(x11314.value));
IkReal x11313=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11312)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11312)));
IkReal gconst4=(x11311*x11313);
IkReal gconst5=((1.0)*r20*x11313);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11315=((-1.0)*r21);
CheckValue<IkReal> x11318 = IKatan2WithCheck(IkReal(x11315),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11318.valid){
continue;
}
IkReal x11316=((1.0)*(x11318.value));
IkReal x11317=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11316)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11316)));
IkReal gconst4=(x11315*x11317);
IkReal gconst5=((1.0)*r20*x11317);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11319=((-1.0)*r21);
CheckValue<IkReal> x11322 = IKatan2WithCheck(IkReal(x11319),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11322.valid){
continue;
}
IkReal x11320=((1.0)*(x11322.value));
IkReal x11321=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11320)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11320)));
IkReal gconst4=(x11319*x11321);
IkReal gconst5=((1.0)*r20*x11321);
IkReal x11323=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11327=IKPowWithIntegerCheck(x11323,-1);
if(!x11327.valid){
continue;
}
IkReal x11324=x11327.value;
IkReal x11325=((1.0)*x11324);
IkReal x11326=((((-2.0)*r00*r01*r20*r21*x11324))+(((-1.0)*x11325*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11325*(r00*r00)*(r20*r20))));
j4eval[0]=x11326;
j4eval[1]=IKsign(x11326);
j4eval[2]=r02;
j4eval[3]=x11323;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11328=(gconst4*r01);
IkReal x11329=(gconst5*r00);
CheckValue<IkReal> x11330 = IKatan2WithCheck(IkReal((x11328+(((-1.0)*x11329)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11330.valid){
continue;
}
CheckValue<IkReal> x11331=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11329*x11329)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11328*x11328)))+(((2.0)*x11328*x11329)))),-1);
if(!x11331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11330.value)+(((1.5707963267949)*(x11331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11332=IKcos(j4);
IkReal x11333=IKsin(j4);
IkReal x11334=(gconst5*r10);
IkReal x11335=(gconst5*r00);
IkReal x11336=(gconst5*r20);
IkReal x11337=((1.0)*x11332);
IkReal x11338=(gconst4*x11333);
IkReal x11339=(gconst4*x11332);
IkReal x11340=((1.0)*x11333);
evalcond[0]=((((-1.0)*x11335*x11337))+((r01*x11339))+((r02*x11333)));
evalcond[1]=((((-1.0)*r22*x11337))+(((-1.0)*x11336*x11340))+((r21*x11338)));
evalcond[2]=((((-1.0)*r12*x11337))+((r11*x11338))+(((-1.0)*x11334*x11340)));
evalcond[3]=((1.0)+((r01*x11338))+(((-1.0)*x11335*x11340))+(((-1.0)*r02*x11337)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11336*x11337))+((cj1*sj2))+((r22*x11333))+((r21*x11339)));
evalcond[5]=(((r11*x11339))+((r12*x11333))+(((-1.0)*sj1*sj2))+(((-1.0)*x11334*x11337))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11341=((1.0)*gconst5);
CheckValue<IkReal> x11342=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11341))+(((-1.0)*gconst4*r20)))),-1);
if(!x11342.valid){
continue;
}
CheckValue<IkReal> x11343 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11341))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11342.value)))+(x11343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11344=IKcos(j4);
IkReal x11345=IKsin(j4);
IkReal x11346=(gconst5*r10);
IkReal x11347=(gconst5*r00);
IkReal x11348=(gconst5*r20);
IkReal x11349=((1.0)*x11344);
IkReal x11350=(gconst4*x11345);
IkReal x11351=(gconst4*x11344);
IkReal x11352=((1.0)*x11345);
evalcond[0]=(((r01*x11351))+(((-1.0)*x11347*x11349))+((r02*x11345)));
evalcond[1]=((((-1.0)*x11348*x11352))+(((-1.0)*r22*x11349))+((r21*x11350)));
evalcond[2]=(((r11*x11350))+(((-1.0)*x11346*x11352))+(((-1.0)*r12*x11349)));
evalcond[3]=((1.0)+(((-1.0)*x11347*x11352))+((r01*x11350))+(((-1.0)*r02*x11349)));
evalcond[4]=((((-1.0)*x11348*x11349))+((cj2*sj1))+((cj1*sj2))+((r21*x11351))+((r22*x11345)));
evalcond[5]=((((-1.0)*x11346*x11349))+((r11*x11351))+(((-1.0)*sj1*sj2))+((r12*x11345))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11353=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11353.valid){
continue;
}
CheckValue<IkReal> x11354 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11353.value)))+(x11354.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11355=IKcos(j4);
IkReal x11356=IKsin(j4);
IkReal x11357=(gconst5*r10);
IkReal x11358=(gconst5*r00);
IkReal x11359=(gconst5*r20);
IkReal x11360=((1.0)*x11355);
IkReal x11361=(gconst4*x11356);
IkReal x11362=(gconst4*x11355);
IkReal x11363=((1.0)*x11356);
evalcond[0]=(((r01*x11362))+((r02*x11356))+(((-1.0)*x11358*x11360)));
evalcond[1]=(((r21*x11361))+(((-1.0)*r22*x11360))+(((-1.0)*x11359*x11363)));
evalcond[2]=((((-1.0)*x11357*x11363))+(((-1.0)*r12*x11360))+((r11*x11361)));
evalcond[3]=((1.0)+((r01*x11361))+(((-1.0)*r02*x11360))+(((-1.0)*x11358*x11363)));
evalcond[4]=(((cj2*sj1))+((r21*x11362))+((cj1*sj2))+(((-1.0)*x11359*x11360))+((r22*x11356)));
evalcond[5]=(((r12*x11356))+(((-1.0)*x11357*x11360))+(((-1.0)*sj1*sj2))+((r11*x11362))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11364=((-1.0)*r21);
CheckValue<IkReal> x11367 = IKatan2WithCheck(IkReal(x11364),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11367.valid){
continue;
}
IkReal x11365=((1.0)*(x11367.value));
IkReal x11366=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11365)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11365)));
IkReal gconst4=(x11364*x11366);
IkReal gconst5=((1.0)*r20*x11366);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11368=((-1.0)*r21);
CheckValue<IkReal> x11371 = IKatan2WithCheck(IkReal(x11368),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11371.valid){
continue;
}
IkReal x11369=((1.0)*(x11371.value));
IkReal x11370=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11369)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11369)));
IkReal gconst4=(x11368*x11370);
IkReal gconst5=((1.0)*r20*x11370);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11372=((-1.0)*r21);
CheckValue<IkReal> x11375 = IKatan2WithCheck(IkReal(x11372),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11375.valid){
continue;
}
IkReal x11373=((1.0)*(x11375.value));
IkReal x11374=x10166;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11373)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11373)));
IkReal gconst4=(x11372*x11374);
IkReal gconst5=((1.0)*r20*x11374);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11376=(gconst5*r00);
IkReal x11377=(gconst4*r01);
CheckValue<IkReal> x11378 = IKatan2WithCheck(IkReal(((((-1.0)*x11377))+x11376)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11378.valid){
continue;
}
CheckValue<IkReal> x11379=IKPowWithIntegerCheck(IKsign(((x11377*x11377)+(r02*r02)+(((-2.0)*x11376*x11377))+(x11376*x11376))),-1);
if(!x11379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11378.value)+(((1.5707963267949)*(x11379.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11380=IKsin(j4);
IkReal x11381=IKcos(j4);
IkReal x11382=(gconst4*r11);
IkReal x11383=(gconst5*r10);
IkReal x11384=(gconst5*r00);
IkReal x11385=(gconst5*r20);
IkReal x11386=((1.0)*x11381);
IkReal x11387=(gconst4*x11380);
IkReal x11388=((1.0)*x11380);
evalcond[0]=((((-1.0)*r22*x11386))+((r21*x11387))+(((-1.0)*x11385*x11388)));
evalcond[1]=((((-1.0)*x11383*x11388))+((x11380*x11382))+(((-1.0)*r12*x11386)));
evalcond[2]=(((x11381*x11384))+(((-1.0)*r02*x11388))+(((-1.0)*gconst4*r01*x11386)));
evalcond[3]=((1.0)+((r01*x11387))+(((-1.0)*x11384*x11388))+(((-1.0)*r02*x11386)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x11386))+((cj1*sj2))+((x11381*x11385))+(((-1.0)*r22*x11388)));
evalcond[5]=((((-1.0)*x11382*x11386))+(((-1.0)*sj1*sj2))+((x11381*x11383))+(((-1.0)*r12*x11388))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11389=((1.0)*gconst5);
CheckValue<IkReal> x11390 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11389))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11390.valid){
continue;
}
CheckValue<IkReal> x11391=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11389))+(((-1.0)*gconst4*r20)))),-1);
if(!x11391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11390.value)+(((1.5707963267949)*(x11391.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11392=IKsin(j4);
IkReal x11393=IKcos(j4);
IkReal x11394=(gconst4*r11);
IkReal x11395=(gconst5*r10);
IkReal x11396=(gconst5*r00);
IkReal x11397=(gconst5*r20);
IkReal x11398=((1.0)*x11393);
IkReal x11399=(gconst4*x11392);
IkReal x11400=((1.0)*x11392);
evalcond[0]=((((-1.0)*x11397*x11400))+(((-1.0)*r22*x11398))+((r21*x11399)));
evalcond[1]=((((-1.0)*r12*x11398))+((x11392*x11394))+(((-1.0)*x11395*x11400)));
evalcond[2]=((((-1.0)*gconst4*r01*x11398))+(((-1.0)*r02*x11400))+((x11393*x11396)));
evalcond[3]=((1.0)+(((-1.0)*x11396*x11400))+((r01*x11399))+(((-1.0)*r02*x11398)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11398))+(((-1.0)*r22*x11400))+((x11393*x11397)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x11394*x11398))+((x11393*x11395))+(((-1.0)*r12*x11400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11401=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11401.valid){
continue;
}
CheckValue<IkReal> x11402 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11401.value)))+(x11402.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11403=IKsin(j4);
IkReal x11404=IKcos(j4);
IkReal x11405=(gconst4*r11);
IkReal x11406=(gconst5*r10);
IkReal x11407=(gconst5*r00);
IkReal x11408=(gconst5*r20);
IkReal x11409=((1.0)*x11404);
IkReal x11410=(gconst4*x11403);
IkReal x11411=((1.0)*x11403);
evalcond[0]=((((-1.0)*x11408*x11411))+((r21*x11410))+(((-1.0)*r22*x11409)));
evalcond[1]=((((-1.0)*x11406*x11411))+((x11403*x11405))+(((-1.0)*r12*x11409)));
evalcond[2]=((((-1.0)*gconst4*r01*x11409))+((x11404*x11407))+(((-1.0)*r02*x11411)));
evalcond[3]=((1.0)+((r01*x11410))+(((-1.0)*x11407*x11411))+(((-1.0)*r02*x11409)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11409))+((x11404*x11408))+(((-1.0)*r22*x11411)));
evalcond[5]=((((-1.0)*r12*x11411))+(((-1.0)*x11405*x11409))+(((-1.0)*sj1*sj2))+((x11404*x11406))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11412=((-1.0)*r21);
IkReal x11413=((-1.0)*r20);
CheckValue<IkReal> x11415 = IKatan2WithCheck(IkReal(x11412),IkReal(x11413),IKFAST_ATAN2_MAGTHRESH);
if(!x11415.valid){
continue;
}
IkReal x11414=((1.0)*(x11415.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11414)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11413);
rxp0_2=(py*r00);
rxp1_0=(py*x11412);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11414)));
IkReal gconst4=x11412;
IkReal gconst5=((1.0)*r20);
IkReal x11416=((1.0)*r01*r21);
IkReal x11417=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11417))+(((-1.0)*x11416)));
j4eval[1]=((((-1.0)*cj3*x11416))+(((-1.0)*cj3*x11417)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11418=((-1.0)*r21);
IkReal x11419=((-1.0)*r20);
CheckValue<IkReal> x11421 = IKatan2WithCheck(IkReal(x11418),IkReal(x11419),IKFAST_ATAN2_MAGTHRESH);
if(!x11421.valid){
continue;
}
IkReal x11420=((1.0)*(x11421.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11420)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11419);
rxp0_2=(py*r00);
rxp1_0=(py*x11418);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11420)));
IkReal gconst4=x11418;
IkReal gconst5=((1.0)*r20);
IkReal x11422=((1.0)*r01*r21);
IkReal x11423=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11422))+(((-1.0)*x11423)));
j4eval[1]=(((sj3*x11422))+((sj3*x11423)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11424=((-1.0)*r21);
IkReal x11425=((-1.0)*r20);
CheckValue<IkReal> x11427 = IKatan2WithCheck(IkReal(x11424),IkReal(x11425),IKFAST_ATAN2_MAGTHRESH);
if(!x11427.valid){
continue;
}
IkReal x11426=((1.0)*(x11427.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11426)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11425);
rxp0_2=(py*r00);
rxp1_0=(py*x11424);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11426)));
IkReal gconst4=x11424;
IkReal gconst5=((1.0)*r20);
IkReal x11428=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r01*r21*x11428))+(((-1.0)*r00*r20*x11428)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11429=((1.0)*gconst5);
CheckValue<IkReal> x11430=IKPowWithIntegerCheck(cj3,-1);
if(!x11430.valid){
continue;
}
CheckValue<IkReal> x11431=IKPowWithIntegerCheck(r12,-1);
if(!x11431.valid){
continue;
}
CheckValue<IkReal> x11432=IKPowWithIntegerCheck((((cj3*gconst4*r01))+(((-1.0)*cj3*r00*x11429))),-1);
if(!x11432.valid){
continue;
}
if( IKabs(((x11430.value)*(x11431.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11432.value)*(((((-1.0)*r01*sj3*x11429))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11430.value)*(x11431.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11432.value)*(((((-1.0)*r01*sj3*x11429))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11430.value)*(x11431.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11432.value)*(((((-1.0)*r01*sj3*x11429))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11433=IKsin(j4);
IkReal x11434=IKcos(j4);
IkReal x11435=(cj2*sj1);
IkReal x11436=(cj1*sj2);
IkReal x11437=(sj1*sj2);
IkReal x11438=(gconst5*sj3);
IkReal x11439=(gconst5*r00);
IkReal x11440=(cj3*gconst5);
IkReal x11441=(gconst4*sj3);
IkReal x11442=(cj3*gconst4);
IkReal x11443=(cj1*cj2);
IkReal x11444=((1.0)*x11433);
IkReal x11445=(gconst4*x11433);
IkReal x11446=((1.0)*x11434);
IkReal x11447=(x11435+x11436);
IkReal x11448=(x11434*x11438);
IkReal x11449=(x11434*x11442);
evalcond[0]=((-1.0)*r12*x11434);
evalcond[1]=((((-1.0)*gconst5*r20*x11444))+((r21*x11445)));
evalcond[2]=(x11443+((cj3*r12*x11433))+(((-1.0)*x11437)));
evalcond[3]=(x11447+(((-1.0)*r12*sj3*x11444)));
evalcond[4]=((1.0)+(((-1.0)*x11439*x11444))+((r01*x11445)));
evalcond[5]=((((-1.0)*cj3*x11439*x11446))+((r00*x11441))+((r01*x11438))+((r01*x11449)));
evalcond[6]=(((r00*x11448))+((r00*x11442))+(((-1.0)*r01*x11441*x11446))+((r01*x11440)));
evalcond[7]=(x11447+((r21*x11438))+((r20*x11441))+((r21*x11449))+(((-1.0)*r20*x11440*x11446)));
evalcond[8]=((((-1.0)*x11443))+x11437+(((-1.0)*r21*x11441*x11446))+((r20*x11448))+((r20*x11442))+((r21*x11440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11450=((1.0)*gconst4);
IkReal x11451=(gconst5*r00);
CheckValue<IkReal> x11452=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x11451))),-1);
if(!x11452.valid){
continue;
}
CheckValue<IkReal> x11453=IKPowWithIntegerCheck((((sj3*x11451))+(((-1.0)*r01*sj3*x11450))),-1);
if(!x11453.valid){
continue;
}
if( IKabs(((-1.0)*(x11452.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11453.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11450)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11452.value)))+IKsqr(((x11453.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11450))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11452.value)), ((x11453.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11450))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11454=IKsin(j4);
IkReal x11455=IKcos(j4);
IkReal x11456=(cj2*sj1);
IkReal x11457=(cj1*sj2);
IkReal x11458=(sj1*sj2);
IkReal x11459=(gconst5*sj3);
IkReal x11460=(gconst5*r00);
IkReal x11461=(cj3*gconst5);
IkReal x11462=(gconst4*sj3);
IkReal x11463=(cj3*gconst4);
IkReal x11464=(cj1*cj2);
IkReal x11465=((1.0)*x11454);
IkReal x11466=(gconst4*x11454);
IkReal x11467=((1.0)*x11455);
IkReal x11468=(x11456+x11457);
IkReal x11469=(x11455*x11459);
IkReal x11470=(x11455*x11463);
evalcond[0]=((-1.0)*r12*x11455);
evalcond[1]=((((-1.0)*gconst5*r20*x11465))+((r21*x11466)));
evalcond[2]=(x11464+(((-1.0)*x11458))+((cj3*r12*x11454)));
evalcond[3]=(x11468+(((-1.0)*r12*sj3*x11465)));
evalcond[4]=((1.0)+((r01*x11466))+(((-1.0)*x11460*x11465)));
evalcond[5]=((((-1.0)*cj3*x11460*x11467))+((r01*x11459))+((r00*x11462))+((r01*x11470)));
evalcond[6]=(((r01*x11461))+(((-1.0)*r01*x11462*x11467))+((r00*x11469))+((r00*x11463)));
evalcond[7]=(x11468+(((-1.0)*r20*x11461*x11467))+((r21*x11459))+((r20*x11462))+((r21*x11470)));
evalcond[8]=((((-1.0)*r21*x11462*x11467))+x11458+((r20*x11469))+((r20*x11463))+((r21*x11461))+(((-1.0)*x11464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11471=((1.0)*gconst5);
IkReal x11472=(gconst4*r01);
CheckValue<IkReal> x11473=IKPowWithIntegerCheck((x11472+(((-1.0)*r00*x11471))),-1);
if(!x11473.valid){
continue;
}
CheckValue<IkReal> x11474=IKPowWithIntegerCheck((((cj3*x11472))+(((-1.0)*cj3*r00*x11471))),-1);
if(!x11474.valid){
continue;
}
if( IKabs(((-1.0)*(x11473.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11474.value)*(((((-1.0)*r01*sj3*x11471))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11473.value)))+IKsqr(((x11474.value)*(((((-1.0)*r01*sj3*x11471))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11473.value)), ((x11474.value)*(((((-1.0)*r01*sj3*x11471))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11475=IKsin(j4);
IkReal x11476=IKcos(j4);
IkReal x11477=(cj2*sj1);
IkReal x11478=(cj1*sj2);
IkReal x11479=(sj1*sj2);
IkReal x11480=(gconst5*sj3);
IkReal x11481=(gconst5*r00);
IkReal x11482=(cj3*gconst5);
IkReal x11483=(gconst4*sj3);
IkReal x11484=(cj3*gconst4);
IkReal x11485=(cj1*cj2);
IkReal x11486=((1.0)*x11475);
IkReal x11487=(gconst4*x11475);
IkReal x11488=((1.0)*x11476);
IkReal x11489=(x11477+x11478);
IkReal x11490=(x11476*x11480);
IkReal x11491=(x11476*x11484);
evalcond[0]=((-1.0)*r12*x11476);
evalcond[1]=((((-1.0)*gconst5*r20*x11486))+((r21*x11487)));
evalcond[2]=((((-1.0)*x11479))+x11485+((cj3*r12*x11475)));
evalcond[3]=(x11489+(((-1.0)*r12*sj3*x11486)));
evalcond[4]=((1.0)+((r01*x11487))+(((-1.0)*x11481*x11486)));
evalcond[5]=(((r00*x11483))+((r01*x11480))+(((-1.0)*cj3*x11481*x11488))+((r01*x11491)));
evalcond[6]=(((r00*x11490))+(((-1.0)*r01*x11483*x11488))+((r00*x11484))+((r01*x11482)));
evalcond[7]=(((r20*x11483))+x11489+((r21*x11491))+(((-1.0)*r20*x11482*x11488))+((r21*x11480)));
evalcond[8]=(((r20*x11484))+x11479+(((-1.0)*x11485))+((r20*x11490))+(((-1.0)*r21*x11483*x11488))+((r21*x11482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11492=gconst4*gconst4;
IkReal x11493=gconst5*gconst5;
IkReal x11494=(r01*r20);
IkReal x11495=(gconst4*sj3);
IkReal x11496=(r01*r21);
IkReal x11497=((1.0)*cj3);
IkReal x11498=(r00*r21);
IkReal x11499=(r00*r20);
IkReal x11500=(cj3*gconst4*gconst5);
IkReal x11501=((1.0)*x11493);
CheckValue<IkReal> x11502 = IKatan2WithCheck(IkReal((((r00*r22*x11495))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*gconst5*x11495*x11499))+(((-1.0)*sj3*x11494*x11501))+((sj3*x11492*x11498))+((gconst5*x11495*x11496)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11502.valid){
continue;
}
CheckValue<IkReal> x11503=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11492*x11496*x11497))+((x11494*x11500))+((x11498*x11500))+(((-1.0)*x11493*x11497*x11499))+(((-1.0)*r02*r22*x11497)))),-1);
if(!x11503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11502.value)+(((1.5707963267949)*(x11503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11504=IKsin(j4);
IkReal x11505=IKcos(j4);
IkReal x11506=(cj2*sj1);
IkReal x11507=(cj1*sj2);
IkReal x11508=(gconst5*sj3);
IkReal x11509=(gconst4*r11);
IkReal x11510=(sj1*sj2);
IkReal x11511=(gconst5*r10);
IkReal x11512=(cj1*cj2);
IkReal x11513=(gconst4*r01);
IkReal x11514=(gconst5*r00);
IkReal x11515=(gconst4*sj3);
IkReal x11516=(cj3*gconst5);
IkReal x11517=(cj3*gconst4);
IkReal x11518=(gconst4*r21);
IkReal x11519=((1.0)*x11505);
IkReal x11520=((1.0)*x11504);
IkReal x11521=(cj3*x11504);
IkReal x11522=(cj3*x11505);
IkReal x11523=(x11506+x11507);
evalcond[0]=((((-1.0)*gconst5*r20*x11520))+(((-1.0)*r22*x11519))+((x11504*x11518)));
evalcond[1]=((((-1.0)*x11511*x11520))+(((-1.0)*r12*x11519))+((x11504*x11509)));
evalcond[2]=((1.0)+(((-1.0)*x11514*x11520))+((x11504*x11513))+(((-1.0)*r02*x11519)));
evalcond[3]=(((x11513*x11522))+(((-1.0)*cj3*x11514*x11519))+((r01*x11508))+((r02*x11521))+((r00*x11515)));
evalcond[4]=(((r01*x11516))+(((-1.0)*r02*sj3*x11520))+((r00*x11505*x11508))+((r00*x11517))+(((-1.0)*sj3*x11513*x11519)));
evalcond[5]=((((-1.0)*r20*x11516*x11519))+x11523+((r20*x11515))+((r21*x11508))+((r22*x11521))+((r21*x11505*x11517)));
evalcond[6]=((((-1.0)*cj3*x11511*x11519))+(((-1.0)*x11510))+x11512+((r11*x11508))+((r12*x11521))+((r10*x11515))+((x11509*x11522)));
evalcond[7]=(x11523+(((-1.0)*sj3*x11509*x11519))+(((-1.0)*r12*sj3*x11520))+((r10*x11505*x11508))+((r10*x11517))+((r11*x11516)));
evalcond[8]=((((-1.0)*x11512))+x11510+((r20*x11517))+((r20*x11505*x11508))+((r21*x11516))+(((-1.0)*r21*x11515*x11519))+(((-1.0)*r22*sj3*x11520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11524=((1.0)*gconst5);
CheckValue<IkReal> x11525 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11524))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11525.valid){
continue;
}
CheckValue<IkReal> x11526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11524))+(((-1.0)*gconst4*r20)))),-1);
if(!x11526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11525.value)+(((1.5707963267949)*(x11526.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11527=IKsin(j4);
IkReal x11528=IKcos(j4);
IkReal x11529=(cj2*sj1);
IkReal x11530=(cj1*sj2);
IkReal x11531=(gconst5*sj3);
IkReal x11532=(gconst4*r11);
IkReal x11533=(sj1*sj2);
IkReal x11534=(gconst5*r10);
IkReal x11535=(cj1*cj2);
IkReal x11536=(gconst4*r01);
IkReal x11537=(gconst5*r00);
IkReal x11538=(gconst4*sj3);
IkReal x11539=(cj3*gconst5);
IkReal x11540=(cj3*gconst4);
IkReal x11541=(gconst4*r21);
IkReal x11542=((1.0)*x11528);
IkReal x11543=((1.0)*x11527);
IkReal x11544=(cj3*x11527);
IkReal x11545=(cj3*x11528);
IkReal x11546=(x11530+x11529);
evalcond[0]=(((x11527*x11541))+(((-1.0)*gconst5*r20*x11543))+(((-1.0)*r22*x11542)));
evalcond[1]=((((-1.0)*x11534*x11543))+((x11527*x11532))+(((-1.0)*r12*x11542)));
evalcond[2]=((1.0)+((x11527*x11536))+(((-1.0)*x11537*x11543))+(((-1.0)*r02*x11542)));
evalcond[3]=((((-1.0)*cj3*x11537*x11542))+((r01*x11531))+((r00*x11538))+((r02*x11544))+((x11536*x11545)));
evalcond[4]=(((r00*x11528*x11531))+((r00*x11540))+(((-1.0)*r02*sj3*x11543))+((r01*x11539))+(((-1.0)*sj3*x11536*x11542)));
evalcond[5]=(x11546+((r21*x11528*x11540))+((r21*x11531))+(((-1.0)*r20*x11539*x11542))+((r20*x11538))+((r22*x11544)));
evalcond[6]=(x11535+((x11532*x11545))+(((-1.0)*cj3*x11534*x11542))+((r11*x11531))+((r10*x11538))+((r12*x11544))+(((-1.0)*x11533)));
evalcond[7]=(((r10*x11540))+x11546+((r10*x11528*x11531))+(((-1.0)*sj3*x11532*x11542))+((r11*x11539))+(((-1.0)*r12*sj3*x11543)));
evalcond[8]=(x11533+((r21*x11539))+((r20*x11540))+(((-1.0)*r22*sj3*x11543))+((r20*x11528*x11531))+(((-1.0)*x11535))+(((-1.0)*r21*x11538*x11542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11547=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11547.valid){
continue;
}
CheckValue<IkReal> x11548 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11547.value)))+(x11548.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11549=IKsin(j4);
IkReal x11550=IKcos(j4);
IkReal x11551=(cj2*sj1);
IkReal x11552=(cj1*sj2);
IkReal x11553=(gconst5*sj3);
IkReal x11554=(gconst4*r11);
IkReal x11555=(sj1*sj2);
IkReal x11556=(gconst5*r10);
IkReal x11557=(cj1*cj2);
IkReal x11558=(gconst4*r01);
IkReal x11559=(gconst5*r00);
IkReal x11560=(gconst4*sj3);
IkReal x11561=(cj3*gconst5);
IkReal x11562=(cj3*gconst4);
IkReal x11563=(gconst4*r21);
IkReal x11564=((1.0)*x11550);
IkReal x11565=((1.0)*x11549);
IkReal x11566=(cj3*x11549);
IkReal x11567=(cj3*x11550);
IkReal x11568=(x11552+x11551);
evalcond[0]=(((x11549*x11563))+(((-1.0)*gconst5*r20*x11565))+(((-1.0)*r22*x11564)));
evalcond[1]=((((-1.0)*x11556*x11565))+(((-1.0)*r12*x11564))+((x11549*x11554)));
evalcond[2]=((1.0)+(((-1.0)*x11559*x11565))+((x11549*x11558))+(((-1.0)*r02*x11564)));
evalcond[3]=(((r00*x11560))+((r02*x11566))+((r01*x11553))+(((-1.0)*cj3*x11559*x11564))+((x11558*x11567)));
evalcond[4]=(((r00*x11562))+((r01*x11561))+(((-1.0)*r02*sj3*x11565))+((r00*x11550*x11553))+(((-1.0)*sj3*x11558*x11564)));
evalcond[5]=(((r21*x11550*x11562))+((r21*x11553))+x11568+((r20*x11560))+((r22*x11566))+(((-1.0)*r20*x11561*x11564)));
evalcond[6]=(((r11*x11553))+x11557+((r10*x11560))+((x11554*x11567))+(((-1.0)*cj3*x11556*x11564))+((r12*x11566))+(((-1.0)*x11555)));
evalcond[7]=(x11568+((r10*x11562))+(((-1.0)*sj3*x11554*x11564))+((r11*x11561))+((r10*x11550*x11553))+(((-1.0)*r12*sj3*x11565)));
evalcond[8]=(x11555+((r20*x11562))+(((-1.0)*r22*sj3*x11565))+(((-1.0)*r21*x11560*x11564))+((r21*x11561))+((r20*x11550*x11553))+(((-1.0)*x11557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11569=((-1.0)*r21);
IkReal x11570=((-1.0)*px);
CheckValue<IkReal> x11572 = IKatan2WithCheck(IkReal(x11569),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11572.valid){
continue;
}
IkReal x11571=((1.0)*(x11572.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11571)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11570);
rxp1_1=(px*r21);
rxp1_2=(r11*x11570);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11571)));
IkReal gconst4=x11569;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11573=((-1.0)*r21);
IkReal x11574=((-1.0)*px);
CheckValue<IkReal> x11576 = IKatan2WithCheck(IkReal(x11573),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11576.valid){
continue;
}
IkReal x11575=((1.0)*(x11576.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11575)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11574);
rxp1_1=(px*r21);
rxp1_2=(r11*x11574);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11575)));
IkReal gconst4=x11573;
IkReal gconst5=((1.0)*r20);
IkReal x11577=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=(((x11577*(r10*r10)))+(((-1.0)*x11577))+(((-1.0)*x11577*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11578=((-1.0)*r21);
IkReal x11579=((-1.0)*px);
CheckValue<IkReal> x11581 = IKatan2WithCheck(IkReal(x11578),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11581.valid){
continue;
}
IkReal x11580=((1.0)*(x11581.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11580)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11579);
rxp1_1=(px*r21);
rxp1_2=(r11*x11579);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11580)));
IkReal gconst4=x11578;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11582=((-1.0)*r21);
IkReal x11583=((-1.0)*px);
CheckValue<IkReal> x11585 = IKatan2WithCheck(IkReal(x11582),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11585.valid){
continue;
}
IkReal x11584=((1.0)*(x11585.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11584)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11583);
rxp1_1=(px*r21);
rxp1_2=(r11*x11583);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11584)));
IkReal gconst4=x11582;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11586=((-1.0)*r21);
IkReal x11587=((-1.0)*px);
CheckValue<IkReal> x11589 = IKatan2WithCheck(IkReal(x11586),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11589.valid){
continue;
}
IkReal x11588=((1.0)*(x11589.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11588)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11587);
rxp1_1=(px*r21);
rxp1_2=(r11*x11587);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11588)));
IkReal gconst4=x11586;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11590=((-1.0)*r21);
IkReal x11591=((-1.0)*px);
CheckValue<IkReal> x11593 = IKatan2WithCheck(IkReal(x11590),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11593.valid){
continue;
}
IkReal x11592=((1.0)*(x11593.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11592)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11591);
rxp1_1=(px*r21);
rxp1_2=(r11*x11591);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11592)));
IkReal gconst4=x11590;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11596=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11596.valid){
continue;
}
IkReal x11594=x11596.value;
IkReal x11595=(sj0*x11594);
cj4array[0]=(((cj1*sj2*x11595))+((cj2*sj1*x11595)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11597=IKsin(j4);
IkReal x11598=IKcos(j4);
IkReal x11599=(gconst5*r20);
IkReal x11600=(gconst4*x11597);
IkReal x11601=((1.0)*x11598);
IkReal x11602=((1.0)*x11597);
evalcond[0]=((-1.0)*r02*x11597);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11601)));
evalcond[2]=((((-1.0)*x11599*x11602))+((r21*x11600)));
evalcond[3]=((((-1.0)*gconst5*r10*x11602))+((r11*x11600)));
evalcond[4]=(((x11598*x11599))+(((-1.0)*gconst4*r21*x11601))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11604=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11604.valid){
continue;
}
IkReal x11603=x11604.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11603))+((cj1*cj2*x11603)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11605=IKsin(j4);
IkReal x11606=IKcos(j4);
IkReal x11607=(gconst5*r10);
IkReal x11608=((1.0)*sj0);
IkReal x11609=(gconst4*x11605);
IkReal x11610=((1.0)*x11606);
IkReal x11611=((1.0)*x11605);
evalcond[0]=((-1.0)*r02*x11605);
evalcond[1]=((((-1.0)*x11608))+(((-1.0)*r02*x11610)));
evalcond[2]=(((r21*x11609))+(((-1.0)*gconst5*r20*x11611)));
evalcond[3]=((((-1.0)*x11607*x11611))+((r11*x11609)));
evalcond[4]=((((-1.0)*gconst4*r11*x11610))+(((-1.0)*cj1*sj2*x11608))+(((-1.0)*cj2*sj1*x11608))+((x11606*x11607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11612=IKPowWithIntegerCheck(r02,-1);
if(!x11612.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11612.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11613=IKsin(j4);
IkReal x11614=IKcos(j4);
IkReal x11615=((1.0)*sj0);
IkReal x11616=(gconst5*x11614);
IkReal x11617=(gconst4*x11613);
IkReal x11618=((1.0)*gconst4*x11614);
IkReal x11619=((1.0)*gconst5*x11613);
evalcond[0]=((-1.0)*r02*x11613);
evalcond[1]=(((r21*x11617))+(((-1.0)*r20*x11619)));
evalcond[2]=(((r11*x11617))+(((-1.0)*r10*x11619)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11618))+((r20*x11616)));
evalcond[4]=((((-1.0)*r11*x11618))+(((-1.0)*cj1*sj2*x11615))+(((-1.0)*cj2*sj1*x11615))+((r10*x11616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11620=((-1.0)*r21);
IkReal x11621=((-1.0)*px);
CheckValue<IkReal> x11623 = IKatan2WithCheck(IkReal(x11620),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11623.valid){
continue;
}
IkReal x11622=((1.0)*(x11623.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11622)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11621);
rxp1_1=(px*r21);
rxp1_2=(r11*x11621);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11622)));
IkReal gconst4=x11620;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11624=((-1.0)*r21);
IkReal x11625=((-1.0)*px);
CheckValue<IkReal> x11627 = IKatan2WithCheck(IkReal(x11624),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11627.valid){
continue;
}
IkReal x11626=((1.0)*(x11627.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11626)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11625);
rxp1_1=(px*r21);
rxp1_2=(r11*x11625);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11626)));
IkReal gconst4=x11624;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11628=((-1.0)*r21);
IkReal x11629=((-1.0)*px);
CheckValue<IkReal> x11631 = IKatan2WithCheck(IkReal(x11628),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11631.valid){
continue;
}
IkReal x11630=((1.0)*(x11631.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11630)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11629);
rxp1_1=(px*r21);
rxp1_2=(r11*x11629);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11630)));
IkReal gconst4=x11628;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11634=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11634.valid){
continue;
}
IkReal x11632=x11634.value;
IkReal x11633=(sj0*x11632);
cj4array[0]=(((cj1*sj2*x11633))+((cj2*sj1*x11633)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11635=IKsin(j4);
IkReal x11636=IKcos(j4);
IkReal x11637=(gconst5*r20);
IkReal x11638=(gconst4*x11635);
IkReal x11639=((1.0)*x11636);
IkReal x11640=((1.0)*x11635);
evalcond[0]=(r02*x11635);
evalcond[1]=((((-1.0)*r02*x11639))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x11637*x11640))+((r21*x11638)));
evalcond[3]=(((r11*x11638))+(((-1.0)*gconst5*r10*x11640)));
evalcond[4]=(((gconst4*r21*x11636))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11637*x11639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11642=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11642.valid){
continue;
}
IkReal x11641=x11642.value;
cj4array[0]=(((cj1*cj2*x11641))+(((-1.0)*sj1*sj2*x11641)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11643=IKsin(j4);
IkReal x11644=IKcos(j4);
IkReal x11645=(gconst4*r11);
IkReal x11646=((1.0)*sj0);
IkReal x11647=(gconst5*r10);
IkReal x11648=((1.0)*x11644);
IkReal x11649=((1.0)*x11643);
evalcond[0]=(r02*x11643);
evalcond[1]=((((-1.0)*r02*x11648))+(((-1.0)*x11646)));
evalcond[2]=(((gconst4*r21*x11643))+(((-1.0)*gconst5*r20*x11649)));
evalcond[3]=((((-1.0)*x11647*x11649))+((x11643*x11645)));
evalcond[4]=((((-1.0)*cj2*sj1*x11646))+(((-1.0)*x11647*x11648))+((x11644*x11645))+(((-1.0)*cj1*sj2*x11646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11650=IKPowWithIntegerCheck(r02,-1);
if(!x11650.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11650.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11651=IKsin(j4);
IkReal x11652=IKcos(j4);
IkReal x11653=(gconst4*r11);
IkReal x11654=((1.0)*cj1);
IkReal x11655=(gconst4*r21);
IkReal x11656=((1.0)*gconst5*x11652);
IkReal x11657=((1.0)*gconst5*x11651);
evalcond[0]=(r02*x11651);
evalcond[1]=(((x11651*x11655))+(((-1.0)*r20*x11657)));
evalcond[2]=((((-1.0)*r10*x11657))+((x11651*x11653)));
evalcond[3]=(((x11652*x11655))+((sj1*sj2))+(((-1.0)*r20*x11656))+(((-1.0)*cj2*x11654)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x11656))+((x11652*x11653))+(((-1.0)*sj0*sj2*x11654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11659=IKPowWithIntegerCheck(r02,-1);
if(!x11659.valid){
continue;
}
IkReal x11658=x11659.value;
CheckValue<IkReal> x11660=IKPowWithIntegerCheck(cj3,-1);
if(!x11660.valid){
continue;
}
if( IKabs((x11658*(x11660.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11658)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11658*(x11660.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11658))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11658*(x11660.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11658));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11661=IKsin(j4);
IkReal x11662=IKcos(j4);
IkReal x11663=(gconst5*sj3);
IkReal x11664=(gconst4*r11);
IkReal x11665=(sj1*sj2);
IkReal x11666=((1.0)*gconst5);
IkReal x11667=(cj2*sj1);
IkReal x11668=((1.0)*sj0);
IkReal x11669=((1.0)*cj0);
IkReal x11670=(gconst4*r21);
IkReal x11671=(cj1*sj2);
IkReal x11672=(cj3*gconst4);
IkReal x11673=(gconst4*sj3);
IkReal x11674=(cj3*gconst5);
IkReal x11675=(r20*x11662);
IkReal x11676=((1.0)*cj1*cj2);
IkReal x11677=(r10*x11662);
IkReal x11678=(cj3*x11662);
IkReal x11679=(r02*x11661);
IkReal x11680=((1.0)*sj3*x11662);
evalcond[0]=((((-1.0)*r02*x11662))+(((-1.0)*x11668)));
evalcond[1]=((((-1.0)*r20*x11661*x11666))+((x11661*x11670)));
evalcond[2]=(cj0+(((-1.0)*r10*x11661*x11666))+((x11661*x11664)));
evalcond[3]=(((cj0*x11665))+((cj3*x11679))+(((-1.0)*cj1*cj2*x11669)));
evalcond[4]=((((-1.0)*x11669*x11671))+(((-1.0)*sj3*x11679))+(((-1.0)*x11667*x11669)));
evalcond[5]=(((r21*x11663))+x11667+x11671+((x11670*x11678))+((r20*x11673))+(((-1.0)*cj3*x11666*x11675)));
evalcond[6]=(x11665+((r20*x11672))+((x11663*x11675))+((r21*x11674))+(((-1.0)*x11670*x11680))+(((-1.0)*x11676)));
evalcond[7]=(((r11*x11663))+((r10*x11673))+(((-1.0)*cj1*cj2*x11668))+((x11664*x11678))+(((-1.0)*cj3*x11666*x11677))+((sj0*x11665)));
evalcond[8]=((((-1.0)*x11664*x11680))+(((-1.0)*x11668*x11671))+(((-1.0)*x11667*x11668))+((r11*x11674))+((x11663*x11677))+((r10*x11672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11681=((1.0)*gconst5);
CheckValue<IkReal> x11682=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*r10*x11681))),-1);
if(!x11682.valid){
continue;
}
CheckValue<IkReal> x11683=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11681))+((cj3*gconst4*r21))),-1);
if(!x11683.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11682.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11683.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11681))+(((-1.0)*gconst4*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11682.value)))+IKsqr(((x11683.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11681))+(((-1.0)*gconst4*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11682.value)), ((x11683.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11681))+(((-1.0)*gconst4*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11684=IKsin(j4);
IkReal x11685=IKcos(j4);
IkReal x11686=(gconst5*sj3);
IkReal x11687=(gconst4*r11);
IkReal x11688=(sj1*sj2);
IkReal x11689=((1.0)*gconst5);
IkReal x11690=(cj2*sj1);
IkReal x11691=((1.0)*sj0);
IkReal x11692=((1.0)*cj0);
IkReal x11693=(gconst4*r21);
IkReal x11694=(cj1*sj2);
IkReal x11695=(cj3*gconst4);
IkReal x11696=(gconst4*sj3);
IkReal x11697=(cj3*gconst5);
IkReal x11698=(r20*x11685);
IkReal x11699=((1.0)*cj1*cj2);
IkReal x11700=(r10*x11685);
IkReal x11701=(cj3*x11685);
IkReal x11702=(r02*x11684);
IkReal x11703=((1.0)*sj3*x11685);
evalcond[0]=((((-1.0)*r02*x11685))+(((-1.0)*x11691)));
evalcond[1]=(((x11684*x11693))+(((-1.0)*r20*x11684*x11689)));
evalcond[2]=(cj0+(((-1.0)*r10*x11684*x11689))+((x11684*x11687)));
evalcond[3]=(((cj3*x11702))+((cj0*x11688))+(((-1.0)*cj1*cj2*x11692)));
evalcond[4]=((((-1.0)*x11690*x11692))+(((-1.0)*sj3*x11702))+(((-1.0)*x11692*x11694)));
evalcond[5]=(x11694+x11690+(((-1.0)*cj3*x11689*x11698))+((x11693*x11701))+((r20*x11696))+((r21*x11686)));
evalcond[6]=(x11688+((r20*x11695))+((x11686*x11698))+(((-1.0)*x11699))+(((-1.0)*x11693*x11703))+((r21*x11697)));
evalcond[7]=(((sj0*x11688))+((r11*x11686))+((r10*x11696))+((x11687*x11701))+(((-1.0)*cj3*x11689*x11700))+(((-1.0)*cj1*cj2*x11691)));
evalcond[8]=((((-1.0)*x11690*x11691))+(((-1.0)*x11691*x11694))+((r10*x11695))+((r11*x11697))+(((-1.0)*x11687*x11703))+((x11686*x11700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11704=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11704.valid){
continue;
}
CheckValue<IkReal> x11705=IKPowWithIntegerCheck(r02,-1);
if(!x11705.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11704.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11705.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11704.value)))+IKsqr(((-1.0)*sj0*(x11705.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11704.value)), ((-1.0)*sj0*(x11705.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11706=IKsin(j4);
IkReal x11707=IKcos(j4);
IkReal x11708=(gconst5*sj3);
IkReal x11709=(gconst4*r11);
IkReal x11710=(sj1*sj2);
IkReal x11711=((1.0)*gconst5);
IkReal x11712=(cj2*sj1);
IkReal x11713=((1.0)*sj0);
IkReal x11714=((1.0)*cj0);
IkReal x11715=(gconst4*r21);
IkReal x11716=(cj1*sj2);
IkReal x11717=(cj3*gconst4);
IkReal x11718=(gconst4*sj3);
IkReal x11719=(cj3*gconst5);
IkReal x11720=(r20*x11707);
IkReal x11721=((1.0)*cj1*cj2);
IkReal x11722=(r10*x11707);
IkReal x11723=(cj3*x11707);
IkReal x11724=(r02*x11706);
IkReal x11725=((1.0)*sj3*x11707);
evalcond[0]=((((-1.0)*x11713))+(((-1.0)*r02*x11707)));
evalcond[1]=((((-1.0)*r20*x11706*x11711))+((x11706*x11715)));
evalcond[2]=(cj0+(((-1.0)*r10*x11706*x11711))+((x11706*x11709)));
evalcond[3]=(((cj0*x11710))+((cj3*x11724))+(((-1.0)*cj1*cj2*x11714)));
evalcond[4]=((((-1.0)*sj3*x11724))+(((-1.0)*x11712*x11714))+(((-1.0)*x11714*x11716)));
evalcond[5]=(x11712+x11716+(((-1.0)*cj3*x11711*x11720))+((r21*x11708))+((r20*x11718))+((x11715*x11723)));
evalcond[6]=(((x11708*x11720))+x11710+(((-1.0)*x11721))+(((-1.0)*x11715*x11725))+((r20*x11717))+((r21*x11719)));
evalcond[7]=(((x11709*x11723))+(((-1.0)*cj3*x11711*x11722))+((sj0*x11710))+(((-1.0)*cj1*cj2*x11713))+((r10*x11718))+((r11*x11708)));
evalcond[8]=(((x11708*x11722))+(((-1.0)*x11709*x11725))+(((-1.0)*x11712*x11713))+(((-1.0)*x11713*x11716))+((r10*x11717))+((r11*x11719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11726=((1.0)*sj0);
IkReal x11727=((1.0)*gconst4);
CheckValue<IkReal> x11728 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11726))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst5*r00))+(((-1.0)*gconst4*r11*x11726))+(((-1.0)*cj0*r01*x11727))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11728.valid){
continue;
}
CheckValue<IkReal> x11729=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11727))+(((-1.0)*gconst5*r21)))),-1);
if(!x11729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11728.value)+(((1.5707963267949)*(x11729.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11730=IKsin(j4);
IkReal x11731=IKcos(j4);
IkReal x11732=(gconst5*sj3);
IkReal x11733=(cj3*gconst5);
IkReal x11734=(gconst4*r11);
IkReal x11735=(sj1*sj2);
IkReal x11736=(cj2*sj1);
IkReal x11737=((1.0)*sj0);
IkReal x11738=(gconst4*r01);
IkReal x11739=(gconst4*r21);
IkReal x11740=((1.0)*cj0);
IkReal x11741=(cj1*sj2);
IkReal x11742=(gconst4*sj3);
IkReal x11743=(cj3*gconst4);
IkReal x11744=((1.0)*x11731);
IkReal x11745=((1.0)*cj1*cj2);
IkReal x11746=(cj3*x11730);
IkReal x11747=(cj3*x11731);
IkReal x11748=((1.0)*gconst5*x11730);
IkReal x11749=((1.0)*sj3*x11730);
evalcond[0]=((((-1.0)*r20*x11748))+(((-1.0)*r22*x11744))+((x11730*x11739)));
evalcond[1]=(cj0+(((-1.0)*r10*x11748))+(((-1.0)*r12*x11744))+((x11730*x11734)));
evalcond[2]=((((-1.0)*r00*x11748))+(((-1.0)*x11737))+((x11730*x11738))+(((-1.0)*r02*x11744)));
evalcond[3]=(x11741+x11736+(((-1.0)*r20*x11733*x11744))+((r20*x11742))+((r21*x11732))+((r22*x11746))+((x11739*x11747)));
evalcond[4]=(x11735+((r20*x11731*x11732))+(((-1.0)*x11745))+(((-1.0)*sj3*x11739*x11744))+(((-1.0)*r22*x11749))+((r20*x11743))+((r21*x11733)));
evalcond[5]=(((r01*x11732))+((r00*x11742))+(((-1.0)*r00*x11733*x11744))+((cj0*x11735))+(((-1.0)*cj1*cj2*x11740))+((r02*x11746))+((x11738*x11747)));
evalcond[6]=(((r11*x11732))+((sj0*x11735))+((x11734*x11747))+(((-1.0)*cj1*cj2*x11737))+((r10*x11742))+(((-1.0)*r10*x11733*x11744))+((r12*x11746)));
evalcond[7]=(((r01*x11733))+((r00*x11731*x11732))+((r00*x11743))+(((-1.0)*sj3*x11738*x11744))+(((-1.0)*x11740*x11741))+(((-1.0)*r02*x11749))+(((-1.0)*x11736*x11740)));
evalcond[8]=(((r11*x11733))+(((-1.0)*x11737*x11741))+((r10*x11731*x11732))+((r10*x11743))+(((-1.0)*r12*x11749))+(((-1.0)*x11736*x11737))+(((-1.0)*sj3*x11734*x11744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11750=((1.0)*gconst5);
CheckValue<IkReal> x11751=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11750))+(((-1.0)*gconst4*r10)))),-1);
if(!x11751.valid){
continue;
}
CheckValue<IkReal> x11752 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11750))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11751.value)))+(x11752.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11753=IKsin(j4);
IkReal x11754=IKcos(j4);
IkReal x11755=(gconst5*sj3);
IkReal x11756=(cj3*gconst5);
IkReal x11757=(gconst4*r11);
IkReal x11758=(sj1*sj2);
IkReal x11759=(cj2*sj1);
IkReal x11760=((1.0)*sj0);
IkReal x11761=(gconst4*r01);
IkReal x11762=(gconst4*r21);
IkReal x11763=((1.0)*cj0);
IkReal x11764=(cj1*sj2);
IkReal x11765=(gconst4*sj3);
IkReal x11766=(cj3*gconst4);
IkReal x11767=((1.0)*x11754);
IkReal x11768=((1.0)*cj1*cj2);
IkReal x11769=(cj3*x11753);
IkReal x11770=(cj3*x11754);
IkReal x11771=((1.0)*gconst5*x11753);
IkReal x11772=((1.0)*sj3*x11753);
evalcond[0]=(((x11753*x11762))+(((-1.0)*r22*x11767))+(((-1.0)*r20*x11771)));
evalcond[1]=((((-1.0)*r12*x11767))+cj0+(((-1.0)*r10*x11771))+((x11753*x11757)));
evalcond[2]=(((x11753*x11761))+(((-1.0)*r02*x11767))+(((-1.0)*r00*x11771))+(((-1.0)*x11760)));
evalcond[3]=(x11764+x11759+((r20*x11765))+(((-1.0)*r20*x11756*x11767))+((x11762*x11770))+((r22*x11769))+((r21*x11755)));
evalcond[4]=((((-1.0)*sj3*x11762*x11767))+x11758+((r20*x11766))+(((-1.0)*r22*x11772))+(((-1.0)*x11768))+((r20*x11754*x11755))+((r21*x11756)));
evalcond[5]=(((cj0*x11758))+(((-1.0)*cj1*cj2*x11763))+((x11761*x11770))+((r02*x11769))+(((-1.0)*r00*x11756*x11767))+((r00*x11765))+((r01*x11755)));
evalcond[6]=(((x11757*x11770))+(((-1.0)*cj1*cj2*x11760))+((r11*x11755))+((r10*x11765))+((r12*x11769))+((sj0*x11758))+(((-1.0)*r10*x11756*x11767)));
evalcond[7]=((((-1.0)*sj3*x11761*x11767))+((r00*x11754*x11755))+(((-1.0)*r02*x11772))+(((-1.0)*x11763*x11764))+((r00*x11766))+((r01*x11756))+(((-1.0)*x11759*x11763)));
evalcond[8]=(((r11*x11756))+((r10*x11766))+(((-1.0)*r12*x11772))+(((-1.0)*sj3*x11757*x11767))+(((-1.0)*x11760*x11764))+(((-1.0)*x11759*x11760))+((r10*x11754*x11755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11773=((1.0)*gconst5);
CheckValue<IkReal> x11774 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11773))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11774.valid){
continue;
}
CheckValue<IkReal> x11775=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11773)))),-1);
if(!x11775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11774.value)+(((1.5707963267949)*(x11775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11776=IKsin(j4);
IkReal x11777=IKcos(j4);
IkReal x11778=(gconst5*sj3);
IkReal x11779=(cj3*gconst5);
IkReal x11780=(gconst4*r11);
IkReal x11781=(sj1*sj2);
IkReal x11782=(cj2*sj1);
IkReal x11783=((1.0)*sj0);
IkReal x11784=(gconst4*r01);
IkReal x11785=(gconst4*r21);
IkReal x11786=((1.0)*cj0);
IkReal x11787=(cj1*sj2);
IkReal x11788=(gconst4*sj3);
IkReal x11789=(cj3*gconst4);
IkReal x11790=((1.0)*x11777);
IkReal x11791=((1.0)*cj1*cj2);
IkReal x11792=(cj3*x11776);
IkReal x11793=(cj3*x11777);
IkReal x11794=((1.0)*gconst5*x11776);
IkReal x11795=((1.0)*sj3*x11776);
evalcond[0]=((((-1.0)*r20*x11794))+(((-1.0)*r22*x11790))+((x11776*x11785)));
evalcond[1]=(cj0+(((-1.0)*r10*x11794))+(((-1.0)*r12*x11790))+((x11776*x11780)));
evalcond[2]=((((-1.0)*r00*x11794))+(((-1.0)*r02*x11790))+((x11776*x11784))+(((-1.0)*x11783)));
evalcond[3]=(((x11785*x11793))+x11787+x11782+((r20*x11788))+(((-1.0)*r20*x11779*x11790))+((r21*x11778))+((r22*x11792)));
evalcond[4]=((((-1.0)*sj3*x11785*x11790))+x11781+((r20*x11789))+((r20*x11777*x11778))+((r21*x11779))+(((-1.0)*r22*x11795))+(((-1.0)*x11791)));
evalcond[5]=(((cj0*x11781))+(((-1.0)*cj1*cj2*x11786))+((r02*x11792))+(((-1.0)*r00*x11779*x11790))+((r01*x11778))+((x11784*x11793))+((r00*x11788)));
evalcond[6]=(((r12*x11792))+((x11780*x11793))+(((-1.0)*cj1*cj2*x11783))+((r10*x11788))+((r11*x11778))+((sj0*x11781))+(((-1.0)*r10*x11779*x11790)));
evalcond[7]=((((-1.0)*x11782*x11786))+(((-1.0)*x11786*x11787))+(((-1.0)*sj3*x11784*x11790))+(((-1.0)*r02*x11795))+((r01*x11779))+((r00*x11777*x11778))+((r00*x11789)));
evalcond[8]=((((-1.0)*sj3*x11780*x11790))+(((-1.0)*x11782*x11783))+((r10*x11789))+((r11*x11779))+(((-1.0)*r12*x11795))+(((-1.0)*x11783*x11787))+((r10*x11777*x11778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11796=((-1.0)*r10);
IkReal x11798 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11798)==0){
continue;
}
IkReal x11797=pow(x11798,-0.5);
CheckValue<IkReal> x11799 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11796),IKFAST_ATAN2_MAGTHRESH);
if(!x11799.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11799.value));
IkReal gconst7=(r11*x11797);
IkReal gconst8=(x11796*x11797);
CheckValue<IkReal> x11800 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11800.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11800.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11801=((-1.0)*r10);
IkReal x11802=x11797;
CheckValue<IkReal> x11804 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11801),IKFAST_ATAN2_MAGTHRESH);
if(!x11804.valid){
continue;
}
IkReal x11803=((-1.0)*(x11804.value));
sj5=gconst7;
cj5=gconst8;
j5=x11803;
IkReal gconst6=x11803;
IkReal gconst7=(r11*x11802);
IkReal gconst8=(x11801*x11802);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11805=((1.0)*sj0);
IkReal x11806=((1.0)*gconst7);
CheckValue<IkReal> x11807 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11805)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*gconst7*r11*x11805))+(((-1.0)*cj0*r01*x11806))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11807.valid){
continue;
}
CheckValue<IkReal> x11808=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11806))+(((-1.0)*gconst8*r21)))),-1);
if(!x11808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11807.value)+(((1.5707963267949)*(x11808.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11809=IKsin(j4);
IkReal x11810=IKcos(j4);
IkReal x11811=(gconst7*sj3);
IkReal x11812=(cj3*gconst8);
IkReal x11813=(cj3*gconst7);
IkReal x11814=(sj1*sj2);
IkReal x11815=(cj2*sj1);
IkReal x11816=((1.0)*sj0);
IkReal x11817=((1.0)*cj0);
IkReal x11818=(gconst8*sj3);
IkReal x11819=(cj1*sj2);
IkReal x11820=((1.0)*x11810);
IkReal x11821=((1.0)*x11809);
IkReal x11822=((1.0)*cj1*cj2);
IkReal x11823=(cj3*x11809);
IkReal x11824=(gconst7*x11809);
IkReal x11825=(x11810*x11818);
evalcond[0]=((((-1.0)*gconst8*r20*x11821))+(((-1.0)*r22*x11820))+((r21*x11824)));
evalcond[1]=(cj0+(((-1.0)*r12*x11820))+((r11*x11824))+(((-1.0)*gconst8*r10*x11821)));
evalcond[2]=((((-1.0)*gconst8*r00*x11821))+(((-1.0)*r02*x11820))+(((-1.0)*x11816))+((r01*x11824)));
evalcond[3]=(((r21*x11818))+((r21*x11810*x11813))+((r22*x11823))+(((-1.0)*r20*x11812*x11820))+((r20*x11811))+x11815+x11819);
evalcond[4]=((((-1.0)*r22*sj3*x11821))+((r21*x11812))+(((-1.0)*x11822))+((r20*x11825))+((r20*x11813))+(((-1.0)*r21*x11811*x11820))+x11814);
evalcond[5]=((((-1.0)*r00*x11812*x11820))+((r01*x11810*x11813))+((r01*x11818))+((r00*x11811))+((r02*x11823))+((cj0*x11814))+(((-1.0)*cj1*cj2*x11817)));
evalcond[6]=(((sj0*x11814))+((r12*x11823))+((r10*x11811))+(((-1.0)*r10*x11812*x11820))+((r11*x11818))+((r11*x11810*x11813))+(((-1.0)*cj1*cj2*x11816)));
evalcond[7]=((((-1.0)*x11815*x11817))+(((-1.0)*r01*x11811*x11820))+((r01*x11812))+(((-1.0)*x11817*x11819))+((r00*x11813))+((r00*x11825))+(((-1.0)*r02*sj3*x11821)));
evalcond[8]=((((-1.0)*x11815*x11816))+(((-1.0)*x11816*x11819))+((r10*x11825))+((r10*x11813))+(((-1.0)*r12*sj3*x11821))+((r11*x11812))+(((-1.0)*r11*x11811*x11820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11826=((1.0)*gconst8);
CheckValue<IkReal> x11827 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11826)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11827.valid){
continue;
}
CheckValue<IkReal> x11828=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11826)))),-1);
if(!x11828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11827.value)+(((1.5707963267949)*(x11828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11829=IKsin(j4);
IkReal x11830=IKcos(j4);
IkReal x11831=(gconst7*sj3);
IkReal x11832=(cj3*gconst8);
IkReal x11833=(cj3*gconst7);
IkReal x11834=(sj1*sj2);
IkReal x11835=(cj2*sj1);
IkReal x11836=((1.0)*sj0);
IkReal x11837=((1.0)*cj0);
IkReal x11838=(gconst8*sj3);
IkReal x11839=(cj1*sj2);
IkReal x11840=((1.0)*x11830);
IkReal x11841=((1.0)*x11829);
IkReal x11842=((1.0)*cj1*cj2);
IkReal x11843=(cj3*x11829);
IkReal x11844=(gconst7*x11829);
IkReal x11845=(x11830*x11838);
evalcond[0]=(((r21*x11844))+(((-1.0)*gconst8*r20*x11841))+(((-1.0)*r22*x11840)));
evalcond[1]=(cj0+((r11*x11844))+(((-1.0)*r12*x11840))+(((-1.0)*gconst8*r10*x11841)));
evalcond[2]=((((-1.0)*r02*x11840))+(((-1.0)*gconst8*r00*x11841))+((r01*x11844))+(((-1.0)*x11836)));
evalcond[3]=(((r21*x11838))+((r21*x11830*x11833))+((r22*x11843))+((r20*x11831))+(((-1.0)*r20*x11832*x11840))+x11839+x11835);
evalcond[4]=((((-1.0)*x11842))+((r21*x11832))+(((-1.0)*r21*x11831*x11840))+((r20*x11845))+(((-1.0)*r22*sj3*x11841))+((r20*x11833))+x11834);
evalcond[5]=(((cj0*x11834))+((r01*x11830*x11833))+(((-1.0)*r00*x11832*x11840))+((r02*x11843))+(((-1.0)*cj1*cj2*x11837))+((r00*x11831))+((r01*x11838)));
evalcond[6]=((((-1.0)*r10*x11832*x11840))+((r11*x11838))+((r10*x11831))+((r12*x11843))+((sj0*x11834))+(((-1.0)*cj1*cj2*x11836))+((r11*x11830*x11833)));
evalcond[7]=((((-1.0)*x11835*x11837))+(((-1.0)*x11837*x11839))+((r00*x11845))+(((-1.0)*r02*sj3*x11841))+(((-1.0)*r01*x11831*x11840))+((r00*x11833))+((r01*x11832)));
evalcond[8]=((((-1.0)*r12*sj3*x11841))+(((-1.0)*x11835*x11836))+(((-1.0)*x11836*x11839))+((r11*x11832))+((r10*x11833))+((r10*x11845))+(((-1.0)*r11*x11831*x11840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11846=((-1.0)*r11);
IkReal x11848 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11848)==0){
continue;
}
IkReal x11847=pow(x11848,-0.5);
CheckValue<IkReal> x11849 = IKatan2WithCheck(IkReal(x11846),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11849.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11849.value))));
IkReal gconst10=(x11846*x11847);
IkReal gconst11=((1.0)*r10*x11847);
CheckValue<IkReal> x11850 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11850.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11850.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11851=((-1.0)*r11);
CheckValue<IkReal> x11854 = IKatan2WithCheck(IkReal(x11851),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11854.valid){
continue;
}
IkReal x11852=((1.0)*(x11854.value));
IkReal x11853=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11852)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11852)));
IkReal gconst10=(x11851*x11853);
IkReal gconst11=((1.0)*r10*x11853);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11855=((-1.0)*r11);
CheckValue<IkReal> x11858 = IKatan2WithCheck(IkReal(x11855),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11858.valid){
continue;
}
IkReal x11856=((1.0)*(x11858.value));
IkReal x11857=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11856)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11856)));
IkReal gconst10=(x11855*x11857);
IkReal gconst11=((1.0)*r10*x11857);
IkReal x11859=r12*r12;
IkReal x11860=((1.0)*sj0);
IkReal x11861=(cj0*r02);
IkReal x11862=x11847;
j4eval[0]=((IKabs(((((-1.0)*x11861))+(((-1.0)*r12*x11860)))))+(IKabs((((r12*x11861*x11862))+(((-1.0)*x11860*x11862))+((sj0*x11859*x11862))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11863=((-1.0)*r11);
CheckValue<IkReal> x11866 = IKatan2WithCheck(IkReal(x11863),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11866.valid){
continue;
}
IkReal x11864=((1.0)*(x11866.value));
IkReal x11865=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11864)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11864)));
IkReal gconst10=(x11863*x11865);
IkReal gconst11=((1.0)*r10*x11865);
IkReal x11867=((1.0)*cj3);
CheckValue<IkReal> x11872=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11872.valid){
continue;
}
IkReal x11868=x11872.value;
IkReal x11869=(cj3*x11868);
IkReal x11870=(x11867*x11868);
IkReal x11871=((((-1.0)*x11870*(r10*r10)*(r20*r20)))+(((-1.0)*x11867*(r22*r22)))+(((-1.0)*x11870*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x11869)));
j4eval[0]=x11871;
j4eval[1]=IKsign(x11871);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11873=((-1.0)*r11);
CheckValue<IkReal> x11876 = IKatan2WithCheck(IkReal(x11873),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11876.valid){
continue;
}
IkReal x11874=((1.0)*(x11876.value));
IkReal x11875=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11874)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11874)));
IkReal gconst10=(x11873*x11875);
IkReal gconst11=((1.0)*r10*x11875);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11877=((-1.0)*r11);
CheckValue<IkReal> x11880 = IKatan2WithCheck(IkReal(x11877),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11880.valid){
continue;
}
IkReal x11878=((1.0)*(x11880.value));
IkReal x11879=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11878)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11878)));
IkReal gconst10=(x11877*x11879);
IkReal gconst11=((1.0)*r10*x11879);
IkReal x11881=r12*r12;
IkReal x11882=((1.0)*sj0);
IkReal x11883=(cj0*r02);
IkReal x11884=x11847;
j4eval[0]=((IKabs(((((-1.0)*x11883))+(((-1.0)*r12*x11882)))))+(IKabs((((r12*x11883*x11884))+(((-1.0)*x11882*x11884))+((sj0*x11881*x11884))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11885=((-1.0)*r11);
CheckValue<IkReal> x11888 = IKatan2WithCheck(IkReal(x11885),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11888.valid){
continue;
}
IkReal x11886=((1.0)*(x11888.value));
IkReal x11887=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11886)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11886)));
IkReal gconst10=(x11885*x11887);
IkReal gconst11=((1.0)*r10*x11887);
IkReal x11889=r12*r12;
IkReal x11890=(cj1*cj2*r22);
IkReal x11891=(r22*sj1*sj2);
CheckValue<IkReal> x11895=IKPowWithIntegerCheck(((-1.0)+x11889),-1);
if(!x11895.valid){
continue;
}
IkReal x11892=x11895.value;
if((((1.0)+(((-1.0)*x11889)))) < -0.00001)
continue;
IkReal x11893=IKsqrt(((1.0)+(((-1.0)*x11889))));
IkReal x11894=(r12*x11892*x11893);
j4eval[0]=((IKabs(((((-1.0)*x11890))+x11891)))+(IKabs((((x11890*x11894))+(((-1.0)*x11891*x11894))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11896=((-1.0)*r11);
CheckValue<IkReal> x11899 = IKatan2WithCheck(IkReal(x11896),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11899.valid){
continue;
}
IkReal x11897=((1.0)*(x11899.value));
IkReal x11898=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11897)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11897)));
IkReal gconst10=(x11896*x11898);
IkReal gconst11=((1.0)*r10*x11898);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11900=((-1.0)*r11);
CheckValue<IkReal> x11903 = IKatan2WithCheck(IkReal(x11900),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11903.valid){
continue;
}
IkReal x11901=((1.0)*(x11903.value));
IkReal x11902=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11901)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11901)));
IkReal gconst10=(x11900*x11902);
IkReal gconst11=((1.0)*r10*x11902);
IkReal x11904=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11908=IKPowWithIntegerCheck(x11904,-1);
if(!x11908.valid){
continue;
}
IkReal x11905=x11908.value;
IkReal x11906=((1.0)*x11905);
IkReal x11907=((((-1.0)*x11906*(r01*r01)*(r11*r11)))+(((-1.0)*x11906*(r00*r00)*(r10*r10)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x11905)));
j4eval[0]=x11907;
j4eval[1]=IKsign(x11907);
j4eval[2]=r02;
j4eval[3]=x11904;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11909=((-1.0)*r11);
CheckValue<IkReal> x11912 = IKatan2WithCheck(IkReal(x11909),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11912.valid){
continue;
}
IkReal x11910=((1.0)*(x11912.value));
IkReal x11911=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11910)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11910)));
IkReal gconst10=(x11909*x11911);
IkReal gconst11=((1.0)*r10*x11911);
IkReal x11913=r12*r12;
IkReal x11914=(cj1*cj2*r22);
IkReal x11915=(r22*sj1*sj2);
CheckValue<IkReal> x11919=IKPowWithIntegerCheck(((-1.0)+x11913),-1);
if(!x11919.valid){
continue;
}
IkReal x11916=x11919.value;
if((((1.0)+(((-1.0)*x11913)))) < -0.00001)
continue;
IkReal x11917=IKsqrt(((1.0)+(((-1.0)*x11913))));
IkReal x11918=(r12*x11916*x11917);
j4eval[0]=((IKabs((x11915+(((-1.0)*x11914)))))+(IKabs((((x11914*x11918))+(((-1.0)*x11915*x11918))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11920=(gconst10*r21);
IkReal x11921=(gconst11*r20);
IkReal x11922=(sj1*sj2);
IkReal x11923=(cj1*cj2);
CheckValue<IkReal> x11924=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x11921*x11921)+(((-2.0)*x11920*x11921))+(x11920*x11920))),-1);
if(!x11924.valid){
continue;
}
CheckValue<IkReal> x11925 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11923))+((r22*x11922)))),IkReal(((((-1.0)*x11920*x11923))+((x11921*x11923))+(((-1.0)*x11921*x11922))+((x11920*x11922)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11924.value)))+(x11925.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11926=IKsin(j4);
IkReal x11927=IKcos(j4);
IkReal x11928=((1.0)*cj2);
IkReal x11929=((1.0)*x11927);
IkReal x11930=(gconst10*x11926);
IkReal x11931=((1.0)*x11926);
IkReal x11932=(gconst11*x11927);
IkReal x11933=(gconst11*x11931);
evalcond[0]=(((r21*x11930))+(((-1.0)*r22*x11929))+(((-1.0)*r20*x11933)));
evalcond[1]=((((-1.0)*r10*x11933))+((r11*x11930))+(((-1.0)*r12*x11929)));
evalcond[2]=((((-1.0)*r02*x11931))+((r00*x11932))+(((-1.0)*gconst10*r01*x11929)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11929))+(((-1.0)*r00*x11933))+((r01*x11930)));
evalcond[4]=((((-1.0)*cj1*x11928))+((r20*x11932))+((sj1*sj2))+(((-1.0)*r22*x11931))+(((-1.0)*gconst10*r21*x11929)));
evalcond[5]=(((r10*x11932))+(((-1.0)*gconst10*r11*x11929))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x11931))+(((-1.0)*sj1*x11928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11934=(gconst11*r00);
IkReal x11935=(gconst10*r01);
CheckValue<IkReal> x11936=IKPowWithIntegerCheck(IKsign(((((2.0)*x11934*x11935))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11935*x11935)))+(((-1.0)*(x11934*x11934))))),-1);
if(!x11936.valid){
continue;
}
CheckValue<IkReal> x11937 = IKatan2WithCheck(IkReal((x11934+(((-1.0)*x11935)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11936.value)))+(x11937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11938=IKsin(j4);
IkReal x11939=IKcos(j4);
IkReal x11940=((1.0)*cj2);
IkReal x11941=((1.0)*x11939);
IkReal x11942=(gconst10*x11938);
IkReal x11943=((1.0)*x11938);
IkReal x11944=(gconst11*x11939);
IkReal x11945=(gconst11*x11943);
evalcond[0]=((((-1.0)*r20*x11945))+(((-1.0)*r22*x11941))+((r21*x11942)));
evalcond[1]=(((r11*x11942))+(((-1.0)*r12*x11941))+(((-1.0)*r10*x11945)));
evalcond[2]=((((-1.0)*r02*x11943))+((r00*x11944))+(((-1.0)*gconst10*r01*x11941)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11941))+(((-1.0)*r00*x11945))+((r01*x11942)));
evalcond[4]=((((-1.0)*cj1*x11940))+(((-1.0)*gconst10*r21*x11941))+((r20*x11944))+(((-1.0)*r22*x11943))+((sj1*sj2)));
evalcond[5]=((((-1.0)*gconst10*r11*x11941))+(((-1.0)*sj1*x11940))+(((-1.0)*cj1*sj2))+((r10*x11944))+(((-1.0)*r12*x11943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11946 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11946.valid){
continue;
}
CheckValue<IkReal> x11947=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11946.value)+(((1.5707963267949)*(x11947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11948=IKsin(j4);
IkReal x11949=IKcos(j4);
IkReal x11950=((1.0)*cj2);
IkReal x11951=((1.0)*x11949);
IkReal x11952=(gconst10*x11948);
IkReal x11953=((1.0)*x11948);
IkReal x11954=(gconst11*x11949);
IkReal x11955=(gconst11*x11953);
evalcond[0]=((((-1.0)*r20*x11955))+((r21*x11952))+(((-1.0)*r22*x11951)));
evalcond[1]=((((-1.0)*r12*x11951))+((r11*x11952))+(((-1.0)*r10*x11955)));
evalcond[2]=((((-1.0)*gconst10*r01*x11951))+(((-1.0)*r02*x11953))+((r00*x11954)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11951))+(((-1.0)*r00*x11955))+((r01*x11952)));
evalcond[4]=((((-1.0)*cj1*x11950))+(((-1.0)*gconst10*r21*x11951))+((r20*x11954))+((sj1*sj2))+(((-1.0)*r22*x11953)));
evalcond[5]=((((-1.0)*r12*x11953))+(((-1.0)*gconst10*r11*x11951))+(((-1.0)*sj1*x11950))+(((-1.0)*cj1*sj2))+((r10*x11954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11956=((-1.0)*r11);
CheckValue<IkReal> x11959 = IKatan2WithCheck(IkReal(x11956),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11959.valid){
continue;
}
IkReal x11957=((1.0)*(x11959.value));
IkReal x11958=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11957)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11957)));
IkReal gconst10=(x11956*x11958);
IkReal gconst11=((1.0)*r10*x11958);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11960=((-1.0)*r11);
CheckValue<IkReal> x11963 = IKatan2WithCheck(IkReal(x11960),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11963.valid){
continue;
}
IkReal x11961=((1.0)*(x11963.value));
IkReal x11962=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11961)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11961)));
IkReal gconst10=(x11960*x11962);
IkReal gconst11=((1.0)*r10*x11962);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11964=((-1.0)*r11);
CheckValue<IkReal> x11967 = IKatan2WithCheck(IkReal(x11964),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11967.valid){
continue;
}
IkReal x11965=((1.0)*(x11967.value));
IkReal x11966=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11965)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11965)));
IkReal gconst10=(x11964*x11966);
IkReal gconst11=((1.0)*r10*x11966);
IkReal x11968=r12*r12;
CheckValue<IkReal> x11971=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11968))),-1);
if(!x11971.valid){
continue;
}
IkReal x11969=x11971.value;
IkReal x11970=((1.0)*x11969);
j4eval[0]=IKsign((x11968+((x11970*(r11*r11*r11*r11)))+((x11970*(r10*r10*r10*r10)))+(((2.0)*x11969*(r10*r10)*(r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11972=(cj2*sj1);
IkReal x11973=(gconst10*r11);
IkReal x11974=(gconst11*r10);
IkReal x11975=(cj1*sj2);
CheckValue<IkReal> x11976 = IKatan2WithCheck(IkReal((((r12*x11972))+((r12*x11975)))),IkReal((((x11972*x11973))+((x11973*x11975))+(((-1.0)*x11972*x11974))+(((-1.0)*x11974*x11975)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11976.valid){
continue;
}
CheckValue<IkReal> x11977=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x11973*x11974))+(x11973*x11973)+(x11974*x11974))),-1);
if(!x11977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11976.value)+(((1.5707963267949)*(x11977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11978=IKsin(j4);
IkReal x11979=IKcos(j4);
IkReal x11980=((1.0)*x11979);
IkReal x11981=(gconst10*x11978);
IkReal x11982=((1.0)*x11978);
IkReal x11983=(gconst11*x11979);
IkReal x11984=(gconst11*x11982);
evalcond[0]=(((r21*x11981))+(((-1.0)*r22*x11980))+(((-1.0)*r20*x11984)));
evalcond[1]=((((-1.0)*r12*x11980))+(((-1.0)*r10*x11984))+((r11*x11981)));
evalcond[2]=((((-1.0)*gconst10*r01*x11980))+(((-1.0)*r02*x11982))+((r00*x11983)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11980))+(((-1.0)*r00*x11984))+((r01*x11981)));
evalcond[4]=((((-1.0)*r12*x11982))+((cj2*sj1))+((r10*x11983))+(((-1.0)*gconst10*r11*x11980))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11980))+((r20*x11983))+(((-1.0)*r22*x11982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11985=(gconst11*r00);
IkReal x11986=(gconst10*r01);
CheckValue<IkReal> x11987=IKPowWithIntegerCheck(IKsign(((x11985*x11985)+(((-2.0)*x11985*x11986))+(r02*r02)+(x11986*x11986))),-1);
if(!x11987.valid){
continue;
}
CheckValue<IkReal> x11988 = IKatan2WithCheck(IkReal((x11985+(((-1.0)*x11986)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11987.value)))+(x11988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11989=IKsin(j4);
IkReal x11990=IKcos(j4);
IkReal x11991=((1.0)*x11990);
IkReal x11992=(gconst10*x11989);
IkReal x11993=((1.0)*x11989);
IkReal x11994=(gconst11*x11990);
IkReal x11995=(gconst11*x11993);
evalcond[0]=(((r21*x11992))+(((-1.0)*r20*x11995))+(((-1.0)*r22*x11991)));
evalcond[1]=((((-1.0)*r12*x11991))+(((-1.0)*r10*x11995))+((r11*x11992)));
evalcond[2]=((((-1.0)*r02*x11993))+((r00*x11994))+(((-1.0)*gconst10*r01*x11991)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11991))+((r01*x11992))+(((-1.0)*r00*x11995)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x11993))+(((-1.0)*gconst10*r11*x11991))+((r10*x11994)));
evalcond[5]=(((r20*x11994))+(((-1.0)*cj1*cj2))+(((-1.0)*gconst10*r21*x11991))+((sj1*sj2))+(((-1.0)*r22*x11993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11996=((1.0)*gconst11);
CheckValue<IkReal> x11997=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11996)))),-1);
if(!x11997.valid){
continue;
}
CheckValue<IkReal> x11998 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11996)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11997.value)))+(x11998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11999=IKsin(j4);
IkReal x12000=IKcos(j4);
IkReal x12001=((1.0)*x12000);
IkReal x12002=(gconst10*x11999);
IkReal x12003=((1.0)*x11999);
IkReal x12004=(gconst11*x12000);
IkReal x12005=(gconst11*x12003);
evalcond[0]=(((r21*x12002))+(((-1.0)*r22*x12001))+(((-1.0)*r20*x12005)));
evalcond[1]=((((-1.0)*r10*x12005))+(((-1.0)*r12*x12001))+((r11*x12002)));
evalcond[2]=((((-1.0)*gconst10*r01*x12001))+((r00*x12004))+(((-1.0)*r02*x12003)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12005))+((r01*x12002))+(((-1.0)*r02*x12001)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst10*r11*x12001))+(((-1.0)*r12*x12003))+((r10*x12004)));
evalcond[5]=(((r20*x12004))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12001))+(((-1.0)*r22*x12003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12006=((-1.0)*r11);
IkReal x12007=((-1.0)*r10);
CheckValue<IkReal> x12009 = IKatan2WithCheck(IkReal(x12006),IkReal(x12007),IKFAST_ATAN2_MAGTHRESH);
if(!x12009.valid){
continue;
}
IkReal x12008=((1.0)*(x12009.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12008)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12007);
rxp1_1=(px*r21);
rxp1_2=(px*x12006);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12008)));
IkReal gconst10=x12006;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12010=((-1.0)*r11);
IkReal x12011=((-1.0)*r10);
CheckValue<IkReal> x12013 = IKatan2WithCheck(IkReal(x12010),IkReal(x12011),IKFAST_ATAN2_MAGTHRESH);
if(!x12013.valid){
continue;
}
IkReal x12012=((1.0)*(x12013.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12012)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12011);
rxp1_1=(px*r21);
rxp1_2=(px*x12010);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12012)));
IkReal gconst10=x12010;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12014=((-1.0)*r11);
IkReal x12015=((-1.0)*r10);
CheckValue<IkReal> x12017 = IKatan2WithCheck(IkReal(x12014),IkReal(x12015),IKFAST_ATAN2_MAGTHRESH);
if(!x12017.valid){
continue;
}
IkReal x12016=((1.0)*(x12017.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12016)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12015);
rxp1_1=(px*r21);
rxp1_2=(px*x12014);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12016)));
IkReal gconst10=x12014;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12020=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x12020.valid){
continue;
}
IkReal x12018=x12020.value;
IkReal x12019=(sj0*x12018);
cj4array[0]=(((cj1*sj2*x12019))+((cj2*sj1*x12019)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12021=IKsin(j4);
IkReal x12022=IKcos(j4);
IkReal x12023=(gconst10*r21);
IkReal x12024=(gconst11*r20);
IkReal x12025=((1.0)*x12021);
IkReal x12026=((1.0)*x12022);
evalcond[0]=((-1.0)*r02*x12021);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12026)));
evalcond[2]=(((x12021*x12023))+(((-1.0)*x12024*x12025)));
evalcond[3]=(((gconst10*r11*x12021))+(((-1.0)*gconst11*r10*x12025)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x12022*x12024))+(((-1.0)*x12023*x12026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12028=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12028.valid){
continue;
}
IkReal x12027=x12028.value;
cj4array[0]=(((cj1*cj2*x12027))+(((-1.0)*sj1*sj2*x12027)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12029=IKsin(j4);
IkReal x12030=IKcos(j4);
IkReal x12031=((1.0)*sj0);
IkReal x12032=(gconst10*x12029);
IkReal x12033=((1.0)*x12030);
IkReal x12034=((1.0)*gconst11*x12029);
evalcond[0]=((-1.0)*r02*x12029);
evalcond[1]=((((-1.0)*x12031))+(((-1.0)*r02*x12033)));
evalcond[2]=((((-1.0)*r20*x12034))+((r21*x12032)));
evalcond[3]=(((r11*x12032))+(((-1.0)*r10*x12034)));
evalcond[4]=((((-1.0)*cj2*sj1*x12031))+(((-1.0)*cj1*sj2*x12031))+(((-1.0)*gconst10*r11*x12033))+((gconst11*r10*x12030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12035=IKPowWithIntegerCheck(r02,-1);
if(!x12035.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12035.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12036=IKsin(j4);
IkReal x12037=IKcos(j4);
IkReal x12038=(gconst10*r21);
IkReal x12039=((1.0)*sj0);
IkReal x12040=(gconst10*r11);
IkReal x12041=(gconst11*x12037);
IkReal x12042=((1.0)*x12037);
IkReal x12043=((1.0)*gconst11*x12036);
evalcond[0]=((-1.0)*r02*x12036);
evalcond[1]=((((-1.0)*r20*x12043))+((x12036*x12038)));
evalcond[2]=(((x12036*x12040))+(((-1.0)*r10*x12043)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x12041))+(((-1.0)*x12038*x12042)));
evalcond[4]=(((r10*x12041))+(((-1.0)*cj2*sj1*x12039))+(((-1.0)*x12040*x12042))+(((-1.0)*cj1*sj2*x12039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12044=((1.0)*gconst11);
CheckValue<IkReal> x12045 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x12044))+(((-1.0)*cj0*r00*x12044)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12045.valid){
continue;
}
CheckValue<IkReal> x12046=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12045.value)+(((1.5707963267949)*(x12046.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12047=IKsin(j4);
IkReal x12048=IKcos(j4);
IkReal x12049=((1.0)*cj2);
IkReal x12050=((1.0)*sj0);
IkReal x12051=(cj1*sj2);
IkReal x12052=(gconst10*x12047);
IkReal x12053=((1.0)*x12048);
IkReal x12054=(gconst11*x12048);
IkReal x12055=((1.0)*x12047);
IkReal x12056=(gconst11*x12055);
evalcond[0]=((((-1.0)*r20*x12056))+((r21*x12052)));
evalcond[1]=((((-1.0)*r10*x12056))+cj0+(((-1.0)*r12*x12053))+((r11*x12052)));
evalcond[2]=(((r20*x12054))+(((-1.0)*cj1*x12049))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12053)));
evalcond[3]=((((-1.0)*x12050))+((r01*x12052))+(((-1.0)*r02*x12053))+(((-1.0)*r00*x12056)));
evalcond[4]=(((r00*x12054))+(((-1.0)*r02*x12055))+(((-1.0)*cj0*sj1*x12049))+(((-1.0)*gconst10*r01*x12053))+(((-1.0)*cj0*x12051)));
evalcond[5]=(((r10*x12054))+(((-1.0)*sj0*sj1*x12049))+(((-1.0)*gconst10*r11*x12053))+(((-1.0)*r12*x12055))+(((-1.0)*x12050*x12051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12057=(gconst10*r21);
IkReal x12058=(gconst11*r20);
IkReal x12059=(sj1*sj2);
IkReal x12060=(cj1*cj2);
CheckValue<IkReal> x12061=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x12058*x12058)+(((-2.0)*x12057*x12058))+(x12057*x12057))),-1);
if(!x12061.valid){
continue;
}
CheckValue<IkReal> x12062 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12060))+((r22*x12059)))),IkReal(((((-1.0)*x12057*x12060))+((x12057*x12059))+((x12058*x12060))+(((-1.0)*x12058*x12059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12061.value)))+(x12062.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12063=IKsin(j4);
IkReal x12064=IKcos(j4);
IkReal x12065=((1.0)*cj2);
IkReal x12066=((1.0)*sj0);
IkReal x12067=(cj1*sj2);
IkReal x12068=((1.0)*x12064);
IkReal x12069=(gconst10*x12063);
IkReal x12070=((1.0)*x12063);
IkReal x12071=(gconst11*x12064);
IkReal x12072=(gconst11*x12070);
evalcond[0]=(((r21*x12069))+(((-1.0)*r20*x12072))+(((-1.0)*r22*x12068)));
evalcond[1]=(cj0+(((-1.0)*r10*x12072))+(((-1.0)*r12*x12068))+((r11*x12069)));
evalcond[2]=(((r01*x12069))+(((-1.0)*r02*x12068))+(((-1.0)*x12066))+(((-1.0)*r00*x12072)));
evalcond[3]=((((-1.0)*gconst10*r21*x12068))+((sj1*sj2))+((r20*x12071))+(((-1.0)*r22*x12070))+(((-1.0)*cj1*x12065)));
evalcond[4]=((((-1.0)*cj0*x12067))+(((-1.0)*r02*x12070))+(((-1.0)*cj0*sj1*x12065))+(((-1.0)*gconst10*r01*x12068))+((r00*x12071)));
evalcond[5]=((((-1.0)*sj0*sj1*x12065))+(((-1.0)*x12066*x12067))+((r10*x12071))+(((-1.0)*gconst10*r11*x12068))+(((-1.0)*r12*x12070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12073=((1.0)*sj0);
IkReal x12074=((1.0)*gconst10);
CheckValue<IkReal> x12075 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12073)))),IkReal(((((-1.0)*gconst10*r11*x12073))+(((-1.0)*cj0*r01*x12074))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12075.valid){
continue;
}
CheckValue<IkReal> x12076=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12074))+(((-1.0)*gconst11*r21)))),-1);
if(!x12076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12075.value)+(((1.5707963267949)*(x12076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12077=IKsin(j4);
IkReal x12078=IKcos(j4);
IkReal x12079=((1.0)*cj2);
IkReal x12080=((1.0)*sj0);
IkReal x12081=(cj1*sj2);
IkReal x12082=((1.0)*x12078);
IkReal x12083=(gconst10*x12077);
IkReal x12084=((1.0)*x12077);
IkReal x12085=(gconst11*x12078);
IkReal x12086=(gconst11*x12084);
evalcond[0]=((((-1.0)*r22*x12082))+((r21*x12083))+(((-1.0)*r20*x12086)));
evalcond[1]=((((-1.0)*r12*x12082))+cj0+((r11*x12083))+(((-1.0)*r10*x12086)));
evalcond[2]=((((-1.0)*x12080))+((r01*x12083))+(((-1.0)*r00*x12086))+(((-1.0)*r02*x12082)));
evalcond[3]=(((r20*x12085))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12082))+(((-1.0)*r22*x12084))+(((-1.0)*cj1*x12079)));
evalcond[4]=(((r00*x12085))+(((-1.0)*gconst10*r01*x12082))+(((-1.0)*cj0*x12081))+(((-1.0)*cj0*sj1*x12079))+(((-1.0)*r02*x12084)));
evalcond[5]=((((-1.0)*r12*x12084))+(((-1.0)*sj0*sj1*x12079))+(((-1.0)*x12080*x12081))+(((-1.0)*gconst10*r11*x12082))+((r10*x12085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12087=((1.0)*gconst11);
CheckValue<IkReal> x12088=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12087)))),-1);
if(!x12088.valid){
continue;
}
CheckValue<IkReal> x12089 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12087)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12088.value)))+(x12089.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12090=IKsin(j4);
IkReal x12091=IKcos(j4);
IkReal x12092=((1.0)*cj2);
IkReal x12093=((1.0)*sj0);
IkReal x12094=(cj1*sj2);
IkReal x12095=((1.0)*x12091);
IkReal x12096=(gconst10*x12090);
IkReal x12097=((1.0)*x12090);
IkReal x12098=(gconst11*x12091);
IkReal x12099=(gconst11*x12097);
evalcond[0]=((((-1.0)*r20*x12099))+(((-1.0)*r22*x12095))+((r21*x12096)));
evalcond[1]=(((r11*x12096))+cj0+(((-1.0)*r10*x12099))+(((-1.0)*r12*x12095)));
evalcond[2]=(((r01*x12096))+(((-1.0)*r02*x12095))+(((-1.0)*x12093))+(((-1.0)*r00*x12099)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*gconst10*r21*x12095))+((r20*x12098))+(((-1.0)*r22*x12097))+(((-1.0)*cj1*x12092)));
evalcond[4]=(((r00*x12098))+(((-1.0)*cj0*x12094))+(((-1.0)*cj0*sj1*x12092))+(((-1.0)*r02*x12097))+(((-1.0)*gconst10*r01*x12095)));
evalcond[5]=((((-1.0)*x12093*x12094))+(((-1.0)*gconst10*r11*x12095))+((r10*x12098))+(((-1.0)*r12*x12097))+(((-1.0)*sj0*sj1*x12092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12100=((-1.0)*r11);
CheckValue<IkReal> x12103 = IKatan2WithCheck(IkReal(x12100),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12103.valid){
continue;
}
IkReal x12101=((1.0)*(x12103.value));
IkReal x12102=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12101)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12101)));
IkReal gconst10=(x12100*x12102);
IkReal gconst11=((1.0)*r10*x12102);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12104=((-1.0)*r11);
CheckValue<IkReal> x12107 = IKatan2WithCheck(IkReal(x12104),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12107.valid){
continue;
}
IkReal x12105=((1.0)*(x12107.value));
IkReal x12106=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12105)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12105)));
IkReal gconst10=(x12104*x12106);
IkReal gconst11=((1.0)*r10*x12106);
IkReal x12108=r12*r12;
IkReal x12109=((1.0)*sj0);
IkReal x12110=(cj0*r02);
IkReal x12111=x11847;
j4eval[0]=((IKabs(((((-1.0)*x12110))+(((-1.0)*r12*x12109)))))+(IKabs((((sj0*x12108*x12111))+((r12*x12110*x12111))+(((-1.0)*x12109*x12111))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12112=((-1.0)*r11);
CheckValue<IkReal> x12115 = IKatan2WithCheck(IkReal(x12112),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12115.valid){
continue;
}
IkReal x12113=((1.0)*(x12115.value));
IkReal x12114=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12113)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12113)));
IkReal gconst10=(x12112*x12114);
IkReal gconst11=((1.0)*r10*x12114);
IkReal x12116=r12*r12;
IkReal x12117=((1.0)+(((-1.0)*x12116)));
IkReal x12118=(r22*sj1*sj2);
IkReal x12119=(cj1*cj2*r22);
CheckValue<IkReal> x12126=IKPowWithIntegerCheck(x12117,-1);
if(!x12126.valid){
continue;
}
IkReal x12120=x12126.value;
CheckValue<IkReal> x12127=IKPowWithIntegerCheck(((-1.0)+x12116),-1);
if(!x12127.valid){
continue;
}
IkReal x12121=x12127.value;
IkReal x12122=((1.0)*x12120);
if((x12117) < -0.00001)
continue;
IkReal x12123=IKsqrt(x12117);
IkReal x12124=(r12*x12121*x12123);
IkReal x12125=((((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x12120))+(((-1.0)*x12122*(r11*r11)*(r21*r21)))+(((-1.0)*x12122*(r10*r10)*(r20*r20))));
j4eval[0]=x12125;
j4eval[1]=((IKabs(((((-1.0)*x12119))+x12118)))+(IKabs((((x12119*x12124))+(((-1.0)*x12118*x12124))))));
j4eval[2]=IKsign(x12125);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12128=((-1.0)*r11);
CheckValue<IkReal> x12131 = IKatan2WithCheck(IkReal(x12128),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12131.valid){
continue;
}
IkReal x12129=((1.0)*(x12131.value));
IkReal x12130=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12129)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12129)));
IkReal gconst10=(x12128*x12130);
IkReal gconst11=((1.0)*r10*x12130);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12132=((-1.0)*r11);
CheckValue<IkReal> x12135 = IKatan2WithCheck(IkReal(x12132),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12135.valid){
continue;
}
IkReal x12133=((1.0)*(x12135.value));
IkReal x12134=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12133)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12133)));
IkReal gconst10=(x12132*x12134);
IkReal gconst11=((1.0)*r10*x12134);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12136=((-1.0)*r11);
CheckValue<IkReal> x12139 = IKatan2WithCheck(IkReal(x12136),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12139.valid){
continue;
}
IkReal x12137=((1.0)*(x12139.value));
IkReal x12138=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12137)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12137)));
IkReal gconst10=(x12136*x12138);
IkReal gconst11=((1.0)*r10*x12138);
IkReal x12140=(cj1*r02*sj2);
IkReal x12141=(cj2*r02*sj1);
IkReal x12142=x11847;
IkReal x12143=(r12*x12142);
j4eval[0]=((IKabs((x12141+x12140)))+(IKabs((((x12140*x12143))+((x12141*x12143))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12144=(cj1*sj2);
IkReal x12145=(cj2*sj1);
IkReal x12146=(gconst11*r00);
IkReal x12147=((1.0)*gconst10*r01);
CheckValue<IkReal> x12148=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12148.valid){
continue;
}
CheckValue<IkReal> x12149 = IKatan2WithCheck(IkReal(((((-1.0)*x12145*x12147))+(((-1.0)*x12144*x12147))+((x12145*x12146))+((x12144*x12146)))),IkReal((((r02*x12145))+((r02*x12144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12148.value)))+(x12149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12150=IKcos(j4);
IkReal x12151=IKsin(j4);
IkReal x12152=((1.0)*cj2);
IkReal x12153=((1.0)*x12150);
IkReal x12154=(gconst10*x12150);
IkReal x12155=(gconst10*x12151);
IkReal x12156=((1.0)*gconst11*x12151);
evalcond[0]=(((r02*x12151))+((r01*x12154))+(((-1.0)*gconst11*r00*x12153)));
evalcond[1]=((((-1.0)*r22*x12153))+((r21*x12155))+(((-1.0)*r20*x12156)));
evalcond[2]=((((-1.0)*r12*x12153))+((r11*x12155))+(((-1.0)*r10*x12156)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12153))+(((-1.0)*r00*x12156))+((r01*x12155)));
evalcond[4]=((((-1.0)*gconst11*r20*x12153))+((r22*x12151))+((sj1*sj2))+((r21*x12154))+(((-1.0)*cj1*x12152)));
evalcond[5]=((((-1.0)*gconst11*r10*x12153))+((r12*x12151))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12152))+((r11*x12154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12157=(gconst10*r01);
IkReal x12158=(gconst11*r00);
CheckValue<IkReal> x12159 = IKatan2WithCheck(IkReal(((((-1.0)*x12158))+x12157)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12159.valid){
continue;
}
CheckValue<IkReal> x12160=IKPowWithIntegerCheck(IKsign(((x12158*x12158)+(x12157*x12157)+(((-2.0)*x12157*x12158))+(r02*r02))),-1);
if(!x12160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12159.value)+(((1.5707963267949)*(x12160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12161=IKcos(j4);
IkReal x12162=IKsin(j4);
IkReal x12163=((1.0)*cj2);
IkReal x12164=((1.0)*x12161);
IkReal x12165=(gconst10*x12161);
IkReal x12166=(gconst10*x12162);
IkReal x12167=((1.0)*gconst11*x12162);
evalcond[0]=((((-1.0)*gconst11*r00*x12164))+((r02*x12162))+((r01*x12165)));
evalcond[1]=(((r21*x12166))+(((-1.0)*r22*x12164))+(((-1.0)*r20*x12167)));
evalcond[2]=((((-1.0)*r10*x12167))+((r11*x12166))+(((-1.0)*r12*x12164)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12167))+((r01*x12166))+(((-1.0)*r02*x12164)));
evalcond[4]=(((r21*x12165))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12164))+(((-1.0)*cj1*x12163))+((r22*x12162)));
evalcond[5]=((((-1.0)*gconst11*r10*x12164))+(((-1.0)*sj1*x12163))+(((-1.0)*cj1*sj2))+((r11*x12165))+((r12*x12162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12168 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12168.valid){
continue;
}
CheckValue<IkReal> x12169=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12168.value)+(((1.5707963267949)*(x12169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12170=IKcos(j4);
IkReal x12171=IKsin(j4);
IkReal x12172=((1.0)*cj2);
IkReal x12173=((1.0)*x12170);
IkReal x12174=(gconst10*x12170);
IkReal x12175=(gconst10*x12171);
IkReal x12176=((1.0)*gconst11*x12171);
evalcond[0]=((((-1.0)*gconst11*r00*x12173))+((r01*x12174))+((r02*x12171)));
evalcond[1]=(((r21*x12175))+(((-1.0)*r22*x12173))+(((-1.0)*r20*x12176)));
evalcond[2]=((((-1.0)*r10*x12176))+((r11*x12175))+(((-1.0)*r12*x12173)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12176))+((r01*x12175))+(((-1.0)*r02*x12173)));
evalcond[4]=(((r21*x12174))+(((-1.0)*gconst11*r20*x12173))+((sj1*sj2))+(((-1.0)*cj1*x12172))+((r22*x12171)));
evalcond[5]=((((-1.0)*gconst11*r10*x12173))+(((-1.0)*sj1*x12172))+(((-1.0)*cj1*sj2))+((r11*x12174))+((r12*x12171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12177=((-1.0)*r11);
CheckValue<IkReal> x12180 = IKatan2WithCheck(IkReal(x12177),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12180.valid){
continue;
}
IkReal x12178=((1.0)*(x12180.value));
IkReal x12179=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12178)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12178)));
IkReal gconst10=(x12177*x12179);
IkReal gconst11=((1.0)*r10*x12179);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12181=((-1.0)*r11);
CheckValue<IkReal> x12184 = IKatan2WithCheck(IkReal(x12181),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12184.valid){
continue;
}
IkReal x12182=((1.0)*(x12184.value));
IkReal x12183=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12182)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12182)));
IkReal gconst10=(x12181*x12183);
IkReal gconst11=((1.0)*r10*x12183);
IkReal x12185=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12189=IKPowWithIntegerCheck(x12185,-1);
if(!x12189.valid){
continue;
}
IkReal x12186=x12189.value;
IkReal x12187=((1.0)*x12186);
IkReal x12188=((((-1.0)*x12187*(r00*r00)*(r10*r10)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x12186))+(((-1.0)*x12187*(r01*r01)*(r11*r11))));
j4eval[0]=x12188;
j4eval[1]=r02;
j4eval[2]=x12185;
j4eval[3]=IKsign(x12188);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12190=((-1.0)*r11);
CheckValue<IkReal> x12193 = IKatan2WithCheck(IkReal(x12190),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12193.valid){
continue;
}
IkReal x12191=((1.0)*(x12193.value));
IkReal x12192=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12191)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12191)));
IkReal gconst10=(x12190*x12192);
IkReal gconst11=((1.0)*r10*x12192);
IkReal x12194=r12*r12;
IkReal x12195=((1.0)*r02);
IkReal x12196=(cj1*sj2);
IkReal x12197=(cj2*sj1);
CheckValue<IkReal> x12201=IKPowWithIntegerCheck(((-1.0)+x12194),-1);
if(!x12201.valid){
continue;
}
IkReal x12198=x12201.value;
if((((1.0)+(((-1.0)*x12194)))) < -0.00001)
continue;
IkReal x12199=IKsqrt(((1.0)+(((-1.0)*x12194))));
IkReal x12200=(r12*x12198*x12199);
j4eval[0]=((IKabs(((((-1.0)*x12195*x12197))+(((-1.0)*x12195*x12196)))))+(IKabs(((((-1.0)*x12195*x12197*x12200))+(((-1.0)*x12195*x12196*x12200))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12202=(cj1*sj2);
IkReal x12203=(gconst10*r01);
IkReal x12204=(cj2*sj1);
IkReal x12205=((1.0)*r02);
IkReal x12206=((1.0)*gconst11*r00);
CheckValue<IkReal> x12207=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12207.valid){
continue;
}
CheckValue<IkReal> x12208 = IKatan2WithCheck(IkReal(((((-1.0)*x12202*x12206))+(((-1.0)*x12204*x12206))+((x12203*x12204))+((x12202*x12203)))),IkReal(((((-1.0)*x12202*x12205))+(((-1.0)*x12204*x12205)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12207.value)))+(x12208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12209=IKcos(j4);
IkReal x12210=IKsin(j4);
IkReal x12211=((1.0)*x12209);
IkReal x12212=(gconst10*x12209);
IkReal x12213=(gconst10*x12210);
IkReal x12214=((1.0)*gconst11*x12210);
evalcond[0]=((((-1.0)*gconst11*r00*x12211))+((r02*x12210))+((r01*x12212)));
evalcond[1]=((((-1.0)*r22*x12211))+((r21*x12213))+(((-1.0)*r20*x12214)));
evalcond[2]=((((-1.0)*r12*x12211))+(((-1.0)*r10*x12214))+((r11*x12213)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12211))+(((-1.0)*r00*x12214))+((r01*x12213)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12211))+((r12*x12210))+((cj1*sj2))+((r11*x12212)));
evalcond[5]=(((r22*x12210))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12211))+((r21*x12212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12215=(gconst10*r01);
IkReal x12216=(gconst11*r00);
CheckValue<IkReal> x12217 = IKatan2WithCheck(IkReal((x12215+(((-1.0)*x12216)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12217.valid){
continue;
}
CheckValue<IkReal> x12218=IKPowWithIntegerCheck(IKsign(((((2.0)*x12215*x12216))+(((-1.0)*(x12216*x12216)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x12215*x12215))))),-1);
if(!x12218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12217.value)+(((1.5707963267949)*(x12218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12219=IKcos(j4);
IkReal x12220=IKsin(j4);
IkReal x12221=((1.0)*x12219);
IkReal x12222=(gconst10*x12219);
IkReal x12223=(gconst10*x12220);
IkReal x12224=((1.0)*gconst11*x12220);
evalcond[0]=(((r02*x12220))+((r01*x12222))+(((-1.0)*gconst11*r00*x12221)));
evalcond[1]=((((-1.0)*r22*x12221))+((r21*x12223))+(((-1.0)*r20*x12224)));
evalcond[2]=(((r11*x12223))+(((-1.0)*r12*x12221))+(((-1.0)*r10*x12224)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12224))+((r01*x12223))+(((-1.0)*r02*x12221)));
evalcond[4]=(((cj2*sj1))+((r11*x12222))+((cj1*sj2))+((r12*x12220))+(((-1.0)*gconst11*r10*x12221)));
evalcond[5]=(((r22*x12220))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12222))+(((-1.0)*gconst11*r20*x12221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12225=((1.0)*gconst11);
CheckValue<IkReal> x12226 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12226.valid){
continue;
}
CheckValue<IkReal> x12227=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12225)))),-1);
if(!x12227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12226.value)+(((1.5707963267949)*(x12227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12228=IKcos(j4);
IkReal x12229=IKsin(j4);
IkReal x12230=((1.0)*x12228);
IkReal x12231=(gconst10*x12228);
IkReal x12232=(gconst10*x12229);
IkReal x12233=((1.0)*gconst11*x12229);
evalcond[0]=(((r01*x12231))+((r02*x12229))+(((-1.0)*gconst11*r00*x12230)));
evalcond[1]=((((-1.0)*r22*x12230))+(((-1.0)*r20*x12233))+((r21*x12232)));
evalcond[2]=((((-1.0)*r12*x12230))+((r11*x12232))+(((-1.0)*r10*x12233)));
evalcond[3]=((1.0)+((r01*x12232))+(((-1.0)*r00*x12233))+(((-1.0)*r02*x12230)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst11*r10*x12230))+((r11*x12231))+((r12*x12229)));
evalcond[5]=((((-1.0)*gconst11*r20*x12230))+((r22*x12229))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12234=((-1.0)*r11);
IkReal x12235=((-1.0)*r10);
CheckValue<IkReal> x12237 = IKatan2WithCheck(IkReal(x12234),IkReal(x12235),IKFAST_ATAN2_MAGTHRESH);
if(!x12237.valid){
continue;
}
IkReal x12236=((1.0)*(x12237.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12236)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12235);
rxp1_1=(px*r21);
rxp1_2=(px*x12234);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12236)));
IkReal gconst10=x12234;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12238=((-1.0)*r11);
IkReal x12239=((-1.0)*r10);
CheckValue<IkReal> x12241 = IKatan2WithCheck(IkReal(x12238),IkReal(x12239),IKFAST_ATAN2_MAGTHRESH);
if(!x12241.valid){
continue;
}
IkReal x12240=((1.0)*(x12241.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12240)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12239);
rxp1_1=(px*r21);
rxp1_2=(px*x12238);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12240)));
IkReal gconst10=x12238;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12242=((-1.0)*r11);
IkReal x12243=((-1.0)*r10);
CheckValue<IkReal> x12245 = IKatan2WithCheck(IkReal(x12242),IkReal(x12243),IKFAST_ATAN2_MAGTHRESH);
if(!x12245.valid){
continue;
}
IkReal x12244=((1.0)*(x12245.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12244)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12243);
rxp1_1=(px*r21);
rxp1_2=(px*x12242);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12244)));
IkReal gconst10=x12242;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12248=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12248.valid){
continue;
}
IkReal x12246=x12248.value;
IkReal x12247=(sj0*x12246);
cj4array[0]=(((cj2*sj1*x12247))+((cj1*sj2*x12247)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12249=IKsin(j4);
IkReal x12250=IKcos(j4);
IkReal x12251=(gconst10*r21);
IkReal x12252=((1.0)*x12250);
IkReal x12253=((1.0)*gconst11*x12249);
evalcond[0]=(r02*x12249);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12252)));
evalcond[2]=((((-1.0)*r20*x12253))+((x12249*x12251)));
evalcond[3]=(((gconst10*r11*x12249))+(((-1.0)*r10*x12253)));
evalcond[4]=((((-1.0)*gconst11*r20*x12252))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12250*x12251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12255=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12255.valid){
continue;
}
IkReal x12254=x12255.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12254))+((cj1*cj2*x12254)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12256=IKsin(j4);
IkReal x12257=IKcos(j4);
IkReal x12258=((1.0)*sj0);
IkReal x12259=(gconst10*x12256);
IkReal x12260=((1.0)*x12257);
IkReal x12261=((1.0)*gconst11*x12256);
evalcond[0]=(r02*x12256);
evalcond[1]=((((-1.0)*r02*x12260))+(((-1.0)*x12258)));
evalcond[2]=((((-1.0)*r20*x12261))+((r21*x12259)));
evalcond[3]=(((r11*x12259))+(((-1.0)*r10*x12261)));
evalcond[4]=((((-1.0)*cj2*sj1*x12258))+(((-1.0)*gconst11*r10*x12260))+((gconst10*r11*x12257))+(((-1.0)*cj1*sj2*x12258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12262=IKPowWithIntegerCheck(r02,-1);
if(!x12262.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12262.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12263=IKsin(j4);
IkReal x12264=IKcos(j4);
IkReal x12265=(gconst10*r21);
IkReal x12266=((1.0)*cj1);
IkReal x12267=(gconst10*r11);
IkReal x12268=((1.0)*gconst11*x12263);
IkReal x12269=((1.0)*gconst11*x12264);
evalcond[0]=(r02*x12263);
evalcond[1]=(((x12263*x12265))+(((-1.0)*r20*x12268)));
evalcond[2]=(((x12263*x12267))+(((-1.0)*r10*x12268)));
evalcond[3]=((((-1.0)*r20*x12269))+((x12264*x12265))+((sj1*sj2))+(((-1.0)*cj2*x12266)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x12264*x12267))+(((-1.0)*sj0*sj2*x12266))+(((-1.0)*r10*x12269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12270=((1.0)*gconst11);
CheckValue<IkReal> x12271 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x12270))+(((-1.0)*cj0*r00*x12270))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12271.valid){
continue;
}
CheckValue<IkReal> x12272=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12271.value)+(((1.5707963267949)*(x12272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12273=IKsin(j4);
IkReal x12274=IKcos(j4);
IkReal x12275=((1.0)*gconst11);
IkReal x12276=((1.0)*cj2);
IkReal x12277=((1.0)*sj0);
IkReal x12278=(cj1*sj2);
IkReal x12279=(gconst10*x12274);
IkReal x12280=(gconst10*x12273);
IkReal x12281=((1.0)*x12274);
evalcond[0]=((((-1.0)*r20*x12273*x12275))+((r21*x12280)));
evalcond[1]=(cj0+(((-1.0)*r12*x12281))+(((-1.0)*r10*x12273*x12275))+((r11*x12280)));
evalcond[2]=(((r21*x12279))+(((-1.0)*cj1*x12276))+((sj1*sj2))+(((-1.0)*r20*x12274*x12275)));
evalcond[3]=((((-1.0)*r00*x12273*x12275))+(((-1.0)*x12277))+((r01*x12280))+(((-1.0)*r02*x12281)));
evalcond[4]=((((-1.0)*cj0*x12278))+((r02*x12273))+(((-1.0)*r00*x12274*x12275))+(((-1.0)*cj0*sj1*x12276))+((r01*x12279)));
evalcond[5]=((((-1.0)*r10*x12274*x12275))+(((-1.0)*sj0*sj1*x12276))+((r12*x12273))+((r11*x12279))+(((-1.0)*x12277*x12278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12282=(gconst10*r21);
IkReal x12283=(gconst11*r20);
IkReal x12284=(sj1*sj2);
IkReal x12285=(cj1*cj2);
CheckValue<IkReal> x12286 = IKatan2WithCheck(IkReal((((r22*x12284))+(((-1.0)*r22*x12285)))),IkReal((((x12283*x12285))+(((-1.0)*x12283*x12284))+((x12282*x12284))+(((-1.0)*x12282*x12285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12286.valid){
continue;
}
CheckValue<IkReal> x12287=IKPowWithIntegerCheck(IKsign(((((2.0)*x12282*x12283))+(((-1.0)*(r22*r22)))+(((-1.0)*(x12282*x12282)))+(((-1.0)*(x12283*x12283))))),-1);
if(!x12287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12286.value)+(((1.5707963267949)*(x12287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12288=IKsin(j4);
IkReal x12289=IKcos(j4);
IkReal x12290=((1.0)*cj2);
IkReal x12291=((1.0)*sj0);
IkReal x12292=(cj1*sj2);
IkReal x12293=((1.0)*x12289);
IkReal x12294=(gconst10*x12289);
IkReal x12295=(gconst10*x12288);
IkReal x12296=((1.0)*gconst11*x12288);
evalcond[0]=(((r21*x12295))+(((-1.0)*r20*x12296))+(((-1.0)*r22*x12293)));
evalcond[1]=((((-1.0)*r10*x12296))+cj0+((r11*x12295))+(((-1.0)*r12*x12293)));
evalcond[2]=(((r01*x12295))+(((-1.0)*r00*x12296))+(((-1.0)*x12291))+(((-1.0)*r02*x12293)));
evalcond[3]=(((r21*x12294))+((r22*x12288))+((sj1*sj2))+(((-1.0)*cj1*x12290))+(((-1.0)*gconst11*r20*x12293)));
evalcond[4]=((((-1.0)*cj0*sj1*x12290))+((r01*x12294))+((r02*x12288))+(((-1.0)*cj0*x12292))+(((-1.0)*gconst11*r00*x12293)));
evalcond[5]=((((-1.0)*x12291*x12292))+((r11*x12294))+(((-1.0)*gconst11*r10*x12293))+((r12*x12288))+(((-1.0)*sj0*sj1*x12290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12297=((1.0)*sj0);
IkReal x12298=((1.0)*gconst10);
CheckValue<IkReal> x12299 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12297)))),IkReal(((((-1.0)*cj0*r01*x12298))+(((-1.0)*gconst10*r11*x12297))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12299.valid){
continue;
}
CheckValue<IkReal> x12300=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12298))+(((-1.0)*gconst11*r21)))),-1);
if(!x12300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12299.value)+(((1.5707963267949)*(x12300.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12301=IKsin(j4);
IkReal x12302=IKcos(j4);
IkReal x12303=((1.0)*cj2);
IkReal x12304=((1.0)*sj0);
IkReal x12305=(cj1*sj2);
IkReal x12306=((1.0)*x12302);
IkReal x12307=(gconst10*x12302);
IkReal x12308=(gconst10*x12301);
IkReal x12309=((1.0)*gconst11*x12301);
evalcond[0]=((((-1.0)*r20*x12309))+((r21*x12308))+(((-1.0)*r22*x12306)));
evalcond[1]=(cj0+((r11*x12308))+(((-1.0)*r10*x12309))+(((-1.0)*r12*x12306)));
evalcond[2]=((((-1.0)*r02*x12306))+(((-1.0)*r00*x12309))+(((-1.0)*x12304))+((r01*x12308)));
evalcond[3]=((((-1.0)*cj1*x12303))+((r21*x12307))+(((-1.0)*gconst11*r20*x12306))+((sj1*sj2))+((r22*x12301)));
evalcond[4]=((((-1.0)*cj0*x12305))+(((-1.0)*gconst11*r00*x12306))+((r01*x12307))+((r02*x12301))+(((-1.0)*cj0*sj1*x12303)));
evalcond[5]=((((-1.0)*gconst11*r10*x12306))+((r11*x12307))+((r12*x12301))+(((-1.0)*sj0*sj1*x12303))+(((-1.0)*x12304*x12305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12310=((1.0)*gconst11);
CheckValue<IkReal> x12311=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12310)))),-1);
if(!x12311.valid){
continue;
}
CheckValue<IkReal> x12312 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12311.value)))+(x12312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12313=IKsin(j4);
IkReal x12314=IKcos(j4);
IkReal x12315=((1.0)*cj2);
IkReal x12316=((1.0)*sj0);
IkReal x12317=(cj1*sj2);
IkReal x12318=((1.0)*x12314);
IkReal x12319=(gconst10*x12314);
IkReal x12320=(gconst10*x12313);
IkReal x12321=((1.0)*gconst11*x12313);
evalcond[0]=(((r21*x12320))+(((-1.0)*r20*x12321))+(((-1.0)*r22*x12318)));
evalcond[1]=(cj0+(((-1.0)*r12*x12318))+(((-1.0)*r10*x12321))+((r11*x12320)));
evalcond[2]=(((r01*x12320))+(((-1.0)*r02*x12318))+(((-1.0)*r00*x12321))+(((-1.0)*x12316)));
evalcond[3]=((((-1.0)*cj1*x12315))+((r22*x12313))+(((-1.0)*gconst11*r20*x12318))+((sj1*sj2))+((r21*x12319)));
evalcond[4]=((((-1.0)*gconst11*r00*x12318))+((r02*x12313))+(((-1.0)*cj0*sj1*x12315))+((r01*x12319))+(((-1.0)*cj0*x12317)));
evalcond[5]=((((-1.0)*gconst11*r10*x12318))+((r12*x12313))+(((-1.0)*sj0*sj1*x12315))+((r11*x12319))+(((-1.0)*x12316*x12317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12322=((-1.0)*r11);
CheckValue<IkReal> x12325 = IKatan2WithCheck(IkReal(x12322),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12325.valid){
continue;
}
IkReal x12323=((1.0)*(x12325.value));
IkReal x12324=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12323)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12323)));
IkReal gconst10=(x12322*x12324);
IkReal gconst11=((1.0)*r10*x12324);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12326=gconst10*gconst10;
IkReal x12327=gconst11*gconst11;
IkReal x12328=(gconst10*r21);
IkReal x12329=(cj3*r00);
IkReal x12330=(r00*sj3);
IkReal x12331=((1.0)*gconst11);
IkReal x12332=(gconst10*r20);
IkReal x12333=(r01*sj3);
IkReal x12334=(cj3*gconst11*r01);
IkReal x12335=(r21*x12326);
IkReal x12336=(r20*x12327);
CheckValue<IkReal> x12337=IKPowWithIntegerCheck(IKsign((((x12330*x12336))+((x12333*x12335))+(((-1.0)*x12331*x12332*x12333))+(((-1.0)*x12328*x12330*x12331))+((r02*r22*sj3)))),-1);
if(!x12337.valid){
continue;
}
CheckValue<IkReal> x12338 = IKatan2WithCheck(IkReal((((r22*x12334))+((gconst10*r22*x12329)))),IkReal(((((-1.0)*x12329*x12331*x12332))+(((-1.0)*cj3*r01*x12336))+((x12329*x12335))+((x12328*x12334)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12337.value)))+(x12338.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12339=IKsin(j4);
IkReal x12340=IKcos(j4);
IkReal x12341=(sj1*sj2);
IkReal x12342=(gconst10*sj3);
IkReal x12343=(cj3*gconst10);
IkReal x12344=(gconst11*r20);
IkReal x12345=(gconst11*r21);
IkReal x12346=(gconst11*r00);
IkReal x12347=(cj3*gconst11);
IkReal x12348=(gconst11*r10);
IkReal x12349=((1.0)*cj1);
IkReal x12350=(cj2*sj1);
IkReal x12351=(gconst11*sj3);
IkReal x12352=(cj2*x12349);
IkReal x12353=((1.0)*x12340);
IkReal x12354=((1.0)*x12339);
IkReal x12355=(gconst10*x12339);
IkReal x12356=(cj3*x12339);
IkReal x12357=(sj3*x12340);
evalcond[0]=((((-1.0)*x12344*x12354))+((r21*x12355))+(((-1.0)*r22*x12353)));
evalcond[1]=((((-1.0)*x12348*x12354))+((r11*x12355))+(((-1.0)*r12*x12353)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12353))+(((-1.0)*x12346*x12354))+((r01*x12355)));
evalcond[3]=(((r01*x12340*x12343))+((r00*x12342))+((r01*x12351))+((r02*x12356))+(((-1.0)*cj3*x12346*x12353)));
evalcond[4]=((((-1.0)*r01*x12342*x12353))+((r00*x12343))+((x12346*x12357))+((r01*x12347))+(((-1.0)*r02*sj3*x12354)));
evalcond[5]=(((r21*x12340*x12343))+(((-1.0)*cj3*x12344*x12353))+((r20*x12342))+((cj1*sj2))+x12350+((sj3*x12345))+((r22*x12356)));
evalcond[6]=(((r11*x12340*x12343))+(((-1.0)*x12352))+x12341+((r11*x12351))+((r12*x12356))+((r10*x12342))+(((-1.0)*r10*x12347*x12353)));
evalcond[7]=(((x12344*x12357))+((r20*x12343))+(((-1.0)*x12352))+x12341+((cj3*x12345))+(((-1.0)*r21*x12342*x12353))+(((-1.0)*r22*sj3*x12354)));
evalcond[8]=((((-1.0)*x12350))+(((-1.0)*sj2*x12349))+((r11*x12347))+((x12348*x12357))+((r10*x12343))+(((-1.0)*r12*sj3*x12354))+(((-1.0)*r11*x12342*x12353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12358 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12358.valid){
continue;
}
CheckValue<IkReal> x12359=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12358.value)+(((1.5707963267949)*(x12359.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12360=IKsin(j4);
IkReal x12361=IKcos(j4);
IkReal x12362=(sj1*sj2);
IkReal x12363=(gconst10*sj3);
IkReal x12364=(cj3*gconst10);
IkReal x12365=(gconst11*r20);
IkReal x12366=(gconst11*r21);
IkReal x12367=(gconst11*r00);
IkReal x12368=(cj3*gconst11);
IkReal x12369=(gconst11*r10);
IkReal x12370=((1.0)*cj1);
IkReal x12371=(cj2*sj1);
IkReal x12372=(gconst11*sj3);
IkReal x12373=(cj2*x12370);
IkReal x12374=((1.0)*x12361);
IkReal x12375=((1.0)*x12360);
IkReal x12376=(gconst10*x12360);
IkReal x12377=(cj3*x12360);
IkReal x12378=(sj3*x12361);
evalcond[0]=((((-1.0)*x12365*x12375))+(((-1.0)*r22*x12374))+((r21*x12376)));
evalcond[1]=(((r11*x12376))+(((-1.0)*x12369*x12375))+(((-1.0)*r12*x12374)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12374))+(((-1.0)*x12367*x12375))+((r01*x12376)));
evalcond[3]=(((r01*x12361*x12364))+((r02*x12377))+((r00*x12363))+((r01*x12372))+(((-1.0)*cj3*x12367*x12374)));
evalcond[4]=((((-1.0)*r02*sj3*x12375))+((x12367*x12378))+(((-1.0)*r01*x12363*x12374))+((r00*x12364))+((r01*x12368)));
evalcond[5]=(((cj1*sj2))+x12371+((sj3*x12366))+((r22*x12377))+(((-1.0)*cj3*x12365*x12374))+((r21*x12361*x12364))+((r20*x12363)));
evalcond[6]=((((-1.0)*x12373))+((r11*x12372))+((r10*x12363))+x12362+(((-1.0)*r10*x12368*x12374))+((r11*x12361*x12364))+((r12*x12377)));
evalcond[7]=((((-1.0)*x12373))+((x12365*x12378))+x12362+(((-1.0)*r21*x12363*x12374))+((cj3*x12366))+(((-1.0)*r22*sj3*x12375))+((r20*x12364)));
evalcond[8]=(((r11*x12368))+(((-1.0)*r12*sj3*x12375))+((r10*x12364))+(((-1.0)*sj2*x12370))+((x12369*x12378))+(((-1.0)*x12371))+(((-1.0)*r11*x12363*x12374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12379=((-1.0)*r11);
CheckValue<IkReal> x12382 = IKatan2WithCheck(IkReal(x12379),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12382.valid){
continue;
}
IkReal x12380=((1.0)*(x12382.value));
IkReal x12381=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12380)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12380)));
IkReal gconst10=(x12379*x12381);
IkReal gconst11=((1.0)*r10*x12381);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12383=gconst10*gconst10;
IkReal x12384=gconst11*gconst11;
IkReal x12385=(gconst10*r21);
IkReal x12386=(cj3*r00);
IkReal x12387=(r00*sj3);
IkReal x12388=((1.0)*gconst11);
IkReal x12389=(gconst10*r20);
IkReal x12390=(r01*sj3);
IkReal x12391=(cj3*gconst11*r01);
IkReal x12392=(r21*x12383);
IkReal x12393=(r20*x12384);
CheckValue<IkReal> x12394 = IKatan2WithCheck(IkReal((((r22*x12391))+((gconst10*r22*x12386)))),IkReal(((((-1.0)*cj3*r01*x12393))+((x12385*x12391))+(((-1.0)*x12386*x12388*x12389))+((x12386*x12392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12394.valid){
continue;
}
CheckValue<IkReal> x12395=IKPowWithIntegerCheck(IKsign((((x12390*x12392))+(((-1.0)*x12385*x12387*x12388))+((x12387*x12393))+(((-1.0)*x12388*x12389*x12390))+((r02*r22*sj3)))),-1);
if(!x12395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12394.value)+(((1.5707963267949)*(x12395.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12396=IKsin(j4);
IkReal x12397=IKcos(j4);
IkReal x12398=(cj2*sj1);
IkReal x12399=(cj1*sj2);
IkReal x12400=(gconst10*sj3);
IkReal x12401=(cj3*gconst10);
IkReal x12402=(gconst11*r20);
IkReal x12403=(gconst11*r21);
IkReal x12404=(gconst11*r00);
IkReal x12405=(sj1*sj2);
IkReal x12406=(cj3*gconst11);
IkReal x12407=(gconst11*r10);
IkReal x12408=(cj1*cj2);
IkReal x12409=(gconst11*sj3);
IkReal x12410=((1.0)*x12397);
IkReal x12411=((1.0)*x12396);
IkReal x12412=(gconst10*x12396);
IkReal x12413=(cj3*x12396);
IkReal x12414=(sj3*x12397);
IkReal x12415=(x12398+x12399);
evalcond[0]=((((-1.0)*r22*x12410))+((r21*x12412))+(((-1.0)*x12402*x12411)));
evalcond[1]=(((r11*x12412))+(((-1.0)*r12*x12410))+(((-1.0)*x12407*x12411)));
evalcond[2]=((1.0)+((r01*x12412))+(((-1.0)*r02*x12410))+(((-1.0)*x12404*x12411)));
evalcond[3]=(((r01*x12397*x12401))+((r02*x12413))+(((-1.0)*cj3*x12404*x12410))+((r01*x12409))+((r00*x12400)));
evalcond[4]=((((-1.0)*r02*sj3*x12411))+((x12404*x12414))+(((-1.0)*r01*x12400*x12410))+((r01*x12406))+((r00*x12401)));
evalcond[5]=((((-1.0)*cj3*x12402*x12410))+((r21*x12397*x12401))+((sj3*x12403))+((r22*x12413))+((r20*x12400))+x12415);
evalcond[6]=(((r11*x12397*x12401))+((r12*x12413))+((r10*x12400))+x12408+((r11*x12409))+(((-1.0)*x12405))+(((-1.0)*r10*x12406*x12410)));
evalcond[7]=((((-1.0)*r11*x12400*x12410))+((x12407*x12414))+((r10*x12401))+(((-1.0)*r12*sj3*x12411))+x12415+((r11*x12406)));
evalcond[8]=((((-1.0)*r21*x12400*x12410))+((x12402*x12414))+((cj3*x12403))+(((-1.0)*r22*sj3*x12411))+((r20*x12401))+x12405+(((-1.0)*x12408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12416=((1.0)*gconst11);
CheckValue<IkReal> x12417=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12416)))),-1);
if(!x12417.valid){
continue;
}
CheckValue<IkReal> x12418 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12417.value)))+(x12418.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12419=IKsin(j4);
IkReal x12420=IKcos(j4);
IkReal x12421=(cj2*sj1);
IkReal x12422=(cj1*sj2);
IkReal x12423=(gconst10*sj3);
IkReal x12424=(cj3*gconst10);
IkReal x12425=(gconst11*r20);
IkReal x12426=(gconst11*r21);
IkReal x12427=(gconst11*r00);
IkReal x12428=(sj1*sj2);
IkReal x12429=(cj3*gconst11);
IkReal x12430=(gconst11*r10);
IkReal x12431=(cj1*cj2);
IkReal x12432=(gconst11*sj3);
IkReal x12433=((1.0)*x12420);
IkReal x12434=((1.0)*x12419);
IkReal x12435=(gconst10*x12419);
IkReal x12436=(cj3*x12419);
IkReal x12437=(sj3*x12420);
IkReal x12438=(x12422+x12421);
evalcond[0]=(((r21*x12435))+(((-1.0)*x12425*x12434))+(((-1.0)*r22*x12433)));
evalcond[1]=((((-1.0)*x12430*x12434))+(((-1.0)*r12*x12433))+((r11*x12435)));
evalcond[2]=((1.0)+(((-1.0)*x12427*x12434))+(((-1.0)*r02*x12433))+((r01*x12435)));
evalcond[3]=((((-1.0)*cj3*x12427*x12433))+((r02*x12436))+((r01*x12420*x12424))+((r00*x12423))+((r01*x12432)));
evalcond[4]=((((-1.0)*r02*sj3*x12434))+((r01*x12429))+(((-1.0)*r01*x12423*x12433))+((r00*x12424))+((x12427*x12437)));
evalcond[5]=(((r20*x12423))+((r21*x12420*x12424))+(((-1.0)*cj3*x12425*x12433))+((r22*x12436))+x12438+((sj3*x12426)));
evalcond[6]=(((r11*x12420*x12424))+(((-1.0)*x12428))+((r12*x12436))+((r10*x12423))+((r11*x12432))+(((-1.0)*r10*x12429*x12433))+x12431);
evalcond[7]=((((-1.0)*r12*sj3*x12434))+((r10*x12424))+((x12430*x12437))+((r11*x12429))+(((-1.0)*r11*x12423*x12433))+x12438);
evalcond[8]=(((x12425*x12437))+((r20*x12424))+(((-1.0)*r22*sj3*x12434))+((cj3*x12426))+x12428+(((-1.0)*x12431))+(((-1.0)*r21*x12423*x12433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12439=((-1.0)*r11);
IkReal x12440=((-1.0)*r10);
CheckValue<IkReal> x12442 = IKatan2WithCheck(IkReal(x12439),IkReal(x12440),IKFAST_ATAN2_MAGTHRESH);
if(!x12442.valid){
continue;
}
IkReal x12441=((1.0)*(x12442.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12441)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12440);
rxp1_1=(px*r21);
rxp1_2=(px*x12439);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12441)));
IkReal gconst10=x12439;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12443=((-1.0)*r11);
IkReal x12444=((-1.0)*r10);
CheckValue<IkReal> x12446 = IKatan2WithCheck(IkReal(x12443),IkReal(x12444),IKFAST_ATAN2_MAGTHRESH);
if(!x12446.valid){
continue;
}
IkReal x12445=((1.0)*(x12446.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12445)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12444);
rxp1_1=(px*r21);
rxp1_2=(px*x12443);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12445)));
IkReal gconst10=x12443;
IkReal gconst11=((1.0)*r10);
IkReal x12447=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r11*r21*x12447))+(((-1.0)*r10*r20*x12447)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12448=((-1.0)*r11);
IkReal x12449=((-1.0)*r10);
CheckValue<IkReal> x12451 = IKatan2WithCheck(IkReal(x12448),IkReal(x12449),IKFAST_ATAN2_MAGTHRESH);
if(!x12451.valid){
continue;
}
IkReal x12450=((1.0)*(x12451.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12450)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12449);
rxp1_1=(px*r21);
rxp1_2=(px*x12448);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12450)));
IkReal gconst10=x12448;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12453=IKPowWithIntegerCheck(r02,-1);
if(!x12453.valid){
continue;
}
IkReal x12452=x12453.value;
CheckValue<IkReal> x12454=IKPowWithIntegerCheck(cj3,-1);
if(!x12454.valid){
continue;
}
if( IKabs((x12452*(x12454.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12452)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12452*(x12454.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12452))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12452*(x12454.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12452));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12455=IKsin(j4);
IkReal x12456=IKcos(j4);
IkReal x12457=(cj3*r10);
IkReal x12458=((1.0)*gconst11);
IkReal x12459=(sj1*sj2);
IkReal x12460=(gconst11*sj3);
IkReal x12461=(cj3*r11);
IkReal x12462=(cj2*sj1);
IkReal x12463=(gconst10*r20);
IkReal x12464=(gconst10*sj3);
IkReal x12465=((1.0)*cj0);
IkReal x12466=((1.0)*sj0);
IkReal x12467=(cj1*sj2);
IkReal x12468=(cj3*r21);
IkReal x12469=((1.0)*cj1*cj2);
IkReal x12470=(r20*x12456);
IkReal x12471=(gconst10*x12455);
IkReal x12472=(gconst10*x12456);
IkReal x12473=(r02*x12455);
IkReal x12474=((1.0)*x12456);
evalcond[0]=((((-1.0)*r02*x12474))+(((-1.0)*x12466)));
evalcond[1]=((((-1.0)*r20*x12455*x12458))+((r21*x12471)));
evalcond[2]=(cj0+(((-1.0)*r10*x12455*x12458))+((r11*x12471)));
evalcond[3]=(((cj3*x12473))+((cj0*x12459))+(((-1.0)*cj1*cj2*x12465)));
evalcond[4]=((((-1.0)*x12465*x12467))+(((-1.0)*sj3*x12473))+(((-1.0)*x12462*x12465)));
evalcond[5]=(((sj3*x12463))+(((-1.0)*cj3*x12458*x12470))+((x12468*x12472))+x12467+x12462+((r21*x12460)));
evalcond[6]=(((gconst11*x12468))+((cj3*x12463))+(((-1.0)*r21*x12464*x12474))+(((-1.0)*x12469))+x12459+((x12460*x12470)));
evalcond[7]=((((-1.0)*x12456*x12457*x12458))+((x12461*x12472))+((r11*x12460))+((sj0*x12459))+(((-1.0)*cj1*cj2*x12466))+((r10*x12464)));
evalcond[8]=(((gconst11*x12461))+(((-1.0)*r11*x12464*x12474))+(((-1.0)*x12466*x12467))+(((-1.0)*x12462*x12466))+((r10*x12456*x12460))+((gconst10*x12457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12475=((1.0)*r20);
IkReal x12476=((1.0)*gconst11);
CheckValue<IkReal> x12477=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12476))),-1);
if(!x12477.valid){
continue;
}
CheckValue<IkReal> x12478=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12475))+((cj3*gconst10*r21))),-1);
if(!x12478.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12477.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12478.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12475))+(((-1.0)*r21*sj3*x12476)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12477.value)))+IKsqr(((x12478.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12475))+(((-1.0)*r21*sj3*x12476))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12477.value)), ((x12478.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12475))+(((-1.0)*r21*sj3*x12476))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12479=IKsin(j4);
IkReal x12480=IKcos(j4);
IkReal x12481=(cj3*r10);
IkReal x12482=((1.0)*gconst11);
IkReal x12483=(sj1*sj2);
IkReal x12484=(gconst11*sj3);
IkReal x12485=(cj3*r11);
IkReal x12486=(cj2*sj1);
IkReal x12487=(gconst10*r20);
IkReal x12488=(gconst10*sj3);
IkReal x12489=((1.0)*cj0);
IkReal x12490=((1.0)*sj0);
IkReal x12491=(cj1*sj2);
IkReal x12492=(cj3*r21);
IkReal x12493=((1.0)*cj1*cj2);
IkReal x12494=(r20*x12480);
IkReal x12495=(gconst10*x12479);
IkReal x12496=(gconst10*x12480);
IkReal x12497=(r02*x12479);
IkReal x12498=((1.0)*x12480);
evalcond[0]=((((-1.0)*r02*x12498))+(((-1.0)*x12490)));
evalcond[1]=(((r21*x12495))+(((-1.0)*r20*x12479*x12482)));
evalcond[2]=(cj0+(((-1.0)*r10*x12479*x12482))+((r11*x12495)));
evalcond[3]=(((cj3*x12497))+((cj0*x12483))+(((-1.0)*cj1*cj2*x12489)));
evalcond[4]=((((-1.0)*sj3*x12497))+(((-1.0)*x12489*x12491))+(((-1.0)*x12486*x12489)));
evalcond[5]=(((x12492*x12496))+((sj3*x12487))+x12486+x12491+(((-1.0)*cj3*x12482*x12494))+((r21*x12484)));
evalcond[6]=((((-1.0)*r21*x12488*x12498))+((gconst11*x12492))+(((-1.0)*x12493))+((x12484*x12494))+((cj3*x12487))+x12483);
evalcond[7]=((((-1.0)*x12480*x12481*x12482))+((r11*x12484))+((x12485*x12496))+((sj0*x12483))+((r10*x12488))+(((-1.0)*cj1*cj2*x12490)));
evalcond[8]=(((gconst10*x12481))+(((-1.0)*x12486*x12490))+(((-1.0)*r11*x12488*x12498))+(((-1.0)*x12490*x12491))+((r10*x12480*x12484))+((gconst11*x12485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12499=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12499.valid){
continue;
}
CheckValue<IkReal> x12500=IKPowWithIntegerCheck(r02,-1);
if(!x12500.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12499.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12500.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12499.value)))+IKsqr(((-1.0)*sj0*(x12500.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12499.value)), ((-1.0)*sj0*(x12500.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12501=IKsin(j4);
IkReal x12502=IKcos(j4);
IkReal x12503=(cj3*r10);
IkReal x12504=((1.0)*gconst11);
IkReal x12505=(sj1*sj2);
IkReal x12506=(gconst11*sj3);
IkReal x12507=(cj3*r11);
IkReal x12508=(cj2*sj1);
IkReal x12509=(gconst10*r20);
IkReal x12510=(gconst10*sj3);
IkReal x12511=((1.0)*cj0);
IkReal x12512=((1.0)*sj0);
IkReal x12513=(cj1*sj2);
IkReal x12514=(cj3*r21);
IkReal x12515=((1.0)*cj1*cj2);
IkReal x12516=(r20*x12502);
IkReal x12517=(gconst10*x12501);
IkReal x12518=(gconst10*x12502);
IkReal x12519=(r02*x12501);
IkReal x12520=((1.0)*x12502);
evalcond[0]=((((-1.0)*x12512))+(((-1.0)*r02*x12520)));
evalcond[1]=((((-1.0)*r20*x12501*x12504))+((r21*x12517)));
evalcond[2]=(cj0+(((-1.0)*r10*x12501*x12504))+((r11*x12517)));
evalcond[3]=(((cj0*x12505))+(((-1.0)*cj1*cj2*x12511))+((cj3*x12519)));
evalcond[4]=((((-1.0)*sj3*x12519))+(((-1.0)*x12508*x12511))+(((-1.0)*x12511*x12513)));
evalcond[5]=(((sj3*x12509))+((r21*x12506))+x12508+x12513+(((-1.0)*cj3*x12504*x12516))+((x12514*x12518)));
evalcond[6]=((((-1.0)*x12515))+((gconst11*x12514))+(((-1.0)*r21*x12510*x12520))+((cj3*x12509))+((x12506*x12516))+x12505);
evalcond[7]=(((sj0*x12505))+((r11*x12506))+((x12507*x12518))+((r10*x12510))+(((-1.0)*x12502*x12503*x12504))+(((-1.0)*cj1*cj2*x12512)));
evalcond[8]=((((-1.0)*r11*x12510*x12520))+((r10*x12502*x12506))+(((-1.0)*x12512*x12513))+(((-1.0)*x12508*x12512))+((gconst10*x12503))+((gconst11*x12507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12521=((-1.0)*r11);
CheckValue<IkReal> x12524 = IKatan2WithCheck(IkReal(x12521),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12524.valid){
continue;
}
IkReal x12522=((1.0)*(x12524.value));
IkReal x12523=x11847;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12522)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12522)));
IkReal gconst10=(x12521*x12523);
IkReal gconst11=((1.0)*r10*x12523);
IkReal x12525=r12*r12;
IkReal x12526=((1.0)*sj0);
IkReal x12527=(cj0*r02);
IkReal x12528=x11847;
j4eval[0]=((IKabs(((((-1.0)*r12*x12526))+(((-1.0)*x12527)))))+(IKabs((((r12*x12527*x12528))+((sj0*x12525*x12528))+(((-1.0)*x12526*x12528))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12529=((1.0)*r12);
IkReal x12530=(sj1*sj2);
IkReal x12531=((1.0)*r21);
IkReal x12532=(cj3*gconst11);
IkReal x12533=(r11*sj3);
IkReal x12534=(gconst11*r20);
IkReal x12535=((1.0)*sj3);
IkReal x12536=(cj1*cj2);
IkReal x12537=(gconst10*r21*sj3);
IkReal x12538=(cj3*gconst10*r20);
CheckValue<IkReal> x12539=IKPowWithIntegerCheck(((((-1.0)*gconst11*r10*x12534*x12535))+(((-1.0)*x12531*x12533*(gconst10*gconst10)))+((gconst10*x12533*x12534))+((gconst11*r10*x12537))),-1);
if(!x12539.valid){
continue;
}
CheckValue<IkReal> x12540=IKPowWithIntegerCheck(((((-1.0)*gconst10*sj3*x12531))+((sj3*x12534))),-1);
if(!x12540.valid){
continue;
}
if( IKabs(((x12539.value)*(((((-1.0)*cj0*x12534*x12535))+(((-1.0)*r21*x12529*x12532))+(((-1.0)*x12529*x12538))+(((-1.0)*x12529*x12530))+((r12*x12536))+((cj0*x12537)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12540.value)*(((((-1.0)*x12531*x12532))+(((-1.0)*x12538))+(((-1.0)*x12530))+x12536)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12539.value)*(((((-1.0)*cj0*x12534*x12535))+(((-1.0)*r21*x12529*x12532))+(((-1.0)*x12529*x12538))+(((-1.0)*x12529*x12530))+((r12*x12536))+((cj0*x12537))))))+IKsqr(((x12540.value)*(((((-1.0)*x12531*x12532))+(((-1.0)*x12538))+(((-1.0)*x12530))+x12536))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12539.value)*(((((-1.0)*cj0*x12534*x12535))+(((-1.0)*r21*x12529*x12532))+(((-1.0)*x12529*x12538))+(((-1.0)*x12529*x12530))+((r12*x12536))+((cj0*x12537))))), ((x12540.value)*(((((-1.0)*x12531*x12532))+(((-1.0)*x12538))+(((-1.0)*x12530))+x12536))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12541=IKsin(j4);
IkReal x12542=IKcos(j4);
IkReal x12543=(cj3*r10);
IkReal x12544=(gconst11*r20);
IkReal x12545=(gconst11*sj3);
IkReal x12546=(sj1*sj2);
IkReal x12547=(cj3*r11);
IkReal x12548=(r10*sj3);
IkReal x12549=(gconst10*r01);
IkReal x12550=(gconst10*sj3);
IkReal x12551=(cj2*sj1);
IkReal x12552=((1.0)*sj0);
IkReal x12553=(cj1*sj2);
IkReal x12554=(gconst10*r21);
IkReal x12555=(cj3*gconst10);
IkReal x12556=(cj3*gconst11);
IkReal x12557=((1.0)*cj0);
IkReal x12558=((1.0)*x12541);
IkReal x12559=((1.0)*cj1*cj2);
IkReal x12560=(gconst11*x12542);
IkReal x12561=(sj3*x12542);
IkReal x12562=(gconst10*x12541);
IkReal x12563=((1.0)*x12542);
IkReal x12564=(cj3*x12542);
IkReal x12565=(cj3*x12541);
evalcond[0]=((((-1.0)*x12544*x12558))+((x12541*x12554)));
evalcond[1]=(((r11*x12562))+cj0+(((-1.0)*r12*x12563))+(((-1.0)*gconst11*r10*x12558)));
evalcond[2]=((((-1.0)*gconst11*r00*x12558))+(((-1.0)*r02*x12563))+((x12541*x12549))+(((-1.0)*x12552)));
evalcond[3]=(((r20*x12550))+((x12554*x12564))+x12553+x12551+((r21*x12545))+(((-1.0)*cj3*x12544*x12563)));
evalcond[4]=(((r20*x12555))+((x12544*x12561))+((r21*x12556))+x12546+(((-1.0)*r21*x12550*x12563))+(((-1.0)*x12559)));
evalcond[5]=(((x12549*x12564))+((r01*x12545))+((r00*x12550))+(((-1.0)*r00*x12556*x12563))+(((-1.0)*cj1*cj2*x12557))+((cj0*x12546))+((r02*x12565)));
evalcond[6]=((((-1.0)*x12543*x12560))+((r12*x12565))+((gconst10*x12548))+((r11*x12545))+((sj0*x12546))+(((-1.0)*cj1*cj2*x12552))+((gconst10*x12542*x12547)));
evalcond[7]=(((r01*x12556))+((r00*x12555))+(((-1.0)*x12549*x12561))+(((-1.0)*x12553*x12557))+(((-1.0)*r02*sj3*x12558))+((r00*x12542*x12545))+(((-1.0)*x12551*x12557)));
evalcond[8]=((((-1.0)*r11*x12550*x12563))+((r10*x12542*x12545))+((gconst10*x12543))+(((-1.0)*r12*sj3*x12558))+((gconst11*x12547))+(((-1.0)*x12552*x12553))+(((-1.0)*x12551*x12552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12566=((1.0)*sj0);
IkReal x12567=((1.0)*gconst10);
CheckValue<IkReal> x12568 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12566))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12567))+(((-1.0)*gconst10*r11*x12566))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12568.valid){
continue;
}
CheckValue<IkReal> x12569=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12567)))),-1);
if(!x12569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12568.value)+(((1.5707963267949)*(x12569.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12570=IKsin(j4);
IkReal x12571=IKcos(j4);
IkReal x12572=(cj3*r10);
IkReal x12573=(gconst11*r20);
IkReal x12574=(gconst11*sj3);
IkReal x12575=(sj1*sj2);
IkReal x12576=(cj3*r11);
IkReal x12577=(r10*sj3);
IkReal x12578=(gconst10*r01);
IkReal x12579=(gconst10*sj3);
IkReal x12580=(cj2*sj1);
IkReal x12581=((1.0)*sj0);
IkReal x12582=(cj1*sj2);
IkReal x12583=(gconst10*r21);
IkReal x12584=(cj3*gconst10);
IkReal x12585=(cj3*gconst11);
IkReal x12586=((1.0)*cj0);
IkReal x12587=((1.0)*x12570);
IkReal x12588=((1.0)*cj1*cj2);
IkReal x12589=(gconst11*x12571);
IkReal x12590=(sj3*x12571);
IkReal x12591=(gconst10*x12570);
IkReal x12592=((1.0)*x12571);
IkReal x12593=(cj3*x12571);
IkReal x12594=(cj3*x12570);
evalcond[0]=((((-1.0)*x12573*x12587))+((x12570*x12583)));
evalcond[1]=(cj0+(((-1.0)*r12*x12592))+(((-1.0)*gconst11*r10*x12587))+((r11*x12591)));
evalcond[2]=((((-1.0)*r02*x12592))+((x12570*x12578))+(((-1.0)*x12581))+(((-1.0)*gconst11*r00*x12587)));
evalcond[3]=(((r21*x12574))+((r20*x12579))+((x12583*x12593))+x12580+x12582+(((-1.0)*cj3*x12573*x12592)));
evalcond[4]=(((r20*x12584))+((x12573*x12590))+((r21*x12585))+(((-1.0)*r21*x12579*x12592))+x12575+(((-1.0)*x12588)));
evalcond[5]=(((cj0*x12575))+(((-1.0)*r00*x12585*x12592))+((r02*x12594))+((r00*x12579))+((r01*x12574))+(((-1.0)*cj1*cj2*x12586))+((x12578*x12593)));
evalcond[6]=(((r12*x12594))+(((-1.0)*x12572*x12589))+((gconst10*x12571*x12576))+(((-1.0)*cj1*cj2*x12581))+((gconst10*x12577))+((r11*x12574))+((sj0*x12575)));
evalcond[7]=((((-1.0)*x12580*x12586))+((r00*x12584))+((r01*x12585))+(((-1.0)*x12582*x12586))+((r00*x12571*x12574))+(((-1.0)*r02*sj3*x12587))+(((-1.0)*x12578*x12590)));
evalcond[8]=((((-1.0)*x12580*x12581))+((gconst11*x12576))+(((-1.0)*r11*x12579*x12592))+(((-1.0)*x12581*x12582))+(((-1.0)*r12*sj3*x12587))+((gconst10*x12572))+((r10*x12571*x12574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12595=gconst10*gconst10;
IkReal x12596=r21*r21;
IkReal x12597=gconst11*gconst11;
IkReal x12598=r20*r20;
IkReal x12599=((1.0)*cj3);
IkReal x12600=(r20*sj3);
IkReal x12601=(gconst10*gconst11);
IkReal x12602=(cj2*sj1);
IkReal x12603=(gconst10*r21);
IkReal x12604=(cj1*sj2);
IkReal x12605=((1.0)*gconst11*r20);
CheckValue<IkReal> x12606=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12597*x12598*x12599))+(((-1.0)*x12599*(r22*r22)))+(((2.0)*cj3*r20*r21*x12601))+(((-1.0)*x12595*x12596*x12599)))),-1);
if(!x12606.valid){
continue;
}
CheckValue<IkReal> x12607 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((r22*x12604))+((r22*x12602))+((gconst10*r22*x12600)))),IkReal((((x12602*x12603))+((sj3*x12596*x12601))+(((-1.0)*r21*x12597*x12600))+((r21*x12595*x12600))+((x12603*x12604))+(((-1.0)*sj3*x12598*x12601))+(((-1.0)*x12602*x12605))+(((-1.0)*x12604*x12605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12606.value)))+(x12607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12608=IKsin(j4);
IkReal x12609=IKcos(j4);
IkReal x12610=(cj3*r10);
IkReal x12611=(gconst11*r20);
IkReal x12612=(gconst11*sj3);
IkReal x12613=(sj1*sj2);
IkReal x12614=(gconst11*r00);
IkReal x12615=(cj3*r11);
IkReal x12616=(gconst10*sj3);
IkReal x12617=(cj2*sj1);
IkReal x12618=(cj3*r01);
IkReal x12619=((1.0)*sj0);
IkReal x12620=(cj1*sj2);
IkReal x12621=(cj3*r21);
IkReal x12622=(cj3*gconst10);
IkReal x12623=((1.0)*cj0);
IkReal x12624=((1.0)*x12609);
IkReal x12625=((1.0)*x12608);
IkReal x12626=((1.0)*cj1*cj2);
IkReal x12627=(cj3*x12608);
IkReal x12628=(gconst10*x12608);
IkReal x12629=(gconst10*x12609);
evalcond[0]=((((-1.0)*r22*x12624))+((r21*x12628))+(((-1.0)*x12611*x12625)));
evalcond[1]=(cj0+(((-1.0)*r12*x12624))+(((-1.0)*gconst11*r10*x12625))+((r11*x12628)));
evalcond[2]=((((-1.0)*r02*x12624))+((r01*x12628))+(((-1.0)*x12619))+(((-1.0)*x12614*x12625)));
evalcond[3]=(((r22*x12627))+(((-1.0)*cj3*x12611*x12624))+((x12621*x12629))+((r21*x12612))+((r20*x12616))+x12620+x12617);
evalcond[4]=(((sj3*x12609*x12611))+(((-1.0)*x12626))+((gconst11*x12621))+x12613+((r20*x12622))+(((-1.0)*r21*x12616*x12624))+(((-1.0)*r22*sj3*x12625)));
evalcond[5]=(((r02*x12627))+((x12618*x12629))+(((-1.0)*cj1*cj2*x12623))+((r00*x12616))+(((-1.0)*cj3*x12614*x12624))+((r01*x12612))+((cj0*x12613)));
evalcond[6]=((((-1.0)*gconst11*x12610*x12624))+((sj0*x12613))+((x12615*x12629))+((r11*x12612))+((r12*x12627))+(((-1.0)*cj1*cj2*x12619))+((r10*x12616)));
evalcond[7]=((((-1.0)*x12620*x12623))+((gconst11*x12618))+(((-1.0)*r01*x12616*x12624))+((r00*x12609*x12612))+(((-1.0)*r02*sj3*x12625))+(((-1.0)*x12617*x12623))+((r00*x12622)));
evalcond[8]=(((gconst11*x12615))+((r10*x12609*x12612))+(((-1.0)*r11*x12616*x12624))+((gconst10*x12610))+(((-1.0)*x12617*x12619))+(((-1.0)*x12619*x12620))+(((-1.0)*r12*sj3*x12625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12630=((1.0)*sj0);
IkReal x12631=((1.0)*gconst10);
CheckValue<IkReal> x12632 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12630)))),IkReal(((((-1.0)*gconst10*r11*x12630))+(((-1.0)*cj0*r01*x12631))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12632.valid){
continue;
}
CheckValue<IkReal> x12633=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12631))+(((-1.0)*gconst11*r21)))),-1);
if(!x12633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12632.value)+(((1.5707963267949)*(x12633.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12634=IKsin(j4);
IkReal x12635=IKcos(j4);
IkReal x12636=(cj3*r10);
IkReal x12637=(gconst11*r20);
IkReal x12638=(gconst11*sj3);
IkReal x12639=(sj1*sj2);
IkReal x12640=(gconst11*r00);
IkReal x12641=(cj3*r11);
IkReal x12642=(gconst10*sj3);
IkReal x12643=(cj2*sj1);
IkReal x12644=(cj3*r01);
IkReal x12645=((1.0)*sj0);
IkReal x12646=(cj1*sj2);
IkReal x12647=(cj3*r21);
IkReal x12648=(cj3*gconst10);
IkReal x12649=((1.0)*cj0);
IkReal x12650=((1.0)*x12635);
IkReal x12651=((1.0)*x12634);
IkReal x12652=((1.0)*cj1*cj2);
IkReal x12653=(cj3*x12634);
IkReal x12654=(gconst10*x12634);
IkReal x12655=(gconst10*x12635);
evalcond[0]=(((r21*x12654))+(((-1.0)*x12637*x12651))+(((-1.0)*r22*x12650)));
evalcond[1]=(cj0+((r11*x12654))+(((-1.0)*r12*x12650))+(((-1.0)*gconst11*r10*x12651)));
evalcond[2]=((((-1.0)*x12640*x12651))+(((-1.0)*r02*x12650))+(((-1.0)*x12645))+((r01*x12654)));
evalcond[3]=(((r22*x12653))+((r20*x12642))+x12646+x12643+((x12647*x12655))+((r21*x12638))+(((-1.0)*cj3*x12637*x12650)));
evalcond[4]=((((-1.0)*x12652))+((r20*x12648))+((sj3*x12635*x12637))+(((-1.0)*r22*sj3*x12651))+x12639+((gconst11*x12647))+(((-1.0)*r21*x12642*x12650)));
evalcond[5]=((((-1.0)*cj3*x12640*x12650))+((r02*x12653))+((x12644*x12655))+((r01*x12638))+((cj0*x12639))+((r00*x12642))+(((-1.0)*cj1*cj2*x12649)));
evalcond[6]=(((r11*x12638))+((x12641*x12655))+(((-1.0)*gconst11*x12636*x12650))+(((-1.0)*cj1*cj2*x12645))+((sj0*x12639))+((r12*x12653))+((r10*x12642)));
evalcond[7]=((((-1.0)*r02*sj3*x12651))+((r00*x12648))+(((-1.0)*x12643*x12649))+((r00*x12635*x12638))+(((-1.0)*r01*x12642*x12650))+((gconst11*x12644))+(((-1.0)*x12646*x12649)));
evalcond[8]=((((-1.0)*x12645*x12646))+(((-1.0)*x12643*x12645))+((r10*x12635*x12638))+((gconst10*x12636))+(((-1.0)*r12*sj3*x12651))+((gconst11*x12641))+(((-1.0)*r11*x12642*x12650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12656=((1.0)*gconst11);
CheckValue<IkReal> x12657=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12656)))),-1);
if(!x12657.valid){
continue;
}
CheckValue<IkReal> x12658 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12656)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12657.value)))+(x12658.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12659=IKsin(j4);
IkReal x12660=IKcos(j4);
IkReal x12661=(cj3*r10);
IkReal x12662=(gconst11*r20);
IkReal x12663=(gconst11*sj3);
IkReal x12664=(sj1*sj2);
IkReal x12665=(gconst11*r00);
IkReal x12666=(cj3*r11);
IkReal x12667=(gconst10*sj3);
IkReal x12668=(cj2*sj1);
IkReal x12669=(cj3*r01);
IkReal x12670=((1.0)*sj0);
IkReal x12671=(cj1*sj2);
IkReal x12672=(cj3*r21);
IkReal x12673=(cj3*gconst10);
IkReal x12674=((1.0)*cj0);
IkReal x12675=((1.0)*x12660);
IkReal x12676=((1.0)*x12659);
IkReal x12677=((1.0)*cj1*cj2);
IkReal x12678=(cj3*x12659);
IkReal x12679=(gconst10*x12659);
IkReal x12680=(gconst10*x12660);
evalcond[0]=((((-1.0)*x12662*x12676))+((r21*x12679))+(((-1.0)*r22*x12675)));
evalcond[1]=(cj0+(((-1.0)*r12*x12675))+((r11*x12679))+(((-1.0)*gconst11*r10*x12676)));
evalcond[2]=((((-1.0)*x12665*x12676))+(((-1.0)*x12670))+(((-1.0)*r02*x12675))+((r01*x12679)));
evalcond[3]=((((-1.0)*cj3*x12662*x12675))+((r21*x12663))+((x12672*x12680))+((r22*x12678))+x12671+x12668+((r20*x12667)));
evalcond[4]=(((r20*x12673))+(((-1.0)*r21*x12667*x12675))+(((-1.0)*x12677))+((gconst11*x12672))+(((-1.0)*r22*sj3*x12676))+x12664+((sj3*x12660*x12662)));
evalcond[5]=(((r02*x12678))+((r01*x12663))+((cj0*x12664))+(((-1.0)*cj1*cj2*x12674))+((r00*x12667))+(((-1.0)*cj3*x12665*x12675))+((x12669*x12680)));
evalcond[6]=(((sj0*x12664))+((r10*x12667))+((x12666*x12680))+((r12*x12678))+(((-1.0)*gconst11*x12661*x12675))+((r11*x12663))+(((-1.0)*cj1*cj2*x12670)));
evalcond[7]=((((-1.0)*r01*x12667*x12675))+(((-1.0)*r02*sj3*x12676))+((gconst11*x12669))+((r00*x12660*x12663))+((r00*x12673))+(((-1.0)*x12671*x12674))+(((-1.0)*x12668*x12674)));
evalcond[8]=((((-1.0)*r11*x12667*x12675))+((gconst10*x12661))+((gconst11*x12666))+(((-1.0)*x12670*x12671))+((r10*x12660*x12663))+(((-1.0)*r12*sj3*x12676))+(((-1.0)*x12668*x12670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12681=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12681;
j4eval[1]=IKsign(x12681);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12682=((1.0)*cj5);
IkReal x12683=((((-1.0)*r01*x12682))+(((-1.0)*r00*sj5)));
j4eval[0]=x12683;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12682))+((r21*sj5))))));
j4eval[2]=IKsign(x12683);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12684=cj5*cj5;
IkReal x12685=(cj3*r21);
IkReal x12686=(cj5*sj5);
IkReal x12687=((1.0)*cj3);
IkReal x12688=(((r10*x12685*x12686))+(((-1.0)*r11*x12685))+((cj3*r11*r20*x12686))+((r11*x12684*x12685))+(((-1.0)*r10*r20*x12684*x12687))+(((-1.0)*r12*r22*x12687)));
j4eval[0]=x12688;
j4eval[1]=IKsign(x12688);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12689=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12689;
j4eval[1]=IKsign(x12689);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12690=((1.0)*cj5);
IkReal x12691=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12690)));
j4eval[0]=x12691;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12690))))));
j4eval[2]=IKsign(x12691);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12692=cj5*cj5;
IkReal x12693=r11*r11;
IkReal x12694=(r11*sj5);
IkReal x12695=(cj5*r10);
IkReal x12696=((r12*r12)+(((-2.0)*x12694*x12695))+(((-1.0)*x12692*x12693))+((x12692*(r10*r10)))+x12693);
j4eval[0]=x12696;
j4eval[1]=IKsign(x12696);
j4eval[2]=((IKabs(r12))+(IKabs((x12695+(((-1.0)*x12694))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12697=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12697);
rxp1_1=(px*r21);
rxp1_2=(r11*x12697);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12698=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12698);
rxp1_1=(px*r21);
rxp1_2=(r11*x12698);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12699=((1.0)*sj1);
CheckValue<IkReal> x12700=IKPowWithIntegerCheck(r02,-1);
if(!x12700.valid){
continue;
}
CheckValue<IkReal> x12701=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12701.valid){
continue;
}
if( IKabs(((x12700.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12699)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12701.value)*(((((-1.0)*sj2*x12699))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12700.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12699))))))+IKsqr(((x12701.value)*(((((-1.0)*sj2*x12699))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12700.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12699))))), ((x12701.value)*(((((-1.0)*sj2*x12699))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12702=IKsin(j4);
IkReal x12703=IKcos(j4);
IkReal x12704=(cj5*r20);
IkReal x12705=((1.0)*cj2);
IkReal x12706=(cj5*r10);
IkReal x12707=((1.0)*x12702);
IkReal x12708=(sj5*x12702);
IkReal x12709=((1.0)*sj5*x12703);
evalcond[0]=((-1.0)*r02*x12703);
evalcond[1]=(((r21*x12708))+(((-1.0)*x12704*x12707)));
evalcond[2]=((((-1.0)*r11*x12709))+((x12703*x12706)));
evalcond[3]=((1.0)+(((-1.0)*x12706*x12707))+((r11*x12708)));
evalcond[4]=((((-1.0)*sj1*x12705))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12707)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r21*x12709))+(((-1.0)*cj1*x12705))+((x12703*x12704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12710=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12710.valid){
continue;
}
CheckValue<IkReal> x12711=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12711.valid){
continue;
}
if( IKabs(((-1.0)*(x12710.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12711.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12710.value)))+IKsqr(((x12711.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12710.value)), ((x12711.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12712=IKsin(j4);
IkReal x12713=IKcos(j4);
IkReal x12714=(cj5*r20);
IkReal x12715=((1.0)*cj2);
IkReal x12716=(cj5*r10);
IkReal x12717=((1.0)*x12712);
IkReal x12718=(sj5*x12712);
IkReal x12719=((1.0)*sj5*x12713);
evalcond[0]=((-1.0)*r02*x12713);
evalcond[1]=(((r21*x12718))+(((-1.0)*x12714*x12717)));
evalcond[2]=(((x12713*x12716))+(((-1.0)*r11*x12719)));
evalcond[3]=((1.0)+(((-1.0)*x12716*x12717))+((r11*x12718)));
evalcond[4]=((((-1.0)*sj1*x12715))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12717)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r21*x12719))+((x12713*x12714))+(((-1.0)*cj1*x12715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12720=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12720);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12720);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12721=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12721);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12721);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12722=IKPowWithIntegerCheck(r22,-1);
if(!x12722.valid){
continue;
}
CheckValue<IkReal> x12723=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12723.valid){
continue;
}
if( IKabs(((x12722.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12723.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12722.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12723.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12722.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12723.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12724=IKsin(j4);
IkReal x12725=IKcos(j4);
IkReal x12726=((1.0)*cj2);
IkReal x12727=(cj5*x12725);
IkReal x12728=(sj5*x12724);
IkReal x12729=((1.0)*sj5*x12725);
IkReal x12730=((1.0)*cj5*x12724);
evalcond[0]=((-1.0)*r22*x12725);
evalcond[1]=((((-1.0)*r00*x12730))+((r01*x12728)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12724))+(((-1.0)*cj1*x12726)));
evalcond[3]=(((r10*x12727))+(((-1.0)*r11*x12729)));
evalcond[4]=((1.0)+((r11*x12728))+(((-1.0)*r10*x12730)));
evalcond[5]=((((-1.0)*sj1*x12726))+(((-1.0)*r01*x12729))+(((-1.0)*cj1*sj2))+((r00*x12727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12731=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12731.valid){
continue;
}
CheckValue<IkReal> x12732=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12732.valid){
continue;
}
if( IKabs(((-1.0)*(x12731.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12732.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12731.value)))+IKsqr(((x12732.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12731.value)), ((x12732.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12733=IKsin(j4);
IkReal x12734=IKcos(j4);
IkReal x12735=((1.0)*cj2);
IkReal x12736=(cj5*x12734);
IkReal x12737=(sj5*x12733);
IkReal x12738=((1.0)*sj5*x12734);
IkReal x12739=((1.0)*cj5*x12733);
evalcond[0]=((-1.0)*r22*x12734);
evalcond[1]=((((-1.0)*r00*x12739))+((r01*x12737)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12733))+(((-1.0)*cj1*x12735)));
evalcond[3]=(((r10*x12736))+(((-1.0)*r11*x12738)));
evalcond[4]=((1.0)+((r11*x12737))+(((-1.0)*r10*x12739)));
evalcond[5]=((((-1.0)*sj1*x12735))+(((-1.0)*r01*x12738))+(((-1.0)*cj1*sj2))+((r00*x12736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12740=cj5*cj5;
IkReal x12741=r11*r11;
IkReal x12742=(cj5*r10);
IkReal x12743=(r11*sj5);
CheckValue<IkReal> x12744 = IKatan2WithCheck(IkReal(((((-1.0)*x12743))+x12742)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12744.valid){
continue;
}
CheckValue<IkReal> x12745=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12740*x12741))+(r12*r12)+((x12740*(r10*r10)))+(((-2.0)*x12742*x12743))+x12741)),-1);
if(!x12745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12744.value)+(((1.5707963267949)*(x12745.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12746=IKsin(j4);
IkReal x12747=IKcos(j4);
IkReal x12748=(cj5*r10);
IkReal x12749=(r01*sj5);
IkReal x12750=((1.0)*cj2);
IkReal x12751=(cj5*r00);
IkReal x12752=(cj5*r20);
IkReal x12753=((1.0)*x12747);
IkReal x12754=((1.0)*x12746);
IkReal x12755=(sj5*x12746);
evalcond[0]=((((-1.0)*x12752*x12754))+(((-1.0)*r22*x12753))+((r21*x12755)));
evalcond[1]=((((-1.0)*r02*x12753))+(((-1.0)*x12751*x12754))+((x12746*x12749)));
evalcond[2]=((((-1.0)*r12*x12754))+(((-1.0)*r11*sj5*x12753))+((x12747*x12748)));
evalcond[3]=((1.0)+((r11*x12755))+(((-1.0)*r12*x12753))+(((-1.0)*x12748*x12754)));
evalcond[4]=((((-1.0)*r21*sj5*x12753))+(((-1.0)*r22*x12754))+((sj1*sj2))+(((-1.0)*cj1*x12750))+((x12747*x12752)));
evalcond[5]=((((-1.0)*r02*x12754))+(((-1.0)*sj1*x12750))+(((-1.0)*cj1*sj2))+(((-1.0)*x12749*x12753))+((x12747*x12751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12756=((1.0)*cj5);
CheckValue<IkReal> x12757=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12756)))),-1);
if(!x12757.valid){
continue;
}
CheckValue<IkReal> x12758 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12756)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12757.value)))+(x12758.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12759=IKsin(j4);
IkReal x12760=IKcos(j4);
IkReal x12761=(cj5*r10);
IkReal x12762=(r01*sj5);
IkReal x12763=((1.0)*cj2);
IkReal x12764=(cj5*r00);
IkReal x12765=(cj5*r20);
IkReal x12766=((1.0)*x12760);
IkReal x12767=((1.0)*x12759);
IkReal x12768=(sj5*x12759);
evalcond[0]=(((r21*x12768))+(((-1.0)*r22*x12766))+(((-1.0)*x12765*x12767)));
evalcond[1]=(((x12759*x12762))+(((-1.0)*r02*x12766))+(((-1.0)*x12764*x12767)));
evalcond[2]=((((-1.0)*r12*x12767))+(((-1.0)*r11*sj5*x12766))+((x12760*x12761)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12766))+((r11*x12768))+(((-1.0)*x12761*x12767)));
evalcond[4]=((((-1.0)*r21*sj5*x12766))+(((-1.0)*r22*x12767))+((sj1*sj2))+((x12760*x12765))+(((-1.0)*cj1*x12763)));
evalcond[5]=((((-1.0)*x12762*x12766))+(((-1.0)*sj1*x12763))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12767))+((x12760*x12764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12769=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12769.valid){
continue;
}
CheckValue<IkReal> x12770 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12769.value)))+(x12770.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12771=IKsin(j4);
IkReal x12772=IKcos(j4);
IkReal x12773=(cj5*r10);
IkReal x12774=(r01*sj5);
IkReal x12775=((1.0)*cj2);
IkReal x12776=(cj5*r00);
IkReal x12777=(cj5*r20);
IkReal x12778=((1.0)*x12772);
IkReal x12779=((1.0)*x12771);
IkReal x12780=(sj5*x12771);
evalcond[0]=((((-1.0)*r22*x12778))+(((-1.0)*x12777*x12779))+((r21*x12780)));
evalcond[1]=((((-1.0)*x12776*x12779))+(((-1.0)*r02*x12778))+((x12771*x12774)));
evalcond[2]=(((x12772*x12773))+(((-1.0)*r11*sj5*x12778))+(((-1.0)*r12*x12779)));
evalcond[3]=((1.0)+((r11*x12780))+(((-1.0)*x12773*x12779))+(((-1.0)*r12*x12778)));
evalcond[4]=(((x12772*x12777))+(((-1.0)*r22*x12779))+(((-1.0)*cj1*x12775))+((sj1*sj2))+(((-1.0)*r21*sj5*x12778)));
evalcond[5]=(((x12772*x12776))+(((-1.0)*x12774*x12778))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12779))+(((-1.0)*sj1*x12775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12781=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12781;
j4eval[1]=IKsign(x12781);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12782=((1.0)*cj5);
IkReal x12783=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12782)));
j4eval[0]=x12783;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12782))))));
j4eval[2]=IKsign(x12783);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12784=(sj1*sj2);
IkReal x12785=(cj5*r10);
IkReal x12786=(r11*sj5);
IkReal x12787=(cj1*cj2);
IkReal x12788=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12788;
j4eval[1]=((IKabs((((r12*x12787))+(((-1.0)*r12*x12784)))))+(IKabs((((x12784*x12786))+((x12785*x12787))+(((-1.0)*x12784*x12785))+(((-1.0)*x12786*x12787))))));
j4eval[2]=IKsign(x12788);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12789=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12789);
rxp1_1=(px*r21);
rxp1_2=(r11*x12789);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12790=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12790);
rxp1_1=(px*r21);
rxp1_2=(r11*x12790);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12791=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x12791))+((r11*sj5)));
j4eval[1]=((((-1.0)*r20*x12791))+((r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12792=((1.0)*cj5);
CheckValue<IkReal> x12793=IKPowWithIntegerCheck(((((-1.0)*r10*x12792))+((r11*sj5))),-1);
if(!x12793.valid){
continue;
}
CheckValue<IkReal> x12794=IKPowWithIntegerCheck(((((-1.0)*r20*x12792))+((r21*sj5))),-1);
if(!x12794.valid){
continue;
}
if( IKabs(((-1.0)*(x12793.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12794.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12793.value)))+IKsqr(((x12794.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12793.value)), ((x12794.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12795=IKsin(j4);
IkReal x12796=IKcos(j4);
IkReal x12797=((1.0)*cj2);
IkReal x12798=(r21*sj5);
IkReal x12799=(r11*sj5);
IkReal x12800=((1.0)*cj5*x12795);
IkReal x12801=((1.0)*cj5*x12796);
evalcond[0]=((-1.0)*r02*x12796);
evalcond[1]=(((x12795*x12798))+(((-1.0)*r20*x12800)));
evalcond[2]=(((r02*x12795))+(((-1.0)*sj1*x12797))+(((-1.0)*cj1*sj2)));
evalcond[3]=((((-1.0)*r10*x12801))+((x12796*x12799)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12800))+((x12795*x12799)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r20*x12801))+((x12796*x12798))+(((-1.0)*cj1*x12797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12802=IKPowWithIntegerCheck(r02,-1);
if(!x12802.valid){
continue;
}
CheckValue<IkReal> x12803=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12803.valid){
continue;
}
if( IKabs(((x12802.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12803.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12802.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12803.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12802.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12803.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12804=IKsin(j4);
IkReal x12805=IKcos(j4);
IkReal x12806=((1.0)*cj2);
IkReal x12807=(r21*sj5);
IkReal x12808=(r11*sj5);
IkReal x12809=((1.0)*cj5*x12804);
IkReal x12810=((1.0)*cj5*x12805);
evalcond[0]=((-1.0)*r02*x12805);
evalcond[1]=((((-1.0)*r20*x12809))+((x12804*x12807)));
evalcond[2]=(((r02*x12804))+(((-1.0)*sj1*x12806))+(((-1.0)*cj1*sj2)));
evalcond[3]=((((-1.0)*r10*x12810))+((x12805*x12808)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12809))+((x12804*x12808)));
evalcond[5]=((((-1.0)*r20*x12810))+((sj1*sj2))+(((-1.0)*cj1*x12806))+((x12805*x12807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12811=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12811;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12811);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12812=((1.0)*cj5);
IkReal x12813=((((-1.0)*r21*x12812))+(((-1.0)*r20*sj5)));
j4eval[0]=x12813;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12812))+((r11*sj5))))));
j4eval[2]=IKsign(x12813);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12814=cj5*cj5;
IkReal x12815=(r11*r21);
IkReal x12816=((1.0)*r20);
IkReal x12817=(cj5*sj5);
IkReal x12818=(((x12814*x12815))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12814*x12816))+((r11*r20*x12817))+(((-1.0)*x12815))+((r10*r21*x12817)));
j4eval[0]=x12818;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12816))+((r21*sj5))))));
j4eval[2]=IKsign(x12818);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12819=cj5*cj5;
IkReal x12820=(r21*sj5);
IkReal x12821=(r11*r21);
IkReal x12822=((1.0)*r20);
CheckValue<IkReal> x12823 = IKatan2WithCheck(IkReal((x12820+(((-1.0)*cj5*x12822)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12823.valid){
continue;
}
CheckValue<IkReal> x12824=IKPowWithIntegerCheck(IKsign((((x12819*x12821))+((cj5*r10*x12820))+(((-1.0)*r12*r22))+(((-1.0)*x12821))+(((-1.0)*r10*x12819*x12822))+((cj5*r11*r20*sj5)))),-1);
if(!x12824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12823.value)+(((1.5707963267949)*(x12824.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12825=IKcos(j4);
IkReal x12826=IKsin(j4);
IkReal x12827=(cj5*r00);
IkReal x12828=(cj5*r20);
IkReal x12829=(cj5*r10);
IkReal x12830=((1.0)*x12825);
IkReal x12831=((1.0)*x12826);
IkReal x12832=(sj5*x12825);
IkReal x12833=(sj5*x12826);
evalcond[0]=(((r21*x12832))+((r22*x12826))+(((-1.0)*x12828*x12830)));
evalcond[1]=((((-1.0)*x12829*x12830))+((r11*x12832))+((r12*x12826)));
evalcond[2]=(((r21*x12833))+(((-1.0)*r22*x12830))+(((-1.0)*x12828*x12831)));
evalcond[3]=((((-1.0)*r02*x12830))+((r01*x12833))+(((-1.0)*x12827*x12831)));
evalcond[4]=((-1.0)+((r02*x12826))+((r01*x12832))+(((-1.0)*x12827*x12830)));
evalcond[5]=((1.0)+(((-1.0)*x12829*x12831))+((r11*x12833))+(((-1.0)*r12*x12830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12834=((1.0)*cj5);
CheckValue<IkReal> x12835 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12834)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12835.valid){
continue;
}
CheckValue<IkReal> x12836=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12834))+(((-1.0)*r20*sj5)))),-1);
if(!x12836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12835.value)+(((1.5707963267949)*(x12836.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12837=IKcos(j4);
IkReal x12838=IKsin(j4);
IkReal x12839=(cj5*r00);
IkReal x12840=(cj5*r20);
IkReal x12841=(cj5*r10);
IkReal x12842=((1.0)*x12837);
IkReal x12843=((1.0)*x12838);
IkReal x12844=(sj5*x12837);
IkReal x12845=(sj5*x12838);
evalcond[0]=(((r22*x12838))+(((-1.0)*x12840*x12842))+((r21*x12844)));
evalcond[1]=(((r12*x12838))+(((-1.0)*x12841*x12842))+((r11*x12844)));
evalcond[2]=((((-1.0)*r22*x12842))+(((-1.0)*x12840*x12843))+((r21*x12845)));
evalcond[3]=((((-1.0)*r02*x12842))+((r01*x12845))+(((-1.0)*x12839*x12843)));
evalcond[4]=((-1.0)+((r01*x12844))+(((-1.0)*x12839*x12842))+((r02*x12838)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12842))+(((-1.0)*x12841*x12843))+((r11*x12845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12846 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12846.valid){
continue;
}
CheckValue<IkReal> x12847=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12846.value)+(((1.5707963267949)*(x12847.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12848=IKcos(j4);
IkReal x12849=IKsin(j4);
IkReal x12850=(cj5*r00);
IkReal x12851=(cj5*r20);
IkReal x12852=(cj5*r10);
IkReal x12853=((1.0)*x12848);
IkReal x12854=((1.0)*x12849);
IkReal x12855=(sj5*x12848);
IkReal x12856=(sj5*x12849);
evalcond[0]=((((-1.0)*x12851*x12853))+((r22*x12849))+((r21*x12855)));
evalcond[1]=((((-1.0)*x12852*x12853))+((r11*x12855))+((r12*x12849)));
evalcond[2]=((((-1.0)*x12851*x12854))+(((-1.0)*r22*x12853))+((r21*x12856)));
evalcond[3]=((((-1.0)*x12850*x12854))+(((-1.0)*r02*x12853))+((r01*x12856)));
evalcond[4]=((-1.0)+(((-1.0)*x12850*x12853))+((r01*x12855))+((r02*x12849)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12853))+(((-1.0)*x12852*x12854))+((r11*x12856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12857=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12857;
j4eval[1]=IKsign(x12857);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12858=((1.0)*cj5);
IkReal x12859=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12858)));
j4eval[0]=x12859;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12858))))));
j4eval[2]=IKsign(x12859);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12860=cj5*cj5;
IkReal x12861=(r11*r21);
IkReal x12862=((1.0)*r20);
IkReal x12863=(cj5*sj5);
IkReal x12864=((((-1.0)*x12861))+((r10*r21*x12863))+(((-1.0)*r12*r22))+((r11*r20*x12863))+(((-1.0)*r10*x12860*x12862))+((x12860*x12861)));
j4eval[0]=x12864;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12862)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12864);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12865=cj5*cj5;
IkReal x12866=(r21*sj5);
IkReal x12867=(r11*r21);
IkReal x12868=((1.0)*r20);
CheckValue<IkReal> x12869 = IKatan2WithCheck(IkReal((x12866+(((-1.0)*cj5*x12868)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12869.valid){
continue;
}
CheckValue<IkReal> x12870=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12867))+(((-1.0)*r10*x12865*x12868))+((x12865*x12867))+(((-1.0)*r12*r22))+((cj5*r10*x12866))+((cj5*r11*r20*sj5)))),-1);
if(!x12870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12869.value)+(((1.5707963267949)*(x12870.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12871=IKcos(j4);
IkReal x12872=IKsin(j4);
IkReal x12873=(cj5*r00);
IkReal x12874=(cj5*r20);
IkReal x12875=(cj5*r10);
IkReal x12876=((1.0)*x12871);
IkReal x12877=((1.0)*x12872);
IkReal x12878=(sj5*x12871);
IkReal x12879=(sj5*x12872);
evalcond[0]=(((r22*x12872))+((r21*x12878))+(((-1.0)*x12874*x12876)));
evalcond[1]=(((r11*x12878))+((r12*x12872))+(((-1.0)*x12875*x12876)));
evalcond[2]=((((-1.0)*r22*x12876))+((r21*x12879))+(((-1.0)*x12874*x12877)));
evalcond[3]=(((r01*x12879))+(((-1.0)*r02*x12876))+(((-1.0)*x12873*x12877)));
evalcond[4]=((1.0)+((r01*x12878))+((r02*x12872))+(((-1.0)*x12873*x12876)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12876))+((r11*x12879))+(((-1.0)*x12875*x12877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12880=((1.0)*cj5);
CheckValue<IkReal> x12881=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12880)))),-1);
if(!x12881.valid){
continue;
}
CheckValue<IkReal> x12882 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12880))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12881.value)))+(x12882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12883=IKcos(j4);
IkReal x12884=IKsin(j4);
IkReal x12885=(cj5*r00);
IkReal x12886=(cj5*r20);
IkReal x12887=(cj5*r10);
IkReal x12888=((1.0)*x12883);
IkReal x12889=((1.0)*x12884);
IkReal x12890=(sj5*x12883);
IkReal x12891=(sj5*x12884);
evalcond[0]=((((-1.0)*x12886*x12888))+((r21*x12890))+((r22*x12884)));
evalcond[1]=((((-1.0)*x12887*x12888))+((r12*x12884))+((r11*x12890)));
evalcond[2]=((((-1.0)*r22*x12888))+(((-1.0)*x12886*x12889))+((r21*x12891)));
evalcond[3]=(((r01*x12891))+(((-1.0)*r02*x12888))+(((-1.0)*x12885*x12889)));
evalcond[4]=((1.0)+((r01*x12890))+(((-1.0)*x12885*x12888))+((r02*x12884)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12888))+(((-1.0)*x12887*x12889))+((r11*x12891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12892=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12892.valid){
continue;
}
CheckValue<IkReal> x12893 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12892.value)))+(x12893.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12894=IKcos(j4);
IkReal x12895=IKsin(j4);
IkReal x12896=(cj5*r00);
IkReal x12897=(cj5*r20);
IkReal x12898=(cj5*r10);
IkReal x12899=((1.0)*x12894);
IkReal x12900=((1.0)*x12895);
IkReal x12901=(sj5*x12894);
IkReal x12902=(sj5*x12895);
evalcond[0]=(((r22*x12895))+((r21*x12901))+(((-1.0)*x12897*x12899)));
evalcond[1]=(((r12*x12895))+((r11*x12901))+(((-1.0)*x12898*x12899)));
evalcond[2]=((((-1.0)*r22*x12899))+(((-1.0)*x12897*x12900))+((r21*x12902)));
evalcond[3]=(((r01*x12902))+(((-1.0)*x12896*x12900))+(((-1.0)*r02*x12899)));
evalcond[4]=((1.0)+((r01*x12901))+(((-1.0)*x12896*x12899))+((r02*x12895)));
evalcond[5]=((1.0)+(((-1.0)*x12898*x12900))+((r11*x12902))+(((-1.0)*r12*x12899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12903=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12903;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12903);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12904=((1.0)*cj5);
IkReal x12905=((((-1.0)*r21*x12904))+(((-1.0)*r20*sj5)));
j4eval[0]=x12905;
j4eval[1]=((IKabs(((((-1.0)*r10*x12904))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12905);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12906=cj5*cj5;
IkReal x12907=(r11*r21);
IkReal x12908=((1.0)*r20);
IkReal x12909=(cj5*sj5);
IkReal x12910=((((-1.0)*r12*r22))+(((-1.0)*x12907))+((r11*r20*x12909))+(((-1.0)*r10*x12906*x12908))+((r10*r21*x12909))+((x12906*x12907)));
j4eval[0]=x12910;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12908))))));
j4eval[2]=IKsign(x12910);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12911=cj5*cj5;
IkReal x12912=(r21*sj5);
IkReal x12913=(r11*r21);
IkReal x12914=((1.0)*r20);
CheckValue<IkReal> x12915=IKPowWithIntegerCheck(IKsign((((x12911*x12913))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12911*x12914))+(((-1.0)*x12913))+((cj5*r11*r20*sj5))+((cj5*r10*x12912)))),-1);
if(!x12915.valid){
continue;
}
CheckValue<IkReal> x12916 = IKatan2WithCheck(IkReal((x12912+(((-1.0)*cj5*x12914)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12915.value)))+(x12916.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12917=IKcos(j4);
IkReal x12918=IKsin(j4);
IkReal x12919=(cj5*r00);
IkReal x12920=(cj5*r20);
IkReal x12921=(cj5*r10);
IkReal x12922=((1.0)*x12917);
IkReal x12923=((1.0)*x12918);
IkReal x12924=(sj5*x12917);
IkReal x12925=(sj5*x12918);
evalcond[0]=((((-1.0)*x12920*x12922))+((r21*x12924))+((r22*x12918)));
evalcond[1]=(((r11*x12924))+((r12*x12918))+(((-1.0)*x12921*x12922)));
evalcond[2]=((((-1.0)*x12920*x12923))+((r21*x12925))+(((-1.0)*r22*x12922)));
evalcond[3]=((((-1.0)*r02*x12922))+(((-1.0)*x12919*x12923))+((r01*x12925)));
evalcond[4]=((-1.0)+(((-1.0)*x12919*x12922))+((r02*x12918))+((r01*x12924)));
evalcond[5]=((1.0)+((r11*x12925))+(((-1.0)*r12*x12922))+(((-1.0)*x12921*x12923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12926=((1.0)*cj5);
CheckValue<IkReal> x12927 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12926))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12927.valid){
continue;
}
CheckValue<IkReal> x12928=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12926))+(((-1.0)*r20*sj5)))),-1);
if(!x12928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12927.value)+(((1.5707963267949)*(x12928.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12929=IKcos(j4);
IkReal x12930=IKsin(j4);
IkReal x12931=(cj5*r00);
IkReal x12932=(cj5*r20);
IkReal x12933=(cj5*r10);
IkReal x12934=((1.0)*x12929);
IkReal x12935=((1.0)*x12930);
IkReal x12936=(sj5*x12929);
IkReal x12937=(sj5*x12930);
evalcond[0]=(((r22*x12930))+(((-1.0)*x12932*x12934))+((r21*x12936)));
evalcond[1]=(((r11*x12936))+((r12*x12930))+(((-1.0)*x12933*x12934)));
evalcond[2]=((((-1.0)*r22*x12934))+(((-1.0)*x12932*x12935))+((r21*x12937)));
evalcond[3]=((((-1.0)*r02*x12934))+((r01*x12937))+(((-1.0)*x12931*x12935)));
evalcond[4]=((-1.0)+((r02*x12930))+((r01*x12936))+(((-1.0)*x12931*x12934)));
evalcond[5]=((1.0)+((r11*x12937))+(((-1.0)*r12*x12934))+(((-1.0)*x12933*x12935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12938 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12938.valid){
continue;
}
CheckValue<IkReal> x12939=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12938.value)+(((1.5707963267949)*(x12939.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12940=IKcos(j4);
IkReal x12941=IKsin(j4);
IkReal x12942=(cj5*r00);
IkReal x12943=(cj5*r20);
IkReal x12944=(cj5*r10);
IkReal x12945=((1.0)*x12940);
IkReal x12946=((1.0)*x12941);
IkReal x12947=(sj5*x12940);
IkReal x12948=(sj5*x12941);
evalcond[0]=(((r22*x12941))+((r21*x12947))+(((-1.0)*x12943*x12945)));
evalcond[1]=(((r12*x12941))+((r11*x12947))+(((-1.0)*x12944*x12945)));
evalcond[2]=(((r21*x12948))+(((-1.0)*r22*x12945))+(((-1.0)*x12943*x12946)));
evalcond[3]=(((r01*x12948))+(((-1.0)*r02*x12945))+(((-1.0)*x12942*x12946)));
evalcond[4]=((-1.0)+((r01*x12947))+((r02*x12941))+(((-1.0)*x12942*x12945)));
evalcond[5]=((1.0)+((r11*x12948))+(((-1.0)*x12944*x12946))+(((-1.0)*r12*x12945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12949=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12949;
j4eval[1]=IKsign(x12949);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12950=((1.0)*cj5);
IkReal x12951=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12950)));
j4eval[0]=x12951;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12950))))));
j4eval[2]=IKsign(x12951);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12952=cj5*cj5;
IkReal x12953=(r11*r21);
IkReal x12954=((1.0)*r20);
IkReal x12955=(cj5*sj5);
IkReal x12956=((((-1.0)*r10*x12952*x12954))+(((-1.0)*r12*r22))+((r10*r21*x12955))+((r11*r20*x12955))+(((-1.0)*x12953))+((x12952*x12953)));
j4eval[0]=x12956;
j4eval[1]=((IKabs(((((-1.0)*cj5*x12954))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12956);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12957=cj5*cj5;
IkReal x12958=(r21*sj5);
IkReal x12959=(r11*r21);
IkReal x12960=((1.0)*r20);
CheckValue<IkReal> x12961 = IKatan2WithCheck(IkReal((x12958+(((-1.0)*cj5*x12960)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12961.valid){
continue;
}
CheckValue<IkReal> x12962=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x12957*x12960))+(((-1.0)*x12959))+((x12957*x12959))+((cj5*r10*x12958))+((cj5*r11*r20*sj5)))),-1);
if(!x12962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12961.value)+(((1.5707963267949)*(x12962.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12963=IKcos(j4);
IkReal x12964=IKsin(j4);
IkReal x12965=(cj5*r00);
IkReal x12966=(cj5*r20);
IkReal x12967=(cj5*r10);
IkReal x12968=((1.0)*x12963);
IkReal x12969=((1.0)*x12964);
IkReal x12970=(sj5*x12963);
IkReal x12971=(sj5*x12964);
evalcond[0]=((((-1.0)*x12966*x12968))+((r22*x12964))+((r21*x12970)));
evalcond[1]=((((-1.0)*x12967*x12968))+((r11*x12970))+((r12*x12964)));
evalcond[2]=((((-1.0)*x12966*x12969))+(((-1.0)*r22*x12968))+((r21*x12971)));
evalcond[3]=((((-1.0)*x12965*x12969))+((r01*x12971))+(((-1.0)*r02*x12968)));
evalcond[4]=((1.0)+(((-1.0)*x12965*x12968))+((r01*x12970))+((r02*x12964)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12968))+(((-1.0)*x12967*x12969))+((r11*x12971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12972=((1.0)*cj5);
CheckValue<IkReal> x12973 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12972)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12973.valid){
continue;
}
CheckValue<IkReal> x12974=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12972)))),-1);
if(!x12974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12973.value)+(((1.5707963267949)*(x12974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12975=IKcos(j4);
IkReal x12976=IKsin(j4);
IkReal x12977=(cj5*r00);
IkReal x12978=(cj5*r20);
IkReal x12979=(cj5*r10);
IkReal x12980=((1.0)*x12975);
IkReal x12981=((1.0)*x12976);
IkReal x12982=(sj5*x12975);
IkReal x12983=(sj5*x12976);
evalcond[0]=(((r21*x12982))+(((-1.0)*x12978*x12980))+((r22*x12976)));
evalcond[1]=(((r11*x12982))+(((-1.0)*x12979*x12980))+((r12*x12976)));
evalcond[2]=((((-1.0)*r22*x12980))+((r21*x12983))+(((-1.0)*x12978*x12981)));
evalcond[3]=(((r01*x12983))+(((-1.0)*x12977*x12981))+(((-1.0)*r02*x12980)));
evalcond[4]=((1.0)+((r02*x12976))+((r01*x12982))+(((-1.0)*x12977*x12980)));
evalcond[5]=((1.0)+((r11*x12983))+(((-1.0)*r12*x12980))+(((-1.0)*x12979*x12981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12984=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12984.valid){
continue;
}
CheckValue<IkReal> x12985 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12984.value)))+(x12985.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12986=IKcos(j4);
IkReal x12987=IKsin(j4);
IkReal x12988=(cj5*r00);
IkReal x12989=(cj5*r20);
IkReal x12990=(cj5*r10);
IkReal x12991=((1.0)*x12986);
IkReal x12992=((1.0)*x12987);
IkReal x12993=(sj5*x12986);
IkReal x12994=(sj5*x12987);
evalcond[0]=(((r22*x12987))+((r21*x12993))+(((-1.0)*x12989*x12991)));
evalcond[1]=(((r11*x12993))+(((-1.0)*x12990*x12991))+((r12*x12987)));
evalcond[2]=((((-1.0)*r22*x12991))+((r21*x12994))+(((-1.0)*x12989*x12992)));
evalcond[3]=(((r01*x12994))+(((-1.0)*x12988*x12992))+(((-1.0)*r02*x12991)));
evalcond[4]=((1.0)+((r01*x12993))+(((-1.0)*x12988*x12991))+((r02*x12987)));
evalcond[5]=((1.0)+((r11*x12994))+(((-1.0)*r12*x12991))+(((-1.0)*x12990*x12992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12995=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12995;
j4eval[1]=IKsign(x12995);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12996=((1.0)*cj5);
IkReal x12997=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12996)));
j4eval[0]=x12997;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12996)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12997);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12998=cj5*cj5;
IkReal x12999=(r11*r21);
IkReal x13000=((1.0)*r20);
IkReal x13001=(cj5*sj5);
IkReal x13002=(((r10*r21*x13001))+((x12998*x12999))+(((-1.0)*r12*r22))+((r11*r20*x13001))+(((-1.0)*r10*x12998*x13000))+(((-1.0)*x12999)));
j4eval[0]=x13002;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13000)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13002);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13003=cj5*cj5;
IkReal x13004=(r21*sj5);
IkReal x13005=(r11*r21);
IkReal x13006=((1.0)*r20);
CheckValue<IkReal> x13007 = IKatan2WithCheck(IkReal((x13004+(((-1.0)*cj5*x13006)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13007.valid){
continue;
}
CheckValue<IkReal> x13008=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x13003*x13006))+(((-1.0)*r12*r22))+((cj5*r10*x13004))+((x13003*x13005))+(((-1.0)*x13005))+((cj5*r11*r20*sj5)))),-1);
if(!x13008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13007.value)+(((1.5707963267949)*(x13008.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13009=IKcos(j4);
IkReal x13010=IKsin(j4);
IkReal x13011=(cj5*r00);
IkReal x13012=(cj5*r20);
IkReal x13013=(cj5*r10);
IkReal x13014=((1.0)*x13009);
IkReal x13015=((1.0)*x13010);
IkReal x13016=(sj5*x13009);
IkReal x13017=(sj5*x13010);
evalcond[0]=((((-1.0)*x13012*x13014))+((r21*x13016))+((r22*x13010)));
evalcond[1]=((((-1.0)*x13013*x13014))+((r11*x13016))+((r12*x13010)));
evalcond[2]=((((-1.0)*x13012*x13015))+(((-1.0)*r22*x13014))+((r21*x13017)));
evalcond[3]=(((r01*x13017))+(((-1.0)*x13011*x13015))+(((-1.0)*r02*x13014)));
evalcond[4]=((1.0)+((r01*x13016))+((r02*x13010))+(((-1.0)*x13011*x13014)));
evalcond[5]=((1.0)+(((-1.0)*x13013*x13015))+((r11*x13017))+(((-1.0)*r12*x13014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13018=((1.0)*cj5);
CheckValue<IkReal> x13019=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13018)))),-1);
if(!x13019.valid){
continue;
}
CheckValue<IkReal> x13020 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13018)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13019.value)))+(x13020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13021=IKcos(j4);
IkReal x13022=IKsin(j4);
IkReal x13023=(cj5*r00);
IkReal x13024=(cj5*r20);
IkReal x13025=(cj5*r10);
IkReal x13026=((1.0)*x13021);
IkReal x13027=((1.0)*x13022);
IkReal x13028=(sj5*x13021);
IkReal x13029=(sj5*x13022);
evalcond[0]=(((r21*x13028))+(((-1.0)*x13024*x13026))+((r22*x13022)));
evalcond[1]=((((-1.0)*x13025*x13026))+((r11*x13028))+((r12*x13022)));
evalcond[2]=((((-1.0)*r22*x13026))+((r21*x13029))+(((-1.0)*x13024*x13027)));
evalcond[3]=(((r01*x13029))+(((-1.0)*x13023*x13027))+(((-1.0)*r02*x13026)));
evalcond[4]=((1.0)+((r01*x13028))+((r02*x13022))+(((-1.0)*x13023*x13026)));
evalcond[5]=((1.0)+(((-1.0)*x13025*x13027))+((r11*x13029))+(((-1.0)*r12*x13026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13030=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13030.valid){
continue;
}
CheckValue<IkReal> x13031 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13030.value)))+(x13031.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13032=IKcos(j4);
IkReal x13033=IKsin(j4);
IkReal x13034=(cj5*r00);
IkReal x13035=(cj5*r20);
IkReal x13036=(cj5*r10);
IkReal x13037=((1.0)*x13032);
IkReal x13038=((1.0)*x13033);
IkReal x13039=(sj5*x13032);
IkReal x13040=(sj5*x13033);
evalcond[0]=(((r22*x13033))+(((-1.0)*x13035*x13037))+((r21*x13039)));
evalcond[1]=((((-1.0)*x13036*x13037))+((r11*x13039))+((r12*x13033)));
evalcond[2]=(((r21*x13040))+(((-1.0)*x13035*x13038))+(((-1.0)*r22*x13037)));
evalcond[3]=((((-1.0)*r02*x13037))+(((-1.0)*x13034*x13038))+((r01*x13040)));
evalcond[4]=((1.0)+(((-1.0)*x13034*x13037))+((r01*x13039))+((r02*x13033)));
evalcond[5]=((1.0)+(((-1.0)*x13036*x13038))+((r11*x13040))+(((-1.0)*r12*x13037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13041=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13041;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13041);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13042=((1.0)*cj5);
IkReal x13043=((((-1.0)*r21*x13042))+(((-1.0)*r20*sj5)));
j4eval[0]=x13043;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13042))+((r11*sj5))))));
j4eval[2]=IKsign(x13043);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13044=cj5*cj5;
IkReal x13045=(r11*r21);
IkReal x13046=((1.0)*r20);
IkReal x13047=(cj5*sj5);
IkReal x13048=((((-1.0)*x13045))+((x13044*x13045))+((r11*r20*x13047))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13044*x13046))+((r10*r21*x13047)));
j4eval[0]=x13048;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x13046))+((r21*sj5))))));
j4eval[2]=IKsign(x13048);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13049=cj5*cj5;
IkReal x13050=(r21*sj5);
IkReal x13051=(r11*r21);
IkReal x13052=((1.0)*r20);
CheckValue<IkReal> x13053 = IKatan2WithCheck(IkReal((x13050+(((-1.0)*cj5*x13052)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13053.valid){
continue;
}
CheckValue<IkReal> x13054=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13051))+(((-1.0)*r12*r22))+((cj5*r10*x13050))+(((-1.0)*r10*x13049*x13052))+((x13049*x13051))+((cj5*r11*r20*sj5)))),-1);
if(!x13054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13053.value)+(((1.5707963267949)*(x13054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13055=IKcos(j4);
IkReal x13056=IKsin(j4);
IkReal x13057=(cj5*r00);
IkReal x13058=(cj5*r20);
IkReal x13059=(cj5*r10);
IkReal x13060=((1.0)*x13055);
IkReal x13061=((1.0)*x13056);
IkReal x13062=(sj5*x13055);
IkReal x13063=(sj5*x13056);
evalcond[0]=(((r22*x13056))+((r21*x13062))+(((-1.0)*x13058*x13060)));
evalcond[1]=(((r12*x13056))+(((-1.0)*x13059*x13060))+((r11*x13062)));
evalcond[2]=(((r21*x13063))+(((-1.0)*r22*x13060))+(((-1.0)*x13058*x13061)));
evalcond[3]=((((-1.0)*x13057*x13061))+(((-1.0)*r02*x13060))+((r01*x13063)));
evalcond[4]=((-1.0)+(((-1.0)*x13057*x13060))+((r02*x13056))+((r01*x13062)));
evalcond[5]=((1.0)+(((-1.0)*x13059*x13061))+(((-1.0)*r12*x13060))+((r11*x13063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13064=((1.0)*cj5);
CheckValue<IkReal> x13065 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13064)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13065.valid){
continue;
}
CheckValue<IkReal> x13066=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13064))+(((-1.0)*r20*sj5)))),-1);
if(!x13066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13065.value)+(((1.5707963267949)*(x13066.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13067=IKcos(j4);
IkReal x13068=IKsin(j4);
IkReal x13069=(cj5*r00);
IkReal x13070=(cj5*r20);
IkReal x13071=(cj5*r10);
IkReal x13072=((1.0)*x13067);
IkReal x13073=((1.0)*x13068);
IkReal x13074=(sj5*x13067);
IkReal x13075=(sj5*x13068);
evalcond[0]=(((r21*x13074))+((r22*x13068))+(((-1.0)*x13070*x13072)));
evalcond[1]=(((r12*x13068))+((r11*x13074))+(((-1.0)*x13071*x13072)));
evalcond[2]=(((r21*x13075))+(((-1.0)*x13070*x13073))+(((-1.0)*r22*x13072)));
evalcond[3]=((((-1.0)*r02*x13072))+(((-1.0)*x13069*x13073))+((r01*x13075)));
evalcond[4]=((-1.0)+((r02*x13068))+(((-1.0)*x13069*x13072))+((r01*x13074)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13072))+((r11*x13075))+(((-1.0)*x13071*x13073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13076 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13076.valid){
continue;
}
CheckValue<IkReal> x13077=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13076.value)+(((1.5707963267949)*(x13077.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13078=IKcos(j4);
IkReal x13079=IKsin(j4);
IkReal x13080=(cj5*r00);
IkReal x13081=(cj5*r20);
IkReal x13082=(cj5*r10);
IkReal x13083=((1.0)*x13078);
IkReal x13084=((1.0)*x13079);
IkReal x13085=(sj5*x13078);
IkReal x13086=(sj5*x13079);
evalcond[0]=((((-1.0)*x13081*x13083))+((r22*x13079))+((r21*x13085)));
evalcond[1]=((((-1.0)*x13082*x13083))+((r11*x13085))+((r12*x13079)));
evalcond[2]=((((-1.0)*x13081*x13084))+(((-1.0)*r22*x13083))+((r21*x13086)));
evalcond[3]=((((-1.0)*r02*x13083))+(((-1.0)*x13080*x13084))+((r01*x13086)));
evalcond[4]=((-1.0)+((r02*x13079))+(((-1.0)*x13080*x13083))+((r01*x13085)));
evalcond[5]=((1.0)+(((-1.0)*x13082*x13084))+((r11*x13086))+(((-1.0)*r12*x13083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13087=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13087;
j4eval[1]=IKsign(x13087);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13088=((1.0)*cj5);
IkReal x13089=((((-1.0)*r11*x13088))+(((-1.0)*r10*sj5)));
j4eval[0]=x13089;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x13088))))));
j4eval[2]=IKsign(x13089);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13090=cj5*cj5;
IkReal x13091=(r11*r21);
IkReal x13092=((1.0)*r20);
IkReal x13093=(cj5*sj5);
IkReal x13094=((((-1.0)*r12*r22))+((r11*r20*x13093))+(((-1.0)*r10*x13090*x13092))+((r10*r21*x13093))+((x13090*x13091))+(((-1.0)*x13091)));
j4eval[0]=x13094;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13092)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13094);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13095=cj5*cj5;
IkReal x13096=(r21*sj5);
IkReal x13097=(r11*r21);
IkReal x13098=((1.0)*r20);
CheckValue<IkReal> x13099=IKPowWithIntegerCheck(IKsign((((cj5*r10*x13096))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13095*x13098))+((x13095*x13097))+(((-1.0)*x13097))+((cj5*r11*r20*sj5)))),-1);
if(!x13099.valid){
continue;
}
CheckValue<IkReal> x13100 = IKatan2WithCheck(IkReal((x13096+(((-1.0)*cj5*x13098)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13099.value)))+(x13100.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13101=IKcos(j4);
IkReal x13102=IKsin(j4);
IkReal x13103=(cj5*r00);
IkReal x13104=(cj5*r20);
IkReal x13105=(cj5*r10);
IkReal x13106=((1.0)*x13101);
IkReal x13107=((1.0)*x13102);
IkReal x13108=(sj5*x13101);
IkReal x13109=(sj5*x13102);
evalcond[0]=(((r22*x13102))+(((-1.0)*x13104*x13106))+((r21*x13108)));
evalcond[1]=(((r12*x13102))+(((-1.0)*x13105*x13106))+((r11*x13108)));
evalcond[2]=((((-1.0)*x13104*x13107))+((r21*x13109))+(((-1.0)*r22*x13106)));
evalcond[3]=(((r01*x13109))+(((-1.0)*x13103*x13107))+(((-1.0)*r02*x13106)));
evalcond[4]=((1.0)+((r01*x13108))+(((-1.0)*x13103*x13106))+((r02*x13102)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13106))+(((-1.0)*x13105*x13107))+((r11*x13109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13110=((1.0)*cj5);
CheckValue<IkReal> x13111 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13110)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13111.valid){
continue;
}
CheckValue<IkReal> x13112=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13110))+(((-1.0)*r10*sj5)))),-1);
if(!x13112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13111.value)+(((1.5707963267949)*(x13112.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13113=IKcos(j4);
IkReal x13114=IKsin(j4);
IkReal x13115=(cj5*r00);
IkReal x13116=(cj5*r20);
IkReal x13117=(cj5*r10);
IkReal x13118=((1.0)*x13113);
IkReal x13119=((1.0)*x13114);
IkReal x13120=(sj5*x13113);
IkReal x13121=(sj5*x13114);
evalcond[0]=(((r22*x13114))+(((-1.0)*x13116*x13118))+((r21*x13120)));
evalcond[1]=(((r12*x13114))+((r11*x13120))+(((-1.0)*x13117*x13118)));
evalcond[2]=((((-1.0)*x13116*x13119))+((r21*x13121))+(((-1.0)*r22*x13118)));
evalcond[3]=(((r01*x13121))+(((-1.0)*x13115*x13119))+(((-1.0)*r02*x13118)));
evalcond[4]=((1.0)+((r02*x13114))+((r01*x13120))+(((-1.0)*x13115*x13118)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13118))+((r11*x13121))+(((-1.0)*x13117*x13119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13122=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13122.valid){
continue;
}
CheckValue<IkReal> x13123 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13122.value)))+(x13123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13124=IKcos(j4);
IkReal x13125=IKsin(j4);
IkReal x13126=(cj5*r00);
IkReal x13127=(cj5*r20);
IkReal x13128=(cj5*r10);
IkReal x13129=((1.0)*x13124);
IkReal x13130=((1.0)*x13125);
IkReal x13131=(sj5*x13124);
IkReal x13132=(sj5*x13125);
evalcond[0]=((((-1.0)*x13127*x13129))+((r21*x13131))+((r22*x13125)));
evalcond[1]=(((r12*x13125))+((r11*x13131))+(((-1.0)*x13128*x13129)));
evalcond[2]=(((r21*x13132))+(((-1.0)*r22*x13129))+(((-1.0)*x13127*x13130)));
evalcond[3]=((((-1.0)*r02*x13129))+((r01*x13132))+(((-1.0)*x13126*x13130)));
evalcond[4]=((1.0)+(((-1.0)*x13126*x13129))+((r01*x13131))+((r02*x13125)));
evalcond[5]=((1.0)+((r11*x13132))+(((-1.0)*r12*x13129))+(((-1.0)*x13128*x13130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13133=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13133;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13133);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13134=((1.0)*cj5);
IkReal x13135=((((-1.0)*r21*x13134))+(((-1.0)*r20*sj5)));
j4eval[0]=x13135;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13134))+((r11*sj5))))));
j4eval[2]=IKsign(x13135);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13136=cj5*cj5;
IkReal x13137=(r11*r21);
IkReal x13138=((1.0)*r20);
IkReal x13139=(cj5*sj5);
IkReal x13140=((((-1.0)*r12*r22))+((r10*r21*x13139))+((r11*r20*x13139))+((x13136*x13137))+(((-1.0)*r10*x13136*x13138))+(((-1.0)*x13137)));
j4eval[0]=x13140;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13138)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13140);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13141=cj5*cj5;
IkReal x13142=(r21*sj5);
IkReal x13143=(r11*r21);
IkReal x13144=((1.0)*r20);
CheckValue<IkReal> x13145=IKPowWithIntegerCheck(IKsign((((x13141*x13143))+(((-1.0)*r12*r22))+((cj5*r10*x13142))+(((-1.0)*x13143))+(((-1.0)*r10*x13141*x13144))+((cj5*r11*r20*sj5)))),-1);
if(!x13145.valid){
continue;
}
CheckValue<IkReal> x13146 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13144))+x13142)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13145.value)))+(x13146.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13147=IKcos(j4);
IkReal x13148=IKsin(j4);
IkReal x13149=(cj5*r00);
IkReal x13150=(cj5*r20);
IkReal x13151=(cj5*r10);
IkReal x13152=((1.0)*x13147);
IkReal x13153=((1.0)*x13148);
IkReal x13154=(sj5*x13147);
IkReal x13155=(sj5*x13148);
evalcond[0]=(((r21*x13154))+((r22*x13148))+(((-1.0)*x13150*x13152)));
evalcond[1]=((((-1.0)*x13151*x13152))+((r12*x13148))+((r11*x13154)));
evalcond[2]=(((r21*x13155))+(((-1.0)*r22*x13152))+(((-1.0)*x13150*x13153)));
evalcond[3]=((((-1.0)*r02*x13152))+(((-1.0)*x13149*x13153))+((r01*x13155)));
evalcond[4]=((-1.0)+((r02*x13148))+(((-1.0)*x13149*x13152))+((r01*x13154)));
evalcond[5]=((1.0)+(((-1.0)*x13151*x13153))+(((-1.0)*r12*x13152))+((r11*x13155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13156=((1.0)*cj5);
CheckValue<IkReal> x13157 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13156)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13157.valid){
continue;
}
CheckValue<IkReal> x13158=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13156))+(((-1.0)*r20*sj5)))),-1);
if(!x13158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13157.value)+(((1.5707963267949)*(x13158.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13159=IKcos(j4);
IkReal x13160=IKsin(j4);
IkReal x13161=(cj5*r00);
IkReal x13162=(cj5*r20);
IkReal x13163=(cj5*r10);
IkReal x13164=((1.0)*x13159);
IkReal x13165=((1.0)*x13160);
IkReal x13166=(sj5*x13159);
IkReal x13167=(sj5*x13160);
evalcond[0]=(((r22*x13160))+(((-1.0)*x13162*x13164))+((r21*x13166)));
evalcond[1]=((((-1.0)*x13163*x13164))+((r11*x13166))+((r12*x13160)));
evalcond[2]=((((-1.0)*x13162*x13165))+(((-1.0)*r22*x13164))+((r21*x13167)));
evalcond[3]=(((r01*x13167))+(((-1.0)*x13161*x13165))+(((-1.0)*r02*x13164)));
evalcond[4]=((-1.0)+((r01*x13166))+((r02*x13160))+(((-1.0)*x13161*x13164)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13164))+(((-1.0)*x13163*x13165))+((r11*x13167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13168 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13168.valid){
continue;
}
CheckValue<IkReal> x13169=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13168.value)+(((1.5707963267949)*(x13169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13170=IKcos(j4);
IkReal x13171=IKsin(j4);
IkReal x13172=(cj5*r00);
IkReal x13173=(cj5*r20);
IkReal x13174=(cj5*r10);
IkReal x13175=((1.0)*x13170);
IkReal x13176=((1.0)*x13171);
IkReal x13177=(sj5*x13170);
IkReal x13178=(sj5*x13171);
evalcond[0]=((((-1.0)*x13173*x13175))+((r22*x13171))+((r21*x13177)));
evalcond[1]=(((r12*x13171))+((r11*x13177))+(((-1.0)*x13174*x13175)));
evalcond[2]=((((-1.0)*x13173*x13176))+(((-1.0)*r22*x13175))+((r21*x13178)));
evalcond[3]=(((r01*x13178))+(((-1.0)*x13172*x13176))+(((-1.0)*r02*x13175)));
evalcond[4]=((-1.0)+((r01*x13177))+(((-1.0)*x13172*x13175))+((r02*x13171)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13175))+((r11*x13178))+(((-1.0)*x13174*x13176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13179=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13179);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13179);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13180=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13180);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13180);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13181=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13181))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13181)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13182=((1.0)*cj5);
CheckValue<IkReal> x13183=IKPowWithIntegerCheck(((((-1.0)*r10*x13182))+((r11*sj5))),-1);
if(!x13183.valid){
continue;
}
CheckValue<IkReal> x13184=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13182))),-1);
if(!x13184.valid){
continue;
}
if( IKabs(((-1.0)*(x13183.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13184.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13183.value)))+IKsqr(((x13184.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13183.value)), ((x13184.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13185=IKsin(j4);
IkReal x13186=IKcos(j4);
IkReal x13187=((1.0)*cj5);
IkReal x13188=((1.0)*cj2);
IkReal x13189=(sj5*x13186);
IkReal x13190=(sj5*x13185);
evalcond[0]=((-1.0)*r22*x13186);
evalcond[1]=(((r22*x13185))+((sj1*sj2))+(((-1.0)*cj1*x13188)));
evalcond[2]=(((r01*x13190))+(((-1.0)*r00*x13185*x13187)));
evalcond[3]=(((r11*x13189))+(((-1.0)*r10*x13186*x13187)));
evalcond[4]=((1.0)+((r11*x13190))+(((-1.0)*r10*x13185*x13187)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x13189))+(((-1.0)*r00*x13186*x13187))+(((-1.0)*sj1*x13188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13191=IKPowWithIntegerCheck(r22,-1);
if(!x13191.valid){
continue;
}
CheckValue<IkReal> x13192=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13192.valid){
continue;
}
if( IKabs(((x13191.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13192.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13191.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13192.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13191.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13192.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13193=IKsin(j4);
IkReal x13194=IKcos(j4);
IkReal x13195=((1.0)*cj5);
IkReal x13196=((1.0)*cj2);
IkReal x13197=(sj5*x13194);
IkReal x13198=(sj5*x13193);
evalcond[0]=((-1.0)*r22*x13194);
evalcond[1]=((((-1.0)*cj1*x13196))+((sj1*sj2))+((r22*x13193)));
evalcond[2]=((((-1.0)*r00*x13193*x13195))+((r01*x13198)));
evalcond[3]=(((r11*x13197))+(((-1.0)*r10*x13194*x13195)));
evalcond[4]=((1.0)+((r11*x13198))+(((-1.0)*r10*x13193*x13195)));
evalcond[5]=((((-1.0)*r00*x13194*x13195))+(((-1.0)*cj1*sj2))+((r01*x13197))+(((-1.0)*sj1*x13196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13199=(sj1*sj2);
IkReal x13200=(cj5*r10);
IkReal x13201=(r11*sj5);
IkReal x13202=(cj1*cj2);
CheckValue<IkReal> x13203=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13203.valid){
continue;
}
CheckValue<IkReal> x13204 = IKatan2WithCheck(IkReal(((((-1.0)*x13201*x13202))+((x13199*x13201))+((x13200*x13202))+(((-1.0)*x13199*x13200)))),IkReal((((r12*x13202))+(((-1.0)*r12*x13199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13203.value)))+(x13204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13205=IKcos(j4);
IkReal x13206=IKsin(j4);
IkReal x13207=(cj5*r00);
IkReal x13208=(cj5*r10);
IkReal x13209=(r21*sj5);
IkReal x13210=((1.0)*cj2);
IkReal x13211=(cj5*r20);
IkReal x13212=((1.0)*x13205);
IkReal x13213=((1.0)*x13206);
IkReal x13214=(sj5*x13206);
IkReal x13215=(sj5*x13205);
evalcond[0]=(((r11*x13215))+(((-1.0)*x13208*x13212))+((r12*x13206)));
evalcond[1]=((((-1.0)*x13211*x13213))+(((-1.0)*r22*x13212))+((x13206*x13209)));
evalcond[2]=((((-1.0)*x13207*x13213))+((r01*x13214))+(((-1.0)*r02*x13212)));
evalcond[3]=((1.0)+((r11*x13214))+(((-1.0)*x13208*x13213))+(((-1.0)*r12*x13212)));
evalcond[4]=((((-1.0)*cj1*x13210))+((x13205*x13209))+((sj1*sj2))+((r22*x13206))+(((-1.0)*x13211*x13212)));
evalcond[5]=((((-1.0)*x13207*x13212))+((r01*x13215))+((r02*x13206))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13216=((1.0)*cj5);
CheckValue<IkReal> x13217 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13216)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13217.valid){
continue;
}
CheckValue<IkReal> x13218=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13216)))),-1);
if(!x13218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13217.value)+(((1.5707963267949)*(x13218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13219=IKcos(j4);
IkReal x13220=IKsin(j4);
IkReal x13221=(cj5*r00);
IkReal x13222=(cj5*r10);
IkReal x13223=(r21*sj5);
IkReal x13224=((1.0)*cj2);
IkReal x13225=(cj5*r20);
IkReal x13226=((1.0)*x13219);
IkReal x13227=((1.0)*x13220);
IkReal x13228=(sj5*x13220);
IkReal x13229=(sj5*x13219);
evalcond[0]=(((r11*x13229))+((r12*x13220))+(((-1.0)*x13222*x13226)));
evalcond[1]=((((-1.0)*r22*x13226))+((x13220*x13223))+(((-1.0)*x13225*x13227)));
evalcond[2]=((((-1.0)*x13221*x13227))+(((-1.0)*r02*x13226))+((r01*x13228)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13226))+((r11*x13228))+(((-1.0)*x13222*x13227)));
evalcond[4]=((((-1.0)*cj1*x13224))+((r22*x13220))+((x13219*x13223))+((sj1*sj2))+(((-1.0)*x13225*x13226)));
evalcond[5]=(((r02*x13220))+(((-1.0)*x13221*x13226))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13224))+((r01*x13229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13230=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13230.valid){
continue;
}
CheckValue<IkReal> x13231 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13230.value)))+(x13231.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13232=IKcos(j4);
IkReal x13233=IKsin(j4);
IkReal x13234=(cj5*r00);
IkReal x13235=(cj5*r10);
IkReal x13236=(r21*sj5);
IkReal x13237=((1.0)*cj2);
IkReal x13238=(cj5*r20);
IkReal x13239=((1.0)*x13232);
IkReal x13240=((1.0)*x13233);
IkReal x13241=(sj5*x13233);
IkReal x13242=(sj5*x13232);
evalcond[0]=((((-1.0)*x13235*x13239))+((r11*x13242))+((r12*x13233)));
evalcond[1]=(((x13233*x13236))+(((-1.0)*x13238*x13240))+(((-1.0)*r22*x13239)));
evalcond[2]=((((-1.0)*x13234*x13240))+(((-1.0)*r02*x13239))+((r01*x13241)));
evalcond[3]=((1.0)+(((-1.0)*x13235*x13240))+(((-1.0)*r12*x13239))+((r11*x13241)));
evalcond[4]=((((-1.0)*cj1*x13237))+(((-1.0)*x13238*x13239))+((sj1*sj2))+((r22*x13233))+((x13232*x13236)));
evalcond[5]=((((-1.0)*sj1*x13237))+(((-1.0)*cj1*sj2))+((r02*x13233))+(((-1.0)*x13234*x13239))+((r01*x13242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13243=((-1.0)*r00);
IkReal x13245 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13245)==0){
continue;
}
IkReal x13244=pow(x13245,-0.5);
CheckValue<IkReal> x13246 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13243),IKFAST_ATAN2_MAGTHRESH);
if(!x13246.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13246.value));
IkReal gconst19=(r01*x13244);
IkReal gconst20=(x13243*x13244);
CheckValue<IkReal> x13247 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13247.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13247.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13248=((-1.0)*r00);
IkReal x13249=x13244;
CheckValue<IkReal> x13251 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13248),IKFAST_ATAN2_MAGTHRESH);
if(!x13251.valid){
continue;
}
IkReal x13250=((-1.0)*(x13251.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13250;
IkReal gconst18=x13250;
IkReal gconst19=(r01*x13249);
IkReal gconst20=(x13248*x13249);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13252=((-1.0)*r00);
IkReal x13253=x13244;
CheckValue<IkReal> x13255 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13252),IKFAST_ATAN2_MAGTHRESH);
if(!x13255.valid){
continue;
}
IkReal x13254=((-1.0)*(x13255.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13254;
IkReal gconst18=x13254;
IkReal gconst19=(r01*x13253);
IkReal gconst20=(x13252*x13253);
CheckValue<IkReal> x13263=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13263.valid){
continue;
}
IkReal x13256=x13263.value;
IkReal x13257=(sj3*x13256);
IkReal x13258=(r11*x13257);
IkReal x13259=(r21*x13257);
IkReal x13260=(r20*x13257);
IkReal x13261=(r10*x13257);
IkReal x13262=(r00*r01*x13257);
j4eval[0]=IKsign((((r00*r01*r10*x13259))+((r10*x13260*(r00*r00)))+((r12*r22*sj3))+((r00*r01*r20*x13258))+((r21*x13258*(r01*r01)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13264=gconst19*gconst19;
IkReal x13265=gconst20*gconst20;
IkReal x13266=(gconst20*sj3);
IkReal x13267=((1.0)*cj3);
IkReal x13268=(r10*sj3);
IkReal x13269=(gconst19*r21);
IkReal x13270=(r11*r20);
IkReal x13271=(cj3*gconst20);
IkReal x13272=((1.0)*r10*r20);
IkReal x13273=(r21*x13264);
CheckValue<IkReal> x13274=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13267*x13273))+((gconst19*x13270*x13271))+(((-1.0)*r12*r22*x13267))+((r10*x13269*x13271))+(((-1.0)*r10*r20*x13265*x13267)))),-1);
if(!x13274.valid){
continue;
}
CheckValue<IkReal> x13275 = IKatan2WithCheck(IkReal((((gconst19*r22*x13268))+((r11*r22*x13266)))),IkReal((((r11*x13266*x13269))+(((-1.0)*gconst19*x13266*x13272))+(((-1.0)*sj3*x13265*x13270))+((x13268*x13273)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13274.value)))+(x13275.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13276=IKsin(j4);
IkReal x13277=IKcos(j4);
IkReal x13278=(sj1*sj2);
IkReal x13279=(gconst20*sj3);
IkReal x13280=(gconst19*r21);
IkReal x13281=(gconst20*r10);
IkReal x13282=(cj3*gconst19);
IkReal x13283=(gconst19*sj3);
IkReal x13284=((1.0)*cj1);
IkReal x13285=(cj3*gconst20);
IkReal x13286=(cj2*sj1);
IkReal x13287=(cj2*x13284);
IkReal x13288=((1.0)*x13277);
IkReal x13289=((1.0)*x13276);
IkReal x13290=(cj3*x13276);
IkReal x13291=(gconst19*x13276);
evalcond[0]=((((-1.0)*r22*x13288))+(((-1.0)*gconst20*r20*x13289))+((x13276*x13280)));
evalcond[1]=((((-1.0)*gconst20*r00*x13289))+(((-1.0)*r02*x13288))+((r01*x13291)));
evalcond[2]=((1.0)+((r11*x13291))+(((-1.0)*x13281*x13289))+(((-1.0)*r12*x13288)));
evalcond[3]=(((r11*x13279))+((r12*x13290))+((r10*x13283))+(((-1.0)*cj3*x13281*x13288))+((r11*x13277*x13282)));
evalcond[4]=((((-1.0)*r11*x13283*x13288))+((r11*x13285))+((r10*x13282))+((r10*x13277*x13279))+(((-1.0)*r12*sj3*x13289)));
evalcond[5]=(((r21*x13279))+((r20*x13283))+((cj1*sj2))+((cj3*x13277*x13280))+((r22*x13290))+(((-1.0)*r20*x13285*x13288))+x13286);
evalcond[6]=(((r01*x13279))+((r02*x13290))+((r01*x13277*x13282))+(((-1.0)*r00*x13285*x13288))+x13278+((r00*x13283))+(((-1.0)*x13287)));
evalcond[7]=(((r20*x13277*x13279))+(((-1.0)*sj3*x13280*x13288))+((r20*x13282))+(((-1.0)*r22*sj3*x13289))+((r21*x13285))+x13278+(((-1.0)*x13287)));
evalcond[8]=(((r00*x13277*x13279))+(((-1.0)*sj2*x13284))+(((-1.0)*r01*x13283*x13288))+(((-1.0)*x13286))+((r01*x13285))+((r00*x13282))+(((-1.0)*r02*sj3*x13289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13292=gconst19*gconst19;
IkReal x13293=gconst20*gconst20;
IkReal x13294=(r21*sj3);
IkReal x13295=(cj3*r11);
IkReal x13296=(gconst19*gconst20);
IkReal x13297=((1.0)*r10);
IkReal x13298=(cj3*r10);
IkReal x13299=(r20*x13293);
CheckValue<IkReal> x13300 = IKatan2WithCheck(IkReal((((gconst20*r22*x13295))+((gconst19*r22*x13298)))),IkReal((((r21*x13292*x13298))+(((-1.0)*cj3*r20*x13296*x13297))+(((-1.0)*x13295*x13299))+((r21*x13295*x13296)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13300.valid){
continue;
}
CheckValue<IkReal> x13301=IKPowWithIntegerCheck(IKsign((((r11*x13292*x13294))+((r10*sj3*x13299))+(((-1.0)*x13294*x13296*x13297))+(((-1.0)*r11*r20*sj3*x13296))+((r12*r22*sj3)))),-1);
if(!x13301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13300.value)+(((1.5707963267949)*(x13301.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13302=IKsin(j4);
IkReal x13303=IKcos(j4);
IkReal x13304=(sj1*sj2);
IkReal x13305=(gconst20*sj3);
IkReal x13306=(gconst19*r21);
IkReal x13307=(gconst20*r10);
IkReal x13308=(cj3*gconst19);
IkReal x13309=(gconst19*sj3);
IkReal x13310=((1.0)*cj1);
IkReal x13311=(cj3*gconst20);
IkReal x13312=(cj2*sj1);
IkReal x13313=(cj2*x13310);
IkReal x13314=((1.0)*x13303);
IkReal x13315=((1.0)*x13302);
IkReal x13316=(cj3*x13302);
IkReal x13317=(gconst19*x13302);
evalcond[0]=((((-1.0)*gconst20*r20*x13315))+((x13302*x13306))+(((-1.0)*r22*x13314)));
evalcond[1]=((((-1.0)*gconst20*r00*x13315))+((r01*x13317))+(((-1.0)*r02*x13314)));
evalcond[2]=((1.0)+((r11*x13317))+(((-1.0)*x13307*x13315))+(((-1.0)*r12*x13314)));
evalcond[3]=(((r11*x13303*x13308))+((r10*x13309))+(((-1.0)*cj3*x13307*x13314))+((r11*x13305))+((r12*x13316)));
evalcond[4]=(((r11*x13311))+((r10*x13308))+(((-1.0)*r11*x13309*x13314))+((r10*x13303*x13305))+(((-1.0)*r12*sj3*x13315)));
evalcond[5]=(((r21*x13305))+(((-1.0)*r20*x13311*x13314))+((r20*x13309))+((cj1*sj2))+((cj3*x13303*x13306))+((r22*x13316))+x13312);
evalcond[6]=((((-1.0)*r00*x13311*x13314))+((r01*x13303*x13308))+((r00*x13309))+((r01*x13305))+(((-1.0)*x13313))+x13304+((r02*x13316)));
evalcond[7]=(((r20*x13303*x13305))+(((-1.0)*r22*sj3*x13315))+((r20*x13308))+(((-1.0)*sj3*x13306*x13314))+(((-1.0)*x13313))+((r21*x13311))+x13304);
evalcond[8]=((((-1.0)*r01*x13309*x13314))+(((-1.0)*sj2*x13310))+(((-1.0)*r02*sj3*x13315))+((r01*x13311))+((r00*x13303*x13305))+((r00*x13308))+(((-1.0)*x13312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13318 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13318.valid){
continue;
}
CheckValue<IkReal> x13319=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13318.value)+(((1.5707963267949)*(x13319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13320=IKsin(j4);
IkReal x13321=IKcos(j4);
IkReal x13322=(sj1*sj2);
IkReal x13323=(gconst20*sj3);
IkReal x13324=(gconst19*r21);
IkReal x13325=(gconst20*r10);
IkReal x13326=(cj3*gconst19);
IkReal x13327=(gconst19*sj3);
IkReal x13328=((1.0)*cj1);
IkReal x13329=(cj3*gconst20);
IkReal x13330=(cj2*sj1);
IkReal x13331=(cj2*x13328);
IkReal x13332=((1.0)*x13321);
IkReal x13333=((1.0)*x13320);
IkReal x13334=(cj3*x13320);
IkReal x13335=(gconst19*x13320);
evalcond[0]=((((-1.0)*r22*x13332))+((x13320*x13324))+(((-1.0)*gconst20*r20*x13333)));
evalcond[1]=(((r01*x13335))+(((-1.0)*gconst20*r00*x13333))+(((-1.0)*r02*x13332)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13332))+(((-1.0)*x13325*x13333))+((r11*x13335)));
evalcond[3]=((((-1.0)*cj3*x13325*x13332))+((r10*x13327))+((r11*x13323))+((r12*x13334))+((r11*x13321*x13326)));
evalcond[4]=((((-1.0)*r11*x13327*x13332))+((r10*x13326))+((r10*x13321*x13323))+(((-1.0)*r12*sj3*x13333))+((r11*x13329)));
evalcond[5]=(((r22*x13334))+((cj3*x13321*x13324))+((cj1*sj2))+((r20*x13327))+(((-1.0)*r20*x13329*x13332))+((r21*x13323))+x13330);
evalcond[6]=((((-1.0)*x13331))+((r02*x13334))+(((-1.0)*r00*x13329*x13332))+((r00*x13327))+((r01*x13321*x13326))+((r01*x13323))+x13322);
evalcond[7]=((((-1.0)*x13331))+((r20*x13321*x13323))+((r20*x13326))+((r21*x13329))+(((-1.0)*sj3*x13324*x13332))+(((-1.0)*r22*sj3*x13333))+x13322);
evalcond[8]=((((-1.0)*x13330))+(((-1.0)*r02*sj3*x13333))+((r00*x13326))+((r01*x13329))+((r00*x13321*x13323))+(((-1.0)*r01*x13327*x13332))+(((-1.0)*sj2*x13328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13336=((-1.0)*r01);
IkReal x13338 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13338)==0){
continue;
}
IkReal x13337=pow(x13338,-0.5);
CheckValue<IkReal> x13339 = IKatan2WithCheck(IkReal(x13336),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13339.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13339.value))));
IkReal gconst22=(x13336*x13337);
IkReal gconst23=((1.0)*r00*x13337);
CheckValue<IkReal> x13340 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13340.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13340.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13341=((-1.0)*r01);
CheckValue<IkReal> x13344 = IKatan2WithCheck(IkReal(x13341),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13344.valid){
continue;
}
IkReal x13342=((1.0)*(x13344.value));
IkReal x13343=x13337;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13342)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13342)));
IkReal gconst22=(x13341*x13343);
IkReal gconst23=((1.0)*r00*x13343);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13345=((-1.0)*r01);
CheckValue<IkReal> x13348 = IKatan2WithCheck(IkReal(x13345),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13348.valid){
continue;
}
IkReal x13346=((1.0)*(x13348.value));
IkReal x13347=x13337;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13346)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13346)));
IkReal gconst22=(x13345*x13347);
IkReal gconst23=((1.0)*r00*x13347);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13349=gconst22*gconst22;
IkReal x13350=gconst23*gconst23;
IkReal x13351=(r21*sj3);
IkReal x13352=((1.0)*cj3);
IkReal x13353=(gconst23*r11);
IkReal x13354=(r22*sj3);
IkReal x13355=(gconst22*r10);
IkReal x13356=((1.0)*r20*sj3);
CheckValue<IkReal> x13357 = IKatan2WithCheck(IkReal((((x13353*x13354))+((x13354*x13355)))),IkReal((((r10*x13349*x13351))+(((-1.0)*gconst23*x13355*x13356))+((gconst22*x13351*x13353))+(((-1.0)*r11*x13350*x13356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13357.valid){
continue;
}
CheckValue<IkReal> x13358=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13352))+(((-1.0)*r11*r21*x13349*x13352))+((cj3*gconst22*r20*x13353))+((cj3*gconst23*r21*x13355))+(((-1.0)*r10*r20*x13350*x13352)))),-1);
if(!x13358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13357.value)+(((1.5707963267949)*(x13358.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13359=IKsin(j4);
IkReal x13360=IKcos(j4);
IkReal x13361=(sj1*sj2);
IkReal x13362=(gconst23*sj3);
IkReal x13363=(gconst22*sj3);
IkReal x13364=(cj2*sj1);
IkReal x13365=((1.0)*cj1);
IkReal x13366=(cj3*gconst23);
IkReal x13367=(cj3*gconst22);
IkReal x13368=(cj2*x13365);
IkReal x13369=((1.0)*x13360);
IkReal x13370=(cj3*x13359);
IkReal x13371=(gconst22*x13359);
IkReal x13372=((1.0)*sj3*x13359);
IkReal x13373=(x13360*x13367);
IkReal x13374=((1.0)*gconst23*x13359);
evalcond[0]=((((-1.0)*r22*x13369))+(((-1.0)*r20*x13374))+((r21*x13371)));
evalcond[1]=((((-1.0)*r00*x13374))+((r01*x13371))+(((-1.0)*r02*x13369)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13369))+((r11*x13371))+(((-1.0)*r10*x13374)));
evalcond[3]=(((r10*x13363))+((r12*x13370))+((r11*x13373))+((r11*x13362))+(((-1.0)*r10*x13366*x13369)));
evalcond[4]=(((r10*x13367))+((r10*x13360*x13362))+((r11*x13366))+(((-1.0)*r11*x13363*x13369))+(((-1.0)*r12*x13372)));
evalcond[5]=(((r20*x13363))+((cj1*sj2))+((r22*x13370))+((r21*x13362))+(((-1.0)*r20*x13366*x13369))+((r21*x13373))+x13364);
evalcond[6]=(((r02*x13370))+((r01*x13362))+((r01*x13373))+((r00*x13363))+(((-1.0)*r00*x13366*x13369))+(((-1.0)*x13368))+x13361);
evalcond[7]=(((r20*x13367))+(((-1.0)*r22*x13372))+((r20*x13360*x13362))+(((-1.0)*r21*x13363*x13369))+(((-1.0)*x13368))+((r21*x13366))+x13361);
evalcond[8]=((((-1.0)*x13364))+(((-1.0)*sj2*x13365))+((r01*x13366))+((r00*x13367))+((r00*x13360*x13362))+(((-1.0)*r02*x13372))+(((-1.0)*r01*x13363*x13369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13375=((1.0)*gconst23);
CheckValue<IkReal> x13376=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13375)))),-1);
if(!x13376.valid){
continue;
}
CheckValue<IkReal> x13377 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13375))+((gconst22*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13376.value)))+(x13377.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13378=IKsin(j4);
IkReal x13379=IKcos(j4);
IkReal x13380=(sj1*sj2);
IkReal x13381=(gconst23*sj3);
IkReal x13382=(gconst22*sj3);
IkReal x13383=(cj2*sj1);
IkReal x13384=((1.0)*cj1);
IkReal x13385=(cj3*gconst23);
IkReal x13386=(cj3*gconst22);
IkReal x13387=(cj2*x13384);
IkReal x13388=((1.0)*x13379);
IkReal x13389=(cj3*x13378);
IkReal x13390=(gconst22*x13378);
IkReal x13391=((1.0)*sj3*x13378);
IkReal x13392=(x13379*x13386);
IkReal x13393=((1.0)*gconst23*x13378);
evalcond[0]=(((r21*x13390))+(((-1.0)*r22*x13388))+(((-1.0)*r20*x13393)));
evalcond[1]=(((r01*x13390))+(((-1.0)*r00*x13393))+(((-1.0)*r02*x13388)));
evalcond[2]=((1.0)+((r11*x13390))+(((-1.0)*r10*x13393))+(((-1.0)*r12*x13388)));
evalcond[3]=(((r11*x13392))+((r11*x13381))+((r10*x13382))+((r12*x13389))+(((-1.0)*r10*x13385*x13388)));
evalcond[4]=(((r11*x13385))+((r10*x13386))+(((-1.0)*r11*x13382*x13388))+((r10*x13379*x13381))+(((-1.0)*r12*x13391)));
evalcond[5]=(((r21*x13392))+((r20*x13382))+((cj1*sj2))+((r22*x13389))+(((-1.0)*r20*x13385*x13388))+x13383+((r21*x13381)));
evalcond[6]=((((-1.0)*r00*x13385*x13388))+((r01*x13381))+((r01*x13392))+((r00*x13382))+(((-1.0)*x13387))+((r02*x13389))+x13380);
evalcond[7]=((((-1.0)*r22*x13391))+((r20*x13386))+(((-1.0)*r21*x13382*x13388))+((r20*x13379*x13381))+(((-1.0)*x13387))+x13380+((r21*x13385)));
evalcond[8]=((((-1.0)*x13383))+(((-1.0)*r01*x13382*x13388))+((r01*x13385))+((r00*x13386))+((r00*x13379*x13381))+(((-1.0)*r02*x13391))+(((-1.0)*sj2*x13384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13394=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13394.valid){
continue;
}
CheckValue<IkReal> x13395 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13394.value)))+(x13395.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13396=IKsin(j4);
IkReal x13397=IKcos(j4);
IkReal x13398=(sj1*sj2);
IkReal x13399=(gconst23*sj3);
IkReal x13400=(gconst22*sj3);
IkReal x13401=(cj2*sj1);
IkReal x13402=((1.0)*cj1);
IkReal x13403=(cj3*gconst23);
IkReal x13404=(cj3*gconst22);
IkReal x13405=(cj2*x13402);
IkReal x13406=((1.0)*x13397);
IkReal x13407=(cj3*x13396);
IkReal x13408=(gconst22*x13396);
IkReal x13409=((1.0)*sj3*x13396);
IkReal x13410=(x13397*x13404);
IkReal x13411=((1.0)*gconst23*x13396);
evalcond[0]=((((-1.0)*r20*x13411))+((r21*x13408))+(((-1.0)*r22*x13406)));
evalcond[1]=((((-1.0)*r02*x13406))+((r01*x13408))+(((-1.0)*r00*x13411)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13411))+((r11*x13408))+(((-1.0)*r12*x13406)));
evalcond[3]=(((r11*x13399))+(((-1.0)*r10*x13403*x13406))+((r10*x13400))+((r12*x13407))+((r11*x13410)));
evalcond[4]=((((-1.0)*r11*x13400*x13406))+((r10*x13397*x13399))+((r11*x13403))+((r10*x13404))+(((-1.0)*r12*x13409)));
evalcond[5]=(x13401+((r21*x13399))+((cj1*sj2))+(((-1.0)*r20*x13403*x13406))+((r22*x13407))+((r20*x13400))+((r21*x13410)));
evalcond[6]=(((r00*x13400))+(((-1.0)*x13405))+(((-1.0)*r00*x13403*x13406))+((r01*x13399))+((r02*x13407))+((r01*x13410))+x13398);
evalcond[7]=(((r21*x13403))+(((-1.0)*r21*x13400*x13406))+(((-1.0)*x13405))+((r20*x13397*x13399))+(((-1.0)*r22*x13409))+((r20*x13404))+x13398);
evalcond[8]=((((-1.0)*r02*x13409))+((r01*x13403))+((r00*x13404))+(((-1.0)*r01*x13400*x13406))+(((-1.0)*sj2*x13402))+((r00*x13397*x13399))+(((-1.0)*x13401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13413 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13413)==0){
continue;
}
IkReal x13412=pow(x13413,-0.5);
CheckValue<IkReal> x13414 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13414.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13414.value));
IkReal gconst25=((-1.0)*r21*x13412);
IkReal gconst26=(r20*x13412);
CheckValue<IkReal> x13415 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13415.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13415.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13418 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13418.valid){
continue;
}
IkReal x13416=((-1.0)*(x13418.value));
IkReal x13417=x13412;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13416;
IkReal gconst24=x13416;
IkReal gconst25=((-1.0)*r21*x13417);
IkReal gconst26=(r20*x13417);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13421 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13421.valid){
continue;
}
IkReal x13419=((-1.0)*(x13421.value));
IkReal x13420=x13412;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13419;
IkReal gconst24=x13419;
IkReal gconst25=((-1.0)*r21*x13420);
IkReal gconst26=(r20*x13420);
CheckValue<IkReal> x13429=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13429.valid){
continue;
}
IkReal x13422=x13429.value;
IkReal x13423=(sj3*x13422);
IkReal x13424=(r11*x13423);
IkReal x13425=(r00*x13423);
IkReal x13426=(r01*x13423);
IkReal x13427=(r10*x13423);
IkReal x13428=(r20*r21*x13423);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x13425*(r20*r20)))+((r01*x13424*(r21*r21)))+((r10*r20*r21*x13426))+((r00*r20*r21*x13424))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13430=gconst25*gconst25;
IkReal x13431=gconst26*gconst26;
IkReal x13432=(r00*r11);
IkReal x13433=(r01*r10);
IkReal x13434=(r02*sj3);
IkReal x13435=(gconst25*r10);
IkReal x13436=(gconst26*r11);
IkReal x13437=((1.0)*sj3);
IkReal x13438=((1.0)*cj3);
IkReal x13439=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13440=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r11*x13430*x13438))+((x13432*x13439))+(((-1.0)*r00*r10*x13431*x13438))+((x13433*x13439))+(((-1.0)*r02*r12*x13438)))),-1);
if(!x13440.valid){
continue;
}
CheckValue<IkReal> x13441 = IKatan2WithCheck(IkReal((((x13434*x13435))+((x13434*x13436)))),IkReal((((gconst25*r01*sj3*x13436))+(((-1.0)*gconst26*r00*x13435*x13437))+(((-1.0)*x13431*x13432*x13437))+((sj3*x13430*x13433)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13440.value)))+(x13441.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13442=IKsin(j4);
IkReal x13443=IKcos(j4);
IkReal x13444=(sj1*sj2);
IkReal x13445=(gconst26*sj3);
IkReal x13446=(gconst25*sj3);
IkReal x13447=(gconst26*r10);
IkReal x13448=(gconst25*r11);
IkReal x13449=(cj3*gconst25);
IkReal x13450=((1.0)*cj2);
IkReal x13451=(cj1*sj2);
IkReal x13452=(gconst26*r00);
IkReal x13453=(gconst26*r20);
IkReal x13454=(cj3*gconst26);
IkReal x13455=(cj1*x13450);
IkReal x13456=((1.0)*x13443);
IkReal x13457=((1.0)*x13442);
IkReal x13458=(cj3*x13442);
IkReal x13459=(gconst25*x13442);
evalcond[0]=((((-1.0)*r22*x13456))+(((-1.0)*x13453*x13457))+((r21*x13459)));
evalcond[1]=((((-1.0)*x13452*x13457))+(((-1.0)*r02*x13456))+((r01*x13459)));
evalcond[2]=((1.0)+((x13442*x13448))+(((-1.0)*x13447*x13457))+(((-1.0)*r12*x13456)));
evalcond[3]=(((r12*x13458))+(((-1.0)*cj3*x13447*x13456))+((cj3*x13443*x13448))+((r10*x13446))+((r11*x13445)));
evalcond[4]=(((r10*x13443*x13445))+((r11*x13454))+(((-1.0)*r11*x13446*x13456))+(((-1.0)*r12*sj3*x13457))+((r10*x13449)));
evalcond[5]=(x13451+(((-1.0)*cj3*x13453*x13456))+((cj2*sj1))+((r21*x13443*x13449))+((r20*x13446))+((r22*x13458))+((r21*x13445)));
evalcond[6]=(x13444+(((-1.0)*cj3*x13452*x13456))+(((-1.0)*x13455))+((r00*x13446))+((r01*x13445))+((r02*x13458))+((r01*x13443*x13449)));
evalcond[7]=(x13444+(((-1.0)*r21*x13446*x13456))+((r21*x13454))+((r20*x13443*x13445))+(((-1.0)*x13455))+((r20*x13449))+(((-1.0)*r22*sj3*x13457)));
evalcond[8]=((((-1.0)*r02*sj3*x13457))+(((-1.0)*sj1*x13450))+(((-1.0)*x13451))+((r00*x13449))+((r00*x13443*x13445))+(((-1.0)*r01*x13446*x13456))+((r01*x13454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13460=gconst26*gconst26;
IkReal x13461=gconst25*gconst25;
IkReal x13462=(r01*r10);
IkReal x13463=(cj3*r11);
IkReal x13464=(gconst25*gconst26);
IkReal x13465=(cj3*r10);
IkReal x13466=(r00*x13460);
IkReal x13467=((1.0)*sj3*x13464);
CheckValue<IkReal> x13468 = IKatan2WithCheck(IkReal((((gconst25*r02*x13465))+((gconst26*r02*x13463)))),IkReal((((cj3*x13461*x13462))+(((-1.0)*r00*x13464*x13465))+(((-1.0)*x13463*x13466))+((r01*x13463*x13464)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13468.valid){
continue;
}
CheckValue<IkReal> x13469=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x13462*x13467))+(((-1.0)*r00*r11*x13467))+((r01*r11*sj3*x13461))+((r10*sj3*x13466)))),-1);
if(!x13469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13468.value)+(((1.5707963267949)*(x13469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13470=IKsin(j4);
IkReal x13471=IKcos(j4);
IkReal x13472=(sj1*sj2);
IkReal x13473=(gconst26*sj3);
IkReal x13474=(gconst25*sj3);
IkReal x13475=(gconst26*r10);
IkReal x13476=(gconst25*r11);
IkReal x13477=(cj3*gconst25);
IkReal x13478=((1.0)*cj2);
IkReal x13479=(cj1*sj2);
IkReal x13480=(gconst26*r00);
IkReal x13481=(gconst26*r20);
IkReal x13482=(cj3*gconst26);
IkReal x13483=(cj1*x13478);
IkReal x13484=((1.0)*x13471);
IkReal x13485=((1.0)*x13470);
IkReal x13486=(cj3*x13470);
IkReal x13487=(gconst25*x13470);
evalcond[0]=((((-1.0)*x13481*x13485))+(((-1.0)*r22*x13484))+((r21*x13487)));
evalcond[1]=((((-1.0)*r02*x13484))+((r01*x13487))+(((-1.0)*x13480*x13485)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13484))+((x13470*x13476))+(((-1.0)*x13475*x13485)));
evalcond[3]=(((r11*x13473))+((r10*x13474))+((cj3*x13471*x13476))+(((-1.0)*cj3*x13475*x13484))+((r12*x13486)));
evalcond[4]=(((r10*x13477))+(((-1.0)*r12*sj3*x13485))+((r10*x13471*x13473))+((r11*x13482))+(((-1.0)*r11*x13474*x13484)));
evalcond[5]=(x13479+((cj2*sj1))+((r21*x13471*x13477))+((r21*x13473))+(((-1.0)*cj3*x13481*x13484))+((r20*x13474))+((r22*x13486)));
evalcond[6]=(x13472+(((-1.0)*x13483))+((r02*x13486))+((r00*x13474))+((r01*x13473))+(((-1.0)*cj3*x13480*x13484))+((r01*x13471*x13477)));
evalcond[7]=(x13472+(((-1.0)*x13483))+(((-1.0)*r22*sj3*x13485))+((r20*x13471*x13473))+(((-1.0)*r21*x13474*x13484))+((r20*x13477))+((r21*x13482)));
evalcond[8]=(((r00*x13477))+(((-1.0)*sj1*x13478))+(((-1.0)*r01*x13474*x13484))+(((-1.0)*x13479))+((r00*x13471*x13473))+((r01*x13482))+(((-1.0)*r02*sj3*x13485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13488=((1.0)*gconst26);
CheckValue<IkReal> x13489=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13488))+(((-1.0)*gconst25*r00)))),-1);
if(!x13489.valid){
continue;
}
CheckValue<IkReal> x13490 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13488))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13489.value)))+(x13490.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13491=IKsin(j4);
IkReal x13492=IKcos(j4);
IkReal x13493=(sj1*sj2);
IkReal x13494=(gconst26*sj3);
IkReal x13495=(gconst25*sj3);
IkReal x13496=(gconst26*r10);
IkReal x13497=(gconst25*r11);
IkReal x13498=(cj3*gconst25);
IkReal x13499=((1.0)*cj2);
IkReal x13500=(cj1*sj2);
IkReal x13501=(gconst26*r00);
IkReal x13502=(gconst26*r20);
IkReal x13503=(cj3*gconst26);
IkReal x13504=(cj1*x13499);
IkReal x13505=((1.0)*x13492);
IkReal x13506=((1.0)*x13491);
IkReal x13507=(cj3*x13491);
IkReal x13508=(gconst25*x13491);
evalcond[0]=((((-1.0)*x13502*x13506))+((r21*x13508))+(((-1.0)*r22*x13505)));
evalcond[1]=((((-1.0)*x13501*x13506))+(((-1.0)*r02*x13505))+((r01*x13508)));
evalcond[2]=((1.0)+((x13491*x13497))+(((-1.0)*r12*x13505))+(((-1.0)*x13496*x13506)));
evalcond[3]=(((cj3*x13492*x13497))+((r12*x13507))+((r10*x13495))+((r11*x13494))+(((-1.0)*cj3*x13496*x13505)));
evalcond[4]=(((r10*x13492*x13494))+(((-1.0)*r11*x13495*x13505))+(((-1.0)*r12*sj3*x13506))+((r11*x13503))+((r10*x13498)));
evalcond[5]=(((cj2*sj1))+x13500+((r21*x13492*x13498))+((r22*x13507))+((r20*x13495))+(((-1.0)*cj3*x13502*x13505))+((r21*x13494)));
evalcond[6]=(x13493+((r01*x13492*x13498))+((r02*x13507))+(((-1.0)*x13504))+((r01*x13494))+((r00*x13495))+(((-1.0)*cj3*x13501*x13505)));
evalcond[7]=(x13493+(((-1.0)*r22*sj3*x13506))+((r20*x13498))+((r20*x13492*x13494))+(((-1.0)*x13504))+(((-1.0)*r21*x13495*x13505))+((r21*x13503)));
evalcond[8]=((((-1.0)*r01*x13495*x13505))+(((-1.0)*x13500))+(((-1.0)*r02*sj3*x13506))+((r00*x13498))+((r00*x13492*x13494))+((r01*x13503))+(((-1.0)*sj1*x13499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13510 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13510)==0){
continue;
}
IkReal x13509=pow(x13510,-0.5);
CheckValue<IkReal> x13511 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13511.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13511.value))));
IkReal gconst28=((1.0)*r21*x13509);
IkReal gconst29=((-1.0)*r20*x13509);
CheckValue<IkReal> x13512 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13512.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13512.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13515 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13515.valid){
continue;
}
IkReal x13513=((1.0)*(x13515.value));
IkReal x13514=x13509;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13513)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13513)));
IkReal gconst28=((1.0)*r21*x13514);
IkReal gconst29=((-1.0)*r20*x13514);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13518 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13518.valid){
continue;
}
IkReal x13516=((1.0)*(x13518.value));
IkReal x13517=x13509;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13516)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13516)));
IkReal gconst28=((1.0)*r21*x13517);
IkReal gconst29=((-1.0)*r20*x13517);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13521 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13521.valid){
continue;
}
IkReal x13519=((1.0)*(x13521.value));
IkReal x13520=x13509;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13519)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13519)));
IkReal gconst28=((1.0)*r21*x13520);
IkReal gconst29=((-1.0)*r20*x13520);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13524 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13524.valid){
continue;
}
IkReal x13522=((1.0)*(x13524.value));
IkReal x13523=x13509;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13522)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13522)));
IkReal gconst28=((1.0)*r21*x13523);
IkReal gconst29=((-1.0)*r20*x13523);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13527 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13527.valid){
continue;
}
IkReal x13525=((1.0)*(x13527.value));
IkReal x13526=x13509;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13525)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13525)));
IkReal gconst28=((1.0)*r21*x13526);
IkReal gconst29=((-1.0)*r20*x13526);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13530 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13530.valid){
continue;
}
IkReal x13528=((1.0)*(x13530.value));
IkReal x13529=x13509;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13528)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13528)));
IkReal gconst28=((1.0)*r21*x13529);
IkReal gconst29=((-1.0)*r20*x13529);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13531=(gconst29*r10);
IkReal x13532=(gconst28*r11);
CheckValue<IkReal> x13533 = IKatan2WithCheck(IkReal((x13531+(((-1.0)*x13532)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13533.valid){
continue;
}
CheckValue<IkReal> x13534=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13531*x13532))+(x13531*x13531)+(x13532*x13532))),-1);
if(!x13534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13533.value)+(((1.5707963267949)*(x13534.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13535=IKsin(j4);
IkReal x13536=IKcos(j4);
IkReal x13537=(gconst28*r11);
IkReal x13538=((1.0)*cj2);
IkReal x13539=((1.0)*x13536);
IkReal x13540=(gconst29*x13536);
IkReal x13541=(gconst28*x13535);
IkReal x13542=((1.0)*x13535);
IkReal x13543=(gconst29*x13542);
evalcond[0]=((((-1.0)*r22*x13539))+((r21*x13541))+(((-1.0)*r20*x13543)));
evalcond[1]=(((r01*x13541))+(((-1.0)*r00*x13543))+(((-1.0)*r02*x13539)));
evalcond[2]=(((r10*x13540))+(((-1.0)*x13537*x13539))+(((-1.0)*r12*x13542)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13539))+((x13535*x13537))+(((-1.0)*r10*x13543)));
evalcond[4]=((((-1.0)*cj1*x13538))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13539))+((r20*x13540))+(((-1.0)*r22*x13542)));
evalcond[5]=((((-1.0)*sj1*x13538))+((r00*x13540))+(((-1.0)*r02*x13542))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r01*x13539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13544=((1.0)*gconst29);
CheckValue<IkReal> x13545=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13544))+(((-1.0)*gconst28*r00)))),-1);
if(!x13545.valid){
continue;
}
CheckValue<IkReal> x13546 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13545.value)))+(x13546.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13547=IKsin(j4);
IkReal x13548=IKcos(j4);
IkReal x13549=(gconst28*r11);
IkReal x13550=((1.0)*cj2);
IkReal x13551=((1.0)*x13548);
IkReal x13552=(gconst29*x13548);
IkReal x13553=(gconst28*x13547);
IkReal x13554=((1.0)*x13547);
IkReal x13555=(gconst29*x13554);
evalcond[0]=(((r21*x13553))+(((-1.0)*r22*x13551))+(((-1.0)*r20*x13555)));
evalcond[1]=((((-1.0)*r00*x13555))+((r01*x13553))+(((-1.0)*r02*x13551)));
evalcond[2]=(((r10*x13552))+(((-1.0)*x13549*x13551))+(((-1.0)*r12*x13554)));
evalcond[3]=((1.0)+((x13547*x13549))+(((-1.0)*r12*x13551))+(((-1.0)*r10*x13555)));
evalcond[4]=((((-1.0)*gconst28*r21*x13551))+((sj1*sj2))+(((-1.0)*cj1*x13550))+((r20*x13552))+(((-1.0)*r22*x13554)));
evalcond[5]=((((-1.0)*gconst28*r01*x13551))+((r00*x13552))+(((-1.0)*r02*x13554))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13556=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13556.valid){
continue;
}
CheckValue<IkReal> x13557 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13556.value)))+(x13557.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13558=IKsin(j4);
IkReal x13559=IKcos(j4);
IkReal x13560=(gconst28*r11);
IkReal x13561=((1.0)*cj2);
IkReal x13562=((1.0)*x13559);
IkReal x13563=(gconst29*x13559);
IkReal x13564=(gconst28*x13558);
IkReal x13565=((1.0)*x13558);
IkReal x13566=(gconst29*x13565);
evalcond[0]=(((r21*x13564))+(((-1.0)*r20*x13566))+(((-1.0)*r22*x13562)));
evalcond[1]=(((r01*x13564))+(((-1.0)*r02*x13562))+(((-1.0)*r00*x13566)));
evalcond[2]=(((r10*x13563))+(((-1.0)*r12*x13565))+(((-1.0)*x13560*x13562)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13566))+(((-1.0)*r12*x13562))+((x13558*x13560)));
evalcond[4]=(((r20*x13563))+((sj1*sj2))+(((-1.0)*cj1*x13561))+(((-1.0)*gconst28*r21*x13562))+(((-1.0)*r22*x13565)));
evalcond[5]=(((r00*x13563))+(((-1.0)*sj1*x13561))+(((-1.0)*r02*x13565))+(((-1.0)*gconst28*r01*x13562))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13569 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13569.valid){
continue;
}
IkReal x13567=((1.0)*(x13569.value));
IkReal x13568=x13509;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13567)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13567)));
IkReal gconst28=((1.0)*r21*x13568);
IkReal gconst29=((-1.0)*r20*x13568);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13572 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13572.valid){
continue;
}
IkReal x13570=((1.0)*(x13572.value));
IkReal x13571=x13509;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13570)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13570)));
IkReal gconst28=((1.0)*r21*x13571);
IkReal gconst29=((-1.0)*r20*x13571);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13575 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13575.valid){
continue;
}
IkReal x13573=((1.0)*(x13575.value));
IkReal x13574=x13509;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13573)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13573)));
IkReal gconst28=((1.0)*r21*x13574);
IkReal gconst29=((-1.0)*r20*x13574);
IkReal x13576=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13580=IKPowWithIntegerCheck(x13576,-1);
if(!x13580.valid){
continue;
}
IkReal x13577=x13580.value;
IkReal x13578=((1.0)*x13577);
IkReal x13579=((((-1.0)*x13578*(r11*r11)*(r21*r21)))+(((-1.0)*x13578*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x13577))+(((-1.0)*(r12*r12))));
j4eval[0]=x13579;
j4eval[1]=r12;
j4eval[2]=x13576;
j4eval[3]=IKsign(x13579);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13581=(gconst28*r11);
IkReal x13582=(gconst29*r10);
CheckValue<IkReal> x13583=IKPowWithIntegerCheck(IKsign(((((2.0)*x13581*x13582))+(((-1.0)*(x13581*x13581)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13582*x13582))))),-1);
if(!x13583.valid){
continue;
}
CheckValue<IkReal> x13584 = IKatan2WithCheck(IkReal((x13581+(((-1.0)*x13582)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13583.value)))+(x13584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13585=IKcos(j4);
IkReal x13586=IKsin(j4);
IkReal x13587=(gconst29*r10);
IkReal x13588=(gconst29*r20);
IkReal x13589=(gconst28*r21);
IkReal x13590=((1.0)*cj2);
IkReal x13591=(gconst29*r00);
IkReal x13592=((1.0)*x13585);
IkReal x13593=((1.0)*x13586);
IkReal x13594=(gconst28*x13585);
IkReal x13595=(gconst28*x13586);
evalcond[0]=(((r11*x13594))+((r12*x13586))+(((-1.0)*x13587*x13592)));
evalcond[1]=((((-1.0)*x13588*x13593))+((x13586*x13589))+(((-1.0)*r22*x13592)));
evalcond[2]=(((r01*x13595))+(((-1.0)*r02*x13592))+(((-1.0)*x13591*x13593)));
evalcond[3]=((1.0)+((r11*x13595))+(((-1.0)*x13587*x13593))+(((-1.0)*r12*x13592)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x13590))+(((-1.0)*x13588*x13592))+((x13585*x13589))+((r22*x13586)));
evalcond[5]=(((r01*x13594))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13590))+((r02*x13586))+(((-1.0)*x13591*x13592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13596=((1.0)*gconst29);
CheckValue<IkReal> x13597 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13596))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13597.valid){
continue;
}
CheckValue<IkReal> x13598=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13596))+(((-1.0)*gconst28*r00)))),-1);
if(!x13598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13597.value)+(((1.5707963267949)*(x13598.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13599=IKcos(j4);
IkReal x13600=IKsin(j4);
IkReal x13601=(gconst29*r10);
IkReal x13602=(gconst29*r20);
IkReal x13603=(gconst28*r21);
IkReal x13604=((1.0)*cj2);
IkReal x13605=(gconst29*r00);
IkReal x13606=((1.0)*x13599);
IkReal x13607=((1.0)*x13600);
IkReal x13608=(gconst28*x13599);
IkReal x13609=(gconst28*x13600);
evalcond[0]=(((r11*x13608))+((r12*x13600))+(((-1.0)*x13601*x13606)));
evalcond[1]=(((x13600*x13603))+(((-1.0)*r22*x13606))+(((-1.0)*x13602*x13607)));
evalcond[2]=((((-1.0)*r02*x13606))+(((-1.0)*x13605*x13607))+((r01*x13609)));
evalcond[3]=((1.0)+((r11*x13609))+(((-1.0)*r12*x13606))+(((-1.0)*x13601*x13607)));
evalcond[4]=(((x13599*x13603))+(((-1.0)*cj1*x13604))+((r22*x13600))+((sj1*sj2))+(((-1.0)*x13602*x13606)));
evalcond[5]=((((-1.0)*x13605*x13606))+(((-1.0)*sj1*x13604))+(((-1.0)*cj1*sj2))+((r02*x13600))+((r01*x13608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13610=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13610.valid){
continue;
}
CheckValue<IkReal> x13611 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13610.value)))+(x13611.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13612=IKcos(j4);
IkReal x13613=IKsin(j4);
IkReal x13614=(gconst29*r10);
IkReal x13615=(gconst29*r20);
IkReal x13616=(gconst28*r21);
IkReal x13617=((1.0)*cj2);
IkReal x13618=(gconst29*r00);
IkReal x13619=((1.0)*x13612);
IkReal x13620=((1.0)*x13613);
IkReal x13621=(gconst28*x13612);
IkReal x13622=(gconst28*x13613);
evalcond[0]=(((r11*x13621))+(((-1.0)*x13614*x13619))+((r12*x13613)));
evalcond[1]=((((-1.0)*x13615*x13620))+((x13613*x13616))+(((-1.0)*r22*x13619)));
evalcond[2]=((((-1.0)*r02*x13619))+((r01*x13622))+(((-1.0)*x13618*x13620)));
evalcond[3]=((1.0)+((r11*x13622))+(((-1.0)*x13614*x13620))+(((-1.0)*r12*x13619)));
evalcond[4]=((((-1.0)*cj1*x13617))+((x13612*x13616))+((sj1*sj2))+(((-1.0)*x13615*x13619))+((r22*x13613)));
evalcond[5]=((((-1.0)*x13618*x13619))+(((-1.0)*cj1*sj2))+((r01*x13621))+((r02*x13613))+(((-1.0)*sj1*x13617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13625 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13625.valid){
continue;
}
IkReal x13623=((1.0)*(x13625.value));
IkReal x13624=x13509;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13623)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13623)));
IkReal gconst28=((1.0)*r21*x13624);
IkReal gconst29=((-1.0)*r20*x13624);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13628 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13628.valid){
continue;
}
IkReal x13626=((1.0)*(x13628.value));
IkReal x13627=x13509;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13626)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13626)));
IkReal gconst28=((1.0)*r21*x13627);
IkReal gconst29=((-1.0)*r20*x13627);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13631 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13631.valid){
continue;
}
IkReal x13629=((1.0)*(x13631.value));
IkReal x13630=x13509;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13629)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13629)));
IkReal gconst28=((1.0)*r21*x13630);
IkReal gconst29=((-1.0)*r20*x13630);
IkReal x13632=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13636=IKPowWithIntegerCheck(x13632,-1);
if(!x13636.valid){
continue;
}
IkReal x13633=x13636.value;
IkReal x13634=((1.0)*x13633);
IkReal x13635=((((-1.0)*x13634*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x13633))+(((-1.0)*x13634*(r10*r10)*(r20*r20))));
j4eval[0]=x13635;
j4eval[1]=r12;
j4eval[2]=x13632;
j4eval[3]=IKsign(x13635);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13637=(gconst28*r11);
IkReal x13638=(gconst29*r10);
CheckValue<IkReal> x13639 = IKatan2WithCheck(IkReal(((((-1.0)*x13638))+x13637)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13639.valid){
continue;
}
CheckValue<IkReal> x13640=IKPowWithIntegerCheck(IKsign(((((2.0)*x13637*x13638))+(((-1.0)*(x13638*x13638)))+(((-1.0)*(x13637*x13637)))+(((-1.0)*(r12*r12))))),-1);
if(!x13640.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13639.value)+(((1.5707963267949)*(x13640.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13641=IKcos(j4);
IkReal x13642=IKsin(j4);
IkReal x13643=(gconst29*r10);
IkReal x13644=(gconst29*r20);
IkReal x13645=(gconst28*r21);
IkReal x13646=(gconst29*r00);
IkReal x13647=((1.0)*x13641);
IkReal x13648=((1.0)*x13642);
IkReal x13649=(gconst28*x13641);
IkReal x13650=(gconst28*x13642);
evalcond[0]=(((r11*x13649))+(((-1.0)*x13643*x13647))+((r12*x13642)));
evalcond[1]=((((-1.0)*x13644*x13648))+((x13642*x13645))+(((-1.0)*r22*x13647)));
evalcond[2]=(((r01*x13650))+(((-1.0)*x13646*x13648))+(((-1.0)*r02*x13647)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13647))+(((-1.0)*x13643*x13648))+((r11*x13650)));
evalcond[4]=(((cj2*sj1))+((r22*x13642))+((cj1*sj2))+(((-1.0)*x13644*x13647))+((x13641*x13645)));
evalcond[5]=(((r02*x13642))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13646*x13647))+((r01*x13649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13651=((1.0)*gconst29);
CheckValue<IkReal> x13652 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13651))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13652.valid){
continue;
}
CheckValue<IkReal> x13653=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13651))+(((-1.0)*gconst28*r00)))),-1);
if(!x13653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13652.value)+(((1.5707963267949)*(x13653.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13654=IKcos(j4);
IkReal x13655=IKsin(j4);
IkReal x13656=(gconst29*r10);
IkReal x13657=(gconst29*r20);
IkReal x13658=(gconst28*r21);
IkReal x13659=(gconst29*r00);
IkReal x13660=((1.0)*x13654);
IkReal x13661=((1.0)*x13655);
IkReal x13662=(gconst28*x13654);
IkReal x13663=(gconst28*x13655);
evalcond[0]=(((r12*x13655))+(((-1.0)*x13656*x13660))+((r11*x13662)));
evalcond[1]=((((-1.0)*r22*x13660))+(((-1.0)*x13657*x13661))+((x13655*x13658)));
evalcond[2]=(((r01*x13663))+(((-1.0)*r02*x13660))+(((-1.0)*x13659*x13661)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13660))+(((-1.0)*x13656*x13661))+((r11*x13663)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13654*x13658))+(((-1.0)*x13657*x13660))+((r22*x13655)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13662))+((r02*x13655))+(((-1.0)*x13659*x13660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13664=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13664.valid){
continue;
}
CheckValue<IkReal> x13665 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13664.value)))+(x13665.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13666=IKcos(j4);
IkReal x13667=IKsin(j4);
IkReal x13668=(gconst29*r10);
IkReal x13669=(gconst29*r20);
IkReal x13670=(gconst28*r21);
IkReal x13671=(gconst29*r00);
IkReal x13672=((1.0)*x13666);
IkReal x13673=((1.0)*x13667);
IkReal x13674=(gconst28*x13666);
IkReal x13675=(gconst28*x13667);
evalcond[0]=((((-1.0)*x13668*x13672))+((r12*x13667))+((r11*x13674)));
evalcond[1]=((((-1.0)*x13669*x13673))+((x13667*x13670))+(((-1.0)*r22*x13672)));
evalcond[2]=(((r01*x13675))+(((-1.0)*x13671*x13673))+(((-1.0)*r02*x13672)));
evalcond[3]=((1.0)+(((-1.0)*x13668*x13673))+(((-1.0)*r12*x13672))+((r11*x13675)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13669*x13672))+((r22*x13667))+((cj1*sj2))+((x13666*x13670)));
evalcond[5]=(((r02*x13667))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13674))+(((-1.0)*x13671*x13672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13678 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13678.valid){
continue;
}
IkReal x13676=((1.0)*(x13678.value));
IkReal x13677=x13509;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13676)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13676)));
IkReal gconst28=((1.0)*r21*x13677);
IkReal gconst29=((-1.0)*r20*x13677);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13681 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13681.valid){
continue;
}
IkReal x13679=((1.0)*(x13681.value));
IkReal x13680=x13509;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13679)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13679)));
IkReal gconst28=((1.0)*r21*x13680);
IkReal gconst29=((-1.0)*r20*x13680);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13684 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13684.valid){
continue;
}
IkReal x13682=((1.0)*(x13684.value));
IkReal x13683=x13509;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13682)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13682)));
IkReal gconst28=((1.0)*r21*x13683);
IkReal gconst29=((-1.0)*r20*x13683);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13685=(gconst29*r10);
IkReal x13686=(gconst28*r11);
CheckValue<IkReal> x13687 = IKatan2WithCheck(IkReal((x13685+(((-1.0)*x13686)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13687.valid){
continue;
}
CheckValue<IkReal> x13688=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13685*x13685)+(x13686*x13686)+(((-2.0)*x13685*x13686)))),-1);
if(!x13688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13687.value)+(((1.5707963267949)*(x13688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13689=IKsin(j4);
IkReal x13690=IKcos(j4);
IkReal x13691=(gconst28*r11);
IkReal x13692=((1.0)*x13690);
IkReal x13693=(gconst29*x13690);
IkReal x13694=(gconst28*x13689);
IkReal x13695=((1.0)*x13689);
IkReal x13696=(gconst29*x13695);
evalcond[0]=((((-1.0)*r20*x13696))+((r21*x13694))+(((-1.0)*r22*x13692)));
evalcond[1]=(((r01*x13694))+(((-1.0)*r02*x13692))+(((-1.0)*r00*x13696)));
evalcond[2]=(((r10*x13693))+(((-1.0)*x13691*x13692))+(((-1.0)*r12*x13695)));
evalcond[3]=((1.0)+((x13689*x13691))+(((-1.0)*r10*x13696))+(((-1.0)*r12*x13692)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13692))+((cj1*sj2))+((r20*x13693))+(((-1.0)*r22*x13695)));
evalcond[5]=(((r00*x13693))+(((-1.0)*r02*x13695))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13697=((1.0)*gconst29);
CheckValue<IkReal> x13698 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13697))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13698.valid){
continue;
}
CheckValue<IkReal> x13699=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13697)))),-1);
if(!x13699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13698.value)+(((1.5707963267949)*(x13699.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13700=IKsin(j4);
IkReal x13701=IKcos(j4);
IkReal x13702=(gconst28*r11);
IkReal x13703=((1.0)*x13701);
IkReal x13704=(gconst29*x13701);
IkReal x13705=(gconst28*x13700);
IkReal x13706=((1.0)*x13700);
IkReal x13707=(gconst29*x13706);
evalcond[0]=((((-1.0)*r22*x13703))+((r21*x13705))+(((-1.0)*r20*x13707)));
evalcond[1]=((((-1.0)*r00*x13707))+((r01*x13705))+(((-1.0)*r02*x13703)));
evalcond[2]=((((-1.0)*x13702*x13703))+(((-1.0)*r12*x13706))+((r10*x13704)));
evalcond[3]=((1.0)+((x13700*x13702))+(((-1.0)*r12*x13703))+(((-1.0)*r10*x13707)));
evalcond[4]=((((-1.0)*gconst28*r21*x13703))+(((-1.0)*r22*x13706))+((cj2*sj1))+((r20*x13704))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13704))+(((-1.0)*r02*x13706))+(((-1.0)*gconst28*r01*x13703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13708=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13708.valid){
continue;
}
CheckValue<IkReal> x13709 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13709.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13708.value)))+(x13709.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13710=IKsin(j4);
IkReal x13711=IKcos(j4);
IkReal x13712=(gconst28*r11);
IkReal x13713=((1.0)*x13711);
IkReal x13714=(gconst29*x13711);
IkReal x13715=(gconst28*x13710);
IkReal x13716=((1.0)*x13710);
IkReal x13717=(gconst29*x13716);
evalcond[0]=(((r21*x13715))+(((-1.0)*r22*x13713))+(((-1.0)*r20*x13717)));
evalcond[1]=((((-1.0)*r00*x13717))+((r01*x13715))+(((-1.0)*r02*x13713)));
evalcond[2]=((((-1.0)*r12*x13716))+((r10*x13714))+(((-1.0)*x13712*x13713)));
evalcond[3]=((1.0)+((x13710*x13712))+(((-1.0)*r12*x13713))+(((-1.0)*r10*x13717)));
evalcond[4]=((((-1.0)*gconst28*r21*x13713))+((cj2*sj1))+(((-1.0)*r22*x13716))+((r20*x13714))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13714))+(((-1.0)*r02*x13716))+(((-1.0)*gconst28*r01*x13713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13718=gconst28*gconst28;
IkReal x13719=gconst29*gconst29;
IkReal x13720=(r11*r21);
IkReal x13721=(gconst29*sj3);
IkReal x13722=((1.0)*cj3);
IkReal x13723=(r10*r20);
IkReal x13724=(r10*r21);
IkReal x13725=(r11*r20);
IkReal x13726=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13727 = IKatan2WithCheck(IkReal((((gconst28*r10*r22*sj3))+((r11*r22*x13721)))),IkReal(((((-1.0)*sj3*x13719*x13725))+((sj3*x13718*x13724))+(((-1.0)*gconst28*x13721*x13723))+((gconst28*x13720*x13721)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13727.valid){
continue;
}
CheckValue<IkReal> x13728=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13719*x13722*x13723))+((x13724*x13726))+((x13725*x13726))+(((-1.0)*x13718*x13720*x13722))+(((-1.0)*r12*r22*x13722)))),-1);
if(!x13728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13727.value)+(((1.5707963267949)*(x13728.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13729=IKsin(j4);
IkReal x13730=IKcos(j4);
IkReal x13731=(sj1*sj2);
IkReal x13732=(gconst29*r20);
IkReal x13733=(gconst28*r20);
IkReal x13734=((1.0)*cj2);
IkReal x13735=(r11*sj3);
IkReal x13736=(cj1*sj2);
IkReal x13737=(gconst29*r01);
IkReal x13738=(gconst29*r10);
IkReal x13739=(cj3*gconst28);
IkReal x13740=(cj3*gconst29);
IkReal x13741=(gconst28*sj3);
IkReal x13742=(gconst29*r00);
IkReal x13743=(cj1*x13734);
IkReal x13744=((1.0)*x13730);
IkReal x13745=((1.0)*x13729);
IkReal x13746=(gconst28*x13729);
IkReal x13747=(cj3*x13729);
IkReal x13748=(sj3*x13730);
evalcond[0]=((((-1.0)*r22*x13744))+(((-1.0)*x13732*x13745))+((r21*x13746)));
evalcond[1]=((((-1.0)*r02*x13744))+((r01*x13746))+(((-1.0)*x13742*x13745)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13744))+(((-1.0)*x13738*x13745))+((r11*x13746)));
evalcond[3]=(((r11*x13730*x13739))+((r10*x13741))+(((-1.0)*cj3*x13738*x13744))+((r12*x13747))+((gconst29*x13735)));
evalcond[4]=(((r10*x13739))+(((-1.0)*gconst28*x13735*x13744))+(((-1.0)*r12*sj3*x13745))+((x13738*x13748))+((r11*x13740)));
evalcond[5]=((((-1.0)*cj3*x13732*x13744))+((cj2*sj1))+((gconst29*r21*sj3))+x13736+((r22*x13747))+((sj3*x13733))+((r21*x13730*x13739)));
evalcond[6]=(((r01*x13730*x13739))+x13731+(((-1.0)*r00*x13740*x13744))+((sj3*x13737))+(((-1.0)*x13743))+((r02*x13747))+((r00*x13741)));
evalcond[7]=(x13731+(((-1.0)*r21*x13741*x13744))+(((-1.0)*r22*sj3*x13745))+((r21*x13740))+(((-1.0)*x13743))+((cj3*x13733))+((x13732*x13748)));
evalcond[8]=(((r00*x13739))+(((-1.0)*sj1*x13734))+(((-1.0)*r02*sj3*x13745))+((x13742*x13748))+(((-1.0)*r01*x13741*x13744))+(((-1.0)*x13736))+((cj3*x13737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13749=((1.0)*gconst29);
CheckValue<IkReal> x13750=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13749))+(((-1.0)*gconst28*r00)))),-1);
if(!x13750.valid){
continue;
}
CheckValue<IkReal> x13751 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13749))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13750.value)))+(x13751.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13752=IKsin(j4);
IkReal x13753=IKcos(j4);
IkReal x13754=(sj1*sj2);
IkReal x13755=(gconst29*r20);
IkReal x13756=(gconst28*r20);
IkReal x13757=((1.0)*cj2);
IkReal x13758=(r11*sj3);
IkReal x13759=(cj1*sj2);
IkReal x13760=(gconst29*r01);
IkReal x13761=(gconst29*r10);
IkReal x13762=(cj3*gconst28);
IkReal x13763=(cj3*gconst29);
IkReal x13764=(gconst28*sj3);
IkReal x13765=(gconst29*r00);
IkReal x13766=(cj1*x13757);
IkReal x13767=((1.0)*x13753);
IkReal x13768=((1.0)*x13752);
IkReal x13769=(gconst28*x13752);
IkReal x13770=(cj3*x13752);
IkReal x13771=(sj3*x13753);
evalcond[0]=((((-1.0)*r22*x13767))+(((-1.0)*x13755*x13768))+((r21*x13769)));
evalcond[1]=(((r01*x13769))+(((-1.0)*r02*x13767))+(((-1.0)*x13765*x13768)));
evalcond[2]=((1.0)+((r11*x13769))+(((-1.0)*r12*x13767))+(((-1.0)*x13761*x13768)));
evalcond[3]=(((r11*x13753*x13762))+((r10*x13764))+(((-1.0)*cj3*x13761*x13767))+((gconst29*x13758))+((r12*x13770)));
evalcond[4]=(((r11*x13763))+(((-1.0)*gconst28*x13758*x13767))+((r10*x13762))+((x13761*x13771))+(((-1.0)*r12*sj3*x13768)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+x13759+(((-1.0)*cj3*x13755*x13767))+((sj3*x13756))+((r21*x13753*x13762))+((r22*x13770)));
evalcond[6]=(x13754+((r00*x13764))+((sj3*x13760))+(((-1.0)*r00*x13763*x13767))+((r01*x13753*x13762))+(((-1.0)*x13766))+((r02*x13770)));
evalcond[7]=(x13754+(((-1.0)*r22*sj3*x13768))+((x13755*x13771))+((r21*x13763))+(((-1.0)*r21*x13764*x13767))+((cj3*x13756))+(((-1.0)*x13766)));
evalcond[8]=((((-1.0)*sj1*x13757))+(((-1.0)*x13759))+((r00*x13762))+(((-1.0)*r01*x13764*x13767))+((cj3*x13760))+((x13765*x13771))+(((-1.0)*r02*sj3*x13768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13772=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13772.valid){
continue;
}
CheckValue<IkReal> x13773 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13772.value)))+(x13773.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13774=IKsin(j4);
IkReal x13775=IKcos(j4);
IkReal x13776=(sj1*sj2);
IkReal x13777=(gconst29*r20);
IkReal x13778=(gconst28*r20);
IkReal x13779=((1.0)*cj2);
IkReal x13780=(r11*sj3);
IkReal x13781=(cj1*sj2);
IkReal x13782=(gconst29*r01);
IkReal x13783=(gconst29*r10);
IkReal x13784=(cj3*gconst28);
IkReal x13785=(cj3*gconst29);
IkReal x13786=(gconst28*sj3);
IkReal x13787=(gconst29*r00);
IkReal x13788=(cj1*x13779);
IkReal x13789=((1.0)*x13775);
IkReal x13790=((1.0)*x13774);
IkReal x13791=(gconst28*x13774);
IkReal x13792=(cj3*x13774);
IkReal x13793=(sj3*x13775);
evalcond[0]=(((r21*x13791))+(((-1.0)*r22*x13789))+(((-1.0)*x13777*x13790)));
evalcond[1]=(((r01*x13791))+(((-1.0)*r02*x13789))+(((-1.0)*x13787*x13790)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13789))+(((-1.0)*x13783*x13790))+((r11*x13791)));
evalcond[3]=((((-1.0)*cj3*x13783*x13789))+((gconst29*x13780))+((r11*x13775*x13784))+((r12*x13792))+((r10*x13786)));
evalcond[4]=(((x13783*x13793))+(((-1.0)*gconst28*x13780*x13789))+(((-1.0)*r12*sj3*x13790))+((r11*x13785))+((r10*x13784)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+x13781+((sj3*x13778))+(((-1.0)*cj3*x13777*x13789))+((r22*x13792))+((r21*x13775*x13784)));
evalcond[6]=((((-1.0)*r00*x13785*x13789))+x13776+((r00*x13786))+(((-1.0)*x13788))+((r02*x13792))+((r01*x13775*x13784))+((sj3*x13782)));
evalcond[7]=(((x13777*x13793))+x13776+((cj3*x13778))+(((-1.0)*x13788))+(((-1.0)*r22*sj3*x13790))+((r21*x13785))+(((-1.0)*r21*x13786*x13789)));
evalcond[8]=((((-1.0)*r01*x13786*x13789))+((r00*x13784))+(((-1.0)*r02*sj3*x13790))+(((-1.0)*sj1*x13779))+(((-1.0)*x13781))+((cj3*x13782))+((x13787*x13793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13794=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13794);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13794);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13795=(r11*sj5);
IkReal x13796=((1.0)*cj5*r10);
j4eval[0]=(x13795+(((-1.0)*x13796)));
j4eval[1]=((((-1.0)*cj3*x13796))+((cj3*x13795)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13797=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13797);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13797);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13798=(cj5*r10);
IkReal x13799=(r11*sj5);
j4eval[0]=(x13799+(((-1.0)*x13798)));
j4eval[1]=((((-1.0)*sj3*x13799))+((sj3*x13798)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13800=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13800);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13800);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13801=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13801);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13801);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13802=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13802))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13802)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13803=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13803);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13803);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13804=((1.0)*sj1);
CheckValue<IkReal> x13805=IKPowWithIntegerCheck(r22,-1);
if(!x13805.valid){
continue;
}
CheckValue<IkReal> x13806=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13806.valid){
continue;
}
if( IKabs(((x13805.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13804)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13806.value)*(((((-1.0)*sj2*x13804))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13805.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13804))))))+IKsqr(((x13806.value)*(((((-1.0)*sj2*x13804))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13805.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13804))))), ((x13806.value)*(((((-1.0)*sj2*x13804))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13807=IKsin(j4);
IkReal x13808=IKcos(j4);
IkReal x13809=((1.0)*cj5);
IkReal x13810=(sj5*x13808);
IkReal x13811=(sj5*x13807);
evalcond[0]=((-1.0)*r22*x13808);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13807)));
evalcond[2]=(((r01*x13811))+(((-1.0)*r00*x13807*x13809)));
evalcond[3]=(((r11*x13810))+(((-1.0)*r10*x13808*x13809)));
evalcond[4]=((1.0)+((r11*x13811))+(((-1.0)*r10*x13807*x13809)));
evalcond[5]=((((-1.0)*r00*x13808*x13809))+((r01*x13810))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13812=((1.0)*cj5);
CheckValue<IkReal> x13813=IKPowWithIntegerCheck(((((-1.0)*r10*x13812))+((r11*sj5))),-1);
if(!x13813.valid){
continue;
}
CheckValue<IkReal> x13814=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13812))),-1);
if(!x13814.valid){
continue;
}
if( IKabs(((-1.0)*(x13813.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13814.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13813.value)))+IKsqr(((x13814.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13813.value)), ((x13814.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13815=IKsin(j4);
IkReal x13816=IKcos(j4);
IkReal x13817=((1.0)*cj5);
IkReal x13818=(sj5*x13816);
IkReal x13819=(sj5*x13815);
evalcond[0]=((-1.0)*r22*x13816);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13815)));
evalcond[2]=(((r01*x13819))+(((-1.0)*r00*x13815*x13817)));
evalcond[3]=(((r11*x13818))+(((-1.0)*r10*x13816*x13817)));
evalcond[4]=((1.0)+((r11*x13819))+(((-1.0)*r10*x13815*x13817)));
evalcond[5]=(((r01*x13818))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13816*x13817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13820=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13820);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13820);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13821=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13821);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13821);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13822=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13822.valid){
continue;
}
CheckValue<IkReal> x13823=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13823.valid){
continue;
}
if( IKabs(((-1.0)*(x13822.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13823.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13822.value)))+IKsqr(((x13823.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13822.value)), ((x13823.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13824=IKsin(j4);
IkReal x13825=IKcos(j4);
IkReal x13826=(cj5*x13825);
IkReal x13827=(sj5*x13824);
IkReal x13828=((1.0)*cj5*x13824);
IkReal x13829=((1.0)*sj5*x13825);
evalcond[0]=((-1.0)*r22*x13825);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13824)));
evalcond[2]=(((r01*x13827))+(((-1.0)*r00*x13828)));
evalcond[3]=(((r10*x13826))+(((-1.0)*r11*x13829)));
evalcond[4]=((1.0)+((r11*x13827))+(((-1.0)*r10*x13828)));
evalcond[5]=(((r00*x13826))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13830=IKPowWithIntegerCheck(r22,-1);
if(!x13830.valid){
continue;
}
CheckValue<IkReal> x13831=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13831.valid){
continue;
}
if( IKabs(((x13830.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13831.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13830.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13831.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13830.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13831.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13832=IKsin(j4);
IkReal x13833=IKcos(j4);
IkReal x13834=(cj5*x13833);
IkReal x13835=(sj5*x13832);
IkReal x13836=((1.0)*cj5*x13832);
IkReal x13837=((1.0)*sj5*x13833);
evalcond[0]=((-1.0)*r22*x13833);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13832)));
evalcond[2]=(((r01*x13835))+(((-1.0)*r00*x13836)));
evalcond[3]=((((-1.0)*r11*x13837))+((r10*x13834)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13836))+((r11*x13835)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13834))+(((-1.0)*r01*x13837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13838=((1.0)*r10);
CheckValue<IkReal> x13839=IKPowWithIntegerCheck(cj3,-1);
if(!x13839.valid){
continue;
}
CheckValue<IkReal> x13840=IKPowWithIntegerCheck(r22,-1);
if(!x13840.valid){
continue;
}
CheckValue<IkReal> x13841=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13838))+((cj3*r11*sj5))),-1);
if(!x13841.valid){
continue;
}
if( IKabs(((x13839.value)*(x13840.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13841.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13838)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13839.value)*(x13840.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13841.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13838))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13839.value)*(x13840.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13841.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13838))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13842=IKsin(j4);
IkReal x13843=IKcos(j4);
IkReal x13844=(sj1*sj2);
IkReal x13845=(r11*sj5);
IkReal x13846=(r00*sj3);
IkReal x13847=(cj5*r01);
IkReal x13848=((1.0)*cj1);
IkReal x13849=(cj3*sj5);
IkReal x13850=(cj5*r11);
IkReal x13851=(r10*sj3);
IkReal x13852=(cj2*sj1);
IkReal x13853=((1.0)*cj5);
IkReal x13854=((1.0)*sj3);
IkReal x13855=(r01*sj5);
IkReal x13856=(cj2*x13848);
IkReal x13857=(cj3*x13843);
IkReal x13858=(r22*x13842);
IkReal x13859=(cj5*x13843);
IkReal x13860=(x13842*x13853);
evalcond[0]=((-1.0)*r22*x13843);
evalcond[1]=(x13852+((cj1*sj2))+((cj3*x13858)));
evalcond[2]=((((-1.0)*r00*x13860))+((x13842*x13855)));
evalcond[3]=((1.0)+((x13842*x13845))+(((-1.0)*r10*x13860)));
evalcond[4]=(x13844+(((-1.0)*x13856))+(((-1.0)*x13854*x13858)));
evalcond[5]=(((sj3*x13850))+(((-1.0)*r10*x13853*x13857))+((sj5*x13851))+((x13845*x13857)));
evalcond[6]=(((x13851*x13859))+(((-1.0)*x13843*x13845*x13854))+((r10*x13849))+((cj3*x13850)));
evalcond[7]=(x13844+((sj5*x13846))+((sj3*x13847))+(((-1.0)*r00*x13853*x13857))+(((-1.0)*x13856))+((r01*x13843*x13849)));
evalcond[8]=((((-1.0)*x13852))+(((-1.0)*sj2*x13848))+(((-1.0)*x13843*x13854*x13855))+((x13846*x13859))+((cj3*x13847))+((r00*x13849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13861=(cj5*r10);
IkReal x13862=((1.0)*r11);
CheckValue<IkReal> x13863=IKPowWithIntegerCheck(((((-1.0)*x13861))+((r11*sj5))),-1);
if(!x13863.valid){
continue;
}
CheckValue<IkReal> x13864=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13862))+((sj3*x13861))),-1);
if(!x13864.valid){
continue;
}
if( IKabs(((-1.0)*(x13863.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13864.value)*(((((-1.0)*cj3*cj5*x13862))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13863.value)))+IKsqr(((x13864.value)*(((((-1.0)*cj3*cj5*x13862))+(((-1.0)*cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13863.value)), ((x13864.value)*(((((-1.0)*cj3*cj5*x13862))+(((-1.0)*cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13865=IKsin(j4);
IkReal x13866=IKcos(j4);
IkReal x13867=(sj1*sj2);
IkReal x13868=(r11*sj5);
IkReal x13869=(r00*sj3);
IkReal x13870=(cj5*r01);
IkReal x13871=((1.0)*cj1);
IkReal x13872=(cj3*sj5);
IkReal x13873=(cj5*r11);
IkReal x13874=(r10*sj3);
IkReal x13875=(cj2*sj1);
IkReal x13876=((1.0)*cj5);
IkReal x13877=((1.0)*sj3);
IkReal x13878=(r01*sj5);
IkReal x13879=(cj2*x13871);
IkReal x13880=(cj3*x13866);
IkReal x13881=(r22*x13865);
IkReal x13882=(cj5*x13866);
IkReal x13883=(x13865*x13876);
evalcond[0]=((-1.0)*r22*x13866);
evalcond[1]=(((cj3*x13881))+x13875+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13883))+((x13865*x13878)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13883))+((x13865*x13868)));
evalcond[4]=(x13867+(((-1.0)*x13879))+(((-1.0)*x13877*x13881)));
evalcond[5]=(((sj3*x13873))+((sj5*x13874))+((x13868*x13880))+(((-1.0)*r10*x13876*x13880)));
evalcond[6]=((((-1.0)*x13866*x13868*x13877))+((cj3*x13873))+((r10*x13872))+((x13874*x13882)));
evalcond[7]=(((sj3*x13870))+(((-1.0)*r00*x13876*x13880))+x13867+(((-1.0)*x13879))+((sj5*x13869))+((r01*x13866*x13872)));
evalcond[8]=((((-1.0)*x13866*x13877*x13878))+((cj3*x13870))+(((-1.0)*x13875))+((x13869*x13882))+(((-1.0)*sj2*x13871))+((r00*x13872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13884=((1.0)*sj3);
IkReal x13885=(r11*sj5);
IkReal x13886=((1.0)*cj5*r10);
CheckValue<IkReal> x13887=IKPowWithIntegerCheck((x13885+(((-1.0)*x13886))),-1);
if(!x13887.valid){
continue;
}
CheckValue<IkReal> x13888=IKPowWithIntegerCheck(((((-1.0)*cj3*x13886))+((cj3*x13885))),-1);
if(!x13888.valid){
continue;
}
if( IKabs(((-1.0)*(x13887.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13888.value)*(((((-1.0)*cj5*r11*x13884))+(((-1.0)*r10*sj5*x13884)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13887.value)))+IKsqr(((x13888.value)*(((((-1.0)*cj5*r11*x13884))+(((-1.0)*r10*sj5*x13884))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13887.value)), ((x13888.value)*(((((-1.0)*cj5*r11*x13884))+(((-1.0)*r10*sj5*x13884))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13889=IKsin(j4);
IkReal x13890=IKcos(j4);
IkReal x13891=(sj1*sj2);
IkReal x13892=(r11*sj5);
IkReal x13893=(r00*sj3);
IkReal x13894=(cj5*r01);
IkReal x13895=((1.0)*cj1);
IkReal x13896=(cj3*sj5);
IkReal x13897=(cj5*r11);
IkReal x13898=(r10*sj3);
IkReal x13899=(cj2*sj1);
IkReal x13900=((1.0)*cj5);
IkReal x13901=((1.0)*sj3);
IkReal x13902=(r01*sj5);
IkReal x13903=(cj2*x13895);
IkReal x13904=(cj3*x13890);
IkReal x13905=(r22*x13889);
IkReal x13906=(cj5*x13890);
IkReal x13907=(x13889*x13900);
evalcond[0]=((-1.0)*r22*x13890);
evalcond[1]=(x13899+((cj1*sj2))+((cj3*x13905)));
evalcond[2]=(((x13889*x13902))+(((-1.0)*r00*x13907)));
evalcond[3]=((1.0)+((x13889*x13892))+(((-1.0)*r10*x13907)));
evalcond[4]=((((-1.0)*x13901*x13905))+x13891+(((-1.0)*x13903)));
evalcond[5]=(((sj5*x13898))+((sj3*x13897))+((x13892*x13904))+(((-1.0)*r10*x13900*x13904)));
evalcond[6]=(((cj3*x13897))+((r10*x13896))+((x13898*x13906))+(((-1.0)*x13890*x13892*x13901)));
evalcond[7]=(((sj5*x13893))+x13891+((sj3*x13894))+((r01*x13890*x13896))+(((-1.0)*r00*x13900*x13904))+(((-1.0)*x13903)));
evalcond[8]=((((-1.0)*sj2*x13895))+((cj3*x13894))+(((-1.0)*x13890*x13901*x13902))+((x13893*x13906))+(((-1.0)*x13899))+((r00*x13896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13908=cj5*cj5;
IkReal x13909=((1.0)*cj3);
IkReal x13910=(r10*r21);
IkReal x13911=(cj5*sj5);
IkReal x13912=(r11*r21);
IkReal x13913=(r11*r20);
IkReal x13914=(r22*sj3);
IkReal x13915=(r10*r20);
IkReal x13916=((1.0)*sj3*x13908);
CheckValue<IkReal> x13917=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13909*x13912))+((cj3*x13908*x13912))+((cj3*x13911*x13913))+(((-1.0)*r12*r22*x13909))+(((-1.0)*x13908*x13909*x13915))+((cj3*x13910*x13911)))),-1);
if(!x13917.valid){
continue;
}
CheckValue<IkReal> x13918 = IKatan2WithCheck(IkReal((((cj5*r11*x13914))+((r10*sj5*x13914)))),IkReal((((sj3*x13911*x13912))+(((-1.0)*x13913*x13916))+(((-1.0)*x13910*x13916))+(((-1.0)*sj3*x13911*x13915))+((sj3*x13910)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13917.value)))+(x13918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13919=IKsin(j4);
IkReal x13920=IKcos(j4);
IkReal x13921=(sj1*sj2);
IkReal x13922=(cj5*sj3);
IkReal x13923=(cj5*r10);
IkReal x13924=(r00*sj5);
IkReal x13925=(r11*sj5);
IkReal x13926=(cj3*cj5);
IkReal x13927=((1.0)*cj1);
IkReal x13928=(cj3*sj5);
IkReal x13929=(r21*sj5);
IkReal x13930=(cj2*sj1);
IkReal x13931=(sj3*sj5);
IkReal x13932=(r01*sj5);
IkReal x13933=(cj2*x13927);
IkReal x13934=((1.0)*x13920);
IkReal x13935=((1.0)*x13919);
IkReal x13936=(cj3*x13919);
IkReal x13937=(cj3*x13920);
evalcond[0]=((((-1.0)*cj5*r20*x13935))+(((-1.0)*r22*x13934))+((x13919*x13929)));
evalcond[1]=(((x13919*x13932))+(((-1.0)*cj5*r00*x13935))+(((-1.0)*r02*x13934)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13934))+((x13919*x13925))+(((-1.0)*x13923*x13935)));
evalcond[3]=(((x13925*x13937))+(((-1.0)*cj3*x13923*x13934))+((r10*x13931))+((r11*x13922))+((r12*x13936)));
evalcond[4]=((((-1.0)*r12*sj3*x13935))+((r10*x13928))+((r10*x13920*x13922))+(((-1.0)*sj3*x13925*x13934))+((r11*x13926)));
evalcond[5]=(((r20*x13931))+(((-1.0)*r20*x13926*x13934))+((r21*x13922))+((cj1*sj2))+x13930+((r22*x13936))+((r21*x13920*x13928)));
evalcond[6]=(((r01*x13920*x13928))+((sj3*x13924))+x13921+(((-1.0)*x13933))+((r01*x13922))+(((-1.0)*r00*x13926*x13934))+((r02*x13936)));
evalcond[7]=(((r21*x13926))+((r20*x13928))+(((-1.0)*r22*sj3*x13935))+x13921+(((-1.0)*x13933))+((r20*x13920*x13922))+(((-1.0)*sj3*x13929*x13934)));
evalcond[8]=(((r00*x13920*x13922))+(((-1.0)*sj2*x13927))+(((-1.0)*r02*sj3*x13935))+((r01*x13926))+(((-1.0)*r01*x13931*x13934))+(((-1.0)*x13930))+((cj3*x13924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13938=((1.0)*cj5);
CheckValue<IkReal> x13939 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13938))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13939.valid){
continue;
}
CheckValue<IkReal> x13940=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13938)))),-1);
if(!x13940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13939.value)+(((1.5707963267949)*(x13940.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13941=IKsin(j4);
IkReal x13942=IKcos(j4);
IkReal x13943=(sj1*sj2);
IkReal x13944=(cj5*sj3);
IkReal x13945=(cj5*r10);
IkReal x13946=(r00*sj5);
IkReal x13947=(r11*sj5);
IkReal x13948=(cj3*cj5);
IkReal x13949=((1.0)*cj1);
IkReal x13950=(cj3*sj5);
IkReal x13951=(r21*sj5);
IkReal x13952=(cj2*sj1);
IkReal x13953=(sj3*sj5);
IkReal x13954=(r01*sj5);
IkReal x13955=(cj2*x13949);
IkReal x13956=((1.0)*x13942);
IkReal x13957=((1.0)*x13941);
IkReal x13958=(cj3*x13941);
IkReal x13959=(cj3*x13942);
evalcond[0]=((((-1.0)*cj5*r20*x13957))+(((-1.0)*r22*x13956))+((x13941*x13951)));
evalcond[1]=((((-1.0)*r02*x13956))+((x13941*x13954))+(((-1.0)*cj5*r00*x13957)));
evalcond[2]=((1.0)+(((-1.0)*x13945*x13957))+((x13941*x13947))+(((-1.0)*r12*x13956)));
evalcond[3]=(((r12*x13958))+((x13947*x13959))+(((-1.0)*cj3*x13945*x13956))+((r10*x13953))+((r11*x13944)));
evalcond[4]=(((r10*x13942*x13944))+(((-1.0)*r12*sj3*x13957))+(((-1.0)*sj3*x13947*x13956))+((r10*x13950))+((r11*x13948)));
evalcond[5]=(((cj1*sj2))+x13952+((r22*x13958))+((r21*x13942*x13950))+((r20*x13953))+((r21*x13944))+(((-1.0)*r20*x13948*x13956)));
evalcond[6]=(((r01*x13942*x13950))+(((-1.0)*r00*x13948*x13956))+(((-1.0)*x13955))+x13943+((sj3*x13946))+((r01*x13944))+((r02*x13958)));
evalcond[7]=((((-1.0)*x13955))+x13943+(((-1.0)*sj3*x13951*x13956))+(((-1.0)*r22*sj3*x13957))+((r20*x13942*x13944))+((r20*x13950))+((r21*x13948)));
evalcond[8]=(((cj3*x13946))+(((-1.0)*r02*sj3*x13957))+((r00*x13942*x13944))+(((-1.0)*r01*x13953*x13956))+(((-1.0)*sj2*x13949))+((r01*x13948))+(((-1.0)*x13952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13960=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13960.valid){
continue;
}
CheckValue<IkReal> x13961 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13960.value)))+(x13961.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13962=IKsin(j4);
IkReal x13963=IKcos(j4);
IkReal x13964=(sj1*sj2);
IkReal x13965=(cj5*sj3);
IkReal x13966=(cj5*r10);
IkReal x13967=(r00*sj5);
IkReal x13968=(r11*sj5);
IkReal x13969=(cj3*cj5);
IkReal x13970=((1.0)*cj1);
IkReal x13971=(cj3*sj5);
IkReal x13972=(r21*sj5);
IkReal x13973=(cj2*sj1);
IkReal x13974=(sj3*sj5);
IkReal x13975=(r01*sj5);
IkReal x13976=(cj2*x13970);
IkReal x13977=((1.0)*x13963);
IkReal x13978=((1.0)*x13962);
IkReal x13979=(cj3*x13962);
IkReal x13980=(cj3*x13963);
evalcond[0]=(((x13962*x13972))+(((-1.0)*r22*x13977))+(((-1.0)*cj5*r20*x13978)));
evalcond[1]=(((x13962*x13975))+(((-1.0)*r02*x13977))+(((-1.0)*cj5*r00*x13978)));
evalcond[2]=((1.0)+((x13962*x13968))+(((-1.0)*r12*x13977))+(((-1.0)*x13966*x13978)));
evalcond[3]=(((r10*x13974))+((r11*x13965))+((r12*x13979))+((x13968*x13980))+(((-1.0)*cj3*x13966*x13977)));
evalcond[4]=(((r10*x13971))+(((-1.0)*r12*sj3*x13978))+((r10*x13963*x13965))+(((-1.0)*sj3*x13968*x13977))+((r11*x13969)));
evalcond[5]=(((r21*x13963*x13971))+(((-1.0)*r20*x13969*x13977))+((cj1*sj2))+x13973+((r20*x13974))+((r21*x13965))+((r22*x13979)));
evalcond[6]=((((-1.0)*r00*x13969*x13977))+((r01*x13963*x13971))+((r02*x13979))+x13964+((sj3*x13967))+(((-1.0)*x13976))+((r01*x13965)));
evalcond[7]=((((-1.0)*sj3*x13972*x13977))+x13964+(((-1.0)*r22*sj3*x13978))+((r20*x13971))+(((-1.0)*x13976))+((r21*x13969))+((r20*x13963*x13965)));
evalcond[8]=((((-1.0)*r01*x13974*x13977))+(((-1.0)*sj2*x13970))+(((-1.0)*r02*sj3*x13978))+(((-1.0)*x13973))+((r00*x13963*x13965))+((cj3*x13967))+((r01*x13969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13981=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13981;
j4eval[1]=IKsign(x13981);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13982=((1.0)*cj5);
IkReal x13983=((((-1.0)*r21*x13982))+(((-1.0)*r20*sj5)));
j4eval[0]=x13983;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13982))))));
j4eval[2]=IKsign(x13983);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13984=cj5*cj5;
IkReal x13985=(cj3*r21);
IkReal x13986=(cj5*sj5);
IkReal x13987=((1.0)*cj3);
IkReal x13988=(((cj3*r11*r20*x13986))+(((-1.0)*r10*r20*x13984*x13987))+((r10*x13985*x13986))+(((-1.0)*r11*x13985))+((r11*x13984*x13985))+(((-1.0)*r12*r22*x13987)));
j4eval[0]=x13988;
j4eval[1]=IKsign(x13988);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13989=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13989;
j4eval[1]=IKsign(x13989);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13990=((1.0)*cj5);
IkReal x13991=((((-1.0)*r21*x13990))+(((-1.0)*r20*sj5)));
j4eval[0]=x13991;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13990))))));
j4eval[2]=IKsign(x13991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13992=cj5*cj5;
IkReal x13993=r11*r11;
IkReal x13994=(cj5*r10);
IkReal x13995=(r11*sj5);
IkReal x13996=(((x13992*x13993))+(((2.0)*x13994*x13995))+(((-1.0)*(r12*r12)))+(((-1.0)*x13992*(r10*r10)))+(((-1.0)*x13993)));
j4eval[0]=x13996;
j4eval[1]=((IKabs(r12))+(IKabs((x13994+(((-1.0)*x13995))))));
j4eval[2]=IKsign(x13996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13997=cj5*cj5;
IkReal x13998=r11*r11;
IkReal x13999=(cj5*r10);
IkReal x14000=(r11*sj5);
CheckValue<IkReal> x14001=IKPowWithIntegerCheck(IKsign((((x13997*x13998))+(((2.0)*x13999*x14000))+(((-1.0)*x13997*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13998)))),-1);
if(!x14001.valid){
continue;
}
CheckValue<IkReal> x14002 = IKatan2WithCheck(IkReal((x13999+(((-1.0)*x14000)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x14002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14001.value)))+(x14002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14003=IKsin(j4);
IkReal x14004=IKcos(j4);
IkReal x14005=(cj5*r10);
IkReal x14006=(r01*sj5);
IkReal x14007=(cj5*r00);
IkReal x14008=(cj5*r20);
IkReal x14009=((1.0)*x14004);
IkReal x14010=((1.0)*x14003);
IkReal x14011=(sj5*x14003);
evalcond[0]=((((-1.0)*x14008*x14010))+((r21*x14011))+(((-1.0)*r22*x14009)));
evalcond[1]=((((-1.0)*r02*x14009))+((x14003*x14006))+(((-1.0)*x14007*x14010)));
evalcond[2]=((((-1.0)*r11*sj5*x14009))+(((-1.0)*r12*x14010))+((x14004*x14005)));
evalcond[3]=((-1.0)+(((-1.0)*x14005*x14010))+((r11*x14011))+(((-1.0)*r12*x14009)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x14010))+((cj1*sj2))+(((-1.0)*x14006*x14009))+((x14004*x14007)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x14004*x14008))+(((-1.0)*r21*sj5*x14009))+(((-1.0)*r22*x14010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14012=((1.0)*cj5);
CheckValue<IkReal> x14013=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14012))+(((-1.0)*r20*sj5)))),-1);
if(!x14013.valid){
continue;
}
CheckValue<IkReal> x14014 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14013.value)))+(x14014.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14015=IKsin(j4);
IkReal x14016=IKcos(j4);
IkReal x14017=(cj5*r10);
IkReal x14018=(r01*sj5);
IkReal x14019=(cj5*r00);
IkReal x14020=(cj5*r20);
IkReal x14021=((1.0)*x14016);
IkReal x14022=((1.0)*x14015);
IkReal x14023=(sj5*x14015);
evalcond[0]=((((-1.0)*x14020*x14022))+((r21*x14023))+(((-1.0)*r22*x14021)));
evalcond[1]=(((x14015*x14018))+(((-1.0)*x14019*x14022))+(((-1.0)*r02*x14021)));
evalcond[2]=((((-1.0)*r11*sj5*x14021))+(((-1.0)*r12*x14022))+((x14016*x14017)));
evalcond[3]=((-1.0)+((r11*x14023))+(((-1.0)*r12*x14021))+(((-1.0)*x14017*x14022)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x14022))+(((-1.0)*x14018*x14021))+((x14016*x14019)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x14016*x14020))+(((-1.0)*r21*sj5*x14021))+(((-1.0)*r22*x14022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14024 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14024.valid){
continue;
}
CheckValue<IkReal> x14025=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14024.value)+(((1.5707963267949)*(x14025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14026=IKsin(j4);
IkReal x14027=IKcos(j4);
IkReal x14028=(cj5*r10);
IkReal x14029=(r01*sj5);
IkReal x14030=(cj5*r00);
IkReal x14031=(cj5*r20);
IkReal x14032=((1.0)*x14027);
IkReal x14033=((1.0)*x14026);
IkReal x14034=(sj5*x14026);
evalcond[0]=((((-1.0)*x14031*x14033))+((r21*x14034))+(((-1.0)*r22*x14032)));
evalcond[1]=(((x14026*x14029))+(((-1.0)*x14030*x14033))+(((-1.0)*r02*x14032)));
evalcond[2]=((((-1.0)*r11*sj5*x14032))+((x14027*x14028))+(((-1.0)*r12*x14033)));
evalcond[3]=((-1.0)+((r11*x14034))+(((-1.0)*x14028*x14033))+(((-1.0)*r12*x14032)));
evalcond[4]=(((cj2*sj1))+((x14027*x14030))+((cj1*sj2))+(((-1.0)*x14029*x14032))+(((-1.0)*r02*x14033)));
evalcond[5]=(((x14027*x14031))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14032))+(((-1.0)*r22*x14033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14035=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14035;
j4eval[1]=IKsign(x14035);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14036=((1.0)*cj5);
IkReal x14037=((((-1.0)*r21*x14036))+(((-1.0)*r20*sj5)));
j4eval[0]=x14037;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x14036)))))+(IKabs(r02)));
j4eval[2]=IKsign(x14037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14038=cj5*cj5;
IkReal x14039=r11*r11;
IkReal x14040=(r11*sj5);
IkReal x14041=(cj5*r10);
IkReal x14042=((((-2.0)*x14040*x14041))+(r12*r12)+(((-1.0)*x14038*x14039))+((x14038*(r10*r10)))+x14039);
j4eval[0]=x14042;
j4eval[1]=IKsign(x14042);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x14041))+x14040))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14043=cj5*cj5;
IkReal x14044=r11*r11;
IkReal x14045=(cj5*r10);
IkReal x14046=(r11*sj5);
CheckValue<IkReal> x14047 = IKatan2WithCheck(IkReal(((((-1.0)*x14045))+x14046)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14047.valid){
continue;
}
CheckValue<IkReal> x14048=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x14045*x14046))+(((-1.0)*x14043*x14044))+x14044+((x14043*(r10*r10))))),-1);
if(!x14048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14047.value)+(((1.5707963267949)*(x14048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14049=IKcos(j4);
IkReal x14050=IKsin(j4);
IkReal x14051=(cj5*r00);
IkReal x14052=(cj5*r10);
IkReal x14053=(r21*sj5);
IkReal x14054=(cj5*r20);
IkReal x14055=((1.0)*x14049);
IkReal x14056=((1.0)*x14050);
IkReal x14057=(sj5*x14050);
IkReal x14058=(sj5*x14049);
evalcond[0]=(((r11*x14058))+((r12*x14050))+(((-1.0)*x14052*x14055)));
evalcond[1]=(((x14050*x14053))+(((-1.0)*r22*x14055))+(((-1.0)*x14054*x14056)));
evalcond[2]=((((-1.0)*x14051*x14056))+(((-1.0)*r02*x14055))+((r01*x14057)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14055))+((r11*x14057))+(((-1.0)*x14052*x14056)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14051*x14055))+((r02*x14050))+((r01*x14058)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14054*x14055))+((r22*x14050))+((x14049*x14053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14059=((1.0)*cj5);
CheckValue<IkReal> x14060 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14060.valid){
continue;
}
CheckValue<IkReal> x14061=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14059))+(((-1.0)*r20*sj5)))),-1);
if(!x14061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14060.value)+(((1.5707963267949)*(x14061.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14062=IKcos(j4);
IkReal x14063=IKsin(j4);
IkReal x14064=(cj5*r00);
IkReal x14065=(cj5*r10);
IkReal x14066=(r21*sj5);
IkReal x14067=(cj5*r20);
IkReal x14068=((1.0)*x14062);
IkReal x14069=((1.0)*x14063);
IkReal x14070=(sj5*x14063);
IkReal x14071=(sj5*x14062);
evalcond[0]=((((-1.0)*x14065*x14068))+((r11*x14071))+((r12*x14063)));
evalcond[1]=((((-1.0)*r22*x14068))+((x14063*x14066))+(((-1.0)*x14067*x14069)));
evalcond[2]=((((-1.0)*x14064*x14069))+((r01*x14070))+(((-1.0)*r02*x14068)));
evalcond[3]=((-1.0)+(((-1.0)*x14065*x14069))+(((-1.0)*r12*x14068))+((r11*x14070)));
evalcond[4]=(((r02*x14063))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14064*x14068))+((r01*x14071)));
evalcond[5]=(((r22*x14063))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14062*x14066))+(((-1.0)*x14067*x14068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14072 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14072.valid){
continue;
}
CheckValue<IkReal> x14073=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14072.value)+(((1.5707963267949)*(x14073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14074=IKcos(j4);
IkReal x14075=IKsin(j4);
IkReal x14076=(cj5*r00);
IkReal x14077=(cj5*r10);
IkReal x14078=(r21*sj5);
IkReal x14079=(cj5*r20);
IkReal x14080=((1.0)*x14074);
IkReal x14081=((1.0)*x14075);
IkReal x14082=(sj5*x14075);
IkReal x14083=(sj5*x14074);
evalcond[0]=((((-1.0)*x14077*x14080))+((r11*x14083))+((r12*x14075)));
evalcond[1]=((((-1.0)*r22*x14080))+((x14075*x14078))+(((-1.0)*x14079*x14081)));
evalcond[2]=((((-1.0)*x14076*x14081))+((r01*x14082))+(((-1.0)*r02*x14080)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14080))+(((-1.0)*x14077*x14081))+((r11*x14082)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x14076*x14080))+((r02*x14075))+((r01*x14083))+((cj1*sj2)));
evalcond[5]=(((r22*x14075))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14074*x14078))+(((-1.0)*x14079*x14080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14085 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14085)==0){
continue;
}
IkReal x14084=pow(x14085,-0.5);
CheckValue<IkReal> x14086 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14086.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14086.value));
IkReal gconst37=((-1.0)*r01*x14084);
IkReal gconst38=(r00*x14084);
CheckValue<IkReal> x14087 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14087.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14087.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14090 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14090.valid){
continue;
}
IkReal x14088=((-1.0)*(x14090.value));
IkReal x14089=x14084;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14088;
IkReal gconst36=x14088;
IkReal gconst37=((-1.0)*r01*x14089);
IkReal gconst38=(r00*x14089);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14093 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14093.valid){
continue;
}
IkReal x14091=((-1.0)*(x14093.value));
IkReal x14092=x14084;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14091;
IkReal gconst36=x14091;
IkReal gconst37=((-1.0)*r01*x14092);
IkReal gconst38=(r00*x14092);
CheckValue<IkReal> x14101=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14101.valid){
continue;
}
IkReal x14094=x14101.value;
IkReal x14095=(sj3*x14094);
IkReal x14096=(r11*x14095);
IkReal x14097=(r21*x14095);
IkReal x14098=(r20*x14095);
IkReal x14099=(r10*x14095);
IkReal x14100=(r00*r01*x14095);
j4eval[0]=IKsign((((r21*x14096*(r01*r01)))+((r00*r01*r10*x14097))+((r00*r01*r20*x14096))+((r12*r22*sj3))+((r10*x14098*(r00*r00)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14102=gconst38*gconst38;
IkReal x14103=gconst37*gconst37;
IkReal x14104=((1.0)*cj3);
IkReal x14105=(r11*r20);
IkReal x14106=(r10*sj3);
IkReal x14107=(gconst37*gconst38);
IkReal x14108=(r11*sj3);
IkReal x14109=(r21*x14103);
IkReal x14110=(cj3*x14107);
CheckValue<IkReal> x14111=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14104*x14109))+(((-1.0)*r10*r20*x14102*x14104))+((x14105*x14110))+((r10*r21*x14110))+(((-1.0)*r12*r22*x14104)))),-1);
if(!x14111.valid){
continue;
}
CheckValue<IkReal> x14112 = IKatan2WithCheck(IkReal((((gconst38*r22*x14108))+((gconst37*r22*x14106)))),IkReal((((r21*x14107*x14108))+(((-1.0)*sj3*x14102*x14105))+(((-1.0)*r20*x14106*x14107))+((x14106*x14109)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14111.value)))+(x14112.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14113=IKsin(j4);
IkReal x14114=IKcos(j4);
IkReal x14115=(cj2*sj1);
IkReal x14116=(cj1*sj2);
IkReal x14117=(gconst38*r21);
IkReal x14118=(cj3*r20);
IkReal x14119=(gconst38*r10);
IkReal x14120=(cj3*gconst37);
IkReal x14121=(sj1*sj2);
IkReal x14122=(gconst38*r00);
IkReal x14123=(cj1*cj2);
IkReal x14124=(gconst37*sj3);
IkReal x14125=(gconst38*r20);
IkReal x14126=(gconst38*r01);
IkReal x14127=(gconst38*r11);
IkReal x14128=((1.0)*x14114);
IkReal x14129=((1.0)*x14113);
IkReal x14130=(cj3*x14113);
IkReal x14131=(sj3*x14114);
IkReal x14132=(gconst37*x14113);
IkReal x14133=(x14115+x14116);
evalcond[0]=((((-1.0)*r22*x14128))+((r21*x14132))+(((-1.0)*x14125*x14129)));
evalcond[1]=((((-1.0)*r02*x14128))+(((-1.0)*x14122*x14129))+((r01*x14132)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14128))+((r11*x14132))+(((-1.0)*x14119*x14129)));
evalcond[3]=((((-1.0)*cj3*x14119*x14128))+((r12*x14130))+((r11*x14114*x14120))+((r10*x14124))+((sj3*x14127)));
evalcond[4]=((((-1.0)*r12*sj3*x14129))+((cj3*x14127))+(((-1.0)*r11*x14124*x14128))+((x14119*x14131))+((r10*x14120)));
evalcond[5]=(((sj3*x14117))+((r21*x14114*x14120))+(((-1.0)*gconst38*x14118*x14128))+((r20*x14124))+((r22*x14130))+x14133);
evalcond[6]=(((r00*x14124))+((r02*x14130))+(((-1.0)*cj3*x14122*x14128))+(((-1.0)*x14121))+x14123+((r01*x14114*x14120))+((sj3*x14126)));
evalcond[7]=((((-1.0)*r01*x14124*x14128))+((cj3*x14126))+((r00*x14120))+(((-1.0)*r02*sj3*x14129))+x14133+((x14122*x14131)));
evalcond[8]=((((-1.0)*r21*x14124*x14128))+(((-1.0)*r22*sj3*x14129))+((cj3*x14117))+(((-1.0)*x14123))+x14121+((gconst37*x14118))+((x14125*x14131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14134=gconst38*gconst38;
IkReal x14135=gconst37*gconst37;
IkReal x14136=(gconst37*r10);
IkReal x14137=(cj3*r22);
IkReal x14138=((1.0)*gconst38);
IkReal x14139=(r21*sj3);
IkReal x14140=(gconst38*r11);
IkReal x14141=(cj3*r20);
IkReal x14142=(cj3*r21);
IkReal x14143=(r20*sj3);
CheckValue<IkReal> x14144 = IKatan2WithCheck(IkReal((((x14136*x14137))+((x14137*x14140)))),IkReal(((((-1.0)*r11*x14134*x14141))+(((-1.0)*x14136*x14138*x14141))+((r10*x14135*x14142))+((gconst37*x14140*x14142)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14144.valid){
continue;
}
CheckValue<IkReal> x14145=IKPowWithIntegerCheck(IKsign((((r11*x14135*x14139))+(((-1.0)*x14136*x14138*x14139))+(((-1.0)*gconst37*r11*x14138*x14143))+((r12*r22*sj3))+((r10*x14134*x14143)))),-1);
if(!x14145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14144.value)+(((1.5707963267949)*(x14145.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14146=IKsin(j4);
IkReal x14147=IKcos(j4);
IkReal x14148=(cj2*sj1);
IkReal x14149=(cj1*sj2);
IkReal x14150=(gconst38*r21);
IkReal x14151=(cj3*r20);
IkReal x14152=(gconst38*r10);
IkReal x14153=(cj3*gconst37);
IkReal x14154=(sj1*sj2);
IkReal x14155=(gconst38*r00);
IkReal x14156=(cj1*cj2);
IkReal x14157=(gconst37*sj3);
IkReal x14158=(gconst38*r20);
IkReal x14159=(gconst38*r01);
IkReal x14160=(gconst38*r11);
IkReal x14161=((1.0)*x14147);
IkReal x14162=((1.0)*x14146);
IkReal x14163=(cj3*x14146);
IkReal x14164=(sj3*x14147);
IkReal x14165=(gconst37*x14146);
IkReal x14166=(x14149+x14148);
evalcond[0]=((((-1.0)*r22*x14161))+((r21*x14165))+(((-1.0)*x14158*x14162)));
evalcond[1]=((((-1.0)*r02*x14161))+((r01*x14165))+(((-1.0)*x14155*x14162)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14161))+((r11*x14165))+(((-1.0)*x14152*x14162)));
evalcond[3]=(((r10*x14157))+((sj3*x14160))+((r11*x14147*x14153))+(((-1.0)*cj3*x14152*x14161))+((r12*x14163)));
evalcond[4]=(((cj3*x14160))+((r10*x14153))+(((-1.0)*r11*x14157*x14161))+(((-1.0)*r12*sj3*x14162))+((x14152*x14164)));
evalcond[5]=((((-1.0)*gconst38*x14151*x14161))+((sj3*x14150))+((r22*x14163))+x14166+((r21*x14147*x14153))+((r20*x14157)));
evalcond[6]=(((sj3*x14159))+((r02*x14163))+((r01*x14147*x14153))+((r00*x14157))+x14156+(((-1.0)*cj3*x14155*x14161))+(((-1.0)*x14154)));
evalcond[7]=((((-1.0)*r01*x14157*x14161))+((cj3*x14159))+(((-1.0)*r02*sj3*x14162))+((x14155*x14164))+((r00*x14153))+x14166);
evalcond[8]=(((cj3*x14150))+((x14158*x14164))+(((-1.0)*r22*sj3*x14162))+(((-1.0)*r21*x14157*x14161))+((gconst37*x14151))+x14154+(((-1.0)*x14156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14167=((1.0)*gconst38);
CheckValue<IkReal> x14168 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst37*r01))+(((-1.0)*r00*x14167)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14168.valid){
continue;
}
CheckValue<IkReal> x14169=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14167)))),-1);
if(!x14169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14168.value)+(((1.5707963267949)*(x14169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14170=IKsin(j4);
IkReal x14171=IKcos(j4);
IkReal x14172=(cj2*sj1);
IkReal x14173=(cj1*sj2);
IkReal x14174=(gconst38*r21);
IkReal x14175=(cj3*r20);
IkReal x14176=(gconst38*r10);
IkReal x14177=(cj3*gconst37);
IkReal x14178=(sj1*sj2);
IkReal x14179=(gconst38*r00);
IkReal x14180=(cj1*cj2);
IkReal x14181=(gconst37*sj3);
IkReal x14182=(gconst38*r20);
IkReal x14183=(gconst38*r01);
IkReal x14184=(gconst38*r11);
IkReal x14185=((1.0)*x14171);
IkReal x14186=((1.0)*x14170);
IkReal x14187=(cj3*x14170);
IkReal x14188=(sj3*x14171);
IkReal x14189=(gconst37*x14170);
IkReal x14190=(x14172+x14173);
evalcond[0]=((((-1.0)*x14182*x14186))+(((-1.0)*r22*x14185))+((r21*x14189)));
evalcond[1]=(((r01*x14189))+(((-1.0)*r02*x14185))+(((-1.0)*x14179*x14186)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14185))+(((-1.0)*x14176*x14186))+((r11*x14189)));
evalcond[3]=(((sj3*x14184))+((r12*x14187))+(((-1.0)*cj3*x14176*x14185))+((r10*x14181))+((r11*x14171*x14177)));
evalcond[4]=((((-1.0)*r12*sj3*x14186))+((cj3*x14184))+((x14176*x14188))+(((-1.0)*r11*x14181*x14185))+((r10*x14177)));
evalcond[5]=((((-1.0)*gconst38*x14175*x14185))+((r20*x14181))+((r21*x14171*x14177))+((r22*x14187))+x14190+((sj3*x14174)));
evalcond[6]=(((r02*x14187))+((sj3*x14183))+(((-1.0)*x14178))+((r00*x14181))+x14180+((r01*x14171*x14177))+(((-1.0)*cj3*x14179*x14185)));
evalcond[7]=(((cj3*x14183))+((r00*x14177))+(((-1.0)*r01*x14181*x14185))+((x14179*x14188))+(((-1.0)*r02*sj3*x14186))+x14190);
evalcond[8]=(((gconst37*x14175))+(((-1.0)*r21*x14181*x14185))+((x14182*x14188))+((cj3*x14174))+x14178+(((-1.0)*r22*sj3*x14186))+(((-1.0)*x14180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14192 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14192)==0){
continue;
}
IkReal x14191=pow(x14192,-0.5);
CheckValue<IkReal> x14193 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14193.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14193.value))));
IkReal gconst40=((1.0)*r01*x14191);
IkReal gconst41=((-1.0)*r00*x14191);
CheckValue<IkReal> x14194 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14194.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14194.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14197 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14197.valid){
continue;
}
IkReal x14195=((1.0)*(x14197.value));
IkReal x14196=x14191;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14195)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14195)));
IkReal gconst40=((1.0)*r01*x14196);
IkReal gconst41=((-1.0)*r00*x14196);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14200 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14200.valid){
continue;
}
IkReal x14198=((1.0)*(x14200.value));
IkReal x14199=x14191;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14198)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14198)));
IkReal gconst40=((1.0)*r01*x14199);
IkReal gconst41=((-1.0)*r00*x14199);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14201=gconst41*gconst41;
IkReal x14202=gconst40*gconst40;
IkReal x14203=(gconst40*r10);
IkReal x14204=(r22*sj3);
IkReal x14205=(r11*sj3);
IkReal x14206=((1.0)*cj3);
IkReal x14207=(gconst41*r21);
IkReal x14208=(gconst41*r20);
IkReal x14209=(r21*x14202);
IkReal x14210=((1.0)*r20*x14201);
CheckValue<IkReal> x14211=IKPowWithIntegerCheck(IKsign((((cj3*x14203*x14207))+(((-1.0)*r10*r20*x14201*x14206))+(((-1.0)*r12*r22*x14206))+((cj3*gconst40*r11*x14208))+(((-1.0)*r11*x14206*x14209)))),-1);
if(!x14211.valid){
continue;
}
CheckValue<IkReal> x14212 = IKatan2WithCheck(IkReal((((x14203*x14204))+((gconst41*r11*x14204)))),IkReal((((gconst40*x14205*x14207))+(((-1.0)*x14205*x14210))+(((-1.0)*sj3*x14203*x14208))+((r10*sj3*x14209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14211.value)))+(x14212.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14213=IKsin(j4);
IkReal x14214=IKcos(j4);
IkReal x14215=(cj2*sj1);
IkReal x14216=(cj1*sj2);
IkReal x14217=(gconst40*sj3);
IkReal x14218=(gconst41*sj3);
IkReal x14219=(gconst41*r20);
IkReal x14220=(cj3*gconst41);
IkReal x14221=(sj1*sj2);
IkReal x14222=(cj1*cj2);
IkReal x14223=(cj3*gconst40);
IkReal x14224=((1.0)*x14214);
IkReal x14225=((1.0)*x14213);
IkReal x14226=(cj3*x14213);
IkReal x14227=(gconst40*x14213);
IkReal x14228=(x14216+x14215);
IkReal x14229=(x14214*x14223);
evalcond[0]=((((-1.0)*x14219*x14225))+((r21*x14227))+(((-1.0)*r22*x14224)));
evalcond[1]=((((-1.0)*gconst41*r00*x14225))+(((-1.0)*r02*x14224))+((r01*x14227)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14224))+((r11*x14227))+(((-1.0)*gconst41*r10*x14225)));
evalcond[3]=(((r11*x14218))+((r10*x14217))+(((-1.0)*r10*x14220*x14224))+((r11*x14229))+((r12*x14226)));
evalcond[4]=(((r10*x14214*x14218))+((r10*x14223))+(((-1.0)*r12*sj3*x14225))+((r11*x14220))+(((-1.0)*r11*x14217*x14224)));
evalcond[5]=(((r22*x14226))+((r21*x14229))+(((-1.0)*cj3*x14219*x14224))+((r21*x14218))+((r20*x14217))+x14228);
evalcond[6]=(((r02*x14226))+((r01*x14218))+(((-1.0)*r00*x14220*x14224))+((r00*x14217))+(((-1.0)*x14221))+((r01*x14229))+x14222);
evalcond[7]=(((r00*x14214*x14218))+(((-1.0)*r01*x14217*x14224))+((r00*x14223))+(((-1.0)*r02*sj3*x14225))+((r01*x14220))+x14228);
evalcond[8]=((((-1.0)*r21*x14217*x14224))+((r20*x14223))+((r20*x14214*x14218))+((r21*x14220))+(((-1.0)*x14222))+x14221+(((-1.0)*r22*sj3*x14225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14230=((1.0)*gconst41);
CheckValue<IkReal> x14231=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14230))+(((-1.0)*gconst40*r20)))),-1);
if(!x14231.valid){
continue;
}
CheckValue<IkReal> x14232 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14230))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14231.value)))+(x14232.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14233=IKsin(j4);
IkReal x14234=IKcos(j4);
IkReal x14235=(cj2*sj1);
IkReal x14236=(cj1*sj2);
IkReal x14237=(gconst40*sj3);
IkReal x14238=(gconst41*sj3);
IkReal x14239=(gconst41*r20);
IkReal x14240=(cj3*gconst41);
IkReal x14241=(sj1*sj2);
IkReal x14242=(cj1*cj2);
IkReal x14243=(cj3*gconst40);
IkReal x14244=((1.0)*x14234);
IkReal x14245=((1.0)*x14233);
IkReal x14246=(cj3*x14233);
IkReal x14247=(gconst40*x14233);
IkReal x14248=(x14235+x14236);
IkReal x14249=(x14234*x14243);
evalcond[0]=(((r21*x14247))+(((-1.0)*x14239*x14245))+(((-1.0)*r22*x14244)));
evalcond[1]=((((-1.0)*gconst41*r00*x14245))+((r01*x14247))+(((-1.0)*r02*x14244)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14245))+((r11*x14247))+(((-1.0)*r12*x14244)));
evalcond[3]=((((-1.0)*r10*x14240*x14244))+((r10*x14237))+((r12*x14246))+((r11*x14249))+((r11*x14238)));
evalcond[4]=((((-1.0)*r11*x14237*x14244))+((r11*x14240))+((r10*x14243))+(((-1.0)*r12*sj3*x14245))+((r10*x14234*x14238)));
evalcond[5]=(((r21*x14249))+((r20*x14237))+((r21*x14238))+(((-1.0)*cj3*x14239*x14244))+x14248+((r22*x14246)));
evalcond[6]=((((-1.0)*x14241))+(((-1.0)*r00*x14240*x14244))+((r02*x14246))+((r01*x14238))+((r00*x14237))+((r01*x14249))+x14242);
evalcond[7]=(((r00*x14234*x14238))+(((-1.0)*r02*sj3*x14245))+((r01*x14240))+x14248+((r00*x14243))+(((-1.0)*r01*x14237*x14244)));
evalcond[8]=(((r21*x14240))+(((-1.0)*r22*sj3*x14245))+(((-1.0)*x14242))+((r20*x14243))+((r20*x14234*x14238))+(((-1.0)*r21*x14237*x14244))+x14241);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14250 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14250.valid){
continue;
}
CheckValue<IkReal> x14251=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14250.value)+(((1.5707963267949)*(x14251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14252=IKsin(j4);
IkReal x14253=IKcos(j4);
IkReal x14254=(cj2*sj1);
IkReal x14255=(cj1*sj2);
IkReal x14256=(gconst40*sj3);
IkReal x14257=(gconst41*sj3);
IkReal x14258=(gconst41*r20);
IkReal x14259=(cj3*gconst41);
IkReal x14260=(sj1*sj2);
IkReal x14261=(cj1*cj2);
IkReal x14262=(cj3*gconst40);
IkReal x14263=((1.0)*x14253);
IkReal x14264=((1.0)*x14252);
IkReal x14265=(cj3*x14252);
IkReal x14266=(gconst40*x14252);
IkReal x14267=(x14255+x14254);
IkReal x14268=(x14253*x14262);
evalcond[0]=(((r21*x14266))+(((-1.0)*r22*x14263))+(((-1.0)*x14258*x14264)));
evalcond[1]=((((-1.0)*r02*x14263))+(((-1.0)*gconst41*r00*x14264))+((r01*x14266)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14264))+((r11*x14266))+(((-1.0)*r12*x14263)));
evalcond[3]=(((r11*x14268))+((r12*x14265))+((r10*x14256))+(((-1.0)*r10*x14259*x14263))+((r11*x14257)));
evalcond[4]=((((-1.0)*r12*sj3*x14264))+((r10*x14253*x14257))+(((-1.0)*r11*x14256*x14263))+((r11*x14259))+((r10*x14262)));
evalcond[5]=(((r21*x14257))+((r21*x14268))+(((-1.0)*cj3*x14258*x14263))+((r20*x14256))+((r22*x14265))+x14267);
evalcond[6]=((((-1.0)*x14260))+((r02*x14265))+(((-1.0)*r00*x14259*x14263))+((r00*x14256))+x14261+((r01*x14257))+((r01*x14268)));
evalcond[7]=((((-1.0)*r01*x14256*x14263))+((r00*x14262))+(((-1.0)*r02*sj3*x14264))+x14267+((r00*x14253*x14257))+((r01*x14259)));
evalcond[8]=(((r21*x14259))+(((-1.0)*x14261))+(((-1.0)*r22*sj3*x14264))+((r20*x14262))+((r20*x14253*x14257))+x14260+(((-1.0)*r21*x14256*x14263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14269=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14269);
rxp1_1=(px*r21);
rxp1_2=(r11*x14269);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14270=(r11*sj5);
IkReal x14271=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14271))+x14270);
j4eval[1]=(((cj3*x14270))+(((-1.0)*cj3*x14271)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14272=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14272);
rxp1_1=(px*r21);
rxp1_2=(r11*x14272);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14273=(cj5*r10);
IkReal x14274=(r11*sj5);
j4eval[0]=((((-1.0)*x14273))+x14274);
j4eval[1]=(((sj3*x14273))+(((-1.0)*sj3*x14274)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14275=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14275);
rxp1_1=(px*r21);
rxp1_2=(r11*x14275);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14276=((1.0)*r10);
CheckValue<IkReal> x14277=IKPowWithIntegerCheck(cj3,-1);
if(!x14277.valid){
continue;
}
CheckValue<IkReal> x14278=IKPowWithIntegerCheck(r02,-1);
if(!x14278.valid){
continue;
}
CheckValue<IkReal> x14279=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14276))),-1);
if(!x14279.valid){
continue;
}
if( IKabs(((x14277.value)*(x14278.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14279.value)*(((((-1.0)*sj3*sj5*x14276))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14277.value)*(x14278.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14279.value)*(((((-1.0)*sj3*sj5*x14276))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14277.value)*(x14278.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14279.value)*(((((-1.0)*sj3*sj5*x14276))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14280=IKsin(j4);
IkReal x14281=IKcos(j4);
IkReal x14282=(cj2*sj1);
IkReal x14283=(cj1*sj2);
IkReal x14284=(cj5*r10);
IkReal x14285=(sj1*sj2);
IkReal x14286=(cj5*sj3);
IkReal x14287=(r11*sj5);
IkReal x14288=(cj3*sj5);
IkReal x14289=(r21*sj5);
IkReal x14290=(cj1*cj2);
IkReal x14291=(cj3*cj5);
IkReal x14292=(sj3*sj5);
IkReal x14293=((1.0)*x14280);
IkReal x14294=(r20*x14281);
IkReal x14295=(cj3*x14281);
IkReal x14296=(sj3*x14281);
IkReal x14297=(x14282+x14283);
evalcond[0]=((-1.0)*r02*x14281);
evalcond[1]=((((-1.0)*cj5*r20*x14293))+((x14280*x14289)));
evalcond[2]=(((cj3*r02*x14280))+(((-1.0)*x14285))+x14290);
evalcond[3]=((((-1.0)*r02*sj3*x14293))+x14297);
evalcond[4]=((-1.0)+(((-1.0)*x14284*x14293))+((x14280*x14287)));
evalcond[5]=(((x14287*x14295))+((r10*x14292))+((r11*x14286))+(((-1.0)*x14284*x14295)));
evalcond[6]=((((-1.0)*x14287*x14296))+((r10*x14288))+((x14284*x14296))+((r11*x14291)));
evalcond[7]=(((r20*x14292))+((r21*x14286))+(((-1.0)*x14291*x14294))+x14297+((r21*x14281*x14288)));
evalcond[8]=(((x14286*x14294))+(((-1.0)*x14289*x14296))+((r21*x14291))+(((-1.0)*x14290))+x14285+((r20*x14288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14298=(cj5*r10);
IkReal x14299=((1.0)*r11);
CheckValue<IkReal> x14300=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x14298))),-1);
if(!x14300.valid){
continue;
}
CheckValue<IkReal> x14301=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x14299))+((sj3*x14298))),-1);
if(!x14301.valid){
continue;
}
if( IKabs(x14300.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14301.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14299)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14300.value)+IKsqr(((x14301.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14299))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14300.value, ((x14301.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14299))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14302=IKsin(j4);
IkReal x14303=IKcos(j4);
IkReal x14304=(cj2*sj1);
IkReal x14305=(cj1*sj2);
IkReal x14306=(cj5*r10);
IkReal x14307=(sj1*sj2);
IkReal x14308=(cj5*sj3);
IkReal x14309=(r11*sj5);
IkReal x14310=(cj3*sj5);
IkReal x14311=(r21*sj5);
IkReal x14312=(cj1*cj2);
IkReal x14313=(cj3*cj5);
IkReal x14314=(sj3*sj5);
IkReal x14315=((1.0)*x14302);
IkReal x14316=(r20*x14303);
IkReal x14317=(cj3*x14303);
IkReal x14318=(sj3*x14303);
IkReal x14319=(x14305+x14304);
evalcond[0]=((-1.0)*r02*x14303);
evalcond[1]=((((-1.0)*cj5*r20*x14315))+((x14302*x14311)));
evalcond[2]=(((cj3*r02*x14302))+(((-1.0)*x14307))+x14312);
evalcond[3]=((((-1.0)*r02*sj3*x14315))+x14319);
evalcond[4]=((-1.0)+((x14302*x14309))+(((-1.0)*x14306*x14315)));
evalcond[5]=(((x14309*x14317))+((r11*x14308))+(((-1.0)*x14306*x14317))+((r10*x14314)));
evalcond[6]=(((r11*x14313))+((x14306*x14318))+(((-1.0)*x14309*x14318))+((r10*x14310)));
evalcond[7]=(((r21*x14303*x14310))+((r20*x14314))+(((-1.0)*x14313*x14316))+x14319+((r21*x14308)));
evalcond[8]=((((-1.0)*x14311*x14318))+((x14308*x14316))+(((-1.0)*x14312))+((r20*x14310))+((r21*x14313))+x14307);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14320=((1.0)*r10);
IkReal x14321=(r11*sj5);
CheckValue<IkReal> x14322=IKPowWithIntegerCheck(((((-1.0)*cj5*x14320))+x14321),-1);
if(!x14322.valid){
continue;
}
CheckValue<IkReal> x14323=IKPowWithIntegerCheck((((cj3*x14321))+(((-1.0)*cj3*cj5*x14320))),-1);
if(!x14323.valid){
continue;
}
if( IKabs(x14322.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14323.value)*(((((-1.0)*sj3*sj5*x14320))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14322.value)+IKsqr(((x14323.value)*(((((-1.0)*sj3*sj5*x14320))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14322.value, ((x14323.value)*(((((-1.0)*sj3*sj5*x14320))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14324=IKsin(j4);
IkReal x14325=IKcos(j4);
IkReal x14326=(cj2*sj1);
IkReal x14327=(cj1*sj2);
IkReal x14328=(cj5*r10);
IkReal x14329=(sj1*sj2);
IkReal x14330=(cj5*sj3);
IkReal x14331=(r11*sj5);
IkReal x14332=(cj3*sj5);
IkReal x14333=(r21*sj5);
IkReal x14334=(cj1*cj2);
IkReal x14335=(cj3*cj5);
IkReal x14336=(sj3*sj5);
IkReal x14337=((1.0)*x14324);
IkReal x14338=(r20*x14325);
IkReal x14339=(cj3*x14325);
IkReal x14340=(sj3*x14325);
IkReal x14341=(x14327+x14326);
evalcond[0]=((-1.0)*r02*x14325);
evalcond[1]=((((-1.0)*cj5*r20*x14337))+((x14324*x14333)));
evalcond[2]=(((cj3*r02*x14324))+x14334+(((-1.0)*x14329)));
evalcond[3]=((((-1.0)*r02*sj3*x14337))+x14341);
evalcond[4]=((-1.0)+((x14324*x14331))+(((-1.0)*x14328*x14337)));
evalcond[5]=(((r11*x14330))+(((-1.0)*x14328*x14339))+((x14331*x14339))+((r10*x14336)));
evalcond[6]=((((-1.0)*x14331*x14340))+((r11*x14335))+((x14328*x14340))+((r10*x14332)));
evalcond[7]=(((r20*x14336))+((r21*x14325*x14332))+(((-1.0)*x14335*x14338))+x14341+((r21*x14330)));
evalcond[8]=(((r20*x14332))+(((-1.0)*x14333*x14340))+(((-1.0)*x14334))+x14329+((x14330*x14338))+((r21*x14335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14342=cj5*cj5;
IkReal x14343=((1.0)*cj3);
IkReal x14344=(r10*r21);
IkReal x14345=(cj5*sj5);
IkReal x14346=(r11*r21);
IkReal x14347=(r11*r20);
IkReal x14348=(r22*sj3);
IkReal x14349=(r10*r20);
IkReal x14350=((1.0)*sj3*x14342);
CheckValue<IkReal> x14351=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14343*x14346))+((cj3*x14344*x14345))+(((-1.0)*r12*r22*x14343))+((cj3*x14345*x14347))+(((-1.0)*x14342*x14343*x14349))+((cj3*x14342*x14346)))),-1);
if(!x14351.valid){
continue;
}
CheckValue<IkReal> x14352 = IKatan2WithCheck(IkReal((((cj5*r11*x14348))+((r10*sj5*x14348)))),IkReal(((((-1.0)*x14344*x14350))+(((-1.0)*sj3*x14345*x14349))+(((-1.0)*x14347*x14350))+((sj3*x14344))+((sj3*x14345*x14346)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14351.value)))+(x14352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14353=IKsin(j4);
IkReal x14354=IKcos(j4);
IkReal x14355=(cj2*sj1);
IkReal x14356=(cj1*sj2);
IkReal x14357=(cj5*sj3);
IkReal x14358=(cj5*r10);
IkReal x14359=(r00*sj5);
IkReal x14360=(sj1*sj2);
IkReal x14361=(r11*sj5);
IkReal x14362=(cj3*cj5);
IkReal x14363=(cj3*sj5);
IkReal x14364=(r21*sj5);
IkReal x14365=(cj1*cj2);
IkReal x14366=(sj3*sj5);
IkReal x14367=(r01*sj5);
IkReal x14368=((1.0)*x14354);
IkReal x14369=((1.0)*x14353);
IkReal x14370=(cj3*x14353);
IkReal x14371=(cj3*x14354);
IkReal x14372=(x14356+x14355);
evalcond[0]=((((-1.0)*r22*x14368))+(((-1.0)*cj5*r20*x14369))+((x14353*x14364)));
evalcond[1]=(((x14353*x14367))+(((-1.0)*r02*x14368))+(((-1.0)*cj5*r00*x14369)));
evalcond[2]=((-1.0)+((x14353*x14361))+(((-1.0)*r12*x14368))+(((-1.0)*x14358*x14369)));
evalcond[3]=(((r10*x14366))+((x14361*x14371))+(((-1.0)*cj3*x14358*x14368))+((r11*x14357))+((r12*x14370)));
evalcond[4]=(((r10*x14363))+((r11*x14362))+(((-1.0)*r12*sj3*x14369))+((r10*x14354*x14357))+(((-1.0)*sj3*x14361*x14368)));
evalcond[5]=(((r21*x14354*x14363))+((r20*x14366))+((r22*x14370))+(((-1.0)*r20*x14362*x14368))+((r21*x14357))+x14372);
evalcond[6]=(((sj3*x14359))+((r01*x14354*x14363))+(((-1.0)*r00*x14362*x14368))+((r01*x14357))+(((-1.0)*x14360))+x14365+((r02*x14370)));
evalcond[7]=(((cj3*x14359))+(((-1.0)*r02*sj3*x14369))+((r01*x14362))+(((-1.0)*r01*x14366*x14368))+x14372+((r00*x14354*x14357)));
evalcond[8]=(((r20*x14354*x14357))+((r20*x14363))+(((-1.0)*x14365))+(((-1.0)*sj3*x14364*x14368))+((r21*x14362))+x14360+(((-1.0)*r22*sj3*x14369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14373=((1.0)*cj5);
CheckValue<IkReal> x14374 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14373)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14374.valid){
continue;
}
CheckValue<IkReal> x14375=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14373))+(((-1.0)*r20*sj5)))),-1);
if(!x14375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14374.value)+(((1.5707963267949)*(x14375.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14376=IKsin(j4);
IkReal x14377=IKcos(j4);
IkReal x14378=(cj2*sj1);
IkReal x14379=(cj1*sj2);
IkReal x14380=(cj5*sj3);
IkReal x14381=(cj5*r10);
IkReal x14382=(r00*sj5);
IkReal x14383=(sj1*sj2);
IkReal x14384=(r11*sj5);
IkReal x14385=(cj3*cj5);
IkReal x14386=(cj3*sj5);
IkReal x14387=(r21*sj5);
IkReal x14388=(cj1*cj2);
IkReal x14389=(sj3*sj5);
IkReal x14390=(r01*sj5);
IkReal x14391=((1.0)*x14377);
IkReal x14392=((1.0)*x14376);
IkReal x14393=(cj3*x14376);
IkReal x14394=(cj3*x14377);
IkReal x14395=(x14378+x14379);
evalcond[0]=(((x14376*x14387))+(((-1.0)*cj5*r20*x14392))+(((-1.0)*r22*x14391)));
evalcond[1]=(((x14376*x14390))+(((-1.0)*cj5*r00*x14392))+(((-1.0)*r02*x14391)));
evalcond[2]=((-1.0)+((x14376*x14384))+(((-1.0)*r12*x14391))+(((-1.0)*x14381*x14392)));
evalcond[3]=(((x14384*x14394))+((r12*x14393))+((r10*x14389))+((r11*x14380))+(((-1.0)*cj3*x14381*x14391)));
evalcond[4]=((((-1.0)*sj3*x14384*x14391))+((r10*x14386))+((r11*x14385))+((r10*x14377*x14380))+(((-1.0)*r12*sj3*x14392)));
evalcond[5]=(((r20*x14389))+((r21*x14377*x14386))+(((-1.0)*r20*x14385*x14391))+((r21*x14380))+((r22*x14393))+x14395);
evalcond[6]=(((r01*x14377*x14386))+(((-1.0)*x14383))+((r01*x14380))+(((-1.0)*r00*x14385*x14391))+((r02*x14393))+x14388+((sj3*x14382)));
evalcond[7]=((((-1.0)*r02*sj3*x14392))+((r01*x14385))+((cj3*x14382))+x14395+((r00*x14377*x14380))+(((-1.0)*r01*x14389*x14391)));
evalcond[8]=((((-1.0)*sj3*x14387*x14391))+((r20*x14386))+((r20*x14377*x14380))+(((-1.0)*x14388))+((r21*x14385))+(((-1.0)*r22*sj3*x14392))+x14383);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14396 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14396.valid){
continue;
}
CheckValue<IkReal> x14397=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14396.value)+(((1.5707963267949)*(x14397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14398=IKsin(j4);
IkReal x14399=IKcos(j4);
IkReal x14400=(cj2*sj1);
IkReal x14401=(cj1*sj2);
IkReal x14402=(cj5*sj3);
IkReal x14403=(cj5*r10);
IkReal x14404=(r00*sj5);
IkReal x14405=(sj1*sj2);
IkReal x14406=(r11*sj5);
IkReal x14407=(cj3*cj5);
IkReal x14408=(cj3*sj5);
IkReal x14409=(r21*sj5);
IkReal x14410=(cj1*cj2);
IkReal x14411=(sj3*sj5);
IkReal x14412=(r01*sj5);
IkReal x14413=((1.0)*x14399);
IkReal x14414=((1.0)*x14398);
IkReal x14415=(cj3*x14398);
IkReal x14416=(cj3*x14399);
IkReal x14417=(x14400+x14401);
evalcond[0]=(((x14398*x14409))+(((-1.0)*r22*x14413))+(((-1.0)*cj5*r20*x14414)));
evalcond[1]=(((x14398*x14412))+(((-1.0)*r02*x14413))+(((-1.0)*cj5*r00*x14414)));
evalcond[2]=((-1.0)+((x14398*x14406))+(((-1.0)*x14403*x14414))+(((-1.0)*r12*x14413)));
evalcond[3]=(((r12*x14415))+((r11*x14402))+(((-1.0)*cj3*x14403*x14413))+((x14406*x14416))+((r10*x14411)));
evalcond[4]=(((r10*x14408))+((r10*x14399*x14402))+((r11*x14407))+(((-1.0)*r12*sj3*x14414))+(((-1.0)*sj3*x14406*x14413)));
evalcond[5]=(((r21*x14402))+((r21*x14399*x14408))+((r22*x14415))+(((-1.0)*r20*x14407*x14413))+x14417+((r20*x14411)));
evalcond[6]=(((sj3*x14404))+(((-1.0)*x14405))+((r02*x14415))+(((-1.0)*r00*x14407*x14413))+((r01*x14402))+x14410+((r01*x14399*x14408)));
evalcond[7]=(((r00*x14399*x14402))+(((-1.0)*r01*x14411*x14413))+((r01*x14407))+((cj3*x14404))+x14417+(((-1.0)*r02*sj3*x14414)));
evalcond[8]=(((r21*x14407))+(((-1.0)*x14410))+(((-1.0)*sj3*x14409*x14413))+(((-1.0)*r22*sj3*x14414))+((r20*x14399*x14402))+x14405+((r20*x14408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14418=((-1.0)*r00);
IkReal x14420 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14420)==0){
continue;
}
IkReal x14419=pow(x14420,-0.5);
CheckValue<IkReal> x14421 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14418),IKFAST_ATAN2_MAGTHRESH);
if(!x14421.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14421.value));
IkReal gconst13=(r01*x14419);
IkReal gconst14=(x14418*x14419);
CheckValue<IkReal> x14422 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14422.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14422.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14423=((-1.0)*r00);
IkReal x14424=x14419;
CheckValue<IkReal> x14426 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14423),IKFAST_ATAN2_MAGTHRESH);
if(!x14426.valid){
continue;
}
IkReal x14425=((-1.0)*(x14426.value));
sj5=gconst13;
cj5=gconst14;
j5=x14425;
IkReal gconst12=x14425;
IkReal gconst13=(r01*x14424);
IkReal gconst14=(x14423*x14424);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14427=((1.0)*sj0);
IkReal x14428=((1.0)*cj0);
CheckValue<IkReal> x14429 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14428))+(((-1.0)*r12*x14427)))),IkReal(((((-1.0)*gconst13*r01*x14428))+((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r11*x14427)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14429.valid){
continue;
}
CheckValue<IkReal> x14430=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14429.value)+(((1.5707963267949)*(x14430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14431=IKsin(j4);
IkReal x14432=IKcos(j4);
IkReal x14433=((1.0)*r22);
IkReal x14434=((1.0)*r12);
IkReal x14435=(gconst13*sj3);
IkReal x14436=(gconst13*r01);
IkReal x14437=(sj1*sj2);
IkReal x14438=(gconst14*sj3);
IkReal x14439=(cj2*sj1);
IkReal x14440=((1.0)*sj0);
IkReal x14441=(cj3*gconst13);
IkReal x14442=(cj3*gconst14);
IkReal x14443=((1.0)*cj0);
IkReal x14444=((1.0)*gconst14);
IkReal x14445=(cj1*sj2);
IkReal x14446=(sj3*x14431);
IkReal x14447=((1.0)*cj1*cj2);
IkReal x14448=(cj3*x14432);
IkReal x14449=(cj3*x14431);
IkReal x14450=(gconst13*x14431);
IkReal x14451=((1.0)*x14432);
IkReal x14452=(x14431*x14444);
evalcond[0]=((((-1.0)*x14432*x14433))+(((-1.0)*r20*x14452))+((r21*x14450)));
evalcond[1]=((((-1.0)*x14432*x14434))+cj0+((r11*x14450))+(((-1.0)*r10*x14452)));
evalcond[2]=((((-1.0)*x14440))+(((-1.0)*r00*x14452))+(((-1.0)*r02*x14451))+((x14431*x14436)));
evalcond[3]=((((-1.0)*r20*x14442*x14451))+((r21*x14438))+((r20*x14435))+((r21*x14432*x14441))+x14445+x14439+((r22*x14449)));
evalcond[4]=((((-1.0)*x14447))+((r20*x14441))+(((-1.0)*r21*x14435*x14451))+x14437+((r20*x14432*x14438))+((r21*x14442))+(((-1.0)*x14433*x14446)));
evalcond[5]=(((cj0*x14437))+((r00*x14435))+(((-1.0)*r00*x14442*x14451))+((r01*x14438))+((x14436*x14448))+(((-1.0)*cj1*cj2*x14443))+((r02*x14449)));
evalcond[6]=(((r11*x14438))+((r12*x14449))+((sj0*x14437))+((r10*x14435))+(((-1.0)*r10*x14442*x14451))+(((-1.0)*cj1*cj2*x14440))+((r11*x14432*x14441)));
evalcond[7]=((((-1.0)*r02*x14446))+(((-1.0)*x14439*x14443))+((r00*x14432*x14438))+((r01*x14442))+((r00*x14441))+(((-1.0)*r01*x14435*x14451))+(((-1.0)*x14443*x14445)));
evalcond[8]=((((-1.0)*x14434*x14446))+(((-1.0)*x14439*x14440))+(((-1.0)*x14440*x14445))+(((-1.0)*r11*x14435*x14451))+((r10*x14441))+((r11*x14442))+((r10*x14432*x14438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14453=((1.0)*gconst14);
CheckValue<IkReal> x14454=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14453))+(((-1.0)*gconst13*r10)))),-1);
if(!x14454.valid){
continue;
}
CheckValue<IkReal> x14455 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14453))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14454.value)))+(x14455.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14456=IKsin(j4);
IkReal x14457=IKcos(j4);
IkReal x14458=((1.0)*r22);
IkReal x14459=((1.0)*r12);
IkReal x14460=(gconst13*sj3);
IkReal x14461=(gconst13*r01);
IkReal x14462=(sj1*sj2);
IkReal x14463=(gconst14*sj3);
IkReal x14464=(cj2*sj1);
IkReal x14465=((1.0)*sj0);
IkReal x14466=(cj3*gconst13);
IkReal x14467=(cj3*gconst14);
IkReal x14468=((1.0)*cj0);
IkReal x14469=((1.0)*gconst14);
IkReal x14470=(cj1*sj2);
IkReal x14471=(sj3*x14456);
IkReal x14472=((1.0)*cj1*cj2);
IkReal x14473=(cj3*x14457);
IkReal x14474=(cj3*x14456);
IkReal x14475=(gconst13*x14456);
IkReal x14476=((1.0)*x14457);
IkReal x14477=(x14456*x14469);
evalcond[0]=(((r21*x14475))+(((-1.0)*x14457*x14458))+(((-1.0)*r20*x14477)));
evalcond[1]=(cj0+(((-1.0)*r10*x14477))+((r11*x14475))+(((-1.0)*x14457*x14459)));
evalcond[2]=((((-1.0)*r00*x14477))+((x14456*x14461))+(((-1.0)*r02*x14476))+(((-1.0)*x14465)));
evalcond[3]=(((r21*x14463))+(((-1.0)*r20*x14467*x14476))+((r22*x14474))+x14470+x14464+((r21*x14457*x14466))+((r20*x14460)));
evalcond[4]=(((r20*x14457*x14463))+((r21*x14467))+(((-1.0)*r21*x14460*x14476))+x14462+(((-1.0)*x14472))+(((-1.0)*x14458*x14471))+((r20*x14466)));
evalcond[5]=(((r01*x14463))+((r00*x14460))+((r02*x14474))+(((-1.0)*cj1*cj2*x14468))+(((-1.0)*r00*x14467*x14476))+((x14461*x14473))+((cj0*x14462)));
evalcond[6]=(((r10*x14460))+((r11*x14463))+((sj0*x14462))+(((-1.0)*cj1*cj2*x14465))+((r12*x14474))+((r11*x14457*x14466))+(((-1.0)*r10*x14467*x14476)));
evalcond[7]=(((r01*x14467))+((r00*x14466))+(((-1.0)*r01*x14460*x14476))+(((-1.0)*x14464*x14468))+((r00*x14457*x14463))+(((-1.0)*r02*x14471))+(((-1.0)*x14468*x14470)));
evalcond[8]=((((-1.0)*x14459*x14471))+((r10*x14457*x14463))+((r10*x14466))+(((-1.0)*x14464*x14465))+((r11*x14467))+(((-1.0)*x14465*x14470))+(((-1.0)*r11*x14460*x14476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14478=((-1.0)*r01);
IkReal x14480 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14480)==0){
continue;
}
IkReal x14479=pow(x14480,-0.5);
CheckValue<IkReal> x14481 = IKatan2WithCheck(IkReal(x14478),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14481.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14481.value))));
IkReal gconst16=(x14478*x14479);
IkReal gconst17=((1.0)*r00*x14479);
CheckValue<IkReal> x14482 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14482.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14482.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14483=((-1.0)*r01);
CheckValue<IkReal> x14486 = IKatan2WithCheck(IkReal(x14483),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14486.valid){
continue;
}
IkReal x14484=((1.0)*(x14486.value));
IkReal x14485=x14479;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14484)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14484)));
IkReal gconst16=(x14483*x14485);
IkReal gconst17=((1.0)*r00*x14485);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14487=((-1.0)*r01);
CheckValue<IkReal> x14490 = IKatan2WithCheck(IkReal(x14487),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14490.valid){
continue;
}
IkReal x14488=((1.0)*(x14490.value));
IkReal x14489=x14479;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14488)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14488)));
IkReal gconst16=(x14487*x14489);
IkReal gconst17=((1.0)*r00*x14489);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14491=((-1.0)*r01);
CheckValue<IkReal> x14494 = IKatan2WithCheck(IkReal(x14491),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14494.valid){
continue;
}
IkReal x14492=((1.0)*(x14494.value));
IkReal x14493=x14479;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14492)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14492)));
IkReal gconst16=(x14491*x14493);
IkReal gconst17=((1.0)*r00*x14493);
IkReal x14495=r02*r02;
IkReal x14496=(r12*sj0);
IkReal x14497=((1.0)*cj0);
IkReal x14498=x14479;
j4eval[0]=((IKabs(((((-1.0)*x14496))+(((-1.0)*r02*x14497)))))+(IKabs((((r02*x14496*x14498))+(((-1.0)*x14497*x14498))+((cj0*x14495*x14498))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14499=((-1.0)*r01);
CheckValue<IkReal> x14502 = IKatan2WithCheck(IkReal(x14499),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14502.valid){
continue;
}
IkReal x14500=((1.0)*(x14502.value));
IkReal x14501=x14479;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14500)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14500)));
IkReal gconst16=(x14499*x14501);
IkReal gconst17=((1.0)*r00*x14501);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14503=((-1.0)*r01);
CheckValue<IkReal> x14506 = IKatan2WithCheck(IkReal(x14503),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14506.valid){
continue;
}
IkReal x14504=((1.0)*(x14506.value));
IkReal x14505=x14479;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14504)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14504)));
IkReal gconst16=(x14503*x14505);
IkReal gconst17=((1.0)*r00*x14505);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14507=gconst16*gconst16;
IkReal x14508=gconst17*gconst17;
IkReal x14509=(r11*sj3);
IkReal x14510=(cj3*r10);
IkReal x14511=((1.0)*cj3);
IkReal x14512=(r10*sj3);
IkReal x14513=(gconst16*gconst17);
IkReal x14514=(r21*x14507);
IkReal x14515=((1.0)*r20*x14508);
CheckValue<IkReal> x14516 = IKatan2WithCheck(IkReal((((gconst16*r22*x14512))+((gconst17*r22*x14509)))),IkReal((((x14512*x14514))+(((-1.0)*x14509*x14515))+(((-1.0)*r20*x14512*x14513))+((r21*x14509*x14513)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14516.valid){
continue;
}
CheckValue<IkReal> x14517=IKPowWithIntegerCheck(IKsign((((cj3*r11*r20*x14513))+(((-1.0)*r12*r22*x14511))+(((-1.0)*x14510*x14515))+(((-1.0)*r11*x14511*x14514))+((r21*x14510*x14513)))),-1);
if(!x14517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14516.value)+(((1.5707963267949)*(x14517.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14518=IKsin(j4);
IkReal x14519=IKcos(j4);
IkReal x14520=(cj2*sj1);
IkReal x14521=(cj1*sj2);
IkReal x14522=(gconst16*r21);
IkReal x14523=(cj3*gconst17);
IkReal x14524=(gconst16*r20);
IkReal x14525=(sj1*sj2);
IkReal x14526=(gconst17*r20);
IkReal x14527=(gconst17*sj3);
IkReal x14528=(gconst16*r10);
IkReal x14529=(cj1*cj2);
IkReal x14530=(gconst16*sj3);
IkReal x14531=((1.0)*x14519);
IkReal x14532=((1.0)*x14518);
IkReal x14533=(gconst16*x14518);
IkReal x14534=(cj3*x14519);
IkReal x14535=(cj3*x14518);
IkReal x14536=(x14521+x14520);
evalcond[0]=((((-1.0)*r22*x14531))+(((-1.0)*x14526*x14532))+((x14518*x14522)));
evalcond[1]=(((r01*x14533))+(((-1.0)*gconst17*r00*x14532))+(((-1.0)*r02*x14531)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14532))+(((-1.0)*r12*x14531))+((r11*x14533)));
evalcond[3]=((((-1.0)*r10*x14523*x14531))+((r12*x14535))+((sj3*x14528))+((r11*x14527))+((gconst16*r11*x14534)));
evalcond[4]=((((-1.0)*r12*sj3*x14532))+((r10*x14519*x14527))+((cj3*x14528))+((r11*x14523))+(((-1.0)*r11*x14530*x14531)));
evalcond[5]=(((sj3*x14524))+((r22*x14535))+((x14522*x14534))+x14536+((r21*x14527))+(((-1.0)*r20*x14523*x14531)));
evalcond[6]=((((-1.0)*x14525))+((r02*x14535))+((r01*x14527))+((r00*x14530))+x14529+((gconst16*r01*x14534))+(((-1.0)*r00*x14523*x14531)));
evalcond[7]=((((-1.0)*r02*sj3*x14532))+((r01*x14523))+((r00*x14519*x14527))+(((-1.0)*r01*x14530*x14531))+x14536+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14529))+(((-1.0)*sj3*x14522*x14531))+((cj3*x14524))+x14525+((sj3*x14519*x14526))+((r21*x14523))+(((-1.0)*r22*sj3*x14532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14537=((1.0)*gconst17);
CheckValue<IkReal> x14538=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14537)))),-1);
if(!x14538.valid){
continue;
}
CheckValue<IkReal> x14539 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14537))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14538.value)))+(x14539.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14540=IKsin(j4);
IkReal x14541=IKcos(j4);
IkReal x14542=(cj2*sj1);
IkReal x14543=(cj1*sj2);
IkReal x14544=(gconst16*r21);
IkReal x14545=(cj3*gconst17);
IkReal x14546=(gconst16*r20);
IkReal x14547=(sj1*sj2);
IkReal x14548=(gconst17*r20);
IkReal x14549=(gconst17*sj3);
IkReal x14550=(gconst16*r10);
IkReal x14551=(cj1*cj2);
IkReal x14552=(gconst16*sj3);
IkReal x14553=((1.0)*x14541);
IkReal x14554=((1.0)*x14540);
IkReal x14555=(gconst16*x14540);
IkReal x14556=(cj3*x14541);
IkReal x14557=(cj3*x14540);
IkReal x14558=(x14543+x14542);
evalcond[0]=((((-1.0)*r22*x14553))+(((-1.0)*x14548*x14554))+((x14540*x14544)));
evalcond[1]=((((-1.0)*r02*x14553))+((r01*x14555))+(((-1.0)*gconst17*r00*x14554)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14554))+(((-1.0)*r12*x14553))+((r11*x14555)));
evalcond[3]=(((sj3*x14550))+((r11*x14549))+(((-1.0)*r10*x14545*x14553))+((r12*x14557))+((gconst16*r11*x14556)));
evalcond[4]=(((r10*x14541*x14549))+((r11*x14545))+(((-1.0)*r11*x14552*x14553))+((cj3*x14550))+(((-1.0)*r12*sj3*x14554)));
evalcond[5]=(((x14544*x14556))+((r21*x14549))+x14558+(((-1.0)*r20*x14545*x14553))+((sj3*x14546))+((r22*x14557)));
evalcond[6]=(((gconst16*r01*x14556))+((r01*x14549))+(((-1.0)*x14547))+((r02*x14557))+x14551+(((-1.0)*r00*x14545*x14553))+((r00*x14552)));
evalcond[7]=(((r01*x14545))+(((-1.0)*r01*x14552*x14553))+x14558+(((-1.0)*r02*sj3*x14554))+((r00*x14541*x14549))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*r22*sj3*x14554))+((cj3*x14546))+((r21*x14545))+x14547+(((-1.0)*x14551))+((sj3*x14541*x14548))+(((-1.0)*sj3*x14544*x14553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14559=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14559.valid){
continue;
}
CheckValue<IkReal> x14560 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14559.value)))+(x14560.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14561=IKsin(j4);
IkReal x14562=IKcos(j4);
IkReal x14563=(cj2*sj1);
IkReal x14564=(cj1*sj2);
IkReal x14565=(gconst16*r21);
IkReal x14566=(cj3*gconst17);
IkReal x14567=(gconst16*r20);
IkReal x14568=(sj1*sj2);
IkReal x14569=(gconst17*r20);
IkReal x14570=(gconst17*sj3);
IkReal x14571=(gconst16*r10);
IkReal x14572=(cj1*cj2);
IkReal x14573=(gconst16*sj3);
IkReal x14574=((1.0)*x14562);
IkReal x14575=((1.0)*x14561);
IkReal x14576=(gconst16*x14561);
IkReal x14577=(cj3*x14562);
IkReal x14578=(cj3*x14561);
IkReal x14579=(x14564+x14563);
evalcond[0]=(((x14561*x14565))+(((-1.0)*r22*x14574))+(((-1.0)*x14569*x14575)));
evalcond[1]=((((-1.0)*r02*x14574))+(((-1.0)*gconst17*r00*x14575))+((r01*x14576)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14575))+(((-1.0)*r12*x14574))+((r11*x14576)));
evalcond[3]=((((-1.0)*r10*x14566*x14574))+((r11*x14570))+((r12*x14578))+((gconst16*r11*x14577))+((sj3*x14571)));
evalcond[4]=(((r10*x14562*x14570))+(((-1.0)*r11*x14573*x14574))+((r11*x14566))+((cj3*x14571))+(((-1.0)*r12*sj3*x14575)));
evalcond[5]=(((r21*x14570))+(((-1.0)*r20*x14566*x14574))+x14579+((r22*x14578))+((sj3*x14567))+((x14565*x14577)));
evalcond[6]=(((r02*x14578))+(((-1.0)*r00*x14566*x14574))+x14572+(((-1.0)*x14568))+((gconst16*r01*x14577))+((r01*x14570))+((r00*x14573)));
evalcond[7]=(((r01*x14566))+((r00*x14562*x14570))+x14579+(((-1.0)*r01*x14573*x14574))+((cj3*gconst16*r00))+(((-1.0)*r02*sj3*x14575)));
evalcond[8]=(((r21*x14566))+(((-1.0)*r22*sj3*x14575))+(((-1.0)*sj3*x14565*x14574))+x14568+((cj3*x14567))+(((-1.0)*x14572))+((sj3*x14562*x14569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14580=((-1.0)*r01);
CheckValue<IkReal> x14583 = IKatan2WithCheck(IkReal(x14580),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14583.valid){
continue;
}
IkReal x14581=((1.0)*(x14583.value));
IkReal x14582=x14479;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14581)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14581)));
IkReal gconst16=(x14580*x14582);
IkReal gconst17=((1.0)*r00*x14582);
IkReal x14584=r02*r02;
IkReal x14585=(r12*sj0);
IkReal x14586=((1.0)*cj0);
IkReal x14587=x14479;
j4eval[0]=((IKabs((((cj0*x14584*x14587))+((r02*x14585*x14587))+(((-1.0)*x14586*x14587)))))+(IKabs(((((-1.0)*r02*x14586))+(((-1.0)*x14585))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14588=((1.0)*r12);
IkReal x14589=(sj1*sj2);
IkReal x14590=(cj1*cj2);
IkReal x14591=((1.0)*sj3);
IkReal x14592=(gconst16*r21);
IkReal x14593=(cj3*gconst16*r20);
IkReal x14594=(gconst17*r20*sj3);
IkReal x14595=(cj3*gconst17*r21);
CheckValue<IkReal> x14596=IKPowWithIntegerCheck(((((-1.0)*r10*r20*x14591*(gconst17*gconst17)))+(((-1.0)*gconst16*r11*x14591*x14592))+((gconst16*r11*x14594))+((gconst17*r10*sj3*x14592))),-1);
if(!x14596.valid){
continue;
}
CheckValue<IkReal> x14597=IKPowWithIntegerCheck((x14594+(((-1.0)*x14591*x14592))),-1);
if(!x14597.valid){
continue;
}
if( IKabs(((x14596.value)*(((((-1.0)*x14588*x14589))+(((-1.0)*x14588*x14593))+(((-1.0)*x14588*x14595))+(((-1.0)*cj0*gconst17*r20*x14591))+((cj0*sj3*x14592))+((r12*x14590)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14597.value)*(((((-1.0)*x14589))+(((-1.0)*x14595))+(((-1.0)*x14593))+x14590)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14596.value)*(((((-1.0)*x14588*x14589))+(((-1.0)*x14588*x14593))+(((-1.0)*x14588*x14595))+(((-1.0)*cj0*gconst17*r20*x14591))+((cj0*sj3*x14592))+((r12*x14590))))))+IKsqr(((x14597.value)*(((((-1.0)*x14589))+(((-1.0)*x14595))+(((-1.0)*x14593))+x14590))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14596.value)*(((((-1.0)*x14588*x14589))+(((-1.0)*x14588*x14593))+(((-1.0)*x14588*x14595))+(((-1.0)*cj0*gconst17*r20*x14591))+((cj0*sj3*x14592))+((r12*x14590))))), ((x14597.value)*(((((-1.0)*x14589))+(((-1.0)*x14595))+(((-1.0)*x14593))+x14590))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14598=IKsin(j4);
IkReal x14599=IKcos(j4);
IkReal x14600=((1.0)*gconst17);
IkReal x14601=(gconst17*sj3);
IkReal x14602=(gconst16*r21);
IkReal x14603=(cj3*gconst17);
IkReal x14604=(sj1*sj2);
IkReal x14605=((1.0)*sj0);
IkReal x14606=(gconst16*sj3);
IkReal x14607=(cj3*gconst16);
IkReal x14608=(cj2*sj1);
IkReal x14609=((1.0)*cj0);
IkReal x14610=((1.0)*sj3);
IkReal x14611=(cj1*sj2);
IkReal x14612=(cj3*x14599);
IkReal x14613=(gconst16*x14598);
IkReal x14614=((1.0)*x14599);
IkReal x14615=((1.0)*cj1*cj2);
IkReal x14616=(r02*x14598);
IkReal x14617=(r12*x14598);
evalcond[0]=((((-1.0)*r20*x14598*x14600))+((x14598*x14602)));
evalcond[1]=(cj0+(((-1.0)*r10*x14598*x14600))+(((-1.0)*r12*x14614))+((r11*x14613)));
evalcond[2]=(((r01*x14613))+(((-1.0)*r02*x14614))+(((-1.0)*r00*x14598*x14600))+(((-1.0)*x14605)));
evalcond[3]=(((r21*x14601))+((x14602*x14612))+x14611+x14608+(((-1.0)*r20*x14600*x14612))+((r20*x14606)));
evalcond[4]=(((r21*x14603))+(((-1.0)*x14599*x14602*x14610))+x14604+((r20*x14599*x14601))+((r20*x14607))+(((-1.0)*x14615)));
evalcond[5]=(((cj0*x14604))+(((-1.0)*r00*x14600*x14612))+((r01*x14601))+(((-1.0)*cj1*cj2*x14609))+((r00*x14606))+((cj3*x14616))+((r01*x14599*x14607)));
evalcond[6]=(((sj0*x14604))+((r10*x14606))+(((-1.0)*r10*x14600*x14612))+((r11*x14599*x14607))+(((-1.0)*cj1*cj2*x14605))+((cj3*x14617))+((r11*x14601)));
evalcond[7]=((((-1.0)*x14608*x14609))+((r01*x14603))+((r00*x14607))+(((-1.0)*x14609*x14611))+((r00*x14599*x14601))+(((-1.0)*x14610*x14616))+(((-1.0)*r01*x14606*x14614)));
evalcond[8]=(((r10*x14607))+(((-1.0)*x14605*x14611))+(((-1.0)*x14605*x14608))+(((-1.0)*r11*x14606*x14614))+((r11*x14603))+((r10*x14599*x14601))+(((-1.0)*x14610*x14617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14618=((1.0)*sj0);
IkReal x14619=((1.0)*cj0);
CheckValue<IkReal> x14620 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14618))+(((-1.0)*r02*x14619)))),IkReal(((((-1.0)*gconst16*r01*x14619))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14618)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14620.valid){
continue;
}
CheckValue<IkReal> x14621=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14620.value)+(((1.5707963267949)*(x14621.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14622=IKsin(j4);
IkReal x14623=IKcos(j4);
IkReal x14624=((1.0)*gconst17);
IkReal x14625=(gconst17*sj3);
IkReal x14626=(gconst16*r21);
IkReal x14627=(cj3*gconst17);
IkReal x14628=(sj1*sj2);
IkReal x14629=((1.0)*sj0);
IkReal x14630=(gconst16*sj3);
IkReal x14631=(cj3*gconst16);
IkReal x14632=(cj2*sj1);
IkReal x14633=((1.0)*cj0);
IkReal x14634=((1.0)*sj3);
IkReal x14635=(cj1*sj2);
IkReal x14636=(cj3*x14623);
IkReal x14637=(gconst16*x14622);
IkReal x14638=((1.0)*x14623);
IkReal x14639=((1.0)*cj1*cj2);
IkReal x14640=(r02*x14622);
IkReal x14641=(r12*x14622);
evalcond[0]=(((x14622*x14626))+(((-1.0)*r20*x14622*x14624)));
evalcond[1]=(cj0+((r11*x14637))+(((-1.0)*r10*x14622*x14624))+(((-1.0)*r12*x14638)));
evalcond[2]=((((-1.0)*x14629))+((r01*x14637))+(((-1.0)*r00*x14622*x14624))+(((-1.0)*r02*x14638)));
evalcond[3]=(((r21*x14625))+((r20*x14630))+((x14626*x14636))+(((-1.0)*r20*x14624*x14636))+x14632+x14635);
evalcond[4]=(((r21*x14627))+(((-1.0)*x14639))+((r20*x14631))+((r20*x14623*x14625))+x14628+(((-1.0)*x14623*x14626*x14634)));
evalcond[5]=((((-1.0)*r00*x14624*x14636))+(((-1.0)*cj1*cj2*x14633))+((r00*x14630))+((cj0*x14628))+((r01*x14625))+((cj3*x14640))+((r01*x14623*x14631)));
evalcond[6]=(((r11*x14625))+((r10*x14630))+((r11*x14623*x14631))+(((-1.0)*r10*x14624*x14636))+((cj3*x14641))+(((-1.0)*cj1*cj2*x14629))+((sj0*x14628)));
evalcond[7]=((((-1.0)*x14633*x14635))+((r00*x14623*x14625))+((r00*x14631))+(((-1.0)*r01*x14630*x14638))+(((-1.0)*x14632*x14633))+((r01*x14627))+(((-1.0)*x14634*x14640)));
evalcond[8]=((((-1.0)*x14629*x14632))+(((-1.0)*x14629*x14635))+((r11*x14627))+((r10*x14623*x14625))+((r10*x14631))+(((-1.0)*r11*x14630*x14638))+(((-1.0)*x14634*x14641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14642=((1.0)*sj0);
IkReal x14643=((1.0)*cj0);
CheckValue<IkReal> x14644=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14644.valid){
continue;
}
CheckValue<IkReal> x14645 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14642))+(((-1.0)*r02*x14643)))),IkReal((((cj0*gconst17*r00))+(((-1.0)*gconst16*r11*x14642))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r01*x14643)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14644.value)))+(x14645.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14646=IKsin(j4);
IkReal x14647=IKcos(j4);
IkReal x14648=(cj3*gconst17);
IkReal x14649=(gconst16*r21);
IkReal x14650=(gconst17*sj3);
IkReal x14651=(gconst16*r20);
IkReal x14652=(sj1*sj2);
IkReal x14653=(gconst16*r10);
IkReal x14654=(cj2*sj1);
IkReal x14655=(gconst16*sj3);
IkReal x14656=((1.0)*cj0);
IkReal x14657=((1.0)*sj0);
IkReal x14658=(cj1*sj2);
IkReal x14659=((1.0)*x14647);
IkReal x14660=(gconst16*x14646);
IkReal x14661=(cj3*x14647);
IkReal x14662=(cj3*x14646);
IkReal x14663=((1.0)*cj1*cj2);
IkReal x14664=((1.0)*gconst17*x14646);
IkReal x14665=((1.0)*sj3*x14646);
evalcond[0]=((((-1.0)*r22*x14659))+((x14646*x14649))+(((-1.0)*r20*x14664)));
evalcond[1]=(cj0+(((-1.0)*r12*x14659))+(((-1.0)*r10*x14664))+((r11*x14660)));
evalcond[2]=(((r01*x14660))+(((-1.0)*r02*x14659))+(((-1.0)*r00*x14664))+(((-1.0)*x14657)));
evalcond[3]=(((sj3*x14651))+((r22*x14662))+x14654+x14658+((r21*x14650))+(((-1.0)*r20*x14648*x14659))+((x14649*x14661)));
evalcond[4]=((((-1.0)*r22*x14665))+(((-1.0)*sj3*x14649*x14659))+((r21*x14648))+x14652+((r20*x14647*x14650))+((cj3*x14651))+(((-1.0)*x14663)));
evalcond[5]=(((r02*x14662))+((gconst16*r01*x14661))+((cj0*x14652))+((r00*x14655))+((r01*x14650))+(((-1.0)*cj1*cj2*x14656))+(((-1.0)*r00*x14648*x14659)));
evalcond[6]=(((gconst16*r11*x14661))+((sj0*x14652))+((sj3*x14653))+(((-1.0)*cj1*cj2*x14657))+(((-1.0)*r10*x14648*x14659))+((r12*x14662))+((r11*x14650)));
evalcond[7]=((((-1.0)*r01*x14655*x14659))+(((-1.0)*x14656*x14658))+(((-1.0)*x14654*x14656))+((r01*x14648))+((r00*x14647*x14650))+(((-1.0)*r02*x14665))+((cj3*gconst16*r00)));
evalcond[8]=(((r11*x14648))+(((-1.0)*x14654*x14657))+(((-1.0)*r12*x14665))+((r10*x14647*x14650))+(((-1.0)*r11*x14655*x14659))+(((-1.0)*x14657*x14658))+((cj3*x14653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14666=((1.0)*gconst17);
CheckValue<IkReal> x14667=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14666)))),-1);
if(!x14667.valid){
continue;
}
CheckValue<IkReal> x14668 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14667.value)))+(x14668.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14669=IKsin(j4);
IkReal x14670=IKcos(j4);
IkReal x14671=(cj3*gconst17);
IkReal x14672=(gconst16*r21);
IkReal x14673=(gconst17*sj3);
IkReal x14674=(gconst16*r20);
IkReal x14675=(sj1*sj2);
IkReal x14676=(gconst16*r10);
IkReal x14677=(cj2*sj1);
IkReal x14678=(gconst16*sj3);
IkReal x14679=((1.0)*cj0);
IkReal x14680=((1.0)*sj0);
IkReal x14681=(cj1*sj2);
IkReal x14682=((1.0)*x14670);
IkReal x14683=(gconst16*x14669);
IkReal x14684=(cj3*x14670);
IkReal x14685=(cj3*x14669);
IkReal x14686=((1.0)*cj1*cj2);
IkReal x14687=((1.0)*gconst17*x14669);
IkReal x14688=((1.0)*sj3*x14669);
evalcond[0]=((((-1.0)*r20*x14687))+((x14669*x14672))+(((-1.0)*r22*x14682)));
evalcond[1]=(cj0+((r11*x14683))+(((-1.0)*r12*x14682))+(((-1.0)*r10*x14687)));
evalcond[2]=((((-1.0)*r00*x14687))+((r01*x14683))+(((-1.0)*r02*x14682))+(((-1.0)*x14680)));
evalcond[3]=(((r21*x14673))+x14681+x14677+(((-1.0)*r20*x14671*x14682))+((x14672*x14684))+((sj3*x14674))+((r22*x14685)));
evalcond[4]=(((r21*x14671))+(((-1.0)*sj3*x14672*x14682))+(((-1.0)*x14686))+(((-1.0)*r22*x14688))+((r20*x14670*x14673))+x14675+((cj3*x14674)));
evalcond[5]=(((cj0*x14675))+((r00*x14678))+((r01*x14673))+(((-1.0)*cj1*cj2*x14679))+((r02*x14685))+((gconst16*r01*x14684))+(((-1.0)*r00*x14671*x14682)));
evalcond[6]=(((sj0*x14675))+(((-1.0)*cj1*cj2*x14680))+((r12*x14685))+((gconst16*r11*x14684))+((r11*x14673))+((sj3*x14676))+(((-1.0)*r10*x14671*x14682)));
evalcond[7]=((((-1.0)*r01*x14678*x14682))+(((-1.0)*r02*x14688))+((r01*x14671))+((r00*x14670*x14673))+((cj3*gconst16*r00))+(((-1.0)*x14677*x14679))+(((-1.0)*x14679*x14681)));
evalcond[8]=((((-1.0)*x14677*x14680))+(((-1.0)*x14680*x14681))+((cj3*x14676))+((r11*x14671))+((r10*x14670*x14673))+(((-1.0)*r12*x14688))+(((-1.0)*r11*x14678*x14682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14689=((1.0)*gconst17);
CheckValue<IkReal> x14690=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14689)))),-1);
if(!x14690.valid){
continue;
}
CheckValue<IkReal> x14691 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14689))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14690.value)))+(x14691.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14692=IKsin(j4);
IkReal x14693=IKcos(j4);
IkReal x14694=(cj3*gconst17);
IkReal x14695=(gconst16*r21);
IkReal x14696=(gconst17*sj3);
IkReal x14697=(gconst16*r20);
IkReal x14698=(sj1*sj2);
IkReal x14699=(gconst16*r10);
IkReal x14700=(cj2*sj1);
IkReal x14701=(gconst16*sj3);
IkReal x14702=((1.0)*cj0);
IkReal x14703=((1.0)*sj0);
IkReal x14704=(cj1*sj2);
IkReal x14705=((1.0)*x14693);
IkReal x14706=(gconst16*x14692);
IkReal x14707=(cj3*x14693);
IkReal x14708=(cj3*x14692);
IkReal x14709=((1.0)*cj1*cj2);
IkReal x14710=((1.0)*gconst17*x14692);
IkReal x14711=((1.0)*sj3*x14692);
evalcond[0]=((((-1.0)*r20*x14710))+(((-1.0)*r22*x14705))+((x14692*x14695)));
evalcond[1]=(cj0+(((-1.0)*r12*x14705))+((r11*x14706))+(((-1.0)*r10*x14710)));
evalcond[2]=((((-1.0)*x14703))+((r01*x14706))+(((-1.0)*r00*x14710))+(((-1.0)*r02*x14705)));
evalcond[3]=(((sj3*x14697))+(((-1.0)*r20*x14694*x14705))+x14704+x14700+((x14695*x14707))+((r22*x14708))+((r21*x14696)));
evalcond[4]=(((r20*x14693*x14696))+(((-1.0)*x14709))+((cj3*x14697))+(((-1.0)*r22*x14711))+(((-1.0)*sj3*x14695*x14705))+x14698+((r21*x14694)));
evalcond[5]=(((cj0*x14698))+((r00*x14701))+((gconst16*r01*x14707))+((r01*x14696))+(((-1.0)*r00*x14694*x14705))+(((-1.0)*cj1*cj2*x14702))+((r02*x14708)));
evalcond[6]=(((gconst16*r11*x14707))+((sj3*x14699))+((r11*x14696))+(((-1.0)*cj1*cj2*x14703))+((r12*x14708))+(((-1.0)*r10*x14694*x14705))+((sj0*x14698)));
evalcond[7]=(((r01*x14694))+(((-1.0)*r02*x14711))+((r00*x14693*x14696))+(((-1.0)*x14700*x14702))+(((-1.0)*x14702*x14704))+(((-1.0)*r01*x14701*x14705))+((cj3*gconst16*r00)));
evalcond[8]=(((cj3*x14699))+((r10*x14693*x14696))+((r11*x14694))+(((-1.0)*x14700*x14703))+(((-1.0)*x14703*x14704))+(((-1.0)*r11*x14701*x14705))+(((-1.0)*r12*x14711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14712=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14712;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14712);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14713=((1.0)*cj5);
IkReal x14714=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14713)));
j4eval[0]=x14714;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14713))))));
j4eval[2]=IKsign(x14714);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14715=cj5*cj5;
IkReal x14716=(cj3*r01);
IkReal x14717=(cj5*sj5);
IkReal x14718=((1.0)*cj3);
IkReal x14719=(((cj3*r00*r21*x14717))+(((-1.0)*r00*r20*x14715*x14718))+((r21*x14715*x14716))+((r20*x14716*x14717))+(((-1.0)*r21*x14716))+(((-1.0)*r02*r22*x14718)));
j4eval[0]=x14719;
j4eval[1]=IKsign(x14719);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14720=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14720;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14720);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14721=((1.0)*cj5);
IkReal x14722=((((-1.0)*r11*x14721))+(((-1.0)*r10*sj5)));
j4eval[0]=x14722;
j4eval[1]=((IKabs(((((-1.0)*r20*x14721))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14722);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14723=cj5*cj5;
IkReal x14724=r01*r01;
IkReal x14725=(r01*sj5);
IkReal x14726=(cj5*r00);
IkReal x14727=((((-1.0)*x14724))+(((2.0)*x14725*x14726))+((x14723*x14724))+(((-1.0)*(r02*r02)))+(((-1.0)*x14723*(r00*r00))));
j4eval[0]=x14727;
j4eval[1]=IKsign(x14727);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14725))+x14726))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14728=cj5*cj5;
IkReal x14729=r01*r01;
IkReal x14730=(r01*sj5);
IkReal x14731=(cj5*r00);
CheckValue<IkReal> x14732 = IKatan2WithCheck(IkReal(((((-1.0)*x14730))+x14731)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14732.valid){
continue;
}
CheckValue<IkReal> x14733=IKPowWithIntegerCheck(IKsign(((((2.0)*x14730*x14731))+(((-1.0)*x14729))+((x14728*x14729))+(((-1.0)*(r02*r02)))+(((-1.0)*x14728*(r00*r00))))),-1);
if(!x14733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14732.value)+(((1.5707963267949)*(x14733.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14734=IKsin(j4);
IkReal x14735=IKcos(j4);
IkReal x14736=(cj5*r10);
IkReal x14737=(r01*sj5);
IkReal x14738=((1.0)*cj2);
IkReal x14739=(cj5*r00);
IkReal x14740=(cj5*r20);
IkReal x14741=((1.0)*x14735);
IkReal x14742=((1.0)*x14734);
IkReal x14743=(sj5*x14734);
evalcond[0]=(((r21*x14743))+(((-1.0)*r22*x14741))+(((-1.0)*x14740*x14742)));
evalcond[1]=((((-1.0)*x14736*x14742))+((r11*x14743))+(((-1.0)*r12*x14741)));
evalcond[2]=((((-1.0)*r02*x14742))+((x14735*x14739))+(((-1.0)*x14737*x14741)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14741))+((x14734*x14737))+(((-1.0)*x14739*x14742)));
evalcond[4]=(((x14735*x14740))+((sj1*sj2))+(((-1.0)*r22*x14742))+(((-1.0)*cj1*x14738))+(((-1.0)*r21*sj5*x14741)));
evalcond[5]=((((-1.0)*sj1*x14738))+(((-1.0)*r11*sj5*x14741))+((x14735*x14736))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x14742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14744=((1.0)*cj5);
CheckValue<IkReal> x14745=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14744)))),-1);
if(!x14745.valid){
continue;
}
CheckValue<IkReal> x14746 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14744)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14745.value)))+(x14746.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14747=IKsin(j4);
IkReal x14748=IKcos(j4);
IkReal x14749=(cj5*r10);
IkReal x14750=(r01*sj5);
IkReal x14751=((1.0)*cj2);
IkReal x14752=(cj5*r00);
IkReal x14753=(cj5*r20);
IkReal x14754=((1.0)*x14748);
IkReal x14755=((1.0)*x14747);
IkReal x14756=(sj5*x14747);
evalcond[0]=((((-1.0)*x14753*x14755))+((r21*x14756))+(((-1.0)*r22*x14754)));
evalcond[1]=((((-1.0)*r12*x14754))+(((-1.0)*x14749*x14755))+((r11*x14756)));
evalcond[2]=(((x14748*x14752))+(((-1.0)*r02*x14755))+(((-1.0)*x14750*x14754)));
evalcond[3]=((-1.0)+((x14747*x14750))+(((-1.0)*r02*x14754))+(((-1.0)*x14752*x14755)));
evalcond[4]=((((-1.0)*r21*sj5*x14754))+(((-1.0)*cj1*x14751))+((sj1*sj2))+((x14748*x14753))+(((-1.0)*r22*x14755)));
evalcond[5]=((((-1.0)*r11*sj5*x14754))+((x14748*x14749))+(((-1.0)*r12*x14755))+(((-1.0)*sj1*x14751))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14757=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14757.valid){
continue;
}
CheckValue<IkReal> x14758 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14757.value)))+(x14758.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14759=IKsin(j4);
IkReal x14760=IKcos(j4);
IkReal x14761=(cj5*r10);
IkReal x14762=(r01*sj5);
IkReal x14763=((1.0)*cj2);
IkReal x14764=(cj5*r00);
IkReal x14765=(cj5*r20);
IkReal x14766=((1.0)*x14760);
IkReal x14767=((1.0)*x14759);
IkReal x14768=(sj5*x14759);
evalcond[0]=((((-1.0)*r22*x14766))+((r21*x14768))+(((-1.0)*x14765*x14767)));
evalcond[1]=((((-1.0)*r12*x14766))+((r11*x14768))+(((-1.0)*x14761*x14767)));
evalcond[2]=((((-1.0)*r02*x14767))+((x14760*x14764))+(((-1.0)*x14762*x14766)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14766))+(((-1.0)*x14764*x14767))+((x14759*x14762)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r21*sj5*x14766))+((x14760*x14765))+(((-1.0)*r22*x14767))+(((-1.0)*cj1*x14763)));
evalcond[5]=((((-1.0)*sj1*x14763))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x14767))+((x14760*x14761))+(((-1.0)*r11*sj5*x14766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14769=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14769;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14769);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14770=((1.0)*cj5);
IkReal x14771=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14770)));
j4eval[0]=x14771;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14770))))));
j4eval[2]=IKsign(x14771);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14772=cj5*cj5;
IkReal x14773=r01*r01;
IkReal x14774=(cj5*r00);
IkReal x14775=(r01*sj5);
IkReal x14776=((((-2.0)*x14774*x14775))+((x14772*(r00*r00)))+x14773+(((-1.0)*x14772*x14773))+(r02*r02));
j4eval[0]=x14776;
j4eval[1]=IKsign(x14776);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14774))+x14775))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14777=cj5*cj5;
IkReal x14778=r01*r01;
IkReal x14779=(r01*sj5);
IkReal x14780=(cj5*r00);
CheckValue<IkReal> x14781 = IKatan2WithCheck(IkReal(((((-1.0)*x14780))+x14779)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14781.valid){
continue;
}
CheckValue<IkReal> x14782=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14779*x14780))+((x14777*(r00*r00)))+(((-1.0)*x14777*x14778))+x14778+(r02*r02))),-1);
if(!x14782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14781.value)+(((1.5707963267949)*(x14782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14783=IKcos(j4);
IkReal x14784=IKsin(j4);
IkReal x14785=(cj5*r00);
IkReal x14786=(cj5*r10);
IkReal x14787=(r21*sj5);
IkReal x14788=((1.0)*cj2);
IkReal x14789=(cj5*r20);
IkReal x14790=((1.0)*x14783);
IkReal x14791=((1.0)*x14784);
IkReal x14792=(sj5*x14784);
IkReal x14793=(sj5*x14783);
evalcond[0]=(((r01*x14793))+((r02*x14784))+(((-1.0)*x14785*x14790)));
evalcond[1]=((((-1.0)*x14789*x14791))+((x14784*x14787))+(((-1.0)*r22*x14790)));
evalcond[2]=((((-1.0)*r12*x14790))+((r11*x14792))+(((-1.0)*x14786*x14791)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14790))+((r01*x14792))+(((-1.0)*x14785*x14791)));
evalcond[4]=((((-1.0)*x14789*x14790))+((x14783*x14787))+((sj1*sj2))+(((-1.0)*cj1*x14788))+((r22*x14784)));
evalcond[5]=((((-1.0)*sj1*x14788))+(((-1.0)*cj1*sj2))+((r11*x14793))+((r12*x14784))+(((-1.0)*x14786*x14790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14794=((1.0)*cj5);
CheckValue<IkReal> x14795 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14795.valid){
continue;
}
CheckValue<IkReal> x14796=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14794)))),-1);
if(!x14796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14795.value)+(((1.5707963267949)*(x14796.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14797=IKcos(j4);
IkReal x14798=IKsin(j4);
IkReal x14799=(cj5*r00);
IkReal x14800=(cj5*r10);
IkReal x14801=(r21*sj5);
IkReal x14802=((1.0)*cj2);
IkReal x14803=(cj5*r20);
IkReal x14804=((1.0)*x14797);
IkReal x14805=((1.0)*x14798);
IkReal x14806=(sj5*x14798);
IkReal x14807=(sj5*x14797);
evalcond[0]=((((-1.0)*x14799*x14804))+((r01*x14807))+((r02*x14798)));
evalcond[1]=((((-1.0)*r22*x14804))+(((-1.0)*x14803*x14805))+((x14798*x14801)));
evalcond[2]=((((-1.0)*x14800*x14805))+(((-1.0)*r12*x14804))+((r11*x14806)));
evalcond[3]=((-1.0)+(((-1.0)*x14799*x14805))+((r01*x14806))+(((-1.0)*r02*x14804)));
evalcond[4]=((((-1.0)*x14803*x14804))+((sj1*sj2))+((x14797*x14801))+((r22*x14798))+(((-1.0)*cj1*x14802)));
evalcond[5]=((((-1.0)*x14800*x14804))+(((-1.0)*cj1*sj2))+((r12*x14798))+((r11*x14807))+(((-1.0)*sj1*x14802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14808=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14808.valid){
continue;
}
CheckValue<IkReal> x14809 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14808.value)))+(x14809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14810=IKcos(j4);
IkReal x14811=IKsin(j4);
IkReal x14812=(cj5*r00);
IkReal x14813=(cj5*r10);
IkReal x14814=(r21*sj5);
IkReal x14815=((1.0)*cj2);
IkReal x14816=(cj5*r20);
IkReal x14817=((1.0)*x14810);
IkReal x14818=((1.0)*x14811);
IkReal x14819=(sj5*x14811);
IkReal x14820=(sj5*x14810);
evalcond[0]=(((r01*x14820))+(((-1.0)*x14812*x14817))+((r02*x14811)));
evalcond[1]=((((-1.0)*r22*x14817))+((x14811*x14814))+(((-1.0)*x14816*x14818)));
evalcond[2]=((((-1.0)*x14813*x14818))+(((-1.0)*r12*x14817))+((r11*x14819)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14817))+((r01*x14819))+(((-1.0)*x14812*x14818)));
evalcond[4]=(((r22*x14811))+((sj1*sj2))+(((-1.0)*x14816*x14817))+((x14810*x14814))+(((-1.0)*cj1*x14815)));
evalcond[5]=((((-1.0)*x14813*x14817))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14815))+((r11*x14820))+((r12*x14811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14822 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14822)==0){
continue;
}
IkReal x14821=pow(x14822,-0.5);
CheckValue<IkReal> x14823 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14823.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14823.value));
IkReal gconst49=((-1.0)*r21*x14821);
IkReal gconst50=(r20*x14821);
CheckValue<IkReal> x14824 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14824.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14824.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14827 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14827.valid){
continue;
}
IkReal x14825=((-1.0)*(x14827.value));
IkReal x14826=x14821;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14825;
IkReal gconst48=x14825;
IkReal gconst49=((-1.0)*r21*x14826);
IkReal gconst50=(r20*x14826);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14830 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14830.valid){
continue;
}
IkReal x14828=((-1.0)*(x14830.value));
IkReal x14829=x14821;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14828;
IkReal gconst48=x14828;
IkReal gconst49=((-1.0)*r21*x14829);
IkReal gconst50=(r20*x14829);
CheckValue<IkReal> x14838=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14838.valid){
continue;
}
IkReal x14831=x14838.value;
IkReal x14832=(sj3*x14831);
IkReal x14833=(r11*x14832);
IkReal x14834=(r00*x14832);
IkReal x14835=(r01*x14832);
IkReal x14836=(r10*x14832);
IkReal x14837=(r20*r21*x14832);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x14834*(r20*r20)))+((r00*r20*r21*x14833))+((r10*r20*r21*x14835))+((r01*x14833*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14839=gconst49*gconst49;
IkReal x14840=gconst50*gconst50;
IkReal x14841=((1.0)*cj3);
IkReal x14842=(gconst50*r01);
IkReal x14843=(gconst49*r10);
IkReal x14844=(r12*sj3);
IkReal x14845=(gconst49*r00);
IkReal x14846=(r00*sj3);
IkReal x14847=(r11*x14839);
IkReal x14848=(r10*x14840);
CheckValue<IkReal> x14849 = IKatan2WithCheck(IkReal((((x14844*x14845))+((x14842*x14844)))),IkReal(((((-1.0)*gconst50*x14843*x14846))+((x14846*x14847))+(((-1.0)*r01*sj3*x14848))+((gconst49*r11*sj3*x14842)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14849.valid){
continue;
}
CheckValue<IkReal> x14850=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x14841*x14848))+((cj3*x14842*x14843))+(((-1.0)*r01*x14841*x14847))+((cj3*gconst50*r11*x14845))+(((-1.0)*r02*r12*x14841)))),-1);
if(!x14850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14849.value)+(((1.5707963267949)*(x14850.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14851=IKsin(j4);
IkReal x14852=IKcos(j4);
IkReal x14853=(sj1*sj2);
IkReal x14854=(gconst50*r20);
IkReal x14855=(gconst50*sj3);
IkReal x14856=(cj3*r01);
IkReal x14857=(gconst50*r10);
IkReal x14858=(gconst49*sj3);
IkReal x14859=((1.0)*cj2);
IkReal x14860=(cj1*sj2);
IkReal x14861=(cj3*r11);
IkReal x14862=(gconst50*r00);
IkReal x14863=(cj3*r21);
IkReal x14864=(cj3*gconst49);
IkReal x14865=(cj1*x14859);
IkReal x14866=((1.0)*x14852);
IkReal x14867=((1.0)*x14851);
IkReal x14868=(gconst49*x14851);
IkReal x14869=(gconst49*x14852);
IkReal x14870=(cj3*x14851);
evalcond[0]=(((r21*x14868))+(((-1.0)*x14854*x14867))+(((-1.0)*r22*x14866)));
evalcond[1]=((((-1.0)*x14857*x14867))+((r11*x14868))+(((-1.0)*r12*x14866)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14866))+(((-1.0)*x14862*x14867))+((r01*x14868)));
evalcond[3]=(((x14856*x14869))+(((-1.0)*cj3*x14862*x14866))+((r00*x14858))+((r01*x14855))+((r02*x14870)));
evalcond[4]=((((-1.0)*r02*sj3*x14867))+((gconst50*x14856))+((r00*x14864))+((r00*x14852*x14855))+(((-1.0)*r01*x14858*x14866)));
evalcond[5]=(((r21*x14855))+((cj2*sj1))+((r20*x14858))+(((-1.0)*cj3*x14854*x14866))+((r22*x14870))+x14860+((x14863*x14869)));
evalcond[6]=(((r12*x14870))+x14853+(((-1.0)*cj3*x14857*x14866))+((r11*x14855))+((r10*x14858))+(((-1.0)*x14865))+((x14861*x14869)));
evalcond[7]=(((r20*x14864))+x14853+((sj3*x14852*x14854))+(((-1.0)*r21*x14858*x14866))+((gconst50*x14863))+(((-1.0)*x14865))+(((-1.0)*r22*sj3*x14867)));
evalcond[8]=((((-1.0)*sj1*x14859))+(((-1.0)*r11*x14858*x14866))+((gconst50*x14861))+((r10*x14864))+(((-1.0)*r12*sj3*x14867))+((r10*x14852*x14855))+(((-1.0)*x14860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14871=gconst49*gconst49;
IkReal x14872=gconst50*gconst50;
IkReal x14873=(cj3*r12);
IkReal x14874=(gconst49*r00);
IkReal x14875=(r01*r11);
IkReal x14876=(r00*r11);
IkReal x14877=(cj3*gconst50);
IkReal x14878=((1.0)*r01*r10);
IkReal x14879=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14880 = IKatan2WithCheck(IkReal((((x14873*x14874))+((gconst50*r01*x14873)))),IkReal((((cj3*x14871*x14876))+(((-1.0)*cj3*x14872*x14878))+(((-1.0)*r10*x14874*x14877))+((gconst49*x14875*x14877)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14880.valid){
continue;
}
CheckValue<IkReal> x14881=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x14878*x14879))+(((-1.0)*gconst50*r11*sj3*x14874))+((sj3*x14871*x14875))+((r00*r10*sj3*x14872)))),-1);
if(!x14881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14880.value)+(((1.5707963267949)*(x14881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14882=IKsin(j4);
IkReal x14883=IKcos(j4);
IkReal x14884=(sj1*sj2);
IkReal x14885=(gconst50*r20);
IkReal x14886=(gconst50*sj3);
IkReal x14887=(cj3*r01);
IkReal x14888=(gconst50*r10);
IkReal x14889=(gconst49*sj3);
IkReal x14890=((1.0)*cj2);
IkReal x14891=(cj1*sj2);
IkReal x14892=(cj3*r11);
IkReal x14893=(gconst50*r00);
IkReal x14894=(cj3*r21);
IkReal x14895=(cj3*gconst49);
IkReal x14896=(cj1*x14890);
IkReal x14897=((1.0)*x14883);
IkReal x14898=((1.0)*x14882);
IkReal x14899=(gconst49*x14882);
IkReal x14900=(gconst49*x14883);
IkReal x14901=(cj3*x14882);
evalcond[0]=((((-1.0)*r22*x14897))+(((-1.0)*x14885*x14898))+((r21*x14899)));
evalcond[1]=(((r11*x14899))+(((-1.0)*r12*x14897))+(((-1.0)*x14888*x14898)));
evalcond[2]=((-1.0)+(((-1.0)*x14893*x14898))+((r01*x14899))+(((-1.0)*r02*x14897)));
evalcond[3]=(((x14887*x14900))+(((-1.0)*cj3*x14893*x14897))+((r02*x14901))+((r00*x14889))+((r01*x14886)));
evalcond[4]=(((r00*x14895))+((gconst50*x14887))+(((-1.0)*r01*x14889*x14897))+((r00*x14883*x14886))+(((-1.0)*r02*sj3*x14898)));
evalcond[5]=(((r22*x14901))+((cj2*sj1))+((x14894*x14900))+x14891+((r21*x14886))+((r20*x14889))+(((-1.0)*cj3*x14885*x14897)));
evalcond[6]=(((r11*x14886))+((r10*x14889))+(((-1.0)*cj3*x14888*x14897))+x14884+((r12*x14901))+((x14892*x14900))+(((-1.0)*x14896)));
evalcond[7]=(x14884+(((-1.0)*r21*x14889*x14897))+((gconst50*x14894))+((sj3*x14883*x14885))+(((-1.0)*x14896))+((r20*x14895))+(((-1.0)*r22*sj3*x14898)));
evalcond[8]=((((-1.0)*sj1*x14890))+((r10*x14895))+(((-1.0)*r12*sj3*x14898))+((gconst50*x14892))+((r10*x14883*x14886))+(((-1.0)*r11*x14889*x14897))+(((-1.0)*x14891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14902=((1.0)*gconst50);
CheckValue<IkReal> x14903=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14902))+(((-1.0)*gconst49*r10)))),-1);
if(!x14903.valid){
continue;
}
CheckValue<IkReal> x14904 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14903.value)))+(x14904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14905=IKsin(j4);
IkReal x14906=IKcos(j4);
IkReal x14907=(sj1*sj2);
IkReal x14908=(gconst50*r20);
IkReal x14909=(gconst50*sj3);
IkReal x14910=(cj3*r01);
IkReal x14911=(gconst50*r10);
IkReal x14912=(gconst49*sj3);
IkReal x14913=((1.0)*cj2);
IkReal x14914=(cj1*sj2);
IkReal x14915=(cj3*r11);
IkReal x14916=(gconst50*r00);
IkReal x14917=(cj3*r21);
IkReal x14918=(cj3*gconst49);
IkReal x14919=(cj1*x14913);
IkReal x14920=((1.0)*x14906);
IkReal x14921=((1.0)*x14905);
IkReal x14922=(gconst49*x14905);
IkReal x14923=(gconst49*x14906);
IkReal x14924=(cj3*x14905);
evalcond[0]=((((-1.0)*x14908*x14921))+((r21*x14922))+(((-1.0)*r22*x14920)));
evalcond[1]=((((-1.0)*x14911*x14921))+(((-1.0)*r12*x14920))+((r11*x14922)));
evalcond[2]=((-1.0)+((r01*x14922))+(((-1.0)*r02*x14920))+(((-1.0)*x14916*x14921)));
evalcond[3]=(((r00*x14912))+((r01*x14909))+(((-1.0)*cj3*x14916*x14920))+((x14910*x14923))+((r02*x14924)));
evalcond[4]=(((r00*x14918))+(((-1.0)*r02*sj3*x14921))+((r00*x14906*x14909))+(((-1.0)*r01*x14912*x14920))+((gconst50*x14910)));
evalcond[5]=(((cj2*sj1))+((r21*x14909))+(((-1.0)*cj3*x14908*x14920))+x14914+((r20*x14912))+((r22*x14924))+((x14917*x14923)));
evalcond[6]=(((r10*x14912))+((x14915*x14923))+(((-1.0)*x14919))+((r11*x14909))+x14907+(((-1.0)*cj3*x14911*x14920))+((r12*x14924)));
evalcond[7]=((((-1.0)*x14919))+x14907+(((-1.0)*r21*x14912*x14920))+(((-1.0)*r22*sj3*x14921))+((r20*x14918))+((gconst50*x14917))+((sj3*x14906*x14908)));
evalcond[8]=(((r10*x14918))+((r10*x14906*x14909))+(((-1.0)*r12*sj3*x14921))+(((-1.0)*x14914))+((gconst50*x14915))+(((-1.0)*r11*x14912*x14920))+(((-1.0)*sj1*x14913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14926 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14926)==0){
continue;
}
IkReal x14925=pow(x14926,-0.5);
CheckValue<IkReal> x14927 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14927.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14927.value))));
IkReal gconst52=((1.0)*r21*x14925);
IkReal gconst53=((-1.0)*r20*x14925);
CheckValue<IkReal> x14928 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14928.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14928.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14931 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14931.valid){
continue;
}
IkReal x14929=((1.0)*(x14931.value));
IkReal x14930=x14925;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14929)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14929)));
IkReal gconst52=((1.0)*r21*x14930);
IkReal gconst53=((-1.0)*r20*x14930);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14934 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14934.valid){
continue;
}
IkReal x14932=((1.0)*(x14934.value));
IkReal x14933=x14925;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14932)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14932)));
IkReal gconst52=((1.0)*r21*x14933);
IkReal gconst53=((-1.0)*r20*x14933);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14937 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14937.valid){
continue;
}
IkReal x14935=((1.0)*(x14937.value));
IkReal x14936=x14925;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14935)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14935)));
IkReal gconst52=((1.0)*r21*x14936);
IkReal gconst53=((-1.0)*r20*x14936);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14938=gconst52*gconst52;
IkReal x14939=gconst53*gconst53;
IkReal x14940=(gconst53*r01);
IkReal x14941=(cj3*r20);
IkReal x14942=(r22*sj3);
IkReal x14943=((1.0)*cj3);
IkReal x14944=(gconst52*sj3);
IkReal x14945=((1.0)*r00);
IkReal x14946=(gconst52*r00);
IkReal x14947=(r21*x14938);
CheckValue<IkReal> x14948 = IKatan2WithCheck(IkReal((((x14940*x14942))+((x14942*x14946)))),IkReal((((r00*sj3*x14947))+(((-1.0)*gconst53*r20*x14944*x14945))+(((-1.0)*r01*r20*sj3*x14939))+((r21*x14940*x14944)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14948.valid){
continue;
}
CheckValue<IkReal> x14949=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x14943))+(((-1.0)*r01*x14943*x14947))+((gconst52*x14940*x14941))+(((-1.0)*x14939*x14941*x14945))+((cj3*gconst53*r21*x14946)))),-1);
if(!x14949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14948.value)+(((1.5707963267949)*(x14949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14950=IKsin(j4);
IkReal x14951=IKcos(j4);
IkReal x14952=(sj1*sj2);
IkReal x14953=((1.0)*cj1);
IkReal x14954=(cj3*gconst52);
IkReal x14955=(gconst53*sj3);
IkReal x14956=(cj3*gconst53);
IkReal x14957=(cj2*sj1);
IkReal x14958=(gconst52*sj3);
IkReal x14959=(cj2*x14953);
IkReal x14960=((1.0)*x14951);
IkReal x14961=((1.0)*x14950);
IkReal x14962=(gconst52*x14950);
IkReal x14963=(cj3*x14950);
evalcond[0]=((((-1.0)*r22*x14960))+((r21*x14962))+(((-1.0)*gconst53*r20*x14961)));
evalcond[1]=((((-1.0)*r12*x14960))+((r11*x14962))+(((-1.0)*gconst53*r10*x14961)));
evalcond[2]=((-1.0)+((r01*x14962))+(((-1.0)*r02*x14960))+(((-1.0)*gconst53*r00*x14961)));
evalcond[3]=(((r01*x14955))+((r01*x14951*x14954))+((r00*x14958))+(((-1.0)*r00*x14956*x14960))+((r02*x14963)));
evalcond[4]=(((r01*x14956))+(((-1.0)*r02*sj3*x14961))+(((-1.0)*r01*x14958*x14960))+((r00*x14954))+((r00*x14951*x14955)));
evalcond[5]=(((r22*x14963))+x14957+((cj1*sj2))+((r21*x14951*x14954))+(((-1.0)*r20*x14956*x14960))+((r21*x14955))+((r20*x14958)));
evalcond[6]=((((-1.0)*r10*x14956*x14960))+x14952+((r12*x14963))+((r10*x14958))+(((-1.0)*x14959))+((r11*x14951*x14954))+((r11*x14955)));
evalcond[7]=(x14952+(((-1.0)*r22*sj3*x14961))+((r20*x14951*x14955))+(((-1.0)*x14959))+(((-1.0)*r21*x14958*x14960))+((r21*x14956))+((r20*x14954)));
evalcond[8]=((((-1.0)*sj2*x14953))+((r10*x14954))+((r10*x14951*x14955))+(((-1.0)*r11*x14958*x14960))+(((-1.0)*x14957))+(((-1.0)*r12*sj3*x14961))+((r11*x14956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14964=((1.0)*gconst53);
CheckValue<IkReal> x14965=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14964))+(((-1.0)*gconst52*r10)))),-1);
if(!x14965.valid){
continue;
}
CheckValue<IkReal> x14966 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x14964)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14965.value)))+(x14966.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14967=IKsin(j4);
IkReal x14968=IKcos(j4);
IkReal x14969=(sj1*sj2);
IkReal x14970=((1.0)*cj1);
IkReal x14971=(cj3*gconst52);
IkReal x14972=(gconst53*sj3);
IkReal x14973=(cj3*gconst53);
IkReal x14974=(cj2*sj1);
IkReal x14975=(gconst52*sj3);
IkReal x14976=(cj2*x14970);
IkReal x14977=((1.0)*x14968);
IkReal x14978=((1.0)*x14967);
IkReal x14979=(gconst52*x14967);
IkReal x14980=(cj3*x14967);
evalcond[0]=((((-1.0)*gconst53*r20*x14978))+(((-1.0)*r22*x14977))+((r21*x14979)));
evalcond[1]=((((-1.0)*r12*x14977))+((r11*x14979))+(((-1.0)*gconst53*r10*x14978)));
evalcond[2]=((-1.0)+(((-1.0)*gconst53*r00*x14978))+((r01*x14979))+(((-1.0)*r02*x14977)));
evalcond[3]=((((-1.0)*r00*x14973*x14977))+((r01*x14968*x14971))+((r02*x14980))+((r01*x14972))+((r00*x14975)));
evalcond[4]=(((r00*x14968*x14972))+(((-1.0)*r02*sj3*x14978))+(((-1.0)*r01*x14975*x14977))+((r01*x14973))+((r00*x14971)));
evalcond[5]=(x14974+((cj1*sj2))+((r22*x14980))+((r20*x14975))+((r21*x14972))+(((-1.0)*r20*x14973*x14977))+((r21*x14968*x14971)));
evalcond[6]=((((-1.0)*r10*x14973*x14977))+x14969+((r11*x14968*x14971))+(((-1.0)*x14976))+((r11*x14972))+((r12*x14980))+((r10*x14975)));
evalcond[7]=((((-1.0)*r22*sj3*x14978))+((r20*x14968*x14972))+x14969+(((-1.0)*x14976))+(((-1.0)*r21*x14975*x14977))+((r20*x14971))+((r21*x14973)));
evalcond[8]=((((-1.0)*sj2*x14970))+(((-1.0)*x14974))+((r10*x14968*x14972))+((r11*x14973))+(((-1.0)*r11*x14975*x14977))+(((-1.0)*r12*sj3*x14978))+((r10*x14971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14981 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14981.valid){
continue;
}
CheckValue<IkReal> x14982=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14981.value)+(((1.5707963267949)*(x14982.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14983=IKsin(j4);
IkReal x14984=IKcos(j4);
IkReal x14985=(sj1*sj2);
IkReal x14986=((1.0)*cj1);
IkReal x14987=(cj3*gconst52);
IkReal x14988=(gconst53*sj3);
IkReal x14989=(cj3*gconst53);
IkReal x14990=(cj2*sj1);
IkReal x14991=(gconst52*sj3);
IkReal x14992=(cj2*x14986);
IkReal x14993=((1.0)*x14984);
IkReal x14994=((1.0)*x14983);
IkReal x14995=(gconst52*x14983);
IkReal x14996=(cj3*x14983);
evalcond[0]=(((r21*x14995))+(((-1.0)*gconst53*r20*x14994))+(((-1.0)*r22*x14993)));
evalcond[1]=((((-1.0)*r12*x14993))+(((-1.0)*gconst53*r10*x14994))+((r11*x14995)));
evalcond[2]=((-1.0)+(((-1.0)*gconst53*r00*x14994))+((r01*x14995))+(((-1.0)*r02*x14993)));
evalcond[3]=(((r02*x14996))+((r01*x14988))+((r00*x14991))+((r01*x14984*x14987))+(((-1.0)*r00*x14989*x14993)));
evalcond[4]=(((r00*x14984*x14988))+(((-1.0)*r02*sj3*x14994))+((r00*x14987))+((r01*x14989))+(((-1.0)*r01*x14991*x14993)));
evalcond[5]=(x14990+((r21*x14984*x14987))+((cj1*sj2))+((r20*x14991))+((r21*x14988))+(((-1.0)*r20*x14989*x14993))+((r22*x14996)));
evalcond[6]=((((-1.0)*x14992))+x14985+(((-1.0)*r10*x14989*x14993))+((r12*x14996))+((r10*x14991))+((r11*x14988))+((r11*x14984*x14987)));
evalcond[7]=((((-1.0)*x14992))+((r20*x14987))+((r20*x14984*x14988))+(((-1.0)*r22*sj3*x14994))+x14985+((r21*x14989))+(((-1.0)*r21*x14991*x14993)));
evalcond[8]=((((-1.0)*sj2*x14986))+((r10*x14987))+((r10*x14984*x14988))+(((-1.0)*r12*sj3*x14994))+(((-1.0)*r11*x14991*x14993))+((r11*x14989))+(((-1.0)*x14990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14997=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14997);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14997);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14998=(r01*sj5);
IkReal x14999=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x14999))+x14998);
j4eval[1]=((((-1.0)*cj3*x14999))+((cj3*x14998)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15000=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15000);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15000);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x15001=(cj5*r00);
IkReal x15002=(r01*sj5);
j4eval[0]=((((-1.0)*x15001))+x15002);
j4eval[1]=(((sj3*x15001))+(((-1.0)*sj3*x15002)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15003=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15003);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15003);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15004=((1.0)*r00);
CheckValue<IkReal> x15005=IKPowWithIntegerCheck(cj3,-1);
if(!x15005.valid){
continue;
}
CheckValue<IkReal> x15006=IKPowWithIntegerCheck(r22,-1);
if(!x15006.valid){
continue;
}
CheckValue<IkReal> x15007=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15004))),-1);
if(!x15007.valid){
continue;
}
if( IKabs(((x15005.value)*(x15006.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15007.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15004)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15005.value)*(x15006.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x15007.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15004))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15005.value)*(x15006.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x15007.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15004))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15008=IKsin(j4);
IkReal x15009=IKcos(j4);
IkReal x15010=(sj1*sj2);
IkReal x15011=(cj5*sj3);
IkReal x15012=(r11*sj5);
IkReal x15013=(cj3*cj5);
IkReal x15014=((1.0)*cj1);
IkReal x15015=(cj3*sj5);
IkReal x15016=(sj3*sj5);
IkReal x15017=(cj2*sj1);
IkReal x15018=(r01*sj5);
IkReal x15019=((1.0)*sj3);
IkReal x15020=(cj2*x15014);
IkReal x15021=(r10*x15009);
IkReal x15022=(r22*x15008);
IkReal x15023=(cj3*x15009);
IkReal x15024=((1.0)*cj5*x15008);
evalcond[0]=((-1.0)*r22*x15009);
evalcond[1]=(((cj1*sj2))+x15017+((cj3*x15022)));
evalcond[2]=((((-1.0)*r10*x15024))+((x15008*x15012)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15024))+((x15008*x15018)));
evalcond[4]=((((-1.0)*x15019*x15022))+x15010+(((-1.0)*x15020)));
evalcond[5]=((((-1.0)*r00*x15009*x15013))+((r00*x15016))+((r01*x15011))+((r01*x15009*x15015)));
evalcond[6]=((((-1.0)*r01*x15009*x15016))+((r00*x15009*x15011))+((r00*x15015))+((r01*x15013)));
evalcond[7]=(((x15012*x15023))+((r10*x15016))+x15010+(((-1.0)*x15020))+((r11*x15011))+(((-1.0)*x15013*x15021)));
evalcond[8]=((((-1.0)*x15017))+((r10*x15015))+(((-1.0)*x15009*x15012*x15019))+((r11*x15013))+((x15011*x15021))+(((-1.0)*sj2*x15014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15025=((1.0)*cj3);
IkReal x15026=(cj5*r00);
IkReal x15027=(r01*sj5);
CheckValue<IkReal> x15028=IKPowWithIntegerCheck(((((-1.0)*x15026))+x15027),-1);
if(!x15028.valid){
continue;
}
CheckValue<IkReal> x15029=IKPowWithIntegerCheck((((sj3*x15026))+(((-1.0)*sj3*x15027))),-1);
if(!x15029.valid){
continue;
}
if( IKabs(x15028.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15029.value)*(((((-1.0)*r00*sj5*x15025))+(((-1.0)*cj5*r01*x15025)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15028.value)+IKsqr(((x15029.value)*(((((-1.0)*r00*sj5*x15025))+(((-1.0)*cj5*r01*x15025))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15028.value, ((x15029.value)*(((((-1.0)*r00*sj5*x15025))+(((-1.0)*cj5*r01*x15025))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15030=IKsin(j4);
IkReal x15031=IKcos(j4);
IkReal x15032=(sj1*sj2);
IkReal x15033=(cj5*sj3);
IkReal x15034=(r11*sj5);
IkReal x15035=(cj3*cj5);
IkReal x15036=((1.0)*cj1);
IkReal x15037=(cj3*sj5);
IkReal x15038=(sj3*sj5);
IkReal x15039=(cj2*sj1);
IkReal x15040=(r01*sj5);
IkReal x15041=((1.0)*sj3);
IkReal x15042=(cj2*x15036);
IkReal x15043=(r10*x15031);
IkReal x15044=(r22*x15030);
IkReal x15045=(cj3*x15031);
IkReal x15046=((1.0)*cj5*x15030);
evalcond[0]=((-1.0)*r22*x15031);
evalcond[1]=(((cj3*x15044))+((cj1*sj2))+x15039);
evalcond[2]=((((-1.0)*r10*x15046))+((x15030*x15034)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15046))+((x15030*x15040)));
evalcond[4]=((((-1.0)*x15042))+(((-1.0)*x15041*x15044))+x15032);
evalcond[5]=(((r00*x15038))+((r01*x15033))+((r01*x15031*x15037))+(((-1.0)*r00*x15031*x15035)));
evalcond[6]=(((r00*x15037))+((r01*x15035))+((r00*x15031*x15033))+(((-1.0)*r01*x15031*x15038)));
evalcond[7]=((((-1.0)*x15042))+x15032+((r10*x15038))+((r11*x15033))+((x15034*x15045))+(((-1.0)*x15035*x15043)));
evalcond[8]=((((-1.0)*sj2*x15036))+((x15033*x15043))+(((-1.0)*x15031*x15034*x15041))+(((-1.0)*x15039))+((r10*x15037))+((r11*x15035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15047=((1.0)*sj3);
IkReal x15048=(r01*sj5);
IkReal x15049=((1.0)*cj5*r00);
CheckValue<IkReal> x15050=IKPowWithIntegerCheck(((((-1.0)*x15049))+x15048),-1);
if(!x15050.valid){
continue;
}
CheckValue<IkReal> x15051=IKPowWithIntegerCheck((((cj3*x15048))+(((-1.0)*cj3*x15049))),-1);
if(!x15051.valid){
continue;
}
if( IKabs(x15050.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15051.value)*(((((-1.0)*cj5*r01*x15047))+(((-1.0)*r00*sj5*x15047)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15050.value)+IKsqr(((x15051.value)*(((((-1.0)*cj5*r01*x15047))+(((-1.0)*r00*sj5*x15047))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15050.value, ((x15051.value)*(((((-1.0)*cj5*r01*x15047))+(((-1.0)*r00*sj5*x15047))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15052=IKsin(j4);
IkReal x15053=IKcos(j4);
IkReal x15054=(sj1*sj2);
IkReal x15055=(cj5*sj3);
IkReal x15056=(r11*sj5);
IkReal x15057=(cj3*cj5);
IkReal x15058=((1.0)*cj1);
IkReal x15059=(cj3*sj5);
IkReal x15060=(sj3*sj5);
IkReal x15061=(cj2*sj1);
IkReal x15062=(r01*sj5);
IkReal x15063=((1.0)*sj3);
IkReal x15064=(cj2*x15058);
IkReal x15065=(r10*x15053);
IkReal x15066=(r22*x15052);
IkReal x15067=(cj3*x15053);
IkReal x15068=((1.0)*cj5*x15052);
evalcond[0]=((-1.0)*r22*x15053);
evalcond[1]=(((cj1*sj2))+x15061+((cj3*x15066)));
evalcond[2]=(((x15052*x15056))+(((-1.0)*r10*x15068)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15068))+((x15052*x15062)));
evalcond[4]=((((-1.0)*x15063*x15066))+x15054+(((-1.0)*x15064)));
evalcond[5]=(((r01*x15053*x15059))+((r01*x15055))+((r00*x15060))+(((-1.0)*r00*x15053*x15057)));
evalcond[6]=(((r01*x15057))+((r00*x15053*x15055))+(((-1.0)*r01*x15053*x15060))+((r00*x15059)));
evalcond[7]=(x15054+((x15056*x15067))+((r10*x15060))+((r11*x15055))+(((-1.0)*x15064))+(((-1.0)*x15057*x15065)));
evalcond[8]=((((-1.0)*x15053*x15056*x15063))+((r10*x15059))+((x15055*x15065))+(((-1.0)*x15061))+(((-1.0)*sj2*x15058))+((r11*x15057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15069=cj5*cj5;
IkReal x15070=(cj3*r20);
IkReal x15071=(r21*sj3);
IkReal x15072=((1.0)*cj3);
IkReal x15073=(r01*r21);
IkReal x15074=(r01*sj3);
IkReal x15075=(r00*sj5);
IkReal x15076=(cj5*r01*sj5);
IkReal x15077=((1.0)*x15069);
CheckValue<IkReal> x15078=IKPowWithIntegerCheck(IKsign((((cj3*x15069*x15073))+((x15070*x15076))+(((-1.0)*x15072*x15073))+(((-1.0)*r00*x15070*x15077))+((cj3*cj5*r21*x15075))+(((-1.0)*r02*r22*x15072)))),-1);
if(!x15078.valid){
continue;
}
CheckValue<IkReal> x15079 = IKatan2WithCheck(IkReal((((r22*sj3*x15075))+((cj5*r22*x15074)))),IkReal((((x15071*x15076))+((r00*x15071))+(((-1.0)*r20*x15074*x15077))+(((-1.0)*cj5*r20*sj3*x15075))+(((-1.0)*r00*x15071*x15077)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15078.value)))+(x15079.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15080=IKsin(j4);
IkReal x15081=IKcos(j4);
IkReal x15082=(sj1*sj2);
IkReal x15083=(r11*sj5);
IkReal x15084=(cj5*r10);
IkReal x15085=(cj5*r01);
IkReal x15086=(cj5*r00);
IkReal x15087=((1.0)*cj1);
IkReal x15088=(cj3*sj5);
IkReal x15089=(r21*sj5);
IkReal x15090=(cj5*sj3);
IkReal x15091=(sj3*sj5);
IkReal x15092=(cj2*sj1);
IkReal x15093=(r01*sj5);
IkReal x15094=(cj3*cj5);
IkReal x15095=(cj5*r20);
IkReal x15096=(cj2*x15087);
IkReal x15097=((1.0)*x15081);
IkReal x15098=((1.0)*x15080);
IkReal x15099=(cj3*x15081);
IkReal x15100=(sj3*x15081);
IkReal x15101=(cj3*x15080);
evalcond[0]=((((-1.0)*r22*x15097))+(((-1.0)*x15095*x15098))+((x15080*x15089)));
evalcond[1]=((((-1.0)*r12*x15097))+(((-1.0)*x15084*x15098))+((x15080*x15083)));
evalcond[2]=((-1.0)+((x15080*x15093))+(((-1.0)*r02*x15097))+(((-1.0)*x15086*x15098)));
evalcond[3]=((((-1.0)*cj3*x15086*x15097))+((r00*x15091))+((sj3*x15085))+((r02*x15101))+((r01*x15081*x15088)));
evalcond[4]=((((-1.0)*r02*sj3*x15098))+((r00*x15088))+(((-1.0)*r01*x15091*x15097))+((x15086*x15100))+((cj3*x15085)));
evalcond[5]=(((r21*x15081*x15088))+((r21*x15090))+((r22*x15101))+((r20*x15091))+((cj1*sj2))+x15092+(((-1.0)*r20*x15094*x15097)));
evalcond[6]=(((r12*x15101))+x15082+((r11*x15090))+((x15083*x15099))+((r10*x15091))+(((-1.0)*cj3*x15084*x15097))+(((-1.0)*x15096)));
evalcond[7]=(((r20*x15081*x15090))+(((-1.0)*r22*sj3*x15098))+((r21*x15094))+x15082+((r20*x15088))+(((-1.0)*sj3*x15089*x15097))+(((-1.0)*x15096)));
evalcond[8]=(((x15084*x15100))+(((-1.0)*r12*sj3*x15098))+(((-1.0)*sj3*x15083*x15097))+(((-1.0)*sj2*x15087))+(((-1.0)*x15092))+((r11*x15094))+((r10*x15088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15102=((1.0)*cj5);
CheckValue<IkReal> x15103=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x15102))+(((-1.0)*r10*sj5)))),-1);
if(!x15103.valid){
continue;
}
CheckValue<IkReal> x15104 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15103.value)))+(x15104.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15105=IKsin(j4);
IkReal x15106=IKcos(j4);
IkReal x15107=(sj1*sj2);
IkReal x15108=(r11*sj5);
IkReal x15109=(cj5*r10);
IkReal x15110=(cj5*r01);
IkReal x15111=(cj5*r00);
IkReal x15112=((1.0)*cj1);
IkReal x15113=(cj3*sj5);
IkReal x15114=(r21*sj5);
IkReal x15115=(cj5*sj3);
IkReal x15116=(sj3*sj5);
IkReal x15117=(cj2*sj1);
IkReal x15118=(r01*sj5);
IkReal x15119=(cj3*cj5);
IkReal x15120=(cj5*r20);
IkReal x15121=(cj2*x15112);
IkReal x15122=((1.0)*x15106);
IkReal x15123=((1.0)*x15105);
IkReal x15124=(cj3*x15106);
IkReal x15125=(sj3*x15106);
IkReal x15126=(cj3*x15105);
evalcond[0]=(((x15105*x15114))+(((-1.0)*r22*x15122))+(((-1.0)*x15120*x15123)));
evalcond[1]=((((-1.0)*x15109*x15123))+(((-1.0)*r12*x15122))+((x15105*x15108)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15122))+(((-1.0)*x15111*x15123))+((x15105*x15118)));
evalcond[3]=((((-1.0)*cj3*x15111*x15122))+((r01*x15106*x15113))+((sj3*x15110))+((r00*x15116))+((r02*x15126)));
evalcond[4]=((((-1.0)*r01*x15116*x15122))+(((-1.0)*r02*sj3*x15123))+((x15111*x15125))+((cj3*x15110))+((r00*x15113)));
evalcond[5]=(((r20*x15116))+((cj1*sj2))+((r22*x15126))+x15117+(((-1.0)*r20*x15119*x15122))+((r21*x15106*x15113))+((r21*x15115)));
evalcond[6]=(((r10*x15116))+(((-1.0)*x15121))+((x15108*x15124))+((r11*x15115))+x15107+((r12*x15126))+(((-1.0)*cj3*x15109*x15122)));
evalcond[7]=((((-1.0)*sj3*x15114*x15122))+(((-1.0)*x15121))+((r20*x15113))+(((-1.0)*r22*sj3*x15123))+((r20*x15106*x15115))+x15107+((r21*x15119)));
evalcond[8]=((((-1.0)*sj2*x15112))+(((-1.0)*x15117))+((r10*x15113))+(((-1.0)*r12*sj3*x15123))+((x15109*x15125))+((r11*x15119))+(((-1.0)*sj3*x15108*x15122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15127=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15127.valid){
continue;
}
CheckValue<IkReal> x15128 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15127.value)))+(x15128.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15129=IKsin(j4);
IkReal x15130=IKcos(j4);
IkReal x15131=(sj1*sj2);
IkReal x15132=(r11*sj5);
IkReal x15133=(cj5*r10);
IkReal x15134=(cj5*r01);
IkReal x15135=(cj5*r00);
IkReal x15136=((1.0)*cj1);
IkReal x15137=(cj3*sj5);
IkReal x15138=(r21*sj5);
IkReal x15139=(cj5*sj3);
IkReal x15140=(sj3*sj5);
IkReal x15141=(cj2*sj1);
IkReal x15142=(r01*sj5);
IkReal x15143=(cj3*cj5);
IkReal x15144=(cj5*r20);
IkReal x15145=(cj2*x15136);
IkReal x15146=((1.0)*x15130);
IkReal x15147=((1.0)*x15129);
IkReal x15148=(cj3*x15130);
IkReal x15149=(sj3*x15130);
IkReal x15150=(cj3*x15129);
evalcond[0]=(((x15129*x15138))+(((-1.0)*x15144*x15147))+(((-1.0)*r22*x15146)));
evalcond[1]=(((x15129*x15132))+(((-1.0)*x15133*x15147))+(((-1.0)*r12*x15146)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15146))+(((-1.0)*x15135*x15147))+((x15129*x15142)));
evalcond[3]=(((r01*x15130*x15137))+(((-1.0)*cj3*x15135*x15146))+((sj3*x15134))+((r00*x15140))+((r02*x15150)));
evalcond[4]=(((r00*x15137))+((x15135*x15149))+(((-1.0)*r01*x15140*x15146))+(((-1.0)*r02*sj3*x15147))+((cj3*x15134)));
evalcond[5]=(((r21*x15139))+((cj1*sj2))+((r20*x15140))+((r22*x15150))+x15141+((r21*x15130*x15137))+(((-1.0)*r20*x15143*x15146)));
evalcond[6]=(((r10*x15140))+x15131+((x15132*x15148))+(((-1.0)*x15145))+((r12*x15150))+((r11*x15139))+(((-1.0)*cj3*x15133*x15146)));
evalcond[7]=(((r20*x15137))+(((-1.0)*r22*sj3*x15147))+((r20*x15130*x15139))+x15131+((r21*x15143))+(((-1.0)*x15145))+(((-1.0)*sj3*x15138*x15146)));
evalcond[8]=((((-1.0)*r12*sj3*x15147))+(((-1.0)*x15141))+((r11*x15143))+((x15133*x15149))+((r10*x15137))+(((-1.0)*sj2*x15136))+(((-1.0)*sj3*x15132*x15146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15151=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15151;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15151);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15152=((1.0)*cj5);
IkReal x15153=((((-1.0)*r21*x15152))+(((-1.0)*r20*sj5)));
j4eval[0]=x15153;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15152))+((r11*sj5))))));
j4eval[2]=IKsign(x15153);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15154=cj5*cj5;
IkReal x15155=(cj3*r01);
IkReal x15156=(cj5*sj5);
IkReal x15157=((1.0)*cj3);
IkReal x15158=((((-1.0)*r00*r20*x15154*x15157))+((cj3*r00*r21*x15156))+((r21*x15154*x15155))+(((-1.0)*r02*r22*x15157))+(((-1.0)*r21*x15155))+((r20*x15155*x15156)));
j4eval[0]=x15158;
j4eval[1]=IKsign(x15158);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15159=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15159;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15159);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15160=((1.0)*cj5);
IkReal x15161=((((-1.0)*r21*x15160))+(((-1.0)*r20*sj5)));
j4eval[0]=x15161;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x15160))))));
j4eval[2]=IKsign(x15161);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15162=cj5*cj5;
IkReal x15163=r01*r01;
IkReal x15164=(cj5*r00);
IkReal x15165=(r01*sj5);
IkReal x15166=((((-2.0)*x15164*x15165))+x15163+(((-1.0)*x15162*x15163))+(r02*r02)+((x15162*(r00*r00))));
j4eval[0]=x15166;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x15165))+x15164))));
j4eval[2]=IKsign(x15166);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15167=cj5*cj5;
IkReal x15168=r01*r01;
IkReal x15169=(r01*sj5);
IkReal x15170=(cj5*r00);
CheckValue<IkReal> x15171 = IKatan2WithCheck(IkReal(((((-1.0)*x15169))+x15170)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15171.valid){
continue;
}
CheckValue<IkReal> x15172=IKPowWithIntegerCheck(IKsign((((x15167*(r00*r00)))+(((-1.0)*x15167*x15168))+x15168+(r02*r02)+(((-2.0)*x15169*x15170)))),-1);
if(!x15172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15171.value)+(((1.5707963267949)*(x15172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15173=IKsin(j4);
IkReal x15174=IKcos(j4);
IkReal x15175=(cj5*r10);
IkReal x15176=(r01*sj5);
IkReal x15177=(cj5*r00);
IkReal x15178=(cj5*r20);
IkReal x15179=((1.0)*x15174);
IkReal x15180=((1.0)*x15173);
IkReal x15181=(sj5*x15173);
evalcond[0]=((((-1.0)*x15178*x15180))+(((-1.0)*r22*x15179))+((r21*x15181)));
evalcond[1]=((((-1.0)*x15175*x15180))+((r11*x15181))+(((-1.0)*r12*x15179)));
evalcond[2]=((((-1.0)*r02*x15180))+(((-1.0)*x15176*x15179))+((x15174*x15177)));
evalcond[3]=((1.0)+((x15173*x15176))+(((-1.0)*x15177*x15180))+(((-1.0)*r02*x15179)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x15179))+((x15174*x15175))+(((-1.0)*r12*x15180)));
evalcond[5]=((((-1.0)*r21*sj5*x15179))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15174*x15178))+(((-1.0)*r22*x15180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15182=((1.0)*cj5);
CheckValue<IkReal> x15183=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15182))+(((-1.0)*r20*sj5)))),-1);
if(!x15183.valid){
continue;
}
CheckValue<IkReal> x15184 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15183.value)))+(x15184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15185=IKsin(j4);
IkReal x15186=IKcos(j4);
IkReal x15187=(cj5*r10);
IkReal x15188=(r01*sj5);
IkReal x15189=(cj5*r00);
IkReal x15190=(cj5*r20);
IkReal x15191=((1.0)*x15186);
IkReal x15192=((1.0)*x15185);
IkReal x15193=(sj5*x15185);
evalcond[0]=((((-1.0)*x15190*x15192))+((r21*x15193))+(((-1.0)*r22*x15191)));
evalcond[1]=(((r11*x15193))+(((-1.0)*r12*x15191))+(((-1.0)*x15187*x15192)));
evalcond[2]=(((x15186*x15189))+(((-1.0)*r02*x15192))+(((-1.0)*x15188*x15191)));
evalcond[3]=((1.0)+((x15185*x15188))+(((-1.0)*r02*x15191))+(((-1.0)*x15189*x15192)));
evalcond[4]=(((cj2*sj1))+((x15186*x15187))+(((-1.0)*r12*x15192))+((cj1*sj2))+(((-1.0)*r11*sj5*x15191)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15192))+((x15186*x15190))+(((-1.0)*r21*sj5*x15191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15194 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15194.valid){
continue;
}
CheckValue<IkReal> x15195=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15194.value)+(((1.5707963267949)*(x15195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15196=IKsin(j4);
IkReal x15197=IKcos(j4);
IkReal x15198=(cj5*r10);
IkReal x15199=(r01*sj5);
IkReal x15200=(cj5*r00);
IkReal x15201=(cj5*r20);
IkReal x15202=((1.0)*x15197);
IkReal x15203=((1.0)*x15196);
IkReal x15204=(sj5*x15196);
evalcond[0]=((((-1.0)*r22*x15202))+((r21*x15204))+(((-1.0)*x15201*x15203)));
evalcond[1]=((((-1.0)*x15198*x15203))+((r11*x15204))+(((-1.0)*r12*x15202)));
evalcond[2]=((((-1.0)*x15199*x15202))+((x15197*x15200))+(((-1.0)*r02*x15203)));
evalcond[3]=((1.0)+((x15196*x15199))+(((-1.0)*r02*x15202))+(((-1.0)*x15200*x15203)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x15203))+((x15197*x15198))+(((-1.0)*r11*sj5*x15202)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15203))+((x15197*x15201))+(((-1.0)*r21*sj5*x15202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15205=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15205;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15205);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15206=((1.0)*cj5);
IkReal x15207=((((-1.0)*r21*x15206))+(((-1.0)*r20*sj5)));
j4eval[0]=x15207;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x15206))))));
j4eval[2]=IKsign(x15207);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15208=cj5*cj5;
IkReal x15209=r01*r01;
IkReal x15210=(r01*sj5);
IkReal x15211=(cj5*r00);
IkReal x15212=((((-1.0)*x15209))+(((-1.0)*(r02*r02)))+(((2.0)*x15210*x15211))+((x15208*x15209))+(((-1.0)*x15208*(r00*r00))));
j4eval[0]=x15212;
j4eval[1]=IKsign(x15212);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x15211))+x15210))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15213=cj5*cj5;
IkReal x15214=r01*r01;
IkReal x15215=(r01*sj5);
IkReal x15216=(cj5*r00);
CheckValue<IkReal> x15217=IKPowWithIntegerCheck(IKsign((((x15213*x15214))+(((2.0)*x15215*x15216))+(((-1.0)*x15214))+(((-1.0)*(r02*r02)))+(((-1.0)*x15213*(r00*r00))))),-1);
if(!x15217.valid){
continue;
}
CheckValue<IkReal> x15218 = IKatan2WithCheck(IkReal(((((-1.0)*x15216))+x15215)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15217.value)))+(x15218.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15219=IKcos(j4);
IkReal x15220=IKsin(j4);
IkReal x15221=(cj5*r00);
IkReal x15222=(cj5*r10);
IkReal x15223=(r21*sj5);
IkReal x15224=(cj5*r20);
IkReal x15225=((1.0)*x15219);
IkReal x15226=((1.0)*x15220);
IkReal x15227=(sj5*x15220);
IkReal x15228=(sj5*x15219);
evalcond[0]=((((-1.0)*x15221*x15225))+((r02*x15220))+((r01*x15228)));
evalcond[1]=(((x15220*x15223))+(((-1.0)*x15224*x15226))+(((-1.0)*r22*x15225)));
evalcond[2]=((((-1.0)*r12*x15225))+(((-1.0)*x15222*x15226))+((r11*x15227)));
evalcond[3]=((1.0)+(((-1.0)*x15221*x15226))+(((-1.0)*r02*x15225))+((r01*x15227)));
evalcond[4]=(((r12*x15220))+((cj2*sj1))+(((-1.0)*x15222*x15225))+((cj1*sj2))+((r11*x15228)));
evalcond[5]=(((r22*x15220))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15224*x15225))+((x15219*x15223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15229=((1.0)*cj5);
CheckValue<IkReal> x15230=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15229))+(((-1.0)*r20*sj5)))),-1);
if(!x15230.valid){
continue;
}
CheckValue<IkReal> x15231 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15229)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15230.value)))+(x15231.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15232=IKcos(j4);
IkReal x15233=IKsin(j4);
IkReal x15234=(cj5*r00);
IkReal x15235=(cj5*r10);
IkReal x15236=(r21*sj5);
IkReal x15237=(cj5*r20);
IkReal x15238=((1.0)*x15232);
IkReal x15239=((1.0)*x15233);
IkReal x15240=(sj5*x15233);
IkReal x15241=(sj5*x15232);
evalcond[0]=(((r02*x15233))+((r01*x15241))+(((-1.0)*x15234*x15238)));
evalcond[1]=((((-1.0)*x15237*x15239))+(((-1.0)*r22*x15238))+((x15233*x15236)));
evalcond[2]=((((-1.0)*r12*x15238))+((r11*x15240))+(((-1.0)*x15235*x15239)));
evalcond[3]=((1.0)+((r01*x15240))+(((-1.0)*r02*x15238))+(((-1.0)*x15234*x15239)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x15233))+((r11*x15241))+(((-1.0)*x15235*x15238)));
evalcond[5]=((((-1.0)*x15237*x15238))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15233))+((x15232*x15236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15242 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15242.valid){
continue;
}
CheckValue<IkReal> x15243=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15242.value)+(((1.5707963267949)*(x15243.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15244=IKcos(j4);
IkReal x15245=IKsin(j4);
IkReal x15246=(cj5*r00);
IkReal x15247=(cj5*r10);
IkReal x15248=(r21*sj5);
IkReal x15249=(cj5*r20);
IkReal x15250=((1.0)*x15244);
IkReal x15251=((1.0)*x15245);
IkReal x15252=(sj5*x15245);
IkReal x15253=(sj5*x15244);
evalcond[0]=(((r01*x15253))+(((-1.0)*x15246*x15250))+((r02*x15245)));
evalcond[1]=(((x15245*x15248))+(((-1.0)*x15249*x15251))+(((-1.0)*r22*x15250)));
evalcond[2]=((((-1.0)*r12*x15250))+(((-1.0)*x15247*x15251))+((r11*x15252)));
evalcond[3]=((1.0)+((r01*x15252))+(((-1.0)*x15246*x15251))+(((-1.0)*r02*x15250)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x15247*x15250))+((r12*x15245))+((r11*x15253)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15249*x15250))+((r22*x15245))+((x15244*x15248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15255 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15255)==0){
continue;
}
IkReal x15254=pow(x15255,-0.5);
CheckValue<IkReal> x15256 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15256.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15256.value));
IkReal gconst61=((-1.0)*r11*x15254);
IkReal gconst62=(r10*x15254);
CheckValue<IkReal> x15257 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15257.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15257.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15260 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15260.valid){
continue;
}
IkReal x15258=((-1.0)*(x15260.value));
IkReal x15259=x15254;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15258;
IkReal gconst60=x15258;
IkReal gconst61=((-1.0)*r11*x15259);
IkReal gconst62=(r10*x15259);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15263 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15263.valid){
continue;
}
IkReal x15261=((-1.0)*(x15263.value));
IkReal x15262=x15254;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15261;
IkReal gconst60=x15261;
IkReal gconst61=((-1.0)*r11*x15262);
IkReal gconst62=(r10*x15262);
CheckValue<IkReal> x15271=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15271.valid){
continue;
}
IkReal x15264=x15271.value;
IkReal x15265=(sj3*x15264);
IkReal x15266=(r20*x15265);
IkReal x15267=(r00*x15265);
IkReal x15268=(r01*x15265);
IkReal x15269=(r21*x15265);
IkReal x15270=(r10*r11*x15265);
j4eval[0]=IKsign((((r01*r10*r11*x15266))+((r10*r11*r21*x15267))+((r21*x15268*(r11*r11)))+((r02*r22*sj3))+((r00*x15266*(r10*r10)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15272=gconst61*gconst61;
IkReal x15273=gconst62*gconst62;
IkReal x15274=(cj3*r01);
IkReal x15275=(r22*sj3);
IkReal x15276=(gconst61*r00);
IkReal x15277=((1.0)*cj3);
IkReal x15278=(gconst62*r01);
IkReal x15279=((1.0)*sj3);
IkReal x15280=(gconst61*gconst62*r20);
IkReal x15281=(r21*x15272);
IkReal x15282=(r20*x15273);
CheckValue<IkReal> x15283=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15277*x15282))+(((-1.0)*r02*r22*x15277))+(((-1.0)*x15274*x15281))+((cj3*gconst62*r21*x15276))+((x15274*x15280)))),-1);
if(!x15283.valid){
continue;
}
CheckValue<IkReal> x15284 = IKatan2WithCheck(IkReal((((x15275*x15278))+((x15275*x15276)))),IkReal((((r00*sj3*x15281))+(((-1.0)*gconst62*r20*x15276*x15279))+(((-1.0)*r01*x15279*x15282))+((gconst61*r21*sj3*x15278)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15283.value)))+(x15284.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15285=IKsin(j4);
IkReal x15286=IKcos(j4);
IkReal x15287=(cj2*sj1);
IkReal x15288=(cj1*sj2);
IkReal x15289=(gconst61*sj3);
IkReal x15290=(cj3*gconst61);
IkReal x15291=(cj3*gconst62);
IkReal x15292=(sj1*sj2);
IkReal x15293=(gconst62*sj3);
IkReal x15294=(cj1*cj2);
IkReal x15295=((1.0)*x15286);
IkReal x15296=((1.0)*x15285);
IkReal x15297=(gconst61*x15285);
IkReal x15298=(cj3*x15285);
IkReal x15299=(x15288+x15287);
evalcond[0]=((((-1.0)*r22*x15295))+((r21*x15297))+(((-1.0)*gconst62*r20*x15296)));
evalcond[1]=(((r11*x15297))+(((-1.0)*gconst62*r10*x15296))+(((-1.0)*r12*x15295)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15296))+((r01*x15297))+(((-1.0)*r02*x15295)));
evalcond[3]=(((r00*x15289))+((r01*x15286*x15290))+((r01*x15293))+(((-1.0)*r00*x15291*x15295))+((r02*x15298)));
evalcond[4]=(((r00*x15286*x15293))+(((-1.0)*r02*sj3*x15296))+((r01*x15291))+((r00*x15290))+(((-1.0)*r01*x15289*x15295)));
evalcond[5]=((((-1.0)*r20*x15291*x15295))+((r21*x15286*x15290))+x15299+((r21*x15293))+((r22*x15298))+((r20*x15289)));
evalcond[6]=((((-1.0)*r10*x15291*x15295))+(((-1.0)*x15292))+((r11*x15293))+x15294+((r12*x15298))+((r10*x15289))+((r11*x15286*x15290)));
evalcond[7]=(((r10*x15290))+((r11*x15291))+x15299+(((-1.0)*r11*x15289*x15295))+(((-1.0)*r12*sj3*x15296))+((r10*x15286*x15293)));
evalcond[8]=((((-1.0)*r21*x15289*x15295))+((r20*x15290))+(((-1.0)*x15294))+x15292+((r21*x15291))+(((-1.0)*r22*sj3*x15296))+((r20*x15286*x15293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15300=gconst61*gconst61;
IkReal x15301=gconst62*gconst62;
IkReal x15302=(cj3*r22);
IkReal x15303=(gconst62*r01);
IkReal x15304=(gconst61*r00);
IkReal x15305=((1.0)*r20);
IkReal x15306=(cj3*r21);
IkReal x15307=(r21*sj3);
CheckValue<IkReal> x15308=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x15301))+(((-1.0)*gconst61*sj3*x15303*x15305))+((r01*x15300*x15307))+(((-1.0)*gconst62*x15304*x15307))+((r02*r22*sj3)))),-1);
if(!x15308.valid){
continue;
}
CheckValue<IkReal> x15309 = IKatan2WithCheck(IkReal((((x15302*x15303))+((x15302*x15304)))),IkReal(((((-1.0)*cj3*r01*x15301*x15305))+((r00*x15300*x15306))+(((-1.0)*cj3*gconst62*x15304*x15305))+((gconst61*x15303*x15306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15308.value)))+(x15309.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15310=IKsin(j4);
IkReal x15311=IKcos(j4);
IkReal x15312=(cj2*sj1);
IkReal x15313=(cj1*sj2);
IkReal x15314=(gconst61*sj3);
IkReal x15315=(cj3*gconst61);
IkReal x15316=(cj3*gconst62);
IkReal x15317=(sj1*sj2);
IkReal x15318=(gconst62*sj3);
IkReal x15319=(cj1*cj2);
IkReal x15320=((1.0)*x15311);
IkReal x15321=((1.0)*x15310);
IkReal x15322=(gconst61*x15310);
IkReal x15323=(cj3*x15310);
IkReal x15324=(x15313+x15312);
evalcond[0]=((((-1.0)*gconst62*r20*x15321))+((r21*x15322))+(((-1.0)*r22*x15320)));
evalcond[1]=(((r11*x15322))+(((-1.0)*gconst62*r10*x15321))+(((-1.0)*r12*x15320)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15321))+((r01*x15322))+(((-1.0)*r02*x15320)));
evalcond[3]=(((r01*x15318))+((r00*x15314))+((r01*x15311*x15315))+((r02*x15323))+(((-1.0)*r00*x15316*x15320)));
evalcond[4]=(((r01*x15316))+((r00*x15315))+(((-1.0)*r02*sj3*x15321))+((r00*x15311*x15318))+(((-1.0)*r01*x15314*x15320)));
evalcond[5]=(((r22*x15323))+x15324+(((-1.0)*r20*x15316*x15320))+((r21*x15311*x15315))+((r21*x15318))+((r20*x15314)));
evalcond[6]=(((r11*x15318))+(((-1.0)*x15317))+(((-1.0)*r10*x15316*x15320))+((r12*x15323))+x15319+((r10*x15314))+((r11*x15311*x15315)));
evalcond[7]=(((r10*x15311*x15318))+((r11*x15316))+(((-1.0)*r11*x15314*x15320))+x15324+(((-1.0)*r12*sj3*x15321))+((r10*x15315)));
evalcond[8]=((((-1.0)*x15319))+((r20*x15311*x15318))+x15317+(((-1.0)*r21*x15314*x15320))+((r21*x15316))+(((-1.0)*r22*sj3*x15321))+((r20*x15315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15325=((1.0)*gconst62);
CheckValue<IkReal> x15326=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x15325)))),-1);
if(!x15326.valid){
continue;
}
CheckValue<IkReal> x15327 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst61*r11))+(((-1.0)*r10*x15325)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15326.value)))+(x15327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15328=IKsin(j4);
IkReal x15329=IKcos(j4);
IkReal x15330=(cj2*sj1);
IkReal x15331=(cj1*sj2);
IkReal x15332=(gconst61*sj3);
IkReal x15333=(cj3*gconst61);
IkReal x15334=(cj3*gconst62);
IkReal x15335=(sj1*sj2);
IkReal x15336=(gconst62*sj3);
IkReal x15337=(cj1*cj2);
IkReal x15338=((1.0)*x15329);
IkReal x15339=((1.0)*x15328);
IkReal x15340=(gconst61*x15328);
IkReal x15341=(cj3*x15328);
IkReal x15342=(x15331+x15330);
evalcond[0]=(((r21*x15340))+(((-1.0)*r22*x15338))+(((-1.0)*gconst62*r20*x15339)));
evalcond[1]=(((r11*x15340))+(((-1.0)*gconst62*r10*x15339))+(((-1.0)*r12*x15338)));
evalcond[2]=((1.0)+((r01*x15340))+(((-1.0)*gconst62*r00*x15339))+(((-1.0)*r02*x15338)));
evalcond[3]=(((r01*x15336))+((r00*x15332))+((r02*x15341))+((r01*x15329*x15333))+(((-1.0)*r00*x15334*x15338)));
evalcond[4]=(((r01*x15334))+((r00*x15333))+((r00*x15329*x15336))+(((-1.0)*r01*x15332*x15338))+(((-1.0)*r02*sj3*x15339)));
evalcond[5]=(((r20*x15332))+((r21*x15329*x15333))+(((-1.0)*r20*x15334*x15338))+((r22*x15341))+x15342+((r21*x15336)));
evalcond[6]=((((-1.0)*x15335))+((r11*x15329*x15333))+((r11*x15336))+x15337+((r10*x15332))+((r12*x15341))+(((-1.0)*r10*x15334*x15338)));
evalcond[7]=(((r10*x15329*x15336))+(((-1.0)*r11*x15332*x15338))+((r11*x15334))+(((-1.0)*r12*sj3*x15339))+x15342+((r10*x15333)));
evalcond[8]=(((r20*x15333))+(((-1.0)*x15337))+x15335+(((-1.0)*r22*sj3*x15339))+((r20*x15329*x15336))+(((-1.0)*r21*x15332*x15338))+((r21*x15334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15344 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15344)==0){
continue;
}
IkReal x15343=pow(x15344,-0.5);
CheckValue<IkReal> x15345 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15345.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15345.value))));
IkReal gconst64=((1.0)*r11*x15343);
IkReal gconst65=((-1.0)*r10*x15343);
CheckValue<IkReal> x15346 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15346.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15346.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15349 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15349.valid){
continue;
}
IkReal x15347=((1.0)*(x15349.value));
IkReal x15348=x15343;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15347)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15347)));
IkReal gconst64=((1.0)*r11*x15348);
IkReal gconst65=((-1.0)*r10*x15348);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15350=gconst64*gconst64;
IkReal x15351=gconst65*gconst65;
IkReal x15352=(gconst65*r01);
IkReal x15353=(cj3*r22);
IkReal x15354=(gconst64*r00);
IkReal x15355=(cj3*r21);
IkReal x15356=((1.0)*gconst64*sj3);
IkReal x15357=((1.0)*cj3*r20);
CheckValue<IkReal> x15358 = IKatan2WithCheck(IkReal((((x15352*x15353))+((x15353*x15354)))),IkReal(((((-1.0)*r01*x15351*x15357))+((r00*x15350*x15355))+((gconst64*x15352*x15355))+(((-1.0)*gconst65*x15354*x15357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15358.valid){
continue;
}
CheckValue<IkReal> x15359=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15352*x15356))+((r00*r20*sj3*x15351))+(((-1.0)*gconst65*r21*sj3*x15354))+((r01*r21*sj3*x15350))+((r02*r22*sj3)))),-1);
if(!x15359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15358.value)+(((1.5707963267949)*(x15359.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15360=IKsin(j4);
IkReal x15361=IKcos(j4);
IkReal x15362=(cj2*sj1);
IkReal x15363=(cj1*sj2);
IkReal x15364=(cj3*gconst64);
IkReal x15365=(gconst65*r21);
IkReal x15366=(sj1*sj2);
IkReal x15367=(gconst65*sj3);
IkReal x15368=(gconst64*sj3);
IkReal x15369=(cj3*gconst65);
IkReal x15370=(cj1*cj2);
IkReal x15371=((1.0)*x15361);
IkReal x15372=((1.0)*x15360);
IkReal x15373=(cj3*x15360);
IkReal x15374=(gconst64*x15360);
IkReal x15375=(x15362+x15363);
evalcond[0]=(((r21*x15374))+(((-1.0)*gconst65*r20*x15372))+(((-1.0)*r22*x15371)));
evalcond[1]=((((-1.0)*gconst65*r10*x15372))+(((-1.0)*r12*x15371))+((r11*x15374)));
evalcond[2]=((1.0)+((r01*x15374))+(((-1.0)*gconst65*r00*x15372))+(((-1.0)*r02*x15371)));
evalcond[3]=((((-1.0)*r00*x15369*x15371))+((r02*x15373))+((r01*x15361*x15364))+((r00*x15368))+((r01*x15367)));
evalcond[4]=((((-1.0)*r02*sj3*x15372))+((r00*x15361*x15367))+(((-1.0)*r01*x15368*x15371))+((r00*x15364))+((r01*x15369)));
evalcond[5]=(((r21*x15361*x15364))+x15375+((r20*x15368))+((sj3*x15365))+(((-1.0)*r20*x15369*x15371))+((r22*x15373)));
evalcond[6]=(((r10*x15368))+x15370+((r11*x15367))+((r11*x15361*x15364))+(((-1.0)*r10*x15369*x15371))+(((-1.0)*x15366))+((r12*x15373)));
evalcond[7]=(((r10*x15361*x15367))+((r10*x15364))+(((-1.0)*r12*sj3*x15372))+x15375+((r11*x15369))+(((-1.0)*r11*x15368*x15371)));
evalcond[8]=(((cj3*x15365))+(((-1.0)*x15370))+x15366+(((-1.0)*r21*x15368*x15371))+((r20*x15364))+(((-1.0)*r22*sj3*x15372))+((r20*x15361*x15367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15376=((1.0)*gconst65);
CheckValue<IkReal> x15377 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst64*r11))+(((-1.0)*r10*x15376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15377.valid){
continue;
}
CheckValue<IkReal> x15378=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15376))+(((-1.0)*gconst64*r20)))),-1);
if(!x15378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15377.value)+(((1.5707963267949)*(x15378.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15379=IKsin(j4);
IkReal x15380=IKcos(j4);
IkReal x15381=(cj2*sj1);
IkReal x15382=(cj1*sj2);
IkReal x15383=(cj3*gconst64);
IkReal x15384=(gconst65*r21);
IkReal x15385=(sj1*sj2);
IkReal x15386=(gconst65*sj3);
IkReal x15387=(gconst64*sj3);
IkReal x15388=(cj3*gconst65);
IkReal x15389=(cj1*cj2);
IkReal x15390=((1.0)*x15380);
IkReal x15391=((1.0)*x15379);
IkReal x15392=(cj3*x15379);
IkReal x15393=(gconst64*x15379);
IkReal x15394=(x15382+x15381);
evalcond[0]=(((r21*x15393))+(((-1.0)*r22*x15390))+(((-1.0)*gconst65*r20*x15391)));
evalcond[1]=((((-1.0)*r12*x15390))+((r11*x15393))+(((-1.0)*gconst65*r10*x15391)));
evalcond[2]=((1.0)+(((-1.0)*gconst65*r00*x15391))+(((-1.0)*r02*x15390))+((r01*x15393)));
evalcond[3]=(((r01*x15380*x15383))+((r01*x15386))+(((-1.0)*r00*x15388*x15390))+((r02*x15392))+((r00*x15387)));
evalcond[4]=(((r01*x15388))+(((-1.0)*r02*sj3*x15391))+((r00*x15380*x15386))+(((-1.0)*r01*x15387*x15390))+((r00*x15383)));
evalcond[5]=((((-1.0)*r20*x15388*x15390))+((r22*x15392))+((r21*x15380*x15383))+x15394+((r20*x15387))+((sj3*x15384)));
evalcond[6]=((((-1.0)*r10*x15388*x15390))+((r10*x15387))+((r11*x15386))+x15389+((r11*x15380*x15383))+(((-1.0)*x15385))+((r12*x15392)));
evalcond[7]=((((-1.0)*r11*x15387*x15390))+((r10*x15383))+((r11*x15388))+((r10*x15380*x15386))+x15394+(((-1.0)*r12*sj3*x15391)));
evalcond[8]=((((-1.0)*r22*sj3*x15391))+(((-1.0)*r21*x15387*x15390))+((cj3*x15384))+x15385+((r20*x15380*x15386))+(((-1.0)*x15389))+((r20*x15383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15395=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15395);
rxp0_2=(py*r00);
rxp1_0=(r21*x15395);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15396=(r01*sj5);
IkReal x15397=((1.0)*cj5*r00);
j4eval[0]=(x15396+(((-1.0)*x15397)));
j4eval[1]=(((cj3*x15396))+(((-1.0)*cj3*x15397)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15398=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15398);
rxp0_2=(py*r00);
rxp1_0=(r21*x15398);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15399=(cj5*r00);
IkReal x15400=(r01*sj5);
j4eval[0]=(x15400+(((-1.0)*x15399)));
j4eval[1]=((((-1.0)*sj3*x15400))+((sj3*x15399)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15401=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15401);
rxp0_2=(py*r00);
rxp1_0=(r21*x15401);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15402=((1.0)*r00);
CheckValue<IkReal> x15403=IKPowWithIntegerCheck(cj3,-1);
if(!x15403.valid){
continue;
}
CheckValue<IkReal> x15404=IKPowWithIntegerCheck(r12,-1);
if(!x15404.valid){
continue;
}
CheckValue<IkReal> x15405=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15402))),-1);
if(!x15405.valid){
continue;
}
if( IKabs(((x15403.value)*(x15404.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15405.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15402)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15403.value)*(x15404.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15405.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15402))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15403.value)*(x15404.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15405.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15402))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15406=IKsin(j4);
IkReal x15407=IKcos(j4);
IkReal x15408=(cj2*sj1);
IkReal x15409=(cj1*sj2);
IkReal x15410=(sj1*sj2);
IkReal x15411=(cj5*sj3);
IkReal x15412=(cj3*cj5);
IkReal x15413=(r21*sj5);
IkReal x15414=(cj1*cj2);
IkReal x15415=(r00*sj5);
IkReal x15416=(r01*sj5);
IkReal x15417=(r20*sj5);
IkReal x15418=((1.0)*x15406);
IkReal x15419=(r20*x15407);
IkReal x15420=(r00*x15407);
IkReal x15421=(cj3*x15407);
IkReal x15422=(x15409+x15408);
IkReal x15423=((1.0)*sj3*x15407);
evalcond[0]=((-1.0)*r12*x15407);
evalcond[1]=((((-1.0)*cj5*r20*x15418))+((x15406*x15413)));
evalcond[2]=((((-1.0)*x15410))+x15414+((cj3*r12*x15406)));
evalcond[3]=(x15422+(((-1.0)*r12*sj3*x15418)));
evalcond[4]=((1.0)+((x15406*x15416))+(((-1.0)*cj5*r00*x15418)));
evalcond[5]=((((-1.0)*x15412*x15420))+((r01*x15411))+((sj3*x15415))+((x15416*x15421)));
evalcond[6]=(((cj3*x15415))+(((-1.0)*x15416*x15423))+((x15411*x15420))+((r01*x15412)));
evalcond[7]=(((x15413*x15421))+(((-1.0)*x15412*x15419))+((sj3*x15417))+x15422+((r21*x15411)));
evalcond[8]=(((cj3*x15417))+(((-1.0)*x15413*x15423))+(((-1.0)*x15414))+((x15411*x15419))+x15410+((r21*x15412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15424=((1.0)*r01);
IkReal x15425=(cj5*r00);
CheckValue<IkReal> x15426=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x15425))),-1);
if(!x15426.valid){
continue;
}
CheckValue<IkReal> x15427=IKPowWithIntegerCheck((((sj3*x15425))+(((-1.0)*sj3*sj5*x15424))),-1);
if(!x15427.valid){
continue;
}
if( IKabs(((-1.0)*(x15426.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15427.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15424)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15426.value)))+IKsqr(((x15427.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15424))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15426.value)), ((x15427.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15424))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15428=IKsin(j4);
IkReal x15429=IKcos(j4);
IkReal x15430=(cj2*sj1);
IkReal x15431=(cj1*sj2);
IkReal x15432=(sj1*sj2);
IkReal x15433=(cj5*sj3);
IkReal x15434=(cj3*cj5);
IkReal x15435=(r21*sj5);
IkReal x15436=(cj1*cj2);
IkReal x15437=(r00*sj5);
IkReal x15438=(r01*sj5);
IkReal x15439=(r20*sj5);
IkReal x15440=((1.0)*x15428);
IkReal x15441=(r20*x15429);
IkReal x15442=(r00*x15429);
IkReal x15443=(cj3*x15429);
IkReal x15444=(x15430+x15431);
IkReal x15445=((1.0)*sj3*x15429);
evalcond[0]=((-1.0)*r12*x15429);
evalcond[1]=((((-1.0)*cj5*r20*x15440))+((x15428*x15435)));
evalcond[2]=(((cj3*r12*x15428))+(((-1.0)*x15432))+x15436);
evalcond[3]=(x15444+(((-1.0)*r12*sj3*x15440)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15440))+((x15428*x15438)));
evalcond[5]=(((sj3*x15437))+((x15438*x15443))+((r01*x15433))+(((-1.0)*x15434*x15442)));
evalcond[6]=(((x15433*x15442))+(((-1.0)*x15438*x15445))+((cj3*x15437))+((r01*x15434)));
evalcond[7]=(((r21*x15433))+((sj3*x15439))+((x15435*x15443))+x15444+(((-1.0)*x15434*x15441)));
evalcond[8]=(((x15433*x15441))+(((-1.0)*x15435*x15445))+((r21*x15434))+(((-1.0)*x15436))+((cj3*x15439))+x15432);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15446=((1.0)*r00);
IkReal x15447=(r01*sj5);
CheckValue<IkReal> x15448=IKPowWithIntegerCheck(((((-1.0)*cj5*x15446))+x15447),-1);
if(!x15448.valid){
continue;
}
CheckValue<IkReal> x15449=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x15446))+((cj3*x15447))),-1);
if(!x15449.valid){
continue;
}
if( IKabs(((-1.0)*(x15448.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15449.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15446)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15448.value)))+IKsqr(((x15449.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15446))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15448.value)), ((x15449.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15446))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15450=IKsin(j4);
IkReal x15451=IKcos(j4);
IkReal x15452=(cj2*sj1);
IkReal x15453=(cj1*sj2);
IkReal x15454=(sj1*sj2);
IkReal x15455=(cj5*sj3);
IkReal x15456=(cj3*cj5);
IkReal x15457=(r21*sj5);
IkReal x15458=(cj1*cj2);
IkReal x15459=(r00*sj5);
IkReal x15460=(r01*sj5);
IkReal x15461=(r20*sj5);
IkReal x15462=((1.0)*x15450);
IkReal x15463=(r20*x15451);
IkReal x15464=(r00*x15451);
IkReal x15465=(cj3*x15451);
IkReal x15466=(x15452+x15453);
IkReal x15467=((1.0)*sj3*x15451);
evalcond[0]=((-1.0)*r12*x15451);
evalcond[1]=(((x15450*x15457))+(((-1.0)*cj5*r20*x15462)));
evalcond[2]=(x15458+((cj3*r12*x15450))+(((-1.0)*x15454)));
evalcond[3]=(x15466+(((-1.0)*r12*sj3*x15462)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15462))+((x15450*x15460)));
evalcond[5]=(((sj3*x15459))+((r01*x15455))+((x15460*x15465))+(((-1.0)*x15456*x15464)));
evalcond[6]=(((cj3*x15459))+((x15455*x15464))+((r01*x15456))+(((-1.0)*x15460*x15467)));
evalcond[7]=(((x15457*x15465))+x15466+(((-1.0)*x15456*x15463))+((r21*x15455))+((sj3*x15461)));
evalcond[8]=(((x15455*x15463))+x15454+(((-1.0)*x15457*x15467))+((cj3*x15461))+((r21*x15456))+(((-1.0)*x15458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15468=cj5*cj5;
IkReal x15469=(cj3*r20);
IkReal x15470=(r21*sj3);
IkReal x15471=((1.0)*cj3);
IkReal x15472=(r01*r21);
IkReal x15473=(r01*sj3);
IkReal x15474=(r00*sj5);
IkReal x15475=(cj5*r01*sj5);
IkReal x15476=((1.0)*x15468);
CheckValue<IkReal> x15477 = IKatan2WithCheck(IkReal((((cj5*r22*x15473))+((r22*sj3*x15474)))),IkReal((((x15470*x15475))+(((-1.0)*cj5*r20*sj3*x15474))+(((-1.0)*r00*x15470*x15476))+((r00*x15470))+(((-1.0)*r20*x15473*x15476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15477.valid){
continue;
}
CheckValue<IkReal> x15478=IKPowWithIntegerCheck(IKsign((((x15469*x15475))+((cj3*cj5*r21*x15474))+(((-1.0)*r02*r22*x15471))+(((-1.0)*x15471*x15472))+((cj3*x15468*x15472))+(((-1.0)*r00*x15469*x15476)))),-1);
if(!x15478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15477.value)+(((1.5707963267949)*(x15478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15479=IKsin(j4);
IkReal x15480=IKcos(j4);
IkReal x15481=(cj2*sj1);
IkReal x15482=(cj1*sj2);
IkReal x15483=(r11*sj5);
IkReal x15484=(cj5*r10);
IkReal x15485=(sj1*sj2);
IkReal x15486=(cj5*r01);
IkReal x15487=(cj5*r00);
IkReal x15488=(cj3*sj5);
IkReal x15489=(r21*sj5);
IkReal x15490=(cj1*cj2);
IkReal x15491=(cj5*sj3);
IkReal x15492=(sj3*sj5);
IkReal x15493=(r01*sj5);
IkReal x15494=(cj3*cj5);
IkReal x15495=(cj5*r20);
IkReal x15496=((1.0)*x15480);
IkReal x15497=((1.0)*x15479);
IkReal x15498=(cj3*x15480);
IkReal x15499=(sj3*x15480);
IkReal x15500=(cj3*x15479);
IkReal x15501=(x15481+x15482);
evalcond[0]=(((x15479*x15489))+(((-1.0)*x15495*x15497))+(((-1.0)*r22*x15496)));
evalcond[1]=((((-1.0)*x15484*x15497))+(((-1.0)*r12*x15496))+((x15479*x15483)));
evalcond[2]=((1.0)+((x15479*x15493))+(((-1.0)*x15487*x15497))+(((-1.0)*r02*x15496)));
evalcond[3]=(((sj3*x15486))+((r00*x15492))+(((-1.0)*cj3*x15487*x15496))+((r02*x15500))+((r01*x15480*x15488)));
evalcond[4]=(((x15487*x15499))+(((-1.0)*r02*sj3*x15497))+((cj3*x15486))+(((-1.0)*r01*x15492*x15496))+((r00*x15488)));
evalcond[5]=(((r22*x15500))+((r20*x15492))+((r21*x15480*x15488))+x15501+((r21*x15491))+(((-1.0)*r20*x15494*x15496)));
evalcond[6]=(((r10*x15492))+((r11*x15491))+(((-1.0)*cj3*x15484*x15496))+((r12*x15500))+x15490+(((-1.0)*x15485))+((x15483*x15498)));
evalcond[7]=(((x15484*x15499))+((r10*x15488))+((r11*x15494))+(((-1.0)*r12*sj3*x15497))+(((-1.0)*sj3*x15483*x15496))+x15501);
evalcond[8]=(((r20*x15480*x15491))+(((-1.0)*sj3*x15489*x15496))+(((-1.0)*r22*sj3*x15497))+x15485+((r21*x15494))+((r20*x15488))+(((-1.0)*x15490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15502=((1.0)*cj5);
CheckValue<IkReal> x15503 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15502)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15503.valid){
continue;
}
CheckValue<IkReal> x15504=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15502))+(((-1.0)*r20*sj5)))),-1);
if(!x15504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15503.value)+(((1.5707963267949)*(x15504.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15505=IKsin(j4);
IkReal x15506=IKcos(j4);
IkReal x15507=(cj2*sj1);
IkReal x15508=(cj1*sj2);
IkReal x15509=(r11*sj5);
IkReal x15510=(cj5*r10);
IkReal x15511=(sj1*sj2);
IkReal x15512=(cj5*r01);
IkReal x15513=(cj5*r00);
IkReal x15514=(cj3*sj5);
IkReal x15515=(r21*sj5);
IkReal x15516=(cj1*cj2);
IkReal x15517=(cj5*sj3);
IkReal x15518=(sj3*sj5);
IkReal x15519=(r01*sj5);
IkReal x15520=(cj3*cj5);
IkReal x15521=(cj5*r20);
IkReal x15522=((1.0)*x15506);
IkReal x15523=((1.0)*x15505);
IkReal x15524=(cj3*x15506);
IkReal x15525=(sj3*x15506);
IkReal x15526=(cj3*x15505);
IkReal x15527=(x15508+x15507);
evalcond[0]=((((-1.0)*x15521*x15523))+((x15505*x15515))+(((-1.0)*r22*x15522)));
evalcond[1]=((((-1.0)*r12*x15522))+((x15505*x15509))+(((-1.0)*x15510*x15523)));
evalcond[2]=((1.0)+(((-1.0)*x15513*x15523))+((x15505*x15519))+(((-1.0)*r02*x15522)));
evalcond[3]=(((r02*x15526))+((sj3*x15512))+((r01*x15506*x15514))+(((-1.0)*cj3*x15513*x15522))+((r00*x15518)));
evalcond[4]=(((x15513*x15525))+((cj3*x15512))+(((-1.0)*r02*sj3*x15523))+((r00*x15514))+(((-1.0)*r01*x15518*x15522)));
evalcond[5]=(((r21*x15517))+((r20*x15518))+(((-1.0)*r20*x15520*x15522))+x15527+((r21*x15506*x15514))+((r22*x15526)));
evalcond[6]=(((x15509*x15524))+((r11*x15517))+((r10*x15518))+((r12*x15526))+x15516+(((-1.0)*cj3*x15510*x15522))+(((-1.0)*x15511)));
evalcond[7]=((((-1.0)*sj3*x15509*x15522))+(((-1.0)*r12*sj3*x15523))+((x15510*x15525))+((r10*x15514))+x15527+((r11*x15520)));
evalcond[8]=((((-1.0)*sj3*x15515*x15522))+((r21*x15520))+((r20*x15514))+(((-1.0)*r22*sj3*x15523))+((r20*x15506*x15517))+x15511+(((-1.0)*x15516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15528 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15528.valid){
continue;
}
CheckValue<IkReal> x15529=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15528.value)+(((1.5707963267949)*(x15529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15530=IKsin(j4);
IkReal x15531=IKcos(j4);
IkReal x15532=(cj2*sj1);
IkReal x15533=(cj1*sj2);
IkReal x15534=(r11*sj5);
IkReal x15535=(cj5*r10);
IkReal x15536=(sj1*sj2);
IkReal x15537=(cj5*r01);
IkReal x15538=(cj5*r00);
IkReal x15539=(cj3*sj5);
IkReal x15540=(r21*sj5);
IkReal x15541=(cj1*cj2);
IkReal x15542=(cj5*sj3);
IkReal x15543=(sj3*sj5);
IkReal x15544=(r01*sj5);
IkReal x15545=(cj3*cj5);
IkReal x15546=(cj5*r20);
IkReal x15547=((1.0)*x15531);
IkReal x15548=((1.0)*x15530);
IkReal x15549=(cj3*x15531);
IkReal x15550=(sj3*x15531);
IkReal x15551=(cj3*x15530);
IkReal x15552=(x15533+x15532);
evalcond[0]=((((-1.0)*x15546*x15548))+((x15530*x15540))+(((-1.0)*r22*x15547)));
evalcond[1]=(((x15530*x15534))+(((-1.0)*x15535*x15548))+(((-1.0)*r12*x15547)));
evalcond[2]=((1.0)+((x15530*x15544))+(((-1.0)*x15538*x15548))+(((-1.0)*r02*x15547)));
evalcond[3]=(((sj3*x15537))+((r01*x15531*x15539))+((r02*x15551))+((r00*x15543))+(((-1.0)*cj3*x15538*x15547)));
evalcond[4]=(((x15538*x15550))+((cj3*x15537))+((r00*x15539))+(((-1.0)*r01*x15543*x15547))+(((-1.0)*r02*sj3*x15548)));
evalcond[5]=((((-1.0)*r20*x15545*x15547))+((r20*x15543))+((r22*x15551))+((r21*x15531*x15539))+((r21*x15542))+x15552);
evalcond[6]=(((r10*x15543))+((r12*x15551))+((x15534*x15549))+(((-1.0)*x15536))+((r11*x15542))+x15541+(((-1.0)*cj3*x15535*x15547)));
evalcond[7]=(((r10*x15539))+(((-1.0)*sj3*x15534*x15547))+(((-1.0)*r12*sj3*x15548))+((x15535*x15550))+((r11*x15545))+x15552);
evalcond[8]=(((r20*x15539))+((r20*x15531*x15542))+((r21*x15545))+(((-1.0)*x15541))+(((-1.0)*r22*sj3*x15548))+x15536+(((-1.0)*sj3*x15540*x15547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15553=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15553);
rxp1_1=(px*r21);
rxp1_2=(r11*x15553);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15554=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15554);
rxp1_1=(px*r21);
rxp1_2=(r11*x15554);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15555=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x15555))+((r11*sj5)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15555)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15556=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15556);
rxp1_1=(px*r21);
rxp1_2=(r11*x15556);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15557=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15557);
rxp1_1=(px*r21);
rxp1_2=(r11*x15557);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15558=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15558);
rxp1_1=(px*r21);
rxp1_2=(r11*x15558);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15559=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15559);
rxp1_1=(px*r21);
rxp1_2=(r11*x15559);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15562=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15562.valid){
continue;
}
IkReal x15560=x15562.value;
IkReal x15561=(sj0*x15560);
cj4array[0]=(((cj2*sj1*x15561))+((cj1*sj2*x15561)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15563=IKsin(j4);
IkReal x15564=IKcos(j4);
IkReal x15565=(cj5*r20);
IkReal x15566=(r21*sj5);
IkReal x15567=((1.0)*x15563);
IkReal x15568=((1.0)*x15564);
evalcond[0]=((-1.0)*r02*x15563);
evalcond[1]=((((-1.0)*r02*x15568))+(((-1.0)*sj0)));
evalcond[2]=(((x15563*x15566))+(((-1.0)*x15565*x15567)));
evalcond[3]=((((-1.0)*cj5*r10*x15567))+((r11*sj5*x15563)));
evalcond[4]=((((-1.0)*x15566*x15568))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15564*x15565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15570=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15570.valid){
continue;
}
IkReal x15569=x15570.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15569))+((cj1*cj2*x15569)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15571=IKsin(j4);
IkReal x15572=IKcos(j4);
IkReal x15573=(r11*sj5);
IkReal x15574=((1.0)*sj0);
IkReal x15575=((1.0)*x15572);
IkReal x15576=((1.0)*cj5*x15571);
evalcond[0]=((-1.0)*r02*x15571);
evalcond[1]=((((-1.0)*r02*x15575))+(((-1.0)*x15574)));
evalcond[2]=((((-1.0)*r20*x15576))+((r21*sj5*x15571)));
evalcond[3]=(((x15571*x15573))+(((-1.0)*r10*x15576)));
evalcond[4]=((((-1.0)*cj1*sj2*x15574))+(((-1.0)*cj2*sj1*x15574))+(((-1.0)*x15573*x15575))+((cj5*r10*x15572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15577=IKPowWithIntegerCheck(r02,-1);
if(!x15577.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15577.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15578=IKsin(j4);
IkReal x15579=IKcos(j4);
IkReal x15580=((1.0)*sj0);
IkReal x15581=(cj5*x15579);
IkReal x15582=(sj5*x15578);
IkReal x15583=((1.0)*sj5*x15579);
IkReal x15584=((1.0)*cj5*x15578);
evalcond[0]=((-1.0)*r02*x15578);
evalcond[1]=((((-1.0)*r20*x15584))+((r21*x15582)));
evalcond[2]=(((r11*x15582))+(((-1.0)*r10*x15584)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x15583))+((r20*x15581)));
evalcond[4]=(((r10*x15581))+(((-1.0)*cj1*sj2*x15580))+(((-1.0)*cj2*sj1*x15580))+(((-1.0)*r11*x15583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15585=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15585);
rxp1_1=(px*r21);
rxp1_2=(r11*x15585);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15586=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15586);
rxp1_1=(px*r21);
rxp1_2=(r11*x15586);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15587=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15587);
rxp1_1=(px*r21);
rxp1_2=(r11*x15587);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15590=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15590.valid){
continue;
}
IkReal x15588=x15590.value;
IkReal x15589=(sj0*x15588);
cj4array[0]=(((cj1*sj2*x15589))+((cj2*sj1*x15589)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15591=IKsin(j4);
IkReal x15592=IKcos(j4);
IkReal x15593=(r21*sj5);
IkReal x15594=((1.0)*cj5*r20);
evalcond[0]=(r02*x15591);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15592)));
evalcond[2]=((((-1.0)*x15591*x15594))+((x15591*x15593)));
evalcond[3]=(((r11*sj5*x15591))+(((-1.0)*cj5*r10*x15591)));
evalcond[4]=((((-1.0)*x15592*x15594))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15592*x15593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15596=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15596.valid){
continue;
}
IkReal x15595=x15596.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15595))+((cj1*cj2*x15595)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15597=IKsin(j4);
IkReal x15598=IKcos(j4);
IkReal x15599=((1.0)*sj0);
IkReal x15600=((1.0)*cj5);
IkReal x15601=(sj5*x15597);
evalcond[0]=(r02*x15597);
evalcond[1]=((((-1.0)*r02*x15598))+(((-1.0)*x15599)));
evalcond[2]=((((-1.0)*r20*x15597*x15600))+((r21*x15601)));
evalcond[3]=((((-1.0)*r10*x15597*x15600))+((r11*x15601)));
evalcond[4]=(((r11*sj5*x15598))+(((-1.0)*r10*x15598*x15600))+(((-1.0)*cj1*sj2*x15599))+(((-1.0)*cj2*sj1*x15599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15602=IKPowWithIntegerCheck(r02,-1);
if(!x15602.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15602.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15603=IKsin(j4);
IkReal x15604=IKcos(j4);
IkReal x15605=((1.0)*cj1);
IkReal x15606=(r21*sj5);
IkReal x15607=((1.0)*cj5);
IkReal x15608=(r11*sj5);
evalcond[0]=(r02*x15603);
evalcond[1]=(((x15603*x15606))+(((-1.0)*r20*x15603*x15607)));
evalcond[2]=(((x15603*x15608))+(((-1.0)*r10*x15603*x15607)));
evalcond[3]=((((-1.0)*cj2*x15605))+((sj1*sj2))+(((-1.0)*r20*x15604*x15607))+((x15604*x15606)));
evalcond[4]=((((-1.0)*sj0*sj2*x15605))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x15604*x15607))+((x15604*x15608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15609 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15609.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15609.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15610 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15610.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15610.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15611=((-1.0)*r10);
CheckValue<IkReal> x15613 = IKatan2WithCheck(IkReal(x15611),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15613.valid){
continue;
}
IkReal x15612=((-1.0)*(x15613.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15611);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15612;
IkReal gconst66=x15612;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15614=((-1.0)*r10);
CheckValue<IkReal> x15616 = IKatan2WithCheck(IkReal(x15614),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15616.valid){
continue;
}
IkReal x15615=((-1.0)*(x15616.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15614);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15615;
IkReal gconst66=x15615;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15617=((-1.0)*r10);
CheckValue<IkReal> x15619 = IKatan2WithCheck(IkReal(x15617),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15619.valid){
continue;
}
IkReal x15618=((-1.0)*(x15619.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15617);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15618;
IkReal gconst66=x15618;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15620=((1.0)*gconst67);
IkReal x15621=(cj1*cj2);
IkReal x15622=((1.0)*sj1*sj2);
CheckValue<IkReal> x15623=IKPowWithIntegerCheck(cj3,-1);
if(!x15623.valid){
continue;
}
CheckValue<IkReal> x15624=IKPowWithIntegerCheck(r02,-1);
if(!x15624.valid){
continue;
}
CheckValue<IkReal> x15625=IKPowWithIntegerCheck(((((-1.0)*r21*sj3*x15620))+((gconst68*r20*sj3))),-1);
if(!x15625.valid){
continue;
}
if( IKabs(((x15623.value)*(x15624.value)*((((cj0*x15621))+(((-1.0)*cj0*x15622)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15625.value)*(((((-1.0)*x15622))+(((-1.0)*cj3*r20*x15620))+x15621+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15623.value)*(x15624.value)*((((cj0*x15621))+(((-1.0)*cj0*x15622))))))+IKsqr(((x15625.value)*(((((-1.0)*x15622))+(((-1.0)*cj3*r20*x15620))+x15621+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15623.value)*(x15624.value)*((((cj0*x15621))+(((-1.0)*cj0*x15622))))), ((x15625.value)*(((((-1.0)*x15622))+(((-1.0)*cj3*r20*x15620))+x15621+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15626=IKsin(j4);
IkReal x15627=IKcos(j4);
IkReal x15628=(sj1*sj2);
IkReal x15629=(gconst68*sj3);
IkReal x15630=(gconst67*r11);
IkReal x15631=(gconst67*sj3);
IkReal x15632=((1.0)*gconst68);
IkReal x15633=(cj2*sj1);
IkReal x15634=((1.0)*cj0);
IkReal x15635=((1.0)*sj0);
IkReal x15636=(cj3*gconst67);
IkReal x15637=(cj3*gconst68);
IkReal x15638=(cj1*sj2);
IkReal x15639=(gconst67*r21);
IkReal x15640=((1.0)*cj1*cj2);
IkReal x15641=(cj3*x15627);
IkReal x15642=((1.0)*x15627);
IkReal x15643=(r02*x15626);
evalcond[0]=((((-1.0)*r02*x15642))+(((-1.0)*x15635)));
evalcond[1]=(((x15626*x15639))+(((-1.0)*r20*x15626*x15632)));
evalcond[2]=(cj0+((x15626*x15630))+(((-1.0)*r10*x15626*x15632)));
evalcond[3]=((((-1.0)*cj1*cj2*x15634))+((cj0*x15628))+((cj3*x15643)));
evalcond[4]=((((-1.0)*x15633*x15634))+(((-1.0)*sj3*x15643))+(((-1.0)*x15634*x15638)));
evalcond[5]=(((r21*x15629))+((r20*x15631))+(((-1.0)*r20*x15632*x15641))+x15638+x15633+((r21*x15627*x15636)));
evalcond[6]=(((r20*x15636))+((r20*x15627*x15629))+x15628+((r21*x15637))+(((-1.0)*x15640))+(((-1.0)*r21*x15631*x15642)));
evalcond[7]=((((-1.0)*cj1*cj2*x15635))+((sj0*x15628))+(((-1.0)*r10*x15632*x15641))+((r11*x15629))+((r10*x15631))+((x15630*x15641)));
evalcond[8]=((((-1.0)*x15633*x15635))+((r10*x15627*x15629))+(((-1.0)*x15635*x15638))+((r11*x15637))+(((-1.0)*sj3*x15630*x15642))+((r10*x15636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15646=IKPowWithIntegerCheck(r02,-1);
if(!x15646.valid){
continue;
}
IkReal x15644=x15646.value;
IkReal x15645=((1.0)*cj0);
CheckValue<IkReal> x15647=IKPowWithIntegerCheck(sj3,-1);
if(!x15647.valid){
continue;
}
if( IKabs((x15644*(x15647.value)*(((((-1.0)*cj2*sj1*x15645))+(((-1.0)*cj1*sj2*x15645)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15644)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15644*(x15647.value)*(((((-1.0)*cj2*sj1*x15645))+(((-1.0)*cj1*sj2*x15645))))))+IKsqr(((-1.0)*sj0*x15644))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15644*(x15647.value)*(((((-1.0)*cj2*sj1*x15645))+(((-1.0)*cj1*sj2*x15645))))), ((-1.0)*sj0*x15644));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15648=IKsin(j4);
IkReal x15649=IKcos(j4);
IkReal x15650=(sj1*sj2);
IkReal x15651=(gconst68*sj3);
IkReal x15652=(gconst67*r11);
IkReal x15653=(gconst67*sj3);
IkReal x15654=((1.0)*gconst68);
IkReal x15655=(cj2*sj1);
IkReal x15656=((1.0)*cj0);
IkReal x15657=((1.0)*sj0);
IkReal x15658=(cj3*gconst67);
IkReal x15659=(cj3*gconst68);
IkReal x15660=(cj1*sj2);
IkReal x15661=(gconst67*r21);
IkReal x15662=((1.0)*cj1*cj2);
IkReal x15663=(cj3*x15649);
IkReal x15664=((1.0)*x15649);
IkReal x15665=(r02*x15648);
evalcond[0]=((((-1.0)*x15657))+(((-1.0)*r02*x15664)));
evalcond[1]=((((-1.0)*r20*x15648*x15654))+((x15648*x15661)));
evalcond[2]=(cj0+(((-1.0)*r10*x15648*x15654))+((x15648*x15652)));
evalcond[3]=((((-1.0)*cj1*cj2*x15656))+((cj3*x15665))+((cj0*x15650)));
evalcond[4]=((((-1.0)*x15656*x15660))+(((-1.0)*sj3*x15665))+(((-1.0)*x15655*x15656)));
evalcond[5]=((((-1.0)*r20*x15654*x15663))+x15655+x15660+((r21*x15651))+((r20*x15653))+((r21*x15649*x15658)));
evalcond[6]=((((-1.0)*x15662))+(((-1.0)*r21*x15653*x15664))+((r20*x15649*x15651))+x15650+((r21*x15659))+((r20*x15658)));
evalcond[7]=(((r10*x15653))+(((-1.0)*cj1*cj2*x15657))+((r11*x15651))+((x15652*x15663))+(((-1.0)*r10*x15654*x15663))+((sj0*x15650)));
evalcond[8]=(((r10*x15658))+(((-1.0)*sj3*x15652*x15664))+(((-1.0)*x15657*x15660))+((r11*x15659))+((r10*x15649*x15651))+(((-1.0)*x15655*x15657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15667=IKPowWithIntegerCheck(r02,-1);
if(!x15667.valid){
continue;
}
IkReal x15666=x15667.value;
CheckValue<IkReal> x15668=IKPowWithIntegerCheck(cj3,-1);
if(!x15668.valid){
continue;
}
if( IKabs((x15666*(x15668.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15666)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15666*(x15668.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15666))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15666*(x15668.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15666));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15669=IKsin(j4);
IkReal x15670=IKcos(j4);
IkReal x15671=(sj1*sj2);
IkReal x15672=(gconst68*sj3);
IkReal x15673=(gconst67*r11);
IkReal x15674=(gconst67*sj3);
IkReal x15675=((1.0)*gconst68);
IkReal x15676=(cj2*sj1);
IkReal x15677=((1.0)*cj0);
IkReal x15678=((1.0)*sj0);
IkReal x15679=(cj3*gconst67);
IkReal x15680=(cj3*gconst68);
IkReal x15681=(cj1*sj2);
IkReal x15682=(gconst67*r21);
IkReal x15683=((1.0)*cj1*cj2);
IkReal x15684=(cj3*x15670);
IkReal x15685=((1.0)*x15670);
IkReal x15686=(r02*x15669);
evalcond[0]=((((-1.0)*x15678))+(((-1.0)*r02*x15685)));
evalcond[1]=(((x15669*x15682))+(((-1.0)*r20*x15669*x15675)));
evalcond[2]=(cj0+(((-1.0)*r10*x15669*x15675))+((x15669*x15673)));
evalcond[3]=(((cj3*x15686))+(((-1.0)*cj1*cj2*x15677))+((cj0*x15671)));
evalcond[4]=((((-1.0)*sj3*x15686))+(((-1.0)*x15676*x15677))+(((-1.0)*x15677*x15681)));
evalcond[5]=(((r20*x15674))+(((-1.0)*r20*x15675*x15684))+x15676+x15681+((r21*x15672))+((r21*x15670*x15679)));
evalcond[6]=(((r20*x15679))+x15671+((r20*x15670*x15672))+(((-1.0)*r21*x15674*x15685))+(((-1.0)*x15683))+((r21*x15680)));
evalcond[7]=((((-1.0)*r10*x15675*x15684))+((r10*x15674))+((r11*x15672))+((sj0*x15671))+(((-1.0)*cj1*cj2*x15678))+((x15673*x15684)));
evalcond[8]=(((r10*x15670*x15672))+(((-1.0)*sj3*x15673*x15685))+((r10*x15679))+((r11*x15680))+(((-1.0)*x15678*x15681))+(((-1.0)*x15676*x15678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15687=((-1.0)*r10);
CheckValue<IkReal> x15688 = IKatan2WithCheck(IkReal(x15687),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15688.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15688.value))));
IkReal gconst70=x15687;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15689 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15689.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15689.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15690=((-1.0)*r10);
IkReal x15691=((-1.0)*r11);
CheckValue<IkReal> x15693 = IKatan2WithCheck(IkReal(x15690),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15693.valid){
continue;
}
IkReal x15692=((1.0)*(x15693.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15690);
rxp1_1=(px*r21);
rxp1_2=(px*x15691);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15692)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15692)));
IkReal gconst70=x15690;
IkReal gconst71=x15691;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15694=((-1.0)*r10);
IkReal x15695=((-1.0)*r11);
CheckValue<IkReal> x15697 = IKatan2WithCheck(IkReal(x15694),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15697.valid){
continue;
}
IkReal x15696=((1.0)*(x15697.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15694);
rxp1_1=(px*r21);
rxp1_2=(px*x15695);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15696)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15696)));
IkReal gconst70=x15694;
IkReal gconst71=x15695;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15698=((-1.0)*r10);
IkReal x15699=((-1.0)*r11);
CheckValue<IkReal> x15701 = IKatan2WithCheck(IkReal(x15698),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15701.valid){
continue;
}
IkReal x15700=((1.0)*(x15701.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15698);
rxp1_1=(px*r21);
rxp1_2=(px*x15699);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15700)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15700)));
IkReal gconst70=x15698;
IkReal gconst71=x15699;
IkReal x15702=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r20*x15702))+((r10*r21*x15702)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15703=((1.0)*r21);
IkReal x15704=(cj1*cj2);
IkReal x15705=((1.0)*sj1*sj2);
CheckValue<IkReal> x15706=IKPowWithIntegerCheck(cj3,-1);
if(!x15706.valid){
continue;
}
CheckValue<IkReal> x15707=IKPowWithIntegerCheck(r02,-1);
if(!x15707.valid){
continue;
}
CheckValue<IkReal> x15708=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15703))+((gconst71*r20*sj3))),-1);
if(!x15708.valid){
continue;
}
if( IKabs(((x15706.value)*(x15707.value)*((((cj0*x15704))+(((-1.0)*cj0*x15705)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15708.value)*(((((-1.0)*x15705))+(((-1.0)*cj3*gconst71*x15703))+x15704+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15706.value)*(x15707.value)*((((cj0*x15704))+(((-1.0)*cj0*x15705))))))+IKsqr(((x15708.value)*(((((-1.0)*x15705))+(((-1.0)*cj3*gconst71*x15703))+x15704+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15706.value)*(x15707.value)*((((cj0*x15704))+(((-1.0)*cj0*x15705))))), ((x15708.value)*(((((-1.0)*x15705))+(((-1.0)*cj3*gconst71*x15703))+x15704+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15709=IKsin(j4);
IkReal x15710=IKcos(j4);
IkReal x15711=(cj3*gconst70);
IkReal x15712=(sj1*sj2);
IkReal x15713=((1.0)*gconst71);
IkReal x15714=(gconst71*sj3);
IkReal x15715=(cj2*sj1);
IkReal x15716=((1.0)*sj0);
IkReal x15717=(gconst70*r11);
IkReal x15718=(gconst70*sj3);
IkReal x15719=((1.0)*cj0);
IkReal x15720=(cj3*gconst71);
IkReal x15721=(cj1*sj2);
IkReal x15722=((1.0)*cj1*cj2);
IkReal x15723=(r21*x15710);
IkReal x15724=(r10*x15710);
IkReal x15725=((1.0)*x15710);
IkReal x15726=(r02*x15709);
IkReal x15727=(r20*x15710);
evalcond[0]=((((-1.0)*x15716))+(((-1.0)*r02*x15725)));
evalcond[1]=((((-1.0)*r20*x15709*x15713))+((gconst70*r21*x15709)));
evalcond[2]=(cj0+((x15709*x15717))+(((-1.0)*r10*x15709*x15713)));
evalcond[3]=((((-1.0)*cj1*cj2*x15719))+((cj0*x15712))+((cj3*x15726)));
evalcond[4]=((((-1.0)*sj3*x15726))+(((-1.0)*x15715*x15719))+(((-1.0)*x15719*x15721)));
evalcond[5]=(((r20*x15718))+(((-1.0)*cj3*x15713*x15727))+((r21*x15714))+x15721+x15715+((x15711*x15723)));
evalcond[6]=((((-1.0)*x15722))+((r20*x15711))+((r21*x15720))+x15712+((x15714*x15727))+(((-1.0)*x15718*x15723)));
evalcond[7]=((((-1.0)*cj3*x15713*x15724))+(((-1.0)*cj1*cj2*x15716))+((sj0*x15712))+((r11*x15710*x15711))+((r11*x15714))+((r10*x15718)));
evalcond[8]=(((r11*x15720))+(((-1.0)*x15715*x15716))+(((-1.0)*sj3*x15717*x15725))+(((-1.0)*x15716*x15721))+((x15714*x15724))+((r10*x15711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15730=IKPowWithIntegerCheck(r02,-1);
if(!x15730.valid){
continue;
}
IkReal x15728=x15730.value;
IkReal x15729=((1.0)*cj0);
CheckValue<IkReal> x15731=IKPowWithIntegerCheck(sj3,-1);
if(!x15731.valid){
continue;
}
if( IKabs((x15728*(x15731.value)*(((((-1.0)*cj2*sj1*x15729))+(((-1.0)*cj1*sj2*x15729)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15728)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15728*(x15731.value)*(((((-1.0)*cj2*sj1*x15729))+(((-1.0)*cj1*sj2*x15729))))))+IKsqr(((-1.0)*sj0*x15728))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15728*(x15731.value)*(((((-1.0)*cj2*sj1*x15729))+(((-1.0)*cj1*sj2*x15729))))), ((-1.0)*sj0*x15728));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15732=IKsin(j4);
IkReal x15733=IKcos(j4);
IkReal x15734=(cj3*gconst70);
IkReal x15735=(sj1*sj2);
IkReal x15736=((1.0)*gconst71);
IkReal x15737=(gconst71*sj3);
IkReal x15738=(cj2*sj1);
IkReal x15739=((1.0)*sj0);
IkReal x15740=(gconst70*r11);
IkReal x15741=(gconst70*sj3);
IkReal x15742=((1.0)*cj0);
IkReal x15743=(cj3*gconst71);
IkReal x15744=(cj1*sj2);
IkReal x15745=((1.0)*cj1*cj2);
IkReal x15746=(r21*x15733);
IkReal x15747=(r10*x15733);
IkReal x15748=((1.0)*x15733);
IkReal x15749=(r02*x15732);
IkReal x15750=(r20*x15733);
evalcond[0]=((((-1.0)*x15739))+(((-1.0)*r02*x15748)));
evalcond[1]=((((-1.0)*r20*x15732*x15736))+((gconst70*r21*x15732)));
evalcond[2]=(cj0+(((-1.0)*r10*x15732*x15736))+((x15732*x15740)));
evalcond[3]=(((cj3*x15749))+((cj0*x15735))+(((-1.0)*cj1*cj2*x15742)));
evalcond[4]=((((-1.0)*x15742*x15744))+(((-1.0)*x15738*x15742))+(((-1.0)*sj3*x15749)));
evalcond[5]=(((x15734*x15746))+((r21*x15737))+(((-1.0)*cj3*x15736*x15750))+x15744+x15738+((r20*x15741)));
evalcond[6]=(((r20*x15734))+(((-1.0)*x15745))+((r21*x15743))+(((-1.0)*x15741*x15746))+x15735+((x15737*x15750)));
evalcond[7]=(((r11*x15737))+(((-1.0)*cj1*cj2*x15739))+((r11*x15733*x15734))+((sj0*x15735))+(((-1.0)*cj3*x15736*x15747))+((r10*x15741)));
evalcond[8]=((((-1.0)*sj3*x15740*x15748))+(((-1.0)*x15739*x15744))+(((-1.0)*x15738*x15739))+((r11*x15743))+((r10*x15734))+((x15737*x15747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15752=IKPowWithIntegerCheck(r02,-1);
if(!x15752.valid){
continue;
}
IkReal x15751=x15752.value;
CheckValue<IkReal> x15753=IKPowWithIntegerCheck(cj3,-1);
if(!x15753.valid){
continue;
}
if( IKabs((x15751*(x15753.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15751)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15751*(x15753.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15751))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15751*(x15753.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15751));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15754=IKsin(j4);
IkReal x15755=IKcos(j4);
IkReal x15756=(cj3*gconst70);
IkReal x15757=(sj1*sj2);
IkReal x15758=((1.0)*gconst71);
IkReal x15759=(gconst71*sj3);
IkReal x15760=(cj2*sj1);
IkReal x15761=((1.0)*sj0);
IkReal x15762=(gconst70*r11);
IkReal x15763=(gconst70*sj3);
IkReal x15764=((1.0)*cj0);
IkReal x15765=(cj3*gconst71);
IkReal x15766=(cj1*sj2);
IkReal x15767=((1.0)*cj1*cj2);
IkReal x15768=(r21*x15755);
IkReal x15769=(r10*x15755);
IkReal x15770=((1.0)*x15755);
IkReal x15771=(r02*x15754);
IkReal x15772=(r20*x15755);
evalcond[0]=((((-1.0)*x15761))+(((-1.0)*r02*x15770)));
evalcond[1]=(((gconst70*r21*x15754))+(((-1.0)*r20*x15754*x15758)));
evalcond[2]=(cj0+((x15754*x15762))+(((-1.0)*r10*x15754*x15758)));
evalcond[3]=(((cj3*x15771))+(((-1.0)*cj1*cj2*x15764))+((cj0*x15757)));
evalcond[4]=((((-1.0)*x15760*x15764))+(((-1.0)*x15764*x15766))+(((-1.0)*sj3*x15771)));
evalcond[5]=(((r21*x15759))+(((-1.0)*cj3*x15758*x15772))+((r20*x15763))+((x15756*x15768))+x15766+x15760);
evalcond[6]=(((r21*x15765))+(((-1.0)*x15767))+((r20*x15756))+((x15759*x15772))+x15757+(((-1.0)*x15763*x15768)));
evalcond[7]=(((r10*x15763))+((r11*x15755*x15756))+(((-1.0)*cj3*x15758*x15769))+((sj0*x15757))+(((-1.0)*cj1*cj2*x15761))+((r11*x15759)));
evalcond[8]=((((-1.0)*x15760*x15761))+((r10*x15756))+(((-1.0)*sj3*x15762*x15770))+((x15759*x15769))+((r11*x15765))+(((-1.0)*x15761*x15766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15774=IKPowWithIntegerCheck(r02,-1);
if(!x15774.valid){
continue;
}
IkReal x15773=x15774.value;
CheckValue<IkReal> x15775=IKPowWithIntegerCheck(cj3,-1);
if(!x15775.valid){
continue;
}
if( IKabs((x15773*(x15775.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15773)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15773*(x15775.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15773))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15773*(x15775.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15773));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15776=IKsin(j4);
IkReal x15777=IKcos(j4);
IkReal x15778=(cj5*r10);
IkReal x15779=(sj1*sj2);
IkReal x15780=(cj5*sj3);
IkReal x15781=(r11*sj5);
IkReal x15782=(cj3*cj5);
IkReal x15783=(cj3*sj5);
IkReal x15784=(r21*sj5);
IkReal x15785=(cj2*sj1);
IkReal x15786=((1.0)*sj0);
IkReal x15787=((1.0)*cj0);
IkReal x15788=(sj3*sj5);
IkReal x15789=(cj1*sj2);
IkReal x15790=((1.0)*cj1*cj2);
IkReal x15791=((1.0)*x15776);
IkReal x15792=(r20*x15777);
IkReal x15793=(cj3*x15777);
IkReal x15794=(sj3*x15777);
evalcond[0]=((((-1.0)*r02*x15777))+(((-1.0)*x15786)));
evalcond[1]=((((-1.0)*cj5*r20*x15791))+((x15776*x15784)));
evalcond[2]=(cj0+((x15776*x15781))+(((-1.0)*x15778*x15791)));
evalcond[3]=((((-1.0)*cj1*cj2*x15787))+((cj0*x15779))+((cj3*r02*x15776)));
evalcond[4]=((((-1.0)*x15787*x15789))+(((-1.0)*x15785*x15787))+(((-1.0)*r02*sj3*x15791)));
evalcond[5]=(((r21*x15777*x15783))+((r21*x15780))+(((-1.0)*x15782*x15792))+x15785+x15789+((r20*x15788)));
evalcond[6]=((((-1.0)*x15784*x15794))+((r21*x15782))+((x15780*x15792))+(((-1.0)*x15790))+x15779+((r20*x15783)));
evalcond[7]=((((-1.0)*cj1*cj2*x15786))+((r10*x15788))+((x15781*x15793))+(((-1.0)*x15778*x15793))+((sj0*x15779))+((r11*x15780)));
evalcond[8]=((((-1.0)*x15785*x15786))+((r10*x15783))+((x15778*x15794))+((r11*x15782))+(((-1.0)*x15781*x15794))+(((-1.0)*x15786*x15789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15795=((1.0)*sj3);
IkReal x15796=((1.0)*cj5);
CheckValue<IkReal> x15797=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15796))),-1);
if(!x15797.valid){
continue;
}
CheckValue<IkReal> x15798=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15796))),-1);
if(!x15798.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15797.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15798.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj5*r21*x15795))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15795)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15797.value)))+IKsqr(((x15798.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj5*r21*x15795))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15795))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15797.value)), ((x15798.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj5*r21*x15795))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15795))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15799=IKsin(j4);
IkReal x15800=IKcos(j4);
IkReal x15801=(cj5*r10);
IkReal x15802=(sj1*sj2);
IkReal x15803=(cj5*sj3);
IkReal x15804=(r11*sj5);
IkReal x15805=(cj3*cj5);
IkReal x15806=(cj3*sj5);
IkReal x15807=(r21*sj5);
IkReal x15808=(cj2*sj1);
IkReal x15809=((1.0)*sj0);
IkReal x15810=((1.0)*cj0);
IkReal x15811=(sj3*sj5);
IkReal x15812=(cj1*sj2);
IkReal x15813=((1.0)*cj1*cj2);
IkReal x15814=((1.0)*x15799);
IkReal x15815=(r20*x15800);
IkReal x15816=(cj3*x15800);
IkReal x15817=(sj3*x15800);
evalcond[0]=((((-1.0)*x15809))+(((-1.0)*r02*x15800)));
evalcond[1]=(((x15799*x15807))+(((-1.0)*cj5*r20*x15814)));
evalcond[2]=(cj0+((x15799*x15804))+(((-1.0)*x15801*x15814)));
evalcond[3]=((((-1.0)*cj1*cj2*x15810))+((cj0*x15802))+((cj3*r02*x15799)));
evalcond[4]=((((-1.0)*x15808*x15810))+(((-1.0)*r02*sj3*x15814))+(((-1.0)*x15810*x15812)));
evalcond[5]=(((r21*x15800*x15806))+((r21*x15803))+(((-1.0)*x15805*x15815))+((r20*x15811))+x15808+x15812);
evalcond[6]=((((-1.0)*x15807*x15817))+(((-1.0)*x15813))+((r21*x15805))+x15802+((r20*x15806))+((x15803*x15815)));
evalcond[7]=(((r10*x15811))+((x15804*x15816))+((r11*x15803))+(((-1.0)*x15801*x15816))+((sj0*x15802))+(((-1.0)*cj1*cj2*x15809)));
evalcond[8]=((((-1.0)*x15804*x15817))+((r10*x15806))+(((-1.0)*x15808*x15809))+((r11*x15805))+(((-1.0)*x15809*x15812))+((x15801*x15817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15818=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15818.valid){
continue;
}
CheckValue<IkReal> x15819=IKPowWithIntegerCheck(r02,-1);
if(!x15819.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15818.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15819.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15818.value)))+IKsqr(((-1.0)*sj0*(x15819.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15818.value)), ((-1.0)*sj0*(x15819.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15820=IKsin(j4);
IkReal x15821=IKcos(j4);
IkReal x15822=(cj5*r10);
IkReal x15823=(sj1*sj2);
IkReal x15824=(cj5*sj3);
IkReal x15825=(r11*sj5);
IkReal x15826=(cj3*cj5);
IkReal x15827=(cj3*sj5);
IkReal x15828=(r21*sj5);
IkReal x15829=(cj2*sj1);
IkReal x15830=((1.0)*sj0);
IkReal x15831=((1.0)*cj0);
IkReal x15832=(sj3*sj5);
IkReal x15833=(cj1*sj2);
IkReal x15834=((1.0)*cj1*cj2);
IkReal x15835=((1.0)*x15820);
IkReal x15836=(r20*x15821);
IkReal x15837=(cj3*x15821);
IkReal x15838=(sj3*x15821);
evalcond[0]=((((-1.0)*r02*x15821))+(((-1.0)*x15830)));
evalcond[1]=(((x15820*x15828))+(((-1.0)*cj5*r20*x15835)));
evalcond[2]=(cj0+((x15820*x15825))+(((-1.0)*x15822*x15835)));
evalcond[3]=(((cj3*r02*x15820))+(((-1.0)*cj1*cj2*x15831))+((cj0*x15823)));
evalcond[4]=((((-1.0)*r02*sj3*x15835))+(((-1.0)*x15831*x15833))+(((-1.0)*x15829*x15831)));
evalcond[5]=((((-1.0)*x15826*x15836))+((r20*x15832))+((r21*x15821*x15827))+((r21*x15824))+x15833+x15829);
evalcond[6]=(((r20*x15827))+((x15824*x15836))+(((-1.0)*x15828*x15838))+((r21*x15826))+(((-1.0)*x15834))+x15823);
evalcond[7]=(((r10*x15832))+(((-1.0)*cj1*cj2*x15830))+((x15825*x15837))+(((-1.0)*x15822*x15837))+((r11*x15824))+((sj0*x15823)));
evalcond[8]=(((x15822*x15838))+(((-1.0)*x15830*x15833))+(((-1.0)*x15825*x15838))+(((-1.0)*x15829*x15830))+((r10*x15827))+((r11*x15826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15839=((1.0)*sj0);
IkReal x15840=((1.0)*cj0);
CheckValue<IkReal> x15841 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x15839))+(((-1.0)*r02*x15840)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x15839))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x15840)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15841.valid){
continue;
}
CheckValue<IkReal> x15842=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15841.value)+(((1.5707963267949)*(x15842.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15843=IKsin(j4);
IkReal x15844=IKcos(j4);
IkReal x15845=(r11*sj5);
IkReal x15846=(cj5*r10);
IkReal x15847=(sj1*sj2);
IkReal x15848=(cj5*sj3);
IkReal x15849=((1.0)*sj0);
IkReal x15850=(cj3*cj5);
IkReal x15851=(cj3*sj5);
IkReal x15852=(r21*sj5);
IkReal x15853=(cj2*sj1);
IkReal x15854=(sj3*sj5);
IkReal x15855=(r01*sj5);
IkReal x15856=((1.0)*cj0);
IkReal x15857=(cj1*sj2);
IkReal x15858=((1.0)*x15844);
IkReal x15859=((1.0)*x15843);
IkReal x15860=(cj3*x15844);
IkReal x15861=((1.0)*cj1*cj2);
IkReal x15862=(cj3*x15843);
evalcond[0]=((((-1.0)*cj5*r20*x15859))+(((-1.0)*r22*x15858))+((x15843*x15852)));
evalcond[1]=(((x15843*x15845))+cj0+(((-1.0)*r12*x15858))+(((-1.0)*x15846*x15859)));
evalcond[2]=((((-1.0)*r02*x15858))+(((-1.0)*x15849))+((x15843*x15855))+(((-1.0)*cj5*r00*x15859)));
evalcond[3]=(((r22*x15862))+((r20*x15854))+((r21*x15848))+(((-1.0)*r20*x15850*x15858))+((r21*x15844*x15851))+x15857+x15853);
evalcond[4]=((((-1.0)*x15861))+((r20*x15851))+((r20*x15844*x15848))+(((-1.0)*sj3*x15852*x15858))+((r21*x15850))+(((-1.0)*r22*sj3*x15859))+x15847);
evalcond[5]=(((r01*x15844*x15851))+((r01*x15848))+((r02*x15862))+((r00*x15854))+(((-1.0)*r00*x15850*x15858))+(((-1.0)*cj1*cj2*x15856))+((cj0*x15847)));
evalcond[6]=(((r11*x15848))+((r12*x15862))+(((-1.0)*cj1*cj2*x15849))+((x15845*x15860))+((r10*x15854))+((sj0*x15847))+(((-1.0)*cj3*x15846*x15858)));
evalcond[7]=(((r00*x15851))+(((-1.0)*r02*sj3*x15859))+((r01*x15850))+(((-1.0)*x15853*x15856))+(((-1.0)*r01*x15854*x15858))+(((-1.0)*x15856*x15857))+((r00*x15844*x15848)));
evalcond[8]=((((-1.0)*sj3*x15845*x15858))+((r10*x15851))+(((-1.0)*r12*sj3*x15859))+(((-1.0)*x15849*x15853))+(((-1.0)*x15849*x15857))+((r11*x15850))+((sj3*x15844*x15846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15863=((1.0)*cj5);
CheckValue<IkReal> x15864=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15863)))),-1);
if(!x15864.valid){
continue;
}
CheckValue<IkReal> x15865 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x15863))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15864.value)))+(x15865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15866=IKsin(j4);
IkReal x15867=IKcos(j4);
IkReal x15868=(r11*sj5);
IkReal x15869=(cj5*r10);
IkReal x15870=(sj1*sj2);
IkReal x15871=(cj5*sj3);
IkReal x15872=((1.0)*sj0);
IkReal x15873=(cj3*cj5);
IkReal x15874=(cj3*sj5);
IkReal x15875=(r21*sj5);
IkReal x15876=(cj2*sj1);
IkReal x15877=(sj3*sj5);
IkReal x15878=(r01*sj5);
IkReal x15879=((1.0)*cj0);
IkReal x15880=(cj1*sj2);
IkReal x15881=((1.0)*x15867);
IkReal x15882=((1.0)*x15866);
IkReal x15883=(cj3*x15867);
IkReal x15884=((1.0)*cj1*cj2);
IkReal x15885=(cj3*x15866);
evalcond[0]=((((-1.0)*cj5*r20*x15882))+(((-1.0)*r22*x15881))+((x15866*x15875)));
evalcond[1]=(((x15866*x15868))+cj0+(((-1.0)*x15869*x15882))+(((-1.0)*r12*x15881)));
evalcond[2]=((((-1.0)*cj5*r00*x15882))+(((-1.0)*r02*x15881))+(((-1.0)*x15872))+((x15866*x15878)));
evalcond[3]=((((-1.0)*r20*x15873*x15881))+((r20*x15877))+((r21*x15871))+((r21*x15867*x15874))+((r22*x15885))+x15880+x15876);
evalcond[4]=(((r20*x15867*x15871))+((r20*x15874))+((r21*x15873))+(((-1.0)*sj3*x15875*x15881))+(((-1.0)*x15884))+(((-1.0)*r22*sj3*x15882))+x15870);
evalcond[5]=(((r01*x15871))+((r00*x15877))+(((-1.0)*cj1*cj2*x15879))+((r01*x15867*x15874))+(((-1.0)*r00*x15873*x15881))+((r02*x15885))+((cj0*x15870)));
evalcond[6]=(((r11*x15871))+((r10*x15877))+((r12*x15885))+((x15868*x15883))+(((-1.0)*cj1*cj2*x15872))+(((-1.0)*cj3*x15869*x15881))+((sj0*x15870)));
evalcond[7]=(((r00*x15867*x15871))+((r01*x15873))+((r00*x15874))+(((-1.0)*x15876*x15879))+(((-1.0)*r01*x15877*x15881))+(((-1.0)*r02*sj3*x15882))+(((-1.0)*x15879*x15880)));
evalcond[8]=(((r11*x15873))+(((-1.0)*x15872*x15876))+((sj3*x15867*x15869))+(((-1.0)*x15872*x15880))+((r10*x15874))+(((-1.0)*r12*sj3*x15882))+(((-1.0)*sj3*x15868*x15881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15886=((1.0)*cj5);
CheckValue<IkReal> x15887 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15886)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15887.valid){
continue;
}
CheckValue<IkReal> x15888=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15886)))),-1);
if(!x15888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15887.value)+(((1.5707963267949)*(x15888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15889=IKsin(j4);
IkReal x15890=IKcos(j4);
IkReal x15891=(r11*sj5);
IkReal x15892=(cj5*r10);
IkReal x15893=(sj1*sj2);
IkReal x15894=(cj5*sj3);
IkReal x15895=((1.0)*sj0);
IkReal x15896=(cj3*cj5);
IkReal x15897=(cj3*sj5);
IkReal x15898=(r21*sj5);
IkReal x15899=(cj2*sj1);
IkReal x15900=(sj3*sj5);
IkReal x15901=(r01*sj5);
IkReal x15902=((1.0)*cj0);
IkReal x15903=(cj1*sj2);
IkReal x15904=((1.0)*x15890);
IkReal x15905=((1.0)*x15889);
IkReal x15906=(cj3*x15890);
IkReal x15907=((1.0)*cj1*cj2);
IkReal x15908=(cj3*x15889);
evalcond[0]=((((-1.0)*cj5*r20*x15905))+((x15889*x15898))+(((-1.0)*r22*x15904)));
evalcond[1]=(cj0+(((-1.0)*r12*x15904))+(((-1.0)*x15892*x15905))+((x15889*x15891)));
evalcond[2]=((((-1.0)*cj5*r00*x15905))+(((-1.0)*r02*x15904))+(((-1.0)*x15895))+((x15889*x15901)));
evalcond[3]=(((r22*x15908))+((r21*x15890*x15897))+((r20*x15900))+((r21*x15894))+(((-1.0)*r20*x15896*x15904))+x15899+x15903);
evalcond[4]=((((-1.0)*sj3*x15898*x15904))+((r20*x15897))+(((-1.0)*r22*sj3*x15905))+(((-1.0)*x15907))+((r20*x15890*x15894))+((r21*x15896))+x15893);
evalcond[5]=((((-1.0)*cj1*cj2*x15902))+((r01*x15894))+(((-1.0)*r00*x15896*x15904))+((cj0*x15893))+((r00*x15900))+((r01*x15890*x15897))+((r02*x15908)));
evalcond[6]=(((r12*x15908))+((sj0*x15893))+(((-1.0)*cj1*cj2*x15895))+((r11*x15894))+(((-1.0)*cj3*x15892*x15904))+((r10*x15900))+((x15891*x15906)));
evalcond[7]=((((-1.0)*r01*x15900*x15904))+((r01*x15896))+((r00*x15897))+((r00*x15890*x15894))+(((-1.0)*x15902*x15903))+(((-1.0)*r02*sj3*x15905))+(((-1.0)*x15899*x15902)));
evalcond[8]=(((r10*x15897))+(((-1.0)*x15895*x15903))+((sj3*x15890*x15892))+(((-1.0)*x15895*x15899))+(((-1.0)*r12*sj3*x15905))+(((-1.0)*sj3*x15891*x15904))+((r11*x15896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15909=cj5*cj5;
IkReal x15910=r21*r21;
IkReal x15911=r20*r20;
IkReal x15912=(r20*r21);
IkReal x15913=((1.0)*cj3);
IkReal x15914=((1.0)*cj5);
IkReal x15915=(cj1*sj2);
IkReal x15916=(cj5*sj5);
IkReal x15917=(sj3*sj5);
IkReal x15918=(cj2*sj1);
IkReal x15919=(r21*sj5);
CheckValue<IkReal> x15920 = IKatan2WithCheck(IkReal((((r22*x15918))+((r22*x15915))+((cj5*r21*r22*sj3))+((r20*r22*x15917)))),IkReal(((((-1.0)*x15911*x15914*x15917))+((sj3*x15912))+((sj3*x15910*x15916))+((x15915*x15919))+((x15918*x15919))+(((-1.0)*r20*x15914*x15915))+(((-1.0)*r20*x15914*x15918))+(((-2.0)*sj3*x15909*x15912)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15920.valid){
continue;
}
CheckValue<IkReal> x15921=IKPowWithIntegerCheck(IKsign((((cj3*x15909*x15910))+(((2.0)*cj3*x15912*x15916))+(((-1.0)*x15909*x15911*x15913))+(((-1.0)*x15913*(r22*r22)))+(((-1.0)*x15910*x15913)))),-1);
if(!x15921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15920.value)+(((1.5707963267949)*(x15921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15922=IKsin(j4);
IkReal x15923=IKcos(j4);
IkReal x15924=(cj3*r21);
IkReal x15925=(r21*sj5);
IkReal x15926=(r20*sj5);
IkReal x15927=(cj5*r20);
IkReal x15928=((1.0)*x15923);
IkReal x15929=((1.0)*x15922);
evalcond[0]=((((-1.0)*x15927*x15929))+(((-1.0)*r22*x15928))+((x15922*x15925)));
evalcond[1]=(((cj3*r22*x15922))+((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+((sj3*x15926))+((sj5*x15923*x15924))+(((-1.0)*cj3*x15927*x15928)));
evalcond[2]=((((-1.0)*sj3*x15925*x15928))+((sj3*x15923*x15927))+(((-1.0)*cj1*cj2))+((cj3*x15926))+((sj1*sj2))+(((-1.0)*r22*sj3*x15929))+((cj5*x15924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15930=(cj5*sj4);
IkReal x15931=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15931))+(((-1.0)*r00*x15930)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15931))+((cj4*r12))+((r10*x15930)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15931))+(((-1.0)*r00*x15930))))+IKsqr(((((-1.0)*r11*x15931))+((cj4*r12))+((r10*x15930))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15931))+(((-1.0)*r00*x15930))), ((((-1.0)*r11*x15931))+((cj4*r12))+((r10*x15930))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15932=IKcos(j0);
IkReal x15933=IKsin(j0);
IkReal x15934=(r02*sj4);
IkReal x15935=((0.1)*sj5);
IkReal x15936=(cj5*r11);
IkReal x15937=((1.0)*sj3);
IkReal x15938=(r12*sj4);
IkReal x15939=((1.0)*cj3);
IkReal x15940=(r11*sj5);
IkReal x15941=(cj3*cj4);
IkReal x15942=((1.0)*sj2);
IkReal x15943=(cj5*r01);
IkReal x15944=(r01*sj5);
IkReal x15945=(sj1*sj2);
IkReal x15946=(cj1*cj2);
IkReal x15947=(r00*sj5);
IkReal x15948=((1.0)*cj2);
IkReal x15949=(r10*sj5);
IkReal x15950=((1.0)*cj4);
IkReal x15951=(cj4*cj5*r00);
IkReal x15952=(cj1*x15932);
IkReal x15953=(cj4*cj5*r10);
IkReal x15954=((0.392)*x15933);
IkReal x15955=((1.0)*x15933);
IkReal x15956=(cj1*x15933);
IkReal x15957=((1.0)*cj5*sj4);
evalcond[0]=(((sj4*x15940))+(((-1.0)*r10*x15957))+(((-1.0)*r12*x15950))+x15932);
evalcond[1]=((((-1.0)*r02*x15950))+(((-1.0)*r00*x15957))+((sj4*x15944))+(((-1.0)*x15955)));
evalcond[2]=((((-0.392)*x15932*x15945))+(((-1.0)*r00*x15935))+(((-0.1)*x15943))+(((-1.0)*px))+(((0.425)*x15952))+(((-0.134)*x15933))+(((0.392)*x15932*x15946)));
evalcond[3]=((((-0.1)*x15936))+(((-1.0)*x15945*x15954))+(((0.134)*x15932))+(((-1.0)*py))+(((-1.0)*r10*x15935))+(((0.425)*x15956))+((x15946*x15954)));
evalcond[4]=((((-1.0)*x15932*x15946))+((x15932*x15945))+((cj3*x15934))+(((-1.0)*x15939*x15951))+((sj3*x15943))+((sj3*x15947))+((x15941*x15944)));
evalcond[5]=(((x15940*x15941))+((x15933*x15945))+(((-1.0)*x15946*x15955))+((cj3*x15938))+(((-1.0)*x15939*x15953))+((sj3*x15949))+((sj3*x15936)));
evalcond[6]=(((cj3*x15943))+((cj3*x15947))+(((-1.0)*x15934*x15937))+(((-1.0)*sj1*x15932*x15948))+(((-1.0)*cj4*x15937*x15944))+((sj3*x15951))+(((-1.0)*x15942*x15952)));
evalcond[7]=(((cj3*x15949))+(((-1.0)*sj1*x15933*x15948))+(((-1.0)*x15937*x15938))+((cj3*x15936))+(((-1.0)*cj4*x15937*x15940))+((sj3*x15953))+(((-1.0)*x15942*x15956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15958=cj5*cj5;
IkReal x15959=r21*r21;
IkReal x15960=r20*r20;
IkReal x15961=(r20*r21);
IkReal x15962=(sj1*sj2);
IkReal x15963=(r21*sj5);
IkReal x15964=(cj1*cj2);
IkReal x15965=(cj5*r20);
IkReal x15966=(cj5*sj5);
IkReal x15967=(cj3*r22);
IkReal x15968=(sj3*x15959);
CheckValue<IkReal> x15969 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15964))+((r20*sj5*x15967))+((cj5*r21*x15967))+((r22*x15962)))),IkReal(((((-2.0)*cj3*x15958*x15961))+(((-1.0)*cj3*x15960*x15966))+((x15962*x15963))+((x15964*x15965))+(((-1.0)*x15962*x15965))+(((-1.0)*x15963*x15964))+((cj3*x15961))+((cj3*x15959*x15966)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15969.valid){
continue;
}
CheckValue<IkReal> x15970=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x15958*x15960))+(((-2.0)*sj3*x15961*x15966))+(((-1.0)*x15958*x15968))+x15968)),-1);
if(!x15970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15969.value)+(((1.5707963267949)*(x15970.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15971=IKsin(j4);
IkReal x15972=IKcos(j4);
IkReal x15973=(cj3*r21);
IkReal x15974=(r21*sj5);
IkReal x15975=(r20*sj5);
IkReal x15976=(cj5*r20);
IkReal x15977=((1.0)*x15972);
IkReal x15978=((1.0)*x15971);
evalcond[0]=((((-1.0)*x15976*x15978))+((x15971*x15974))+(((-1.0)*r22*x15977)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+((sj5*x15972*x15973))+((cj3*r22*x15971))+(((-1.0)*cj3*x15976*x15977))+((sj3*x15975)));
evalcond[2]=(((cj5*x15973))+(((-1.0)*r22*sj3*x15978))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj3*x15975))+((sj3*x15972*x15976))+(((-1.0)*sj3*x15974*x15977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15979=(cj5*sj4);
IkReal x15980=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15979))+((r01*x15980)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15980))+((r10*x15979))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15979))+((r01*x15980))))+IKsqr(((((-1.0)*r11*x15980))+((r10*x15979))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15979))+((r01*x15980))), ((((-1.0)*r11*x15980))+((r10*x15979))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15981=IKcos(j0);
IkReal x15982=IKsin(j0);
IkReal x15983=(r02*sj4);
IkReal x15984=((0.1)*sj5);
IkReal x15985=(cj5*r11);
IkReal x15986=((1.0)*sj3);
IkReal x15987=(r12*sj4);
IkReal x15988=((1.0)*cj3);
IkReal x15989=(r11*sj5);
IkReal x15990=(cj3*cj4);
IkReal x15991=((1.0)*sj2);
IkReal x15992=(cj5*r01);
IkReal x15993=(r01*sj5);
IkReal x15994=(sj1*sj2);
IkReal x15995=(cj1*cj2);
IkReal x15996=(r00*sj5);
IkReal x15997=((1.0)*cj2);
IkReal x15998=(r10*sj5);
IkReal x15999=((1.0)*cj4);
IkReal x16000=(cj4*cj5*r00);
IkReal x16001=(cj1*x15981);
IkReal x16002=(cj4*cj5*r10);
IkReal x16003=((0.392)*x15982);
IkReal x16004=((1.0)*x15982);
IkReal x16005=(cj1*x15982);
IkReal x16006=((1.0)*cj5*sj4);
evalcond[0]=(((sj4*x15989))+(((-1.0)*r10*x16006))+(((-1.0)*r12*x15999))+x15981);
evalcond[1]=((((-1.0)*x16004))+(((-1.0)*r00*x16006))+(((-1.0)*r02*x15999))+((sj4*x15993)));
evalcond[2]=((((0.425)*x16001))+(((0.392)*x15981*x15995))+(((-0.134)*x15982))+(((-1.0)*px))+(((-0.1)*x15992))+(((-1.0)*r00*x15984))+(((-0.392)*x15981*x15994)));
evalcond[3]=((((0.425)*x16005))+(((-1.0)*x15994*x16003))+(((-1.0)*py))+((x15995*x16003))+(((-0.1)*x15985))+(((0.134)*x15981))+(((-1.0)*r10*x15984)));
evalcond[4]=(((cj3*x15983))+((sj3*x15996))+((sj3*x15992))+((x15990*x15993))+(((-1.0)*x15988*x16000))+(((-1.0)*x15981*x15995))+((x15981*x15994)));
evalcond[5]=(((cj3*x15987))+((x15989*x15990))+((x15982*x15994))+((sj3*x15998))+(((-1.0)*x15988*x16002))+((sj3*x15985))+(((-1.0)*x15995*x16004)));
evalcond[6]=((((-1.0)*sj1*x15981*x15997))+((sj3*x16000))+(((-1.0)*x15983*x15986))+(((-1.0)*cj4*x15986*x15993))+(((-1.0)*x15991*x16001))+((cj3*x15996))+((cj3*x15992)));
evalcond[7]=(((cj3*x15985))+(((-1.0)*x15986*x15987))+(((-1.0)*sj1*x15982*x15997))+((sj3*x16002))+(((-1.0)*x15991*x16005))+(((-1.0)*cj4*x15986*x15989))+((cj3*x15998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5e (fc1066ad2964d96507103505cc8abfa0)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
