/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-02-14 18:40:58.945479
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((1.0)*x11);
x13=((1.0)*x9);
x14=((0.31)*x6);
x15=((1.0)*x5);
x16=((0.1)*x11);
x17=((0.392)*x0);
x18=((0.425)*x1);
x19=((0.1)*x0);
x20=((1.0)*x0);
x21=((0.31)*x5);
x22=((0.392)*x11);
x23=(x1*x3);
x24=(x2*x4);
x25=(x0*x9);
x26=(x3*x4);
x27=(x0*x10);
x28=(x1*x2);
x29=(x10*x12);
x30=((0.1)*x26);
x31=((0.1)*x28);
x32=(x20*x23);
x33=(x12*x23);
x34=(x26+x28);
x35=((((-1.0)*x24))+(((1.0)*x23)));
x36=(x34*x5);
x37=(x35*x6);
x38=((((-1.0)*x32))+((x0*x24)));
x39=((((-1.0)*x33))+((x11*x24)));
x40=(x20*((x26+x28)));
x41=(x12*((x26+x28)));
x42=(x38*x5);
x43=(x39*x5);
x44=(x41*x6);
x45=(x40*x6);
x46=(((x35*x5))+((x6*(((((-1.0)*x26))+(((-1.0)*x28)))))));
x47=(x45+x42);
x48=(x44+x43);
x49=(((x40*x5))+((x6*((x32+(((-1.0)*x20*x24)))))));
x50=(((x6*(((((-1.0)*x12*x24))+x33))))+((x41*x5)));
x51=(x48*x9);
eerot[0]=(((x49*x8))+((x7*((((x47*x9))+(((-1.0)*x29)))))));
eerot[1]=(((x49*x7))+((x8*((x29+(((-1.0)*x13*x47)))))));
eerot[2]=(((x10*(((((-1.0)*x45))+(((-1.0)*x15*x38))))))+(((-1.0)*x12*x9)));
IkReal x52=((1.0)*x19);
eetrans[0]=(((x6*((((x19*x24))+(((-1.0)*x23*x52))))))+((x10*(((((-1.0)*x14*x40))+(((-1.0)*x21*x38))))))+((x0*x18))+((x5*(((((-1.0)*x26*x52))+(((-1.0)*x28*x52))))))+(((-1.0)*x17*x24))+((x17*x23))+(((-0.31)*x11*x9))+(((-0.134)*x11)));
eerot[3]=(((x7*((x51+x27))))+((x50*x8)));
eerot[4]=(((x50*x7))+((x8*(((((-1.0)*x10*x20))+(((-1.0)*x13*x48)))))));
eerot[5]=(x25+((x10*(((((-1.0)*x44))+(((-1.0)*x15*x39)))))));
IkReal x53=((1.0)*x16);
eetrans[1]=(((x22*x23))+((x6*((((x16*x24))+(((-1.0)*x23*x53))))))+(((0.134)*x0))+((x11*x18))+(((-1.0)*x22*x24))+(((0.31)*x25))+((x5*(((((-1.0)*x26*x53))+(((-1.0)*x28*x53))))))+((x10*(((((-1.0)*x14*x41))+(((-1.0)*x21*x39)))))));
eerot[6]=(((x7*x9*((x37+x36))))+((x46*x8)));
eerot[7]=(((x46*x7))+((x8*x9*(((((-1.0)*x37))+(((-1.0)*x36)))))));
eerot[8]=(x10*(((((-1.0)*x37))+(((-1.0)*x15*x34)))));
eetrans[2]=((0.163)+((x10*(((((-1.0)*x14*x35))+(((-1.0)*x21*x34))))))+((x6*((x31+x30))))+(((-0.392)*x26))+(((-0.392)*x28))+(((-0.425)*x4))+((x5*(((((-0.1)*x23))+(((0.1)*x24)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.31)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.31)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.163)+pz+(((-0.31)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x54=((1.0)*px);
IkReal x55=((1.0)*pz);
IkReal x56=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x56))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x55)));
rxp0_2=((((-1.0)*r10*x54))+((py*r00)));
rxp1_0=((((-1.0)*r21*x56))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x55)));
rxp1_2=((((-1.0)*r11*x54))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x56)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x55)));
rxp2_2=((((-1.0)*r12*x54))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x57=((0.2)*npx);
IkReal x58=((0.2)*npy);
IkReal x59=((0.1)*r22);
IkReal x60=((0.1)*r21);
IkReal x61=((-0.1)*r20);
IkReal x62=((-1.0)*r20);
IkReal x63=((-1.0)*rxp0_2);
IkReal x64=((-0.1)*r21);
IkReal x65=((-1.0)*r21);
IkReal x66=((-1.0)*rxp1_2);
IkReal x67=((-1.0)*npx);
IkReal x68=((-1.0)*r22);
IkReal x69=((-1.0)*npz);
matrixinvcoeffs[0]=x61;
matrixinvcoeffs[1]=x57;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x62;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x63;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x61;
matrixinvcoeffs[19]=x57;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x62;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x63;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x64;
matrixinvcoeffs[33]=x58;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x65;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x66;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x64;
matrixinvcoeffs[51]=x58;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x65;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x66;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x68;
matrixinvcoeffs[76]=x59;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x69;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x59;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x66;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x64;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x66;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x60;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x62;
matrixinvcoeffs[133]=x67;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.1)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x62;
matrixinvcoeffs[151]=x67;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x61;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x68;
matrixinvcoeffs[165]=x69;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x59;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x68;
matrixinvcoeffs[183]=x69;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.1)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x65;
matrixinvcoeffs[204]=x60;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x66;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x60;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x67;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x61;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x62;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x61;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x63;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x70=pz*pz;
IkReal x71=pp*pp;
IkReal x72=((0.2)*pz);
IkReal x73=(pp*r21);
IkReal x74=(gclwh13_10*rxp1_2);
IkReal x75=((0.00134)*r22);
IkReal x76=(npx*pz);
IkReal x77=((0.001)*r21);
IkReal x78=(pp*r20);
IkReal x79=(npy*pz);
IkReal x80=((4.0)*gclwh12_11);
IkReal x81=(gclwh10_11*r22);
IkReal x82=((0.00784)*r21);
IkReal x83=(pp*r22);
IkReal x84=(gclwh15_9*r20);
IkReal x85=(gclwh15_1*r20);
IkReal x86=(gclwh12_8*r21);
IkReal x87=((0.01)*r22);
IkReal x88=((0.2)*rxp2_2);
IkReal x89=(gclwh4_3*pp);
IkReal x90=(npz*pz);
IkReal x91=((2.0)*gclwh11_10);
IkReal x92=((0.01)*r21);
IkReal x93=(gclwh2_0*pz);
IkReal x94=(gclwh14_2*pz);
IkReal x95=(gclwh14_11*rxp0_2);
IkReal x96=((0.4)*rxp2_2);
IkReal x97=((0.00784)*r22);
IkReal x98=((1.0)*pz);
IkReal x99=((2.0)*gclwh4_11);
IkReal x100=((0.02)*r21);
IkReal x101=((0.1568)*rxp0_2);
IkReal x102=((0.0066)*rxp1_2);
IkReal x103=(gclwh8_2*r20);
IkReal x104=((0.0066)*rxp2_2);
IkReal x105=((0.01634)*r20);
IkReal x106=((9.045e-5)*r20);
IkReal x107=(gclwh14_8*r20);
IkReal x108=((0.02)*r22);
IkReal x109=((2.0)*gclwh9_10);
IkReal x110=(gclwh12_3*rxp1_2);
IkReal x111=(gclwh13_1*r21);
IkReal x112=((4.0)*gclwh14_11);
IkReal x113=((0.00268)*r20);
IkReal x114=(gclwh10_12*r22);
IkReal x115=((2.0)*gclwh13_10);
IkReal x116=((0.268)*gclwh14_14);
IkReal x117=(gclwh14_3*rxp0_2);
IkReal x118=((0.02)*rxp0_2);
IkReal x119=(gclwh12_14*r21);
IkReal x120=((2.0)*pp);
IkReal x121=((4.0)*gclwh11_10);
IkReal x122=(gclwh8_11*r20);
IkReal x123=((0.0132)*rxp2_2);
IkReal x124=((0.0132)*rxp0_2);
IkReal x125=((0.00817)*r22);
IkReal x126=(gclwh5_1*rxp2_2);
IkReal x127=((0.0268)*rxp2_2);
IkReal x128=(gclwh9_10*r20);
IkReal x129=(gclwh4_2*pz);
IkReal x130=(gclwh14_11*r20);
IkReal x131=((0.2)*rxp1_2);
IkReal x132=(gclwh5_0*rxp2_2);
IkReal x133=((0.1634)*rxp1_2);
IkReal x134=(gclwh13_15*r21);
IkReal x135=((4.0)*gclwh8_11);
IkReal x136=((0.00134)*r20);
IkReal x137=(gclwh3_3*r21);
IkReal x138=(gclwh5_1*r22);
IkReal x139=((0.0268)*rxp1_2);
IkReal x140=(gclwh7_13*r21);
IkReal x141=((2.0)*gclwh7_10);
IkReal x142=((0.0066)*rxp0_2);
IkReal x143=(gclwh13_9*rxp1_2);
IkReal x144=((0.00033)*r21);
IkReal x145=(gclwh2_1*r21);
IkReal x146=(gclwh7_0*pz);
IkReal x147=((0.536)*gclwh14_14);
IkReal x148=(gclwh6_11*rxp1_2);
IkReal x149=((0.17)*rxp2_2);
IkReal x150=((0.0536)*rxp1_2);
IkReal x151=(gclwh10_12*rxp2_2);
IkReal x152=((0.3268)*rxp1_2);
IkReal x153=((4.0)*gclwh9_10);
IkReal x154=((0.8)*rxp2_2);
IkReal x155=((0.04)*r22);
IkReal x156=((0.01634)*r21);
IkReal x157=((0.01)*r20);
IkReal x158=((4.0)*gclwh7_10);
IkReal x159=((0.1568)*rxp1_2);
IkReal x160=((0.2)*rxp0_2);
IkReal x161=((4.0)*gclwh4_11);
IkReal x162=((0.04)*r21);
IkReal x163=(gclwh10_2*r22);
IkReal x164=((0.2)*pp);
IkReal x165=(gclwh13_9*r21);
IkReal x166=((0.17)*rxp0_2);
IkReal x167=((0.268)*gclwh4_14);
IkReal x168=(gclwh12_8*rxp1_2);
IkReal x169=((0.8)*rxp0_2);
IkReal x170=((2.0)*gclwh6_11);
IkReal x171=(gclwh6_12*r21);
IkReal x172=(gclwh1_3*r20);
IkReal x173=((0.02)*rxp2_2);
IkReal x174=((0.0268)*rxp0_2);
IkReal x175=(gclwh8_2*rxp0_2);
IkReal x176=((0.1634)*rxp0_2);
IkReal x177=((2.0)*gclwh12_11);
IkReal x178=(gclwh10_2*rxp2_2);
IkReal x179=((0.1072)*rxp1_2);
IkReal x180=((2.0)*gclwh5_10);
IkReal x181=(gclwh11_0*r22);
IkReal x182=((0.268)*gclwh13_15);
IkReal x183=(gclwh10_2*pz);
IkReal x184=((0.268)*gclwh15_15);
IkReal x185=(gclwh9_0*pz);
IkReal x186=(gclwh4_3*r22);
IkReal x187=((2.0)*gclwh8_11);
IkReal x188=((2.0)*gclwh15_10);
IkReal x189=((0.268)*gclwh5_15);
IkReal x190=(gclwh4_14*rxp2_2);
IkReal x191=(gclwh4_8*r22);
IkReal x192=((0.00268)*r22);
IkReal x193=(gclwh4_3*rxp2_2);
IkReal x194=(gclwh12_3*r21);
IkReal x195=(gclwh9_0*r20);
IkReal x196=((0.00817)*r20);
IkReal x197=((0.3268)*rxp0_2);
IkReal x198=((4.0)*gclwh6_11);
IkReal x199=(gclwh12_11*rxp1_2);
IkReal x200=(gclwh11_0*pz);
IkReal x201=(gclwh5_9*r22);
IkReal x202=(gclwh5_0*pz);
IkReal x203=((0.4)*rxp0_2);
IkReal x204=((0.0132)*rxp1_2);
IkReal x205=((0.00784)*r20);
IkReal x206=((0.1568)*rxp2_2);
IkReal x207=((0.1634)*rxp2_2);
IkReal x208=((0.00675445)*r20);
IkReal x209=((0.536)*gclwh12_14);
IkReal x210=(gclwh15_1*rxp0_2);
IkReal x211=(gclwh13_0*pz);
IkReal x212=(gclwh9_13*r20);
IkReal x213=(gclwh11_13*r22);
IkReal x214=((0.1072)*rxp0_2);
IkReal x215=((0.00066)*r21);
IkReal x216=((0.536)*gclwh4_14);
IkReal x217=(gclwh5_15*rxp2_2);
IkReal x218=((0.00134)*r21);
IkReal x219=(gclwh8_12*r20);
IkReal x220=(gclwh13_1*rxp1_2);
IkReal x221=(gclwh6_2*pz);
IkReal x222=((2.0)*gclwh14_11);
IkReal x223=((0.0536)*rxp0_2);
IkReal x224=((0.268)*gclwh12_14);
IkReal x225=(gclwh12_2*pz);
IkReal x226=(gclwh14_14*x174);
IkReal x227=(gclwh6_5*x218);
IkReal x228=(gclwh4_14*x127);
IkReal x229=(gclwh10_5*x75);
IkReal x230=(gclwh8_5*x136);
IkReal x231=(gclwh12_14*x139);
IkReal x232=((0.02)*x168);
IkReal x233=(gclwh12_11*x131);
IkReal x234=(gclwh4_8*x173);
IkReal x235=(gclwh4_11*x88);
IkReal x236=(gclwh6_11*x92);
IkReal x237=((0.01)*x122);
IkReal x238=((0.01)*x81);
IkReal x239=((0.2)*x95);
IkReal x240=(gclwh14_8*x118);
IkReal x241=((0.02)*x143);
IkReal x242=(gclwh11_10*x87);
IkReal x243=(gclwh15_10*x160);
IkReal x244=((0.01)*x128);
IkReal x245=(gclwh5_9*x173);
IkReal x246=(gclwh7_10*x92);
IkReal x247=(gclwh5_10*x88);
IkReal x248=(gclwh15_9*x118);
IkReal x249=((0.2)*x74);
IkReal x250=(gclwh15_15*x174);
IkReal x251=(gclwh7_7*x218);
IkReal x252=(gclwh13_15*x139);
IkReal x253=(gclwh9_7*x136);
IkReal x254=(gclwh11_7*x75);
IkReal x255=(gclwh5_15*x127);
IkReal x256=(gclwh8_5*x174);
IkReal x257=(gclwh10_5*x127);
IkReal x258=(gclwh14_14*x136);
IkReal x259=((0.00134)*x119);
IkReal x260=(gclwh4_14*x75);
IkReal x261=(gclwh6_5*x139);
IkReal x262=(gclwh12_11*x92);
IkReal x263=(gclwh10_11*x88);
IkReal x264=((0.001)*x191);
IkReal x265=(gclwh4_11*x87);
IkReal x266=(gclwh8_11*x160);
IkReal x267=(gclwh12_8*x77);
IkReal x268=((0.001)*x107);
IkReal x269=(gclwh6_11*x131);
IkReal x270=((0.01)*x130);
IkReal x271=((0.001)*x84);
IkReal x272=(gclwh11_10*x88);
IkReal x273=(gclwh13_10*x92);
IkReal x274=(gclwh5_10*x87);
IkReal x275=(gclwh9_10*x160);
IkReal x276=((0.001)*x201);
IkReal x277=(gclwh13_9*x77);
IkReal x278=(gclwh7_10*x131);
IkReal x279=(gclwh15_10*x157);
IkReal x280=(gclwh5_15*x75);
IkReal x281=((0.00134)*x134);
IkReal x282=(gclwh7_7*x139);
IkReal x283=(gclwh11_7*x127);
IkReal x284=(gclwh9_7*x174);
IkReal x285=(gclwh15_15*x136);
IkReal x286=((0.4)*x95);
IkReal x287=((0.02)*x81);
IkReal x288=((0.02)*x122);
IkReal x289=(gclwh14_14*x223);
IkReal x290=(gclwh12_14*x150);
IkReal x291=((0.0536)*x190);
IkReal x292=(gclwh4_11*x96);
IkReal x293=(gclwh6_11*x100);
IkReal x294=((0.4)*x199);
IkReal x295=(gclwh13_15*x150);
IkReal x296=((0.0536)*x217);
IkReal x297=(gclwh15_15*x223);
IkReal x298=(gclwh11_10*x108);
IkReal x299=(gclwh15_10*x203);
IkReal x300=((0.02)*x128);
IkReal x301=((0.4)*x74);
IkReal x302=(gclwh7_10*x100);
IkReal x303=(gclwh5_10*x96);
IkReal x304=((0.02)*x130);
IkReal x305=((0.4)*x148);
IkReal x306=(gclwh14_14*x113);
IkReal x307=((0.00268)*x119);
IkReal x308=(gclwh4_14*x192);
IkReal x309=(gclwh4_11*x108);
IkReal x310=(gclwh12_11*x100);
IkReal x311=(gclwh10_11*x96);
IkReal x312=(gclwh8_11*x203);
IkReal x313=(gclwh15_9*x76);
IkReal x314=((2.0)*x70);
IkReal x315=((1.0)*x71);
IkReal x316=((0.134)*gclwh6_5*x73);
IkReal x317=((0.268)*gclwh10_5*x90);
IkReal x318=((0.268)*gclwh8_5*x76);
IkReal x319=((0.268)*gclwh6_5*x79);
IkReal x320=((0.134)*gclwh8_5*x78);
IkReal x321=((0.134)*gclwh10_5*x83);
IkReal x322=(gclwh14_2*rxp0_2*x72);
IkReal x323=((2.0)*gclwh10_11*x90);
IkReal x324=(x187*x76);
IkReal x325=(x183*x83);
IkReal x326=(x183*x87);
IkReal x327=(x110*x164);
IkReal x328=(gclwh8_2*pz*x78);
IkReal x329=(x88*x89);
IkReal x330=((0.01)*pz*x103);
IkReal x331=(gclwh12_2*rxp1_2*x72);
IkReal x332=(x117*x164);
IkReal x333=(gclwh4_2*rxp2_2*x72);
IkReal x334=(x170*x79);
IkReal x335=(x221*x92);
IkReal x336=(gclwh13_1*pp*x131);
IkReal x337=(x200*x83);
IkReal x338=(gclwh5_1*pp*x88);
IkReal x339=(x141*x79);
IkReal x340=(gclwh15_0*rxp0_2*x72);
IkReal x341=(x200*x87);
IkReal x342=(x157*x185);
IkReal x343=(x185*x78);
IkReal x344=(gclwh15_1*pp*x160);
IkReal x345=(x90*x91);
IkReal x346=(x109*x76);
IkReal x347=(x132*x72);
IkReal x348=(gclwh13_0*rxp1_2*x72);
IkReal x349=(x146*x92);
IkReal x350=((0.268)*gclwh9_7*x76);
IkReal x351=((0.134)*gclwh7_7*x73);
IkReal x352=((0.268)*gclwh11_7*x90);
IkReal x353=((0.134)*gclwh11_7*x83);
IkReal x354=((0.268)*gclwh7_7*x79);
IkReal x355=((0.134)*gclwh9_7*x78);
IkReal x356=(x224*x79);
IkReal x357=((0.134)*gclwh14_14*x78);
IkReal x358=(x167*x90);
IkReal x359=((0.134)*gclwh12_14*x73);
IkReal x360=(x116*x76);
IkReal x361=((0.134)*gclwh4_14*x83);
IkReal x362=(x78*x94);
IkReal x363=(x157*x94);
IkReal x364=((0.1)*gclwh4_8*x83);
IkReal x365=(x194*x71);
IkReal x366=(gclwh1_2*pz*x157);
IkReal x367=(gclwh3_2*pz*x92);
IkReal x368=((0.1)*gclwh12_8*x73);
IkReal x369=(x137*x71);
IkReal x370=(x172*x71);
IkReal x371=(gclwh6_2*rxp1_2*x72);
IkReal x372=(x222*x76);
IkReal x373=(x186*x71);
IkReal x374=(gclwh14_8*npx*x72);
IkReal x375=(x90*x99);
IkReal x376=(gclwh4_8*npz*x72);
IkReal x377=(gclwh12_8*npy*x72);
IkReal x378=(x178*x72);
IkReal x379=(x129*x87);
IkReal x380=(x177*x79);
IkReal x381=(x175*x72);
IkReal x382=((0.1)*gclwh14_8*x78);
IkReal x383=(x225*x92);
IkReal x384=(x211*x92);
IkReal x385=(gclwh0_0*pz*x157);
IkReal x386=(gclwh11_0*rxp2_2*x72);
IkReal x387=(x92*x93);
IkReal x388=(gclwh13_9*npy*x72);
IkReal x389=(x71*x85);
IkReal x390=(x202*x83);
IkReal x391=(x202*x87);
IkReal x392=(x211*x73);
IkReal x393=(gclwh9_0*rxp0_2*x72);
IkReal x394=((0.1)*gclwh15_9*x78);
IkReal x395=(x188*x76);
IkReal x396=(x145*x71);
IkReal x397=(gclwh5_9*npz*x72);
IkReal x398=(gclwh0_1*r20*x71);
IkReal x399=(gclwh7_0*rxp1_2*x72);
IkReal x400=((0.1)*gclwh5_9*x83);
IkReal x401=(gclwh15_9*npx*x72);
IkReal x402=((0.1)*gclwh13_9*x73);
IkReal x403=(x180*x90);
IkReal x404=(gclwh15_0*pz*x157);
IkReal x405=(x115*x79);
IkReal x406=((0.134)*gclwh13_15*x73);
IkReal x407=(x184*x76);
IkReal x408=((0.134)*gclwh5_15*x83);
IkReal x409=(x189*x90);
IkReal x410=((0.134)*gclwh15_15*x78);
IkReal x411=(x182*x79);
IkReal x412=(x187*x78);
IkReal x413=(x120*x81);
IkReal x414=(x198*x79);
IkReal x415=(x135*x76);
IkReal x416=(x170*x73);
IkReal x417=((4.0)*gclwh10_11*x90);
IkReal x418=(x83*x91);
IkReal x419=(x158*x79);
IkReal x420=(x109*x78);
IkReal x421=(x141*x73);
IkReal x422=(x153*x76);
IkReal x423=(x121*x90);
IkReal x424=(x222*x78);
IkReal x425=(x79*x80);
IkReal x426=(x161*x90);
IkReal x427=(x216*x90);
IkReal x428=(x116*x78);
IkReal x429=(x209*x79);
IkReal x430=(x224*x73);
IkReal x431=(x147*x76);
IkReal x432=(x167*x83);
IkReal x433=(x83*x99);
IkReal x434=(x177*x73);
IkReal x435=(x112*x76);
IkReal x436=(gclwh6_2*npy*x314);
IkReal x437=(gclwh6_2*x73*x98);
IkReal x438=(gclwh10_2*npz*x314);
IkReal x439=(gclwh8_2*npx*x314);
IkReal x440=(gclwh7_0*npy*x314);
IkReal x441=(gclwh9_0*npx*x314);
IkReal x442=(gclwh11_0*npz*x314);
IkReal x443=(gclwh7_0*x73*x98);
IkReal x444=(gclwh12_2*npy*x314);
IkReal x445=(gclwh3_2*npy*x314);
IkReal x446=(gclwh1_2*npx*x314);
IkReal x447=(gclwh14_3*x120*x76);
IkReal x448=(gclwh4_2*npz*x314);
IkReal x449=((2.0)*x89*x90);
IkReal x450=(gclwh12_2*x73*x98);
IkReal x451=(gclwh1_2*x78*x98);
IkReal x452=(gclwh3_3*x120*x79);
IkReal x453=(gclwh4_2*x83*x98);
IkReal x454=(gclwh1_3*x120*x76);
IkReal x455=(gclwh3_2*x73*x98);
IkReal x456=(gclwh12_3*x120*x79);
IkReal x457=(gclwh14_2*npx*x314);
IkReal x458=(gclwh14_3*r20*x315);
IkReal x459=(gclwh0_0*npx*x314);
IkReal x460=(gclwh2_0*npy*x314);
IkReal x461=(gclwh5_1*x120*x90);
IkReal x462=(gclwh13_1*x120*x79);
IkReal x463=(gclwh15_0*npx*x314);
IkReal x464=(gclwh2_1*x120*x79);
IkReal x465=(gclwh0_1*x120*x76);
IkReal x466=(gclwh5_0*npz*x314);
IkReal x467=(gclwh13_0*npy*x314);
IkReal x468=(gclwh0_0*x78*x98);
IkReal x469=(gclwh15_0*x78*x98);
IkReal x470=((1.0)*x73*x93);
IkReal x471=(x111*x315);
IkReal x472=(x138*x315);
IkReal x473=(gclwh15_1*x120*x76);
IkReal x474=(x228+x231);
IkReal x475=(x290+x291);
IkReal x476=(x255+x252);
IkReal x477=(x284+x283);
IkReal x478=(x256+x257);
IkReal x479=(x295+x296);
IkReal x480=(x334+x238+x239+x237);
IkReal x481=(x339+x243+x242+x244);
IkReal x482=(x380+x375+x269+x270);
IkReal x483=(x278+x279+x403+x405);
IkReal x484=(x285+x409+x410+x411);
IkReal x485=(x318+x317+x316+x227);
IkReal x486=(x351+x350+x352+x251);
IkReal x487=(x306+x429+x428+x427);
IkReal x488=(x357+x356+x358+x258);
IkReal x489=(x372+x265+x266+x263+x262);
IkReal x490=(x395+x274+x275+x272+x273);
IkReal x491=(x346+x345+x247+x246+x249);
IkReal x492=(x324+x323+x233+x236+x235);
IkReal x493=(x320+x321+x319+x229+x230);
IkReal x494=(x304+x305+x426+x425+x424);
IkReal x495=(x281+x280+x407+x406+x408);
IkReal x496=(x359+x360+x361+x259+x260);
IkReal x497=(x308+x307+x430+x431+x432);
IkReal x498=(x353+x355+x354+x254+x253);
IkReal x499=(x292+x293+x294+x416+x417+x415);
IkReal x500=(x302+x303+x301+x423+x422+x421);
IkReal x501=(x288+x287+x286+x412+x413+x414);
IkReal x502=(x300+x298+x299+x418+x419+x420);
IkReal x503=(x309+x311+x310+x312+x433+x434+x435);
IkReal x504=(x347+x344+x348+x349+x248+x441+x443+x442);
IkReal x505=(x333+x332+x331+x335+x240+x438+x439+x437);
IkReal x506=(x330+x325+x326+x327+x322+x328+x329+x232+x234+x436);
IkReal x507=(x338+x337+x336+x342+x343+x340+x341+x241+x245+x440);
IkReal x508=(x399+x276+x277+x401+x400+x402+x404+x469+x468+x467+x466+x465+x464+x470+x471+x472+x473);
IkReal x509=(x374+x373+x371+x370+x368+x369+x362+x363+x364+x365+x366+x367+x264+x267+x448+x445+x444+x447+x446+x72);
IkReal x510=(x382+x383+x381+x379+x378+x377+x376+x268+x449+x458+x456+x457+x454+x455+x452+x453+x450+x451);
IkReal x511=(x386+x387+x384+x385+x388+x389+x394+x397+x396+x391+x390+x393+x392+x398+x271+x459+x463+x462+x461+x460+x72);
op[0]=((((-1.0)*x493))+(((1.634)*gclwh8_12*x76))+(((0.00817)*x171))+(((-1.0)*gclwh12_8*x133))+(((-1.634)*gclwh6_12*x79))+x485+x474+((gclwh14_8*x176))+(((-0.817)*gclwh10_12*x83))+(((-0.00817)*x114))+(((-1.0)*gclwh4_8*x207))+(((-1.0)*gclwh8_12*x196))+(((0.817)*gclwh6_12*x73))+(((1.634)*gclwh10_12*x90))+(((-0.817)*gclwh8_12*x78))+(((-1.0)*x226)));
op[1]=((((-0.135089)*x110))+(((-0.135089)*x193))+(((-1.0)*x492))+((pp*x81))+(((-1.0)*x505))+x480+x506+(((-1.0)*gclwh6_11*x73))+((gclwh8_11*x78))+(((0.135089)*x117)));
op[2]=((-0.210112)+(((-1.0)*x499))+x501);
op[3]=((((0.784)*gclwh8_2*x78))+(((-1.0)*gclwh12_2*x159))+(((-1.568)*gclwh10_2*x90))+(((0.784)*gclwh10_2*x83))+((gclwh14_2*x101))+(((-1.0)*x475))+(((-1.0)*gclwh14_8*x166))+((gclwh4_8*x149))+x289+(((0.00784)*x103))+(((1.568)*gclwh6_2*x79))+(((-1.568)*gclwh8_2*x76))+(((-0.784)*gclwh6_2*x73))+((gclwh10_2*x97))+(((-1.0)*gclwh4_2*x206))+(((-1.0)*gclwh6_2*x82))+(((0.17)*x168)));
op[4]=(((gclwh6_12*x144))+(((-1.0)*x493))+(((-0.033)*gclwh8_12*x78))+(((0.066)*gclwh8_12*x76))+((gclwh12_8*x102))+(((0.033)*gclwh6_12*x73))+(((-0.033)*gclwh10_12*x83))+(((-1.0)*x474))+(((0.066)*gclwh10_12*x90))+(((-0.00033)*x219))+x226+(((-1.0)*gclwh14_8*x142))+x485+(((-0.00033)*x114))+(((-0.066)*gclwh6_12*x79))+((gclwh4_8*x104)));
op[5]=((((-1.0)*pp*x81))+((gclwh6_11*x73))+(((-1.0)*x480))+(((-1.0)*x505))+(((-0.001809)*x110))+(((0.001809)*x117))+x492+x506+(((-0.001809)*x193))+(((-1.0)*gclwh8_11*x78)));
op[6]=(((gclwh7_10*x73))+(((-1.0)*x481))+(((-0.135089)*x220))+(((-1.0)*x504))+x491+(((0.135089)*x210))+x507+(((-1.0)*gclwh9_10*x78))+(((-1.0)*gclwh11_10*x83))+(((-0.135089)*x126)));
op[7]=((((-1.634)*gclwh7_13*x79))+(((-1.0)*gclwh11_13*x125))+(((-1.0)*x498))+(((-1.0)*gclwh5_9*x207))+(((-0.817)*gclwh11_13*x83))+(((0.00817)*x140))+((gclwh15_9*x176))+(((-1.0)*gclwh9_13*x196))+x486+x476+(((-1.0)*gclwh13_9*x133))+(((0.817)*gclwh7_13*x73))+(((1.634)*gclwh11_13*x90))+(((1.634)*gclwh9_13*x76))+(((-0.817)*gclwh9_13*x78))+(((-1.0)*x250)));
op[8]=((((-1.0)*gclwh5_9*x149))+(((-0.17)*x143))+(((-0.784)*gclwh7_0*x73))+(((1.568)*gclwh7_0*x79))+(((-1.568)*gclwh11_0*x90))+(((-1.0)*x297))+(((0.00784)*x195))+((gclwh15_9*x166))+((gclwh15_0*x101))+(((-1.0)*gclwh7_0*x82))+(((-1.0)*gclwh13_0*x159))+(((-1.568)*gclwh9_0*x76))+x479+(((-0.1568)*x132))+(((0.784)*gclwh9_0*x78))+((gclwh11_0*x97))+(((0.784)*gclwh11_0*x83)));
op[9]=((-0.210112)+(((-1.0)*x500))+x502);
op[10]=((((-1.0)*x491))+(((-1.0)*x504))+(((-1.0)*gclwh7_10*x73))+(((-0.001809)*x126))+x481+x507+((gclwh11_10*x83))+(((-0.001809)*x220))+((gclwh9_10*x78))+(((0.001809)*x210)));
op[11]=((((-1.0)*x498))+(((-0.066)*gclwh7_13*x79))+((gclwh5_9*x104))+(((0.00033)*x140))+(((-1.0)*x476))+(((-0.033)*gclwh9_13*x78))+(((-0.00033)*x213))+(((-0.00033)*x212))+x250+(((0.033)*gclwh7_13*x73))+x486+(((0.066)*gclwh11_13*x90))+(((-1.0)*gclwh15_9*x142))+(((-0.033)*gclwh11_13*x83))+((gclwh13_9*x102))+(((0.066)*gclwh9_13*x76)));
op[12]=((((-1.634)*gclwh14_8*x76))+(((-1.0)*x488))+(((-0.817)*gclwh4_8*x83))+(((0.817)*gclwh14_8*x78))+(((-1.0)*gclwh6_12*x133))+(((-1.0)*gclwh4_8*x125))+(((0.1634)*x151))+x496+x478+(((-0.00817)*x86))+((gclwh8_12*x176))+(((-1.0)*x261))+(((-0.817)*gclwh12_8*x73))+(((1.634)*gclwh12_8*x79))+(((0.00817)*x107))+(((1.634)*gclwh4_8*x90)));
op[13]=((-0.685445)+(((1.35089)*gclwh3_3*x79))+(((1.35089)*gclwh1_3*x76))+(((-1.0)*x489))+(((0.665445)*gclwh14_3*x78))+(((-1.0)*gclwh4_11*x83))+(((0.00675445)*x137))+(((-0.685445)*gclwh3_3*x73))+(((-0.665445)*gclwh4_3*x83))+(((-1.35089)*gclwh14_3*x76))+(((-1.0)*gclwh12_11*x73))+(((1.35089)*gclwh4_3*x90))+(((-0.00675445)*x186))+x482+(((-0.685445)*gclwh1_3*x78))+((gclwh14_11*x78))+(((-0.665445)*gclwh12_3*x73))+(((-0.00675445)*x194))+(((1.35089)*gclwh12_3*x79))+x509+((gclwh14_3*x208))+(((-1.0)*x510))+(((0.00675445)*x172)));
op[14]=((-0.089834)+(((-1.0)*x503))+x494);
op[15]=((((-1.0)*gclwh4_2*x97))+(((1.568)*gclwh12_2*x79))+(((-1.0)*x497))+(((-0.784)*gclwh3_2*x73))+(((-1.0)*gclwh8_2*x101))+(((-0.784)*gclwh4_2*x83))+(((-1.7)*gclwh4_8*x90))+(((-1.0)*gclwh12_2*x82))+(((1.7)*gclwh14_8*x76))+(((1.568)*gclwh3_2*x79))+(((-0.1568)*x178))+(((-1.568)*gclwh14_2*x76))+(((0.0085)*x191))+(((-0.0085)*x107))+(((0.85)*gclwh4_8*x83))+((gclwh3_2*x82))+x487+(((-0.784)*gclwh1_2*x78))+(((-1.7)*gclwh12_8*x79))+((gclwh14_2*x205))+((gclwh1_2*x205))+(((-0.784)*gclwh12_2*x73))+(((0.784)*gclwh14_2*x78))+((gclwh6_2*x159))+(((0.0085)*x86))+(((1.568)*gclwh1_2*x76))+(((-0.85)*gclwh14_8*x78))+(((0.85)*gclwh12_8*x73))+(((1.568)*gclwh4_2*x90)));
op[16]=((((0.066)*gclwh14_8*x76))+(((-1.0)*x496))+((gclwh10_12*x104))+(((-0.066)*gclwh12_8*x79))+(((-0.066)*gclwh4_8*x90))+(((-1.0)*gclwh6_12*x102))+(((-0.033)*gclwh14_8*x78))+(((0.00033)*x191))+x488+x478+(((-0.00033)*x107))+((gclwh8_12*x142))+(((-1.0)*x261))+(((0.033)*gclwh12_8*x73))+(((0.00033)*x86))+(((0.033)*gclwh4_8*x83)));
op[17]=((0.019045)+(((0.01809)*gclwh12_3*x79))+(((-0.019045)*gclwh3_3*x73))+((gclwh1_3*x106))+(((-1.0)*x482))+(((-0.01809)*gclwh14_3*x76))+(((0.01809)*gclwh4_3*x90))+(((-0.019045)*gclwh1_3*x78))+((gclwh14_3*x106))+(((0.000955)*gclwh12_3*x73))+(((0.01809)*gclwh3_3*x79))+((gclwh12_11*x73))+(((-0.000955)*gclwh14_3*x78))+((gclwh4_11*x83))+(((-9.045e-5)*x194))+(((9.045e-5)*x137))+x489+(((-9.045e-5)*x186))+(((0.000955)*gclwh4_3*x83))+x509+(((0.01809)*gclwh1_3*x76))+(((-1.0)*x510))+(((-1.0)*gclwh14_11*x78)));
op[18]=((0.685445)+(((-1.35089)*gclwh5_1*x90))+(((-1.0)*gclwh13_10*x73))+(((-1.0)*x490))+(((-1.0)*gclwh5_10*x83))+(((0.665445)*gclwh5_1*x83))+(((0.00675445)*x145))+((gclwh0_1*x208))+(((1.35089)*gclwh2_1*x79))+(((-1.0)*x508))+(((0.00675445)*x138))+(((-0.685445)*gclwh2_1*x73))+(((0.665445)*gclwh13_1*x73))+(((-0.685445)*gclwh0_1*x78))+(((0.00675445)*x111))+(((1.35089)*gclwh0_1*x76))+x483+(((-1.35089)*gclwh13_1*x79))+x511+((gclwh15_10*x78))+(((-0.665445)*gclwh15_1*x78))+(((1.35089)*gclwh15_1*x76))+(((-0.00675445)*x85)));
op[19]=((((-1.0)*x495))+(((-0.817)*gclwh15_9*x78))+((gclwh5_9*x125))+((gclwh7_13*x133))+(((0.817)*gclwh13_9*x73))+(((0.00817)*x165))+(((-1.0)*x477))+(((-1.0)*gclwh9_13*x176))+(((-1.634)*gclwh13_9*x79))+x282+(((-1.634)*gclwh5_9*x90))+x484+(((-1.0)*gclwh11_13*x207))+(((1.634)*x313))+(((-0.00817)*x84))+(((0.817)*gclwh5_9*x83)));
op[20]=((((-0.85)*gclwh15_9*x78))+(((-1.7)*gclwh13_9*x79))+(((0.0085)*x165))+(((-0.784)*gclwh15_0*x78))+(((-1.7)*gclwh5_9*x90))+((gclwh2_0*x82))+(((1.568)*gclwh0_0*x76))+((gclwh0_0*x205))+(((-1.568)*gclwh5_0*x90))+(((0.784)*gclwh5_0*x83))+(((-1.568)*gclwh13_0*x79))+(((0.85)*gclwh5_9*x83))+((gclwh5_0*x97))+(((-0.536)*gclwh15_15*x76))+(((-1.0)*x182*x73))+(((-0.0085)*x84))+((x184*x78))+(((0.0085)*x201))+(((0.536)*gclwh5_15*x90))+(((-1.0)*gclwh7_0*x159))+(((1.568)*gclwh15_0*x76))+((gclwh11_0*x206))+(((1.568)*gclwh2_0*x79))+(((0.536)*gclwh13_15*x79))+(((-1.0)*x189*x83))+(((0.85)*gclwh13_9*x73))+(((-1.0)*gclwh15_0*x205))+((gclwh9_0*x101))+(((0.784)*gclwh13_0*x73))+(((-0.00268)*x134))+(((-0.784)*gclwh2_0*x73))+(((-0.784)*gclwh0_0*x78))+((gclwh15_15*x113))+((gclwh13_0*x82))+(((1.7)*x313))+(((-1.0)*gclwh5_15*x192)));
op[21]=((-0.089834)+(((-4.0)*gclwh5_10*x90))+((gclwh9_10*x203))+((x180*x83))+((x115*x73))+(((-0.4)*gclwh7_10*rxp1_2))+((gclwh5_10*x108))+(((-4.0)*gclwh13_10*x79))+((gclwh13_10*x100))+((gclwh11_10*x96))+(((-1.0)*x188*x78))+(((4.0)*gclwh15_10*x76))+(((-0.02)*gclwh15_10*r20)));
op[22]=((-0.019045)+(((-9.045e-5)*x85))+((gclwh0_1*x106))+((gclwh5_10*x83))+(((-0.000955)*gclwh5_1*x83))+(((-0.000955)*gclwh13_1*x73))+(((-0.019045)*gclwh2_1*x73))+(((-1.0)*x483))+(((-1.0)*x508))+(((-0.019045)*gclwh0_1*x78))+((gclwh13_10*x73))+(((0.01809)*gclwh0_1*x76))+(((9.045e-5)*x111))+(((0.000955)*gclwh15_1*x78))+(((9.045e-5)*x138))+(((-0.01809)*gclwh13_1*x79))+x490+(((9.045e-5)*x145))+x511+(((0.01809)*gclwh2_1*x79))+(((-0.01809)*gclwh5_1*x90))+(((0.01809)*gclwh15_1*x76))+(((-1.0)*gclwh15_10*x78)));
op[23]=(((gclwh7_13*x102))+(((-0.00033)*x201))+(((-1.0)*gclwh9_13*x142))+(((-0.033)*gclwh5_9*x83))+(((-1.0)*x484))+(((-1.0)*gclwh13_9*x144))+(((0.066)*gclwh5_9*x90))+(((-1.0)*gclwh11_13*x104))+(((0.033)*gclwh15_9*x78))+(((-1.0)*x477))+x282+x495+(((0.066)*gclwh13_9*x79))+(((-0.033)*gclwh13_9*x73))+(((-0.066)*x313))+(((0.00033)*x84)));
op[24]=((-0.437912)+(((-1.0)*x499))+x501);
op[25]=((((1.634)*gclwh10_2*x83))+(((-1.0)*gclwh12_2*x152))+(((-0.3268)*gclwh4_2*rxp2_2))+(((-1.0)*x475))+(((-1.0)*gclwh6_2*x156))+(((0.01634)*x163))+(((1.634)*gclwh8_2*x78))+x289+(((-3.268)*gclwh10_2*x90))+(((3.268)*gclwh6_2*x79))+(((0.01634)*x103))+((gclwh14_2*x197))+(((-3.268)*gclwh8_2*x76))+(((-1.634)*gclwh6_2*x73)));
op[26]=((((-3.136)*gclwh8_12*x76))+((gclwh14_14*x214))+(((1.568)*gclwh10_12*x83))+(((3.136)*gclwh6_12*x79))+(((-0.01568)*x171))+(((1.568)*gclwh8_12*x78))+(((-1.0)*gclwh12_14*x179))+(((0.01568)*x114))+(((0.01568)*x219))+(((-3.136)*gclwh10_12*x90))+(((-0.1072)*x190))+(((-1.568)*gclwh6_12*x73)));
op[27]=(((x198*x73))+(((-0.8)*x95))+(((-0.04)*x122))+(((-1.0)*x135*x78))+(((8.0)*gclwh8_11*x76))+(((-0.04)*x81))+(((0.8)*x199))+(((8.0)*gclwh10_11*x90))+(((-4.0)*pp*x81))+((gclwh4_11*x154))+(((-8.0)*gclwh6_11*x79))+((gclwh6_11*x162)));
op[28]=((-0.017688)+(((-1.0)*x501))+x499);
op[29]=((((-1.0)*gclwh4_2*x123))+(((-0.066)*gclwh6_2*x73))+(((0.00066)*x103))+(((0.066)*gclwh10_2*x83))+(((0.066)*gclwh8_2*x78))+(((-0.132)*gclwh8_2*x76))+(((0.132)*gclwh6_2*x79))+(((-0.132)*gclwh10_2*x90))+((gclwh14_2*x124))+(((-1.0)*gclwh12_2*x204))+(((0.00066)*x163))+x475+(((-1.0)*x289))+(((-1.0)*gclwh6_2*x215)));
op[30]=((((3.268)*gclwh7_0*x79))+(((-0.3268)*x132))+(((-1.634)*gclwh7_0*x73))+(((-1.0)*x297))+(((0.01634)*x181))+((gclwh15_0*x197))+(((-3.268)*gclwh11_0*x90))+(((1.634)*gclwh11_0*x83))+(((-3.268)*gclwh9_0*x76))+(((-1.0)*gclwh13_0*x152))+x479+(((-1.0)*gclwh7_0*x156))+((gclwh9_0*x105))+(((1.634)*gclwh9_0*x78)));
op[31]=((-0.437912)+(((-1.0)*x500))+x502);
op[32]=((((-1.0)*x158*x73))+(((-0.8)*x74))+((x153*x78))+((gclwh15_10*x169))+((gclwh11_10*x155))+(((-1.0)*gclwh5_10*x154))+((x121*x83))+(((-8.0)*gclwh9_10*x76))+(((8.0)*gclwh7_10*x79))+(((-1.0)*gclwh7_10*x162))+(((0.04)*x128))+(((-8.0)*gclwh11_10*x90)));
op[33]=((((-3.136)*gclwh9_13*x76))+(((-3.136)*gclwh11_13*x90))+(((1.568)*gclwh11_13*x83))+(((3.136)*gclwh7_13*x79))+(((-1.568)*gclwh7_13*x73))+((gclwh15_15*x214))+(((-0.01568)*x140))+(((-1.0)*gclwh13_15*x179))+(((0.01568)*x212))+(((0.01568)*x213))+(((-0.1072)*x217))+(((1.568)*gclwh9_13*x78)));
op[34]=((((0.066)*gclwh11_0*x83))+(((-0.066)*gclwh7_0*x73))+(((0.00066)*x195))+((gclwh15_0*x124))+(((-1.0)*gclwh5_0*x123))+(((-1.0)*gclwh13_0*x204))+(((0.00066)*x181))+(((-1.0)*x479))+(((-1.0)*gclwh7_0*x215))+(((0.066)*gclwh9_0*x78))+(((-0.132)*gclwh9_0*x76))+x297+(((0.132)*gclwh7_0*x79))+(((-0.132)*gclwh11_0*x90)));
op[35]=((-0.017688)+(((-1.0)*x502))+x500);
op[36]=((1.299066)+(((-1.0)*x503))+x494);
op[37]=((((-1.634)*gclwh4_2*x83))+(((3.268)*gclwh12_2*x79))+(((-1.0)*x497))+(((-1.0)*gclwh12_2*x156))+((gclwh14_2*x105))+(((3.268)*gclwh3_2*x79))+(((3.268)*gclwh1_2*x76))+(((-0.3268)*x178))+(((-0.3268)*x175))+(((-3.268)*gclwh14_2*x76))+x487+(((-1.634)*gclwh1_2*x78))+(((-0.01634)*gclwh4_2*r22))+((gclwh1_2*x105))+(((-1.634)*gclwh3_2*x73))+(((3.268)*gclwh4_2*x90))+((gclwh3_2*x156))+(((1.634)*gclwh14_2*x78))+((gclwh6_2*x152))+(((-1.634)*gclwh12_2*x73)));
op[38]=((((0.3136)*gclwh6_12*rxp1_2))+(((-0.00536)*gclwh4_14*r22))+(((-0.3136)*x151))+(((-1.0)*x216*x83))+(((-0.3136)*gclwh8_12*rxp0_2))+(((-1.0)*x209*x73))+(((-1.072)*gclwh14_14*x76))+(((-0.00536)*x119))+(((1.072)*gclwh4_14*x90))+(((0.00536)*gclwh14_14*r20))+(((1.072)*gclwh12_14*x79))+((x147*x78)));
op[39]=((-0.03602)+((gclwh10_11*x154))+(((-0.8)*x148))+((x161*x83))+(((-1.0)*x112*x78))+(((-0.04)*x130))+(((-8.0)*gclwh12_11*x79))+(((-8.0)*gclwh4_11*x90))+((x73*x80))+(((8.0)*gclwh14_11*x76))+((gclwh12_11*x162))+((gclwh4_11*x155))+((gclwh8_11*x169)));
op[40]=((0.033734)+(((-1.0)*x494))+x503);
IkReal x512=pz*pz;
IkReal x513=pp*pp;
IkReal x514=((0.2)*pz);
IkReal x515=(pp*r21);
IkReal x516=((0.2)*rxp1_2);
IkReal x517=((0.00134)*r22);
IkReal x518=((0.066)*pz);
IkReal x519=(gclwh14_8*npx);
IkReal x520=((0.001)*r21);
IkReal x521=(pp*r20);
IkReal x522=(gclwh13_10*r21);
IkReal x523=(gclwh5_0*r22);
IkReal x524=((0.0132)*rxp2_2);
IkReal x525=((2.0)*pz);
IkReal x526=(gclwh7_10*npy);
IkReal x527=((0.02)*r22);
IkReal x528=((0.00784)*r21);
IkReal x529=(gclwh15_9*r20);
IkReal x530=(gclwh15_1*r20);
IkReal x531=(gclwh12_8*r21);
IkReal x532=((0.01)*r22);
IkReal x533=(gclwh6_12*npy);
IkReal x534=((0.2)*rxp2_2);
IkReal x535=(gclwh4_3*pp);
IkReal x536=(npz*pz);
IkReal x537=(gclwh2_0*pz);
IkReal x538=((0.01)*r21);
IkReal x539=(gclwh14_2*pz);
IkReal x540=((0.2)*rxp0_2);
IkReal x541=(gclwh8_2*pz);
IkReal x542=((0.00784)*r22);
IkReal x543=((1.0)*pz);
IkReal x544=(gclwh9_13*rxp0_2);
IkReal x545=(npx*pz);
IkReal x546=((0.1568)*rxp0_2);
IkReal x547=(npy*pz);
IkReal x548=((0.784)*pp);
IkReal x549=((0.0066)*rxp1_2);
IkReal x550=((0.536)*gclwh15_15);
IkReal x551=(pp*r22);
IkReal x552=((0.0066)*rxp2_2);
IkReal x553=((0.536)*gclwh5_15);
IkReal x554=(gclwh12_8*npy);
IkReal x555=((9.045e-5)*r20);
IkReal x556=(gclwh14_8*r20);
IkReal x557=(gclwh4_2*pz);
IkReal x558=(gclwh12_3*rxp1_2);
IkReal x559=(gclwh13_1*r21);
IkReal x560=((0.0132)*rxp1_2);
IkReal x561=(gclwh15_15*r20);
IkReal x562=((0.268)*gclwh14_14);
IkReal x563=((0.135089)*rxp0_2);
IkReal x564=((0.02)*rxp0_2);
IkReal x565=(gclwh12_14*r21);
IkReal x566=((0.00066)*r21);
IkReal x567=(gclwh5_1*pp);
IkReal x568=(gclwh8_11*r20);
IkReal x569=((0.02)*r21);
IkReal x570=((0.00817)*r22);
IkReal x571=(gclwh7_0*rxp1_2);
IkReal x572=((0.001809)*rxp2_2);
IkReal x573=(gclwh4_14*rxp2_2);
IkReal x574=((4.0)*gclwh15_10);
IkReal x575=((0.00066)*r20);
IkReal x576=(gclwh9_10*rxp0_2);
IkReal x577=(gclwh14_11*r20);
IkReal x578=((0.00033)*r22);
IkReal x579=((0.1634)*rxp1_2);
IkReal x580=(gclwh13_15*r21);
IkReal x581=((0.00134)*r20);
IkReal x582=(gclwh3_3*r21);
IkReal x583=(gclwh5_1*r22);
IkReal x584=(gclwh7_13*r21);
IkReal x585=(gclwh13_9*rxp1_2);
IkReal x586=((0.00033)*r21);
IkReal x587=(gclwh7_0*pz);
IkReal x588=(gclwh14_8*rxp0_2);
IkReal x589=((0.17)*rxp2_2);
IkReal x590=((0.0536)*rxp1_2);
IkReal x591=((0.1634)*rxp2_2);
IkReal x592=((0.1568)*rxp2_2);
IkReal x593=((0.01)*r20);
IkReal x594=((0.01634)*r21);
IkReal x595=(gclwh7_10*rxp1_2);
IkReal x596=(gclwh12_3*pp);
IkReal x597=(gclwh13_9*r21);
IkReal x598=((0.268)*gclwh4_14);
IkReal x599=(gclwh12_8*rxp1_2);
IkReal x600=((0.4)*rxp2_2);
IkReal x601=((0.0132)*rxp0_2);
IkReal x602=((0.00784)*r20);
IkReal x603=(gclwh1_3*r20);
IkReal x604=(gclwh14_3*pp);
IkReal x605=((0.02)*rxp2_2);
IkReal x606=((0.0268)*rxp0_2);
IkReal x607=(gclwh15_9*rxp0_2);
IkReal x608=((0.1568)*rxp1_2);
IkReal x609=((0.0268)*rxp1_2);
IkReal x610=((0.536)*gclwh13_15);
IkReal x611=(gclwh2_1*r21);
IkReal x612=((0.02)*r20);
IkReal x613=((0.4)*rxp1_2);
IkReal x614=((0.01634)*r20);
IkReal x615=((0.268)*gclwh13_15);
IkReal x616=(gclwh10_2*pz);
IkReal x617=(gclwh15_0*pz);
IkReal x618=((0.268)*gclwh15_15);
IkReal x619=(gclwh5_15*r22);
IkReal x620=(gclwh8_12*rxp0_2);
IkReal x621=(gclwh9_0*pz);
IkReal x622=(gclwh4_3*r22);
IkReal x623=((0.268)*gclwh5_15);
IkReal x624=((0.0268)*rxp2_2);
IkReal x625=(gclwh4_8*r22);
IkReal x626=((1.634)*pz);
IkReal x627=((4.0)*gclwh5_10);
IkReal x628=(npx*pp);
IkReal x629=((4.0)*gclwh13_10);
IkReal x630=(gclwh12_3*r21);
IkReal x631=(gclwh4_2*r22);
IkReal x632=((0.00817)*r20);
IkReal x633=((1.568)*npx);
IkReal x634=(gclwh0_1*r20);
IkReal x635=(npy*pp);
IkReal x636=(gclwh13_9*npy);
IkReal x637=(gclwh11_0*pz);
IkReal x638=(gclwh5_9*r22);
IkReal x639=((0.4)*rxp0_2);
IkReal x640=((0.135089)*rxp2_2);
IkReal x641=(gclwh13_0*pz);
IkReal x642=(gclwh14_3*r20);
IkReal x643=((0.00033)*r20);
IkReal x644=((0.00134)*r21);
IkReal x645=(gclwh13_1*rxp1_2);
IkReal x646=(gclwh6_2*pz);
IkReal x647=((0.0536)*rxp0_2);
IkReal x648=((0.001809)*rxp0_2);
IkReal x649=((0.268)*gclwh12_14);
IkReal x650=(gclwh12_2*pz);
IkReal x651=((0.00268)*x619);
IkReal x652=((0.00268)*x580);
IkReal x653=((0.00268)*x561);
IkReal x654=((0.4)*x595);
IkReal x655=(gclwh15_10*x612);
IkReal x656=((0.4)*x576);
IkReal x657=(gclwh5_10*x527);
IkReal x658=(gclwh11_10*x600);
IkReal x659=((0.02)*x522);
IkReal x660=((0.0268)*x573);
IkReal x661=(gclwh6_5*x644);
IkReal x662=(gclwh12_14*x609);
IkReal x663=(gclwh14_14*x606);
IkReal x664=(gclwh10_5*x517);
IkReal x665=(gclwh8_5*x581);
IkReal x666=((0.01)*x568);
IkReal x667=((0.02)*x599);
IkReal x668=(gclwh10_11*x532);
IkReal x669=(gclwh14_11*x540);
IkReal x670=(gclwh4_8*x605);
IkReal x671=(gclwh14_8*x564);
IkReal x672=(gclwh12_11*x516);
IkReal x673=(gclwh4_11*x534);
IkReal x674=(gclwh6_11*x538);
IkReal x675=((0.02)*x585);
IkReal x676=(gclwh7_10*x538);
IkReal x677=(gclwh5_10*x534);
IkReal x678=(gclwh5_9*x605);
IkReal x679=(gclwh13_10*x516);
IkReal x680=(gclwh11_10*x532);
IkReal x681=(gclwh15_10*x540);
IkReal x682=(gclwh9_10*x593);
IkReal x683=(gclwh15_9*x564);
IkReal x684=(gclwh13_15*x609);
IkReal x685=(gclwh5_15*x624);
IkReal x686=(gclwh7_7*x644);
IkReal x687=(gclwh15_15*x606);
IkReal x688=(gclwh9_7*x581);
IkReal x689=(gclwh11_7*x517);
IkReal x690=((0.00268)*x565);
IkReal x691=((0.00268)*gclwh4_14*r22);
IkReal x692=((0.00268)*gclwh14_14*r20);
IkReal x693=((0.00134)*x565);
IkReal x694=(gclwh8_5*x606);
IkReal x695=(gclwh10_5*x624);
IkReal x696=(gclwh4_14*x517);
IkReal x697=(gclwh6_5*x609);
IkReal x698=(gclwh14_14*x581);
IkReal x699=((0.001)*x625);
IkReal x700=(gclwh6_11*x516);
IkReal x701=((0.01)*x577);
IkReal x702=(gclwh12_8*x520);
IkReal x703=(gclwh12_11*x538);
IkReal x704=(gclwh10_11*x534);
IkReal x705=((0.001)*x556);
IkReal x706=(gclwh4_11*x532);
IkReal x707=(gclwh8_11*x540);
IkReal x708=((0.001)*x529);
IkReal x709=(gclwh7_10*x516);
IkReal x710=(gclwh15_10*x593);
IkReal x711=((0.001)*x638);
IkReal x712=(gclwh11_10*x534);
IkReal x713=(gclwh13_9*x520);
IkReal x714=((0.01)*x522);
IkReal x715=(gclwh5_10*x532);
IkReal x716=(gclwh9_10*x540);
IkReal x717=((0.00134)*x561);
IkReal x718=(gclwh7_7*x609);
IkReal x719=(gclwh11_7*x624);
IkReal x720=(gclwh5_15*x517);
IkReal x721=((0.00134)*x580);
IkReal x722=(gclwh9_7*x606);
IkReal x723=(gclwh15_9*x545);
IkReal x724=((2.0)*x512);
IkReal x725=((1.0)*x513);
IkReal x726=(x515*x615);
IkReal x727=(x551*x623);
IkReal x728=(x545*x550);
IkReal x729=(x521*x618);
IkReal x730=(x536*x553);
IkReal x731=(x547*x610);
IkReal x732=((2.0)*gclwh15_10*x521);
IkReal x733=(x536*x627);
IkReal x734=(x547*x629);
IkReal x735=((2.0)*gclwh13_10*x515);
IkReal x736=(x545*x574);
IkReal x737=((2.0)*gclwh5_10*x551);
IkReal x738=((0.134)*gclwh6_5*x515);
IkReal x739=((0.268)*gclwh10_5*x536);
IkReal x740=((0.268)*gclwh8_5*x545);
IkReal x741=((0.268)*gclwh6_5*x547);
IkReal x742=((0.134)*gclwh8_5*x521);
IkReal x743=((0.134)*gclwh10_5*x551);
IkReal x744=(gclwh14_2*rxp0_2*x514);
IkReal x745=(gclwh6_11*npy*x525);
IkReal x746=(x551*x616);
IkReal x747=(x532*x616);
IkReal x748=(x516*x596);
IkReal x749=(x521*x541);
IkReal x750=(x534*x535);
IkReal x751=(x541*x593);
IkReal x752=(gclwh12_2*rxp1_2*x514);
IkReal x753=(x540*x604);
IkReal x754=(gclwh4_2*rxp2_2*x514);
IkReal x755=(gclwh10_11*npz*x525);
IkReal x756=(x538*x646);
IkReal x757=(gclwh8_11*npx*x525);
IkReal x758=(gclwh11_10*npz*x525);
IkReal x759=(gclwh9_10*npx*x525);
IkReal x760=(gclwh13_1*pp*x516);
IkReal x761=(x551*x637);
IkReal x762=(x534*x567);
IkReal x763=(gclwh15_0*rxp0_2*x514);
IkReal x764=(x532*x637);
IkReal x765=(x593*x621);
IkReal x766=(x521*x621);
IkReal x767=(gclwh15_1*pp*x540);
IkReal x768=(gclwh5_0*rxp2_2*x514);
IkReal x769=(gclwh13_0*rxp1_2*x514);
IkReal x770=(x538*x587);
IkReal x771=(x525*x526);
IkReal x772=((0.268)*gclwh9_7*x545);
IkReal x773=((0.134)*gclwh7_7*x515);
IkReal x774=((0.268)*gclwh11_7*x536);
IkReal x775=((0.134)*gclwh11_7*x551);
IkReal x776=((0.268)*gclwh7_7*x547);
IkReal x777=((0.134)*gclwh9_7*x521);
IkReal x778=(x515*x649);
IkReal x779=((0.536)*gclwh14_14*x545);
IkReal x780=(x551*x598);
IkReal x781=((0.536)*gclwh4_14*x536);
IkReal x782=(x521*x562);
IkReal x783=((0.536)*gclwh12_14*x547);
IkReal x784=((0.134)*gclwh12_14*x515);
IkReal x785=(x545*x562);
IkReal x786=((0.134)*gclwh4_14*x551);
IkReal x787=(x547*x649);
IkReal x788=((0.134)*gclwh14_14*x521);
IkReal x789=(x536*x598);
IkReal x790=(x521*x539);
IkReal x791=(x539*x593);
IkReal x792=((0.1)*gclwh4_8*x551);
IkReal x793=(x513*x630);
IkReal x794=(gclwh1_2*pz*x593);
IkReal x795=(gclwh3_2*pz*x538);
IkReal x796=(gclwh4_11*npz*x525);
IkReal x797=((0.1)*gclwh12_8*x515);
IkReal x798=(x513*x582);
IkReal x799=(x513*x603);
IkReal x800=(gclwh6_2*rxp1_2*x514);
IkReal x801=(x513*x622);
IkReal x802=(gclwh12_11*npy*x525);
IkReal x803=(x514*x519);
IkReal x804=(gclwh4_8*npz*x514);
IkReal x805=(gclwh14_11*npx*x525);
IkReal x806=(x514*x554);
IkReal x807=(gclwh10_2*rxp2_2*x514);
IkReal x808=(x532*x557);
IkReal x809=(gclwh8_2*rxp0_2*x514);
IkReal x810=((0.1)*gclwh14_8*x521);
IkReal x811=(x538*x650);
IkReal x812=(x538*x641);
IkReal x813=(gclwh0_0*pz*x593);
IkReal x814=(gclwh11_0*rxp2_2*x514);
IkReal x815=(x537*x538);
IkReal x816=(x514*x636);
IkReal x817=(x513*x530);
IkReal x818=(pp*pz*x523);
IkReal x819=((0.01)*pz*x523);
IkReal x820=(x515*x641);
IkReal x821=(gclwh9_0*rxp0_2*x514);
IkReal x822=((0.1)*gclwh15_9*x521);
IkReal x823=(x513*x611);
IkReal x824=(gclwh5_10*npz*x525);
IkReal x825=(gclwh13_10*npy*x525);
IkReal x826=(gclwh5_9*npz*x514);
IkReal x827=(x513*x634);
IkReal x828=(x514*x571);
IkReal x829=((0.1)*gclwh5_9*x551);
IkReal x830=(gclwh15_9*npx*x514);
IkReal x831=((0.1)*gclwh13_9*x515);
IkReal x832=(gclwh15_10*npx*x525);
IkReal x833=(x593*x617);
IkReal x834=(x536*x623);
IkReal x835=((0.134)*gclwh15_15*x521);
IkReal x836=(x547*x615);
IkReal x837=((0.134)*gclwh13_15*x515);
IkReal x838=(x545*x618);
IkReal x839=((0.134)*gclwh5_15*x551);
IkReal x840=(gclwh6_2*npy*x724);
IkReal x841=(gclwh6_2*x515*x543);
IkReal x842=(gclwh10_2*npz*x724);
IkReal x843=(gclwh8_2*npx*x724);
IkReal x844=(gclwh7_0*npy*x724);
IkReal x845=(gclwh9_0*npx*x724);
IkReal x846=(gclwh11_0*npz*x724);
IkReal x847=(gclwh7_0*x515*x543);
IkReal x848=(gclwh12_2*npy*x724);
IkReal x849=(gclwh3_2*npy*x724);
IkReal x850=(gclwh1_2*npx*x724);
IkReal x851=(npx*x525*x604);
IkReal x852=(gclwh4_2*npz*x724);
IkReal x853=(npz*x525*x535);
IkReal x854=(gclwh12_2*x515*x543);
IkReal x855=(gclwh1_2*x521*x543);
IkReal x856=(gclwh3_3*x525*x635);
IkReal x857=(gclwh4_2*x543*x551);
IkReal x858=(gclwh1_3*x525*x628);
IkReal x859=(gclwh3_2*x515*x543);
IkReal x860=(npy*x525*x596);
IkReal x861=(gclwh14_2*npx*x724);
IkReal x862=(x642*x725);
IkReal x863=(gclwh0_0*npx*x724);
IkReal x864=(gclwh2_0*npy*x724);
IkReal x865=(npz*x525*x567);
IkReal x866=(gclwh13_1*x525*x635);
IkReal x867=(gclwh15_0*npx*x724);
IkReal x868=(gclwh2_1*x525*x635);
IkReal x869=(gclwh0_1*x525*x628);
IkReal x870=(gclwh5_0*npz*x724);
IkReal x871=(gclwh13_0*npy*x724);
IkReal x872=(gclwh0_0*x521*x543);
IkReal x873=(gclwh15_0*x521*x543);
IkReal x874=((1.0)*x515*x537);
IkReal x875=(x559*x725);
IkReal x876=(x583*x725);
IkReal x877=(gclwh15_1*x525*x628);
IkReal x878=(x694+x695);
IkReal x879=(x685+x684);
IkReal x880=(x719+x722);
IkReal x881=(x660+x662);
IkReal x882=(x669+x668+x666+x745);
IkReal x883=(x682+x681+x680+x771);
IkReal x884=(x710+x709+x825+x824);
IkReal x885=(x700+x701+x796+x802);
IkReal x886=(x653+x731+x730+x729);
IkReal x887=(x717+x834+x835+x836);
IkReal x888=(x661+x739+x738+x740);
IkReal x889=(x692+x782+x783+x781);
IkReal x890=(x698+x787+x788+x789);
IkReal x891=(x686+x773+x772+x774);
IkReal x892=(x703+x706+x707+x704+x805);
IkReal x893=(x712+x715+x714+x716+x832);
IkReal x894=(x679+x676+x677+x759+x758);
IkReal x895=(x672+x673+x674+x755+x757);
IkReal x896=(x654+x655+x734+x733+x732);
IkReal x897=(x690+x691+x779+x778+x780);
IkReal x898=(x665+x664+x742+x743+x741);
IkReal x899=(x720+x721+x837+x838+x839);
IkReal x900=(x689+x688+x777+x776+x775);
IkReal x901=(x696+x693+x786+x784+x785);
IkReal x902=(x651+x652+x726+x727+x728);
IkReal x903=(x656+x657+x658+x659+x737+x736+x735);
IkReal x904=(x683+x770+x768+x769+x767+x845+x847+x846);
IkReal x905=(x671+x754+x756+x753+x752+x841+x843+x842);
IkReal x906=(x678+x675+x764+x765+x766+x760+x761+x762+x763+x844);
IkReal x907=(x667+x670+x751+x750+x746+x747+x744+x748+x749+x840);
IkReal x908=(x711+x713+x869+x868+x870+x871+x872+x873+x874+x875+x876+x877+x829+x828+x830+x831+x833);
IkReal x909=(x514+x699+x702+x791+x790+x793+x792+x795+x794+x797+x799+x798+x852+x850+x851+x849+x848+x801+x800+x803);
IkReal x910=(x705+x853+x856+x857+x854+x855+x858+x859+x862+x861+x860+x810+x811+x809+x808+x804+x807+x806);
IkReal x911=(x514+x708+x867+x866+x865+x864+x863+x818+x819+x816+x817+x814+x815+x812+x813+x823+x822+x821+x820+x827+x826);
op[41]=(((gclwh3_2*x566))+(((0.066)*gclwh14_2*x521))+((gclwh6_2*x560))+(((0.132)*gclwh1_2*x545))+(((-1.0)*gclwh12_2*x566))+(((-0.132)*npx*x539))+((gclwh1_2*x575))+((gclwh14_2*x575))+(((-1.0)*gclwh10_2*x524))+(((0.132)*gclwh3_2*x547))+(((-1.0)*x889))+(((-0.066)*gclwh1_2*x521))+(((0.132)*gclwh12_2*x547))+(((-0.066)*gclwh12_2*x515))+(((0.132)*gclwh4_2*x536))+x897+(((-1.0)*gclwh8_2*x601))+(((-0.066)*gclwh4_2*x551))+(((-0.066)*gclwh3_2*x515))+(((-0.00066)*x631)));
op[42]=((((-1.634)*gclwh0_0*x521))+(((0.3268)*gclwh11_0*rxp2_2))+(((-1.634)*gclwh2_0*x515))+(((0.3268)*gclwh9_0*rxp0_2))+(((-3.268)*gclwh5_0*x536))+(((-1.0)*x902))+(((3.268)*gclwh15_0*x545))+(((1.634)*pp*x523))+(((3.268)*npy*x537))+(((-3.268)*gclwh13_0*x547))+(((-1.0)*gclwh15_0*x614))+(((3.268)*gclwh0_0*x545))+((gclwh2_0*x594))+((gclwh13_0*x594))+(((0.01634)*x523))+(((-1.634)*gclwh15_0*x521))+x886+((gclwh0_0*x614))+(((-0.3268)*x571))+(((1.634)*gclwh13_0*x515)));
op[43]=((1.299066)+(((-1.0)*x896))+x903);
op[44]=((0.03602)+(((0.04)*x522))+(((0.04)*gclwh5_10*r22))+((x551*x627))+(((0.8)*gclwh11_10*rxp2_2))+(((-1.0)*x521*x574))+(((0.8)*x576))+(((-8.0)*gclwh5_10*x536))+(((-0.8)*x595))+(((8.0)*gclwh15_10*x545))+(((-8.0)*gclwh13_10*x547))+((x515*x629))+(((-0.04)*gclwh15_10*r20)));
op[45]=((((-1.072)*gclwh5_15*x536))+(((-1.0)*x521*x550))+(((1.072)*gclwh15_15*x545))+((x515*x610))+(((-1.072)*gclwh13_15*x547))+(((0.00536)*x580))+(((0.3136)*x544))+(((0.00536)*x619))+(((-0.00536)*x561))+((x551*x553))+(((0.3136)*gclwh11_13*rxp2_2))+(((-0.3136)*gclwh7_13*rxp1_2)));
op[46]=((((0.132)*gclwh0_0*x545))+((gclwh0_0*x575))+(((-0.066)*gclwh15_0*x521))+(((0.00066)*x523))+(((-1.0)*gclwh15_0*x575))+((gclwh9_0*x601))+((gclwh11_0*x524))+(((-0.132)*gclwh5_0*x536))+(((-1.0)*x886))+(((-1.0)*gclwh7_0*x560))+(((0.066)*pp*x523))+((gclwh13_0*x566))+((gclwh2_0*x566))+(((0.132)*npy*x537))+(((-0.066)*gclwh0_0*x521))+(((0.066)*gclwh13_0*x515))+(((-0.132)*gclwh13_0*x547))+(((0.132)*gclwh15_0*x545))+x902+(((-0.066)*gclwh2_0*x515)));
op[47]=((0.033734)+(((-1.0)*x903))+x896);
op[48]=((((-1.0)*gclwh12_8*x579))+(((0.1634)*x588))+(((-0.817)*gclwh6_12*x515))+((gclwh8_12*x632))+(((0.817)*gclwh8_12*x521))+(((0.817)*gclwh10_12*x551))+(((-1.0)*gclwh4_8*x591))+(((-1.0)*x898))+(((-1.0)*x881))+(((-0.00817)*gclwh6_12*r21))+(((-1.634)*gclwh8_12*x545))+x663+((gclwh10_12*x570))+((x533*x626))+(((-1.634)*gclwh10_12*x536))+x888);
op[49]=(((gclwh6_11*x515))+((gclwh14_3*x563))+(((-1.0)*x905))+(((-1.0)*x882))+(((-1.0)*gclwh8_11*x521))+(((-1.0)*gclwh10_11*x551))+(((-0.135089)*x558))+x895+x907+(((-1.0)*gclwh4_3*x640)));
op[50]=((0.210112)+((gclwh12_11*x613))+(((-2.0)*gclwh8_11*x521))+(((-0.02)*x568))+(((-4.0)*gclwh6_11*x547))+((gclwh6_11*x569))+(((4.0)*gclwh8_11*x545))+(((2.0)*gclwh6_11*x515))+(((4.0)*gclwh10_11*x536))+(((-1.0)*gclwh10_11*x527))+((gclwh4_11*x600))+(((-1.0)*gclwh14_11*x639))+(((-2.0)*gclwh10_11*x551)));
op[51]=(((x541*x633))+(((-1.0)*gclwh14_14*x647))+(((0.784)*gclwh6_2*x515))+((gclwh4_8*x589))+(((-1.568)*gclwh6_2*x547))+((gclwh4_2*x592))+(((1.568)*gclwh10_2*x536))+(((-1.0)*gclwh10_2*x542))+(((-0.784)*gclwh8_2*x521))+((gclwh6_2*x528))+((gclwh12_2*x608))+(((-1.0)*gclwh10_2*r22*x548))+(((-1.0)*gclwh14_2*x546))+(((0.17)*x599))+(((-1.0)*gclwh8_2*x602))+((gclwh12_14*x590))+(((0.0536)*x573))+(((-0.17)*x588)));
op[52]=(((gclwh12_8*x549))+((gclwh4_8*x552))+(((0.033)*gclwh10_12*x551))+(((-1.0)*x898))+((x518*x533))+(((-0.0066)*x588))+(((-1.0)*x663))+(((-0.033)*gclwh6_12*x515))+((gclwh8_12*x643))+((gclwh10_12*x578))+x881+x888+(((0.033)*gclwh8_12*x521))+(((-1.0)*gclwh6_12*x586))+(((-1.0)*gclwh10_12*npz*x518))+(((-1.0)*gclwh8_12*npx*x518)));
op[53]=(((gclwh8_11*x521))+(((-1.0)*x905))+(((-1.0)*x895))+(((-1.0)*gclwh4_3*x572))+((gclwh14_3*x648))+((gclwh10_11*x551))+(((-1.0)*gclwh6_11*x515))+x882+x907+(((-0.001809)*x558)));
op[54]=((((-1.0)*gclwh7_10*x515))+(((-1.0)*gclwh5_1*x640))+(((-0.135089)*x645))+((gclwh15_1*x563))+(((-1.0)*x904))+((gclwh11_10*x551))+(((-1.0)*x894))+((gclwh9_10*x521))+x883+x906);
op[55]=((((-1.634)*gclwh9_13*x545))+(((-0.817)*gclwh7_13*x515))+(((-1.0)*x900))+(((0.1634)*x607))+(((1.634)*gclwh7_13*x547))+(((-0.00817)*x584))+((gclwh9_13*x632))+((gclwh11_13*x570))+(((-1.634)*gclwh11_13*x536))+(((-1.0)*gclwh5_9*x591))+(((0.817)*gclwh9_13*x521))+x687+(((-1.0)*gclwh13_9*x579))+x891+(((0.817)*gclwh11_13*x551))+(((-1.0)*x879)));
op[56]=((((-0.784)*gclwh9_0*x521))+(((0.784)*gclwh7_0*x515))+(((-1.0)*gclwh5_9*x589))+(((-1.0)*gclwh15_0*x546))+(((1.568)*gclwh9_0*x545))+((gclwh15_15*x647))+(((-1.0)*gclwh9_0*x602))+(((-1.568)*gclwh7_0*x547))+(((-0.0536)*gclwh5_15*rxp2_2))+(((-1.0)*gclwh11_0*r22*x548))+((gclwh7_0*x528))+(((0.17)*x607))+((gclwh5_0*x592))+(((-1.0)*gclwh13_15*x590))+((gclwh13_0*x608))+(((-1.0)*gclwh11_0*x542))+(((1.568)*gclwh11_0*x536))+(((-0.17)*x585)));
op[57]=((0.210112)+((gclwh7_10*x569))+(((-4.0)*pz*x526))+(((-2.0)*gclwh9_10*x521))+(((4.0)*gclwh11_10*x536))+(((-1.0)*gclwh9_10*x612))+((gclwh5_10*x600))+(((-1.0)*gclwh11_10*x527))+((gclwh13_10*x613))+(((-2.0)*gclwh11_10*x551))+(((4.0)*gclwh9_10*x545))+(((2.0)*gclwh7_10*x515))+(((-1.0)*gclwh15_10*x639)));
op[58]=(((gclwh15_1*x648))+(((-1.0)*x904))+(((-1.0)*gclwh9_10*x521))+(((-1.0)*x883))+(((-0.001809)*x645))+((gclwh7_10*x515))+(((-1.0)*gclwh5_1*x572))+x894+x906+(((-1.0)*gclwh11_10*x551)));
op[59]=((((-0.0066)*x607))+((gclwh7_13*npy*x518))+((gclwh9_13*x643))+(((-1.0)*x687))+(((-1.0)*gclwh9_13*npx*x518))+(((-1.0)*x900))+(((-0.033)*gclwh7_13*x515))+(((0.033)*gclwh9_13*x521))+((gclwh13_9*x549))+((gclwh11_13*x578))+(((-0.00033)*x584))+(((0.033)*gclwh11_13*x551))+((gclwh5_9*x552))+x879+x891+(((-1.0)*gclwh11_13*npz*x518)));
op[60]=((((0.817)*gclwh14_8*x521))+((gclwh6_12*x579))+(((-1.0)*gclwh4_8*x570))+(((-0.00817)*x531))+(((1.634)*gclwh12_8*x547))+(((-1.0)*x901))+(((-1.0)*x519*x626))+(((-0.817)*gclwh12_8*x515))+(((1.634)*gclwh4_8*x536))+(((0.00817)*x556))+(((-1.0)*gclwh10_12*x591))+(((-0.817)*gclwh4_8*x551))+(((-1.0)*x697))+x878+x890+(((-0.1634)*x620)));
op[61]=((0.685445)+(((0.00675445)*x603))+(((-0.00675445)*x630))+(((-0.00675445)*x622))+(((-1.35089)*gclwh14_3*x545))+(((0.00675445)*x582))+((gclwh12_11*x515))+(((0.665445)*gclwh14_3*x521))+(((-0.685445)*gclwh3_3*x515))+(((-1.0)*x910))+(((-1.0)*x885))+(((-0.685445)*gclwh1_3*x521))+(((1.35089)*gclwh4_3*x536))+(((1.35089)*gclwh3_3*x547))+((gclwh4_11*x551))+(((-1.0)*gclwh14_11*x521))+(((1.35089)*gclwh1_3*x545))+(((0.00675445)*x642))+(((-0.665445)*gclwh12_3*x515))+(((1.35089)*gclwh12_3*x547))+x892+(((-0.665445)*r22*x535))+x909);
op[62]=((0.089834)+(((-1.0)*gclwh6_11*x613))+(((-4.0)*gclwh12_11*x547))+((gclwh8_11*x639))+(((-0.02)*x577))+((gclwh12_11*x569))+(((2.0)*gclwh12_11*x515))+(((2.0)*gclwh4_11*x551))+(((-2.0)*gclwh14_11*x521))+((gclwh10_11*x600))+(((4.0)*gclwh14_11*x545))+((gclwh4_11*x527))+(((-4.0)*gclwh4_11*x536)));
op[63]=(((gclwh10_2*x592))+(((-1.7)*gclwh12_8*x547))+(((0.85)*gclwh12_8*x515))+(((-1.568)*gclwh4_2*x536))+(((-1.568)*gclwh3_2*x547))+(((-1.0)*gclwh14_2*x602))+(((-0.784)*gclwh14_2*x521))+(((-1.568)*gclwh12_2*x547))+(((0.784)*gclwh12_2*x515))+((x548*x631))+(((-1.0)*gclwh6_2*x608))+(((-1.0)*gclwh3_2*x528))+(((-1.0)*x889))+(((0.784)*gclwh1_2*x521))+(((1.7)*pz*x519))+(((-0.85)*gclwh14_8*x521))+((gclwh12_2*x528))+(((0.784)*gclwh3_2*x515))+(((0.0085)*x531))+((x539*x633))+((gclwh8_2*x546))+x897+(((-0.0085)*x556))+(((-1.7)*gclwh4_8*x536))+(((0.85)*gclwh4_8*x551))+(((0.0085)*x625))+((gclwh4_2*x542))+(((-1.0)*gclwh1_2*x602))+(((-1.568)*gclwh1_2*x545)));
op[64]=((((0.033)*gclwh4_8*x551))+(((0.00033)*x531))+((gclwh4_8*x578))+(((-1.0)*x890))+((x518*x519))+(((-1.0)*x697))+(((-0.0066)*x620))+(((-1.0)*gclwh10_12*x552))+(((-0.033)*gclwh14_8*x521))+(((-1.0)*x518*x554))+(((-1.0)*gclwh4_8*npz*x518))+x878+(((-0.00033)*x556))+x901+(((0.033)*gclwh12_8*x515))+((gclwh6_12*x549)));
op[65]=((-0.019045)+(((9.045e-5)*x582))+((gclwh14_11*x521))+(((-0.000955)*gclwh14_3*x521))+(((-0.019045)*gclwh3_3*x515))+(((-1.0)*gclwh4_11*x551))+(((0.000955)*r22*x535))+(((0.01809)*gclwh1_3*x545))+(((0.000955)*gclwh12_3*x515))+(((-1.0)*x892))+(((-1.0)*x910))+(((-0.01809)*gclwh14_3*x545))+(((0.01809)*gclwh12_3*x547))+(((0.01809)*gclwh4_3*x536))+(((-1.0)*gclwh12_11*x515))+((gclwh14_3*x555))+(((-9.045e-5)*x622))+(((-9.045e-5)*x630))+x885+((gclwh1_3*x555))+x909+(((-0.019045)*gclwh1_3*x521))+(((0.01809)*gclwh3_3*x547)));
op[66]=((-0.685445)+(((0.00675445)*x559))+(((0.00675445)*x611))+(((-0.685445)*gclwh2_1*x515))+(((-1.0)*gclwh15_10*x521))+(((1.35089)*gclwh15_1*x545))+((gclwh5_10*x551))+(((0.00675445)*x583))+(((-1.0)*x908))+((gclwh13_10*x515))+(((-1.0)*x884))+(((0.00675445)*x634))+(((1.35089)*gclwh2_1*x547))+(((-0.685445)*gclwh0_1*x521))+(((-1.35089)*gclwh13_1*x547))+(((-0.665445)*gclwh15_1*x521))+(((1.35089)*gclwh0_1*x545))+x893+(((0.665445)*gclwh5_1*x551))+x911+(((0.665445)*gclwh13_1*x515))+(((-0.00675445)*x530))+(((-1.35089)*gclwh5_1*x536)));
op[67]=((((0.1634)*x544))+(((0.817)*gclwh5_9*x551))+(((-1.634)*gclwh13_9*x547))+(((-1.634)*gclwh5_9*x536))+(((-0.00817)*x529))+(((-1.0)*x880))+(((-1.0)*x887))+(((0.817)*gclwh13_9*x515))+(((-1.0)*gclwh7_13*x579))+x718+(((1.634)*x723))+x899+((gclwh11_13*x591))+(((0.00817)*x597))+(((-0.817)*gclwh15_9*x521))+((gclwh5_9*x570)));
op[68]=((((0.784)*gclwh15_0*x521))+(((1.568)*gclwh5_0*x536))+(((0.784)*gclwh2_0*x515))+(((0.1568)*x571))+(((-0.00784)*x523))+(((-1.568)*npy*x537))+(((-1.0)*x523*x548))+(((0.784)*gclwh0_0*x521))+(((-1.0)*gclwh2_0*x528))+(((-1.0)*x886))+(((0.0085)*x597))+(((-1.568)*gclwh0_0*x545))+(((0.85)*gclwh13_9*x515))+(((-0.85)*gclwh15_9*x521))+(((-1.568)*gclwh15_0*x545))+(((-0.784)*gclwh13_0*x515))+(((-1.0)*gclwh9_0*x546))+(((-0.0085)*x529))+(((-1.0)*gclwh0_0*x602))+(((1.568)*gclwh13_0*x547))+(((1.7)*x723))+x902+(((0.0085)*x638))+(((-1.7)*gclwh5_9*x536))+(((-1.0)*gclwh13_0*x528))+((gclwh15_0*x602))+(((0.85)*gclwh5_9*x551))+(((-1.0)*gclwh11_0*x592))+(((-1.7)*gclwh13_9*x547)));
op[69]=((0.089834)+(((-1.0)*x903))+x896);
op[70]=((0.019045)+(((9.045e-5)*x583))+(((0.01809)*gclwh2_1*x547))+((gclwh15_10*x521))+(((0.01809)*gclwh0_1*x545))+(((-0.000955)*gclwh5_1*x551))+(((-0.019045)*gclwh2_1*x515))+(((9.045e-5)*x611))+(((-1.0)*x908))+(((-1.0)*x893))+(((-1.0)*gclwh13_10*x515))+(((-0.01809)*gclwh5_1*x536))+(((0.000955)*gclwh15_1*x521))+(((-1.0)*gclwh5_10*x551))+(((-0.019045)*gclwh0_1*x521))+(((-0.01809)*gclwh13_1*x547))+(((-9.045e-5)*x530))+(((0.01809)*gclwh15_1*x545))+x884+(((-0.000955)*gclwh13_1*x515))+((gclwh0_1*x555))+x911+(((9.045e-5)*x559)));
op[71]=((((-0.033)*gclwh5_9*x551))+(((0.0066)*x544))+(((0.00033)*x529))+(((-1.0)*x899))+(((-1.0)*x880))+(((-1.0)*gclwh5_9*x578))+(((-1.0)*gclwh7_13*x549))+((gclwh11_13*x552))+(((-1.0)*gclwh13_9*x586))+(((-1.0)*gclwh15_9*npx*x518))+(((-0.033)*gclwh13_9*x515))+x718+(((0.033)*gclwh15_9*x521))+x887+((x518*x636))+((gclwh5_9*npz*x518)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x912=htj1*htj1;
CheckValue<IkReal> x913=IKPowWithIntegerCheck(((1.0)+x912),-1);
if(!x913.valid){
continue;
}
cj1array[numsolutions]=((x913.value)*(((1.0)+(((-1.0)*x912)))));
CheckValue<IkReal> x914=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x914.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x914.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x915=htj2*htj2;
CheckValue<IkReal> x916=IKPowWithIntegerCheck(((1.0)+x915),-1);
if(!x916.valid){
continue;
}
cj2array[numsolutions]=((x916.value)*(((1.0)+(((-1.0)*x915)))));
CheckValue<IkReal> x917=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x917.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x917.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x918=htj3*htj3;
CheckValue<IkReal> x919=IKPowWithIntegerCheck(((1.0)+x918),-1);
if(!x919.valid){
continue;
}
cj3array[numsolutions]=((x919.value)*(((1.0)+(((-1.0)*x918)))));
CheckValue<IkReal> x920=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x920.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x920.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x921=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x921);
rxp1_0=(pz*r11);
rxp1_1=(r01*x921);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x922=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x922);
rxp1_0=(pz*r11);
rxp1_1=(r01*x922);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x923=IKPowWithIntegerCheck(r22,-1);
if(!x923.valid){
continue;
}
CheckValue<IkReal> x924=IKPowWithIntegerCheck(sj3,-1);
if(!x924.valid){
continue;
}
sj4array[0]=((x923.value)*(x924.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x925=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x925);
rxp1_0=(pz*r11);
rxp1_1=(r01*x925);
IkReal x926=((16.0)*sj4);
IkReal x927=(cj1*cj2);
IkReal x928=((4.0)*sj3);
IkReal x929=((8.0)*sj4);
IkReal x930=((4.0)*cj4);
IkReal x931=(sj1*sj2);
IkReal x932=((4.0)*sj4);
IkReal x933=(cj3*r02);
IkReal x934=((16.0)*sj3);
IkReal x935=((8.0)*sj3);
IkReal x936=((12.0)*cj4);
IkReal x937=((12.0)*sj4);
IkReal x938=(cj3*r12);
IkReal x939=(r11*x928);
IkReal x940=(r01*x928);
IkReal x941=(r01*x931);
IkReal x942=(cj3*cj4*r01);
IkReal x943=(cj3*cj4*r11);
IkReal x944=(cj3*r10*x930);
IkReal x945=(x937*x938);
IkReal x946=(cj3*r00*x930);
IkReal x947=(x933*x937);
IkReal x948=(r00*x931*x932);
IkReal x949=(r02*x931*x936);
IkReal x950=(r00*x927*x932);
IkReal x951=(r02*x927*x936);
IkReal x952=(r10*x931*x932);
IkReal x953=(r12*x927*x936);
IkReal x954=(r12*x931*x936);
IkReal x955=(r10*x927*x932);
IkReal x956=(x939+x950);
IkReal x957=(x952+x940);
IkReal x958=(x948+x944);
IkReal x959=(x951+x945);
IkReal x960=(x955+x946);
IkReal x961=(x954+x947);
j5eval[0]=((((0.5)*(IKabs((x957+x953+(((-1.0)*x961))+(((-1.0)*x960)))))))+(((0.5)*(IKabs(((((-1.0)*x957))+x960+x953+(((-1.0)*x961)))))))+(IKabs(((((-1.0)*x929*x941))+(((-1.0)*r10*x935))+((r01*x927*x929))+(((-8.0)*x943)))))+(IKabs((((r11*x929*x931))+(((-8.0)*x942))+(((-1.0)*r00*x935))+(((-1.0)*r11*x927*x929)))))+(((0.5)*(IKabs(((((-1.0)*x926*x941))+(((-1.0)*r10*x934))+((r01*x926*x927))+(((-16.0)*x943)))))))+(((0.5)*(IKabs(((((-1.0)*x956))+(((-1.0)*x959))+x958+x949)))))+(((0.5)*(IKabs(((((-1.0)*r02*x927*x930))+((r02*x930*x931))+(((-1.0)*x932*x938))+(((-1.0)*x958))+x956)))))+(((0.5)*(IKabs((((r11*x926*x931))+(((-1.0)*r11*x926*x927))+(((-16.0)*x942))+(((-1.0)*r00*x934)))))))+(((0.5)*(IKabs(((((-1.0)*x958))+(((-1.0)*x959))+x956+x949)))))+(((0.5)*(IKabs((((r12*x927*x930))+(((-1.0)*r12*x930*x931))+(((-1.0)*x932*x933))+x957+(((-1.0)*x960))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x962=(r10*sj3);
IkReal x963=(r01*sj4);
IkReal x964=(cj1*cj2);
IkReal x965=(cj3*cj4);
IkReal x966=(sj1*sj2);
IkReal x967=(cj4*r02);
IkReal x968=((4.0)*r11*sj3);
IkReal x969=(cj3*r12*sj4);
IkReal x970=((4.0)*r00*sj4);
IkReal x971=((4.0)*r10*x965);
IkReal x972=((12.0)*x969);
IkReal x973=((4.0)*x969);
IkReal x974=(x964*x970);
IkReal x975=(x966*x970);
IkReal x976=((12.0)*x966*x967);
IkReal x977=((12.0)*x964*x967);
IkReal x978=((4.0)*x966*x967);
IkReal x979=((4.0)*x964*x967);
IkReal x980=(x974+x968);
IkReal x981=(x971+x975);
IkReal x982=(x973+x979);
IkReal x983=(x972+x977);
IkReal x984=((((-8.0)*x963*x966))+(((-8.0)*x962))+(((8.0)*x963*x964))+(((-8.0)*r11*x965)));
op[0]=((((-1.0)*x982))+(((-1.0)*x981))+x980+x978);
op[1]=x984;
op[2]=((((-1.0)*x983))+(((-1.0)*x981))+x980+x976);
op[3]=((((16.0)*x963*x964))+(((-16.0)*r11*x965))+(((-16.0)*x962))+(((-16.0)*x963*x966)));
op[4]=((((-1.0)*x983))+(((-1.0)*x980))+x981+x976);
op[5]=x984;
op[6]=((((-1.0)*x982))+(((-1.0)*x980))+x981+x978);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x985=(cj1*cj2);
IkReal x986=((4.0)*cj4);
IkReal x987=(sj1*sj2);
IkReal x988=((4.0)*sj4);
IkReal x989=(r00*sj3);
IkReal x990=(cj3*r02);
IkReal x991=((4.0)*r01*sj3);
IkReal x992=((16.0)*r11*sj4);
IkReal x993=(cj3*cj4*r01);
IkReal x994=((12.0)*cj4*r12);
IkReal x995=((8.0)*r11*sj4);
IkReal x996=(cj3*r00*x986);
IkReal x997=((12.0)*sj4*x990);
IkReal x998=(x988*x990);
IkReal x999=(r10*x985*x988);
IkReal x1000=(r10*x987*x988);
IkReal x1001=(x985*x994);
IkReal x1002=(x987*x994);
IkReal x1003=(r12*x985*x986);
IkReal x1004=(r12*x986*x987);
IkReal x1005=(x1000+x991);
IkReal x1006=(x996+x999);
IkReal x1007=(x1004+x998);
IkReal x1008=(x1002+x997);
IkReal x1009=((((-1.0)*x985*x995))+(((-8.0)*x989))+((x987*x995))+(((-8.0)*x993)));
j5evalpoly[0]=(((x1009*(htj5*htj5*htj5*htj5*htj5)))+x1006+x1003+(((htj5*htj5*htj5*htj5)*((x1005+x1001+(((-1.0)*x1008))+(((-1.0)*x1006))))))+(((-1.0)*x1005))+(((-1.0)*x1007))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1005+x1003+(((-1.0)*x1006))+(((-1.0)*x1007))))))+(((htj5*htj5*htj5)*(((((-1.0)*x985*x992))+(((-16.0)*x993))+(((-16.0)*x989))+((x987*x992))))))+(((htj5*htj5)*((x1006+x1001+(((-1.0)*x1008))+(((-1.0)*x1005))))))+((htj5*x1009)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1010=(cj5*sj4);
IkReal x1011=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1010))+((r01*x1011)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1010))+((cj4*r12))+(((-1.0)*r11*x1011)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1010))+((r01*x1011))))+IKsqr((((r10*x1010))+((cj4*r12))+(((-1.0)*r11*x1011))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1010))+((r01*x1011))), (((r10*x1010))+((cj4*r12))+(((-1.0)*r11*x1011))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1012=IKcos(j0);
IkReal x1013=IKsin(j0);
IkReal x1014=(r02*sj4);
IkReal x1015=((0.1)*sj5);
IkReal x1016=(cj5*r11);
IkReal x1017=((1.0)*sj3);
IkReal x1018=(r12*sj4);
IkReal x1019=((1.0)*cj3);
IkReal x1020=(r11*sj5);
IkReal x1021=(cj3*cj4);
IkReal x1022=((1.0)*sj2);
IkReal x1023=(cj5*r01);
IkReal x1024=(r01*sj5);
IkReal x1025=(sj1*sj2);
IkReal x1026=(cj1*cj2);
IkReal x1027=(r00*sj5);
IkReal x1028=((1.0)*cj2);
IkReal x1029=(r10*sj5);
IkReal x1030=((1.0)*cj4);
IkReal x1031=(cj4*cj5*r00);
IkReal x1032=(cj1*x1012);
IkReal x1033=(cj4*cj5*r10);
IkReal x1034=((0.392)*x1013);
IkReal x1035=((1.0)*x1013);
IkReal x1036=(cj1*x1013);
IkReal x1037=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r10*x1037))+x1012+((sj4*x1020))+(((-1.0)*r12*x1030)));
evalcond[1]=((((-1.0)*x1035))+((sj4*x1024))+(((-1.0)*r02*x1030))+(((-1.0)*r00*x1037)));
evalcond[2]=((((-0.392)*x1012*x1025))+(((0.425)*x1032))+(((-1.0)*px))+(((-0.1)*x1023))+(((0.392)*x1012*x1026))+(((-1.0)*r00*x1015))+(((-0.134)*x1013)));
evalcond[3]=((((0.425)*x1036))+(((-1.0)*x1025*x1034))+((x1026*x1034))+(((0.134)*x1012))+(((-1.0)*py))+(((-1.0)*r10*x1015))+(((-0.1)*x1016)));
evalcond[4]=((((-1.0)*x1012*x1026))+((cj3*x1014))+((x1021*x1024))+((x1012*x1025))+(((-1.0)*x1019*x1031))+((sj3*x1027))+((sj3*x1023)));
evalcond[5]=(((cj3*x1018))+(((-1.0)*x1026*x1035))+((x1020*x1021))+((sj3*x1016))+((x1013*x1025))+(((-1.0)*x1019*x1033))+((sj3*x1029)));
evalcond[6]=((((-1.0)*x1014*x1017))+(((-1.0)*cj4*x1017*x1024))+(((-1.0)*x1022*x1032))+((sj3*x1031))+(((-1.0)*sj1*x1012*x1028))+((cj3*x1027))+((cj3*x1023)));
evalcond[7]=((((-1.0)*x1017*x1018))+((cj3*x1016))+(((-1.0)*cj4*x1017*x1020))+(((-1.0)*x1022*x1036))+((sj3*x1033))+(((-1.0)*sj1*x1013*x1028))+((cj3*x1029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1038=IKPowWithIntegerCheck(cj3,-1);
if(!x1038.valid){
continue;
}
CheckValue<IkReal> x1039=IKPowWithIntegerCheck(r22,-1);
if(!x1039.valid){
continue;
}
sj4array[0]=((-1.0)*(x1038.value)*(x1039.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1040=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1040);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1040);
IkReal x1041=((16.0)*sj4);
IkReal x1042=(cj1*cj2);
IkReal x1043=((4.0)*sj3);
IkReal x1044=((8.0)*sj4);
IkReal x1045=((4.0)*cj4);
IkReal x1046=(sj1*sj2);
IkReal x1047=((4.0)*sj4);
IkReal x1048=(cj3*r02);
IkReal x1049=((16.0)*sj3);
IkReal x1050=((8.0)*sj3);
IkReal x1051=((12.0)*cj4);
IkReal x1052=((12.0)*sj4);
IkReal x1053=(cj3*r12);
IkReal x1054=(r11*x1043);
IkReal x1055=(r01*x1043);
IkReal x1056=(r01*x1046);
IkReal x1057=(cj3*cj4*r01);
IkReal x1058=(cj3*cj4*r11);
IkReal x1059=(cj3*r10*x1045);
IkReal x1060=(x1052*x1053);
IkReal x1061=(cj3*r00*x1045);
IkReal x1062=(x1048*x1052);
IkReal x1063=(r00*x1046*x1047);
IkReal x1064=(r02*x1046*x1051);
IkReal x1065=(r00*x1042*x1047);
IkReal x1066=(r02*x1042*x1051);
IkReal x1067=(r10*x1046*x1047);
IkReal x1068=(r12*x1042*x1051);
IkReal x1069=(r12*x1046*x1051);
IkReal x1070=(r10*x1042*x1047);
IkReal x1071=(x1054+x1065);
IkReal x1072=(x1055+x1067);
IkReal x1073=(x1059+x1063);
IkReal x1074=(x1060+x1066);
IkReal x1075=(x1070+x1061);
IkReal x1076=(x1069+x1062);
j5eval[0]=((IKabs(((((-1.0)*r00*x1050))+(((-1.0)*r11*x1042*x1044))+((r11*x1044*x1046))+(((-8.0)*x1057)))))+(IKabs(((((-8.0)*x1058))+(((-1.0)*r10*x1050))+(((-1.0)*x1044*x1056))+((r01*x1042*x1044)))))+(((0.5)*(IKabs((x1071+x1064+(((-1.0)*x1073))+(((-1.0)*x1074)))))))+(((0.5)*(IKabs((x1075+x1068+(((-1.0)*x1072))+(((-1.0)*x1076)))))))+(((0.5)*(IKabs((x1071+((r02*x1045*x1046))+(((-1.0)*r02*x1042*x1045))+(((-1.0)*x1073))+(((-1.0)*x1047*x1053)))))))+(((0.5)*(IKabs((x1073+x1064+(((-1.0)*x1074))+(((-1.0)*x1071)))))))+(((0.5)*(IKabs((x1072+x1068+(((-1.0)*x1075))+(((-1.0)*x1076)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x1049))+((r01*x1041*x1042))+(((-1.0)*x1041*x1056))+(((-16.0)*x1058)))))))+(((0.5)*(IKabs(((((-1.0)*r00*x1049))+((r11*x1041*x1046))+(((-1.0)*r11*x1041*x1042))+(((-16.0)*x1057)))))))+(((0.5)*(IKabs((x1072+((r12*x1042*x1045))+(((-1.0)*r12*x1045*x1046))+(((-1.0)*x1075))+(((-1.0)*x1047*x1048))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1077=(r10*sj3);
IkReal x1078=(r01*sj4);
IkReal x1079=(cj1*cj2);
IkReal x1080=(cj3*cj4);
IkReal x1081=(sj1*sj2);
IkReal x1082=(cj4*r02);
IkReal x1083=((4.0)*r11*sj3);
IkReal x1084=(cj3*r12*sj4);
IkReal x1085=((4.0)*r00*sj4);
IkReal x1086=((4.0)*r10*x1080);
IkReal x1087=((12.0)*x1084);
IkReal x1088=((4.0)*x1084);
IkReal x1089=(x1079*x1085);
IkReal x1090=(x1081*x1085);
IkReal x1091=((12.0)*x1081*x1082);
IkReal x1092=((12.0)*x1079*x1082);
IkReal x1093=((4.0)*x1081*x1082);
IkReal x1094=((4.0)*x1079*x1082);
IkReal x1095=(x1083+x1089);
IkReal x1096=(x1090+x1086);
IkReal x1097=(x1094+x1088);
IkReal x1098=(x1092+x1087);
IkReal x1099=((((-8.0)*x1077))+(((8.0)*x1078*x1079))+(((-8.0)*r11*x1080))+(((-8.0)*x1078*x1081)));
op[0]=(x1095+x1093+(((-1.0)*x1097))+(((-1.0)*x1096)));
op[1]=x1099;
op[2]=(x1095+x1091+(((-1.0)*x1096))+(((-1.0)*x1098)));
op[3]=((((16.0)*x1078*x1079))+(((-16.0)*x1078*x1081))+(((-16.0)*x1077))+(((-16.0)*r11*x1080)));
op[4]=(x1096+x1091+(((-1.0)*x1095))+(((-1.0)*x1098)));
op[5]=x1099;
op[6]=(x1096+x1093+(((-1.0)*x1097))+(((-1.0)*x1095)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1100=(cj1*cj2);
IkReal x1101=((4.0)*cj4);
IkReal x1102=(sj1*sj2);
IkReal x1103=((4.0)*sj4);
IkReal x1104=(r00*sj3);
IkReal x1105=(cj3*r02);
IkReal x1106=((4.0)*r01*sj3);
IkReal x1107=((16.0)*r11*sj4);
IkReal x1108=(cj3*cj4*r01);
IkReal x1109=((12.0)*cj4*r12);
IkReal x1110=((8.0)*r11*sj4);
IkReal x1111=(cj3*r00*x1101);
IkReal x1112=((12.0)*sj4*x1105);
IkReal x1113=(x1103*x1105);
IkReal x1114=(r10*x1100*x1103);
IkReal x1115=(r10*x1102*x1103);
IkReal x1116=(x1100*x1109);
IkReal x1117=(x1102*x1109);
IkReal x1118=(r12*x1100*x1101);
IkReal x1119=(r12*x1101*x1102);
IkReal x1120=(x1106+x1115);
IkReal x1121=(x1111+x1114);
IkReal x1122=(x1113+x1119);
IkReal x1123=(x1112+x1117);
IkReal x1124=(((x1102*x1110))+(((-1.0)*x1100*x1110))+(((-8.0)*x1108))+(((-8.0)*x1104)));
j5evalpoly[0]=(((htj5*x1124))+x1118+x1121+((x1124*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1118+x1120+(((-1.0)*x1122))+(((-1.0)*x1121))))))+(((htj5*htj5)*((x1116+x1121+(((-1.0)*x1123))+(((-1.0)*x1120))))))+(((htj5*htj5*htj5)*((((x1102*x1107))+(((-16.0)*x1104))+(((-16.0)*x1108))+(((-1.0)*x1100*x1107))))))+(((htj5*htj5*htj5*htj5)*((x1116+x1120+(((-1.0)*x1123))+(((-1.0)*x1121))))))+(((-1.0)*x1122))+(((-1.0)*x1120)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1125=(cj5*sj4);
IkReal x1126=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1126))+(((-1.0)*r00*x1125)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1126))+((r10*x1125))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1126))+(((-1.0)*r00*x1125))))+IKsqr(((((-1.0)*r11*x1126))+((r10*x1125))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1126))+(((-1.0)*r00*x1125))), ((((-1.0)*r11*x1126))+((r10*x1125))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1127=IKcos(j0);
IkReal x1128=IKsin(j0);
IkReal x1129=(r02*sj4);
IkReal x1130=((0.1)*sj5);
IkReal x1131=(cj5*r11);
IkReal x1132=((1.0)*sj3);
IkReal x1133=(r12*sj4);
IkReal x1134=((1.0)*cj3);
IkReal x1135=(r11*sj5);
IkReal x1136=(cj3*cj4);
IkReal x1137=((1.0)*sj2);
IkReal x1138=(cj5*r01);
IkReal x1139=(r01*sj5);
IkReal x1140=(sj1*sj2);
IkReal x1141=(cj1*cj2);
IkReal x1142=(r00*sj5);
IkReal x1143=((1.0)*cj2);
IkReal x1144=(r10*sj5);
IkReal x1145=((1.0)*cj4);
IkReal x1146=(cj4*cj5*r00);
IkReal x1147=(cj1*x1127);
IkReal x1148=(cj4*cj5*r10);
IkReal x1149=((0.392)*x1128);
IkReal x1150=((1.0)*x1128);
IkReal x1151=(cj1*x1128);
IkReal x1152=((1.0)*cj5*sj4);
evalcond[0]=(x1127+((sj4*x1135))+(((-1.0)*r10*x1152))+(((-1.0)*r12*x1145)));
evalcond[1]=((((-1.0)*x1150))+(((-1.0)*r00*x1152))+((sj4*x1139))+(((-1.0)*r02*x1145)));
evalcond[2]=((((-0.1)*x1138))+(((0.425)*x1147))+(((-0.392)*x1127*x1140))+(((-1.0)*px))+(((-0.134)*x1128))+(((0.392)*x1127*x1141))+(((-1.0)*r00*x1130)));
evalcond[3]=((((-1.0)*x1140*x1149))+(((0.425)*x1151))+(((0.134)*x1127))+(((-0.1)*x1131))+((x1141*x1149))+(((-1.0)*r10*x1130))+(((-1.0)*py)));
evalcond[4]=((((-1.0)*x1134*x1146))+(((-1.0)*x1127*x1141))+((x1136*x1139))+((x1127*x1140))+((sj3*x1142))+((sj3*x1138))+((cj3*x1129)));
evalcond[5]=((((-1.0)*x1141*x1150))+((x1128*x1140))+((cj3*x1133))+(((-1.0)*x1134*x1148))+((x1135*x1136))+((sj3*x1144))+((sj3*x1131)));
evalcond[6]=(((cj3*x1138))+(((-1.0)*x1137*x1147))+(((-1.0)*sj1*x1127*x1143))+((cj3*x1142))+((sj3*x1146))+(((-1.0)*cj4*x1132*x1139))+(((-1.0)*x1129*x1132)));
evalcond[7]=(((cj3*x1131))+((cj3*x1144))+((sj3*x1148))+(((-1.0)*x1132*x1133))+(((-1.0)*sj1*x1128*x1143))+(((-1.0)*cj4*x1132*x1135))+(((-1.0)*x1137*x1151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1153=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1153);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1153);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1154=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1154);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1154);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1155=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1155);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1155);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1156=IKPowWithIntegerCheck(r22,-1);
if(!x1156.valid){
continue;
}
sj4array[0]=((-1.0)*(x1156.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1157=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1157);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1157);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1159 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1159.valid){
continue;
}
IkReal x1158=x1159.value;
j5array[0]=((-1.0)*x1158);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1158)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1160=(cj5*sj4);
IkReal x1161=(sj4*sj5);
if( IKabs((((r01*x1161))+(((-1.0)*r00*x1160)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1160))+(((-1.0)*r11*x1161)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1161))+(((-1.0)*r00*x1160))))+IKsqr((((r10*x1160))+(((-1.0)*r11*x1161))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1161))+(((-1.0)*r00*x1160))), (((r10*x1160))+(((-1.0)*r11*x1161))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1162=IKcos(j0);
IkReal x1163=IKsin(j0);
IkReal x1164=((0.1)*sj5);
IkReal x1165=(cj5*r11);
IkReal x1166=(cj5*r01);
IkReal x1167=(sj4*sj5);
IkReal x1168=((0.425)*cj1);
IkReal x1169=((1.0)*cj1*sj2);
IkReal x1170=((1.0)*cj2*sj1);
IkReal x1171=((1.0)*cj5*sj4);
evalcond[0]=(x1162+((r11*x1167))+(((-1.0)*r10*x1171)));
evalcond[1]=(((r01*x1167))+(((-1.0)*r00*x1171))+(((-1.0)*x1163)));
evalcond[2]=(((r00*sj5))+x1166+(((-1.0)*x1162*x1169))+(((-1.0)*x1162*x1170)));
evalcond[3]=(x1165+((r10*sj5))+(((-1.0)*x1163*x1169))+(((-1.0)*x1163*x1170)));
evalcond[4]=(((x1162*x1168))+(((-1.0)*px))+(((-1.0)*r00*x1164))+(((-0.134)*x1163))+(((-0.1)*x1166)));
evalcond[5]=((((-1.0)*r10*x1164))+((x1163*x1168))+(((-1.0)*py))+(((-0.1)*x1165))+(((0.134)*x1162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1172=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1172);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1172);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1173=IKPowWithIntegerCheck(r22,-1);
if(!x1173.valid){
continue;
}
sj4array[0]=((x1173.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1174=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1174);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1174);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1176 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1176.valid){
continue;
}
IkReal x1175=x1176.value;
j5array[0]=((-1.0)*x1175);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1175)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1177=(cj5*sj4);
IkReal x1178=(sj4*sj5);
if( IKabs((((r01*x1178))+(((-1.0)*r00*x1177)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1177))+(((-1.0)*r11*x1178)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1178))+(((-1.0)*r00*x1177))))+IKsqr((((r10*x1177))+(((-1.0)*r11*x1178))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1178))+(((-1.0)*r00*x1177))), (((r10*x1177))+(((-1.0)*r11*x1178))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1179=IKcos(j0);
IkReal x1180=IKsin(j0);
IkReal x1181=(r00*sj5);
IkReal x1182=(cj5*r11);
IkReal x1183=(sj4*sj5);
IkReal x1184=(r10*sj5);
IkReal x1185=((0.425)*cj1);
IkReal x1186=((1.0)*cj5);
IkReal x1187=((1.0)*cj1*sj2);
IkReal x1188=((1.0)*cj2*sj1);
evalcond[0]=(x1179+((r11*x1183))+(((-1.0)*r10*sj4*x1186)));
evalcond[1]=((((-1.0)*r00*sj4*x1186))+((r01*x1183))+(((-1.0)*x1180)));
evalcond[2]=(((x1179*x1185))+(((-0.1)*x1181))+(((-0.1)*cj5*r01))+(((-1.0)*px))+(((-0.134)*x1180)));
evalcond[3]=(((x1180*x1185))+(((-0.1)*x1182))+(((-0.1)*x1184))+(((-1.0)*py))+(((0.134)*x1179)));
evalcond[4]=((((-1.0)*r01*x1186))+(((-1.0)*x1179*x1188))+(((-1.0)*x1179*x1187))+(((-1.0)*x1181)));
evalcond[5]=((((-1.0)*x1180*x1188))+(((-1.0)*x1180*x1187))+(((-1.0)*x1182))+(((-1.0)*x1184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1189=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1189);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1189);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1190=IKPowWithIntegerCheck(r22,-1);
if(!x1190.valid){
continue;
}
sj4array[0]=((x1190.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1191=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1191);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1191);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1193 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1193.valid){
continue;
}
IkReal x1192=x1193.value;
j5array[0]=((-1.0)*x1192);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1192)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1194=(cj5*sj4);
IkReal x1195=(sj4*sj5);
if( IKabs((((r01*x1195))+(((-1.0)*r00*x1194)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1194))+(((-1.0)*r11*x1195)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1195))+(((-1.0)*r00*x1194))))+IKsqr((((r10*x1194))+(((-1.0)*r11*x1195))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1195))+(((-1.0)*r00*x1194))), (((r10*x1194))+(((-1.0)*r11*x1195))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1196=IKcos(j0);
IkReal x1197=IKsin(j0);
IkReal x1198=((0.1)*sj5);
IkReal x1199=(sj1*sj2);
IkReal x1200=(cj5*r11);
IkReal x1201=(cj5*r01);
IkReal x1202=(sj4*sj5);
IkReal x1203=(cj1*cj2);
IkReal x1204=((0.392)*x1197);
IkReal x1205=(cj1*x1196);
IkReal x1206=((1.0)*x1197);
IkReal x1207=((1.0)*cj5*sj4);
evalcond[0]=(x1196+(((-1.0)*r10*x1207))+((r11*x1202)));
evalcond[1]=((((-1.0)*r00*x1207))+((r01*x1202))+(((-1.0)*x1206)));
evalcond[2]=(((r00*sj5))+x1201+((x1196*x1199))+(((-1.0)*x1196*x1203)));
evalcond[3]=(x1200+((r10*sj5))+((x1197*x1199))+(((-1.0)*x1203*x1206)));
evalcond[4]=((((-1.0)*r00*x1198))+(((0.425)*x1205))+(((-0.1)*x1201))+(((-1.0)*px))+(((-0.134)*x1197))+(((-0.392)*x1196*x1199))+(((0.392)*x1196*x1203)));
evalcond[5]=((((0.134)*x1196))+(((-1.0)*x1199*x1204))+(((-0.1)*x1200))+(((-1.0)*r10*x1198))+(((-1.0)*py))+((x1203*x1204))+(((0.425)*cj1*x1197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1208=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1208);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1208);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1209=IKPowWithIntegerCheck(r22,-1);
if(!x1209.valid){
continue;
}
sj4array[0]=((-1.0)*(x1209.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1210=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1210);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1210);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1212 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1212.valid){
continue;
}
IkReal x1211=x1212.value;
j5array[0]=((-1.0)*x1211);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1211)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1213=(cj5*sj4);
IkReal x1214=(sj4*sj5);
if( IKabs((((r01*x1214))+(((-1.0)*r00*x1213)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1213))+(((-1.0)*r11*x1214)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1214))+(((-1.0)*r00*x1213))))+IKsqr((((r10*x1213))+(((-1.0)*r11*x1214))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1214))+(((-1.0)*r00*x1213))), (((r10*x1213))+(((-1.0)*r11*x1214))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1215=IKcos(j0);
IkReal x1216=IKsin(j0);
IkReal x1217=((0.1)*sj5);
IkReal x1218=(sj1*sj2);
IkReal x1219=(cj5*r11);
IkReal x1220=(sj4*sj5);
IkReal x1221=(cj1*cj2);
IkReal x1222=((1.0)*sj5);
IkReal x1223=((1.0)*cj5);
IkReal x1224=((0.425)*cj1);
IkReal x1225=((0.392)*x1216);
IkReal x1226=((0.392)*x1215);
IkReal x1227=((1.0)*x1216);
evalcond[0]=(x1215+(((-1.0)*r10*sj4*x1223))+((r11*x1220)));
evalcond[1]=(((r01*x1220))+(((-1.0)*x1227))+(((-1.0)*r00*sj4*x1223)));
evalcond[2]=((((-1.0)*r01*x1223))+(((-1.0)*r00*x1222))+(((-1.0)*x1215*x1221))+((x1215*x1218)));
evalcond[3]=((((-1.0)*x1221*x1227))+(((-1.0)*r10*x1222))+((x1216*x1218))+(((-1.0)*x1219)));
evalcond[4]=((((-1.0)*x1218*x1226))+(((-0.1)*cj5*r01))+(((-1.0)*r00*x1217))+(((-1.0)*px))+((x1221*x1226))+(((-0.134)*x1216))+((x1215*x1224)));
evalcond[5]=((((-0.1)*x1219))+(((-1.0)*x1218*x1225))+((x1216*x1224))+(((-1.0)*py))+((x1221*x1225))+(((-1.0)*r10*x1217))+(((0.134)*x1215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1228=IKPowWithIntegerCheck(r22,-1);
if(!x1228.valid){
continue;
}
CheckValue<IkReal> x1229=IKPowWithIntegerCheck(sj3,-1);
if(!x1229.valid){
continue;
}
sj4array[0]=((x1228.value)*(x1229.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1230=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1230);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1230);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1231=((4.0)*r01);
IkReal x1232=((16.0)*r00);
IkReal x1233=(cj3*sj2);
IkReal x1234=((8.0)*r00);
IkReal x1235=(cj2*cj3);
IkReal x1236=(cj4*r01);
IkReal x1237=((16.0)*cj1);
IkReal x1238=((8.0)*sj1);
IkReal x1239=((16.0)*sj1);
IkReal x1240=((8.0)*cj1);
IkReal x1241=(sj2*sj3);
IkReal x1242=(cj2*sj3);
IkReal x1243=(sj1*x1242);
IkReal x1244=((4.0)*cj4*r00);
IkReal x1245=(((sj1*x1241*x1244))+((sj1*x1231*x1233))+((x1231*x1243))+((cj1*x1231*x1241)));
IkReal x1246=(((sj1*x1235*x1244))+((cj1*x1231*x1235))+((cj1*x1242*x1244))+((cj1*x1233*x1244)));
IkReal x1247=(x1246+(((-1.0)*x1245)));
IkReal x1248=((((-1.0)*x1236*x1238*x1241))+(((-1.0)*cj1*x1234*x1235))+((sj1*x1233*x1234))+((cj1*x1234*x1241))+((x1235*x1236*x1238))+((x1233*x1236*x1240))+((x1236*x1240*x1242))+((x1234*x1243)));
IkReal x1249=(x1245+(((-1.0)*x1246)));
op[0]=x1247;
op[1]=x1248;
op[2]=x1247;
op[3]=(((x1236*x1237*x1242))+((x1235*x1236*x1239))+((sj1*x1232*x1233))+(((-1.0)*cj1*x1232*x1235))+((x1232*x1243))+((cj1*x1232*x1241))+(((-1.0)*x1236*x1239*x1241))+((x1233*x1236*x1237)));
op[4]=x1249;
op[5]=x1248;
op[6]=x1249;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1250=(cj5*sj4);
IkReal x1251=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1250))+((r01*x1251)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1250))+(((-1.0)*r11*x1251)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1250))+((r01*x1251))))+IKsqr((((r10*x1250))+(((-1.0)*r11*x1251))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1250))+((r01*x1251))), (((r10*x1250))+(((-1.0)*r11*x1251))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1252=IKcos(j0);
IkReal x1253=IKsin(j0);
IkReal x1254=((0.1)*sj5);
IkReal x1255=((0.392)*sj1);
IkReal x1256=(cj5*r11);
IkReal x1257=((1.0)*cj3);
IkReal x1258=((0.425)*cj1);
IkReal x1259=((1.0)*cj1);
IkReal x1260=(r11*sj5);
IkReal x1261=(cj5*r01);
IkReal x1262=(r01*sj5);
IkReal x1263=(cj3*cj4);
IkReal x1264=(r00*sj5);
IkReal x1265=((1.0)*sj1);
IkReal x1266=(r10*sj5);
IkReal x1267=(sj2*x1253);
IkReal x1268=(cj4*cj5*r00);
IkReal x1269=(sj2*x1252);
IkReal x1270=(cj4*cj5*r10);
IkReal x1271=((1.0)*cj4*sj3);
IkReal x1272=((0.392)*cj1*cj2);
IkReal x1273=(cj2*x1252);
IkReal x1274=((1.0)*cj5*sj4);
IkReal x1275=(cj2*x1253);
evalcond[0]=(x1252+((sj4*x1260))+(((-1.0)*r10*x1274)));
evalcond[1]=((((-1.0)*r00*x1274))+((sj4*x1262))+(((-1.0)*x1253)));
evalcond[2]=((((-1.0)*x1259*x1273))+((sj1*x1269))+(((-1.0)*x1257*x1268))+((x1262*x1263))+((sj3*x1264))+((sj3*x1261)));
evalcond[3]=((((-1.0)*x1259*x1275))+((sj1*x1267))+(((-1.0)*x1257*x1270))+((x1260*x1263))+((sj3*x1256))+((sj3*x1266)));
evalcond[4]=(((cj3*x1261))+((cj3*x1264))+(((-1.0)*x1262*x1271))+(((-1.0)*x1265*x1273))+(((-1.0)*x1259*x1269))+((sj3*x1268)));
evalcond[5]=(((sj3*x1270))+(((-1.0)*x1260*x1271))+((cj3*x1266))+((cj3*x1256))+(((-1.0)*x1265*x1275))+(((-1.0)*x1259*x1267)));
evalcond[6]=((((-0.134)*x1253))+(((-1.0)*r00*x1254))+(((-1.0)*x1255*x1269))+(((-1.0)*px))+((x1252*x1258))+((x1252*x1272))+(((-0.1)*x1261)));
evalcond[7]=((((0.134)*x1252))+((x1253*x1272))+(((-1.0)*x1255*x1267))+((x1253*x1258))+(((-1.0)*py))+(((-0.1)*x1256))+(((-1.0)*r10*x1254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1276=IKPowWithIntegerCheck(cj3,-1);
if(!x1276.valid){
continue;
}
CheckValue<IkReal> x1277=IKPowWithIntegerCheck(r22,-1);
if(!x1277.valid){
continue;
}
sj4array[0]=((-1.0)*(x1276.value)*(x1277.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1278=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1278);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1278);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1279=((4.0)*r01);
IkReal x1280=((16.0)*r00);
IkReal x1281=(cj3*sj2);
IkReal x1282=((8.0)*r00);
IkReal x1283=(cj2*cj3);
IkReal x1284=(cj4*r01);
IkReal x1285=((16.0)*cj1);
IkReal x1286=((8.0)*sj1);
IkReal x1287=((16.0)*sj1);
IkReal x1288=((8.0)*cj1);
IkReal x1289=(sj2*sj3);
IkReal x1290=(cj2*sj3);
IkReal x1291=(sj1*x1290);
IkReal x1292=((4.0)*cj4*r00);
IkReal x1293=(((sj1*x1289*x1292))+((cj1*x1279*x1289))+((x1279*x1291))+((sj1*x1279*x1281)));
IkReal x1294=(((sj1*x1283*x1292))+((cj1*x1281*x1292))+((cj1*x1279*x1283))+((cj1*x1290*x1292)));
IkReal x1295=(x1294+(((-1.0)*x1293)));
IkReal x1296=(((sj1*x1281*x1282))+((x1282*x1291))+((cj1*x1282*x1289))+((x1284*x1288*x1290))+(((-1.0)*cj1*x1282*x1283))+((x1283*x1284*x1286))+(((-1.0)*x1284*x1286*x1289))+((x1281*x1284*x1288)));
IkReal x1297=(x1293+(((-1.0)*x1294)));
op[0]=x1295;
op[1]=x1296;
op[2]=x1295;
op[3]=(((x1280*x1291))+(((-1.0)*x1284*x1287*x1289))+((cj1*x1280*x1289))+(((-1.0)*cj1*x1280*x1283))+((x1283*x1284*x1287))+((x1284*x1285*x1290))+((x1281*x1284*x1285))+((sj1*x1280*x1281)));
op[4]=x1297;
op[5]=x1296;
op[6]=x1297;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1298=(cj5*sj4);
IkReal x1299=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1298))+((r01*x1299)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1298))+(((-1.0)*r11*x1299)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1298))+((r01*x1299))))+IKsqr((((r10*x1298))+(((-1.0)*r11*x1299))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1298))+((r01*x1299))), (((r10*x1298))+(((-1.0)*r11*x1299))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1300=IKcos(j0);
IkReal x1301=IKsin(j0);
IkReal x1302=((0.1)*sj5);
IkReal x1303=((0.392)*sj1);
IkReal x1304=(cj5*r11);
IkReal x1305=((1.0)*cj3);
IkReal x1306=((0.425)*cj1);
IkReal x1307=((1.0)*cj1);
IkReal x1308=(r11*sj5);
IkReal x1309=(cj5*r01);
IkReal x1310=(r01*sj5);
IkReal x1311=(cj3*cj4);
IkReal x1312=(r00*sj5);
IkReal x1313=((1.0)*sj1);
IkReal x1314=(r10*sj5);
IkReal x1315=(sj2*x1301);
IkReal x1316=(cj4*cj5*r00);
IkReal x1317=(sj2*x1300);
IkReal x1318=(cj4*cj5*r10);
IkReal x1319=((1.0)*cj4*sj3);
IkReal x1320=((0.392)*cj1*cj2);
IkReal x1321=(cj2*x1300);
IkReal x1322=((1.0)*cj5*sj4);
IkReal x1323=(cj2*x1301);
evalcond[0]=(x1300+(((-1.0)*r10*x1322))+((sj4*x1308)));
evalcond[1]=((((-1.0)*x1301))+(((-1.0)*r00*x1322))+((sj4*x1310)));
evalcond[2]=(((x1310*x1311))+((sj3*x1312))+(((-1.0)*x1307*x1321))+((sj3*x1309))+(((-1.0)*x1305*x1316))+((sj1*x1317)));
evalcond[3]=(((sj3*x1314))+(((-1.0)*x1307*x1323))+((sj3*x1304))+((x1308*x1311))+(((-1.0)*x1305*x1318))+((sj1*x1315)));
evalcond[4]=(((sj3*x1316))+(((-1.0)*x1313*x1321))+(((-1.0)*x1307*x1317))+((cj3*x1312))+((cj3*x1309))+(((-1.0)*x1310*x1319)));
evalcond[5]=(((sj3*x1318))+(((-1.0)*x1313*x1323))+(((-1.0)*x1308*x1319))+(((-1.0)*x1307*x1315))+((cj3*x1314))+((cj3*x1304)));
evalcond[6]=((((-0.134)*x1301))+((x1300*x1320))+(((-1.0)*r00*x1302))+((x1300*x1306))+(((-1.0)*px))+(((-1.0)*x1303*x1317))+(((-0.1)*x1309)));
evalcond[7]=((((-1.0)*py))+(((-1.0)*r10*x1302))+(((-1.0)*x1303*x1315))+(((-0.1)*x1304))+((x1301*x1320))+(((0.134)*x1300))+((x1301*x1306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1326 = IKatan2WithCheck(IkReal(((-0.1)*r21)),IkReal(((-0.1)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1326.valid){
continue;
}
IkReal x1324=((1.0)*(x1326.value));
if((((((0.01)*(r20*r20)))+(((0.01)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1327=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01)*(r20*r20)))+(((0.01)*(r21*r21)))))),-1);
if(!x1327.valid){
continue;
}
if( (((-1.0)*(x1327.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1327.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1325=((-1.0)*(IKasin(((-1.0)*(x1327.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))))))));
j5array[0]=((((-1.0)*x1324))+(((-1.0)*x1325)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1324))+(((1.0)*x1325)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1328=cj5*cj5;
IkReal x1329=r21*r21;
IkReal x1330=(sj3*x1328);
IkReal x1331=(((sj3*(r22*r22)))+((sj3*x1329))+(((-2.0)*cj5*r20*r21*sj3*sj5))+(((-1.0)*x1329*x1330))+((x1330*(r20*r20))));
j4eval[0]=x1331;
j4eval[1]=IKsign(x1331);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1332=cj5*cj5;
IkReal x1333=r21*r21;
IkReal x1334=((1.0)*cj3);
IkReal x1335=(cj3*x1332);
IkReal x1336=((((-1.0)*x1334*(r22*r22)))+(((-1.0)*x1333*x1334))+(((-1.0)*x1332*x1334*(r20*r20)))+((x1333*x1335))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1336;
j4eval[1]=IKsign(x1336);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1337=cj1*cj1;
IkReal x1338=cj2*cj2;
IkReal x1339=(cj2*x1337);
IkReal x1340=(cj1*sj1*sj2);
IkReal x1341=(x1337*x1338);
j0eval[0]=((6.36549089425466)+x1337+(((12.3585920403546)*x1339))+(((-5.69949185861059)*x1338))+(((-11.3989837172212)*cj2*x1340))+(((11.3989837172212)*x1341))+(((-12.3585920403546)*x1340)));
j0eval[1]=IKsign(((42905.0)+(((-76832.0)*cj2*x1340))+(((-38416.0)*x1338))+(((6740.25)*x1337))+(((83300.0)*x1339))+(((76832.0)*x1341))+(((-83300.0)*x1340))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1342=((1.0)*cj5);
IkReal x1343=((1.0)*sj5);
IkReal x1344=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1344;
j0eval[1]=((IKabs(((((-1.0)*r00*x1343))+(((-1.0)*r01*x1342)))))+(IKabs(((((-1.0)*r11*x1342))+(((-1.0)*r10*x1343))))));
j0eval[2]=IKsign(x1344);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1345=cj5*cj5;
IkReal x1346=r21*r21;
IkReal x1347=(sj1*sj2);
IkReal x1348=(r21*sj5);
IkReal x1349=(cj5*r20);
IkReal x1350=(cj1*cj2);
IkReal x1351=(x1346+(r22*r22)+(((-2.0)*x1348*x1349))+(((-1.0)*x1345*x1346))+((x1345*(r20*r20))));
j4eval[0]=x1351;
j4eval[1]=IKsign(x1351);
j4eval[2]=((IKabs(((((-1.0)*x1347*x1349))+((x1347*x1348))+(((-1.0)*x1348*x1350))+((x1349*x1350)))))+(IKabs((((r22*x1347))+(((-1.0)*r22*x1350))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1352=IKcos(j0);
IkReal x1353=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x1353))+(((0.425)*x1352)));
evalcond[1]=((((0.134)*x1352))+(((-1.0)*py))+(((0.425)*x1353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1354=((1.0)*cj5);
IkReal x1355=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1354)));
j4eval[0]=x1355;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1354))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1355);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1356=((1.0)*cj5);
IkReal x1357=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1356)));
j4eval[0]=x1357;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1356))))));
j4eval[2]=IKsign(x1357);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1358=cj5*cj5;
IkReal x1359=((1.0)*sj5);
IkReal x1360=(cj5*r20);
IkReal x1361=(r11*r21);
IkReal x1362=(x1361+(((-1.0)*r11*x1359*x1360))+((r10*r20*x1358))+(((-1.0)*cj5*r10*r21*x1359))+((r12*r22))+(((-1.0)*x1358*x1361)));
j4eval[0]=x1362;
j4eval[1]=IKsign(x1362);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1359))+((cj0*x1360)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1363=cj5*cj5;
IkReal x1364=((1.0)*sj5);
IkReal x1365=(cj5*r20);
IkReal x1366=(r11*r21);
CheckValue<IkReal> x1367 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1364))+((cj0*x1365)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1367.valid){
continue;
}
CheckValue<IkReal> x1368=IKPowWithIntegerCheck(IKsign((x1366+(((-1.0)*r11*x1364*x1365))+((r10*r20*x1363))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1364))+(((-1.0)*x1363*x1366)))),-1);
if(!x1368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1367.value)+(((1.5707963267949)*(x1368.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1369=IKsin(j4);
IkReal x1370=IKcos(j4);
IkReal x1371=((1.0)*sj0);
IkReal x1372=(cj5*r00);
IkReal x1373=(r11*sj5);
IkReal x1374=(cj5*r10);
IkReal x1375=(r21*sj5);
IkReal x1376=(cj5*r20);
IkReal x1377=(r01*sj5);
IkReal x1378=((1.0)*x1370);
IkReal x1379=((1.0)*x1369);
evalcond[0]=((((-1.0)*r22*x1378))+(((-1.0)*x1376*x1379))+((x1369*x1375)));
evalcond[1]=((((-1.0)*r22*x1379))+(((-1.0)*x1375*x1378))+((x1370*x1376)));
evalcond[2]=(cj0+(((-1.0)*x1374*x1379))+(((-1.0)*r12*x1378))+((x1369*x1373)));
evalcond[3]=((((-1.0)*x1372*x1379))+(((-1.0)*r02*x1378))+(((-1.0)*x1371))+((x1369*x1377)));
evalcond[4]=((((-1.0)*r02*x1379))+((x1370*x1372))+(((-1.0)*x1377*x1378))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1371))+(((-1.0)*r12*x1379))+((x1370*x1374))+(((-1.0)*x1373*x1378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1380=((1.0)*cj5);
CheckValue<IkReal> x1381 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1380)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1381.valid){
continue;
}
CheckValue<IkReal> x1382=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1380))+(((-1.0)*r10*sj5)))),-1);
if(!x1382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1381.value)+(((1.5707963267949)*(x1382.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1383=IKsin(j4);
IkReal x1384=IKcos(j4);
IkReal x1385=((1.0)*sj0);
IkReal x1386=(cj5*r00);
IkReal x1387=(r11*sj5);
IkReal x1388=(cj5*r10);
IkReal x1389=(r21*sj5);
IkReal x1390=(cj5*r20);
IkReal x1391=(r01*sj5);
IkReal x1392=((1.0)*x1384);
IkReal x1393=((1.0)*x1383);
evalcond[0]=((((-1.0)*x1390*x1393))+(((-1.0)*r22*x1392))+((x1383*x1389)));
evalcond[1]=((((-1.0)*x1389*x1392))+(((-1.0)*r22*x1393))+((x1384*x1390)));
evalcond[2]=((((-1.0)*r12*x1392))+cj0+(((-1.0)*x1388*x1393))+((x1383*x1387)));
evalcond[3]=((((-1.0)*x1385))+(((-1.0)*r02*x1392))+((x1383*x1391))+(((-1.0)*x1386*x1393)));
evalcond[4]=((((-1.0)*r02*x1393))+(((-1.0)*x1391*x1392))+((x1384*x1386))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1385))+(((-1.0)*r12*x1393))+((x1384*x1388))+(((-1.0)*x1387*x1392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1394=((1.0)*cj5);
CheckValue<IkReal> x1395=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1394)))),-1);
if(!x1395.valid){
continue;
}
CheckValue<IkReal> x1396 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1394))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1395.value)))+(x1396.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1397=IKsin(j4);
IkReal x1398=IKcos(j4);
IkReal x1399=((1.0)*sj0);
IkReal x1400=(cj5*r00);
IkReal x1401=(r11*sj5);
IkReal x1402=(cj5*r10);
IkReal x1403=(r21*sj5);
IkReal x1404=(cj5*r20);
IkReal x1405=(r01*sj5);
IkReal x1406=((1.0)*x1398);
IkReal x1407=((1.0)*x1397);
evalcond[0]=(((x1397*x1403))+(((-1.0)*r22*x1406))+(((-1.0)*x1404*x1407)));
evalcond[1]=((((-1.0)*r22*x1407))+((x1398*x1404))+(((-1.0)*x1403*x1406)));
evalcond[2]=((((-1.0)*r12*x1406))+cj0+((x1397*x1401))+(((-1.0)*x1402*x1407)));
evalcond[3]=(((x1397*x1405))+(((-1.0)*r02*x1406))+(((-1.0)*x1400*x1407))+(((-1.0)*x1399)));
evalcond[4]=((((-1.0)*x1405*x1406))+(((-1.0)*r02*x1407))+((x1398*x1400))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1407))+(((-1.0)*x1401*x1406))+((x1398*x1402))+(((-1.0)*x1399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1408=IKcos(j0);
IkReal x1409=IKsin(j0);
evalcond[0]=((((-0.134)*x1409))+(((-1.0)*px))+(((0.425)*x1408)));
evalcond[1]=((((-1.0)*py))+(((0.425)*x1409))+(((0.134)*x1408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1410=((1.0)*cj5);
IkReal x1411=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1410)));
j4eval[0]=x1411;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1410)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1411);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1412=cj5*cj5;
IkReal x1413=((1.0)*r21);
IkReal x1414=(cj5*sj5);
IkReal x1415=((1.0)*r20);
IkReal x1416=(((r01*r21))+(((-1.0)*r01*x1414*x1415))+(((-1.0)*r01*x1412*x1413))+((r00*r20*x1412))+(((-1.0)*r00*x1413*x1414))+((r02*r22)));
j4eval[0]=x1416;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1415)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1416);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1417=cj5*cj5;
IkReal x1418=(r21*sj5);
IkReal x1419=(r11*r21);
IkReal x1420=((1.0)*cj5*r20);
IkReal x1421=((((-1.0)*r11*sj5*x1420))+(((-1.0)*cj5*r10*x1418))+((r12*r22))+((r10*r20*x1417))+x1419+(((-1.0)*x1417*x1419)));
j4eval[0]=x1421;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1420))+((sj0*x1418))))));
j4eval[2]=IKsign(x1421);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1422=cj5*cj5;
IkReal x1423=(r21*sj5);
IkReal x1424=(r11*r21);
IkReal x1425=((1.0)*cj5*r20);
CheckValue<IkReal> x1426=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x1425))+(((-1.0)*x1422*x1424))+((r12*r22))+(((-1.0)*cj5*r10*x1423))+x1424+((r10*r20*x1422)))),-1);
if(!x1426.valid){
continue;
}
CheckValue<IkReal> x1427 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1425))+((sj0*x1423)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1426.value)))+(x1427.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1428=IKsin(j4);
IkReal x1429=IKcos(j4);
IkReal x1430=(r11*sj5);
IkReal x1431=(cj5*r00);
IkReal x1432=(cj5*r10);
IkReal x1433=(r21*sj5);
IkReal x1434=(cj5*r20);
IkReal x1435=(r01*sj5);
IkReal x1436=((1.0)*x1429);
IkReal x1437=((1.0)*x1428);
evalcond[0]=(((x1428*x1433))+(((-1.0)*x1434*x1437))+(((-1.0)*r22*x1436)));
evalcond[1]=(((x1429*x1434))+(((-1.0)*r22*x1437))+(((-1.0)*x1433*x1436)));
evalcond[2]=(((x1428*x1430))+(((-1.0)*r12*x1436))+cj0+(((-1.0)*x1432*x1437)));
evalcond[3]=(((x1429*x1431))+cj0+(((-1.0)*x1435*x1436))+(((-1.0)*r02*x1437)));
evalcond[4]=(((x1429*x1432))+(((-1.0)*r12*x1437))+sj0+(((-1.0)*x1430*x1436)));
evalcond[5]=(((x1428*x1435))+(((-1.0)*sj0))+(((-1.0)*x1431*x1437))+(((-1.0)*r02*x1436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1438=cj5*cj5;
IkReal x1439=((1.0)*r21);
IkReal x1440=(cj5*sj5);
IkReal x1441=((1.0)*r20);
CheckValue<IkReal> x1442=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r00*x1439*x1440))+(((-1.0)*r01*x1440*x1441))+(((-1.0)*r01*x1438*x1439))+((r00*r20*x1438))+((r02*r22)))),-1);
if(!x1442.valid){
continue;
}
CheckValue<IkReal> x1443 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1442.value)))+(x1443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1444=IKsin(j4);
IkReal x1445=IKcos(j4);
IkReal x1446=(r11*sj5);
IkReal x1447=(cj5*r00);
IkReal x1448=(cj5*r10);
IkReal x1449=(r21*sj5);
IkReal x1450=(cj5*r20);
IkReal x1451=(r01*sj5);
IkReal x1452=((1.0)*x1445);
IkReal x1453=((1.0)*x1444);
evalcond[0]=(((x1444*x1449))+(((-1.0)*r22*x1452))+(((-1.0)*x1450*x1453)));
evalcond[1]=(((x1445*x1450))+(((-1.0)*r22*x1453))+(((-1.0)*x1449*x1452)));
evalcond[2]=(((x1444*x1446))+cj0+(((-1.0)*x1448*x1453))+(((-1.0)*r12*x1452)));
evalcond[3]=(((x1445*x1447))+cj0+(((-1.0)*r02*x1453))+(((-1.0)*x1451*x1452)));
evalcond[4]=(((x1445*x1448))+sj0+(((-1.0)*x1446*x1452))+(((-1.0)*r12*x1453)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1447*x1453))+(((-1.0)*r02*x1452))+((x1444*x1451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1454=((1.0)*cj5);
CheckValue<IkReal> x1455 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1454))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1455.valid){
continue;
}
CheckValue<IkReal> x1456=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1454)))),-1);
if(!x1456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1455.value)+(((1.5707963267949)*(x1456.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1457=IKsin(j4);
IkReal x1458=IKcos(j4);
IkReal x1459=(r11*sj5);
IkReal x1460=(cj5*r00);
IkReal x1461=(cj5*r10);
IkReal x1462=(r21*sj5);
IkReal x1463=(cj5*r20);
IkReal x1464=(r01*sj5);
IkReal x1465=((1.0)*x1458);
IkReal x1466=((1.0)*x1457);
evalcond[0]=((((-1.0)*r22*x1465))+(((-1.0)*x1463*x1466))+((x1457*x1462)));
evalcond[1]=((((-1.0)*r22*x1466))+(((-1.0)*x1462*x1465))+((x1458*x1463)));
evalcond[2]=(cj0+(((-1.0)*x1461*x1466))+(((-1.0)*r12*x1465))+((x1457*x1459)));
evalcond[3]=((((-1.0)*r02*x1466))+cj0+(((-1.0)*x1464*x1465))+((x1458*x1460)));
evalcond[4]=(sj0+(((-1.0)*x1459*x1465))+((x1458*x1461))+(((-1.0)*r12*x1466)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1465))+(((-1.0)*x1460*x1466))+((x1457*x1464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1467=((1.0)*cj5);
IkReal x1468=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1467)));
j4eval[0]=x1468;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1467)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1468);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1469=((1.0)*cj5);
IkReal x1470=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1469)));
j4eval[0]=x1470;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1469))))));
j4eval[2]=IKsign(x1470);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1471=cj5*cj5;
IkReal x1472=((1.0)*sj5);
IkReal x1473=(cj5*r20);
IkReal x1474=(r11*r21);
IkReal x1475=((((-1.0)*cj5*r10*r21*x1472))+(((-1.0)*r11*x1472*x1473))+((r12*r22))+(((-1.0)*x1471*x1474))+x1474+((r10*r20*x1471)));
j4eval[0]=x1475;
j4eval[1]=IKsign(x1475);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1472))+((cj0*x1473))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1476=cj5*cj5;
IkReal x1477=((1.0)*sj5);
IkReal x1478=(cj5*r20);
IkReal x1479=(r11*r21);
CheckValue<IkReal> x1480 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1477))+((cj0*x1478)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1480.valid){
continue;
}
CheckValue<IkReal> x1481=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1477))+(((-1.0)*r11*x1477*x1478))+((r12*r22))+(((-1.0)*x1476*x1479))+x1479+((r10*r20*x1476)))),-1);
if(!x1481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1480.value)+(((1.5707963267949)*(x1481.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1482=IKsin(j4);
IkReal x1483=IKcos(j4);
IkReal x1484=((1.0)*sj0);
IkReal x1485=(cj5*r00);
IkReal x1486=(r11*sj5);
IkReal x1487=(cj5*r10);
IkReal x1488=(r21*sj5);
IkReal x1489=(cj5*r20);
IkReal x1490=(r01*sj5);
IkReal x1491=((1.0)*x1483);
IkReal x1492=((1.0)*x1482);
evalcond[0]=(((x1482*x1488))+(((-1.0)*r22*x1491))+(((-1.0)*x1489*x1492)));
evalcond[1]=(((x1483*x1489))+(((-1.0)*r22*x1492))+(((-1.0)*x1488*x1491)));
evalcond[2]=((((-1.0)*r12*x1491))+(((-1.0)*x1487*x1492))+cj0+((x1482*x1486)));
evalcond[3]=(((x1482*x1490))+(((-1.0)*x1484))+(((-1.0)*x1485*x1492))+(((-1.0)*r02*x1491)));
evalcond[4]=(((x1483*x1485))+(((-1.0)*r02*x1492))+(((-1.0)*x1490*x1491))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1492))+(((-1.0)*x1484))+(((-1.0)*x1486*x1491))+((x1483*x1487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1493=((1.0)*cj5);
CheckValue<IkReal> x1494=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1493)))),-1);
if(!x1494.valid){
continue;
}
CheckValue<IkReal> x1495 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1493))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1494.value)))+(x1495.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1496=IKsin(j4);
IkReal x1497=IKcos(j4);
IkReal x1498=((1.0)*sj0);
IkReal x1499=(cj5*r00);
IkReal x1500=(r11*sj5);
IkReal x1501=(cj5*r10);
IkReal x1502=(r21*sj5);
IkReal x1503=(cj5*r20);
IkReal x1504=(r01*sj5);
IkReal x1505=((1.0)*x1497);
IkReal x1506=((1.0)*x1496);
evalcond[0]=((((-1.0)*r22*x1505))+((x1496*x1502))+(((-1.0)*x1503*x1506)));
evalcond[1]=((((-1.0)*r22*x1506))+((x1497*x1503))+(((-1.0)*x1502*x1505)));
evalcond[2]=(cj0+(((-1.0)*x1501*x1506))+((x1496*x1500))+(((-1.0)*r12*x1505)));
evalcond[3]=((((-1.0)*x1499*x1506))+(((-1.0)*x1498))+(((-1.0)*r02*x1505))+((x1496*x1504)));
evalcond[4]=((((-1.0)*x1504*x1505))+((x1497*x1499))+(((-1.0)*r02*x1506))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1498))+((x1497*x1501))+(((-1.0)*x1500*x1505))+(((-1.0)*r12*x1506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1507=((1.0)*cj5);
CheckValue<IkReal> x1508 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1507))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1508.valid){
continue;
}
CheckValue<IkReal> x1509=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1507))+(((-1.0)*r00*sj5)))),-1);
if(!x1509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1508.value)+(((1.5707963267949)*(x1509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1510=IKsin(j4);
IkReal x1511=IKcos(j4);
IkReal x1512=((1.0)*sj0);
IkReal x1513=(cj5*r00);
IkReal x1514=(r11*sj5);
IkReal x1515=(cj5*r10);
IkReal x1516=(r21*sj5);
IkReal x1517=(cj5*r20);
IkReal x1518=(r01*sj5);
IkReal x1519=((1.0)*x1511);
IkReal x1520=((1.0)*x1510);
evalcond[0]=(((x1510*x1516))+(((-1.0)*r22*x1519))+(((-1.0)*x1517*x1520)));
evalcond[1]=((((-1.0)*x1516*x1519))+(((-1.0)*r22*x1520))+((x1511*x1517)));
evalcond[2]=(((x1510*x1514))+cj0+(((-1.0)*x1515*x1520))+(((-1.0)*r12*x1519)));
evalcond[3]=(((x1510*x1518))+(((-1.0)*x1512))+(((-1.0)*x1513*x1520))+(((-1.0)*r02*x1519)));
evalcond[4]=((((-1.0)*x1518*x1519))+(((-1.0)*r02*x1520))+((x1511*x1513))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1520))+(((-1.0)*x1512))+(((-1.0)*x1514*x1519))+((x1511*x1515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1521=((1.0)*cj5);
IkReal x1522=((((-1.0)*r01*x1521))+(((-1.0)*r00*sj5)));
j4eval[0]=x1522;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1521))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1522);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1523=cj5*cj5;
IkReal x1524=((1.0)*r21);
IkReal x1525=(cj5*sj5);
IkReal x1526=((1.0)*r20);
IkReal x1527=(((r00*r20*x1523))+((r01*r21))+(((-1.0)*r01*x1525*x1526))+(((-1.0)*r01*x1523*x1524))+(((-1.0)*r00*x1524*x1525))+((r02*r22)));
j4eval[0]=x1527;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1526))))));
j4eval[2]=IKsign(x1527);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1528=cj5*cj5;
IkReal x1529=(r21*sj5);
IkReal x1530=(r11*r21);
IkReal x1531=((1.0)*cj5*r20);
IkReal x1532=(((r12*r22))+(((-1.0)*x1528*x1530))+x1530+(((-1.0)*r11*sj5*x1531))+(((-1.0)*cj5*r10*x1529))+((r10*r20*x1528)));
j4eval[0]=x1532;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1531))+((sj0*x1529)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1533=cj5*cj5;
IkReal x1534=(r21*sj5);
IkReal x1535=(r11*r21);
IkReal x1536=((1.0)*cj5*r20);
CheckValue<IkReal> x1537 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1536))+((sj0*x1534)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1537.valid){
continue;
}
CheckValue<IkReal> x1538=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1533*x1535))+((r12*r22))+x1535+(((-1.0)*cj5*r10*x1534))+(((-1.0)*r11*sj5*x1536))+((r10*r20*x1533)))),-1);
if(!x1538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1537.value)+(((1.5707963267949)*(x1538.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1539=IKsin(j4);
IkReal x1540=IKcos(j4);
IkReal x1541=(r11*sj5);
IkReal x1542=(cj5*r00);
IkReal x1543=(cj5*r10);
IkReal x1544=(r21*sj5);
IkReal x1545=(cj5*r20);
IkReal x1546=(r01*sj5);
IkReal x1547=((1.0)*x1540);
IkReal x1548=((1.0)*x1539);
evalcond[0]=(((x1539*x1544))+(((-1.0)*r22*x1547))+(((-1.0)*x1545*x1548)));
evalcond[1]=((((-1.0)*r22*x1548))+((x1540*x1545))+(((-1.0)*x1544*x1547)));
evalcond[2]=((((-1.0)*x1543*x1548))+cj0+((x1539*x1541))+(((-1.0)*r12*x1547)));
evalcond[3]=((((-1.0)*x1546*x1547))+(((-1.0)*r02*x1548))+cj0+((x1540*x1542)));
evalcond[4]=(sj0+((x1540*x1543))+(((-1.0)*r12*x1548))+(((-1.0)*x1541*x1547)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1547))+((x1539*x1546))+(((-1.0)*x1542*x1548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1549=cj5*cj5;
IkReal x1550=((1.0)*r21);
IkReal x1551=(cj5*sj5);
IkReal x1552=((1.0)*r20);
CheckValue<IkReal> x1553 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1553.valid){
continue;
}
CheckValue<IkReal> x1554=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x1551*x1552))+(((-1.0)*r01*x1549*x1550))+((r00*r20*x1549))+(((-1.0)*r00*x1550*x1551))+((r02*r22)))),-1);
if(!x1554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1553.value)+(((1.5707963267949)*(x1554.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1555=IKsin(j4);
IkReal x1556=IKcos(j4);
IkReal x1557=(r11*sj5);
IkReal x1558=(cj5*r00);
IkReal x1559=(cj5*r10);
IkReal x1560=(r21*sj5);
IkReal x1561=(cj5*r20);
IkReal x1562=(r01*sj5);
IkReal x1563=((1.0)*x1556);
IkReal x1564=((1.0)*x1555);
evalcond[0]=(((x1555*x1560))+(((-1.0)*r22*x1563))+(((-1.0)*x1561*x1564)));
evalcond[1]=(((x1556*x1561))+(((-1.0)*x1560*x1563))+(((-1.0)*r22*x1564)));
evalcond[2]=((((-1.0)*x1559*x1564))+cj0+((x1555*x1557))+(((-1.0)*r12*x1563)));
evalcond[3]=((((-1.0)*r02*x1564))+cj0+((x1556*x1558))+(((-1.0)*x1562*x1563)));
evalcond[4]=(sj0+((x1556*x1559))+(((-1.0)*x1557*x1563))+(((-1.0)*r12*x1564)));
evalcond[5]=(((x1555*x1562))+(((-1.0)*sj0))+(((-1.0)*r02*x1563))+(((-1.0)*x1558*x1564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1565=((1.0)*cj5);
CheckValue<IkReal> x1566 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1565)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1566.valid){
continue;
}
CheckValue<IkReal> x1567=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1565)))),-1);
if(!x1567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1566.value)+(((1.5707963267949)*(x1567.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1568=IKsin(j4);
IkReal x1569=IKcos(j4);
IkReal x1570=(r11*sj5);
IkReal x1571=(cj5*r00);
IkReal x1572=(cj5*r10);
IkReal x1573=(r21*sj5);
IkReal x1574=(cj5*r20);
IkReal x1575=(r01*sj5);
IkReal x1576=((1.0)*x1569);
IkReal x1577=((1.0)*x1568);
evalcond[0]=((((-1.0)*r22*x1576))+((x1568*x1573))+(((-1.0)*x1574*x1577)));
evalcond[1]=(((x1569*x1574))+(((-1.0)*x1573*x1576))+(((-1.0)*r22*x1577)));
evalcond[2]=(cj0+(((-1.0)*x1572*x1577))+((x1568*x1570))+(((-1.0)*r12*x1576)));
evalcond[3]=((((-1.0)*r02*x1577))+((x1569*x1571))+cj0+(((-1.0)*x1575*x1576)));
evalcond[4]=(sj0+((x1569*x1572))+(((-1.0)*x1570*x1576))+(((-1.0)*r12*x1577)));
evalcond[5]=((((-1.0)*r02*x1576))+(((-1.0)*sj0))+(((-1.0)*x1571*x1577))+((x1568*x1575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1578=IKcos(j0);
IkReal x1579=IKsin(j0);
evalcond[0]=((((-0.425)*x1578))+(((-0.134)*x1579))+(((-1.0)*px)));
evalcond[1]=((((-0.425)*x1579))+(((0.134)*x1578))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1580=((1.0)*cj5);
IkReal x1581=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1580)));
j4eval[0]=x1581;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1580))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1581);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1582=cj5*cj5;
IkReal x1583=((1.0)*r21);
IkReal x1584=(cj5*sj5);
IkReal x1585=((1.0)*r20);
IkReal x1586=((((-1.0)*r01*x1584*x1585))+((r01*r21))+(((-1.0)*r01*x1582*x1583))+((r00*r20*x1582))+(((-1.0)*r00*x1583*x1584))+((r02*r22)));
j4eval[0]=x1586;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x1585))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1586);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1587=cj5*cj5;
IkReal x1588=(r21*sj5);
IkReal x1589=(r11*r21);
IkReal x1590=((1.0)*cj5*r20);
IkReal x1591=((((-1.0)*cj5*r10*x1588))+((r10*r20*x1587))+(((-1.0)*x1587*x1589))+((r12*r22))+x1589+(((-1.0)*r11*sj5*x1590)));
j4eval[0]=x1591;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1590))+((sj0*x1588))))));
j4eval[2]=IKsign(x1591);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1592=cj5*cj5;
IkReal x1593=(r21*sj5);
IkReal x1594=(r11*r21);
IkReal x1595=((1.0)*cj5*r20);
CheckValue<IkReal> x1596 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1595))+((sj0*x1593)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1596.valid){
continue;
}
CheckValue<IkReal> x1597=IKPowWithIntegerCheck(IKsign((((r10*r20*x1592))+((r12*r22))+x1594+(((-1.0)*r11*sj5*x1595))+(((-1.0)*x1592*x1594))+(((-1.0)*cj5*r10*x1593)))),-1);
if(!x1597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1596.value)+(((1.5707963267949)*(x1597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1598=IKsin(j4);
IkReal x1599=IKcos(j4);
IkReal x1600=(r11*sj5);
IkReal x1601=(cj5*r00);
IkReal x1602=(cj5*r10);
IkReal x1603=(r21*sj5);
IkReal x1604=(cj5*r20);
IkReal x1605=(r01*sj5);
IkReal x1606=((1.0)*x1599);
IkReal x1607=((1.0)*x1598);
evalcond[0]=((((-1.0)*r22*x1606))+((x1598*x1603))+(((-1.0)*x1604*x1607)));
evalcond[1]=(((x1599*x1604))+(((-1.0)*r22*x1607))+(((-1.0)*x1603*x1606)));
evalcond[2]=(cj0+((x1598*x1600))+(((-1.0)*x1602*x1607))+(((-1.0)*r12*x1606)));
evalcond[3]=(cj0+((x1599*x1601))+(((-1.0)*x1605*x1606))+(((-1.0)*r02*x1607)));
evalcond[4]=(sj0+((x1599*x1602))+(((-1.0)*x1600*x1606))+(((-1.0)*r12*x1607)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1601*x1607))+((x1598*x1605))+(((-1.0)*r02*x1606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1608=cj5*cj5;
IkReal x1609=((1.0)*r21);
IkReal x1610=(cj5*sj5);
IkReal x1611=((1.0)*r20);
CheckValue<IkReal> x1612=IKPowWithIntegerCheck(IKsign((((r00*r20*x1608))+(((-1.0)*r01*x1610*x1611))+((r01*r21))+(((-1.0)*r01*x1608*x1609))+((r02*r22))+(((-1.0)*r00*x1609*x1610)))),-1);
if(!x1612.valid){
continue;
}
CheckValue<IkReal> x1613 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1611)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1612.value)))+(x1613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1614=IKsin(j4);
IkReal x1615=IKcos(j4);
IkReal x1616=(r11*sj5);
IkReal x1617=(cj5*r00);
IkReal x1618=(cj5*r10);
IkReal x1619=(r21*sj5);
IkReal x1620=(cj5*r20);
IkReal x1621=(r01*sj5);
IkReal x1622=((1.0)*x1615);
IkReal x1623=((1.0)*x1614);
evalcond[0]=(((x1614*x1619))+(((-1.0)*r22*x1622))+(((-1.0)*x1620*x1623)));
evalcond[1]=((((-1.0)*x1619*x1622))+((x1615*x1620))+(((-1.0)*r22*x1623)));
evalcond[2]=((((-1.0)*r12*x1622))+cj0+((x1614*x1616))+(((-1.0)*x1618*x1623)));
evalcond[3]=(cj0+(((-1.0)*r02*x1623))+((x1615*x1617))+(((-1.0)*x1621*x1622)));
evalcond[4]=((((-1.0)*r12*x1623))+sj0+(((-1.0)*x1616*x1622))+((x1615*x1618)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1617*x1623))+((x1614*x1621))+(((-1.0)*r02*x1622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1624=((1.0)*cj5);
CheckValue<IkReal> x1625 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1624)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1625.valid){
continue;
}
CheckValue<IkReal> x1626=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1624)))),-1);
if(!x1626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1625.value)+(((1.5707963267949)*(x1626.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1627=IKsin(j4);
IkReal x1628=IKcos(j4);
IkReal x1629=(r11*sj5);
IkReal x1630=(cj5*r00);
IkReal x1631=(cj5*r10);
IkReal x1632=(r21*sj5);
IkReal x1633=(cj5*r20);
IkReal x1634=(r01*sj5);
IkReal x1635=((1.0)*x1628);
IkReal x1636=((1.0)*x1627);
evalcond[0]=(((x1627*x1632))+(((-1.0)*r22*x1635))+(((-1.0)*x1633*x1636)));
evalcond[1]=((((-1.0)*r22*x1636))+((x1628*x1633))+(((-1.0)*x1632*x1635)));
evalcond[2]=(((x1627*x1629))+cj0+(((-1.0)*r12*x1635))+(((-1.0)*x1631*x1636)));
evalcond[3]=(cj0+(((-1.0)*x1634*x1635))+((x1628*x1630))+(((-1.0)*r02*x1636)));
evalcond[4]=(sj0+(((-1.0)*r12*x1636))+((x1628*x1631))+(((-1.0)*x1629*x1635)));
evalcond[5]=(((x1627*x1634))+(((-1.0)*sj0))+(((-1.0)*x1630*x1636))+(((-1.0)*r02*x1635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1637=IKcos(j0);
IkReal x1638=IKsin(j0);
evalcond[0]=((((-0.134)*x1638))+(((-1.0)*px))+(((-0.425)*x1637)));
evalcond[1]=((((0.134)*x1637))+(((-1.0)*py))+(((-0.425)*x1638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1639=((1.0)*cj5);
IkReal x1640=((((-1.0)*r01*x1639))+(((-1.0)*r00*sj5)));
j4eval[0]=x1640;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1639))))));
j4eval[2]=IKsign(x1640);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1641=((1.0)*cj5);
IkReal x1642=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1641)));
j4eval[0]=x1642;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1641))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1642);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1643=cj5*cj5;
IkReal x1644=((1.0)*sj5);
IkReal x1645=(cj5*r20);
IkReal x1646=(r11*r21);
IkReal x1647=(x1646+(((-1.0)*cj5*r10*r21*x1644))+((r12*r22))+(((-1.0)*r11*x1644*x1645))+((r10*r20*x1643))+(((-1.0)*x1643*x1646)));
j4eval[0]=x1647;
j4eval[1]=IKsign(x1647);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1644))+((cj0*x1645)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1648=cj5*cj5;
IkReal x1649=((1.0)*sj5);
IkReal x1650=(cj5*r20);
IkReal x1651=(r11*r21);
CheckValue<IkReal> x1652 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1649))+((cj0*x1650)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1652.valid){
continue;
}
CheckValue<IkReal> x1653=IKPowWithIntegerCheck(IKsign((x1651+(((-1.0)*cj5*r10*r21*x1649))+((r12*r22))+(((-1.0)*x1648*x1651))+((r10*r20*x1648))+(((-1.0)*r11*x1649*x1650)))),-1);
if(!x1653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1652.value)+(((1.5707963267949)*(x1653.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1654=IKsin(j4);
IkReal x1655=IKcos(j4);
IkReal x1656=((1.0)*sj0);
IkReal x1657=(cj5*r00);
IkReal x1658=(r11*sj5);
IkReal x1659=(cj5*r10);
IkReal x1660=(r21*sj5);
IkReal x1661=(cj5*r20);
IkReal x1662=(r01*sj5);
IkReal x1663=((1.0)*x1655);
IkReal x1664=((1.0)*x1654);
evalcond[0]=(((x1654*x1660))+(((-1.0)*x1661*x1664))+(((-1.0)*r22*x1663)));
evalcond[1]=(((x1655*x1661))+(((-1.0)*r22*x1664))+(((-1.0)*x1660*x1663)));
evalcond[2]=(((x1654*x1658))+cj0+(((-1.0)*r12*x1663))+(((-1.0)*x1659*x1664)));
evalcond[3]=(((x1654*x1662))+(((-1.0)*x1656))+(((-1.0)*x1657*x1664))+(((-1.0)*r02*x1663)));
evalcond[4]=((((-1.0)*x1662*x1663))+((x1655*x1657))+(((-1.0)*r02*x1664))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1664))+((x1655*x1659))+(((-1.0)*x1656))+(((-1.0)*x1658*x1663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1665=((1.0)*cj5);
CheckValue<IkReal> x1666 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1665))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1666.valid){
continue;
}
CheckValue<IkReal> x1667=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1665)))),-1);
if(!x1667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1666.value)+(((1.5707963267949)*(x1667.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1668=IKsin(j4);
IkReal x1669=IKcos(j4);
IkReal x1670=((1.0)*sj0);
IkReal x1671=(cj5*r00);
IkReal x1672=(r11*sj5);
IkReal x1673=(cj5*r10);
IkReal x1674=(r21*sj5);
IkReal x1675=(cj5*r20);
IkReal x1676=(r01*sj5);
IkReal x1677=((1.0)*x1669);
IkReal x1678=((1.0)*x1668);
evalcond[0]=(((x1668*x1674))+(((-1.0)*r22*x1677))+(((-1.0)*x1675*x1678)));
evalcond[1]=(((x1669*x1675))+(((-1.0)*x1674*x1677))+(((-1.0)*r22*x1678)));
evalcond[2]=((((-1.0)*x1673*x1678))+cj0+((x1668*x1672))+(((-1.0)*r12*x1677)));
evalcond[3]=((((-1.0)*r02*x1677))+((x1668*x1676))+(((-1.0)*x1671*x1678))+(((-1.0)*x1670)));
evalcond[4]=((((-1.0)*r02*x1678))+((x1669*x1671))+(((-1.0)*x1676*x1677))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1672*x1677))+((x1669*x1673))+(((-1.0)*r12*x1678))+(((-1.0)*x1670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1679=((1.0)*cj5);
CheckValue<IkReal> x1680=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1679)))),-1);
if(!x1680.valid){
continue;
}
CheckValue<IkReal> x1681 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1679)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1680.value)))+(x1681.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1682=IKsin(j4);
IkReal x1683=IKcos(j4);
IkReal x1684=((1.0)*sj0);
IkReal x1685=(cj5*r00);
IkReal x1686=(r11*sj5);
IkReal x1687=(cj5*r10);
IkReal x1688=(r21*sj5);
IkReal x1689=(cj5*r20);
IkReal x1690=(r01*sj5);
IkReal x1691=((1.0)*x1683);
IkReal x1692=((1.0)*x1682);
evalcond[0]=((((-1.0)*r22*x1691))+((x1682*x1688))+(((-1.0)*x1689*x1692)));
evalcond[1]=((((-1.0)*x1688*x1691))+(((-1.0)*r22*x1692))+((x1683*x1689)));
evalcond[2]=(cj0+(((-1.0)*x1687*x1692))+(((-1.0)*r12*x1691))+((x1682*x1686)));
evalcond[3]=((((-1.0)*x1684))+(((-1.0)*r02*x1691))+((x1682*x1690))+(((-1.0)*x1685*x1692)));
evalcond[4]=((((-1.0)*x1690*x1691))+(((-1.0)*r02*x1692))+((x1683*x1685))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1686*x1691))+(((-1.0)*x1684))+(((-1.0)*r12*x1692))+((x1683*x1687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1693=((1.0)*cj5);
IkReal x1694=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1693)));
j4eval[0]=x1694;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1693))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1694);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1695=cj5*cj5;
IkReal x1696=((1.0)*r21);
IkReal x1697=(cj5*sj5);
IkReal x1698=((1.0)*r20);
IkReal x1699=(((r01*r21))+(((-1.0)*r01*x1697*x1698))+((r00*r20*x1695))+(((-1.0)*r01*x1695*x1696))+((r02*r22))+(((-1.0)*r00*x1696*x1697)));
j4eval[0]=x1699;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x1698))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1699);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1700=cj5*cj5;
IkReal x1701=(r21*sj5);
IkReal x1702=(r11*r21);
IkReal x1703=((1.0)*cj5*r20);
IkReal x1704=(x1702+((r12*r22))+(((-1.0)*r11*sj5*x1703))+((r10*r20*x1700))+(((-1.0)*x1700*x1702))+(((-1.0)*cj5*r10*x1701)));
j4eval[0]=x1704;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1703))+((sj0*x1701)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1704);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1705=cj5*cj5;
IkReal x1706=(r21*sj5);
IkReal x1707=(r11*r21);
IkReal x1708=((1.0)*cj5*r20);
CheckValue<IkReal> x1709=IKPowWithIntegerCheck(IKsign((x1707+((r12*r22))+(((-1.0)*r11*sj5*x1708))+((r10*r20*x1705))+(((-1.0)*x1705*x1707))+(((-1.0)*cj5*r10*x1706)))),-1);
if(!x1709.valid){
continue;
}
CheckValue<IkReal> x1710 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1708))+((sj0*x1706)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1709.value)))+(x1710.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1711=IKsin(j4);
IkReal x1712=IKcos(j4);
IkReal x1713=(r11*sj5);
IkReal x1714=(cj5*r00);
IkReal x1715=(cj5*r10);
IkReal x1716=(r21*sj5);
IkReal x1717=(cj5*r20);
IkReal x1718=(r01*sj5);
IkReal x1719=((1.0)*x1712);
IkReal x1720=((1.0)*x1711);
evalcond[0]=((((-1.0)*x1717*x1720))+((x1711*x1716))+(((-1.0)*r22*x1719)));
evalcond[1]=((((-1.0)*r22*x1720))+((x1712*x1717))+(((-1.0)*x1716*x1719)));
evalcond[2]=((((-1.0)*x1715*x1720))+cj0+((x1711*x1713))+(((-1.0)*r12*x1719)));
evalcond[3]=(cj0+((x1712*x1714))+(((-1.0)*x1718*x1719))+(((-1.0)*r02*x1720)));
evalcond[4]=(sj0+((x1712*x1715))+(((-1.0)*r12*x1720))+(((-1.0)*x1713*x1719)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1719))+((x1711*x1718))+(((-1.0)*x1714*x1720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1721=cj5*cj5;
IkReal x1722=((1.0)*r21);
IkReal x1723=(cj5*sj5);
IkReal x1724=((1.0)*r20);
CheckValue<IkReal> x1725=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1722*x1723))+(((-1.0)*r01*x1721*x1722))+((r01*r21))+(((-1.0)*r01*x1723*x1724))+((r02*r22))+((r00*r20*x1721)))),-1);
if(!x1725.valid){
continue;
}
CheckValue<IkReal> x1726 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1724)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1725.value)))+(x1726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1727=IKsin(j4);
IkReal x1728=IKcos(j4);
IkReal x1729=(r11*sj5);
IkReal x1730=(cj5*r00);
IkReal x1731=(cj5*r10);
IkReal x1732=(r21*sj5);
IkReal x1733=(cj5*r20);
IkReal x1734=(r01*sj5);
IkReal x1735=((1.0)*x1728);
IkReal x1736=((1.0)*x1727);
evalcond[0]=((((-1.0)*x1733*x1736))+((x1727*x1732))+(((-1.0)*r22*x1735)));
evalcond[1]=(((x1728*x1733))+(((-1.0)*x1732*x1735))+(((-1.0)*r22*x1736)));
evalcond[2]=((((-1.0)*x1731*x1736))+cj0+(((-1.0)*r12*x1735))+((x1727*x1729)));
evalcond[3]=(((x1728*x1730))+cj0+(((-1.0)*x1734*x1735))+(((-1.0)*r02*x1736)));
evalcond[4]=(((x1728*x1731))+sj0+(((-1.0)*r12*x1736))+(((-1.0)*x1729*x1735)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1730*x1736))+((x1727*x1734))+(((-1.0)*r02*x1735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1737=((1.0)*cj5);
CheckValue<IkReal> x1738 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1737)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1738.valid){
continue;
}
CheckValue<IkReal> x1739=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1737))+(((-1.0)*r00*sj5)))),-1);
if(!x1739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1738.value)+(((1.5707963267949)*(x1739.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1740=IKsin(j4);
IkReal x1741=IKcos(j4);
IkReal x1742=(r11*sj5);
IkReal x1743=(cj5*r00);
IkReal x1744=(cj5*r10);
IkReal x1745=(r21*sj5);
IkReal x1746=(cj5*r20);
IkReal x1747=(r01*sj5);
IkReal x1748=((1.0)*x1741);
IkReal x1749=((1.0)*x1740);
evalcond[0]=((((-1.0)*r22*x1748))+(((-1.0)*x1746*x1749))+((x1740*x1745)));
evalcond[1]=((((-1.0)*r22*x1749))+(((-1.0)*x1745*x1748))+((x1741*x1746)));
evalcond[2]=((((-1.0)*r12*x1748))+cj0+(((-1.0)*x1744*x1749))+((x1740*x1742)));
evalcond[3]=(cj0+(((-1.0)*x1747*x1748))+((x1741*x1743))+(((-1.0)*r02*x1749)));
evalcond[4]=((((-1.0)*r12*x1749))+sj0+(((-1.0)*x1742*x1748))+((x1741*x1744)));
evalcond[5]=((((-1.0)*sj0))+((x1740*x1747))+(((-1.0)*x1743*x1749))+(((-1.0)*r02*x1748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1750=((1.0)*cj5);
IkReal x1751=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1750)));
j4eval[0]=x1751;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1750))))));
j4eval[2]=IKsign(x1751);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1752=((1.0)*cj5);
IkReal x1753=((((-1.0)*r11*x1752))+(((-1.0)*r10*sj5)));
j4eval[0]=x1753;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1752))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1753);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1754=cj5*cj5;
IkReal x1755=((1.0)*sj5);
IkReal x1756=(cj5*r20);
IkReal x1757=(r11*r21);
IkReal x1758=(((r10*r20*x1754))+(((-1.0)*cj5*r10*r21*x1755))+x1757+((r12*r22))+(((-1.0)*r11*x1755*x1756))+(((-1.0)*x1754*x1757)));
j4eval[0]=x1758;
j4eval[1]=IKsign(x1758);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1755))+((cj0*x1756))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1759=cj5*cj5;
IkReal x1760=((1.0)*sj5);
IkReal x1761=(cj5*r20);
IkReal x1762=(r11*r21);
CheckValue<IkReal> x1763=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1759*x1762))+((r10*r20*x1759))+x1762+(((-1.0)*r11*x1760*x1761))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1760)))),-1);
if(!x1763.valid){
continue;
}
CheckValue<IkReal> x1764 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1760))+((cj0*x1761)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1763.value)))+(x1764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1765=IKsin(j4);
IkReal x1766=IKcos(j4);
IkReal x1767=((1.0)*sj0);
IkReal x1768=(cj5*r00);
IkReal x1769=(r11*sj5);
IkReal x1770=(cj5*r10);
IkReal x1771=(r21*sj5);
IkReal x1772=(cj5*r20);
IkReal x1773=(r01*sj5);
IkReal x1774=((1.0)*x1766);
IkReal x1775=((1.0)*x1765);
evalcond[0]=((((-1.0)*x1772*x1775))+((x1765*x1771))+(((-1.0)*r22*x1774)));
evalcond[1]=(((x1766*x1772))+(((-1.0)*x1771*x1774))+(((-1.0)*r22*x1775)));
evalcond[2]=(cj0+((x1765*x1769))+(((-1.0)*x1770*x1775))+(((-1.0)*r12*x1774)));
evalcond[3]=((((-1.0)*x1767))+((x1765*x1773))+(((-1.0)*r02*x1774))+(((-1.0)*x1768*x1775)));
evalcond[4]=((((-1.0)*r02*x1775))+(((-1.0)*x1773*x1774))+((x1766*x1768))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1767))+((x1766*x1770))+(((-1.0)*r12*x1775))+(((-1.0)*x1769*x1774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1776=((1.0)*cj5);
CheckValue<IkReal> x1777=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1776)))),-1);
if(!x1777.valid){
continue;
}
CheckValue<IkReal> x1778 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1776))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1777.value)))+(x1778.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1779=IKsin(j4);
IkReal x1780=IKcos(j4);
IkReal x1781=((1.0)*sj0);
IkReal x1782=(cj5*r00);
IkReal x1783=(r11*sj5);
IkReal x1784=(cj5*r10);
IkReal x1785=(r21*sj5);
IkReal x1786=(cj5*r20);
IkReal x1787=(r01*sj5);
IkReal x1788=((1.0)*x1780);
IkReal x1789=((1.0)*x1779);
evalcond[0]=((((-1.0)*r22*x1788))+((x1779*x1785))+(((-1.0)*x1786*x1789)));
evalcond[1]=((((-1.0)*r22*x1789))+(((-1.0)*x1785*x1788))+((x1780*x1786)));
evalcond[2]=(cj0+(((-1.0)*r12*x1788))+((x1779*x1783))+(((-1.0)*x1784*x1789)));
evalcond[3]=((((-1.0)*x1781))+((x1779*x1787))+(((-1.0)*x1782*x1789))+(((-1.0)*r02*x1788)));
evalcond[4]=((((-1.0)*x1787*x1788))+((x1780*x1782))+(((-1.0)*r02*x1789))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1783*x1788))+(((-1.0)*x1781))+(((-1.0)*r12*x1789))+((x1780*x1784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1790=((1.0)*cj5);
CheckValue<IkReal> x1791 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1790))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1791.valid){
continue;
}
CheckValue<IkReal> x1792=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1790))+(((-1.0)*r00*sj5)))),-1);
if(!x1792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1791.value)+(((1.5707963267949)*(x1792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1793=IKsin(j4);
IkReal x1794=IKcos(j4);
IkReal x1795=((1.0)*sj0);
IkReal x1796=(cj5*r00);
IkReal x1797=(r11*sj5);
IkReal x1798=(cj5*r10);
IkReal x1799=(r21*sj5);
IkReal x1800=(cj5*r20);
IkReal x1801=(r01*sj5);
IkReal x1802=((1.0)*x1794);
IkReal x1803=((1.0)*x1793);
evalcond[0]=(((x1793*x1799))+(((-1.0)*x1800*x1803))+(((-1.0)*r22*x1802)));
evalcond[1]=((((-1.0)*x1799*x1802))+((x1794*x1800))+(((-1.0)*r22*x1803)));
evalcond[2]=(((x1793*x1797))+cj0+(((-1.0)*x1798*x1803))+(((-1.0)*r12*x1802)));
evalcond[3]=((((-1.0)*x1795))+(((-1.0)*x1796*x1803))+(((-1.0)*r02*x1802))+((x1793*x1801)));
evalcond[4]=((((-1.0)*x1801*x1802))+(((-1.0)*r02*x1803))+((x1794*x1796))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1795))+(((-1.0)*x1797*x1802))+((x1794*x1798))+(((-1.0)*r12*x1803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1804=(sj1*sj2);
IkReal x1805=(r00*sj5);
IkReal x1806=(cj1*cj2);
IkReal x1807=(cj5*r01);
IkReal x1808=((212.5)*cj1);
IkReal x1809=((500.0)*px);
CheckValue<IkReal> x1810=IKPowWithIntegerCheck(((((67.0)*x1804))+(((-67.0)*x1806))),-1);
if(!x1810.valid){
continue;
}
CheckValue<IkReal> x1811=IKPowWithIntegerCheck((x1804+(((-1.0)*x1806))),-1);
if(!x1811.valid){
continue;
}
if( IKabs(((x1810.value)*((((x1806*x1809))+(((-1.0)*x1805*x1808))+(((-1.0)*x1804*x1809))+(((-146.0)*x1806*x1807))+(((-146.0)*x1805*x1806))+(((-1.0)*x1807*x1808))+(((146.0)*x1804*x1805))+(((146.0)*x1804*x1807)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1811.value)*(((((-1.0)*x1805))+(((-1.0)*x1807)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1810.value)*((((x1806*x1809))+(((-1.0)*x1805*x1808))+(((-1.0)*x1804*x1809))+(((-146.0)*x1806*x1807))+(((-146.0)*x1805*x1806))+(((-1.0)*x1807*x1808))+(((146.0)*x1804*x1805))+(((146.0)*x1804*x1807))))))+IKsqr(((x1811.value)*(((((-1.0)*x1805))+(((-1.0)*x1807))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1810.value)*((((x1806*x1809))+(((-1.0)*x1805*x1808))+(((-1.0)*x1804*x1809))+(((-146.0)*x1806*x1807))+(((-146.0)*x1805*x1806))+(((-1.0)*x1807*x1808))+(((146.0)*x1804*x1805))+(((146.0)*x1804*x1807))))), ((x1811.value)*(((((-1.0)*x1805))+(((-1.0)*x1807))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1812=IKcos(j0);
IkReal x1813=IKsin(j0);
IkReal x1814=((0.1)*sj5);
IkReal x1815=(cj5*r11);
IkReal x1816=(cj5*r01);
IkReal x1817=(sj1*sj2);
IkReal x1818=(cj1*cj2);
IkReal x1819=((0.392)*x1813);
IkReal x1820=(cj1*x1812);
evalcond[0]=(((r00*sj5))+((x1812*x1817))+(((-1.0)*x1812*x1818))+x1816);
evalcond[1]=((((-1.0)*x1813*x1818))+((r10*sj5))+((x1813*x1817))+x1815);
evalcond[2]=((((-0.1)*x1816))+(((-1.0)*px))+(((-1.0)*r00*x1814))+(((-0.392)*x1812*x1817))+(((-0.134)*x1813))+(((0.425)*x1820))+(((0.392)*x1812*x1818)));
evalcond[3]=(((x1818*x1819))+(((0.134)*x1812))+(((0.425)*cj1*x1813))+(((-0.1)*x1815))+(((-1.0)*r10*x1814))+(((-1.0)*py))+(((-1.0)*x1817*x1819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1821=((1.0)*cj5);
IkReal x1822=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1821)));
j4eval[0]=x1822;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1821))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1822);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1823=((1.0)*cj5);
IkReal x1824=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1823)));
j4eval[0]=x1824;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1823)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1824);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1825=((1.0)*sj0);
IkReal x1826=((1.0)*cj0);
IkReal x1827=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1827;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x1825))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1826)))))+(IKabs(((((-1.0)*r12*x1825))+(((-1.0)*r02*x1826))))));
j4eval[2]=IKsign(x1827);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1828=((-1.0)*r20);
IkReal x1830 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1830)==0){
continue;
}
IkReal x1829=pow(x1830,-0.5);
CheckValue<IkReal> x1831 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1828),IKFAST_ATAN2_MAGTHRESH);
if(!x1831.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1831.value));
IkReal gconst79=(r21*x1829);
IkReal gconst80=(x1828*x1829);
CheckValue<IkReal> x1832 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1832.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1832.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1833=((-1.0)*r20);
IkReal x1834=x1829;
CheckValue<IkReal> x1836 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1833),IKFAST_ATAN2_MAGTHRESH);
if(!x1836.valid){
continue;
}
IkReal x1835=((-1.0)*(x1836.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1835;
IkReal gconst78=x1835;
IkReal gconst79=(r21*x1834);
IkReal gconst80=(x1833*x1834);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1837=((-1.0)*r20);
IkReal x1838=x1829;
CheckValue<IkReal> x1840 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1837),IKFAST_ATAN2_MAGTHRESH);
if(!x1840.valid){
continue;
}
IkReal x1839=((-1.0)*(x1840.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1839;
IkReal gconst78=x1839;
IkReal gconst79=(r21*x1838);
IkReal gconst80=(x1837*x1838);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1841=((-1.0)*r20);
IkReal x1842=x1829;
CheckValue<IkReal> x1844 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1841),IKFAST_ATAN2_MAGTHRESH);
if(!x1844.valid){
continue;
}
IkReal x1843=((-1.0)*(x1844.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1843;
IkReal gconst78=x1843;
IkReal gconst79=(r21*x1842);
IkReal gconst80=(x1841*x1842);
IkReal x1845=r22*r22;
CheckValue<IkReal> x1848=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1845))),-1);
if(!x1848.valid){
continue;
}
IkReal x1846=x1848.value;
IkReal x1847=(((x1846*(r20*r20*r20*r20)))+((x1846*(r21*r21*r21*r21)))+x1845+(((2.0)*x1846*(r20*r20)*(r21*r21))));
j4eval[0]=x1847;
j4eval[1]=IKsign(x1847);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1849=(sj1*sj2);
IkReal x1850=(gconst80*r20);
IkReal x1851=(gconst79*r21);
IkReal x1852=(cj1*cj2);
CheckValue<IkReal> x1853 = IKatan2WithCheck(IkReal((((r22*x1849))+(((-1.0)*r22*x1852)))),IkReal(((((-1.0)*x1849*x1850))+((x1850*x1852))+((x1849*x1851))+(((-1.0)*x1851*x1852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1853.valid){
continue;
}
CheckValue<IkReal> x1854=IKPowWithIntegerCheck(IKsign(((x1851*x1851)+(r22*r22)+(x1850*x1850)+(((-2.0)*x1850*x1851)))),-1);
if(!x1854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1853.value)+(((1.5707963267949)*(x1854.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1855=IKsin(j4);
IkReal x1856=IKcos(j4);
IkReal x1857=(gconst79*r01);
IkReal x1858=(gconst79*r21);
IkReal x1859=((1.0)*cj2);
IkReal x1860=(gconst79*r11);
IkReal x1861=((1.0)*sj0);
IkReal x1862=(cj1*sj2);
IkReal x1863=((1.0)*x1856);
IkReal x1864=(gconst80*x1856);
IkReal x1865=((1.0)*x1855);
IkReal x1866=(gconst80*x1865);
evalcond[0]=(((x1855*x1858))+(((-1.0)*r20*x1866))+(((-1.0)*r22*x1863)));
evalcond[1]=(cj0+(((-1.0)*r12*x1863))+((x1855*x1860))+(((-1.0)*r10*x1866)));
evalcond[2]=((((-1.0)*r02*x1863))+((x1855*x1857))+(((-1.0)*r00*x1866))+(((-1.0)*x1861)));
evalcond[3]=(((sj1*sj2))+((r20*x1864))+(((-1.0)*x1858*x1863))+(((-1.0)*r22*x1865))+(((-1.0)*cj1*x1859)));
evalcond[4]=((((-1.0)*r02*x1865))+(((-1.0)*cj0*x1862))+(((-1.0)*cj0*sj1*x1859))+((r00*x1864))+(((-1.0)*x1857*x1863)));
evalcond[5]=((((-1.0)*sj0*sj1*x1859))+(((-1.0)*x1860*x1863))+(((-1.0)*r12*x1865))+(((-1.0)*x1861*x1862))+((r10*x1864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1867=((1.0)*gconst80);
CheckValue<IkReal> x1868=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1867))+(((-1.0)*gconst79*r10)))),-1);
if(!x1868.valid){
continue;
}
CheckValue<IkReal> x1869 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1867))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1868.value)))+(x1869.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1870=IKsin(j4);
IkReal x1871=IKcos(j4);
IkReal x1872=(gconst79*r01);
IkReal x1873=(gconst79*r21);
IkReal x1874=((1.0)*cj2);
IkReal x1875=(gconst79*r11);
IkReal x1876=((1.0)*sj0);
IkReal x1877=(cj1*sj2);
IkReal x1878=((1.0)*x1871);
IkReal x1879=(gconst80*x1871);
IkReal x1880=((1.0)*x1870);
IkReal x1881=(gconst80*x1880);
evalcond[0]=((((-1.0)*r22*x1878))+(((-1.0)*r20*x1881))+((x1870*x1873)));
evalcond[1]=(cj0+(((-1.0)*r10*x1881))+(((-1.0)*r12*x1878))+((x1870*x1875)));
evalcond[2]=((((-1.0)*x1876))+(((-1.0)*r02*x1878))+(((-1.0)*r00*x1881))+((x1870*x1872)));
evalcond[3]=((((-1.0)*x1873*x1878))+(((-1.0)*r22*x1880))+((sj1*sj2))+((r20*x1879))+(((-1.0)*cj1*x1874)));
evalcond[4]=((((-1.0)*x1872*x1878))+(((-1.0)*cj0*x1877))+(((-1.0)*r02*x1880))+(((-1.0)*cj0*sj1*x1874))+((r00*x1879)));
evalcond[5]=((((-1.0)*x1876*x1877))+(((-1.0)*r12*x1880))+(((-1.0)*sj0*sj1*x1874))+((r10*x1879))+(((-1.0)*x1875*x1878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1882=((1.0)*gconst80);
CheckValue<IkReal> x1883 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x1882)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1883.valid){
continue;
}
CheckValue<IkReal> x1884=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1882)))),-1);
if(!x1884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1883.value)+(((1.5707963267949)*(x1884.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1885=IKsin(j4);
IkReal x1886=IKcos(j4);
IkReal x1887=(gconst79*r01);
IkReal x1888=(gconst79*r21);
IkReal x1889=((1.0)*cj2);
IkReal x1890=(gconst79*r11);
IkReal x1891=((1.0)*sj0);
IkReal x1892=(cj1*sj2);
IkReal x1893=((1.0)*x1886);
IkReal x1894=(gconst80*x1886);
IkReal x1895=((1.0)*x1885);
IkReal x1896=(gconst80*x1895);
evalcond[0]=((((-1.0)*r22*x1893))+(((-1.0)*r20*x1896))+((x1885*x1888)));
evalcond[1]=(((x1885*x1890))+cj0+(((-1.0)*r10*x1896))+(((-1.0)*r12*x1893)));
evalcond[2]=((((-1.0)*r02*x1893))+(((-1.0)*r00*x1896))+((x1885*x1887))+(((-1.0)*x1891)));
evalcond[3]=(((r20*x1894))+(((-1.0)*cj1*x1889))+((sj1*sj2))+(((-1.0)*x1888*x1893))+(((-1.0)*r22*x1895)));
evalcond[4]=((((-1.0)*r02*x1895))+(((-1.0)*cj0*sj1*x1889))+((r00*x1894))+(((-1.0)*x1887*x1893))+(((-1.0)*cj0*x1892)));
evalcond[5]=((((-1.0)*sj0*sj1*x1889))+((r10*x1894))+(((-1.0)*x1891*x1892))+(((-1.0)*x1890*x1893))+(((-1.0)*r12*x1895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1897=((-1.0)*r21);
IkReal x1899 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1899)==0){
continue;
}
IkReal x1898=pow(x1899,-0.5);
CheckValue<IkReal> x1900 = IKatan2WithCheck(IkReal(x1897),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1900.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1900.value))));
IkReal gconst82=(x1897*x1898);
IkReal gconst83=((1.0)*r20*x1898);
CheckValue<IkReal> x1901 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1901.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1901.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1902=((-1.0)*r21);
CheckValue<IkReal> x1905 = IKatan2WithCheck(IkReal(x1902),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1905.valid){
continue;
}
IkReal x1903=((1.0)*(x1905.value));
IkReal x1904=x1898;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1903)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1903)));
IkReal gconst82=(x1902*x1904);
IkReal gconst83=((1.0)*r20*x1904);
IkReal x1906=r22*r22;
IkReal x1907=((1.0)*x1906);
CheckValue<IkReal> x1911=IKPowWithIntegerCheck(((-1.0)+x1906),-1);
if(!x1911.valid){
continue;
}
IkReal x1908=x1911.value;
if((((1.0)+(((-1.0)*x1907)))) < -0.00001)
continue;
IkReal x1909=IKsqrt(((1.0)+(((-1.0)*x1907))));
IkReal x1910=(cj0*x1908*x1909);
j4eval[0]=((IKabs(((((-1.0)*x1907*x1910))+x1910)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1912=((-1.0)*r21);
CheckValue<IkReal> x1915 = IKatan2WithCheck(IkReal(x1912),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1915.valid){
continue;
}
IkReal x1913=((1.0)*(x1915.value));
IkReal x1914=x1898;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1913)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1913)));
IkReal gconst82=(x1912*x1914);
IkReal gconst83=((1.0)*r20*x1914);
IkReal x1916=r22*r22;
IkReal x1917=((1.0)*x1916);
CheckValue<IkReal> x1921=IKPowWithIntegerCheck(((-1.0)+x1916),-1);
if(!x1921.valid){
continue;
}
IkReal x1918=x1921.value;
if((((1.0)+(((-1.0)*x1917)))) < -0.00001)
continue;
IkReal x1919=IKsqrt(((1.0)+(((-1.0)*x1917))));
IkReal x1920=(sj0*x1918*x1919);
j4eval[0]=((IKabs(((((-1.0)*x1917*x1920))+x1920)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1922=((-1.0)*r21);
CheckValue<IkReal> x1925 = IKatan2WithCheck(IkReal(x1922),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1925.valid){
continue;
}
IkReal x1923=((1.0)*(x1925.value));
IkReal x1924=x1898;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1923)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1923)));
IkReal gconst82=(x1922*x1924);
IkReal gconst83=((1.0)*r20*x1924);
IkReal x1926=r22*r22;
IkReal x1927=(r12*sj0);
IkReal x1928=(cj0*r02);
CheckValue<IkReal> x1932=IKPowWithIntegerCheck(((-1.0)+x1926),-1);
if(!x1932.valid){
continue;
}
IkReal x1929=x1932.value;
if((((1.0)+(((-1.0)*x1926)))) < -0.00001)
continue;
IkReal x1930=IKsqrt(((1.0)+(((-1.0)*x1926))));
IkReal x1931=(r22*x1929*x1930);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x1927*x1931))+((x1928*x1931)))))+(IKabs(((((-1.0)*x1927))+(((-1.0)*x1928))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1933=((1.0)*sj0);
IkReal x1934=((1.0)*cj0);
CheckValue<IkReal> x1935=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1935.valid){
continue;
}
CheckValue<IkReal> x1936 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1933))+(((-1.0)*r02*x1934)))),IkReal(((((-1.0)*gconst82*r11*x1933))+(((-1.0)*gconst82*r01*x1934))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1935.value)))+(x1936.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1937=IKsin(j4);
IkReal x1938=IKcos(j4);
IkReal x1939=(gconst82*r11);
IkReal x1940=((1.0)*cj2);
IkReal x1941=((1.0)*sj0);
IkReal x1942=(cj1*sj2);
IkReal x1943=((1.0)*x1938);
IkReal x1944=(gconst83*x1938);
IkReal x1945=(gconst82*x1937);
IkReal x1946=((1.0)*x1937);
evalcond[0]=((((-1.0)*r22*x1943))+(((-1.0)*gconst83*r20*x1946))+((r21*x1945)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1946))+(((-1.0)*r12*x1943))+((x1937*x1939)));
evalcond[2]=((((-1.0)*x1941))+(((-1.0)*r02*x1943))+((r01*x1945))+(((-1.0)*gconst83*r00*x1946)));
evalcond[3]=((((-1.0)*r22*x1946))+((r20*x1944))+(((-1.0)*gconst82*r21*x1943))+((sj1*sj2))+(((-1.0)*cj1*x1940)));
evalcond[4]=((((-1.0)*cj0*x1942))+(((-1.0)*r02*x1946))+(((-1.0)*gconst82*r01*x1943))+((r00*x1944))+(((-1.0)*cj0*sj1*x1940)));
evalcond[5]=((((-1.0)*sj0*sj1*x1940))+((r10*x1944))+(((-1.0)*r12*x1946))+(((-1.0)*x1941*x1942))+(((-1.0)*x1939*x1943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1947=((1.0)*gconst83);
CheckValue<IkReal> x1948=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1947)))),-1);
if(!x1948.valid){
continue;
}
CheckValue<IkReal> x1949 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1948.value)))+(x1949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1950=IKsin(j4);
IkReal x1951=IKcos(j4);
IkReal x1952=(gconst82*r11);
IkReal x1953=((1.0)*cj2);
IkReal x1954=((1.0)*sj0);
IkReal x1955=(cj1*sj2);
IkReal x1956=((1.0)*x1951);
IkReal x1957=(gconst83*x1951);
IkReal x1958=(gconst82*x1950);
IkReal x1959=((1.0)*x1950);
evalcond[0]=((((-1.0)*r22*x1956))+((r21*x1958))+(((-1.0)*gconst83*r20*x1959)));
evalcond[1]=(cj0+((x1950*x1952))+(((-1.0)*gconst83*r10*x1959))+(((-1.0)*r12*x1956)));
evalcond[2]=((((-1.0)*x1954))+(((-1.0)*r02*x1956))+((r01*x1958))+(((-1.0)*gconst83*r00*x1959)));
evalcond[3]=((((-1.0)*r22*x1959))+((r20*x1957))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1956))+(((-1.0)*cj1*x1953)));
evalcond[4]=((((-1.0)*cj0*sj1*x1953))+(((-1.0)*cj0*x1955))+(((-1.0)*r02*x1959))+(((-1.0)*gconst82*r01*x1956))+((r00*x1957)));
evalcond[5]=((((-1.0)*x1952*x1956))+(((-1.0)*x1954*x1955))+((r10*x1957))+(((-1.0)*r12*x1959))+(((-1.0)*sj0*sj1*x1953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1960=((1.0)*gconst83);
CheckValue<IkReal> x1961=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1960))+(((-1.0)*gconst82*r00)))),-1);
if(!x1961.valid){
continue;
}
CheckValue<IkReal> x1962 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1960))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1961.value)))+(x1962.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1963=IKsin(j4);
IkReal x1964=IKcos(j4);
IkReal x1965=(gconst82*r11);
IkReal x1966=((1.0)*cj2);
IkReal x1967=((1.0)*sj0);
IkReal x1968=(cj1*sj2);
IkReal x1969=((1.0)*x1964);
IkReal x1970=(gconst83*x1964);
IkReal x1971=(gconst82*x1963);
IkReal x1972=((1.0)*x1963);
evalcond[0]=((((-1.0)*r22*x1969))+((r21*x1971))+(((-1.0)*gconst83*r20*x1972)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1972))+(((-1.0)*r12*x1969))+((x1963*x1965)));
evalcond[2]=((((-1.0)*r02*x1969))+(((-1.0)*x1967))+((r01*x1971))+(((-1.0)*gconst83*r00*x1972)));
evalcond[3]=(((r20*x1970))+(((-1.0)*r22*x1972))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1969))+(((-1.0)*cj1*x1966)));
evalcond[4]=((((-1.0)*cj0*x1968))+(((-1.0)*cj0*sj1*x1966))+(((-1.0)*r02*x1972))+((r00*x1970))+(((-1.0)*gconst82*r01*x1969)));
evalcond[5]=((((-1.0)*sj0*sj1*x1966))+((r10*x1970))+(((-1.0)*x1965*x1969))+(((-1.0)*r12*x1972))+(((-1.0)*x1967*x1968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1973=((-1.0)*r10);
IkReal x1975 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1975)==0){
continue;
}
IkReal x1974=pow(x1975,-0.5);
CheckValue<IkReal> x1976 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1973),IKFAST_ATAN2_MAGTHRESH);
if(!x1976.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1976.value));
IkReal gconst85=(r11*x1974);
IkReal gconst86=(x1973*x1974);
CheckValue<IkReal> x1977 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1977.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1977.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1978=((-1.0)*r10);
IkReal x1979=x1974;
CheckValue<IkReal> x1981 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1978),IKFAST_ATAN2_MAGTHRESH);
if(!x1981.valid){
continue;
}
IkReal x1980=((-1.0)*(x1981.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1980;
IkReal gconst84=x1980;
IkReal gconst85=(r11*x1979);
IkReal gconst86=(x1978*x1979);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1982=((1.0)*sj0);
IkReal x1983=((1.0)*gconst85);
CheckValue<IkReal> x1984=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1983)))),-1);
if(!x1984.valid){
continue;
}
CheckValue<IkReal> x1985 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1982)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*gconst85*r11*x1982))+((gconst86*r10*sj0))+(((-1.0)*cj0*r01*x1983)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1984.value)))+(x1985.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1986=IKsin(j4);
IkReal x1987=IKcos(j4);
IkReal x1988=(gconst85*r21);
IkReal x1989=(gconst86*r00);
IkReal x1990=(gconst86*r10);
IkReal x1991=((1.0)*cj2);
IkReal x1992=(gconst85*r11);
IkReal x1993=(gconst85*r01);
IkReal x1994=((1.0)*sj0);
IkReal x1995=(gconst86*r20);
IkReal x1996=(cj1*sj2);
IkReal x1997=((1.0)*x1987);
IkReal x1998=((1.0)*x1986);
evalcond[0]=((((-1.0)*x1995*x1998))+(((-1.0)*r22*x1997))+((x1986*x1988)));
evalcond[1]=(cj0+((x1986*x1992))+(((-1.0)*x1990*x1998))+(((-1.0)*r12*x1997)));
evalcond[2]=(((x1986*x1993))+(((-1.0)*r02*x1997))+(((-1.0)*x1989*x1998))+(((-1.0)*x1994)));
evalcond[3]=(((sj1*sj2))+((x1987*x1995))+(((-1.0)*r22*x1998))+(((-1.0)*cj1*x1991))+(((-1.0)*x1988*x1997)));
evalcond[4]=((((-1.0)*x1993*x1997))+((x1987*x1989))+(((-1.0)*cj0*x1996))+(((-1.0)*cj0*sj1*x1991))+(((-1.0)*r02*x1998)));
evalcond[5]=((((-1.0)*sj0*sj1*x1991))+(((-1.0)*x1992*x1997))+(((-1.0)*x1994*x1996))+((x1987*x1990))+(((-1.0)*r12*x1998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1999=((1.0)*gconst86);
CheckValue<IkReal> x2000=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1999))+(((-1.0)*gconst85*r00)))),-1);
if(!x2000.valid){
continue;
}
CheckValue<IkReal> x2001 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1999))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2000.value)))+(x2001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2002=IKsin(j4);
IkReal x2003=IKcos(j4);
IkReal x2004=(gconst85*r21);
IkReal x2005=(gconst86*r00);
IkReal x2006=(gconst86*r10);
IkReal x2007=((1.0)*cj2);
IkReal x2008=(gconst85*r11);
IkReal x2009=(gconst85*r01);
IkReal x2010=((1.0)*sj0);
IkReal x2011=(gconst86*r20);
IkReal x2012=(cj1*sj2);
IkReal x2013=((1.0)*x2003);
IkReal x2014=((1.0)*x2002);
evalcond[0]=(((x2002*x2004))+(((-1.0)*x2011*x2014))+(((-1.0)*r22*x2013)));
evalcond[1]=(((x2002*x2008))+cj0+(((-1.0)*x2006*x2014))+(((-1.0)*r12*x2013)));
evalcond[2]=(((x2002*x2009))+(((-1.0)*x2010))+(((-1.0)*x2005*x2014))+(((-1.0)*r02*x2013)));
evalcond[3]=((((-1.0)*x2004*x2013))+((sj1*sj2))+(((-1.0)*cj1*x2007))+((x2003*x2011))+(((-1.0)*r22*x2014)));
evalcond[4]=((((-1.0)*x2009*x2013))+(((-1.0)*r02*x2014))+(((-1.0)*cj0*x2012))+(((-1.0)*cj0*sj1*x2007))+((x2003*x2005)));
evalcond[5]=((((-1.0)*x2008*x2013))+(((-1.0)*x2010*x2012))+(((-1.0)*sj0*sj1*x2007))+(((-1.0)*r12*x2014))+((x2003*x2006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2015=((-1.0)*r11);
IkReal x2017 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2017)==0){
continue;
}
IkReal x2016=pow(x2017,-0.5);
CheckValue<IkReal> x2018 = IKatan2WithCheck(IkReal(x2015),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2018.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2018.value))));
IkReal gconst88=(x2015*x2016);
IkReal gconst89=((1.0)*r10*x2016);
CheckValue<IkReal> x2019 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2019.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2019.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2020=((-1.0)*r11);
CheckValue<IkReal> x2023 = IKatan2WithCheck(IkReal(x2020),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2023.valid){
continue;
}
IkReal x2021=((1.0)*(x2023.value));
IkReal x2022=x2016;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2021)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2021)));
IkReal gconst88=(x2020*x2022);
IkReal gconst89=((1.0)*r10*x2022);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2024=((-1.0)*r11);
CheckValue<IkReal> x2027 = IKatan2WithCheck(IkReal(x2024),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2027.valid){
continue;
}
IkReal x2025=((1.0)*(x2027.value));
IkReal x2026=x2016;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2025)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2025)));
IkReal gconst88=(x2024*x2026);
IkReal gconst89=((1.0)*r10*x2026);
IkReal x2028=r12*r12;
IkReal x2029=((1.0)*sj0);
IkReal x2030=(cj0*r02);
IkReal x2031=x2016;
j4eval[0]=((IKabs(((((-1.0)*x2029*x2031))+((sj0*x2028*x2031))+((r12*x2030*x2031)))))+(IKabs(((((-1.0)*r12*x2029))+(((-1.0)*x2030))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2032=((-1.0)*r11);
CheckValue<IkReal> x2035 = IKatan2WithCheck(IkReal(x2032),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2035.valid){
continue;
}
IkReal x2033=((1.0)*(x2035.value));
IkReal x2034=x2016;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2033)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2033)));
IkReal gconst88=(x2032*x2034);
IkReal gconst89=((1.0)*r10*x2034);
IkReal x2036=r12*r12;
IkReal x2037=(cj1*cj2*r22);
IkReal x2038=(r22*sj1*sj2);
CheckValue<IkReal> x2042=IKPowWithIntegerCheck(((-1.0)+x2036),-1);
if(!x2042.valid){
continue;
}
IkReal x2039=x2042.value;
if((((1.0)+(((-1.0)*x2036)))) < -0.00001)
continue;
IkReal x2040=IKsqrt(((1.0)+(((-1.0)*x2036))));
IkReal x2041=(r12*x2039*x2040);
j4eval[0]=((IKabs((((x2037*x2041))+(((-1.0)*x2038*x2041)))))+(IKabs((x2038+(((-1.0)*x2037))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2043=(cj1*cj2);
IkReal x2044=(gconst89*r20);
IkReal x2045=(gconst88*r21);
IkReal x2046=(sj1*sj2);
CheckValue<IkReal> x2047 = IKatan2WithCheck(IkReal((((r22*x2046))+(((-1.0)*r22*x2043)))),IkReal((((x2043*x2044))+(((-1.0)*x2044*x2046))+((x2045*x2046))+(((-1.0)*x2043*x2045)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2047.valid){
continue;
}
CheckValue<IkReal> x2048=IKPowWithIntegerCheck(IKsign(((x2045*x2045)+(r22*r22)+(x2044*x2044)+(((-2.0)*x2044*x2045)))),-1);
if(!x2048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2047.value)+(((1.5707963267949)*(x2048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2049=IKsin(j4);
IkReal x2050=IKcos(j4);
IkReal x2051=((1.0)*sj0);
IkReal x2052=((1.0)*cj2);
IkReal x2053=(gconst89*r20);
IkReal x2054=(gconst89*r10);
IkReal x2055=(gconst89*r00);
IkReal x2056=(cj1*sj2);
IkReal x2057=((1.0)*x2050);
IkReal x2058=((1.0)*x2049);
IkReal x2059=(gconst88*x2049);
evalcond[0]=((((-1.0)*r22*x2057))+(((-1.0)*x2053*x2058))+((r21*x2059)));
evalcond[1]=((((-1.0)*x2054*x2058))+((r11*x2059))+cj0+(((-1.0)*r12*x2057)));
evalcond[2]=(((r01*x2059))+(((-1.0)*r02*x2057))+(((-1.0)*x2051))+(((-1.0)*x2055*x2058)));
evalcond[3]=((((-1.0)*cj1*x2052))+(((-1.0)*r22*x2058))+((sj1*sj2))+((x2050*x2053))+(((-1.0)*gconst88*r21*x2057)));
evalcond[4]=((((-1.0)*gconst88*r01*x2057))+(((-1.0)*r02*x2058))+(((-1.0)*cj0*x2056))+((x2050*x2055))+(((-1.0)*cj0*sj1*x2052)));
evalcond[5]=((((-1.0)*cj2*sj1*x2051))+(((-1.0)*r12*x2058))+(((-1.0)*gconst88*r11*x2057))+(((-1.0)*x2051*x2056))+((x2050*x2054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2060=((1.0)*sj0);
IkReal x2061=((1.0)*cj0);
CheckValue<IkReal> x2062=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2062.valid){
continue;
}
CheckValue<IkReal> x2063 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2060))+(((-1.0)*r02*x2061)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r11*x2060))+(((-1.0)*gconst88*r01*x2061))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2062.value)))+(x2063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2064=IKsin(j4);
IkReal x2065=IKcos(j4);
IkReal x2066=((1.0)*sj0);
IkReal x2067=((1.0)*cj2);
IkReal x2068=(gconst89*r20);
IkReal x2069=(gconst89*r10);
IkReal x2070=(gconst89*r00);
IkReal x2071=(cj1*sj2);
IkReal x2072=((1.0)*x2065);
IkReal x2073=((1.0)*x2064);
IkReal x2074=(gconst88*x2064);
evalcond[0]=((((-1.0)*r22*x2072))+(((-1.0)*x2068*x2073))+((r21*x2074)));
evalcond[1]=(cj0+(((-1.0)*r12*x2072))+((r11*x2074))+(((-1.0)*x2069*x2073)));
evalcond[2]=((((-1.0)*r02*x2072))+(((-1.0)*x2070*x2073))+(((-1.0)*x2066))+((r01*x2074)));
evalcond[3]=((((-1.0)*gconst88*r21*x2072))+(((-1.0)*r22*x2073))+((sj1*sj2))+(((-1.0)*cj1*x2067))+((x2065*x2068)));
evalcond[4]=((((-1.0)*r02*x2073))+(((-1.0)*cj0*sj1*x2067))+(((-1.0)*gconst88*r01*x2072))+((x2065*x2070))+(((-1.0)*cj0*x2071)));
evalcond[5]=((((-1.0)*r12*x2073))+(((-1.0)*gconst88*r11*x2072))+(((-1.0)*x2066*x2071))+(((-1.0)*cj2*sj1*x2066))+((x2065*x2069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2075=((1.0)*gconst89);
CheckValue<IkReal> x2076=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2075))+(((-1.0)*gconst88*r00)))),-1);
if(!x2076.valid){
continue;
}
CheckValue<IkReal> x2077 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2075))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2076.value)))+(x2077.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2078=IKsin(j4);
IkReal x2079=IKcos(j4);
IkReal x2080=((1.0)*sj0);
IkReal x2081=((1.0)*cj2);
IkReal x2082=(gconst89*r20);
IkReal x2083=(gconst89*r10);
IkReal x2084=(gconst89*r00);
IkReal x2085=(cj1*sj2);
IkReal x2086=((1.0)*x2079);
IkReal x2087=((1.0)*x2078);
IkReal x2088=(gconst88*x2078);
evalcond[0]=((((-1.0)*r22*x2086))+(((-1.0)*x2082*x2087))+((r21*x2088)));
evalcond[1]=(cj0+(((-1.0)*x2083*x2087))+(((-1.0)*r12*x2086))+((r11*x2088)));
evalcond[2]=((((-1.0)*r02*x2086))+(((-1.0)*x2084*x2087))+(((-1.0)*x2080))+((r01*x2088)));
evalcond[3]=((((-1.0)*cj1*x2081))+(((-1.0)*r22*x2087))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2086))+((x2079*x2082)));
evalcond[4]=((((-1.0)*r02*x2087))+(((-1.0)*cj0*sj1*x2081))+(((-1.0)*gconst88*r01*x2086))+(((-1.0)*cj0*x2085))+((x2079*x2084)));
evalcond[5]=((((-1.0)*gconst88*r11*x2086))+(((-1.0)*cj2*sj1*x2080))+(((-1.0)*r12*x2087))+(((-1.0)*x2080*x2085))+((x2079*x2083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2089=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2089;
j4eval[1]=IKsign(x2089);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2090=((1.0)*cj5);
IkReal x2091=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2090)));
j4eval[0]=x2091;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2090))+((r21*sj5))))));
j4eval[2]=IKsign(x2091);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2092=cj5*cj5;
IkReal x2093=r11*r11;
IkReal x2094=(r11*sj5);
IkReal x2095=(cj5*r10);
IkReal x2096=((r12*r12)+((x2092*(r10*r10)))+x2093+(((-2.0)*x2094*x2095))+(((-1.0)*x2092*x2093)));
j4eval[0]=x2096;
j4eval[1]=IKsign(x2096);
j4eval[2]=((IKabs((x2095+(((-1.0)*x2094)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2097=cj5*cj5;
IkReal x2098=r11*r11;
IkReal x2099=(cj5*r10);
IkReal x2100=(r11*sj5);
CheckValue<IkReal> x2101 = IKatan2WithCheck(IkReal((x2099+(((-1.0)*x2100)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2101.valid){
continue;
}
CheckValue<IkReal> x2102=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x2097*(r10*r10)))+x2098+(((-2.0)*x2099*x2100))+(((-1.0)*x2097*x2098)))),-1);
if(!x2102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2101.value)+(((1.5707963267949)*(x2102.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2103=IKsin(j4);
IkReal x2104=IKcos(j4);
IkReal x2105=(cj5*r10);
IkReal x2106=(r01*sj5);
IkReal x2107=((1.0)*cj2);
IkReal x2108=(cj5*r00);
IkReal x2109=(cj5*r20);
IkReal x2110=((1.0)*x2104);
IkReal x2111=((1.0)*x2103);
IkReal x2112=(sj5*x2103);
evalcond[0]=(((r21*x2112))+(((-1.0)*x2109*x2111))+(((-1.0)*r22*x2110)));
evalcond[1]=(((x2103*x2106))+(((-1.0)*x2108*x2111))+(((-1.0)*r02*x2110)));
evalcond[2]=(((x2104*x2105))+(((-1.0)*r11*sj5*x2110))+(((-1.0)*r12*x2111)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2110))+(((-1.0)*x2105*x2111))+((r11*x2112)));
evalcond[4]=((((-1.0)*r21*sj5*x2110))+((x2104*x2109))+(((-1.0)*cj1*x2107))+((sj1*sj2))+(((-1.0)*r22*x2111)));
evalcond[5]=((((-1.0)*sj1*x2107))+((x2104*x2108))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2111))+(((-1.0)*x2106*x2110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2113=((1.0)*cj5);
CheckValue<IkReal> x2114 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2113))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2114.valid){
continue;
}
CheckValue<IkReal> x2115=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2113))+(((-1.0)*r00*sj5)))),-1);
if(!x2115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2114.value)+(((1.5707963267949)*(x2115.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2116=IKsin(j4);
IkReal x2117=IKcos(j4);
IkReal x2118=(cj5*r10);
IkReal x2119=(r01*sj5);
IkReal x2120=((1.0)*cj2);
IkReal x2121=(cj5*r00);
IkReal x2122=(cj5*r20);
IkReal x2123=((1.0)*x2117);
IkReal x2124=((1.0)*x2116);
IkReal x2125=(sj5*x2116);
evalcond[0]=((((-1.0)*x2122*x2124))+(((-1.0)*r22*x2123))+((r21*x2125)));
evalcond[1]=(((x2116*x2119))+(((-1.0)*r02*x2123))+(((-1.0)*x2121*x2124)));
evalcond[2]=(((x2117*x2118))+(((-1.0)*r12*x2124))+(((-1.0)*r11*sj5*x2123)));
evalcond[3]=((1.0)+(((-1.0)*x2118*x2124))+((r11*x2125))+(((-1.0)*r12*x2123)));
evalcond[4]=((((-1.0)*r22*x2124))+((sj1*sj2))+(((-1.0)*cj1*x2120))+((x2117*x2122))+(((-1.0)*r21*sj5*x2123)));
evalcond[5]=((((-1.0)*x2119*x2123))+(((-1.0)*r02*x2124))+(((-1.0)*cj1*sj2))+((x2117*x2121))+(((-1.0)*sj1*x2120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2126=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2126.valid){
continue;
}
CheckValue<IkReal> x2127 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2126.value)))+(x2127.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2128=IKsin(j4);
IkReal x2129=IKcos(j4);
IkReal x2130=(cj5*r10);
IkReal x2131=(r01*sj5);
IkReal x2132=((1.0)*cj2);
IkReal x2133=(cj5*r00);
IkReal x2134=(cj5*r20);
IkReal x2135=((1.0)*x2129);
IkReal x2136=((1.0)*x2128);
IkReal x2137=(sj5*x2128);
evalcond[0]=((((-1.0)*r22*x2135))+((r21*x2137))+(((-1.0)*x2134*x2136)));
evalcond[1]=(((x2128*x2131))+(((-1.0)*x2133*x2136))+(((-1.0)*r02*x2135)));
evalcond[2]=((((-1.0)*r12*x2136))+(((-1.0)*r11*sj5*x2135))+((x2129*x2130)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2135))+((r11*x2137))+(((-1.0)*x2130*x2136)));
evalcond[4]=((((-1.0)*r22*x2136))+((sj1*sj2))+(((-1.0)*cj1*x2132))+(((-1.0)*r21*sj5*x2135))+((x2129*x2134)));
evalcond[5]=((((-1.0)*sj1*x2132))+(((-1.0)*cj1*sj2))+((x2129*x2133))+(((-1.0)*x2131*x2135))+(((-1.0)*r02*x2136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2138=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2138;
j4eval[1]=IKsign(x2138);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2139=((1.0)*cj5);
IkReal x2140=((((-1.0)*r21*x2139))+(((-1.0)*r20*sj5)));
j4eval[0]=x2140;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x2139)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2140);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2141=cj5*cj5;
IkReal x2142=r11*r11;
IkReal x2143=(cj5*r10);
IkReal x2144=(r11*sj5);
IkReal x2145=((((-1.0)*x2141*(r10*r10)))+(((-1.0)*x2142))+(((2.0)*x2143*x2144))+((x2141*x2142))+(((-1.0)*(r12*r12))));
j4eval[0]=x2145;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2144))+x2143))));
j4eval[2]=IKsign(x2145);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2146=cj5*cj5;
IkReal x2147=r11*r11;
IkReal x2148=(cj5*r10);
IkReal x2149=(r11*sj5);
CheckValue<IkReal> x2150 = IKatan2WithCheck(IkReal(((((-1.0)*x2149))+x2148)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2150.valid){
continue;
}
CheckValue<IkReal> x2151=IKPowWithIntegerCheck(IKsign((((x2146*x2147))+(((-1.0)*x2147))+(((-1.0)*x2146*(r10*r10)))+(((2.0)*x2148*x2149))+(((-1.0)*(r12*r12))))),-1);
if(!x2151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2150.value)+(((1.5707963267949)*(x2151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2152=IKsin(j4);
IkReal x2153=IKcos(j4);
IkReal x2154=(cj5*r10);
IkReal x2155=(r01*sj5);
IkReal x2156=(cj5*r00);
IkReal x2157=(cj5*r20);
IkReal x2158=((1.0)*x2153);
IkReal x2159=((1.0)*x2152);
IkReal x2160=(sj5*x2152);
evalcond[0]=(((r21*x2160))+(((-1.0)*x2157*x2159))+(((-1.0)*r22*x2158)));
evalcond[1]=(((x2152*x2155))+(((-1.0)*r02*x2158))+(((-1.0)*x2156*x2159)));
evalcond[2]=((((-1.0)*r11*sj5*x2158))+(((-1.0)*r12*x2159))+((x2153*x2154)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2158))+(((-1.0)*x2154*x2159))+((r11*x2160)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2159))+(((-1.0)*x2155*x2158))+((x2153*x2156)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2159))+(((-1.0)*r21*sj5*x2158))+((x2153*x2157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2161=((1.0)*cj5);
CheckValue<IkReal> x2162 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2162.valid){
continue;
}
CheckValue<IkReal> x2163=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2161))+(((-1.0)*r20*sj5)))),-1);
if(!x2163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2162.value)+(((1.5707963267949)*(x2163.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2164=IKsin(j4);
IkReal x2165=IKcos(j4);
IkReal x2166=(cj5*r10);
IkReal x2167=(r01*sj5);
IkReal x2168=(cj5*r00);
IkReal x2169=(cj5*r20);
IkReal x2170=((1.0)*x2165);
IkReal x2171=((1.0)*x2164);
IkReal x2172=(sj5*x2164);
evalcond[0]=(((r21*x2172))+(((-1.0)*x2169*x2171))+(((-1.0)*r22*x2170)));
evalcond[1]=((((-1.0)*x2168*x2171))+((x2164*x2167))+(((-1.0)*r02*x2170)));
evalcond[2]=((((-1.0)*r11*sj5*x2170))+((x2165*x2166))+(((-1.0)*r12*x2171)));
evalcond[3]=((-1.0)+((r11*x2172))+(((-1.0)*x2166*x2171))+(((-1.0)*r12*x2170)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2165*x2168))+(((-1.0)*r02*x2171))+(((-1.0)*x2167*x2170)));
evalcond[5]=((((-1.0)*r21*sj5*x2170))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2165*x2169))+(((-1.0)*r22*x2171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2173 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2173.valid){
continue;
}
CheckValue<IkReal> x2174=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2173.value)+(((1.5707963267949)*(x2174.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2175=IKsin(j4);
IkReal x2176=IKcos(j4);
IkReal x2177=(cj5*r10);
IkReal x2178=(r01*sj5);
IkReal x2179=(cj5*r00);
IkReal x2180=(cj5*r20);
IkReal x2181=((1.0)*x2176);
IkReal x2182=((1.0)*x2175);
IkReal x2183=(sj5*x2175);
evalcond[0]=((((-1.0)*x2180*x2182))+((r21*x2183))+(((-1.0)*r22*x2181)));
evalcond[1]=(((x2175*x2178))+(((-1.0)*r02*x2181))+(((-1.0)*x2179*x2182)));
evalcond[2]=((((-1.0)*r11*sj5*x2181))+((x2176*x2177))+(((-1.0)*r12*x2182)));
evalcond[3]=((-1.0)+(((-1.0)*x2177*x2182))+((r11*x2183))+(((-1.0)*r12*x2181)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2176*x2179))+(((-1.0)*r02*x2182))+(((-1.0)*x2178*x2181)));
evalcond[5]=((((-1.0)*r21*sj5*x2181))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2182))+((x2176*x2180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2184=((-1.0)*r00);
IkReal x2186 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2186)==0){
continue;
}
IkReal x2185=pow(x2186,-0.5);
CheckValue<IkReal> x2187 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2184),IKFAST_ATAN2_MAGTHRESH);
if(!x2187.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2187.value));
IkReal gconst91=(r01*x2185);
IkReal gconst92=(x2184*x2185);
CheckValue<IkReal> x2188 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2188.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2188.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2189=((-1.0)*r00);
IkReal x2190=x2185;
CheckValue<IkReal> x2192 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2189),IKFAST_ATAN2_MAGTHRESH);
if(!x2192.valid){
continue;
}
IkReal x2191=((-1.0)*(x2192.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2191;
IkReal gconst90=x2191;
IkReal gconst91=(r01*x2190);
IkReal gconst92=(x2189*x2190);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2193=((1.0)*sj0);
IkReal x2194=((1.0)*cj0);
CheckValue<IkReal> x2195=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2195.valid){
continue;
}
CheckValue<IkReal> x2196 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2194))+(((-1.0)*r12*x2193)))),IkReal((((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2194))+(((-1.0)*gconst91*r11*x2193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2195.value)))+(x2196.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2197=IKsin(j4);
IkReal x2198=IKcos(j4);
IkReal x2199=((1.0)*cj2);
IkReal x2200=(gconst92*r00);
IkReal x2201=(gconst92*r20);
IkReal x2202=((1.0)*sj0);
IkReal x2203=(gconst92*r10);
IkReal x2204=(cj1*sj2);
IkReal x2205=((1.0)*x2198);
IkReal x2206=(gconst91*x2197);
IkReal x2207=((1.0)*x2197);
evalcond[0]=((((-1.0)*r22*x2205))+((r21*x2206))+(((-1.0)*x2201*x2207)));
evalcond[1]=((((-1.0)*x2203*x2207))+cj0+(((-1.0)*r12*x2205))+((r11*x2206)));
evalcond[2]=(((r01*x2206))+(((-1.0)*x2202))+(((-1.0)*x2200*x2207))+(((-1.0)*r02*x2205)));
evalcond[3]=(((x2198*x2201))+(((-1.0)*r22*x2207))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2205))+(((-1.0)*cj1*x2199)));
evalcond[4]=(((x2198*x2200))+(((-1.0)*gconst91*r01*x2205))+(((-1.0)*cj0*sj1*x2199))+(((-1.0)*r02*x2207))+(((-1.0)*cj0*x2204)));
evalcond[5]=(((x2198*x2203))+(((-1.0)*r12*x2207))+(((-1.0)*sj0*sj1*x2199))+(((-1.0)*x2202*x2204))+(((-1.0)*gconst91*r11*x2205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2208=((1.0)*gconst92);
CheckValue<IkReal> x2209=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2208)))),-1);
if(!x2209.valid){
continue;
}
CheckValue<IkReal> x2210 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2208))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2209.value)))+(x2210.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2211=IKsin(j4);
IkReal x2212=IKcos(j4);
IkReal x2213=((1.0)*cj2);
IkReal x2214=(gconst92*r00);
IkReal x2215=(gconst92*r20);
IkReal x2216=((1.0)*sj0);
IkReal x2217=(gconst92*r10);
IkReal x2218=(cj1*sj2);
IkReal x2219=((1.0)*x2212);
IkReal x2220=(gconst91*x2211);
IkReal x2221=((1.0)*x2211);
evalcond[0]=((((-1.0)*r22*x2219))+((r21*x2220))+(((-1.0)*x2215*x2221)));
evalcond[1]=(cj0+(((-1.0)*x2217*x2221))+(((-1.0)*r12*x2219))+((r11*x2220)));
evalcond[2]=((((-1.0)*x2216))+(((-1.0)*x2214*x2221))+(((-1.0)*r02*x2219))+((r01*x2220)));
evalcond[3]=((((-1.0)*cj1*x2213))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2219))+((x2212*x2215))+(((-1.0)*r22*x2221)));
evalcond[4]=((((-1.0)*r02*x2221))+(((-1.0)*gconst91*r01*x2219))+((x2212*x2214))+(((-1.0)*cj0*sj1*x2213))+(((-1.0)*cj0*x2218)));
evalcond[5]=((((-1.0)*r12*x2221))+(((-1.0)*x2216*x2218))+((x2212*x2217))+(((-1.0)*gconst91*r11*x2219))+(((-1.0)*sj0*sj1*x2213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2222=((-1.0)*r01);
IkReal x2224 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2224)==0){
continue;
}
IkReal x2223=pow(x2224,-0.5);
CheckValue<IkReal> x2225 = IKatan2WithCheck(IkReal(x2222),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2225.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2225.value))));
IkReal gconst94=(x2222*x2223);
IkReal gconst95=((1.0)*r00*x2223);
CheckValue<IkReal> x2226 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2226.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2226.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2227=((-1.0)*r01);
CheckValue<IkReal> x2230 = IKatan2WithCheck(IkReal(x2227),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2230.valid){
continue;
}
IkReal x2228=((1.0)*(x2230.value));
IkReal x2229=x2223;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2228)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2228)));
IkReal gconst94=(x2227*x2229);
IkReal gconst95=((1.0)*r00*x2229);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2231=((-1.0)*r01);
CheckValue<IkReal> x2234 = IKatan2WithCheck(IkReal(x2231),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2234.valid){
continue;
}
IkReal x2232=((1.0)*(x2234.value));
IkReal x2233=x2223;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2232)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2232)));
IkReal gconst94=(x2231*x2233);
IkReal gconst95=((1.0)*r00*x2233);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2235=((-1.0)*r01);
CheckValue<IkReal> x2238 = IKatan2WithCheck(IkReal(x2235),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2238.valid){
continue;
}
IkReal x2236=((1.0)*(x2238.value));
IkReal x2237=x2223;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2236)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2236)));
IkReal gconst94=(x2235*x2237);
IkReal gconst95=((1.0)*r00*x2237);
IkReal x2239=r02*r02;
IkReal x2240=(r12*sj0);
IkReal x2241=((1.0)*cj0);
IkReal x2242=x2223;
j4eval[0]=((IKabs(((((-1.0)*x2241*x2242))+((cj0*x2239*x2242))+((r02*x2240*x2242)))))+(IKabs(((((-1.0)*x2240))+(((-1.0)*r02*x2241))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2243=((1.0)*sj0);
IkReal x2244=((1.0)*cj0);
CheckValue<IkReal> x2245=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2245.valid){
continue;
}
CheckValue<IkReal> x2246 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2244))+(((-1.0)*r12*x2243)))),IkReal(((((-1.0)*gconst94*r01*x2244))+(((-1.0)*gconst94*r11*x2243))+((gconst95*r10*sj0))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2245.value)))+(x2246.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2247=IKsin(j4);
IkReal x2248=IKcos(j4);
IkReal x2249=(gconst94*r11);
IkReal x2250=((1.0)*cj2);
IkReal x2251=(gconst94*r21);
IkReal x2252=((1.0)*sj0);
IkReal x2253=(gconst94*r01);
IkReal x2254=(cj1*sj2);
IkReal x2255=((1.0)*x2248);
IkReal x2256=(gconst95*x2248);
IkReal x2257=((1.0)*x2247);
IkReal x2258=(gconst95*x2257);
evalcond[0]=((((-1.0)*r22*x2255))+((x2247*x2251))+(((-1.0)*r20*x2258)));
evalcond[1]=(cj0+((x2247*x2249))+(((-1.0)*r12*x2255))+(((-1.0)*r10*x2258)));
evalcond[2]=((((-1.0)*r02*x2255))+(((-1.0)*x2252))+((x2247*x2253))+(((-1.0)*r00*x2258)));
evalcond[3]=((((-1.0)*r22*x2257))+((sj1*sj2))+((r20*x2256))+(((-1.0)*x2251*x2255))+(((-1.0)*cj1*x2250)));
evalcond[4]=((((-1.0)*r02*x2257))+(((-1.0)*x2253*x2255))+(((-1.0)*cj0*x2254))+((r00*x2256))+(((-1.0)*cj0*sj1*x2250)));
evalcond[5]=((((-1.0)*x2249*x2255))+((r10*x2256))+(((-1.0)*sj0*sj1*x2250))+(((-1.0)*r12*x2257))+(((-1.0)*x2252*x2254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2259=((1.0)*gconst95);
CheckValue<IkReal> x2260=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2259)))),-1);
if(!x2260.valid){
continue;
}
CheckValue<IkReal> x2261 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2259)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2260.value)))+(x2261.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2262=IKsin(j4);
IkReal x2263=IKcos(j4);
IkReal x2264=(gconst94*r11);
IkReal x2265=((1.0)*cj2);
IkReal x2266=(gconst94*r21);
IkReal x2267=((1.0)*sj0);
IkReal x2268=(gconst94*r01);
IkReal x2269=(cj1*sj2);
IkReal x2270=((1.0)*x2263);
IkReal x2271=(gconst95*x2263);
IkReal x2272=((1.0)*x2262);
IkReal x2273=(gconst95*x2272);
evalcond[0]=((((-1.0)*r20*x2273))+(((-1.0)*r22*x2270))+((x2262*x2266)));
evalcond[1]=(cj0+((x2262*x2264))+(((-1.0)*r10*x2273))+(((-1.0)*r12*x2270)));
evalcond[2]=((((-1.0)*r00*x2273))+(((-1.0)*r02*x2270))+((x2262*x2268))+(((-1.0)*x2267)));
evalcond[3]=((((-1.0)*cj1*x2265))+(((-1.0)*x2266*x2270))+((sj1*sj2))+(((-1.0)*r22*x2272))+((r20*x2271)));
evalcond[4]=(((r00*x2271))+(((-1.0)*cj0*sj1*x2265))+(((-1.0)*r02*x2272))+(((-1.0)*x2268*x2270))+(((-1.0)*cj0*x2269)));
evalcond[5]=((((-1.0)*sj0*sj1*x2265))+((r10*x2271))+(((-1.0)*x2267*x2269))+(((-1.0)*r12*x2272))+(((-1.0)*x2264*x2270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2274=((1.0)*gconst95);
CheckValue<IkReal> x2275 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2274))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2275.valid){
continue;
}
CheckValue<IkReal> x2276=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2274)))),-1);
if(!x2276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2275.value)+(((1.5707963267949)*(x2276.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2277=IKsin(j4);
IkReal x2278=IKcos(j4);
IkReal x2279=(gconst94*r11);
IkReal x2280=((1.0)*cj2);
IkReal x2281=(gconst94*r21);
IkReal x2282=((1.0)*sj0);
IkReal x2283=(gconst94*r01);
IkReal x2284=(cj1*sj2);
IkReal x2285=((1.0)*x2278);
IkReal x2286=(gconst95*x2278);
IkReal x2287=((1.0)*x2277);
IkReal x2288=(gconst95*x2287);
evalcond[0]=(((x2277*x2281))+(((-1.0)*r20*x2288))+(((-1.0)*r22*x2285)));
evalcond[1]=(cj0+(((-1.0)*r12*x2285))+(((-1.0)*r10*x2288))+((x2277*x2279)));
evalcond[2]=((((-1.0)*r02*x2285))+(((-1.0)*x2282))+((x2277*x2283))+(((-1.0)*r00*x2288)));
evalcond[3]=(((r20*x2286))+((sj1*sj2))+(((-1.0)*x2281*x2285))+(((-1.0)*cj1*x2280))+(((-1.0)*r22*x2287)));
evalcond[4]=((((-1.0)*r02*x2287))+(((-1.0)*cj0*x2284))+(((-1.0)*cj0*sj1*x2280))+((r00*x2286))+(((-1.0)*x2283*x2285)));
evalcond[5]=((((-1.0)*x2282*x2284))+((r10*x2286))+(((-1.0)*r12*x2287))+(((-1.0)*x2279*x2285))+(((-1.0)*sj0*sj1*x2280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2289=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2289;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2289);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2290=((1.0)*cj5);
IkReal x2291=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2290)));
j4eval[0]=x2291;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2290))))));
j4eval[2]=IKsign(x2291);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2292=cj5*cj5;
IkReal x2293=r01*r01;
IkReal x2294=(r01*sj5);
IkReal x2295=(cj5*r00);
IkReal x2296=((((-1.0)*x2292*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x2293))+(((2.0)*x2294*x2295))+((x2292*x2293)));
j4eval[0]=x2296;
j4eval[1]=IKsign(x2296);
j4eval[2]=((IKabs(r02))+(IKabs((x2295+(((-1.0)*x2294))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2297=cj5*cj5;
IkReal x2298=r01*r01;
IkReal x2299=(r01*sj5);
IkReal x2300=(cj5*r00);
CheckValue<IkReal> x2301=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x2297*(r00*r00)))+(((-1.0)*x2298))+((x2297*x2298))+(((2.0)*x2299*x2300)))),-1);
if(!x2301.valid){
continue;
}
CheckValue<IkReal> x2302 = IKatan2WithCheck(IkReal((x2300+(((-1.0)*x2299)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2301.value)))+(x2302.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2303=IKsin(j4);
IkReal x2304=IKcos(j4);
IkReal x2305=(cj5*r10);
IkReal x2306=(r01*sj5);
IkReal x2307=((1.0)*cj2);
IkReal x2308=(cj5*r00);
IkReal x2309=(cj5*r20);
IkReal x2310=((1.0)*x2304);
IkReal x2311=((1.0)*x2303);
IkReal x2312=(sj5*x2303);
evalcond[0]=((((-1.0)*r22*x2310))+((r21*x2312))+(((-1.0)*x2309*x2311)));
evalcond[1]=(((r11*x2312))+(((-1.0)*r12*x2310))+(((-1.0)*x2305*x2311)));
evalcond[2]=(((x2304*x2308))+(((-1.0)*r02*x2311))+(((-1.0)*x2306*x2310)));
evalcond[3]=((-1.0)+((x2303*x2306))+(((-1.0)*x2308*x2311))+(((-1.0)*r02*x2310)));
evalcond[4]=((((-1.0)*r22*x2311))+((x2304*x2309))+((sj1*sj2))+(((-1.0)*cj1*x2307))+(((-1.0)*r21*sj5*x2310)));
evalcond[5]=((((-1.0)*sj1*x2307))+((x2304*x2305))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2310))+(((-1.0)*r12*x2311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2313=((1.0)*cj5);
CheckValue<IkReal> x2314 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2313))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2314.valid){
continue;
}
CheckValue<IkReal> x2315=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2313)))),-1);
if(!x2315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2314.value)+(((1.5707963267949)*(x2315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2316=IKsin(j4);
IkReal x2317=IKcos(j4);
IkReal x2318=(cj5*r10);
IkReal x2319=(r01*sj5);
IkReal x2320=((1.0)*cj2);
IkReal x2321=(cj5*r00);
IkReal x2322=(cj5*r20);
IkReal x2323=((1.0)*x2317);
IkReal x2324=((1.0)*x2316);
IkReal x2325=(sj5*x2316);
evalcond[0]=((((-1.0)*r22*x2323))+((r21*x2325))+(((-1.0)*x2322*x2324)));
evalcond[1]=((((-1.0)*x2318*x2324))+((r11*x2325))+(((-1.0)*r12*x2323)));
evalcond[2]=(((x2317*x2321))+(((-1.0)*x2319*x2323))+(((-1.0)*r02*x2324)));
evalcond[3]=((-1.0)+(((-1.0)*x2321*x2324))+((x2316*x2319))+(((-1.0)*r02*x2323)));
evalcond[4]=(((x2317*x2322))+(((-1.0)*r22*x2324))+((sj1*sj2))+(((-1.0)*cj1*x2320))+(((-1.0)*r21*sj5*x2323)));
evalcond[5]=(((x2317*x2318))+(((-1.0)*r11*sj5*x2323))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2324))+(((-1.0)*sj1*x2320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2326=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2326.valid){
continue;
}
CheckValue<IkReal> x2327 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2326.value)))+(x2327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2328=IKsin(j4);
IkReal x2329=IKcos(j4);
IkReal x2330=(cj5*r10);
IkReal x2331=(r01*sj5);
IkReal x2332=((1.0)*cj2);
IkReal x2333=(cj5*r00);
IkReal x2334=(cj5*r20);
IkReal x2335=((1.0)*x2329);
IkReal x2336=((1.0)*x2328);
IkReal x2337=(sj5*x2328);
evalcond[0]=(((r21*x2337))+(((-1.0)*r22*x2335))+(((-1.0)*x2334*x2336)));
evalcond[1]=(((r11*x2337))+(((-1.0)*r12*x2335))+(((-1.0)*x2330*x2336)));
evalcond[2]=((((-1.0)*x2331*x2335))+((x2329*x2333))+(((-1.0)*r02*x2336)));
evalcond[3]=((-1.0)+(((-1.0)*x2333*x2336))+(((-1.0)*r02*x2335))+((x2328*x2331)));
evalcond[4]=((((-1.0)*r22*x2336))+((x2329*x2334))+((sj1*sj2))+(((-1.0)*cj1*x2332))+(((-1.0)*r21*sj5*x2335)));
evalcond[5]=(((x2329*x2330))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2335))+(((-1.0)*sj1*x2332))+(((-1.0)*r12*x2336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2338=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2338;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2338);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2339=((1.0)*cj5);
IkReal x2340=((((-1.0)*r21*x2339))+(((-1.0)*r20*sj5)));
j4eval[0]=x2340;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2339))+((r11*sj5))))));
j4eval[2]=IKsign(x2340);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2341=cj5*cj5;
IkReal x2342=r01*r01;
IkReal x2343=(cj5*r00);
IkReal x2344=(r01*sj5);
IkReal x2345=(x2342+((x2341*(r00*r00)))+(((-1.0)*x2341*x2342))+(((-2.0)*x2343*x2344))+(r02*r02));
j4eval[0]=x2345;
j4eval[1]=((IKabs(r02))+(IKabs((x2343+(((-1.0)*x2344))))));
j4eval[2]=IKsign(x2345);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2346=cj5*cj5;
IkReal x2347=r01*r01;
IkReal x2348=(r01*sj5);
IkReal x2349=(cj5*r00);
CheckValue<IkReal> x2350=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2348*x2349))+x2347+((x2346*(r00*r00)))+(((-1.0)*x2346*x2347))+(r02*r02))),-1);
if(!x2350.valid){
continue;
}
CheckValue<IkReal> x2351 = IKatan2WithCheck(IkReal((x2349+(((-1.0)*x2348)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2350.value)))+(x2351.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2352=IKsin(j4);
IkReal x2353=IKcos(j4);
IkReal x2354=(cj5*r10);
IkReal x2355=(r01*sj5);
IkReal x2356=(cj5*r00);
IkReal x2357=(cj5*r20);
IkReal x2358=((1.0)*x2353);
IkReal x2359=((1.0)*x2352);
IkReal x2360=(sj5*x2352);
evalcond[0]=((((-1.0)*x2357*x2359))+(((-1.0)*r22*x2358))+((r21*x2360)));
evalcond[1]=(((r11*x2360))+(((-1.0)*x2354*x2359))+(((-1.0)*r12*x2358)));
evalcond[2]=((((-1.0)*x2355*x2358))+((x2353*x2356))+(((-1.0)*r02*x2359)));
evalcond[3]=((1.0)+(((-1.0)*x2356*x2359))+((x2352*x2355))+(((-1.0)*r02*x2358)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2358))+((cj1*sj2))+((x2353*x2354))+(((-1.0)*r12*x2359)));
evalcond[5]=(((x2353*x2357))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2359))+(((-1.0)*r21*sj5*x2358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2361=((1.0)*cj5);
CheckValue<IkReal> x2362=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2361))+(((-1.0)*r20*sj5)))),-1);
if(!x2362.valid){
continue;
}
CheckValue<IkReal> x2363 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2361))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2362.value)))+(x2363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2364=IKsin(j4);
IkReal x2365=IKcos(j4);
IkReal x2366=(cj5*r10);
IkReal x2367=(r01*sj5);
IkReal x2368=(cj5*r00);
IkReal x2369=(cj5*r20);
IkReal x2370=((1.0)*x2365);
IkReal x2371=((1.0)*x2364);
IkReal x2372=(sj5*x2364);
evalcond[0]=((((-1.0)*x2369*x2371))+(((-1.0)*r22*x2370))+((r21*x2372)));
evalcond[1]=((((-1.0)*r12*x2370))+(((-1.0)*x2366*x2371))+((r11*x2372)));
evalcond[2]=((((-1.0)*r02*x2371))+((x2365*x2368))+(((-1.0)*x2367*x2370)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2370))+((x2364*x2367))+(((-1.0)*x2368*x2371)));
evalcond[4]=((((-1.0)*r11*sj5*x2370))+((cj2*sj1))+((x2365*x2366))+((cj1*sj2))+(((-1.0)*r12*x2371)));
evalcond[5]=(((x2365*x2369))+(((-1.0)*r21*sj5*x2370))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2373 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2373.valid){
continue;
}
CheckValue<IkReal> x2374=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2373.value)+(((1.5707963267949)*(x2374.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2375=IKsin(j4);
IkReal x2376=IKcos(j4);
IkReal x2377=(cj5*r10);
IkReal x2378=(r01*sj5);
IkReal x2379=(cj5*r00);
IkReal x2380=(cj5*r20);
IkReal x2381=((1.0)*x2376);
IkReal x2382=((1.0)*x2375);
IkReal x2383=(sj5*x2375);
evalcond[0]=((((-1.0)*x2380*x2382))+(((-1.0)*r22*x2381))+((r21*x2383)));
evalcond[1]=((((-1.0)*r12*x2381))+(((-1.0)*x2377*x2382))+((r11*x2383)));
evalcond[2]=((((-1.0)*r02*x2382))+(((-1.0)*x2378*x2381))+((x2376*x2379)));
evalcond[3]=((1.0)+((x2375*x2378))+(((-1.0)*r02*x2381))+(((-1.0)*x2379*x2382)));
evalcond[4]=((((-1.0)*r12*x2382))+(((-1.0)*r11*sj5*x2381))+((cj2*sj1))+((cj1*sj2))+((x2376*x2377)));
evalcond[5]=(((x2376*x2380))+(((-1.0)*r21*sj5*x2381))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2384=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2384);
rxp1_1=(px*r21);
rxp1_2=(r11*x2384);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2385=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2385);
rxp1_1=(px*r21);
rxp1_2=(r11*x2385);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2386=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2386);
rxp1_1=(px*r21);
rxp1_2=(r11*x2386);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2389=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2389.valid){
continue;
}
IkReal x2387=x2389.value;
IkReal x2388=(sj0*x2387);
cj4array[0]=(((cj2*sj1*x2388))+((cj1*sj2*x2388)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2390=IKsin(j4);
IkReal x2391=IKcos(j4);
IkReal x2392=(cj5*r20);
IkReal x2393=(r21*sj5);
IkReal x2394=((1.0)*x2390);
IkReal x2395=((1.0)*x2391);
evalcond[0]=((-1.0)*r02*x2390);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2395)));
evalcond[2]=(((x2390*x2393))+(((-1.0)*x2392*x2394)));
evalcond[3]=((((-1.0)*cj5*r10*x2394))+((r11*sj5*x2390)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2391*x2392))+(((-1.0)*x2393*x2395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2397=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2397.valid){
continue;
}
IkReal x2396=x2397.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2396))+((cj1*cj2*x2396)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2398=IKsin(j4);
IkReal x2399=IKcos(j4);
IkReal x2400=(r11*sj5);
IkReal x2401=((1.0)*sj0);
IkReal x2402=((1.0)*x2399);
IkReal x2403=((1.0)*cj5*x2398);
evalcond[0]=((-1.0)*r02*x2398);
evalcond[1]=((((-1.0)*x2401))+(((-1.0)*r02*x2402)));
evalcond[2]=((((-1.0)*r20*x2403))+((r21*sj5*x2398)));
evalcond[3]=(((x2398*x2400))+(((-1.0)*r10*x2403)));
evalcond[4]=((((-1.0)*cj2*sj1*x2401))+(((-1.0)*x2400*x2402))+(((-1.0)*cj1*sj2*x2401))+((cj5*r10*x2399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2404=IKPowWithIntegerCheck(r02,-1);
if(!x2404.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2404.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2405=IKsin(j4);
IkReal x2406=IKcos(j4);
IkReal x2407=((1.0)*sj0);
IkReal x2408=(cj5*x2406);
IkReal x2409=(sj5*x2405);
IkReal x2410=((1.0)*sj5*x2406);
IkReal x2411=((1.0)*cj5*x2405);
evalcond[0]=((-1.0)*r02*x2405);
evalcond[1]=((((-1.0)*r20*x2411))+((r21*x2409)));
evalcond[2]=(((r11*x2409))+(((-1.0)*r10*x2411)));
evalcond[3]=(((r20*x2408))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2410)));
evalcond[4]=(((r10*x2408))+(((-1.0)*cj2*sj1*x2407))+(((-1.0)*r11*x2410))+(((-1.0)*cj1*sj2*x2407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2412=((1.0)*sj0);
IkReal x2413=((1.0)*cj0);
CheckValue<IkReal> x2414 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2412))+(((-1.0)*r02*x2413)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2413))+(((-1.0)*r11*sj5*x2412)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2414.valid){
continue;
}
CheckValue<IkReal> x2415=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2414.value)+(((1.5707963267949)*(x2415.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2416=IKsin(j4);
IkReal x2417=IKcos(j4);
IkReal x2418=(cj5*r10);
IkReal x2419=(r01*sj5);
IkReal x2420=((1.0)*cj2);
IkReal x2421=(cj5*r00);
IkReal x2422=((1.0)*sj0);
IkReal x2423=(cj5*r20);
IkReal x2424=(cj1*sj2);
IkReal x2425=((1.0)*x2417);
IkReal x2426=((1.0)*x2416);
IkReal x2427=(sj5*x2416);
evalcond[0]=(((r21*x2427))+(((-1.0)*x2423*x2426))+(((-1.0)*r22*x2425)));
evalcond[1]=(cj0+(((-1.0)*r12*x2425))+((r11*x2427))+(((-1.0)*x2418*x2426)));
evalcond[2]=((((-1.0)*r02*x2425))+(((-1.0)*x2421*x2426))+((x2416*x2419))+(((-1.0)*x2422)));
evalcond[3]=(((x2417*x2423))+((sj1*sj2))+(((-1.0)*r22*x2426))+(((-1.0)*r21*sj5*x2425))+(((-1.0)*cj1*x2420)));
evalcond[4]=((((-1.0)*r02*x2426))+((x2417*x2421))+(((-1.0)*cj0*sj1*x2420))+(((-1.0)*cj0*x2424))+(((-1.0)*x2419*x2425)));
evalcond[5]=((((-1.0)*r11*sj5*x2425))+(((-1.0)*x2422*x2424))+(((-1.0)*r12*x2426))+((x2417*x2418))+(((-1.0)*sj0*sj1*x2420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2428=((1.0)*cj5);
CheckValue<IkReal> x2429 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2428))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2429.valid){
continue;
}
CheckValue<IkReal> x2430=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2428)))),-1);
if(!x2430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2429.value)+(((1.5707963267949)*(x2430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2431=IKsin(j4);
IkReal x2432=IKcos(j4);
IkReal x2433=(cj5*r10);
IkReal x2434=(r01*sj5);
IkReal x2435=((1.0)*cj2);
IkReal x2436=(cj5*r00);
IkReal x2437=((1.0)*sj0);
IkReal x2438=(cj5*r20);
IkReal x2439=(cj1*sj2);
IkReal x2440=((1.0)*x2432);
IkReal x2441=((1.0)*x2431);
IkReal x2442=(sj5*x2431);
evalcond[0]=((((-1.0)*x2438*x2441))+(((-1.0)*r22*x2440))+((r21*x2442)));
evalcond[1]=(cj0+(((-1.0)*r12*x2440))+((r11*x2442))+(((-1.0)*x2433*x2441)));
evalcond[2]=((((-1.0)*x2437))+(((-1.0)*x2436*x2441))+((x2431*x2434))+(((-1.0)*r02*x2440)));
evalcond[3]=((((-1.0)*r21*sj5*x2440))+((sj1*sj2))+((x2432*x2438))+(((-1.0)*cj1*x2435))+(((-1.0)*r22*x2441)));
evalcond[4]=((((-1.0)*cj0*x2439))+((x2432*x2436))+(((-1.0)*x2434*x2440))+(((-1.0)*cj0*sj1*x2435))+(((-1.0)*r02*x2441)));
evalcond[5]=((((-1.0)*sj0*sj1*x2435))+(((-1.0)*r11*sj5*x2440))+((x2432*x2433))+(((-1.0)*r12*x2441))+(((-1.0)*x2437*x2439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2443=((1.0)*cj5);
CheckValue<IkReal> x2444 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2443)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2444.valid){
continue;
}
CheckValue<IkReal> x2445=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2443)))),-1);
if(!x2445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2444.value)+(((1.5707963267949)*(x2445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2446=IKsin(j4);
IkReal x2447=IKcos(j4);
IkReal x2448=(cj5*r10);
IkReal x2449=(r01*sj5);
IkReal x2450=((1.0)*cj2);
IkReal x2451=(cj5*r00);
IkReal x2452=((1.0)*sj0);
IkReal x2453=(cj5*r20);
IkReal x2454=(cj1*sj2);
IkReal x2455=((1.0)*x2447);
IkReal x2456=((1.0)*x2446);
IkReal x2457=(sj5*x2446);
evalcond[0]=((((-1.0)*x2453*x2456))+(((-1.0)*r22*x2455))+((r21*x2457)));
evalcond[1]=(cj0+(((-1.0)*x2448*x2456))+(((-1.0)*r12*x2455))+((r11*x2457)));
evalcond[2]=(((x2446*x2449))+(((-1.0)*x2451*x2456))+(((-1.0)*x2452))+(((-1.0)*r02*x2455)));
evalcond[3]=(((x2447*x2453))+((sj1*sj2))+(((-1.0)*r22*x2456))+(((-1.0)*cj1*x2450))+(((-1.0)*r21*sj5*x2455)));
evalcond[4]=(((x2447*x2451))+(((-1.0)*cj0*x2454))+(((-1.0)*x2449*x2455))+(((-1.0)*cj0*sj1*x2450))+(((-1.0)*r02*x2456)));
evalcond[5]=(((x2447*x2448))+(((-1.0)*x2452*x2454))+(((-1.0)*r11*sj5*x2455))+(((-1.0)*r12*x2456))+(((-1.0)*sj0*sj1*x2450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2458=cj5*cj5;
IkReal x2459=r21*r21;
IkReal x2460=(sj1*sj2);
IkReal x2461=(r21*sj5);
IkReal x2462=(cj1*cj2);
IkReal x2463=(cj5*r20);
CheckValue<IkReal> x2464 = IKatan2WithCheck(IkReal((((r22*x2460))+(((-1.0)*r22*x2462)))),IkReal(((((-1.0)*x2460*x2463))+(((-1.0)*x2461*x2462))+((x2460*x2461))+((x2462*x2463)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2464.valid){
continue;
}
CheckValue<IkReal> x2465=IKPowWithIntegerCheck(IKsign((x2459+(r22*r22)+(((-2.0)*x2461*x2463))+(((-1.0)*x2458*x2459))+((x2458*(r20*r20))))),-1);
if(!x2465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2464.value)+(((1.5707963267949)*(x2465.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2466=IKsin(j4);
IkReal x2467=IKcos(j4);
IkReal x2468=(r21*sj5);
IkReal x2469=(cj5*r20);
IkReal x2470=((1.0)*x2467);
IkReal x2471=((1.0)*x2466);
evalcond[0]=(((x2466*x2468))+(((-1.0)*x2469*x2471))+(((-1.0)*r22*x2470)));
evalcond[1]=(((x2467*x2469))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2468*x2470))+(((-1.0)*r22*x2471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2472=(cj5*sj4);
IkReal x2473=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x2473))+(((-1.0)*r00*x2472)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2472))+(((-1.0)*r11*x2473))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x2473))+(((-1.0)*r00*x2472))))+IKsqr((((r10*x2472))+(((-1.0)*r11*x2473))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x2473))+(((-1.0)*r00*x2472))), (((r10*x2472))+(((-1.0)*r11*x2473))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2474=IKcos(j0);
IkReal x2475=IKsin(j0);
IkReal x2476=(cj4*cj5);
IkReal x2477=((0.1)*sj5);
IkReal x2478=((0.392)*sj1);
IkReal x2479=(cj5*r11);
IkReal x2480=(cj5*r01);
IkReal x2481=((1.0)*cj1);
IkReal x2482=(r11*sj5);
IkReal x2483=((1.0)*sj4);
IkReal x2484=((0.392)*cj2);
IkReal x2485=((1.0)*sj1);
IkReal x2486=((1.0)*cj4);
IkReal x2487=(r01*sj5);
IkReal x2488=(sj2*x2475);
IkReal x2489=(sj2*x2474);
IkReal x2490=(cj1*x2474);
IkReal x2491=(cj2*x2474);
IkReal x2492=(cj1*x2475);
IkReal x2493=(cj2*x2475);
evalcond[0]=(x2474+(((-1.0)*cj5*r10*x2483))+((sj4*x2482))+(((-1.0)*r12*x2486)));
evalcond[1]=((((-1.0)*x2475))+(((-1.0)*cj5*r00*x2483))+(((-1.0)*r02*x2486))+((sj4*x2487)));
evalcond[2]=(((r00*sj5))+x2480+(((-1.0)*x2481*x2491))+((sj1*x2489)));
evalcond[3]=(x2479+((r10*sj5))+(((-1.0)*x2481*x2493))+((sj1*x2488)));
evalcond[4]=(((r00*x2476))+(((-1.0)*x2486*x2487))+(((-1.0)*r02*x2483))+(((-1.0)*x2485*x2491))+(((-1.0)*x2481*x2489)));
evalcond[5]=(((r10*x2476))+(((-1.0)*x2485*x2493))+(((-1.0)*x2482*x2486))+(((-1.0)*x2481*x2488))+(((-1.0)*r12*x2483)));
evalcond[6]=((((-1.0)*r00*x2477))+((x2484*x2490))+(((-1.0)*px))+(((-0.134)*x2475))+(((-0.1)*x2480))+(((0.425)*x2490))+(((-1.0)*x2478*x2489)));
evalcond[7]=((((-0.1)*x2479))+((x2484*x2492))+(((-1.0)*py))+(((-1.0)*r10*x2477))+(((0.425)*x2492))+(((-1.0)*x2478*x2488))+(((0.134)*x2474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2494=((1.0)*cj5);
IkReal x2495=((1.0)*sj5);
CheckValue<IkReal> x2496 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2495))+(((-1.0)*r11*x2494)))),IkReal(((((-1.0)*r01*x2494))+(((-1.0)*r00*x2495)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2496.valid){
continue;
}
CheckValue<IkReal> x2497=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2497.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2496.value)+(((1.5707963267949)*(x2497.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2498=IKcos(j0);
IkReal x2499=IKsin(j0);
IkReal x2500=((0.1)*sj5);
IkReal x2501=(cj5*r11);
IkReal x2502=(cj5*r01);
IkReal x2503=(sj1*sj2);
IkReal x2504=(cj1*cj2);
IkReal x2505=((0.392)*x2499);
IkReal x2506=(cj1*x2498);
evalcond[0]=(((r00*sj5))+x2502+(((-1.0)*x2498*x2504))+((x2498*x2503)));
evalcond[1]=(x2501+((r10*sj5))+((x2499*x2503))+(((-1.0)*x2499*x2504)));
evalcond[2]=((((0.392)*x2498*x2504))+(((-0.134)*x2499))+(((0.425)*x2506))+(((-0.392)*x2498*x2503))+(((-1.0)*r00*x2500))+(((-1.0)*px))+(((-0.1)*x2502)));
evalcond[3]=(((x2504*x2505))+(((-1.0)*x2503*x2505))+(((0.425)*cj1*x2499))+(((-1.0)*py))+(((0.134)*x2498))+(((-1.0)*r10*x2500))+(((-0.1)*x2501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2507=((1.0)*cj5);
IkReal x2508=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2507)));
j4eval[0]=x2508;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2507))))));
j4eval[2]=IKsign(x2508);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2509=((1.0)*cj5);
IkReal x2510=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2509)));
j4eval[0]=x2510;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x2509))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x2510);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2511=((1.0)*sj0);
IkReal x2512=((1.0)*cj0);
IkReal x2513=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2513;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x2512))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x2511)))))+(IKabs(((((-1.0)*r12*x2511))+(((-1.0)*r02*x2512))))));
j4eval[2]=IKsign(x2513);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2514=((-1.0)*r20);
IkReal x2516 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2516)==0){
continue;
}
IkReal x2515=pow(x2516,-0.5);
CheckValue<IkReal> x2517 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2514),IKFAST_ATAN2_MAGTHRESH);
if(!x2517.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2517.value));
IkReal gconst79=(r21*x2515);
IkReal gconst80=(x2514*x2515);
CheckValue<IkReal> x2518 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2518.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2518.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2519=((-1.0)*r20);
IkReal x2520=x2515;
CheckValue<IkReal> x2522 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2519),IKFAST_ATAN2_MAGTHRESH);
if(!x2522.valid){
continue;
}
IkReal x2521=((-1.0)*(x2522.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2521;
IkReal gconst78=x2521;
IkReal gconst79=(r21*x2520);
IkReal gconst80=(x2519*x2520);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2523=((-1.0)*r20);
IkReal x2524=x2515;
CheckValue<IkReal> x2526 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2523),IKFAST_ATAN2_MAGTHRESH);
if(!x2526.valid){
continue;
}
IkReal x2525=((-1.0)*(x2526.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2525;
IkReal gconst78=x2525;
IkReal gconst79=(r21*x2524);
IkReal gconst80=(x2523*x2524);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2527=((-1.0)*r20);
IkReal x2528=x2515;
CheckValue<IkReal> x2530 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2527),IKFAST_ATAN2_MAGTHRESH);
if(!x2530.valid){
continue;
}
IkReal x2529=((-1.0)*(x2530.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2529;
IkReal gconst78=x2529;
IkReal gconst79=(r21*x2528);
IkReal gconst80=(x2527*x2528);
IkReal x2531=r22*r22;
CheckValue<IkReal> x2534=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2531))),-1);
if(!x2534.valid){
continue;
}
IkReal x2532=x2534.value;
IkReal x2533=(x2531+((x2532*(r21*r21*r21*r21)))+(((2.0)*x2532*(r20*r20)*(r21*r21)))+((x2532*(r20*r20*r20*r20))));
j4eval[0]=x2533;
j4eval[1]=IKsign(x2533);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2535=(sj1*sj2);
IkReal x2536=(gconst80*r20);
IkReal x2537=(gconst79*r21);
IkReal x2538=(cj1*cj2);
CheckValue<IkReal> x2539=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2536*x2536)+(x2537*x2537)+(((-2.0)*x2536*x2537)))),-1);
if(!x2539.valid){
continue;
}
CheckValue<IkReal> x2540 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2538))+((r22*x2535)))),IkReal((((x2536*x2538))+(((-1.0)*x2535*x2536))+(((-1.0)*x2537*x2538))+((x2535*x2537)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2539.value)))+(x2540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2541=IKsin(j4);
IkReal x2542=IKcos(j4);
IkReal x2543=(gconst79*r01);
IkReal x2544=(gconst79*r21);
IkReal x2545=((1.0)*cj2);
IkReal x2546=(gconst79*r11);
IkReal x2547=((1.0)*sj0);
IkReal x2548=(cj1*sj2);
IkReal x2549=((1.0)*x2542);
IkReal x2550=(gconst80*x2542);
IkReal x2551=((1.0)*x2541);
IkReal x2552=(gconst80*x2551);
evalcond[0]=((((-1.0)*r20*x2552))+(((-1.0)*r22*x2549))+((x2541*x2544)));
evalcond[1]=((((-1.0)*r12*x2549))+cj0+(((-1.0)*r10*x2552))+((x2541*x2546)));
evalcond[2]=((((-1.0)*r00*x2552))+(((-1.0)*x2547))+(((-1.0)*r02*x2549))+((x2541*x2543)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2544*x2549))+(((-1.0)*cj1*x2545))+((r20*x2550))+(((-1.0)*r22*x2551)));
evalcond[4]=((((-1.0)*x2543*x2549))+((r00*x2550))+(((-1.0)*r02*x2551))+(((-1.0)*cj0*x2548))+(((-1.0)*cj0*sj1*x2545)));
evalcond[5]=((((-1.0)*r12*x2551))+(((-1.0)*sj0*sj1*x2545))+(((-1.0)*x2546*x2549))+(((-1.0)*x2547*x2548))+((r10*x2550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2553=((1.0)*gconst80);
CheckValue<IkReal> x2554 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2553))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2554.valid){
continue;
}
CheckValue<IkReal> x2555=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2553))+(((-1.0)*gconst79*r10)))),-1);
if(!x2555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2554.value)+(((1.5707963267949)*(x2555.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2556=IKsin(j4);
IkReal x2557=IKcos(j4);
IkReal x2558=(gconst79*r01);
IkReal x2559=(gconst79*r21);
IkReal x2560=((1.0)*cj2);
IkReal x2561=(gconst79*r11);
IkReal x2562=((1.0)*sj0);
IkReal x2563=(cj1*sj2);
IkReal x2564=((1.0)*x2557);
IkReal x2565=(gconst80*x2557);
IkReal x2566=((1.0)*x2556);
IkReal x2567=(gconst80*x2566);
evalcond[0]=((((-1.0)*r22*x2564))+(((-1.0)*r20*x2567))+((x2556*x2559)));
evalcond[1]=(cj0+((x2556*x2561))+(((-1.0)*r12*x2564))+(((-1.0)*r10*x2567)));
evalcond[2]=((((-1.0)*r00*x2567))+(((-1.0)*r02*x2564))+((x2556*x2558))+(((-1.0)*x2562)));
evalcond[3]=((((-1.0)*cj1*x2560))+(((-1.0)*r22*x2566))+((sj1*sj2))+((r20*x2565))+(((-1.0)*x2559*x2564)));
evalcond[4]=((((-1.0)*cj0*x2563))+((r00*x2565))+(((-1.0)*r02*x2566))+(((-1.0)*x2558*x2564))+(((-1.0)*cj0*sj1*x2560)));
evalcond[5]=((((-1.0)*x2562*x2563))+((r10*x2565))+(((-1.0)*x2561*x2564))+(((-1.0)*sj0*sj1*x2560))+(((-1.0)*r12*x2566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2568=((1.0)*gconst80);
CheckValue<IkReal> x2569 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2568)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2569.valid){
continue;
}
CheckValue<IkReal> x2570=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2568))+(((-1.0)*gconst79*r00)))),-1);
if(!x2570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2569.value)+(((1.5707963267949)*(x2570.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2571=IKsin(j4);
IkReal x2572=IKcos(j4);
IkReal x2573=(gconst79*r01);
IkReal x2574=(gconst79*r21);
IkReal x2575=((1.0)*cj2);
IkReal x2576=(gconst79*r11);
IkReal x2577=((1.0)*sj0);
IkReal x2578=(cj1*sj2);
IkReal x2579=((1.0)*x2572);
IkReal x2580=(gconst80*x2572);
IkReal x2581=((1.0)*x2571);
IkReal x2582=(gconst80*x2581);
evalcond[0]=(((x2571*x2574))+(((-1.0)*r20*x2582))+(((-1.0)*r22*x2579)));
evalcond[1]=(((x2571*x2576))+(((-1.0)*r12*x2579))+cj0+(((-1.0)*r10*x2582)));
evalcond[2]=(((x2571*x2573))+(((-1.0)*r00*x2582))+(((-1.0)*x2577))+(((-1.0)*r02*x2579)));
evalcond[3]=(((r20*x2580))+((sj1*sj2))+(((-1.0)*cj1*x2575))+(((-1.0)*x2574*x2579))+(((-1.0)*r22*x2581)));
evalcond[4]=(((r00*x2580))+(((-1.0)*r02*x2581))+(((-1.0)*cj0*x2578))+(((-1.0)*x2573*x2579))+(((-1.0)*cj0*sj1*x2575)));
evalcond[5]=(((r10*x2580))+(((-1.0)*sj0*sj1*x2575))+(((-1.0)*r12*x2581))+(((-1.0)*x2577*x2578))+(((-1.0)*x2576*x2579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2583=((-1.0)*r21);
IkReal x2585 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2585)==0){
continue;
}
IkReal x2584=pow(x2585,-0.5);
CheckValue<IkReal> x2586 = IKatan2WithCheck(IkReal(x2583),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2586.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2586.value))));
IkReal gconst82=(x2583*x2584);
IkReal gconst83=((1.0)*r20*x2584);
CheckValue<IkReal> x2587 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2587.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2587.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2588=((-1.0)*r21);
CheckValue<IkReal> x2591 = IKatan2WithCheck(IkReal(x2588),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2591.valid){
continue;
}
IkReal x2589=((1.0)*(x2591.value));
IkReal x2590=x2584;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2589)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2589)));
IkReal gconst82=(x2588*x2590);
IkReal gconst83=((1.0)*r20*x2590);
IkReal x2592=r22*r22;
IkReal x2593=((1.0)*x2592);
CheckValue<IkReal> x2597=IKPowWithIntegerCheck(((-1.0)+x2592),-1);
if(!x2597.valid){
continue;
}
IkReal x2594=x2597.value;
if((((1.0)+(((-1.0)*x2593)))) < -0.00001)
continue;
IkReal x2595=IKsqrt(((1.0)+(((-1.0)*x2593))));
IkReal x2596=(cj0*x2594*x2595);
j4eval[0]=((IKabs((x2596+(((-1.0)*x2593*x2596)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2598=((-1.0)*r21);
CheckValue<IkReal> x2601 = IKatan2WithCheck(IkReal(x2598),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2601.valid){
continue;
}
IkReal x2599=((1.0)*(x2601.value));
IkReal x2600=x2584;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2599)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2599)));
IkReal gconst82=(x2598*x2600);
IkReal gconst83=((1.0)*r20*x2600);
IkReal x2602=r22*r22;
IkReal x2603=((1.0)*x2602);
CheckValue<IkReal> x2607=IKPowWithIntegerCheck(((-1.0)+x2602),-1);
if(!x2607.valid){
continue;
}
IkReal x2604=x2607.value;
if((((1.0)+(((-1.0)*x2603)))) < -0.00001)
continue;
IkReal x2605=IKsqrt(((1.0)+(((-1.0)*x2603))));
IkReal x2606=(sj0*x2604*x2605);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x2603*x2606))+x2606))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2608=((-1.0)*r21);
CheckValue<IkReal> x2611 = IKatan2WithCheck(IkReal(x2608),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2611.valid){
continue;
}
IkReal x2609=((1.0)*(x2611.value));
IkReal x2610=x2584;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2609)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2609)));
IkReal gconst82=(x2608*x2610);
IkReal gconst83=((1.0)*r20*x2610);
IkReal x2612=r22*r22;
IkReal x2613=(r12*sj0);
IkReal x2614=(cj0*r02);
CheckValue<IkReal> x2618=IKPowWithIntegerCheck(((-1.0)+x2612),-1);
if(!x2618.valid){
continue;
}
IkReal x2615=x2618.value;
if((((1.0)+(((-1.0)*x2612)))) < -0.00001)
continue;
IkReal x2616=IKsqrt(((1.0)+(((-1.0)*x2612))));
IkReal x2617=(r22*x2615*x2616);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2613))+(((-1.0)*x2614)))))+(IKabs((((x2613*x2617))+((x2614*x2617))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2619=((1.0)*sj0);
IkReal x2620=((1.0)*cj0);
CheckValue<IkReal> x2621=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2621.valid){
continue;
}
CheckValue<IkReal> x2622 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2619))+(((-1.0)*r02*x2620)))),IkReal(((((-1.0)*gconst82*r01*x2620))+(((-1.0)*gconst82*r11*x2619))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2621.value)))+(x2622.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2623=IKsin(j4);
IkReal x2624=IKcos(j4);
IkReal x2625=(gconst82*r11);
IkReal x2626=((1.0)*cj2);
IkReal x2627=((1.0)*sj0);
IkReal x2628=(cj1*sj2);
IkReal x2629=((1.0)*x2624);
IkReal x2630=(gconst83*x2624);
IkReal x2631=(gconst82*x2623);
IkReal x2632=((1.0)*x2623);
evalcond[0]=(((r21*x2631))+(((-1.0)*r22*x2629))+(((-1.0)*gconst83*r20*x2632)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x2632))+(((-1.0)*r12*x2629))+((x2623*x2625)));
evalcond[2]=((((-1.0)*gconst83*r00*x2632))+((r01*x2631))+(((-1.0)*r02*x2629))+(((-1.0)*x2627)));
evalcond[3]=((((-1.0)*gconst82*r21*x2629))+((sj1*sj2))+((r20*x2630))+(((-1.0)*cj1*x2626))+(((-1.0)*r22*x2632)));
evalcond[4]=((((-1.0)*gconst82*r01*x2629))+(((-1.0)*r02*x2632))+(((-1.0)*cj0*x2628))+((r00*x2630))+(((-1.0)*cj0*sj1*x2626)));
evalcond[5]=((((-1.0)*x2625*x2629))+((r10*x2630))+(((-1.0)*x2627*x2628))+(((-1.0)*sj0*sj1*x2626))+(((-1.0)*r12*x2632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2633=((1.0)*gconst83);
CheckValue<IkReal> x2634=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x2633)))),-1);
if(!x2634.valid){
continue;
}
CheckValue<IkReal> x2635 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2633)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2634.value)))+(x2635.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2636=IKsin(j4);
IkReal x2637=IKcos(j4);
IkReal x2638=(gconst82*r11);
IkReal x2639=((1.0)*cj2);
IkReal x2640=((1.0)*sj0);
IkReal x2641=(cj1*sj2);
IkReal x2642=((1.0)*x2637);
IkReal x2643=(gconst83*x2637);
IkReal x2644=(gconst82*x2636);
IkReal x2645=((1.0)*x2636);
evalcond[0]=((((-1.0)*gconst83*r20*x2645))+(((-1.0)*r22*x2642))+((r21*x2644)));
evalcond[1]=((((-1.0)*r12*x2642))+cj0+(((-1.0)*gconst83*r10*x2645))+((x2636*x2638)));
evalcond[2]=((((-1.0)*r02*x2642))+((r01*x2644))+(((-1.0)*x2640))+(((-1.0)*gconst83*r00*x2645)));
evalcond[3]=((((-1.0)*r22*x2645))+(((-1.0)*cj1*x2639))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2642))+((r20*x2643)));
evalcond[4]=((((-1.0)*cj0*sj1*x2639))+(((-1.0)*r02*x2645))+(((-1.0)*gconst82*r01*x2642))+((r00*x2643))+(((-1.0)*cj0*x2641)));
evalcond[5]=((((-1.0)*sj0*sj1*x2639))+(((-1.0)*r12*x2645))+((r10*x2643))+(((-1.0)*x2640*x2641))+(((-1.0)*x2638*x2642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2646=((1.0)*gconst83);
CheckValue<IkReal> x2647 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2647.valid){
continue;
}
CheckValue<IkReal> x2648=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2646))+(((-1.0)*gconst82*r00)))),-1);
if(!x2648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2647.value)+(((1.5707963267949)*(x2648.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2649=IKsin(j4);
IkReal x2650=IKcos(j4);
IkReal x2651=(gconst82*r11);
IkReal x2652=((1.0)*cj2);
IkReal x2653=((1.0)*sj0);
IkReal x2654=(cj1*sj2);
IkReal x2655=((1.0)*x2650);
IkReal x2656=(gconst83*x2650);
IkReal x2657=(gconst82*x2649);
IkReal x2658=((1.0)*x2649);
evalcond[0]=((((-1.0)*r22*x2655))+(((-1.0)*gconst83*r20*x2658))+((r21*x2657)));
evalcond[1]=(((x2649*x2651))+cj0+(((-1.0)*r12*x2655))+(((-1.0)*gconst83*r10*x2658)));
evalcond[2]=((((-1.0)*r02*x2655))+((r01*x2657))+(((-1.0)*x2653))+(((-1.0)*gconst83*r00*x2658)));
evalcond[3]=((((-1.0)*r22*x2658))+(((-1.0)*cj1*x2652))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2655))+((r20*x2656)));
evalcond[4]=((((-1.0)*r02*x2658))+(((-1.0)*cj0*sj1*x2652))+(((-1.0)*gconst82*r01*x2655))+((r00*x2656))+(((-1.0)*cj0*x2654)));
evalcond[5]=((((-1.0)*x2651*x2655))+(((-1.0)*r12*x2658))+((r10*x2656))+(((-1.0)*sj0*sj1*x2652))+(((-1.0)*x2653*x2654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2659=((-1.0)*r10);
IkReal x2661 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2661)==0){
continue;
}
IkReal x2660=pow(x2661,-0.5);
CheckValue<IkReal> x2662 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2659),IKFAST_ATAN2_MAGTHRESH);
if(!x2662.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2662.value));
IkReal gconst85=(r11*x2660);
IkReal gconst86=(x2659*x2660);
CheckValue<IkReal> x2663 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2663.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2663.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2664=((-1.0)*r10);
IkReal x2665=x2660;
CheckValue<IkReal> x2667 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2664),IKFAST_ATAN2_MAGTHRESH);
if(!x2667.valid){
continue;
}
IkReal x2666=((-1.0)*(x2667.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2666;
IkReal gconst84=x2666;
IkReal gconst85=(r11*x2665);
IkReal gconst86=(x2664*x2665);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2668=((1.0)*sj0);
IkReal x2669=((1.0)*gconst85);
CheckValue<IkReal> x2670 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2668))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2669))+(((-1.0)*gconst85*r11*x2668))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2670.valid){
continue;
}
CheckValue<IkReal> x2671=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2669)))),-1);
if(!x2671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2670.value)+(((1.5707963267949)*(x2671.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2672=IKsin(j4);
IkReal x2673=IKcos(j4);
IkReal x2674=(gconst85*r21);
IkReal x2675=(gconst86*r00);
IkReal x2676=(gconst86*r10);
IkReal x2677=((1.0)*cj2);
IkReal x2678=(gconst85*r11);
IkReal x2679=(gconst85*r01);
IkReal x2680=((1.0)*sj0);
IkReal x2681=(gconst86*r20);
IkReal x2682=(cj1*sj2);
IkReal x2683=((1.0)*x2673);
IkReal x2684=((1.0)*x2672);
evalcond[0]=(((x2672*x2674))+(((-1.0)*r22*x2683))+(((-1.0)*x2681*x2684)));
evalcond[1]=((((-1.0)*r12*x2683))+cj0+((x2672*x2678))+(((-1.0)*x2676*x2684)));
evalcond[2]=((((-1.0)*r02*x2683))+((x2672*x2679))+(((-1.0)*x2680))+(((-1.0)*x2675*x2684)));
evalcond[3]=(((x2673*x2681))+(((-1.0)*cj1*x2677))+((sj1*sj2))+(((-1.0)*r22*x2684))+(((-1.0)*x2674*x2683)));
evalcond[4]=((((-1.0)*cj0*x2682))+(((-1.0)*r02*x2684))+((x2673*x2675))+(((-1.0)*cj0*sj1*x2677))+(((-1.0)*x2679*x2683)));
evalcond[5]=((((-1.0)*r12*x2684))+((x2673*x2676))+(((-1.0)*x2680*x2682))+(((-1.0)*sj0*sj1*x2677))+(((-1.0)*x2678*x2683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2685=((1.0)*gconst86);
CheckValue<IkReal> x2686 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x2685)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2686.valid){
continue;
}
CheckValue<IkReal> x2687=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2685))+(((-1.0)*gconst85*r00)))),-1);
if(!x2687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2686.value)+(((1.5707963267949)*(x2687.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2688=IKsin(j4);
IkReal x2689=IKcos(j4);
IkReal x2690=(gconst85*r21);
IkReal x2691=(gconst86*r00);
IkReal x2692=(gconst86*r10);
IkReal x2693=((1.0)*cj2);
IkReal x2694=(gconst85*r11);
IkReal x2695=(gconst85*r01);
IkReal x2696=((1.0)*sj0);
IkReal x2697=(gconst86*r20);
IkReal x2698=(cj1*sj2);
IkReal x2699=((1.0)*x2689);
IkReal x2700=((1.0)*x2688);
evalcond[0]=((((-1.0)*x2697*x2700))+(((-1.0)*r22*x2699))+((x2688*x2690)));
evalcond[1]=(cj0+(((-1.0)*x2692*x2700))+(((-1.0)*r12*x2699))+((x2688*x2694)));
evalcond[2]=((((-1.0)*r02*x2699))+(((-1.0)*x2696))+(((-1.0)*x2691*x2700))+((x2688*x2695)));
evalcond[3]=((((-1.0)*r22*x2700))+(((-1.0)*cj1*x2693))+((sj1*sj2))+((x2689*x2697))+(((-1.0)*x2690*x2699)));
evalcond[4]=((((-1.0)*cj0*x2698))+(((-1.0)*r02*x2700))+((x2689*x2691))+(((-1.0)*cj0*sj1*x2693))+(((-1.0)*x2695*x2699)));
evalcond[5]=((((-1.0)*x2696*x2698))+(((-1.0)*r12*x2700))+((x2689*x2692))+(((-1.0)*sj0*sj1*x2693))+(((-1.0)*x2694*x2699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2701=((-1.0)*r11);
IkReal x2703 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2703)==0){
continue;
}
IkReal x2702=pow(x2703,-0.5);
CheckValue<IkReal> x2704 = IKatan2WithCheck(IkReal(x2701),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2704.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2704.value))));
IkReal gconst88=(x2701*x2702);
IkReal gconst89=((1.0)*r10*x2702);
CheckValue<IkReal> x2705 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2705.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2705.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2706=((-1.0)*r11);
CheckValue<IkReal> x2709 = IKatan2WithCheck(IkReal(x2706),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2709.valid){
continue;
}
IkReal x2707=((1.0)*(x2709.value));
IkReal x2708=x2702;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2707)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2707)));
IkReal gconst88=(x2706*x2708);
IkReal gconst89=((1.0)*r10*x2708);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2710=((-1.0)*r11);
CheckValue<IkReal> x2713 = IKatan2WithCheck(IkReal(x2710),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2713.valid){
continue;
}
IkReal x2711=((1.0)*(x2713.value));
IkReal x2712=x2702;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2711)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2711)));
IkReal gconst88=(x2710*x2712);
IkReal gconst89=((1.0)*r10*x2712);
IkReal x2714=r12*r12;
IkReal x2715=((1.0)*sj0);
IkReal x2716=(cj0*r02);
IkReal x2717=x2702;
j4eval[0]=((IKabs((((sj0*x2714*x2717))+(((-1.0)*x2715*x2717))+((r12*x2716*x2717)))))+(IKabs(((((-1.0)*x2716))+(((-1.0)*r12*x2715))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2718=((-1.0)*r11);
CheckValue<IkReal> x2721 = IKatan2WithCheck(IkReal(x2718),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2721.valid){
continue;
}
IkReal x2719=((1.0)*(x2721.value));
IkReal x2720=x2702;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2719)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2719)));
IkReal gconst88=(x2718*x2720);
IkReal gconst89=((1.0)*r10*x2720);
IkReal x2722=r12*r12;
IkReal x2723=(cj1*cj2*r22);
IkReal x2724=(r22*sj1*sj2);
CheckValue<IkReal> x2728=IKPowWithIntegerCheck(((-1.0)+x2722),-1);
if(!x2728.valid){
continue;
}
IkReal x2725=x2728.value;
if((((1.0)+(((-1.0)*x2722)))) < -0.00001)
continue;
IkReal x2726=IKsqrt(((1.0)+(((-1.0)*x2722))));
IkReal x2727=(r12*x2725*x2726);
j4eval[0]=((IKabs(((((-1.0)*x2724*x2727))+((x2723*x2727)))))+(IKabs((x2724+(((-1.0)*x2723))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2729=(cj1*cj2);
IkReal x2730=(gconst89*r20);
IkReal x2731=(gconst88*r21);
IkReal x2732=(sj1*sj2);
CheckValue<IkReal> x2733 = IKatan2WithCheck(IkReal((((r22*x2732))+(((-1.0)*r22*x2729)))),IkReal(((((-1.0)*x2730*x2732))+(((-1.0)*x2729*x2731))+((x2731*x2732))+((x2729*x2730)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2733.valid){
continue;
}
CheckValue<IkReal> x2734=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2730*x2731))+(r22*r22)+(x2731*x2731)+(x2730*x2730))),-1);
if(!x2734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2733.value)+(((1.5707963267949)*(x2734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2735=IKsin(j4);
IkReal x2736=IKcos(j4);
IkReal x2737=((1.0)*sj0);
IkReal x2738=((1.0)*cj2);
IkReal x2739=(gconst89*r20);
IkReal x2740=(gconst89*r10);
IkReal x2741=(gconst89*r00);
IkReal x2742=(cj1*sj2);
IkReal x2743=((1.0)*x2736);
IkReal x2744=((1.0)*x2735);
IkReal x2745=(gconst88*x2735);
evalcond[0]=(((r21*x2745))+(((-1.0)*x2739*x2744))+(((-1.0)*r22*x2743)));
evalcond[1]=(((r11*x2745))+cj0+(((-1.0)*x2740*x2744))+(((-1.0)*r12*x2743)));
evalcond[2]=((((-1.0)*x2741*x2744))+((r01*x2745))+(((-1.0)*x2737))+(((-1.0)*r02*x2743)));
evalcond[3]=((((-1.0)*gconst88*r21*x2743))+((sj1*sj2))+((x2736*x2739))+(((-1.0)*cj1*x2738))+(((-1.0)*r22*x2744)));
evalcond[4]=((((-1.0)*cj0*sj1*x2738))+(((-1.0)*cj0*x2742))+((x2736*x2741))+(((-1.0)*r02*x2744))+(((-1.0)*gconst88*r01*x2743)));
evalcond[5]=((((-1.0)*cj2*sj1*x2737))+(((-1.0)*gconst88*r11*x2743))+(((-1.0)*r12*x2744))+(((-1.0)*x2737*x2742))+((x2736*x2740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2746=((1.0)*sj0);
IkReal x2747=((1.0)*cj0);
CheckValue<IkReal> x2748=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2748.valid){
continue;
}
CheckValue<IkReal> x2749 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2746))+(((-1.0)*r02*x2747)))),IkReal(((((-1.0)*gconst88*r11*x2746))+((cj0*gconst89*r00))+(((-1.0)*gconst88*r01*x2747))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2748.value)))+(x2749.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2750=IKsin(j4);
IkReal x2751=IKcos(j4);
IkReal x2752=((1.0)*sj0);
IkReal x2753=((1.0)*cj2);
IkReal x2754=(gconst89*r20);
IkReal x2755=(gconst89*r10);
IkReal x2756=(gconst89*r00);
IkReal x2757=(cj1*sj2);
IkReal x2758=((1.0)*x2751);
IkReal x2759=((1.0)*x2750);
IkReal x2760=(gconst88*x2750);
evalcond[0]=((((-1.0)*r22*x2758))+(((-1.0)*x2754*x2759))+((r21*x2760)));
evalcond[1]=(cj0+(((-1.0)*r12*x2758))+(((-1.0)*x2755*x2759))+((r11*x2760)));
evalcond[2]=(((r01*x2760))+(((-1.0)*x2756*x2759))+(((-1.0)*x2752))+(((-1.0)*r02*x2758)));
evalcond[3]=((((-1.0)*r22*x2759))+(((-1.0)*gconst88*r21*x2758))+((sj1*sj2))+(((-1.0)*cj1*x2753))+((x2751*x2754)));
evalcond[4]=((((-1.0)*gconst88*r01*x2758))+(((-1.0)*cj0*x2757))+(((-1.0)*cj0*sj1*x2753))+((x2751*x2756))+(((-1.0)*r02*x2759)));
evalcond[5]=((((-1.0)*gconst88*r11*x2758))+(((-1.0)*x2752*x2757))+(((-1.0)*cj2*sj1*x2752))+(((-1.0)*r12*x2759))+((x2751*x2755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2761=((1.0)*gconst89);
CheckValue<IkReal> x2762=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2761))+(((-1.0)*gconst88*r00)))),-1);
if(!x2762.valid){
continue;
}
CheckValue<IkReal> x2763 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2761))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2762.value)))+(x2763.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2764=IKsin(j4);
IkReal x2765=IKcos(j4);
IkReal x2766=((1.0)*sj0);
IkReal x2767=((1.0)*cj2);
IkReal x2768=(gconst89*r20);
IkReal x2769=(gconst89*r10);
IkReal x2770=(gconst89*r00);
IkReal x2771=(cj1*sj2);
IkReal x2772=((1.0)*x2765);
IkReal x2773=((1.0)*x2764);
IkReal x2774=(gconst88*x2764);
evalcond[0]=((((-1.0)*x2768*x2773))+((r21*x2774))+(((-1.0)*r22*x2772)));
evalcond[1]=(((r11*x2774))+cj0+(((-1.0)*x2769*x2773))+(((-1.0)*r12*x2772)));
evalcond[2]=(((r01*x2774))+(((-1.0)*r02*x2772))+(((-1.0)*x2770*x2773))+(((-1.0)*x2766)));
evalcond[3]=(((sj1*sj2))+((x2765*x2768))+(((-1.0)*gconst88*r21*x2772))+(((-1.0)*cj1*x2767))+(((-1.0)*r22*x2773)));
evalcond[4]=((((-1.0)*cj0*x2771))+(((-1.0)*r02*x2773))+(((-1.0)*gconst88*r01*x2772))+(((-1.0)*cj0*sj1*x2767))+((x2765*x2770)));
evalcond[5]=((((-1.0)*x2766*x2771))+(((-1.0)*gconst88*r11*x2772))+(((-1.0)*r12*x2773))+(((-1.0)*cj2*sj1*x2766))+((x2765*x2769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2775=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2775;
j4eval[1]=IKsign(x2775);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2776=((1.0)*cj5);
IkReal x2777=((((-1.0)*r01*x2776))+(((-1.0)*r00*sj5)));
j4eval[0]=x2777;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2776)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2778=cj5*cj5;
IkReal x2779=r11*r11;
IkReal x2780=(r11*sj5);
IkReal x2781=(cj5*r10);
IkReal x2782=(x2779+(r12*r12)+(((-1.0)*x2778*x2779))+(((-2.0)*x2780*x2781))+((x2778*(r10*r10))));
j4eval[0]=x2782;
j4eval[1]=IKsign(x2782);
j4eval[2]=((IKabs(r12))+(IKabs((x2781+(((-1.0)*x2780))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2783=cj5*cj5;
IkReal x2784=r11*r11;
IkReal x2785=(cj5*r10);
IkReal x2786=(r11*sj5);
CheckValue<IkReal> x2787=IKPowWithIntegerCheck(IKsign((x2784+(r12*r12)+(((-1.0)*x2783*x2784))+((x2783*(r10*r10)))+(((-2.0)*x2785*x2786)))),-1);
if(!x2787.valid){
continue;
}
CheckValue<IkReal> x2788 = IKatan2WithCheck(IkReal((x2785+(((-1.0)*x2786)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2787.value)))+(x2788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2789=IKsin(j4);
IkReal x2790=IKcos(j4);
IkReal x2791=(cj5*r10);
IkReal x2792=(r01*sj5);
IkReal x2793=((1.0)*cj2);
IkReal x2794=(cj5*r00);
IkReal x2795=(cj5*r20);
IkReal x2796=((1.0)*x2790);
IkReal x2797=((1.0)*x2789);
IkReal x2798=(sj5*x2789);
evalcond[0]=((((-1.0)*x2795*x2797))+((r21*x2798))+(((-1.0)*r22*x2796)));
evalcond[1]=(((x2789*x2792))+(((-1.0)*x2794*x2797))+(((-1.0)*r02*x2796)));
evalcond[2]=((((-1.0)*r11*sj5*x2796))+((x2790*x2791))+(((-1.0)*r12*x2797)));
evalcond[3]=((1.0)+(((-1.0)*x2791*x2797))+((r11*x2798))+(((-1.0)*r12*x2796)));
evalcond[4]=((((-1.0)*r21*sj5*x2796))+((sj1*sj2))+((x2790*x2795))+(((-1.0)*r22*x2797))+(((-1.0)*cj1*x2793)));
evalcond[5]=((((-1.0)*sj1*x2793))+(((-1.0)*cj1*sj2))+((x2790*x2794))+(((-1.0)*x2792*x2796))+(((-1.0)*r02*x2797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2799=((1.0)*cj5);
CheckValue<IkReal> x2800=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2799)))),-1);
if(!x2800.valid){
continue;
}
CheckValue<IkReal> x2801 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2799))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2800.value)))+(x2801.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2802=IKsin(j4);
IkReal x2803=IKcos(j4);
IkReal x2804=(cj5*r10);
IkReal x2805=(r01*sj5);
IkReal x2806=((1.0)*cj2);
IkReal x2807=(cj5*r00);
IkReal x2808=(cj5*r20);
IkReal x2809=((1.0)*x2803);
IkReal x2810=((1.0)*x2802);
IkReal x2811=(sj5*x2802);
evalcond[0]=(((r21*x2811))+(((-1.0)*r22*x2809))+(((-1.0)*x2808*x2810)));
evalcond[1]=((((-1.0)*x2807*x2810))+((x2802*x2805))+(((-1.0)*r02*x2809)));
evalcond[2]=((((-1.0)*r12*x2810))+((x2803*x2804))+(((-1.0)*r11*sj5*x2809)));
evalcond[3]=((1.0)+(((-1.0)*x2804*x2810))+(((-1.0)*r12*x2809))+((r11*x2811)));
evalcond[4]=((((-1.0)*r21*sj5*x2809))+(((-1.0)*cj1*x2806))+((sj1*sj2))+(((-1.0)*r22*x2810))+((x2803*x2808)));
evalcond[5]=((((-1.0)*sj1*x2806))+(((-1.0)*r02*x2810))+(((-1.0)*x2805*x2809))+(((-1.0)*cj1*sj2))+((x2803*x2807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2812=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2812.valid){
continue;
}
CheckValue<IkReal> x2813 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2812.value)))+(x2813.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2814=IKsin(j4);
IkReal x2815=IKcos(j4);
IkReal x2816=(cj5*r10);
IkReal x2817=(r01*sj5);
IkReal x2818=((1.0)*cj2);
IkReal x2819=(cj5*r00);
IkReal x2820=(cj5*r20);
IkReal x2821=((1.0)*x2815);
IkReal x2822=((1.0)*x2814);
IkReal x2823=(sj5*x2814);
evalcond[0]=((((-1.0)*x2820*x2822))+((r21*x2823))+(((-1.0)*r22*x2821)));
evalcond[1]=((((-1.0)*r02*x2821))+((x2814*x2817))+(((-1.0)*x2819*x2822)));
evalcond[2]=((((-1.0)*r12*x2822))+(((-1.0)*r11*sj5*x2821))+((x2815*x2816)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2821))+(((-1.0)*x2816*x2822))+((r11*x2823)));
evalcond[4]=((((-1.0)*cj1*x2818))+((x2815*x2820))+((sj1*sj2))+(((-1.0)*r22*x2822))+(((-1.0)*r21*sj5*x2821)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x2817*x2821))+(((-1.0)*r02*x2822))+((x2815*x2819))+(((-1.0)*sj1*x2818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2824=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2824;
j4eval[1]=IKsign(x2824);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2825=((1.0)*cj5);
IkReal x2826=((((-1.0)*r21*x2825))+(((-1.0)*r20*sj5)));
j4eval[0]=x2826;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2825))))));
j4eval[2]=IKsign(x2826);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2827=cj5*cj5;
IkReal x2828=r11*r11;
IkReal x2829=(cj5*r10);
IkReal x2830=(r11*sj5);
IkReal x2831=((((2.0)*x2829*x2830))+(((-1.0)*x2828))+(((-1.0)*(r12*r12)))+((x2827*x2828))+(((-1.0)*x2827*(r10*r10))));
j4eval[0]=x2831;
j4eval[1]=((IKabs(((((-1.0)*x2830))+x2829)))+(IKabs(r12)));
j4eval[2]=IKsign(x2831);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2832=cj5*cj5;
IkReal x2833=r11*r11;
IkReal x2834=(cj5*r10);
IkReal x2835=(r11*sj5);
CheckValue<IkReal> x2836 = IKatan2WithCheck(IkReal(((((-1.0)*x2835))+x2834)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2836.valid){
continue;
}
CheckValue<IkReal> x2837=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2833))+(((-1.0)*x2832*(r10*r10)))+(((-1.0)*(r12*r12)))+((x2832*x2833))+(((2.0)*x2834*x2835)))),-1);
if(!x2837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2836.value)+(((1.5707963267949)*(x2837.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2838=IKsin(j4);
IkReal x2839=IKcos(j4);
IkReal x2840=(cj5*r10);
IkReal x2841=(r01*sj5);
IkReal x2842=(cj5*r00);
IkReal x2843=(cj5*r20);
IkReal x2844=((1.0)*x2839);
IkReal x2845=((1.0)*x2838);
IkReal x2846=(sj5*x2838);
evalcond[0]=((((-1.0)*x2843*x2845))+((r21*x2846))+(((-1.0)*r22*x2844)));
evalcond[1]=((((-1.0)*x2842*x2845))+((x2838*x2841))+(((-1.0)*r02*x2844)));
evalcond[2]=((((-1.0)*r12*x2845))+((x2839*x2840))+(((-1.0)*r11*sj5*x2844)));
evalcond[3]=((-1.0)+((r11*x2846))+(((-1.0)*x2840*x2845))+(((-1.0)*r12*x2844)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2845))+(((-1.0)*x2841*x2844))+((x2839*x2842)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2845))+((x2839*x2843))+(((-1.0)*r21*sj5*x2844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2847=((1.0)*cj5);
CheckValue<IkReal> x2848 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2848.valid){
continue;
}
CheckValue<IkReal> x2849=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2847))+(((-1.0)*r20*sj5)))),-1);
if(!x2849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2848.value)+(((1.5707963267949)*(x2849.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2850=IKsin(j4);
IkReal x2851=IKcos(j4);
IkReal x2852=(cj5*r10);
IkReal x2853=(r01*sj5);
IkReal x2854=(cj5*r00);
IkReal x2855=(cj5*r20);
IkReal x2856=((1.0)*x2851);
IkReal x2857=((1.0)*x2850);
IkReal x2858=(sj5*x2850);
evalcond[0]=(((r21*x2858))+(((-1.0)*r22*x2856))+(((-1.0)*x2855*x2857)));
evalcond[1]=(((x2850*x2853))+(((-1.0)*r02*x2856))+(((-1.0)*x2854*x2857)));
evalcond[2]=((((-1.0)*r11*sj5*x2856))+(((-1.0)*r12*x2857))+((x2851*x2852)));
evalcond[3]=((-1.0)+((r11*x2858))+(((-1.0)*r12*x2856))+(((-1.0)*x2852*x2857)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2857))+((x2851*x2854))+(((-1.0)*x2853*x2856)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2851*x2855))+(((-1.0)*r22*x2857))+(((-1.0)*r21*sj5*x2856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2859 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2859.valid){
continue;
}
CheckValue<IkReal> x2860=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2859.value)+(((1.5707963267949)*(x2860.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2861=IKsin(j4);
IkReal x2862=IKcos(j4);
IkReal x2863=(cj5*r10);
IkReal x2864=(r01*sj5);
IkReal x2865=(cj5*r00);
IkReal x2866=(cj5*r20);
IkReal x2867=((1.0)*x2862);
IkReal x2868=((1.0)*x2861);
IkReal x2869=(sj5*x2861);
evalcond[0]=(((r21*x2869))+(((-1.0)*r22*x2867))+(((-1.0)*x2866*x2868)));
evalcond[1]=((((-1.0)*r02*x2867))+(((-1.0)*x2865*x2868))+((x2861*x2864)));
evalcond[2]=((((-1.0)*r12*x2868))+(((-1.0)*r11*sj5*x2867))+((x2862*x2863)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2867))+(((-1.0)*x2863*x2868))+((r11*x2869)));
evalcond[4]=((((-1.0)*r02*x2868))+((cj2*sj1))+(((-1.0)*x2864*x2867))+((cj1*sj2))+((x2862*x2865)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2868))+(((-1.0)*r21*sj5*x2867))+((x2862*x2866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2870=((-1.0)*r00);
IkReal x2872 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2872)==0){
continue;
}
IkReal x2871=pow(x2872,-0.5);
CheckValue<IkReal> x2873 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2870),IKFAST_ATAN2_MAGTHRESH);
if(!x2873.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2873.value));
IkReal gconst91=(r01*x2871);
IkReal gconst92=(x2870*x2871);
CheckValue<IkReal> x2874 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2874.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2874.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2875=((-1.0)*r00);
IkReal x2876=x2871;
CheckValue<IkReal> x2878 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2875),IKFAST_ATAN2_MAGTHRESH);
if(!x2878.valid){
continue;
}
IkReal x2877=((-1.0)*(x2878.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2877;
IkReal gconst90=x2877;
IkReal gconst91=(r01*x2876);
IkReal gconst92=(x2875*x2876);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2879=((1.0)*sj0);
IkReal x2880=((1.0)*cj0);
CheckValue<IkReal> x2881 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2880))+(((-1.0)*r12*x2879)))),IkReal(((((-1.0)*gconst91*r11*x2879))+((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2880)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2881.valid){
continue;
}
CheckValue<IkReal> x2882=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2881.value)+(((1.5707963267949)*(x2882.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2883=IKsin(j4);
IkReal x2884=IKcos(j4);
IkReal x2885=((1.0)*cj2);
IkReal x2886=(gconst92*r00);
IkReal x2887=(gconst92*r20);
IkReal x2888=((1.0)*sj0);
IkReal x2889=(gconst92*r10);
IkReal x2890=(cj1*sj2);
IkReal x2891=((1.0)*x2884);
IkReal x2892=(gconst91*x2883);
IkReal x2893=((1.0)*x2883);
evalcond[0]=((((-1.0)*r22*x2891))+(((-1.0)*x2887*x2893))+((r21*x2892)));
evalcond[1]=(cj0+(((-1.0)*x2889*x2893))+((r11*x2892))+(((-1.0)*r12*x2891)));
evalcond[2]=((((-1.0)*r02*x2891))+((r01*x2892))+(((-1.0)*x2888))+(((-1.0)*x2886*x2893)));
evalcond[3]=((((-1.0)*r22*x2893))+((x2884*x2887))+(((-1.0)*gconst91*r21*x2891))+((sj1*sj2))+(((-1.0)*cj1*x2885)));
evalcond[4]=(((x2884*x2886))+(((-1.0)*r02*x2893))+(((-1.0)*cj0*sj1*x2885))+(((-1.0)*cj0*x2890))+(((-1.0)*gconst91*r01*x2891)));
evalcond[5]=(((x2884*x2889))+(((-1.0)*sj0*sj1*x2885))+(((-1.0)*gconst91*r11*x2891))+(((-1.0)*x2888*x2890))+(((-1.0)*r12*x2893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2894=((1.0)*gconst92);
CheckValue<IkReal> x2895 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2894))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2895.valid){
continue;
}
CheckValue<IkReal> x2896=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2894)))),-1);
if(!x2896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2895.value)+(((1.5707963267949)*(x2896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2897=IKsin(j4);
IkReal x2898=IKcos(j4);
IkReal x2899=((1.0)*cj2);
IkReal x2900=(gconst92*r00);
IkReal x2901=(gconst92*r20);
IkReal x2902=((1.0)*sj0);
IkReal x2903=(gconst92*r10);
IkReal x2904=(cj1*sj2);
IkReal x2905=((1.0)*x2898);
IkReal x2906=(gconst91*x2897);
IkReal x2907=((1.0)*x2897);
evalcond[0]=((((-1.0)*x2901*x2907))+((r21*x2906))+(((-1.0)*r22*x2905)));
evalcond[1]=(cj0+(((-1.0)*x2903*x2907))+(((-1.0)*r12*x2905))+((r11*x2906)));
evalcond[2]=((((-1.0)*r02*x2905))+(((-1.0)*x2900*x2907))+((r01*x2906))+(((-1.0)*x2902)));
evalcond[3]=(((sj1*sj2))+((x2898*x2901))+(((-1.0)*cj1*x2899))+(((-1.0)*gconst91*r21*x2905))+(((-1.0)*r22*x2907)));
evalcond[4]=((((-1.0)*r02*x2907))+(((-1.0)*cj0*x2904))+(((-1.0)*cj0*sj1*x2899))+((x2898*x2900))+(((-1.0)*gconst91*r01*x2905)));
evalcond[5]=((((-1.0)*x2902*x2904))+(((-1.0)*sj0*sj1*x2899))+(((-1.0)*gconst91*r11*x2905))+((x2898*x2903))+(((-1.0)*r12*x2907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2908=((-1.0)*r01);
IkReal x2910 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2910)==0){
continue;
}
IkReal x2909=pow(x2910,-0.5);
CheckValue<IkReal> x2911 = IKatan2WithCheck(IkReal(x2908),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2911.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2911.value))));
IkReal gconst94=(x2908*x2909);
IkReal gconst95=((1.0)*r00*x2909);
CheckValue<IkReal> x2912 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2912.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2912.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2913=((-1.0)*r01);
CheckValue<IkReal> x2916 = IKatan2WithCheck(IkReal(x2913),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2916.valid){
continue;
}
IkReal x2914=((1.0)*(x2916.value));
IkReal x2915=x2909;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2914)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2914)));
IkReal gconst94=(x2913*x2915);
IkReal gconst95=((1.0)*r00*x2915);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2917=((-1.0)*r01);
CheckValue<IkReal> x2920 = IKatan2WithCheck(IkReal(x2917),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2920.valid){
continue;
}
IkReal x2918=((1.0)*(x2920.value));
IkReal x2919=x2909;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2918)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2918)));
IkReal gconst94=(x2917*x2919);
IkReal gconst95=((1.0)*r00*x2919);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2921=((-1.0)*r01);
CheckValue<IkReal> x2924 = IKatan2WithCheck(IkReal(x2921),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2924.valid){
continue;
}
IkReal x2922=((1.0)*(x2924.value));
IkReal x2923=x2909;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2922)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2922)));
IkReal gconst94=(x2921*x2923);
IkReal gconst95=((1.0)*r00*x2923);
IkReal x2925=r02*r02;
IkReal x2926=(r12*sj0);
IkReal x2927=((1.0)*cj0);
IkReal x2928=x2909;
j4eval[0]=((IKabs(((((-1.0)*r02*x2927))+(((-1.0)*x2926)))))+(IKabs((((r02*x2926*x2928))+(((-1.0)*x2927*x2928))+((cj0*x2925*x2928))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2929=((1.0)*sj0);
IkReal x2930=((1.0)*cj0);
CheckValue<IkReal> x2931=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2931.valid){
continue;
}
CheckValue<IkReal> x2932 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2929))+(((-1.0)*r02*x2930)))),IkReal(((((-1.0)*gconst94*r11*x2929))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2930))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2931.value)))+(x2932.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2933=IKsin(j4);
IkReal x2934=IKcos(j4);
IkReal x2935=(gconst94*r11);
IkReal x2936=((1.0)*cj2);
IkReal x2937=(gconst94*r21);
IkReal x2938=((1.0)*sj0);
IkReal x2939=(gconst94*r01);
IkReal x2940=(cj1*sj2);
IkReal x2941=((1.0)*x2934);
IkReal x2942=(gconst95*x2934);
IkReal x2943=((1.0)*x2933);
IkReal x2944=(gconst95*x2943);
evalcond[0]=((((-1.0)*r20*x2944))+(((-1.0)*r22*x2941))+((x2933*x2937)));
evalcond[1]=((((-1.0)*r12*x2941))+cj0+(((-1.0)*r10*x2944))+((x2933*x2935)));
evalcond[2]=((((-1.0)*r02*x2941))+(((-1.0)*x2938))+(((-1.0)*r00*x2944))+((x2933*x2939)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2936))+(((-1.0)*r22*x2943))+((r20*x2942))+(((-1.0)*x2937*x2941)));
evalcond[4]=((((-1.0)*x2939*x2941))+(((-1.0)*r02*x2943))+(((-1.0)*cj0*x2940))+((r00*x2942))+(((-1.0)*cj0*sj1*x2936)));
evalcond[5]=((((-1.0)*r12*x2943))+(((-1.0)*x2935*x2941))+((r10*x2942))+(((-1.0)*sj0*sj1*x2936))+(((-1.0)*x2938*x2940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2945=((1.0)*gconst95);
CheckValue<IkReal> x2946=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2945)))),-1);
if(!x2946.valid){
continue;
}
CheckValue<IkReal> x2947 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2946.value)))+(x2947.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2948=IKsin(j4);
IkReal x2949=IKcos(j4);
IkReal x2950=(gconst94*r11);
IkReal x2951=((1.0)*cj2);
IkReal x2952=(gconst94*r21);
IkReal x2953=((1.0)*sj0);
IkReal x2954=(gconst94*r01);
IkReal x2955=(cj1*sj2);
IkReal x2956=((1.0)*x2949);
IkReal x2957=(gconst95*x2949);
IkReal x2958=((1.0)*x2948);
IkReal x2959=(gconst95*x2958);
evalcond[0]=((((-1.0)*r20*x2959))+((x2948*x2952))+(((-1.0)*r22*x2956)));
evalcond[1]=((((-1.0)*r10*x2959))+cj0+((x2948*x2950))+(((-1.0)*r12*x2956)));
evalcond[2]=((((-1.0)*r02*x2956))+(((-1.0)*x2953))+((x2948*x2954))+(((-1.0)*r00*x2959)));
evalcond[3]=((((-1.0)*x2952*x2956))+((sj1*sj2))+((r20*x2957))+(((-1.0)*r22*x2958))+(((-1.0)*cj1*x2951)));
evalcond[4]=((((-1.0)*r02*x2958))+(((-1.0)*cj0*x2955))+(((-1.0)*cj0*sj1*x2951))+((r00*x2957))+(((-1.0)*x2954*x2956)));
evalcond[5]=((((-1.0)*x2953*x2955))+((r10*x2957))+(((-1.0)*sj0*sj1*x2951))+(((-1.0)*r12*x2958))+(((-1.0)*x2950*x2956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2960=((1.0)*gconst95);
CheckValue<IkReal> x2961 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2960))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2961.valid){
continue;
}
CheckValue<IkReal> x2962=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2960)))),-1);
if(!x2962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2961.value)+(((1.5707963267949)*(x2962.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2963=IKsin(j4);
IkReal x2964=IKcos(j4);
IkReal x2965=(gconst94*r11);
IkReal x2966=((1.0)*cj2);
IkReal x2967=(gconst94*r21);
IkReal x2968=((1.0)*sj0);
IkReal x2969=(gconst94*r01);
IkReal x2970=(cj1*sj2);
IkReal x2971=((1.0)*x2964);
IkReal x2972=(gconst95*x2964);
IkReal x2973=((1.0)*x2963);
IkReal x2974=(gconst95*x2973);
evalcond[0]=((((-1.0)*r20*x2974))+(((-1.0)*r22*x2971))+((x2963*x2967)));
evalcond[1]=(cj0+(((-1.0)*r12*x2971))+(((-1.0)*r10*x2974))+((x2963*x2965)));
evalcond[2]=((((-1.0)*r02*x2971))+(((-1.0)*r00*x2974))+(((-1.0)*x2968))+((x2963*x2969)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2973))+(((-1.0)*x2967*x2971))+(((-1.0)*cj1*x2966))+((r20*x2972)));
evalcond[4]=((((-1.0)*cj0*x2970))+(((-1.0)*r02*x2973))+(((-1.0)*x2969*x2971))+((r00*x2972))+(((-1.0)*cj0*sj1*x2966)));
evalcond[5]=((((-1.0)*r12*x2973))+(((-1.0)*x2965*x2971))+((r10*x2972))+(((-1.0)*x2968*x2970))+(((-1.0)*sj0*sj1*x2966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2975=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2975;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2975);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2976=((1.0)*cj5);
IkReal x2977=((((-1.0)*r11*x2976))+(((-1.0)*r10*sj5)));
j4eval[0]=x2977;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2976)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2977);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2978=cj5*cj5;
IkReal x2979=r01*r01;
IkReal x2980=(r01*sj5);
IkReal x2981=(cj5*r00);
IkReal x2982=((((-1.0)*x2979))+(((2.0)*x2980*x2981))+(((-1.0)*(r02*r02)))+(((-1.0)*x2978*(r00*r00)))+((x2978*x2979)));
j4eval[0]=x2982;
j4eval[1]=IKsign(x2982);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2980))+x2981))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2983=cj5*cj5;
IkReal x2984=r01*r01;
IkReal x2985=(r01*sj5);
IkReal x2986=(cj5*r00);
CheckValue<IkReal> x2987 = IKatan2WithCheck(IkReal(((((-1.0)*x2985))+x2986)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2987.valid){
continue;
}
CheckValue<IkReal> x2988=IKPowWithIntegerCheck(IKsign((((x2983*x2984))+(((-1.0)*(r02*r02)))+(((-1.0)*x2984))+(((-1.0)*x2983*(r00*r00)))+(((2.0)*x2985*x2986)))),-1);
if(!x2988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2987.value)+(((1.5707963267949)*(x2988.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2989=IKsin(j4);
IkReal x2990=IKcos(j4);
IkReal x2991=(cj5*r10);
IkReal x2992=(r01*sj5);
IkReal x2993=((1.0)*cj2);
IkReal x2994=(cj5*r00);
IkReal x2995=(cj5*r20);
IkReal x2996=((1.0)*x2990);
IkReal x2997=((1.0)*x2989);
IkReal x2998=(sj5*x2989);
evalcond[0]=((((-1.0)*x2995*x2997))+(((-1.0)*r22*x2996))+((r21*x2998)));
evalcond[1]=((((-1.0)*r12*x2996))+(((-1.0)*x2991*x2997))+((r11*x2998)));
evalcond[2]=(((x2990*x2994))+(((-1.0)*x2992*x2996))+(((-1.0)*r02*x2997)));
evalcond[3]=((-1.0)+(((-1.0)*x2994*x2997))+((x2989*x2992))+(((-1.0)*r02*x2996)));
evalcond[4]=(((x2990*x2995))+(((-1.0)*r22*x2997))+((sj1*sj2))+(((-1.0)*cj1*x2993))+(((-1.0)*r21*sj5*x2996)));
evalcond[5]=(((x2990*x2991))+(((-1.0)*sj1*x2993))+(((-1.0)*r12*x2997))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2999=((1.0)*cj5);
CheckValue<IkReal> x3000=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2999)))),-1);
if(!x3000.valid){
continue;
}
CheckValue<IkReal> x3001 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2999)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3000.value)))+(x3001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3002=IKsin(j4);
IkReal x3003=IKcos(j4);
IkReal x3004=(cj5*r10);
IkReal x3005=(r01*sj5);
IkReal x3006=((1.0)*cj2);
IkReal x3007=(cj5*r00);
IkReal x3008=(cj5*r20);
IkReal x3009=((1.0)*x3003);
IkReal x3010=((1.0)*x3002);
IkReal x3011=(sj5*x3002);
evalcond[0]=((((-1.0)*r22*x3009))+((r21*x3011))+(((-1.0)*x3008*x3010)));
evalcond[1]=((((-1.0)*x3004*x3010))+(((-1.0)*r12*x3009))+((r11*x3011)));
evalcond[2]=((((-1.0)*r02*x3010))+((x3003*x3007))+(((-1.0)*x3005*x3009)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3009))+((x3002*x3005))+(((-1.0)*x3007*x3010)));
evalcond[4]=((((-1.0)*r21*sj5*x3009))+(((-1.0)*r22*x3010))+((sj1*sj2))+((x3003*x3008))+(((-1.0)*cj1*x3006)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x3003*x3004))+(((-1.0)*r11*sj5*x3009))+(((-1.0)*r12*x3010))+(((-1.0)*sj1*x3006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3012=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3012.valid){
continue;
}
CheckValue<IkReal> x3013 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3012.value)))+(x3013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3014=IKsin(j4);
IkReal x3015=IKcos(j4);
IkReal x3016=(cj5*r10);
IkReal x3017=(r01*sj5);
IkReal x3018=((1.0)*cj2);
IkReal x3019=(cj5*r00);
IkReal x3020=(cj5*r20);
IkReal x3021=((1.0)*x3015);
IkReal x3022=((1.0)*x3014);
IkReal x3023=(sj5*x3014);
evalcond[0]=((((-1.0)*x3020*x3022))+((r21*x3023))+(((-1.0)*r22*x3021)));
evalcond[1]=((((-1.0)*r12*x3021))+((r11*x3023))+(((-1.0)*x3016*x3022)));
evalcond[2]=(((x3015*x3019))+(((-1.0)*r02*x3022))+(((-1.0)*x3017*x3021)));
evalcond[3]=((-1.0)+(((-1.0)*x3019*x3022))+(((-1.0)*r02*x3021))+((x3014*x3017)));
evalcond[4]=(((x3015*x3020))+((sj1*sj2))+(((-1.0)*cj1*x3018))+(((-1.0)*r22*x3022))+(((-1.0)*r21*sj5*x3021)));
evalcond[5]=(((x3015*x3016))+(((-1.0)*r12*x3022))+(((-1.0)*r11*sj5*x3021))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3024=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3024;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3024);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3025=((1.0)*cj5);
IkReal x3026=((((-1.0)*r21*x3025))+(((-1.0)*r20*sj5)));
j4eval[0]=x3026;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x3025)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3026);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3027=cj5*cj5;
IkReal x3028=r01*r01;
IkReal x3029=(cj5*r00);
IkReal x3030=(r01*sj5);
IkReal x3031=(x3028+((x3027*(r00*r00)))+(((-1.0)*x3027*x3028))+(((-2.0)*x3029*x3030))+(r02*r02));
j4eval[0]=x3031;
j4eval[1]=((IKabs(r02))+(IKabs((x3029+(((-1.0)*x3030))))));
j4eval[2]=IKsign(x3031);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3032=cj5*cj5;
IkReal x3033=r01*r01;
IkReal x3034=(r01*sj5);
IkReal x3035=(cj5*r00);
CheckValue<IkReal> x3036 = IKatan2WithCheck(IkReal((x3035+(((-1.0)*x3034)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3036.valid){
continue;
}
CheckValue<IkReal> x3037=IKPowWithIntegerCheck(IKsign((x3033+(((-1.0)*x3032*x3033))+((x3032*(r00*r00)))+(r02*r02)+(((-2.0)*x3034*x3035)))),-1);
if(!x3037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3036.value)+(((1.5707963267949)*(x3037.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3038=IKsin(j4);
IkReal x3039=IKcos(j4);
IkReal x3040=(cj5*r10);
IkReal x3041=(r01*sj5);
IkReal x3042=(cj5*r00);
IkReal x3043=(cj5*r20);
IkReal x3044=((1.0)*x3039);
IkReal x3045=((1.0)*x3038);
IkReal x3046=(sj5*x3038);
evalcond[0]=(((r21*x3046))+(((-1.0)*r22*x3044))+(((-1.0)*x3043*x3045)));
evalcond[1]=((((-1.0)*r12*x3044))+(((-1.0)*x3040*x3045))+((r11*x3046)));
evalcond[2]=(((x3039*x3042))+(((-1.0)*x3041*x3044))+(((-1.0)*r02*x3045)));
evalcond[3]=((1.0)+(((-1.0)*x3042*x3045))+((x3038*x3041))+(((-1.0)*r02*x3044)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x3045))+((x3039*x3040))+((cj1*sj2))+(((-1.0)*r11*sj5*x3044)));
evalcond[5]=(((x3039*x3043))+(((-1.0)*r22*x3045))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3047=((1.0)*cj5);
CheckValue<IkReal> x3048=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3047))+(((-1.0)*r20*sj5)))),-1);
if(!x3048.valid){
continue;
}
CheckValue<IkReal> x3049 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x3047))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3048.value)))+(x3049.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3050=IKsin(j4);
IkReal x3051=IKcos(j4);
IkReal x3052=(cj5*r10);
IkReal x3053=(r01*sj5);
IkReal x3054=(cj5*r00);
IkReal x3055=(cj5*r20);
IkReal x3056=((1.0)*x3051);
IkReal x3057=((1.0)*x3050);
IkReal x3058=(sj5*x3050);
evalcond[0]=((((-1.0)*x3055*x3057))+((r21*x3058))+(((-1.0)*r22*x3056)));
evalcond[1]=((((-1.0)*x3052*x3057))+((r11*x3058))+(((-1.0)*r12*x3056)));
evalcond[2]=((((-1.0)*x3053*x3056))+((x3051*x3054))+(((-1.0)*r02*x3057)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3056))+(((-1.0)*x3054*x3057))+((x3050*x3053)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x3051*x3052))+(((-1.0)*r12*x3057))+(((-1.0)*r11*sj5*x3056)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3051*x3055))+(((-1.0)*r21*sj5*x3056))+(((-1.0)*r22*x3057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3059 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3059.valid){
continue;
}
CheckValue<IkReal> x3060=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3059.value)+(((1.5707963267949)*(x3060.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3061=IKsin(j4);
IkReal x3062=IKcos(j4);
IkReal x3063=(cj5*r10);
IkReal x3064=(r01*sj5);
IkReal x3065=(cj5*r00);
IkReal x3066=(cj5*r20);
IkReal x3067=((1.0)*x3062);
IkReal x3068=((1.0)*x3061);
IkReal x3069=(sj5*x3061);
evalcond[0]=((((-1.0)*r22*x3067))+(((-1.0)*x3066*x3068))+((r21*x3069)));
evalcond[1]=((((-1.0)*x3063*x3068))+(((-1.0)*r12*x3067))+((r11*x3069)));
evalcond[2]=((((-1.0)*r02*x3068))+(((-1.0)*x3064*x3067))+((x3062*x3065)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3067))+(((-1.0)*x3065*x3068))+((x3061*x3064)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x3067))+((cj1*sj2))+(((-1.0)*r12*x3068))+((x3062*x3063)));
evalcond[5]=((((-1.0)*r21*sj5*x3067))+(((-1.0)*r22*x3068))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3062*x3066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3070=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3070);
rxp1_1=(px*r21);
rxp1_2=(r11*x3070);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3071=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3071);
rxp1_1=(px*r21);
rxp1_2=(r11*x3071);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3072=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3072);
rxp1_1=(px*r21);
rxp1_2=(r11*x3072);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3075=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3075.valid){
continue;
}
IkReal x3073=x3075.value;
IkReal x3074=(sj0*x3073);
cj4array[0]=(((cj2*sj1*x3074))+((cj1*sj2*x3074)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3076=IKsin(j4);
IkReal x3077=IKcos(j4);
IkReal x3078=(cj5*r20);
IkReal x3079=(r21*sj5);
IkReal x3080=((1.0)*x3076);
IkReal x3081=((1.0)*x3077);
evalcond[0]=((-1.0)*r02*x3076);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3081)));
evalcond[2]=(((x3076*x3079))+(((-1.0)*x3078*x3080)));
evalcond[3]=(((r11*sj5*x3076))+(((-1.0)*cj5*r10*x3080)));
evalcond[4]=((((-1.0)*x3079*x3081))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3077*x3078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3083=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3083.valid){
continue;
}
IkReal x3082=x3083.value;
cj4array[0]=(((cj1*cj2*x3082))+(((-1.0)*sj1*sj2*x3082)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3084=IKsin(j4);
IkReal x3085=IKcos(j4);
IkReal x3086=(r11*sj5);
IkReal x3087=((1.0)*sj0);
IkReal x3088=((1.0)*x3085);
IkReal x3089=((1.0)*cj5*x3084);
evalcond[0]=((-1.0)*r02*x3084);
evalcond[1]=((((-1.0)*x3087))+(((-1.0)*r02*x3088)));
evalcond[2]=((((-1.0)*r20*x3089))+((r21*sj5*x3084)));
evalcond[3]=(((x3084*x3086))+(((-1.0)*r10*x3089)));
evalcond[4]=(((cj5*r10*x3085))+(((-1.0)*cj1*sj2*x3087))+(((-1.0)*cj2*sj1*x3087))+(((-1.0)*x3086*x3088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3090=IKPowWithIntegerCheck(r02,-1);
if(!x3090.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3090.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3091=IKsin(j4);
IkReal x3092=IKcos(j4);
IkReal x3093=((1.0)*sj0);
IkReal x3094=(cj5*x3092);
IkReal x3095=(sj5*x3091);
IkReal x3096=((1.0)*sj5*x3092);
IkReal x3097=((1.0)*cj5*x3091);
evalcond[0]=((-1.0)*r02*x3091);
evalcond[1]=(((r21*x3095))+(((-1.0)*r20*x3097)));
evalcond[2]=((((-1.0)*r10*x3097))+((r11*x3095)));
evalcond[3]=(((r20*x3094))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x3096)));
evalcond[4]=((((-1.0)*r11*x3096))+((r10*x3094))+(((-1.0)*cj1*sj2*x3093))+(((-1.0)*cj2*sj1*x3093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3098=((1.0)*sj0);
IkReal x3099=((1.0)*cj0);
CheckValue<IkReal> x3100 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3099))+(((-1.0)*r12*x3098)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3099))+(((-1.0)*r11*sj5*x3098)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3100.valid){
continue;
}
CheckValue<IkReal> x3101=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3100.value)+(((1.5707963267949)*(x3101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3102=IKsin(j4);
IkReal x3103=IKcos(j4);
IkReal x3104=(cj5*r10);
IkReal x3105=(r01*sj5);
IkReal x3106=((1.0)*cj2);
IkReal x3107=(cj5*r00);
IkReal x3108=((1.0)*sj0);
IkReal x3109=(cj5*r20);
IkReal x3110=(cj1*sj2);
IkReal x3111=((1.0)*x3103);
IkReal x3112=((1.0)*x3102);
IkReal x3113=(sj5*x3102);
evalcond[0]=((((-1.0)*x3109*x3112))+((r21*x3113))+(((-1.0)*r22*x3111)));
evalcond[1]=(cj0+(((-1.0)*r12*x3111))+(((-1.0)*x3104*x3112))+((r11*x3113)));
evalcond[2]=((((-1.0)*r02*x3111))+(((-1.0)*x3108))+((x3102*x3105))+(((-1.0)*x3107*x3112)));
evalcond[3]=((((-1.0)*cj1*x3106))+((sj1*sj2))+((x3103*x3109))+(((-1.0)*r22*x3112))+(((-1.0)*r21*sj5*x3111)));
evalcond[4]=((((-1.0)*r02*x3112))+(((-1.0)*cj0*x3110))+((x3103*x3107))+(((-1.0)*x3105*x3111))+(((-1.0)*cj0*sj1*x3106)));
evalcond[5]=((((-1.0)*r12*x3112))+(((-1.0)*r11*sj5*x3111))+((x3103*x3104))+(((-1.0)*sj0*sj1*x3106))+(((-1.0)*x3108*x3110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3114=((1.0)*cj5);
CheckValue<IkReal> x3115 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3114))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3115.valid){
continue;
}
CheckValue<IkReal> x3116=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3114)))),-1);
if(!x3116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3115.value)+(((1.5707963267949)*(x3116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3117=IKsin(j4);
IkReal x3118=IKcos(j4);
IkReal x3119=(cj5*r10);
IkReal x3120=(r01*sj5);
IkReal x3121=((1.0)*cj2);
IkReal x3122=(cj5*r00);
IkReal x3123=((1.0)*sj0);
IkReal x3124=(cj5*r20);
IkReal x3125=(cj1*sj2);
IkReal x3126=((1.0)*x3118);
IkReal x3127=((1.0)*x3117);
IkReal x3128=(sj5*x3117);
evalcond[0]=((((-1.0)*x3124*x3127))+((r21*x3128))+(((-1.0)*r22*x3126)));
evalcond[1]=(cj0+(((-1.0)*r12*x3126))+((r11*x3128))+(((-1.0)*x3119*x3127)));
evalcond[2]=((((-1.0)*r02*x3126))+(((-1.0)*x3122*x3127))+(((-1.0)*x3123))+((x3117*x3120)));
evalcond[3]=((((-1.0)*r21*sj5*x3126))+((sj1*sj2))+((x3118*x3124))+(((-1.0)*cj1*x3121))+(((-1.0)*r22*x3127)));
evalcond[4]=((((-1.0)*cj0*sj1*x3121))+(((-1.0)*r02*x3127))+(((-1.0)*cj0*x3125))+((x3118*x3122))+(((-1.0)*x3120*x3126)));
evalcond[5]=(((x3118*x3119))+(((-1.0)*x3123*x3125))+(((-1.0)*r12*x3127))+(((-1.0)*r11*sj5*x3126))+(((-1.0)*sj0*sj1*x3121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3129=((1.0)*cj5);
CheckValue<IkReal> x3130=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3129)))),-1);
if(!x3130.valid){
continue;
}
CheckValue<IkReal> x3131 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3129))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3130.value)))+(x3131.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3132=IKsin(j4);
IkReal x3133=IKcos(j4);
IkReal x3134=(cj5*r10);
IkReal x3135=(r01*sj5);
IkReal x3136=((1.0)*cj2);
IkReal x3137=(cj5*r00);
IkReal x3138=((1.0)*sj0);
IkReal x3139=(cj5*r20);
IkReal x3140=(cj1*sj2);
IkReal x3141=((1.0)*x3133);
IkReal x3142=((1.0)*x3132);
IkReal x3143=(sj5*x3132);
evalcond[0]=((((-1.0)*r22*x3141))+((r21*x3143))+(((-1.0)*x3139*x3142)));
evalcond[1]=((((-1.0)*r12*x3141))+cj0+((r11*x3143))+(((-1.0)*x3134*x3142)));
evalcond[2]=(((x3132*x3135))+(((-1.0)*r02*x3141))+(((-1.0)*x3137*x3142))+(((-1.0)*x3138)));
evalcond[3]=((((-1.0)*r22*x3142))+((x3133*x3139))+((sj1*sj2))+(((-1.0)*r21*sj5*x3141))+(((-1.0)*cj1*x3136)));
evalcond[4]=((((-1.0)*cj0*sj1*x3136))+((x3133*x3137))+(((-1.0)*x3135*x3141))+(((-1.0)*r02*x3142))+(((-1.0)*cj0*x3140)));
evalcond[5]=((((-1.0)*r12*x3142))+((x3133*x3134))+(((-1.0)*x3138*x3140))+(((-1.0)*sj0*sj1*x3136))+(((-1.0)*r11*sj5*x3141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3144=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3144;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3144);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3145=r21*r21;
IkReal x3146=cj5*cj5;
IkReal x3147=(sj1*sj2);
IkReal x3148=(r21*sj5);
IkReal x3149=(cj5*r20);
IkReal x3150=(cj1*cj2);
IkReal x3151=((((2.0)*x3148*x3149))+(((-1.0)*x3145))+((x3145*x3146))+(((-1.0)*x3146*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x3151;
j4eval[1]=((IKabs((((x3149*x3150))+((x3147*x3148))+(((-1.0)*x3148*x3150))+(((-1.0)*x3147*x3149)))))+(IKabs(((((-1.0)*r22*x3150))+((r22*x3147))))));
j4eval[2]=IKsign(x3151);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3152=IKcos(j0);
IkReal x3153=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x3153))+(((0.425)*x3152)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x3152))+(((0.425)*x3153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3154=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3154;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3154);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3155=((1.0)*cj5);
IkReal x3156=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3155)));
j4eval[0]=x3156;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3155)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3156);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3157=((1.0)*cj5);
IkReal x3158=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3157)));
j4eval[0]=x3158;
j4eval[1]=IKsign(x3158);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3157)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3159=((1.0)*cj5);
CheckValue<IkReal> x3160 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3159)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3160.valid){
continue;
}
CheckValue<IkReal> x3161=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3159)))),-1);
if(!x3161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3160.value)+(((1.5707963267949)*(x3161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3162=IKcos(j4);
IkReal x3163=IKsin(j4);
IkReal x3164=((1.0)*sj0);
IkReal x3165=(cj5*r00);
IkReal x3166=(cj5*r10);
IkReal x3167=(cj5*r20);
IkReal x3168=((1.0)*x3162);
IkReal x3169=((1.0)*x3163);
IkReal x3170=(sj5*x3162);
IkReal x3171=(sj5*x3163);
evalcond[0]=(((r22*x3163))+(((-1.0)*x3167*x3168))+((r21*x3170)));
evalcond[1]=((((-1.0)*x3167*x3169))+((r21*x3171))+(((-1.0)*r22*x3168)));
evalcond[2]=((((-1.0)*r12*x3168))+((r11*x3171))+cj0+(((-1.0)*x3166*x3169)));
evalcond[3]=(((r02*x3163))+(((-1.0)*x3165*x3168))+((r01*x3170))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3170))+((r12*x3163))+(((-1.0)*x3166*x3168))+(((-1.0)*x3164)));
evalcond[5]=((((-1.0)*x3165*x3169))+(((-1.0)*r02*x3168))+((r01*x3171))+(((-1.0)*x3164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3172=((1.0)*cj5);
CheckValue<IkReal> x3173 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3172)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3173.valid){
continue;
}
CheckValue<IkReal> x3174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3172)))),-1);
if(!x3174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3173.value)+(((1.5707963267949)*(x3174.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3175=IKcos(j4);
IkReal x3176=IKsin(j4);
IkReal x3177=((1.0)*sj0);
IkReal x3178=(cj5*r00);
IkReal x3179=(cj5*r10);
IkReal x3180=(cj5*r20);
IkReal x3181=((1.0)*x3175);
IkReal x3182=((1.0)*x3176);
IkReal x3183=(sj5*x3175);
IkReal x3184=(sj5*x3176);
evalcond[0]=((((-1.0)*x3180*x3181))+((r22*x3176))+((r21*x3183)));
evalcond[1]=((((-1.0)*x3180*x3182))+(((-1.0)*r22*x3181))+((r21*x3184)));
evalcond[2]=(cj0+(((-1.0)*x3179*x3182))+((r11*x3184))+(((-1.0)*r12*x3181)));
evalcond[3]=(((r01*x3183))+((r02*x3176))+(((-1.0)*x3178*x3181))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3179*x3181))+(((-1.0)*x3177))+((r11*x3183))+((r12*x3176)));
evalcond[5]=((((-1.0)*r02*x3181))+((r01*x3184))+(((-1.0)*x3177))+(((-1.0)*x3178*x3182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3185 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3185.valid){
continue;
}
CheckValue<IkReal> x3186=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3185.value)+(((1.5707963267949)*(x3186.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3187=IKcos(j4);
IkReal x3188=IKsin(j4);
IkReal x3189=((1.0)*sj0);
IkReal x3190=(cj5*r00);
IkReal x3191=(cj5*r10);
IkReal x3192=(cj5*r20);
IkReal x3193=((1.0)*x3187);
IkReal x3194=((1.0)*x3188);
IkReal x3195=(sj5*x3187);
IkReal x3196=(sj5*x3188);
evalcond[0]=(((r22*x3188))+((r21*x3195))+(((-1.0)*x3192*x3193)));
evalcond[1]=((((-1.0)*r22*x3193))+((r21*x3196))+(((-1.0)*x3192*x3194)));
evalcond[2]=(cj0+(((-1.0)*x3191*x3194))+((r11*x3196))+(((-1.0)*r12*x3193)));
evalcond[3]=((((-1.0)*x3190*x3193))+((r01*x3195))+(((-1.0)*cj0))+((r02*x3188)));
evalcond[4]=((((-1.0)*x3191*x3193))+((r12*x3188))+((r11*x3195))+(((-1.0)*x3189)));
evalcond[5]=((((-1.0)*x3190*x3194))+((r01*x3196))+(((-1.0)*r02*x3193))+(((-1.0)*x3189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3197=IKcos(j0);
IkReal x3198=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.425)*x3197))+(((-0.134)*x3198)));
evalcond[1]=((((0.134)*x3197))+(((-1.0)*py))+(((0.425)*x3198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3199=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3199;
j4eval[1]=IKsign(x3199);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3200=((1.0)*cj5);
IkReal x3201=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3200)));
j4eval[0]=x3201;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3200))))));
j4eval[2]=IKsign(x3201);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3202=cj5*cj5;
IkReal x3203=((1.0)*r20);
IkReal x3204=(r01*r21);
IkReal x3205=(r21*sj5);
IkReal x3206=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3204))+((x3202*x3204))+((cj5*r00*x3205))+(((-1.0)*r00*x3202*x3203)));
j4eval[0]=x3206;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3205))+(((-1.0)*cj0*cj5*x3203))))));
j4eval[2]=IKsign(x3206);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3207=cj5*cj5;
IkReal x3208=((1.0)*r20);
IkReal x3209=(r01*r21);
IkReal x3210=(r21*sj5);
CheckValue<IkReal> x3211 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3208))+((cj0*x3210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3211.valid){
continue;
}
CheckValue<IkReal> x3212=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x3210))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3207*x3208))+((x3207*x3209))+(((-1.0)*x3209)))),-1);
if(!x3212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3211.value)+(((1.5707963267949)*(x3212.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3213=IKcos(j4);
IkReal x3214=IKsin(j4);
IkReal x3215=(cj5*r00);
IkReal x3216=(cj5*r10);
IkReal x3217=(cj5*r20);
IkReal x3218=((1.0)*x3213);
IkReal x3219=((1.0)*x3214);
IkReal x3220=(sj5*x3213);
IkReal x3221=(sj5*x3214);
evalcond[0]=(((r22*x3214))+(((-1.0)*x3217*x3218))+((r21*x3220)));
evalcond[1]=((((-1.0)*x3217*x3219))+((r21*x3221))+(((-1.0)*r22*x3218)));
evalcond[2]=(cj0+(((-1.0)*x3215*x3218))+((r01*x3220))+((r02*x3214)));
evalcond[3]=(sj0+((r11*x3220))+((r12*x3214))+(((-1.0)*x3216*x3218)));
evalcond[4]=(cj0+((r11*x3221))+(((-1.0)*x3216*x3219))+(((-1.0)*r12*x3218)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3215*x3219))+((r01*x3221))+(((-1.0)*r02*x3218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3222=((1.0)*cj5);
CheckValue<IkReal> x3223 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3222)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3223.valid){
continue;
}
CheckValue<IkReal> x3224=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3222)))),-1);
if(!x3224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3223.value)+(((1.5707963267949)*(x3224.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3225=IKcos(j4);
IkReal x3226=IKsin(j4);
IkReal x3227=(cj5*r00);
IkReal x3228=(cj5*r10);
IkReal x3229=(cj5*r20);
IkReal x3230=((1.0)*x3225);
IkReal x3231=((1.0)*x3226);
IkReal x3232=(sj5*x3225);
IkReal x3233=(sj5*x3226);
evalcond[0]=((((-1.0)*x3229*x3230))+((r22*x3226))+((r21*x3232)));
evalcond[1]=((((-1.0)*x3229*x3231))+(((-1.0)*r22*x3230))+((r21*x3233)));
evalcond[2]=(cj0+((r02*x3226))+((r01*x3232))+(((-1.0)*x3227*x3230)));
evalcond[3]=(((r12*x3226))+sj0+(((-1.0)*x3228*x3230))+((r11*x3232)));
evalcond[4]=(cj0+(((-1.0)*x3228*x3231))+((r11*x3233))+(((-1.0)*r12*x3230)));
evalcond[5]=((((-1.0)*r02*x3230))+(((-1.0)*sj0))+((r01*x3233))+(((-1.0)*x3227*x3231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3234 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3234.valid){
continue;
}
CheckValue<IkReal> x3235=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3234.value)+(((1.5707963267949)*(x3235.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3236=IKcos(j4);
IkReal x3237=IKsin(j4);
IkReal x3238=(cj5*r00);
IkReal x3239=(cj5*r10);
IkReal x3240=(cj5*r20);
IkReal x3241=((1.0)*x3236);
IkReal x3242=((1.0)*x3237);
IkReal x3243=(sj5*x3236);
IkReal x3244=(sj5*x3237);
evalcond[0]=(((r21*x3243))+((r22*x3237))+(((-1.0)*x3240*x3241)));
evalcond[1]=(((r21*x3244))+(((-1.0)*x3240*x3242))+(((-1.0)*r22*x3241)));
evalcond[2]=(((r01*x3243))+cj0+(((-1.0)*x3238*x3241))+((r02*x3237)));
evalcond[3]=((((-1.0)*x3239*x3241))+sj0+((r12*x3237))+((r11*x3243)));
evalcond[4]=((((-1.0)*x3239*x3242))+cj0+(((-1.0)*r12*x3241))+((r11*x3244)));
evalcond[5]=(((r01*x3244))+(((-1.0)*sj0))+(((-1.0)*x3238*x3242))+(((-1.0)*r02*x3241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3245=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3245;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3245);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3246=((1.0)*cj5);
IkReal x3247=((((-1.0)*r01*x3246))+(((-1.0)*r00*sj5)));
j4eval[0]=x3247;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3246)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3247);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3248=((1.0)*cj5);
IkReal x3249=((((-1.0)*r01*x3248))+(((-1.0)*r00*sj5)));
j4eval[0]=x3249;
j4eval[1]=IKsign(x3249);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3248))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3250=((1.0)*cj5);
CheckValue<IkReal> x3251=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3250)))),-1);
if(!x3251.valid){
continue;
}
CheckValue<IkReal> x3252 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3250))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3251.value)))+(x3252.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3253=IKcos(j4);
IkReal x3254=IKsin(j4);
IkReal x3255=((1.0)*sj0);
IkReal x3256=(cj5*r00);
IkReal x3257=(cj5*r10);
IkReal x3258=(cj5*r20);
IkReal x3259=((1.0)*x3253);
IkReal x3260=((1.0)*x3254);
IkReal x3261=(sj5*x3253);
IkReal x3262=(sj5*x3254);
evalcond[0]=(((r21*x3261))+(((-1.0)*x3258*x3259))+((r22*x3254)));
evalcond[1]=(((r21*x3262))+(((-1.0)*r22*x3259))+(((-1.0)*x3258*x3260)));
evalcond[2]=((((-1.0)*x3257*x3260))+cj0+((r11*x3262))+(((-1.0)*r12*x3259)));
evalcond[3]=(((r01*x3261))+((r02*x3254))+(((-1.0)*x3256*x3259))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3254))+(((-1.0)*x3257*x3259))+((r11*x3261))+(((-1.0)*x3255)));
evalcond[5]=((((-1.0)*r02*x3259))+((r01*x3262))+(((-1.0)*x3256*x3260))+(((-1.0)*x3255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3263=((1.0)*cj5);
CheckValue<IkReal> x3264 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3263))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3264.valid){
continue;
}
CheckValue<IkReal> x3265=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3263)))),-1);
if(!x3265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3264.value)+(((1.5707963267949)*(x3265.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3266=IKcos(j4);
IkReal x3267=IKsin(j4);
IkReal x3268=((1.0)*sj0);
IkReal x3269=(cj5*r00);
IkReal x3270=(cj5*r10);
IkReal x3271=(cj5*r20);
IkReal x3272=((1.0)*x3266);
IkReal x3273=((1.0)*x3267);
IkReal x3274=(sj5*x3266);
IkReal x3275=(sj5*x3267);
evalcond[0]=(((r21*x3274))+(((-1.0)*x3271*x3272))+((r22*x3267)));
evalcond[1]=(((r21*x3275))+(((-1.0)*x3271*x3273))+(((-1.0)*r22*x3272)));
evalcond[2]=((((-1.0)*r12*x3272))+cj0+((r11*x3275))+(((-1.0)*x3270*x3273)));
evalcond[3]=(((r01*x3274))+((r02*x3267))+(((-1.0)*x3269*x3272))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3268))+((r11*x3274))+((r12*x3267))+(((-1.0)*x3270*x3272)));
evalcond[5]=(((r01*x3275))+(((-1.0)*x3268))+(((-1.0)*x3269*x3273))+(((-1.0)*r02*x3272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3276 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3276.valid){
continue;
}
CheckValue<IkReal> x3277=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3276.value)+(((1.5707963267949)*(x3277.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3278=IKcos(j4);
IkReal x3279=IKsin(j4);
IkReal x3280=((1.0)*sj0);
IkReal x3281=(cj5*r00);
IkReal x3282=(cj5*r10);
IkReal x3283=(cj5*r20);
IkReal x3284=((1.0)*x3278);
IkReal x3285=((1.0)*x3279);
IkReal x3286=(sj5*x3278);
IkReal x3287=(sj5*x3279);
evalcond[0]=((((-1.0)*x3283*x3284))+((r21*x3286))+((r22*x3279)));
evalcond[1]=((((-1.0)*r22*x3284))+(((-1.0)*x3283*x3285))+((r21*x3287)));
evalcond[2]=((((-1.0)*r12*x3284))+cj0+(((-1.0)*x3282*x3285))+((r11*x3287)));
evalcond[3]=((((-1.0)*x3281*x3284))+((r02*x3279))+(((-1.0)*cj0))+((r01*x3286)));
evalcond[4]=((((-1.0)*x3280))+(((-1.0)*x3282*x3284))+((r12*x3279))+((r11*x3286)));
evalcond[5]=((((-1.0)*x3280))+(((-1.0)*x3281*x3285))+(((-1.0)*r02*x3284))+((r01*x3287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3288=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3288;
j4eval[1]=IKsign(x3288);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3289=((1.0)*cj5);
IkReal x3290=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3289)));
j4eval[0]=x3290;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3289))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3290);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3291=cj5*cj5;
IkReal x3292=((1.0)*r20);
IkReal x3293=(r01*r21);
IkReal x3294=(r21*sj5);
IkReal x3295=((((-1.0)*r00*x3291*x3292))+((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3291*x3293))+((cj5*r00*x3294))+(((-1.0)*x3293)));
j4eval[0]=x3295;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x3292))+((cj0*x3294))))));
j4eval[2]=IKsign(x3295);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3296=cj5*cj5;
IkReal x3297=((1.0)*r20);
IkReal x3298=(r01*r21);
IkReal x3299=(r21*sj5);
CheckValue<IkReal> x3300 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3297))+((cj0*x3299)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3300.valid){
continue;
}
CheckValue<IkReal> x3301=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3296*x3298))+(((-1.0)*r00*x3296*x3297))+((cj5*r00*x3299))+(((-1.0)*x3298)))),-1);
if(!x3301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3300.value)+(((1.5707963267949)*(x3301.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3302=IKcos(j4);
IkReal x3303=IKsin(j4);
IkReal x3304=(cj5*r00);
IkReal x3305=(cj5*r10);
IkReal x3306=(cj5*r20);
IkReal x3307=((1.0)*x3302);
IkReal x3308=((1.0)*x3303);
IkReal x3309=(sj5*x3302);
IkReal x3310=(sj5*x3303);
evalcond[0]=(((r21*x3309))+((r22*x3303))+(((-1.0)*x3306*x3307)));
evalcond[1]=(((r21*x3310))+(((-1.0)*r22*x3307))+(((-1.0)*x3306*x3308)));
evalcond[2]=((((-1.0)*x3304*x3307))+cj0+((r02*x3303))+((r01*x3309)));
evalcond[3]=(sj0+(((-1.0)*x3305*x3307))+((r11*x3309))+((r12*x3303)));
evalcond[4]=(cj0+(((-1.0)*x3305*x3308))+((r11*x3310))+(((-1.0)*r12*x3307)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3304*x3308))+(((-1.0)*r02*x3307))+((r01*x3310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3311=((1.0)*cj5);
CheckValue<IkReal> x3312=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3311)))),-1);
if(!x3312.valid){
continue;
}
CheckValue<IkReal> x3313 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3311)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3312.value)))+(x3313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3314=IKcos(j4);
IkReal x3315=IKsin(j4);
IkReal x3316=(cj5*r00);
IkReal x3317=(cj5*r10);
IkReal x3318=(cj5*r20);
IkReal x3319=((1.0)*x3314);
IkReal x3320=((1.0)*x3315);
IkReal x3321=(sj5*x3314);
IkReal x3322=(sj5*x3315);
evalcond[0]=((((-1.0)*x3318*x3319))+((r22*x3315))+((r21*x3321)));
evalcond[1]=((((-1.0)*r22*x3319))+((r21*x3322))+(((-1.0)*x3318*x3320)));
evalcond[2]=(cj0+((r01*x3321))+((r02*x3315))+(((-1.0)*x3316*x3319)));
evalcond[3]=(sj0+((r11*x3321))+(((-1.0)*x3317*x3319))+((r12*x3315)));
evalcond[4]=(cj0+((r11*x3322))+(((-1.0)*x3317*x3320))+(((-1.0)*r12*x3319)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3322))+(((-1.0)*r02*x3319))+(((-1.0)*x3316*x3320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3323 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3323.valid){
continue;
}
CheckValue<IkReal> x3324=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3323.value)+(((1.5707963267949)*(x3324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3325=IKcos(j4);
IkReal x3326=IKsin(j4);
IkReal x3327=(cj5*r00);
IkReal x3328=(cj5*r10);
IkReal x3329=(cj5*r20);
IkReal x3330=((1.0)*x3325);
IkReal x3331=((1.0)*x3326);
IkReal x3332=(sj5*x3325);
IkReal x3333=(sj5*x3326);
evalcond[0]=(((r22*x3326))+((r21*x3332))+(((-1.0)*x3329*x3330)));
evalcond[1]=(((r21*x3333))+(((-1.0)*r22*x3330))+(((-1.0)*x3329*x3331)));
evalcond[2]=(cj0+((r01*x3332))+((r02*x3326))+(((-1.0)*x3327*x3330)));
evalcond[3]=(((r12*x3326))+sj0+((r11*x3332))+(((-1.0)*x3328*x3330)));
evalcond[4]=(cj0+((r11*x3333))+(((-1.0)*x3328*x3331))+(((-1.0)*r12*x3330)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3330))+((r01*x3333))+(((-1.0)*x3327*x3331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3334=IKcos(j0);
IkReal x3335=IKsin(j0);
evalcond[0]=((((-0.425)*x3334))+(((-0.134)*x3335))+(((-1.0)*px)));
evalcond[1]=((((-0.425)*x3335))+(((0.134)*x3334))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3336=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3336;
j4eval[1]=IKsign(x3336);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3337=((1.0)*cj5);
IkReal x3338=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3337)));
j4eval[0]=x3338;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3337))))));
j4eval[2]=IKsign(x3338);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3339=cj5*cj5;
IkReal x3340=((1.0)*r20);
IkReal x3341=(r01*r21);
IkReal x3342=(r21*sj5);
IkReal x3343=(((cj5*r01*r20*sj5))+(((-1.0)*x3341))+(((-1.0)*r02*r22))+((cj5*r00*x3342))+(((-1.0)*r00*x3339*x3340))+((x3339*x3341)));
j4eval[0]=x3343;
j4eval[1]=((IKabs((((cj0*x3342))+(((-1.0)*cj0*cj5*x3340)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3343);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3344=cj5*cj5;
IkReal x3345=((1.0)*r20);
IkReal x3346=(r01*r21);
IkReal x3347=(r21*sj5);
CheckValue<IkReal> x3348=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x3344*x3346))+(((-1.0)*x3346))+(((-1.0)*r02*r22))+((cj5*r00*x3347))+(((-1.0)*r00*x3344*x3345)))),-1);
if(!x3348.valid){
continue;
}
CheckValue<IkReal> x3349 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3347))+(((-1.0)*cj0*cj5*x3345)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3348.value)))+(x3349.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3350=IKcos(j4);
IkReal x3351=IKsin(j4);
IkReal x3352=(cj5*r00);
IkReal x3353=(cj5*r10);
IkReal x3354=(cj5*r20);
IkReal x3355=((1.0)*x3350);
IkReal x3356=((1.0)*x3351);
IkReal x3357=(sj5*x3350);
IkReal x3358=(sj5*x3351);
evalcond[0]=((((-1.0)*x3354*x3355))+((r21*x3357))+((r22*x3351)));
evalcond[1]=((((-1.0)*x3354*x3356))+((r21*x3358))+(((-1.0)*r22*x3355)));
evalcond[2]=((((-1.0)*x3352*x3355))+cj0+((r01*x3357))+((r02*x3351)));
evalcond[3]=(((r12*x3351))+sj0+((r11*x3357))+(((-1.0)*x3353*x3355)));
evalcond[4]=(cj0+((r11*x3358))+(((-1.0)*x3353*x3356))+(((-1.0)*r12*x3355)));
evalcond[5]=((((-1.0)*x3352*x3356))+(((-1.0)*sj0))+(((-1.0)*r02*x3355))+((r01*x3358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3359=((1.0)*cj5);
CheckValue<IkReal> x3360 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3359)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3360.valid){
continue;
}
CheckValue<IkReal> x3361=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3359)))),-1);
if(!x3361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3360.value)+(((1.5707963267949)*(x3361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3362=IKcos(j4);
IkReal x3363=IKsin(j4);
IkReal x3364=(cj5*r00);
IkReal x3365=(cj5*r10);
IkReal x3366=(cj5*r20);
IkReal x3367=((1.0)*x3362);
IkReal x3368=((1.0)*x3363);
IkReal x3369=(sj5*x3362);
IkReal x3370=(sj5*x3363);
evalcond[0]=(((r22*x3363))+((r21*x3369))+(((-1.0)*x3366*x3367)));
evalcond[1]=((((-1.0)*r22*x3367))+((r21*x3370))+(((-1.0)*x3366*x3368)));
evalcond[2]=(((r02*x3363))+cj0+((r01*x3369))+(((-1.0)*x3364*x3367)));
evalcond[3]=(sj0+(((-1.0)*x3365*x3367))+((r12*x3363))+((r11*x3369)));
evalcond[4]=((((-1.0)*r12*x3367))+cj0+(((-1.0)*x3365*x3368))+((r11*x3370)));
evalcond[5]=(((r01*x3370))+(((-1.0)*sj0))+(((-1.0)*r02*x3367))+(((-1.0)*x3364*x3368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3371 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3371.valid){
continue;
}
CheckValue<IkReal> x3372=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3371.value)+(((1.5707963267949)*(x3372.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3373=IKcos(j4);
IkReal x3374=IKsin(j4);
IkReal x3375=(cj5*r00);
IkReal x3376=(cj5*r10);
IkReal x3377=(cj5*r20);
IkReal x3378=((1.0)*x3373);
IkReal x3379=((1.0)*x3374);
IkReal x3380=(sj5*x3373);
IkReal x3381=(sj5*x3374);
evalcond[0]=(((r22*x3374))+((r21*x3380))+(((-1.0)*x3377*x3378)));
evalcond[1]=((((-1.0)*r22*x3378))+((r21*x3381))+(((-1.0)*x3377*x3379)));
evalcond[2]=(((r01*x3380))+cj0+((r02*x3374))+(((-1.0)*x3375*x3378)));
evalcond[3]=(((r12*x3374))+sj0+(((-1.0)*x3376*x3378))+((r11*x3380)));
evalcond[4]=(cj0+(((-1.0)*x3376*x3379))+(((-1.0)*r12*x3378))+((r11*x3381)));
evalcond[5]=(((r01*x3381))+(((-1.0)*sj0))+(((-1.0)*x3375*x3379))+(((-1.0)*r02*x3378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3382=IKcos(j0);
IkReal x3383=IKsin(j0);
evalcond[0]=((((-0.425)*x3382))+(((-1.0)*px))+(((-0.134)*x3383)));
evalcond[1]=((((-0.425)*x3383))+(((0.134)*x3382))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3384=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3384;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3384);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3385=((1.0)*cj5);
IkReal x3386=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3385)));
j4eval[0]=x3386;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3385)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3386);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3387=((1.0)*cj5);
IkReal x3388=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3387)));
j4eval[0]=x3388;
j4eval[1]=IKsign(x3388);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3387))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3389=((1.0)*cj5);
CheckValue<IkReal> x3390=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3389)))),-1);
if(!x3390.valid){
continue;
}
CheckValue<IkReal> x3391 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3389)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3390.value)))+(x3391.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3392=IKcos(j4);
IkReal x3393=IKsin(j4);
IkReal x3394=((1.0)*sj0);
IkReal x3395=(cj5*r00);
IkReal x3396=(cj5*r10);
IkReal x3397=(cj5*r20);
IkReal x3398=((1.0)*x3392);
IkReal x3399=((1.0)*x3393);
IkReal x3400=(sj5*x3392);
IkReal x3401=(sj5*x3393);
evalcond[0]=(((r21*x3400))+((r22*x3393))+(((-1.0)*x3397*x3398)));
evalcond[1]=((((-1.0)*r22*x3398))+((r21*x3401))+(((-1.0)*x3397*x3399)));
evalcond[2]=(cj0+(((-1.0)*x3396*x3399))+((r11*x3401))+(((-1.0)*r12*x3398)));
evalcond[3]=((((-1.0)*x3395*x3398))+((r02*x3393))+((r01*x3400))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3396*x3398))+((r11*x3400))+(((-1.0)*x3394))+((r12*x3393)));
evalcond[5]=((((-1.0)*x3395*x3399))+(((-1.0)*r02*x3398))+(((-1.0)*x3394))+((r01*x3401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3402=((1.0)*cj5);
CheckValue<IkReal> x3403=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3402))+(((-1.0)*r00*sj5)))),-1);
if(!x3403.valid){
continue;
}
CheckValue<IkReal> x3404 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3403.value)))+(x3404.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3405=IKcos(j4);
IkReal x3406=IKsin(j4);
IkReal x3407=((1.0)*sj0);
IkReal x3408=(cj5*r00);
IkReal x3409=(cj5*r10);
IkReal x3410=(cj5*r20);
IkReal x3411=((1.0)*x3405);
IkReal x3412=((1.0)*x3406);
IkReal x3413=(sj5*x3405);
IkReal x3414=(sj5*x3406);
evalcond[0]=(((r22*x3406))+((r21*x3413))+(((-1.0)*x3410*x3411)));
evalcond[1]=((((-1.0)*r22*x3411))+((r21*x3414))+(((-1.0)*x3410*x3412)));
evalcond[2]=(cj0+((r11*x3414))+(((-1.0)*r12*x3411))+(((-1.0)*x3409*x3412)));
evalcond[3]=(((r02*x3406))+(((-1.0)*x3408*x3411))+((r01*x3413))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3413))+((r12*x3406))+(((-1.0)*x3409*x3411))+(((-1.0)*x3407)));
evalcond[5]=((((-1.0)*r02*x3411))+(((-1.0)*x3408*x3412))+((r01*x3414))+(((-1.0)*x3407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3415 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3415.valid){
continue;
}
CheckValue<IkReal> x3416=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3415.value)+(((1.5707963267949)*(x3416.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3417=IKcos(j4);
IkReal x3418=IKsin(j4);
IkReal x3419=((1.0)*sj0);
IkReal x3420=(cj5*r00);
IkReal x3421=(cj5*r10);
IkReal x3422=(cj5*r20);
IkReal x3423=((1.0)*x3417);
IkReal x3424=((1.0)*x3418);
IkReal x3425=(sj5*x3417);
IkReal x3426=(sj5*x3418);
evalcond[0]=(((r22*x3418))+((r21*x3425))+(((-1.0)*x3422*x3423)));
evalcond[1]=((((-1.0)*r22*x3423))+((r21*x3426))+(((-1.0)*x3422*x3424)));
evalcond[2]=((((-1.0)*r12*x3423))+cj0+(((-1.0)*x3421*x3424))+((r11*x3426)));
evalcond[3]=((((-1.0)*x3420*x3423))+((r02*x3418))+(((-1.0)*cj0))+((r01*x3425)));
evalcond[4]=(((r12*x3418))+(((-1.0)*x3421*x3423))+((r11*x3425))+(((-1.0)*x3419)));
evalcond[5]=((((-1.0)*x3420*x3424))+(((-1.0)*r02*x3423))+((r01*x3426))+(((-1.0)*x3419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3427=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3427;
j4eval[1]=IKsign(x3427);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3428=((1.0)*cj5);
IkReal x3429=((((-1.0)*r11*x3428))+(((-1.0)*r10*sj5)));
j4eval[0]=x3429;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3428)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3429);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3430=cj5*cj5;
IkReal x3431=((1.0)*r20);
IkReal x3432=(r01*r21);
IkReal x3433=(r21*sj5);
IkReal x3434=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3433))+((x3430*x3432))+(((-1.0)*r00*x3430*x3431))+(((-1.0)*x3432)));
j4eval[0]=x3434;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3433))+(((-1.0)*cj0*cj5*x3431))))));
j4eval[2]=IKsign(x3434);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3435=cj5*cj5;
IkReal x3436=((1.0)*r20);
IkReal x3437=(r01*r21);
IkReal x3438=(r21*sj5);
CheckValue<IkReal> x3439=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3435*x3437))+((cj5*r00*x3438))+(((-1.0)*r00*x3435*x3436))+(((-1.0)*x3437)))),-1);
if(!x3439.valid){
continue;
}
CheckValue<IkReal> x3440 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3438))+(((-1.0)*cj0*cj5*x3436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3439.value)))+(x3440.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3441=IKcos(j4);
IkReal x3442=IKsin(j4);
IkReal x3443=(cj5*r00);
IkReal x3444=(cj5*r10);
IkReal x3445=(cj5*r20);
IkReal x3446=((1.0)*x3441);
IkReal x3447=((1.0)*x3442);
IkReal x3448=(sj5*x3441);
IkReal x3449=(sj5*x3442);
evalcond[0]=(((r21*x3448))+((r22*x3442))+(((-1.0)*x3445*x3446)));
evalcond[1]=(((r21*x3449))+(((-1.0)*r22*x3446))+(((-1.0)*x3445*x3447)));
evalcond[2]=(cj0+((r02*x3442))+(((-1.0)*x3443*x3446))+((r01*x3448)));
evalcond[3]=(((r11*x3448))+sj0+((r12*x3442))+(((-1.0)*x3444*x3446)));
evalcond[4]=(((r11*x3449))+cj0+(((-1.0)*x3444*x3447))+(((-1.0)*r12*x3446)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3443*x3447))+(((-1.0)*r02*x3446))+((r01*x3449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3450=((1.0)*cj5);
CheckValue<IkReal> x3451 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3450))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3451.valid){
continue;
}
CheckValue<IkReal> x3452=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3450)))),-1);
if(!x3452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3451.value)+(((1.5707963267949)*(x3452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3453=IKcos(j4);
IkReal x3454=IKsin(j4);
IkReal x3455=(cj5*r00);
IkReal x3456=(cj5*r10);
IkReal x3457=(cj5*r20);
IkReal x3458=((1.0)*x3453);
IkReal x3459=((1.0)*x3454);
IkReal x3460=(sj5*x3453);
IkReal x3461=(sj5*x3454);
evalcond[0]=((((-1.0)*x3457*x3458))+((r22*x3454))+((r21*x3460)));
evalcond[1]=((((-1.0)*x3457*x3459))+((r21*x3461))+(((-1.0)*r22*x3458)));
evalcond[2]=(cj0+((r01*x3460))+((r02*x3454))+(((-1.0)*x3455*x3458)));
evalcond[3]=(sj0+((r12*x3454))+((r11*x3460))+(((-1.0)*x3456*x3458)));
evalcond[4]=(cj0+((r11*x3461))+(((-1.0)*r12*x3458))+(((-1.0)*x3456*x3459)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3461))+(((-1.0)*x3455*x3459))+(((-1.0)*r02*x3458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3462 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3462.valid){
continue;
}
CheckValue<IkReal> x3463=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3462.value)+(((1.5707963267949)*(x3463.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3464=IKcos(j4);
IkReal x3465=IKsin(j4);
IkReal x3466=(cj5*r00);
IkReal x3467=(cj5*r10);
IkReal x3468=(cj5*r20);
IkReal x3469=((1.0)*x3464);
IkReal x3470=((1.0)*x3465);
IkReal x3471=(sj5*x3464);
IkReal x3472=(sj5*x3465);
evalcond[0]=(((r21*x3471))+(((-1.0)*x3468*x3469))+((r22*x3465)));
evalcond[1]=((((-1.0)*r22*x3469))+((r21*x3472))+(((-1.0)*x3468*x3470)));
evalcond[2]=(cj0+((r01*x3471))+((r02*x3465))+(((-1.0)*x3466*x3469)));
evalcond[3]=(sj0+(((-1.0)*x3467*x3469))+((r12*x3465))+((r11*x3471)));
evalcond[4]=((((-1.0)*x3467*x3470))+cj0+(((-1.0)*r12*x3469))+((r11*x3472)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3469))+((r01*x3472))+(((-1.0)*x3466*x3470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3473=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3473;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3473);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3474=((1.0)*cj5);
IkReal x3475=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3474)));
j4eval[0]=x3475;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3474))))));
j4eval[2]=IKsign(x3475);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3476=((1.0)*cj5);
IkReal x3477=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3476)));
j4eval[0]=x3477;
j4eval[1]=IKsign(x3477);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x3476))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3478=((1.0)*cj5);
CheckValue<IkReal> x3479 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3478))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3479.valid){
continue;
}
CheckValue<IkReal> x3480=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3478)))),-1);
if(!x3480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3479.value)+(((1.5707963267949)*(x3480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3481=IKcos(j4);
IkReal x3482=IKsin(j4);
IkReal x3483=((1.0)*sj0);
IkReal x3484=(cj5*r00);
IkReal x3485=(cj5*r10);
IkReal x3486=(cj5*r20);
IkReal x3487=((1.0)*x3481);
IkReal x3488=((1.0)*x3482);
IkReal x3489=(sj5*x3481);
IkReal x3490=(sj5*x3482);
evalcond[0]=(((r21*x3489))+((r22*x3482))+(((-1.0)*x3486*x3487)));
evalcond[1]=((((-1.0)*r22*x3487))+((r21*x3490))+(((-1.0)*x3486*x3488)));
evalcond[2]=(cj0+(((-1.0)*x3485*x3488))+(((-1.0)*r12*x3487))+((r11*x3490)));
evalcond[3]=(((r01*x3489))+(((-1.0)*x3484*x3487))+((r02*x3482))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3485*x3487))+((r12*x3482))+((r11*x3489))+(((-1.0)*x3483)));
evalcond[5]=(((r01*x3490))+(((-1.0)*r02*x3487))+(((-1.0)*x3484*x3488))+(((-1.0)*x3483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3491=((1.0)*cj5);
CheckValue<IkReal> x3492=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3491)))),-1);
if(!x3492.valid){
continue;
}
CheckValue<IkReal> x3493 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3491)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3492.value)))+(x3493.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3494=IKcos(j4);
IkReal x3495=IKsin(j4);
IkReal x3496=((1.0)*sj0);
IkReal x3497=(cj5*r00);
IkReal x3498=(cj5*r10);
IkReal x3499=(cj5*r20);
IkReal x3500=((1.0)*x3494);
IkReal x3501=((1.0)*x3495);
IkReal x3502=(sj5*x3494);
IkReal x3503=(sj5*x3495);
evalcond[0]=(((r22*x3495))+(((-1.0)*x3499*x3500))+((r21*x3502)));
evalcond[1]=((((-1.0)*r22*x3500))+(((-1.0)*x3499*x3501))+((r21*x3503)));
evalcond[2]=((((-1.0)*r12*x3500))+cj0+(((-1.0)*x3498*x3501))+((r11*x3503)));
evalcond[3]=(((r01*x3502))+((r02*x3495))+(((-1.0)*x3497*x3500))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3496))+(((-1.0)*x3498*x3500))+((r11*x3502))+((r12*x3495)));
evalcond[5]=(((r01*x3503))+(((-1.0)*x3496))+(((-1.0)*r02*x3500))+(((-1.0)*x3497*x3501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3504 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3504.valid){
continue;
}
CheckValue<IkReal> x3505=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3504.value)+(((1.5707963267949)*(x3505.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3506=IKcos(j4);
IkReal x3507=IKsin(j4);
IkReal x3508=((1.0)*sj0);
IkReal x3509=(cj5*r00);
IkReal x3510=(cj5*r10);
IkReal x3511=(cj5*r20);
IkReal x3512=((1.0)*x3506);
IkReal x3513=((1.0)*x3507);
IkReal x3514=(sj5*x3506);
IkReal x3515=(sj5*x3507);
evalcond[0]=(((r21*x3514))+(((-1.0)*x3511*x3512))+((r22*x3507)));
evalcond[1]=(((r21*x3515))+(((-1.0)*x3511*x3513))+(((-1.0)*r22*x3512)));
evalcond[2]=(cj0+(((-1.0)*x3510*x3513))+((r11*x3515))+(((-1.0)*r12*x3512)));
evalcond[3]=((((-1.0)*x3509*x3512))+((r01*x3514))+((r02*x3507))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3508))+(((-1.0)*x3510*x3512))+((r12*x3507))+((r11*x3514)));
evalcond[5]=((((-1.0)*r02*x3512))+(((-1.0)*x3509*x3513))+((r01*x3515))+(((-1.0)*x3508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3516=(sj1*sj2);
IkReal x3517=(r00*sj5);
IkReal x3518=(cj5*r01);
IkReal x3519=((212.5)*cj1);
IkReal x3520=(cj1*cj2);
IkReal x3521=((500.0)*px);
IkReal x3522=((246.0)*x3520);
CheckValue<IkReal> x3523=IKPowWithIntegerCheck(((((-67.0)*x3520))+(((67.0)*x3516))),-1);
if(!x3523.valid){
continue;
}
CheckValue<IkReal> x3524=IKPowWithIntegerCheck(((((-1.0)*x3520))+x3516),-1);
if(!x3524.valid){
continue;
}
if( IKabs(((x3523.value)*(((((-246.0)*x3516*x3517))+(((-246.0)*x3516*x3518))+((x3517*x3522))+((x3517*x3519))+((x3520*x3521))+((x3518*x3522))+((x3518*x3519))+(((-1.0)*x3516*x3521)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3524.value)*((x3518+x3517)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3523.value)*(((((-246.0)*x3516*x3517))+(((-246.0)*x3516*x3518))+((x3517*x3522))+((x3517*x3519))+((x3520*x3521))+((x3518*x3522))+((x3518*x3519))+(((-1.0)*x3516*x3521))))))+IKsqr(((x3524.value)*((x3518+x3517))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3523.value)*(((((-246.0)*x3516*x3517))+(((-246.0)*x3516*x3518))+((x3517*x3522))+((x3517*x3519))+((x3520*x3521))+((x3518*x3522))+((x3518*x3519))+(((-1.0)*x3516*x3521))))), ((x3524.value)*((x3518+x3517))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3525=IKcos(j0);
IkReal x3526=IKsin(j0);
IkReal x3527=((0.1)*sj5);
IkReal x3528=(cj5*r11);
IkReal x3529=(sj1*sj2);
IkReal x3530=(cj1*cj2);
IkReal x3531=((1.0)*sj5);
IkReal x3532=(cj5*r01);
IkReal x3533=((0.425)*cj1);
IkReal x3534=((0.392)*x3526);
IkReal x3535=((0.392)*x3525);
evalcond[0]=(((x3525*x3529))+(((-1.0)*x3525*x3530))+(((-1.0)*r00*x3531))+(((-1.0)*x3532)));
evalcond[1]=((((-1.0)*x3528))+((x3526*x3529))+(((-1.0)*r10*x3531))+(((-1.0)*x3526*x3530)));
evalcond[2]=((((-0.1)*x3532))+(((-0.134)*x3526))+(((-1.0)*x3529*x3535))+(((-1.0)*px))+(((-1.0)*r00*x3527))+((x3525*x3533))+((x3530*x3535)));
evalcond[3]=((((0.134)*x3525))+(((-1.0)*r10*x3527))+(((-1.0)*x3529*x3534))+(((-1.0)*py))+(((-0.1)*x3528))+((x3530*x3534))+((x3526*x3533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3536=((1.0)*cj5);
IkReal x3537=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3536)));
j4eval[0]=x3537;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3536)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3537);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3538=((1.0)*cj5);
IkReal x3539=((((-1.0)*r11*x3538))+(((-1.0)*r10*sj5)));
j4eval[0]=x3539;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3538))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x3539);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3540=((1.0)*sj0);
IkReal x3541=((1.0)*cj0);
IkReal x3542=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3542;
j4eval[1]=((IKabs(((((-1.0)*r02*x3541))+(((-1.0)*r12*x3540)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x3541))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3540))))));
j4eval[2]=IKsign(x3542);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3543=((-1.0)*r20);
IkReal x3545 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3545)==0){
continue;
}
IkReal x3544=pow(x3545,-0.5);
CheckValue<IkReal> x3546 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3543),IKFAST_ATAN2_MAGTHRESH);
if(!x3546.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3546.value));
IkReal gconst97=(r21*x3544);
IkReal gconst98=(x3543*x3544);
CheckValue<IkReal> x3547 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3547.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3547.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3548=((-1.0)*r20);
IkReal x3549=x3544;
CheckValue<IkReal> x3551 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3548),IKFAST_ATAN2_MAGTHRESH);
if(!x3551.valid){
continue;
}
IkReal x3550=((-1.0)*(x3551.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3550;
IkReal gconst96=x3550;
IkReal gconst97=(r21*x3549);
IkReal gconst98=(x3548*x3549);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3552=((-1.0)*r20);
IkReal x3553=x3544;
CheckValue<IkReal> x3555 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3552),IKFAST_ATAN2_MAGTHRESH);
if(!x3555.valid){
continue;
}
IkReal x3554=((-1.0)*(x3555.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3554;
IkReal gconst96=x3554;
IkReal gconst97=(r21*x3553);
IkReal gconst98=(x3552*x3553);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3556=((-1.0)*r20);
IkReal x3557=x3544;
CheckValue<IkReal> x3559 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3556),IKFAST_ATAN2_MAGTHRESH);
if(!x3559.valid){
continue;
}
IkReal x3558=((-1.0)*(x3559.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3558;
IkReal gconst96=x3558;
IkReal gconst97=(r21*x3557);
IkReal gconst98=(x3556*x3557);
IkReal x3560=((1.0)*(r22*r22));
CheckValue<IkReal> x3564=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3560))),-1);
if(!x3564.valid){
continue;
}
IkReal x3561=x3564.value;
IkReal x3562=((1.0)*x3561);
IkReal x3563=((((-1.0)*x3562*(r21*r21*r21*r21)))+(((-1.0)*x3560))+(((-2.0)*x3561*(r20*r20)*(r21*r21)))+(((-1.0)*x3562*(r20*r20*r20*r20))));
j4eval[0]=x3563;
j4eval[1]=IKsign(x3563);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3565=(cj1*cj2);
IkReal x3566=(gconst98*r20);
IkReal x3567=(sj1*sj2);
IkReal x3568=(gconst97*r21);
CheckValue<IkReal> x3569=IKPowWithIntegerCheck(IKsign(((((2.0)*x3566*x3568))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3568*x3568)))+(((-1.0)*(x3566*x3566))))),-1);
if(!x3569.valid){
continue;
}
CheckValue<IkReal> x3570 = IKatan2WithCheck(IkReal((((r22*x3567))+(((-1.0)*r22*x3565)))),IkReal((((x3565*x3566))+(((-1.0)*x3566*x3567))+((x3567*x3568))+(((-1.0)*x3565*x3568)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3569.value)))+(x3570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3571=IKsin(j4);
IkReal x3572=IKcos(j4);
IkReal x3573=(gconst98*r10);
IkReal x3574=(gconst97*r21);
IkReal x3575=(gconst98*r20);
IkReal x3576=((1.0)*cj2);
IkReal x3577=((1.0)*sj0);
IkReal x3578=(gconst98*r00);
IkReal x3579=(cj1*sj2);
IkReal x3580=((1.0)*x3572);
IkReal x3581=((1.0)*x3571);
IkReal x3582=(gconst97*x3571);
IkReal x3583=(gconst97*x3572);
evalcond[0]=((((-1.0)*r22*x3580))+((x3571*x3574))+(((-1.0)*x3575*x3581)));
evalcond[1]=((((-1.0)*x3573*x3581))+cj0+((r11*x3582))+(((-1.0)*r12*x3580)));
evalcond[2]=((((-1.0)*r02*x3580))+(((-1.0)*x3577))+((r01*x3582))+(((-1.0)*x3578*x3581)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x3575*x3580))+((x3572*x3574))+((r22*x3571))+(((-1.0)*cj1*x3576)));
evalcond[4]=((((-1.0)*cj0*x3579))+((r01*x3583))+((r02*x3571))+(((-1.0)*x3578*x3580))+(((-1.0)*cj0*sj1*x3576)));
evalcond[5]=((((-1.0)*sj0*sj1*x3576))+(((-1.0)*x3573*x3580))+((r11*x3583))+((r12*x3571))+(((-1.0)*x3577*x3579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3584=((1.0)*gconst98);
CheckValue<IkReal> x3585 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3584)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3585.valid){
continue;
}
CheckValue<IkReal> x3586=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst97*r10))+(((-1.0)*r11*x3584)))),-1);
if(!x3586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3585.value)+(((1.5707963267949)*(x3586.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3587=IKsin(j4);
IkReal x3588=IKcos(j4);
IkReal x3589=(gconst98*r10);
IkReal x3590=(gconst97*r21);
IkReal x3591=(gconst98*r20);
IkReal x3592=((1.0)*cj2);
IkReal x3593=((1.0)*sj0);
IkReal x3594=(gconst98*r00);
IkReal x3595=(cj1*sj2);
IkReal x3596=((1.0)*x3588);
IkReal x3597=((1.0)*x3587);
IkReal x3598=(gconst97*x3587);
IkReal x3599=(gconst97*x3588);
evalcond[0]=((((-1.0)*r22*x3596))+((x3587*x3590))+(((-1.0)*x3591*x3597)));
evalcond[1]=((((-1.0)*x3589*x3597))+cj0+((r11*x3598))+(((-1.0)*r12*x3596)));
evalcond[2]=((((-1.0)*x3594*x3597))+(((-1.0)*r02*x3596))+((r01*x3598))+(((-1.0)*x3593)));
evalcond[3]=((((-1.0)*cj1*x3592))+((sj1*sj2))+((x3588*x3590))+(((-1.0)*x3591*x3596))+((r22*x3587)));
evalcond[4]=((((-1.0)*x3594*x3596))+((r02*x3587))+(((-1.0)*cj0*x3595))+((r01*x3599))+(((-1.0)*cj0*sj1*x3592)));
evalcond[5]=((((-1.0)*x3589*x3596))+((r12*x3587))+((r11*x3599))+(((-1.0)*x3593*x3595))+(((-1.0)*sj0*sj1*x3592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3600=((1.0)*gconst98);
CheckValue<IkReal> x3601=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3600))+(((-1.0)*gconst97*r00)))),-1);
if(!x3601.valid){
continue;
}
CheckValue<IkReal> x3602 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x3600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3601.value)))+(x3602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3603=IKsin(j4);
IkReal x3604=IKcos(j4);
IkReal x3605=(gconst98*r10);
IkReal x3606=(gconst97*r21);
IkReal x3607=(gconst98*r20);
IkReal x3608=((1.0)*cj2);
IkReal x3609=((1.0)*sj0);
IkReal x3610=(gconst98*r00);
IkReal x3611=(cj1*sj2);
IkReal x3612=((1.0)*x3604);
IkReal x3613=((1.0)*x3603);
IkReal x3614=(gconst97*x3603);
IkReal x3615=(gconst97*x3604);
evalcond[0]=((((-1.0)*x3607*x3613))+(((-1.0)*r22*x3612))+((x3603*x3606)));
evalcond[1]=(((r11*x3614))+(((-1.0)*x3605*x3613))+cj0+(((-1.0)*r12*x3612)));
evalcond[2]=((((-1.0)*r02*x3612))+((r01*x3614))+(((-1.0)*x3609))+(((-1.0)*x3610*x3613)));
evalcond[3]=(((x3604*x3606))+((r22*x3603))+((sj1*sj2))+(((-1.0)*x3607*x3612))+(((-1.0)*cj1*x3608)));
evalcond[4]=(((r02*x3603))+((r01*x3615))+(((-1.0)*cj0*sj1*x3608))+(((-1.0)*x3610*x3612))+(((-1.0)*cj0*x3611)));
evalcond[5]=(((r11*x3615))+(((-1.0)*x3605*x3612))+(((-1.0)*x3609*x3611))+(((-1.0)*sj0*sj1*x3608))+((r12*x3603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3616=((-1.0)*r21);
IkReal x3618 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3618)==0){
continue;
}
IkReal x3617=pow(x3618,-0.5);
CheckValue<IkReal> x3619 = IKatan2WithCheck(IkReal(x3616),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3619.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3619.value))));
IkReal gconst100=(x3616*x3617);
IkReal gconst101=((1.0)*r20*x3617);
CheckValue<IkReal> x3620 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3620.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3620.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3621=((-1.0)*r21);
CheckValue<IkReal> x3624 = IKatan2WithCheck(IkReal(x3621),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3624.valid){
continue;
}
IkReal x3622=((1.0)*(x3624.value));
IkReal x3623=x3617;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3622)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3622)));
IkReal gconst100=(x3621*x3623);
IkReal gconst101=((1.0)*r20*x3623);
IkReal x3625=r22*r22;
IkReal x3626=((1.0)*x3625);
CheckValue<IkReal> x3630=IKPowWithIntegerCheck(((-1.0)+x3625),-1);
if(!x3630.valid){
continue;
}
IkReal x3627=x3630.value;
if((((1.0)+(((-1.0)*x3626)))) < -0.00001)
continue;
IkReal x3628=IKsqrt(((1.0)+(((-1.0)*x3626))));
IkReal x3629=(cj0*x3627*x3628);
j4eval[0]=((IKabs(((((-1.0)*x3626*x3629))+x3629)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3631=((-1.0)*r21);
CheckValue<IkReal> x3634 = IKatan2WithCheck(IkReal(x3631),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3634.valid){
continue;
}
IkReal x3632=((1.0)*(x3634.value));
IkReal x3633=x3617;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3632)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3632)));
IkReal gconst100=(x3631*x3633);
IkReal gconst101=((1.0)*r20*x3633);
IkReal x3635=r22*r22;
IkReal x3636=((1.0)*x3635);
CheckValue<IkReal> x3640=IKPowWithIntegerCheck(((-1.0)+x3635),-1);
if(!x3640.valid){
continue;
}
IkReal x3637=x3640.value;
if((((1.0)+(((-1.0)*x3636)))) < -0.00001)
continue;
IkReal x3638=IKsqrt(((1.0)+(((-1.0)*x3636))));
IkReal x3639=(sj0*x3637*x3638);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3639+(((-1.0)*x3636*x3639))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3641=((-1.0)*r21);
CheckValue<IkReal> x3644 = IKatan2WithCheck(IkReal(x3641),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3644.valid){
continue;
}
IkReal x3642=((1.0)*(x3644.value));
IkReal x3643=x3617;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3642)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3642)));
IkReal gconst100=(x3641*x3643);
IkReal gconst101=((1.0)*r20*x3643);
IkReal x3645=r22*r22;
IkReal x3646=(r12*sj0);
IkReal x3647=(cj0*r02);
CheckValue<IkReal> x3651=IKPowWithIntegerCheck(((-1.0)+x3645),-1);
if(!x3651.valid){
continue;
}
IkReal x3648=x3651.value;
if((((1.0)+(((-1.0)*x3645)))) < -0.00001)
continue;
IkReal x3649=IKsqrt(((1.0)+(((-1.0)*x3645))));
IkReal x3650=(r22*x3648*x3649);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3646*x3650))+((x3647*x3650)))))+(IKabs(((((-1.0)*x3646))+(((-1.0)*x3647))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3652=((1.0)*sj0);
IkReal x3653=((1.0)*gconst100);
CheckValue<IkReal> x3654 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3652)))),IkReal(((((-1.0)*gconst100*r11*x3652))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x3653)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3654.valid){
continue;
}
CheckValue<IkReal> x3655=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3653))+(((-1.0)*gconst101*r21)))),-1);
if(!x3655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3654.value)+(((1.5707963267949)*(x3655.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3656=IKsin(j4);
IkReal x3657=IKcos(j4);
IkReal x3658=(gconst101*r20);
IkReal x3659=(gconst101*r10);
IkReal x3660=((1.0)*cj2);
IkReal x3661=(gconst101*r00);
IkReal x3662=((1.0)*sj0);
IkReal x3663=(cj1*sj2);
IkReal x3664=((1.0)*x3657);
IkReal x3665=((1.0)*x3656);
IkReal x3666=(gconst100*x3656);
IkReal x3667=(gconst100*x3657);
evalcond[0]=((((-1.0)*x3658*x3665))+(((-1.0)*r22*x3664))+((r21*x3666)));
evalcond[1]=(cj0+((r11*x3666))+(((-1.0)*x3659*x3665))+(((-1.0)*r12*x3664)));
evalcond[2]=((((-1.0)*x3661*x3665))+(((-1.0)*x3662))+(((-1.0)*r02*x3664))+((r01*x3666)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x3658*x3664))+(((-1.0)*cj1*x3660))+((r21*x3667))+((r22*x3656)));
evalcond[4]=((((-1.0)*cj0*sj1*x3660))+(((-1.0)*x3661*x3664))+((r01*x3667))+(((-1.0)*cj0*x3663))+((r02*x3656)));
evalcond[5]=((((-1.0)*x3662*x3663))+((r12*x3656))+(((-1.0)*sj0*sj1*x3660))+((r11*x3667))+(((-1.0)*x3659*x3664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3668=((1.0)*gconst101);
CheckValue<IkReal> x3669 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3668))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3669.valid){
continue;
}
CheckValue<IkReal> x3670=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3668)))),-1);
if(!x3670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3669.value)+(((1.5707963267949)*(x3670.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3671=IKsin(j4);
IkReal x3672=IKcos(j4);
IkReal x3673=(gconst101*r20);
IkReal x3674=(gconst101*r10);
IkReal x3675=((1.0)*cj2);
IkReal x3676=(gconst101*r00);
IkReal x3677=((1.0)*sj0);
IkReal x3678=(cj1*sj2);
IkReal x3679=((1.0)*x3672);
IkReal x3680=((1.0)*x3671);
IkReal x3681=(gconst100*x3671);
IkReal x3682=(gconst100*x3672);
evalcond[0]=(((r21*x3681))+(((-1.0)*r22*x3679))+(((-1.0)*x3673*x3680)));
evalcond[1]=(cj0+(((-1.0)*r12*x3679))+(((-1.0)*x3674*x3680))+((r11*x3681)));
evalcond[2]=(((r01*x3681))+(((-1.0)*x3676*x3680))+(((-1.0)*r02*x3679))+(((-1.0)*x3677)));
evalcond[3]=(((r21*x3682))+(((-1.0)*x3673*x3679))+((sj1*sj2))+((r22*x3671))+(((-1.0)*cj1*x3675)));
evalcond[4]=((((-1.0)*x3676*x3679))+((r01*x3682))+(((-1.0)*cj0*x3678))+((r02*x3671))+(((-1.0)*cj0*sj1*x3675)));
evalcond[5]=(((r12*x3671))+((r11*x3682))+(((-1.0)*x3677*x3678))+(((-1.0)*sj0*sj1*x3675))+(((-1.0)*x3674*x3679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3683=((1.0)*gconst101);
CheckValue<IkReal> x3684=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3683)))),-1);
if(!x3684.valid){
continue;
}
CheckValue<IkReal> x3685 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3683)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3684.value)))+(x3685.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3686=IKsin(j4);
IkReal x3687=IKcos(j4);
IkReal x3688=(gconst101*r20);
IkReal x3689=(gconst101*r10);
IkReal x3690=((1.0)*cj2);
IkReal x3691=(gconst101*r00);
IkReal x3692=((1.0)*sj0);
IkReal x3693=(cj1*sj2);
IkReal x3694=((1.0)*x3687);
IkReal x3695=((1.0)*x3686);
IkReal x3696=(gconst100*x3686);
IkReal x3697=(gconst100*x3687);
evalcond[0]=((((-1.0)*x3688*x3695))+(((-1.0)*r22*x3694))+((r21*x3696)));
evalcond[1]=((((-1.0)*x3689*x3695))+cj0+(((-1.0)*r12*x3694))+((r11*x3696)));
evalcond[2]=(((r01*x3696))+(((-1.0)*r02*x3694))+(((-1.0)*x3692))+(((-1.0)*x3691*x3695)));
evalcond[3]=((((-1.0)*x3688*x3694))+(((-1.0)*cj1*x3690))+((sj1*sj2))+((r21*x3697))+((r22*x3686)));
evalcond[4]=(((r01*x3697))+(((-1.0)*cj0*x3693))+(((-1.0)*cj0*sj1*x3690))+((r02*x3686))+(((-1.0)*x3691*x3694)));
evalcond[5]=((((-1.0)*x3689*x3694))+((r12*x3686))+(((-1.0)*sj0*sj1*x3690))+((r11*x3697))+(((-1.0)*x3692*x3693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3698=((-1.0)*r10);
IkReal x3700 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3700)==0){
continue;
}
IkReal x3699=pow(x3700,-0.5);
CheckValue<IkReal> x3701 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3698),IKFAST_ATAN2_MAGTHRESH);
if(!x3701.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3701.value));
IkReal gconst103=(r11*x3699);
IkReal gconst104=(x3698*x3699);
CheckValue<IkReal> x3702 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3702.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3702.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3703=((-1.0)*r10);
IkReal x3704=x3699;
CheckValue<IkReal> x3706 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3703),IKFAST_ATAN2_MAGTHRESH);
if(!x3706.valid){
continue;
}
IkReal x3705=((-1.0)*(x3706.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3705;
IkReal gconst102=x3705;
IkReal gconst103=(r11*x3704);
IkReal gconst104=(x3703*x3704);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3707=((1.0)*sj0);
IkReal x3708=((1.0)*gconst103);
CheckValue<IkReal> x3709 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3707)))),IkReal(((((-1.0)*gconst103*r11*x3707))+(((-1.0)*cj0*r01*x3708))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3709.valid){
continue;
}
CheckValue<IkReal> x3710=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3708)))),-1);
if(!x3710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3709.value)+(((1.5707963267949)*(x3710.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3711=IKsin(j4);
IkReal x3712=IKcos(j4);
IkReal x3713=(gconst103*r11);
IkReal x3714=((1.0)*cj2);
IkReal x3715=((1.0)*sj0);
IkReal x3716=(cj1*sj2);
IkReal x3717=((1.0)*x3712);
IkReal x3718=(gconst103*x3712);
IkReal x3719=(gconst103*x3711);
IkReal x3720=((1.0)*gconst104*x3711);
evalcond[0]=((((-1.0)*r20*x3720))+((r21*x3719))+(((-1.0)*r22*x3717)));
evalcond[1]=(((x3711*x3713))+cj0+(((-1.0)*r12*x3717))+(((-1.0)*r10*x3720)));
evalcond[2]=((((-1.0)*r02*x3717))+(((-1.0)*x3715))+(((-1.0)*r00*x3720))+((r01*x3719)));
evalcond[3]=((((-1.0)*gconst104*r20*x3717))+(((-1.0)*cj1*x3714))+((sj1*sj2))+((r21*x3718))+((r22*x3711)));
evalcond[4]=((((-1.0)*cj0*x3716))+((r01*x3718))+(((-1.0)*gconst104*r00*x3717))+((r02*x3711))+(((-1.0)*cj0*sj1*x3714)));
evalcond[5]=(((r12*x3711))+(((-1.0)*x3715*x3716))+((x3712*x3713))+(((-1.0)*sj0*sj1*x3714))+(((-1.0)*gconst104*r10*x3717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3721=((1.0)*gconst104);
CheckValue<IkReal> x3722=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3721)))),-1);
if(!x3722.valid){
continue;
}
CheckValue<IkReal> x3723 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3721))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3722.value)))+(x3723.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3724=IKsin(j4);
IkReal x3725=IKcos(j4);
IkReal x3726=(gconst103*r11);
IkReal x3727=((1.0)*cj2);
IkReal x3728=((1.0)*sj0);
IkReal x3729=(cj1*sj2);
IkReal x3730=((1.0)*x3725);
IkReal x3731=(gconst103*x3725);
IkReal x3732=(gconst103*x3724);
IkReal x3733=((1.0)*gconst104*x3724);
evalcond[0]=((((-1.0)*r20*x3733))+(((-1.0)*r22*x3730))+((r21*x3732)));
evalcond[1]=(cj0+(((-1.0)*r12*x3730))+((x3724*x3726))+(((-1.0)*r10*x3733)));
evalcond[2]=(((r01*x3732))+(((-1.0)*x3728))+(((-1.0)*r00*x3733))+(((-1.0)*r02*x3730)));
evalcond[3]=((((-1.0)*cj1*x3727))+((r22*x3724))+((sj1*sj2))+(((-1.0)*gconst104*r20*x3730))+((r21*x3731)));
evalcond[4]=((((-1.0)*gconst104*r00*x3730))+((r01*x3731))+(((-1.0)*cj0*x3729))+((r02*x3724))+(((-1.0)*cj0*sj1*x3727)));
evalcond[5]=((((-1.0)*sj0*sj1*x3727))+((x3725*x3726))+((r12*x3724))+(((-1.0)*x3728*x3729))+(((-1.0)*gconst104*r10*x3730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3734=((-1.0)*r11);
IkReal x3736 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3736)==0){
continue;
}
IkReal x3735=pow(x3736,-0.5);
CheckValue<IkReal> x3737 = IKatan2WithCheck(IkReal(x3734),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3737.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3737.value))));
IkReal gconst106=(x3734*x3735);
IkReal gconst107=((1.0)*r10*x3735);
CheckValue<IkReal> x3738 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3738.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3738.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3739=((-1.0)*r11);
CheckValue<IkReal> x3742 = IKatan2WithCheck(IkReal(x3739),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3742.valid){
continue;
}
IkReal x3740=((1.0)*(x3742.value));
IkReal x3741=x3735;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3740)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3740)));
IkReal gconst106=(x3739*x3741);
IkReal gconst107=((1.0)*r10*x3741);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3743=((-1.0)*r11);
CheckValue<IkReal> x3746 = IKatan2WithCheck(IkReal(x3743),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3746.valid){
continue;
}
IkReal x3744=((1.0)*(x3746.value));
IkReal x3745=x3735;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3744)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3744)));
IkReal gconst106=(x3743*x3745);
IkReal gconst107=((1.0)*r10*x3745);
IkReal x3747=r12*r12;
IkReal x3748=((1.0)*sj0);
IkReal x3749=(cj0*r02);
IkReal x3750=x3735;
j4eval[0]=((IKabs(((((-1.0)*x3748*x3750))+((r12*x3749*x3750))+((sj0*x3747*x3750)))))+(IKabs(((((-1.0)*r12*x3748))+(((-1.0)*x3749))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3751=((-1.0)*r11);
CheckValue<IkReal> x3754 = IKatan2WithCheck(IkReal(x3751),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3754.valid){
continue;
}
IkReal x3752=((1.0)*(x3754.value));
IkReal x3753=x3735;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3752)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3752)));
IkReal gconst106=(x3751*x3753);
IkReal gconst107=((1.0)*r10*x3753);
IkReal x3755=r12*r12;
IkReal x3756=((1.0)+(((-1.0)*x3755)));
IkReal x3757=(r22*sj1*sj2);
IkReal x3758=(cj1*cj2*r22);
CheckValue<IkReal> x3765=IKPowWithIntegerCheck(x3756,-1);
if(!x3765.valid){
continue;
}
IkReal x3759=x3765.value;
CheckValue<IkReal> x3766=IKPowWithIntegerCheck(((-1.0)+x3755),-1);
if(!x3766.valid){
continue;
}
IkReal x3760=x3766.value;
IkReal x3761=((1.0)*x3759);
if((x3756) < -0.00001)
continue;
IkReal x3762=IKsqrt(x3756);
IkReal x3763=(r12*x3760*x3762);
IkReal x3764=((((-2.0)*r10*r11*r20*r21*x3759))+(((-1.0)*x3761*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x3761*(r11*r11)*(r21*r21))));
j4eval[0]=x3764;
j4eval[1]=((IKabs((((x3758*x3763))+(((-1.0)*x3757*x3763)))))+(IKabs((x3757+(((-1.0)*x3758))))));
j4eval[2]=IKsign(x3764);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3767=(sj1*sj2);
IkReal x3768=(gconst106*r21);
IkReal x3769=(gconst107*r20);
IkReal x3770=(cj1*cj2);
CheckValue<IkReal> x3771 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3770))+((r22*x3767)))),IkReal((((x3769*x3770))+((x3767*x3768))+(((-1.0)*x3768*x3770))+(((-1.0)*x3767*x3769)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3771.valid){
continue;
}
CheckValue<IkReal> x3772=IKPowWithIntegerCheck(IKsign(((((2.0)*x3768*x3769))+(((-1.0)*(x3769*x3769)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3768*x3768))))),-1);
if(!x3772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3771.value)+(((1.5707963267949)*(x3772.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3773=IKsin(j4);
IkReal x3774=IKcos(j4);
IkReal x3775=(gconst107*r10);
IkReal x3776=(gconst107*r00);
IkReal x3777=((1.0)*cj2);
IkReal x3778=(gconst107*r20);
IkReal x3779=((1.0)*sj0);
IkReal x3780=(cj1*sj2);
IkReal x3781=((1.0)*x3774);
IkReal x3782=(gconst106*x3774);
IkReal x3783=(gconst106*x3773);
IkReal x3784=((1.0)*x3773);
evalcond[0]=((((-1.0)*x3778*x3784))+((r21*x3783))+(((-1.0)*r22*x3781)));
evalcond[1]=(cj0+(((-1.0)*r12*x3781))+(((-1.0)*x3775*x3784))+((r11*x3783)));
evalcond[2]=((((-1.0)*r02*x3781))+((r01*x3783))+(((-1.0)*x3779))+(((-1.0)*x3776*x3784)));
evalcond[3]=((((-1.0)*x3778*x3781))+((r22*x3773))+((r21*x3782))+((sj1*sj2))+(((-1.0)*cj1*x3777)));
evalcond[4]=(((r02*x3773))+(((-1.0)*cj0*sj1*x3777))+(((-1.0)*cj0*x3780))+((r01*x3782))+(((-1.0)*x3776*x3781)));
evalcond[5]=((((-1.0)*x3779*x3780))+((r12*x3773))+(((-1.0)*sj0*sj1*x3777))+(((-1.0)*x3775*x3781))+((r11*x3782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3785=((1.0)*sj0);
IkReal x3786=((1.0)*gconst106);
CheckValue<IkReal> x3787=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3786)))),-1);
if(!x3787.valid){
continue;
}
CheckValue<IkReal> x3788 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3785)))),IkReal(((((-1.0)*cj0*r01*x3786))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x3785))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3787.value)))+(x3788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3789=IKsin(j4);
IkReal x3790=IKcos(j4);
IkReal x3791=(gconst107*r10);
IkReal x3792=(gconst107*r00);
IkReal x3793=((1.0)*cj2);
IkReal x3794=(gconst107*r20);
IkReal x3795=((1.0)*sj0);
IkReal x3796=(cj1*sj2);
IkReal x3797=((1.0)*x3790);
IkReal x3798=(gconst106*x3790);
IkReal x3799=(gconst106*x3789);
IkReal x3800=((1.0)*x3789);
evalcond[0]=(((r21*x3799))+(((-1.0)*r22*x3797))+(((-1.0)*x3794*x3800)));
evalcond[1]=((((-1.0)*r12*x3797))+cj0+(((-1.0)*x3791*x3800))+((r11*x3799)));
evalcond[2]=((((-1.0)*x3795))+(((-1.0)*r02*x3797))+(((-1.0)*x3792*x3800))+((r01*x3799)));
evalcond[3]=(((r21*x3798))+((r22*x3789))+((sj1*sj2))+(((-1.0)*cj1*x3793))+(((-1.0)*x3794*x3797)));
evalcond[4]=(((r02*x3789))+(((-1.0)*cj0*sj1*x3793))+(((-1.0)*cj0*x3796))+(((-1.0)*x3792*x3797))+((r01*x3798)));
evalcond[5]=((((-1.0)*sj0*sj1*x3793))+((r12*x3789))+(((-1.0)*x3791*x3797))+(((-1.0)*x3795*x3796))+((r11*x3798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3801=((1.0)*gconst107);
CheckValue<IkReal> x3802 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x3801)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3802.valid){
continue;
}
CheckValue<IkReal> x3803=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3801)))),-1);
if(!x3803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3802.value)+(((1.5707963267949)*(x3803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3804=IKsin(j4);
IkReal x3805=IKcos(j4);
IkReal x3806=(gconst107*r10);
IkReal x3807=(gconst107*r00);
IkReal x3808=((1.0)*cj2);
IkReal x3809=(gconst107*r20);
IkReal x3810=((1.0)*sj0);
IkReal x3811=(cj1*sj2);
IkReal x3812=((1.0)*x3805);
IkReal x3813=(gconst106*x3805);
IkReal x3814=(gconst106*x3804);
IkReal x3815=((1.0)*x3804);
evalcond[0]=((((-1.0)*r22*x3812))+((r21*x3814))+(((-1.0)*x3809*x3815)));
evalcond[1]=((((-1.0)*r12*x3812))+cj0+((r11*x3814))+(((-1.0)*x3806*x3815)));
evalcond[2]=((((-1.0)*x3807*x3815))+(((-1.0)*r02*x3812))+(((-1.0)*x3810))+((r01*x3814)));
evalcond[3]=(((r21*x3813))+((r22*x3804))+((sj1*sj2))+(((-1.0)*x3809*x3812))+(((-1.0)*cj1*x3808)));
evalcond[4]=((((-1.0)*x3807*x3812))+(((-1.0)*cj0*x3811))+((r02*x3804))+(((-1.0)*cj0*sj1*x3808))+((r01*x3813)));
evalcond[5]=((((-1.0)*sj0*sj1*x3808))+((r11*x3813))+((r12*x3804))+(((-1.0)*x3810*x3811))+(((-1.0)*x3806*x3812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3816=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3816;
j4eval[1]=IKsign(x3816);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3817=((1.0)*cj5);
IkReal x3818=((((-1.0)*r01*x3817))+(((-1.0)*r00*sj5)));
j4eval[0]=x3818;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3817))))));
j4eval[2]=IKsign(x3818);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3819=(sj1*sj2);
IkReal x3820=(cj5*r10);
IkReal x3821=(r11*sj5);
IkReal x3822=(cj1*cj2);
IkReal x3823=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3823;
j4eval[1]=((IKabs((((x3819*x3821))+(((-1.0)*x3819*x3820))+((x3820*x3822))+(((-1.0)*x3821*x3822)))))+(IKabs((((r12*x3822))+(((-1.0)*r12*x3819))))));
j4eval[2]=IKsign(x3823);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3824=(sj1*sj2);
IkReal x3825=(cj5*r10);
IkReal x3826=(r11*sj5);
IkReal x3827=(cj1*cj2);
CheckValue<IkReal> x3828=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3828.valid){
continue;
}
CheckValue<IkReal> x3829 = IKatan2WithCheck(IkReal((((x3825*x3827))+(((-1.0)*x3824*x3825))+((x3824*x3826))+(((-1.0)*x3826*x3827)))),IkReal((((r12*x3827))+(((-1.0)*r12*x3824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3828.value)))+(x3829.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3830=IKcos(j4);
IkReal x3831=IKsin(j4);
IkReal x3832=(cj5*r00);
IkReal x3833=(cj5*r10);
IkReal x3834=(r21*sj5);
IkReal x3835=((1.0)*cj2);
IkReal x3836=(cj5*r20);
IkReal x3837=((1.0)*x3830);
IkReal x3838=((1.0)*x3831);
IkReal x3839=(sj5*x3831);
IkReal x3840=(sj5*x3830);
evalcond[0]=((((-1.0)*x3833*x3837))+((r12*x3831))+((r11*x3840)));
evalcond[1]=(((x3831*x3834))+(((-1.0)*r22*x3837))+(((-1.0)*x3836*x3838)));
evalcond[2]=((((-1.0)*x3832*x3838))+((r01*x3839))+(((-1.0)*r02*x3837)));
evalcond[3]=((1.0)+(((-1.0)*x3833*x3838))+(((-1.0)*r12*x3837))+((r11*x3839)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x3835))+(((-1.0)*x3836*x3837))+((x3830*x3834))+((r22*x3831)));
evalcond[5]=((((-1.0)*x3832*x3837))+((r02*x3831))+(((-1.0)*cj1*sj2))+((r01*x3840))+(((-1.0)*sj1*x3835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3841=((1.0)*cj5);
CheckValue<IkReal> x3842=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3841)))),-1);
if(!x3842.valid){
continue;
}
CheckValue<IkReal> x3843 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3841))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3842.value)))+(x3843.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3844=IKcos(j4);
IkReal x3845=IKsin(j4);
IkReal x3846=(cj5*r00);
IkReal x3847=(cj5*r10);
IkReal x3848=(r21*sj5);
IkReal x3849=((1.0)*cj2);
IkReal x3850=(cj5*r20);
IkReal x3851=((1.0)*x3844);
IkReal x3852=((1.0)*x3845);
IkReal x3853=(sj5*x3845);
IkReal x3854=(sj5*x3844);
evalcond[0]=(((r12*x3845))+((r11*x3854))+(((-1.0)*x3847*x3851)));
evalcond[1]=((((-1.0)*x3850*x3852))+((x3845*x3848))+(((-1.0)*r22*x3851)));
evalcond[2]=(((r01*x3853))+(((-1.0)*x3846*x3852))+(((-1.0)*r02*x3851)));
evalcond[3]=((1.0)+((r11*x3853))+(((-1.0)*r12*x3851))+(((-1.0)*x3847*x3852)));
evalcond[4]=((((-1.0)*x3850*x3851))+((sj1*sj2))+((x3844*x3848))+(((-1.0)*cj1*x3849))+((r22*x3845)));
evalcond[5]=((((-1.0)*sj1*x3849))+(((-1.0)*cj1*sj2))+((r01*x3854))+(((-1.0)*x3846*x3851))+((r02*x3845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3855=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3855.valid){
continue;
}
CheckValue<IkReal> x3856 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3855.value)))+(x3856.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3857=IKcos(j4);
IkReal x3858=IKsin(j4);
IkReal x3859=(cj5*r00);
IkReal x3860=(cj5*r10);
IkReal x3861=(r21*sj5);
IkReal x3862=((1.0)*cj2);
IkReal x3863=(cj5*r20);
IkReal x3864=((1.0)*x3857);
IkReal x3865=((1.0)*x3858);
IkReal x3866=(sj5*x3858);
IkReal x3867=(sj5*x3857);
evalcond[0]=(((r11*x3867))+(((-1.0)*x3860*x3864))+((r12*x3858)));
evalcond[1]=((((-1.0)*x3863*x3865))+((x3858*x3861))+(((-1.0)*r22*x3864)));
evalcond[2]=((((-1.0)*r02*x3864))+(((-1.0)*x3859*x3865))+((r01*x3866)));
evalcond[3]=((1.0)+((r11*x3866))+(((-1.0)*x3860*x3865))+(((-1.0)*r12*x3864)));
evalcond[4]=((((-1.0)*x3863*x3864))+((sj1*sj2))+((x3857*x3861))+(((-1.0)*cj1*x3862))+((r22*x3858)));
evalcond[5]=(((r02*x3858))+(((-1.0)*x3859*x3864))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3862))+((r01*x3867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3868=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3868;
j4eval[1]=IKsign(x3868);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3869=((1.0)*cj5);
IkReal x3870=((((-1.0)*r21*x3869))+(((-1.0)*r20*sj5)));
j4eval[0]=x3870;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3869))))));
j4eval[2]=IKsign(x3870);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3871=cj5*cj5;
IkReal x3872=r11*r11;
IkReal x3873=(r11*sj5);
IkReal x3874=(cj5*r10);
IkReal x3875=((r12*r12)+((x3871*(r10*r10)))+x3872+(((-1.0)*x3871*x3872))+(((-2.0)*x3873*x3874)));
j4eval[0]=x3875;
j4eval[1]=IKsign(x3875);
j4eval[2]=((IKabs(r12))+(IKabs((x3873+(((-1.0)*x3874))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3876=cj5*cj5;
IkReal x3877=r11*r11;
IkReal x3878=(cj5*r10);
IkReal x3879=(r11*sj5);
CheckValue<IkReal> x3880 = IKatan2WithCheck(IkReal((x3879+(((-1.0)*x3878)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3880.valid){
continue;
}
CheckValue<IkReal> x3881=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x3876*(r10*r10)))+x3877+(((-1.0)*x3876*x3877))+(((-2.0)*x3878*x3879)))),-1);
if(!x3881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3880.value)+(((1.5707963267949)*(x3881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3882=IKcos(j4);
IkReal x3883=IKsin(j4);
IkReal x3884=(cj5*r00);
IkReal x3885=(cj5*r10);
IkReal x3886=(r21*sj5);
IkReal x3887=(cj5*r20);
IkReal x3888=((1.0)*x3882);
IkReal x3889=((1.0)*x3883);
IkReal x3890=(sj5*x3883);
IkReal x3891=(sj5*x3882);
evalcond[0]=(((r12*x3883))+(((-1.0)*x3885*x3888))+((r11*x3891)));
evalcond[1]=(((x3883*x3886))+(((-1.0)*r22*x3888))+(((-1.0)*x3887*x3889)));
evalcond[2]=((((-1.0)*r02*x3888))+((r01*x3890))+(((-1.0)*x3884*x3889)));
evalcond[3]=((-1.0)+(((-1.0)*x3885*x3889))+((r11*x3890))+(((-1.0)*r12*x3888)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x3891))+((r02*x3883))+(((-1.0)*x3884*x3888)));
evalcond[5]=(((x3882*x3886))+((r22*x3883))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3887*x3888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3892=((1.0)*cj5);
CheckValue<IkReal> x3893 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3892)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3893.valid){
continue;
}
CheckValue<IkReal> x3894=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3892))+(((-1.0)*r20*sj5)))),-1);
if(!x3894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3893.value)+(((1.5707963267949)*(x3894.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3895=IKcos(j4);
IkReal x3896=IKsin(j4);
IkReal x3897=(cj5*r00);
IkReal x3898=(cj5*r10);
IkReal x3899=(r21*sj5);
IkReal x3900=(cj5*r20);
IkReal x3901=((1.0)*x3895);
IkReal x3902=((1.0)*x3896);
IkReal x3903=(sj5*x3896);
IkReal x3904=(sj5*x3895);
evalcond[0]=(((r12*x3896))+(((-1.0)*x3898*x3901))+((r11*x3904)));
evalcond[1]=((((-1.0)*x3900*x3902))+(((-1.0)*r22*x3901))+((x3896*x3899)));
evalcond[2]=((((-1.0)*x3897*x3902))+((r01*x3903))+(((-1.0)*r02*x3901)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3901))+(((-1.0)*x3898*x3902))+((r11*x3903)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3897*x3901))+((cj1*sj2))+((r01*x3904))+((r02*x3896)));
evalcond[5]=((((-1.0)*x3900*x3901))+((x3895*x3899))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3905 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3905.valid){
continue;
}
CheckValue<IkReal> x3906=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3905.value)+(((1.5707963267949)*(x3906.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3907=IKcos(j4);
IkReal x3908=IKsin(j4);
IkReal x3909=(cj5*r00);
IkReal x3910=(cj5*r10);
IkReal x3911=(r21*sj5);
IkReal x3912=(cj5*r20);
IkReal x3913=((1.0)*x3907);
IkReal x3914=((1.0)*x3908);
IkReal x3915=(sj5*x3908);
IkReal x3916=(sj5*x3907);
evalcond[0]=(((r12*x3908))+((r11*x3916))+(((-1.0)*x3910*x3913)));
evalcond[1]=((((-1.0)*x3912*x3914))+(((-1.0)*r22*x3913))+((x3908*x3911)));
evalcond[2]=((((-1.0)*r02*x3913))+(((-1.0)*x3909*x3914))+((r01*x3915)));
evalcond[3]=((-1.0)+((r11*x3915))+(((-1.0)*x3910*x3914))+(((-1.0)*r12*x3913)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3909*x3913))+((r01*x3916))+((r02*x3908)));
evalcond[5]=((((-1.0)*x3912*x3913))+((r22*x3908))+((x3907*x3911))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3917=((-1.0)*r00);
IkReal x3919 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3919)==0){
continue;
}
IkReal x3918=pow(x3919,-0.5);
CheckValue<IkReal> x3920 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3917),IKFAST_ATAN2_MAGTHRESH);
if(!x3920.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3920.value));
IkReal gconst109=(r01*x3918);
IkReal gconst110=(x3917*x3918);
CheckValue<IkReal> x3921 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3921.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3921.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3922=((-1.0)*r00);
IkReal x3923=x3918;
CheckValue<IkReal> x3925 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3922),IKFAST_ATAN2_MAGTHRESH);
if(!x3925.valid){
continue;
}
IkReal x3924=((-1.0)*(x3925.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3924;
IkReal gconst108=x3924;
IkReal gconst109=(r01*x3923);
IkReal gconst110=(x3922*x3923);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3926=((1.0)*sj0);
IkReal x3927=((1.0)*gconst109);
CheckValue<IkReal> x3928=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3927))+(((-1.0)*gconst110*r21)))),-1);
if(!x3928.valid){
continue;
}
CheckValue<IkReal> x3929 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3926))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst110*r00))+(((-1.0)*cj0*r01*x3927))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x3926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3928.value)))+(x3929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3930=IKsin(j4);
IkReal x3931=IKcos(j4);
IkReal x3932=(gconst109*r21);
IkReal x3933=((1.0)*cj2);
IkReal x3934=((1.0)*sj0);
IkReal x3935=(cj1*sj2);
IkReal x3936=((1.0)*x3931);
IkReal x3937=(gconst109*x3930);
IkReal x3938=(gconst109*x3931);
IkReal x3939=((1.0)*gconst110*x3930);
evalcond[0]=((((-1.0)*r22*x3936))+(((-1.0)*r20*x3939))+((x3930*x3932)));
evalcond[1]=(cj0+(((-1.0)*r12*x3936))+(((-1.0)*r10*x3939))+((r11*x3937)));
evalcond[2]=(((r01*x3937))+(((-1.0)*r00*x3939))+(((-1.0)*r02*x3936))+(((-1.0)*x3934)));
evalcond[3]=(((r22*x3930))+(((-1.0)*cj1*x3933))+((sj1*sj2))+(((-1.0)*gconst110*r20*x3936))+((x3931*x3932)));
evalcond[4]=(((r01*x3938))+(((-1.0)*cj0*sj1*x3933))+(((-1.0)*cj0*x3935))+(((-1.0)*gconst110*r00*x3936))+((r02*x3930)));
evalcond[5]=((((-1.0)*x3934*x3935))+(((-1.0)*gconst110*r10*x3936))+((r12*x3930))+(((-1.0)*sj0*sj1*x3933))+((r11*x3938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3940=((1.0)*gconst110);
CheckValue<IkReal> x3941 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3940))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3941.valid){
continue;
}
CheckValue<IkReal> x3942=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x3940)))),-1);
if(!x3942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3941.value)+(((1.5707963267949)*(x3942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3943=IKsin(j4);
IkReal x3944=IKcos(j4);
IkReal x3945=(gconst109*r21);
IkReal x3946=((1.0)*cj2);
IkReal x3947=((1.0)*sj0);
IkReal x3948=(cj1*sj2);
IkReal x3949=((1.0)*x3944);
IkReal x3950=(gconst109*x3943);
IkReal x3951=(gconst109*x3944);
IkReal x3952=((1.0)*gconst110*x3943);
evalcond[0]=((((-1.0)*r22*x3949))+((x3943*x3945))+(((-1.0)*r20*x3952)));
evalcond[1]=(cj0+(((-1.0)*r12*x3949))+((r11*x3950))+(((-1.0)*r10*x3952)));
evalcond[2]=(((r01*x3950))+(((-1.0)*r00*x3952))+(((-1.0)*r02*x3949))+(((-1.0)*x3947)));
evalcond[3]=(((r22*x3943))+(((-1.0)*cj1*x3946))+((sj1*sj2))+(((-1.0)*gconst110*r20*x3949))+((x3944*x3945)));
evalcond[4]=((((-1.0)*cj0*x3948))+((r01*x3951))+(((-1.0)*cj0*sj1*x3946))+(((-1.0)*gconst110*r00*x3949))+((r02*x3943)));
evalcond[5]=(((r11*x3951))+((r12*x3943))+(((-1.0)*sj0*sj1*x3946))+(((-1.0)*gconst110*r10*x3949))+(((-1.0)*x3947*x3948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3953=((-1.0)*r01);
IkReal x3955 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3955)==0){
continue;
}
IkReal x3954=pow(x3955,-0.5);
CheckValue<IkReal> x3956 = IKatan2WithCheck(IkReal(x3953),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3956.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3956.value))));
IkReal gconst112=(x3953*x3954);
IkReal gconst113=((1.0)*r00*x3954);
CheckValue<IkReal> x3957 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3957.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3957.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3958=((-1.0)*r01);
CheckValue<IkReal> x3961 = IKatan2WithCheck(IkReal(x3958),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3961.valid){
continue;
}
IkReal x3959=((1.0)*(x3961.value));
IkReal x3960=x3954;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3959)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3959)));
IkReal gconst112=(x3958*x3960);
IkReal gconst113=((1.0)*r00*x3960);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3962=((-1.0)*r01);
CheckValue<IkReal> x3965 = IKatan2WithCheck(IkReal(x3962),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3965.valid){
continue;
}
IkReal x3963=((1.0)*(x3965.value));
IkReal x3964=x3954;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3963)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3963)));
IkReal gconst112=(x3962*x3964);
IkReal gconst113=((1.0)*r00*x3964);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3966=((-1.0)*r01);
CheckValue<IkReal> x3969 = IKatan2WithCheck(IkReal(x3966),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3969.valid){
continue;
}
IkReal x3967=((1.0)*(x3969.value));
IkReal x3968=x3954;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3967)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3967)));
IkReal gconst112=(x3966*x3968);
IkReal gconst113=((1.0)*r00*x3968);
IkReal x3970=r02*r02;
IkReal x3971=(r12*sj0);
IkReal x3972=((1.0)*cj0);
IkReal x3973=x3954;
j4eval[0]=((IKabs(((((-1.0)*r02*x3972))+(((-1.0)*x3971)))))+(IKabs((((r02*x3971*x3973))+(((-1.0)*x3972*x3973))+((cj0*x3970*x3973))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3974=((1.0)*sj0);
IkReal x3975=((1.0)*gconst112);
CheckValue<IkReal> x3976=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3975))+(((-1.0)*gconst113*r21)))),-1);
if(!x3976.valid){
continue;
}
CheckValue<IkReal> x3977 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3974))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x3975))+(((-1.0)*gconst112*r11*x3974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3976.value)))+(x3977.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3978=IKsin(j4);
IkReal x3979=IKcos(j4);
IkReal x3980=(gconst113*r20);
IkReal x3981=(gconst112*r21);
IkReal x3982=((1.0)*cj2);
IkReal x3983=(gconst113*r00);
IkReal x3984=(gconst113*r10);
IkReal x3985=((1.0)*sj0);
IkReal x3986=(cj1*sj2);
IkReal x3987=((1.0)*x3979);
IkReal x3988=((1.0)*x3978);
IkReal x3989=(gconst112*x3979);
IkReal x3990=(gconst112*x3978);
evalcond[0]=((((-1.0)*r22*x3987))+((x3978*x3981))+(((-1.0)*x3980*x3988)));
evalcond[1]=((((-1.0)*r12*x3987))+cj0+(((-1.0)*x3984*x3988))+((r11*x3990)));
evalcond[2]=((((-1.0)*x3983*x3988))+((r01*x3990))+(((-1.0)*x3985))+(((-1.0)*r02*x3987)));
evalcond[3]=(((sj1*sj2))+((r22*x3978))+((x3979*x3981))+(((-1.0)*cj1*x3982))+(((-1.0)*x3980*x3987)));
evalcond[4]=((((-1.0)*cj0*sj1*x3982))+((r02*x3978))+((r01*x3989))+(((-1.0)*cj0*x3986))+(((-1.0)*x3983*x3987)));
evalcond[5]=(((r11*x3989))+(((-1.0)*x3984*x3987))+(((-1.0)*x3985*x3986))+((r12*x3978))+(((-1.0)*sj0*sj1*x3982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3991=((1.0)*gconst113);
CheckValue<IkReal> x3992=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3991))+(((-1.0)*gconst112*r10)))),-1);
if(!x3992.valid){
continue;
}
CheckValue<IkReal> x3993 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x3991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3992.value)))+(x3993.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3994=IKsin(j4);
IkReal x3995=IKcos(j4);
IkReal x3996=(gconst113*r20);
IkReal x3997=(gconst112*r21);
IkReal x3998=((1.0)*cj2);
IkReal x3999=(gconst113*r00);
IkReal x4000=(gconst113*r10);
IkReal x4001=((1.0)*sj0);
IkReal x4002=(cj1*sj2);
IkReal x4003=((1.0)*x3995);
IkReal x4004=((1.0)*x3994);
IkReal x4005=(gconst112*x3995);
IkReal x4006=(gconst112*x3994);
evalcond[0]=(((x3994*x3997))+(((-1.0)*r22*x4003))+(((-1.0)*x3996*x4004)));
evalcond[1]=(cj0+(((-1.0)*x4000*x4004))+(((-1.0)*r12*x4003))+((r11*x4006)));
evalcond[2]=((((-1.0)*x3999*x4004))+(((-1.0)*r02*x4003))+(((-1.0)*x4001))+((r01*x4006)));
evalcond[3]=(((x3995*x3997))+((sj1*sj2))+((r22*x3994))+(((-1.0)*x3996*x4003))+(((-1.0)*cj1*x3998)));
evalcond[4]=((((-1.0)*x3999*x4003))+(((-1.0)*cj0*x4002))+((r01*x4005))+(((-1.0)*cj0*sj1*x3998))+((r02*x3994)));
evalcond[5]=((((-1.0)*x4001*x4002))+(((-1.0)*x4000*x4003))+((r12*x3994))+(((-1.0)*sj0*sj1*x3998))+((r11*x4005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4007=((1.0)*gconst113);
CheckValue<IkReal> x4008 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4007))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4008.valid){
continue;
}
CheckValue<IkReal> x4009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4007))+(((-1.0)*gconst112*r00)))),-1);
if(!x4009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4008.value)+(((1.5707963267949)*(x4009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4010=IKsin(j4);
IkReal x4011=IKcos(j4);
IkReal x4012=(gconst113*r20);
IkReal x4013=(gconst112*r21);
IkReal x4014=((1.0)*cj2);
IkReal x4015=(gconst113*r00);
IkReal x4016=(gconst113*r10);
IkReal x4017=((1.0)*sj0);
IkReal x4018=(cj1*sj2);
IkReal x4019=((1.0)*x4011);
IkReal x4020=((1.0)*x4010);
IkReal x4021=(gconst112*x4011);
IkReal x4022=(gconst112*x4010);
evalcond[0]=(((x4010*x4013))+(((-1.0)*r22*x4019))+(((-1.0)*x4012*x4020)));
evalcond[1]=((((-1.0)*r12*x4019))+cj0+(((-1.0)*x4016*x4020))+((r11*x4022)));
evalcond[2]=(((r01*x4022))+(((-1.0)*r02*x4019))+(((-1.0)*x4017))+(((-1.0)*x4015*x4020)));
evalcond[3]=((((-1.0)*x4012*x4019))+(((-1.0)*cj1*x4014))+((sj1*sj2))+((x4011*x4013))+((r22*x4010)));
evalcond[4]=(((r02*x4010))+(((-1.0)*cj0*x4018))+(((-1.0)*cj0*sj1*x4014))+((r01*x4021))+(((-1.0)*x4015*x4019)));
evalcond[5]=((((-1.0)*sj0*sj1*x4014))+((r12*x4010))+(((-1.0)*x4017*x4018))+((r11*x4021))+(((-1.0)*x4016*x4019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4023=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4023;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4023);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4024=((1.0)*cj5);
IkReal x4025=((((-1.0)*r11*x4024))+(((-1.0)*r10*sj5)));
j4eval[0]=x4025;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4024)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4025);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4026=cj5*cj5;
IkReal x4027=r01*r01;
IkReal x4028=(cj5*r00);
IkReal x4029=(r01*sj5);
IkReal x4030=(((x4026*(r00*r00)))+(((-1.0)*x4026*x4027))+x4027+(r02*r02)+(((-2.0)*x4028*x4029)));
j4eval[0]=x4030;
j4eval[1]=IKsign(x4030);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4028))+x4029))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4031=cj5*cj5;
IkReal x4032=r01*r01;
IkReal x4033=(r01*sj5);
IkReal x4034=(cj5*r00);
CheckValue<IkReal> x4035=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4033*x4034))+(((-1.0)*x4031*x4032))+x4032+(r02*r02)+((x4031*(r00*r00))))),-1);
if(!x4035.valid){
continue;
}
CheckValue<IkReal> x4036 = IKatan2WithCheck(IkReal((x4033+(((-1.0)*x4034)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4035.value)))+(x4036.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4037=IKcos(j4);
IkReal x4038=IKsin(j4);
IkReal x4039=(cj5*r00);
IkReal x4040=(cj5*r10);
IkReal x4041=(r21*sj5);
IkReal x4042=((1.0)*cj2);
IkReal x4043=(cj5*r20);
IkReal x4044=((1.0)*x4037);
IkReal x4045=((1.0)*x4038);
IkReal x4046=(sj5*x4038);
IkReal x4047=(sj5*x4037);
evalcond[0]=((((-1.0)*x4039*x4044))+((r02*x4038))+((r01*x4047)));
evalcond[1]=((((-1.0)*x4043*x4045))+((x4038*x4041))+(((-1.0)*r22*x4044)));
evalcond[2]=((((-1.0)*r12*x4044))+((r11*x4046))+(((-1.0)*x4040*x4045)));
evalcond[3]=((-1.0)+(((-1.0)*x4039*x4045))+(((-1.0)*r02*x4044))+((r01*x4046)));
evalcond[4]=((((-1.0)*x4043*x4044))+((x4037*x4041))+((sj1*sj2))+(((-1.0)*cj1*x4042))+((r22*x4038)));
evalcond[5]=((((-1.0)*sj1*x4042))+(((-1.0)*cj1*sj2))+((r11*x4047))+(((-1.0)*x4040*x4044))+((r12*x4038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4048=((1.0)*cj5);
CheckValue<IkReal> x4049 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4048))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4049.valid){
continue;
}
CheckValue<IkReal> x4050=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4048)))),-1);
if(!x4050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4049.value)+(((1.5707963267949)*(x4050.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4051=IKcos(j4);
IkReal x4052=IKsin(j4);
IkReal x4053=(cj5*r00);
IkReal x4054=(cj5*r10);
IkReal x4055=(r21*sj5);
IkReal x4056=((1.0)*cj2);
IkReal x4057=(cj5*r20);
IkReal x4058=((1.0)*x4051);
IkReal x4059=((1.0)*x4052);
IkReal x4060=(sj5*x4052);
IkReal x4061=(sj5*x4051);
evalcond[0]=(((r02*x4052))+(((-1.0)*x4053*x4058))+((r01*x4061)));
evalcond[1]=((((-1.0)*x4057*x4059))+(((-1.0)*r22*x4058))+((x4052*x4055)));
evalcond[2]=((((-1.0)*r12*x4058))+((r11*x4060))+(((-1.0)*x4054*x4059)));
evalcond[3]=((-1.0)+(((-1.0)*x4053*x4059))+(((-1.0)*r02*x4058))+((r01*x4060)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x4057*x4058))+((x4051*x4055))+(((-1.0)*cj1*x4056))+((r22*x4052)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4061))+((r12*x4052))+(((-1.0)*x4054*x4058))+(((-1.0)*sj1*x4056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4062=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4062.valid){
continue;
}
CheckValue<IkReal> x4063 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4062.value)))+(x4063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4064=IKcos(j4);
IkReal x4065=IKsin(j4);
IkReal x4066=(cj5*r00);
IkReal x4067=(cj5*r10);
IkReal x4068=(r21*sj5);
IkReal x4069=((1.0)*cj2);
IkReal x4070=(cj5*r20);
IkReal x4071=((1.0)*x4064);
IkReal x4072=((1.0)*x4065);
IkReal x4073=(sj5*x4065);
IkReal x4074=(sj5*x4064);
evalcond[0]=(((r02*x4065))+((r01*x4074))+(((-1.0)*x4066*x4071)));
evalcond[1]=((((-1.0)*x4070*x4072))+(((-1.0)*r22*x4071))+((x4065*x4068)));
evalcond[2]=((((-1.0)*x4067*x4072))+(((-1.0)*r12*x4071))+((r11*x4073)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4071))+((r01*x4073))+(((-1.0)*x4066*x4072)));
evalcond[4]=((((-1.0)*x4070*x4071))+((x4064*x4068))+((sj1*sj2))+(((-1.0)*cj1*x4069))+((r22*x4065)));
evalcond[5]=((((-1.0)*x4067*x4071))+(((-1.0)*cj1*sj2))+((r12*x4065))+((r11*x4074))+(((-1.0)*sj1*x4069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4075=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4075;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4075);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4076=((1.0)*cj5);
IkReal x4077=((((-1.0)*r21*x4076))+(((-1.0)*r20*sj5)));
j4eval[0]=x4077;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4076))+((r11*sj5))))));
j4eval[2]=IKsign(x4077);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4078=cj5*cj5;
IkReal x4079=r01*r01;
IkReal x4080=(r01*sj5);
IkReal x4081=(cj5*r00);
IkReal x4082=((((-1.0)*x4078*(r00*r00)))+((x4078*x4079))+(((-1.0)*x4079))+(((-1.0)*(r02*r02)))+(((2.0)*x4080*x4081)));
j4eval[0]=x4082;
j4eval[1]=IKsign(x4082);
j4eval[2]=((IKabs(r02))+(IKabs((x4080+(((-1.0)*x4081))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4083=cj5*cj5;
IkReal x4084=r01*r01;
IkReal x4085=(r01*sj5);
IkReal x4086=(cj5*r00);
CheckValue<IkReal> x4087=IKPowWithIntegerCheck(IKsign((((x4083*x4084))+(((-1.0)*x4083*(r00*r00)))+(((2.0)*x4085*x4086))+(((-1.0)*(r02*r02)))+(((-1.0)*x4084)))),-1);
if(!x4087.valid){
continue;
}
CheckValue<IkReal> x4088 = IKatan2WithCheck(IkReal((x4085+(((-1.0)*x4086)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4087.value)))+(x4088.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4089=IKcos(j4);
IkReal x4090=IKsin(j4);
IkReal x4091=(cj5*r00);
IkReal x4092=(cj5*r10);
IkReal x4093=(r21*sj5);
IkReal x4094=(cj5*r20);
IkReal x4095=((1.0)*x4089);
IkReal x4096=((1.0)*x4090);
IkReal x4097=(sj5*x4090);
IkReal x4098=(sj5*x4089);
evalcond[0]=(((r01*x4098))+((r02*x4090))+(((-1.0)*x4091*x4095)));
evalcond[1]=((((-1.0)*r22*x4095))+((x4090*x4093))+(((-1.0)*x4094*x4096)));
evalcond[2]=((((-1.0)*r12*x4095))+(((-1.0)*x4092*x4096))+((r11*x4097)));
evalcond[3]=((1.0)+((r01*x4097))+(((-1.0)*r02*x4095))+(((-1.0)*x4091*x4096)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4092*x4095))+((r11*x4098))+((r12*x4090)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4090))+((x4089*x4093))+(((-1.0)*x4094*x4095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4099=((1.0)*cj5);
CheckValue<IkReal> x4100=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4099))+(((-1.0)*r20*sj5)))),-1);
if(!x4100.valid){
continue;
}
CheckValue<IkReal> x4101 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4099))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4100.value)))+(x4101.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4102=IKcos(j4);
IkReal x4103=IKsin(j4);
IkReal x4104=(cj5*r00);
IkReal x4105=(cj5*r10);
IkReal x4106=(r21*sj5);
IkReal x4107=(cj5*r20);
IkReal x4108=((1.0)*x4102);
IkReal x4109=((1.0)*x4103);
IkReal x4110=(sj5*x4103);
IkReal x4111=(sj5*x4102);
evalcond[0]=((((-1.0)*x4104*x4108))+((r02*x4103))+((r01*x4111)));
evalcond[1]=((((-1.0)*r22*x4108))+((x4103*x4106))+(((-1.0)*x4107*x4109)));
evalcond[2]=((((-1.0)*x4105*x4109))+(((-1.0)*r12*x4108))+((r11*x4110)));
evalcond[3]=((1.0)+(((-1.0)*x4104*x4109))+((r01*x4110))+(((-1.0)*r02*x4108)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4105*x4108))+((cj1*sj2))+((r12*x4103))+((r11*x4111)));
evalcond[5]=(((r22*x4103))+(((-1.0)*x4107*x4108))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4102*x4106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4112 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4112.valid){
continue;
}
CheckValue<IkReal> x4113=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4112.value)+(((1.5707963267949)*(x4113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4114=IKcos(j4);
IkReal x4115=IKsin(j4);
IkReal x4116=(cj5*r00);
IkReal x4117=(cj5*r10);
IkReal x4118=(r21*sj5);
IkReal x4119=(cj5*r20);
IkReal x4120=((1.0)*x4114);
IkReal x4121=((1.0)*x4115);
IkReal x4122=(sj5*x4115);
IkReal x4123=(sj5*x4114);
evalcond[0]=(((r02*x4115))+(((-1.0)*x4116*x4120))+((r01*x4123)));
evalcond[1]=((((-1.0)*r22*x4120))+(((-1.0)*x4119*x4121))+((x4115*x4118)));
evalcond[2]=((((-1.0)*r12*x4120))+((r11*x4122))+(((-1.0)*x4117*x4121)));
evalcond[3]=((1.0)+(((-1.0)*x4116*x4121))+(((-1.0)*r02*x4120))+((r01*x4122)));
evalcond[4]=(((r12*x4115))+((cj2*sj1))+((cj1*sj2))+((r11*x4123))+(((-1.0)*x4117*x4120)));
evalcond[5]=((((-1.0)*x4119*x4120))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4114*x4118))+((r22*x4115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4124=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4124);
rxp1_1=(px*r21);
rxp1_2=(r11*x4124);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4125=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4125);
rxp1_1=(px*r21);
rxp1_2=(r11*x4125);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4126=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4126);
rxp1_1=(px*r21);
rxp1_2=(r11*x4126);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4129=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4129.valid){
continue;
}
IkReal x4127=x4129.value;
IkReal x4128=(sj0*x4127);
cj4array[0]=(((cj1*sj2*x4128))+((cj2*sj1*x4128)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4130=IKsin(j4);
IkReal x4131=IKcos(j4);
IkReal x4132=(r21*sj5);
IkReal x4133=((1.0)*cj5*r20);
evalcond[0]=(r02*x4130);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4131)));
evalcond[2]=((((-1.0)*x4130*x4133))+((x4130*x4132)));
evalcond[3]=((((-1.0)*cj5*r10*x4130))+((r11*sj5*x4130)));
evalcond[4]=((((-1.0)*x4131*x4133))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4131*x4132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4135=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4135.valid){
continue;
}
IkReal x4134=x4135.value;
cj4array[0]=(((cj1*cj2*x4134))+(((-1.0)*sj1*sj2*x4134)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4136=IKsin(j4);
IkReal x4137=IKcos(j4);
IkReal x4138=((1.0)*sj0);
IkReal x4139=((1.0)*cj5);
IkReal x4140=(sj5*x4136);
evalcond[0]=(r02*x4136);
evalcond[1]=((((-1.0)*x4138))+(((-1.0)*r02*x4137)));
evalcond[2]=(((r21*x4140))+(((-1.0)*r20*x4136*x4139)));
evalcond[3]=(((r11*x4140))+(((-1.0)*r10*x4136*x4139)));
evalcond[4]=((((-1.0)*cj2*sj1*x4138))+(((-1.0)*r10*x4137*x4139))+((r11*sj5*x4137))+(((-1.0)*cj1*sj2*x4138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4141=IKPowWithIntegerCheck(r02,-1);
if(!x4141.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4141.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4142=IKsin(j4);
IkReal x4143=IKcos(j4);
IkReal x4144=((1.0)*cj1);
IkReal x4145=(r21*sj5);
IkReal x4146=((1.0)*cj5);
IkReal x4147=(r11*sj5);
evalcond[0]=(r02*x4142);
evalcond[1]=(((x4142*x4145))+(((-1.0)*r20*x4142*x4146)));
evalcond[2]=(((x4142*x4147))+(((-1.0)*r10*x4142*x4146)));
evalcond[3]=((((-1.0)*r20*x4143*x4146))+((x4143*x4145))+((sj1*sj2))+(((-1.0)*cj2*x4144)));
evalcond[4]=(((x4143*x4147))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x4144))+(((-1.0)*r10*x4143*x4146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4148=((1.0)*sj0);
IkReal x4149=((1.0)*cj0);
CheckValue<IkReal> x4150 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4149))+(((-1.0)*r12*x4148)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4149))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4150.valid){
continue;
}
CheckValue<IkReal> x4151=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4150.value)+(((1.5707963267949)*(x4151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4152=IKsin(j4);
IkReal x4153=IKcos(j4);
IkReal x4154=(cj5*r00);
IkReal x4155=(cj5*r10);
IkReal x4156=(r21*sj5);
IkReal x4157=((1.0)*cj2);
IkReal x4158=((1.0)*sj0);
IkReal x4159=(cj1*sj2);
IkReal x4160=(cj5*r20);
IkReal x4161=((1.0)*x4153);
IkReal x4162=((1.0)*x4152);
IkReal x4163=(sj5*x4152);
IkReal x4164=(sj5*x4153);
evalcond[0]=(((x4152*x4156))+(((-1.0)*x4160*x4162))+(((-1.0)*r22*x4161)));
evalcond[1]=(cj0+(((-1.0)*r12*x4161))+(((-1.0)*x4155*x4162))+((r11*x4163)));
evalcond[2]=(((r01*x4163))+(((-1.0)*r02*x4161))+(((-1.0)*x4154*x4162))+(((-1.0)*x4158)));
evalcond[3]=(((x4153*x4156))+(((-1.0)*x4160*x4161))+((r22*x4152))+((sj1*sj2))+(((-1.0)*cj1*x4157)));
evalcond[4]=(((r01*x4164))+((r02*x4152))+(((-1.0)*cj0*sj1*x4157))+(((-1.0)*x4154*x4161))+(((-1.0)*cj0*x4159)));
evalcond[5]=(((r12*x4152))+(((-1.0)*x4155*x4161))+(((-1.0)*sj0*sj1*x4157))+((r11*x4164))+(((-1.0)*x4158*x4159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4165=((1.0)*cj5);
CheckValue<IkReal> x4166 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4165))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4166.valid){
continue;
}
CheckValue<IkReal> x4167=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4165)))),-1);
if(!x4167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4166.value)+(((1.5707963267949)*(x4167.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4168=IKsin(j4);
IkReal x4169=IKcos(j4);
IkReal x4170=(cj5*r00);
IkReal x4171=(cj5*r10);
IkReal x4172=(r21*sj5);
IkReal x4173=((1.0)*cj2);
IkReal x4174=((1.0)*sj0);
IkReal x4175=(cj1*sj2);
IkReal x4176=(cj5*r20);
IkReal x4177=((1.0)*x4169);
IkReal x4178=((1.0)*x4168);
IkReal x4179=(sj5*x4168);
IkReal x4180=(sj5*x4169);
evalcond[0]=((((-1.0)*x4176*x4178))+(((-1.0)*r22*x4177))+((x4168*x4172)));
evalcond[1]=(((r11*x4179))+(((-1.0)*x4171*x4178))+cj0+(((-1.0)*r12*x4177)));
evalcond[2]=((((-1.0)*x4174))+(((-1.0)*x4170*x4178))+((r01*x4179))+(((-1.0)*r02*x4177)));
evalcond[3]=(((r22*x4168))+(((-1.0)*cj1*x4173))+((x4169*x4172))+(((-1.0)*x4176*x4177))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x4170*x4177))+(((-1.0)*cj0*x4175))+((r01*x4180))+((r02*x4168))+(((-1.0)*cj0*sj1*x4173)));
evalcond[5]=((((-1.0)*x4171*x4177))+((r11*x4180))+(((-1.0)*x4174*x4175))+(((-1.0)*sj0*sj1*x4173))+((r12*x4168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4181=((1.0)*cj5);
CheckValue<IkReal> x4182=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4181))+(((-1.0)*r00*sj5)))),-1);
if(!x4182.valid){
continue;
}
CheckValue<IkReal> x4183 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4181))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4182.value)))+(x4183.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4184=IKsin(j4);
IkReal x4185=IKcos(j4);
IkReal x4186=(cj5*r00);
IkReal x4187=(cj5*r10);
IkReal x4188=(r21*sj5);
IkReal x4189=((1.0)*cj2);
IkReal x4190=((1.0)*sj0);
IkReal x4191=(cj1*sj2);
IkReal x4192=(cj5*r20);
IkReal x4193=((1.0)*x4185);
IkReal x4194=((1.0)*x4184);
IkReal x4195=(sj5*x4184);
IkReal x4196=(sj5*x4185);
evalcond[0]=((((-1.0)*r22*x4193))+((x4184*x4188))+(((-1.0)*x4192*x4194)));
evalcond[1]=((((-1.0)*r12*x4193))+((r11*x4195))+cj0+(((-1.0)*x4187*x4194)));
evalcond[2]=((((-1.0)*x4190))+(((-1.0)*x4186*x4194))+(((-1.0)*r02*x4193))+((r01*x4195)));
evalcond[3]=((((-1.0)*cj1*x4189))+((sj1*sj2))+((r22*x4184))+((x4185*x4188))+(((-1.0)*x4192*x4193)));
evalcond[4]=(((r02*x4184))+(((-1.0)*cj0*sj1*x4189))+(((-1.0)*cj0*x4191))+(((-1.0)*x4186*x4193))+((r01*x4196)));
evalcond[5]=(((r12*x4184))+((r11*x4196))+(((-1.0)*x4187*x4193))+(((-1.0)*x4190*x4191))+(((-1.0)*sj0*sj1*x4189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4197=r21*r21;
IkReal x4198=cj5*cj5;
IkReal x4199=(sj1*sj2);
IkReal x4200=(r21*sj5);
IkReal x4201=(cj1*cj2);
IkReal x4202=(cj5*r20);
CheckValue<IkReal> x4203 = IKatan2WithCheck(IkReal((((r22*x4199))+(((-1.0)*r22*x4201)))),IkReal((((x4199*x4200))+(((-1.0)*x4199*x4202))+((x4201*x4202))+(((-1.0)*x4200*x4201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4203.valid){
continue;
}
CheckValue<IkReal> x4204=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4197))+((x4197*x4198))+(((-1.0)*(r22*r22)))+(((-1.0)*x4198*(r20*r20)))+(((2.0)*x4200*x4202)))),-1);
if(!x4204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4203.value)+(((1.5707963267949)*(x4204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4205=IKsin(j4);
IkReal x4206=IKcos(j4);
IkReal x4207=(r21*sj5);
IkReal x4208=(cj5*r20);
IkReal x4209=((1.0)*x4206);
evalcond[0]=(((x4205*x4207))+(((-1.0)*r22*x4209))+(((-1.0)*x4205*x4208)));
evalcond[1]=(((r22*x4205))+(((-1.0)*x4208*x4209))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4206*x4207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4210=(cj5*sj4);
IkReal x4211=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4210))+((r01*x4211)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x4211))+((r10*x4210))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4210))+((r01*x4211))))+IKsqr(((((-1.0)*r11*x4211))+((r10*x4210))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4210))+((r01*x4211))), ((((-1.0)*r11*x4211))+((r10*x4210))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4212=IKcos(j0);
IkReal x4213=IKsin(j0);
IkReal x4214=((0.1)*sj5);
IkReal x4215=((0.392)*sj1);
IkReal x4216=(cj5*r11);
IkReal x4217=((1.0)*cj1);
IkReal x4218=(r11*sj5);
IkReal x4219=((1.0)*sj5);
IkReal x4220=((1.0)*sj1);
IkReal x4221=((1.0)*cj5);
IkReal x4222=((0.425)*cj1);
IkReal x4223=((1.0)*cj4);
IkReal x4224=(r01*sj5);
IkReal x4225=(sj2*x4213);
IkReal x4226=(sj2*x4212);
IkReal x4227=(cj4*x4221);
IkReal x4228=((0.392)*cj1*cj2);
IkReal x4229=(cj2*x4212);
IkReal x4230=(cj2*x4213);
evalcond[0]=((((-1.0)*r10*sj4*x4221))+(((-1.0)*r12*x4223))+x4212+((sj4*x4218)));
evalcond[1]=(((sj4*x4224))+(((-1.0)*r00*sj4*x4221))+(((-1.0)*r02*x4223))+(((-1.0)*x4213)));
evalcond[2]=((((-1.0)*r00*x4219))+(((-1.0)*r01*x4221))+((sj1*x4226))+(((-1.0)*x4217*x4229)));
evalcond[3]=(((sj1*x4225))+(((-1.0)*x4217*x4230))+(((-1.0)*x4216))+(((-1.0)*r10*x4219)));
evalcond[4]=(((r02*sj4))+(((-1.0)*r00*x4227))+(((-1.0)*x4217*x4226))+(((-1.0)*x4220*x4229))+((cj4*x4224)));
evalcond[5]=(((cj4*x4218))+(((-1.0)*r10*x4227))+(((-1.0)*x4217*x4225))+((r12*sj4))+(((-1.0)*x4220*x4230)));
evalcond[6]=((((-0.134)*x4213))+(((-1.0)*r00*x4214))+((x4212*x4228))+((x4212*x4222))+(((-1.0)*x4215*x4226))+(((-0.1)*cj5*r01))+(((-1.0)*px)));
evalcond[7]=(((x4213*x4228))+((x4213*x4222))+(((-1.0)*x4215*x4225))+(((-0.1)*x4216))+(((-1.0)*py))+(((0.134)*x4212))+(((-1.0)*r10*x4214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4231 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4231.valid){
continue;
}
CheckValue<IkReal> x4232=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4232.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4231.value)+(((1.5707963267949)*(x4232.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4233=IKcos(j0);
IkReal x4234=IKsin(j0);
IkReal x4235=((0.1)*sj5);
IkReal x4236=(cj5*r11);
IkReal x4237=(sj1*sj2);
IkReal x4238=(cj1*cj2);
IkReal x4239=((1.0)*sj5);
IkReal x4240=(cj5*r01);
IkReal x4241=((0.425)*cj1);
IkReal x4242=((0.392)*x4234);
IkReal x4243=((0.392)*x4233);
evalcond[0]=((((-1.0)*x4233*x4238))+(((-1.0)*r00*x4239))+((x4233*x4237))+(((-1.0)*x4240)));
evalcond[1]=((((-1.0)*x4234*x4238))+(((-1.0)*x4236))+(((-1.0)*r10*x4239))+((x4234*x4237)));
evalcond[2]=((((-0.134)*x4234))+(((-0.1)*x4240))+((x4238*x4243))+(((-1.0)*px))+(((-1.0)*r00*x4235))+(((-1.0)*x4237*x4243))+((x4233*x4241)));
evalcond[3]=((((0.134)*x4233))+((x4238*x4242))+(((-0.1)*x4236))+(((-1.0)*r10*x4235))+(((-1.0)*py))+(((-1.0)*x4237*x4242))+((x4234*x4241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4244=((1.0)*cj5);
IkReal x4245=((((-1.0)*r01*x4244))+(((-1.0)*r00*sj5)));
j4eval[0]=x4245;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4244)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4245);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4246=((1.0)*cj5);
IkReal x4247=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4246)));
j4eval[0]=x4247;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4246))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4247);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4248=((1.0)*sj0);
IkReal x4249=((1.0)*cj0);
IkReal x4250=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4250;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x4249))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4248)))))+(IKabs(((((-1.0)*r12*x4248))+(((-1.0)*r02*x4249))))));
j4eval[2]=IKsign(x4250);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4251=((-1.0)*r20);
IkReal x4253 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4253)==0){
continue;
}
IkReal x4252=pow(x4253,-0.5);
CheckValue<IkReal> x4254 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4251),IKFAST_ATAN2_MAGTHRESH);
if(!x4254.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4254.value));
IkReal gconst97=(r21*x4252);
IkReal gconst98=(x4251*x4252);
CheckValue<IkReal> x4255 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4255.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4255.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4256=((-1.0)*r20);
IkReal x4257=x4252;
CheckValue<IkReal> x4259 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4256),IKFAST_ATAN2_MAGTHRESH);
if(!x4259.valid){
continue;
}
IkReal x4258=((-1.0)*(x4259.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4258;
IkReal gconst96=x4258;
IkReal gconst97=(r21*x4257);
IkReal gconst98=(x4256*x4257);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4260=((-1.0)*r20);
IkReal x4261=x4252;
CheckValue<IkReal> x4263 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4260),IKFAST_ATAN2_MAGTHRESH);
if(!x4263.valid){
continue;
}
IkReal x4262=((-1.0)*(x4263.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4262;
IkReal gconst96=x4262;
IkReal gconst97=(r21*x4261);
IkReal gconst98=(x4260*x4261);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4264=((-1.0)*r20);
IkReal x4265=x4252;
CheckValue<IkReal> x4267 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4264),IKFAST_ATAN2_MAGTHRESH);
if(!x4267.valid){
continue;
}
IkReal x4266=((-1.0)*(x4267.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4266;
IkReal gconst96=x4266;
IkReal gconst97=(r21*x4265);
IkReal gconst98=(x4264*x4265);
IkReal x4268=((1.0)*(r22*r22));
CheckValue<IkReal> x4272=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4268))),-1);
if(!x4272.valid){
continue;
}
IkReal x4269=x4272.value;
IkReal x4270=((1.0)*x4269);
IkReal x4271=((((-1.0)*x4270*(r20*r20*r20*r20)))+(((-1.0)*x4268))+(((-1.0)*x4270*(r21*r21*r21*r21)))+(((-2.0)*x4269*(r20*r20)*(r21*r21))));
j4eval[0]=x4271;
j4eval[1]=IKsign(x4271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4273=(cj1*cj2);
IkReal x4274=(gconst98*r20);
IkReal x4275=(sj1*sj2);
IkReal x4276=(gconst97*r21);
CheckValue<IkReal> x4277 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4273))+((r22*x4275)))),IkReal(((((-1.0)*x4273*x4276))+((x4275*x4276))+(((-1.0)*x4274*x4275))+((x4273*x4274)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4277.valid){
continue;
}
CheckValue<IkReal> x4278=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4274*x4274)))+(((-1.0)*(r22*r22)))+(((2.0)*x4274*x4276))+(((-1.0)*(x4276*x4276))))),-1);
if(!x4278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4277.value)+(((1.5707963267949)*(x4278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4279=IKsin(j4);
IkReal x4280=IKcos(j4);
IkReal x4281=(gconst98*r10);
IkReal x4282=(gconst97*r21);
IkReal x4283=(gconst98*r20);
IkReal x4284=((1.0)*cj2);
IkReal x4285=((1.0)*sj0);
IkReal x4286=(gconst98*r00);
IkReal x4287=(cj1*sj2);
IkReal x4288=((1.0)*x4280);
IkReal x4289=((1.0)*x4279);
IkReal x4290=(gconst97*x4279);
IkReal x4291=(gconst97*x4280);
evalcond[0]=((((-1.0)*x4283*x4289))+((x4279*x4282))+(((-1.0)*r22*x4288)));
evalcond[1]=(cj0+(((-1.0)*r12*x4288))+((r11*x4290))+(((-1.0)*x4281*x4289)));
evalcond[2]=((((-1.0)*x4285))+(((-1.0)*x4286*x4289))+((r01*x4290))+(((-1.0)*r02*x4288)));
evalcond[3]=(((x4280*x4282))+(((-1.0)*x4283*x4288))+((sj1*sj2))+(((-1.0)*cj1*x4284))+((r22*x4279)));
evalcond[4]=((((-1.0)*x4286*x4288))+((r02*x4279))+(((-1.0)*cj0*x4287))+((r01*x4291))+(((-1.0)*cj0*sj1*x4284)));
evalcond[5]=(((r12*x4279))+(((-1.0)*sj0*sj1*x4284))+(((-1.0)*x4285*x4287))+((r11*x4291))+(((-1.0)*x4281*x4288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4292=((1.0)*gconst98);
CheckValue<IkReal> x4293 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4292)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4293.valid){
continue;
}
CheckValue<IkReal> x4294=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4292))+(((-1.0)*gconst97*r10)))),-1);
if(!x4294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4293.value)+(((1.5707963267949)*(x4294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4295=IKsin(j4);
IkReal x4296=IKcos(j4);
IkReal x4297=(gconst98*r10);
IkReal x4298=(gconst97*r21);
IkReal x4299=(gconst98*r20);
IkReal x4300=((1.0)*cj2);
IkReal x4301=((1.0)*sj0);
IkReal x4302=(gconst98*r00);
IkReal x4303=(cj1*sj2);
IkReal x4304=((1.0)*x4296);
IkReal x4305=((1.0)*x4295);
IkReal x4306=(gconst97*x4295);
IkReal x4307=(gconst97*x4296);
evalcond[0]=((((-1.0)*r22*x4304))+((x4295*x4298))+(((-1.0)*x4299*x4305)));
evalcond[1]=((((-1.0)*r12*x4304))+((r11*x4306))+cj0+(((-1.0)*x4297*x4305)));
evalcond[2]=(((r01*x4306))+(((-1.0)*r02*x4304))+(((-1.0)*x4301))+(((-1.0)*x4302*x4305)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4300))+((x4296*x4298))+((r22*x4295))+(((-1.0)*x4299*x4304)));
evalcond[4]=((((-1.0)*cj0*sj1*x4300))+(((-1.0)*cj0*x4303))+((r01*x4307))+(((-1.0)*x4302*x4304))+((r02*x4295)));
evalcond[5]=(((r11*x4307))+(((-1.0)*sj0*sj1*x4300))+(((-1.0)*x4297*x4304))+((r12*x4295))+(((-1.0)*x4301*x4303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4308=((1.0)*gconst98);
CheckValue<IkReal> x4309=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4308))+(((-1.0)*gconst97*r00)))),-1);
if(!x4309.valid){
continue;
}
CheckValue<IkReal> x4310 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x4308)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4309.value)))+(x4310.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4311=IKsin(j4);
IkReal x4312=IKcos(j4);
IkReal x4313=(gconst98*r10);
IkReal x4314=(gconst97*r21);
IkReal x4315=(gconst98*r20);
IkReal x4316=((1.0)*cj2);
IkReal x4317=((1.0)*sj0);
IkReal x4318=(gconst98*r00);
IkReal x4319=(cj1*sj2);
IkReal x4320=((1.0)*x4312);
IkReal x4321=((1.0)*x4311);
IkReal x4322=(gconst97*x4311);
IkReal x4323=(gconst97*x4312);
evalcond[0]=(((x4311*x4314))+(((-1.0)*x4315*x4321))+(((-1.0)*r22*x4320)));
evalcond[1]=(cj0+(((-1.0)*x4313*x4321))+(((-1.0)*r12*x4320))+((r11*x4322)));
evalcond[2]=((((-1.0)*r02*x4320))+(((-1.0)*x4317))+((r01*x4322))+(((-1.0)*x4318*x4321)));
evalcond[3]=((((-1.0)*cj1*x4316))+(((-1.0)*x4315*x4320))+((sj1*sj2))+((r22*x4311))+((x4312*x4314)));
evalcond[4]=((((-1.0)*cj0*x4319))+(((-1.0)*cj0*sj1*x4316))+((r02*x4311))+((r01*x4323))+(((-1.0)*x4318*x4320)));
evalcond[5]=((((-1.0)*x4317*x4319))+((r12*x4311))+(((-1.0)*x4313*x4320))+(((-1.0)*sj0*sj1*x4316))+((r11*x4323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4324=((-1.0)*r21);
IkReal x4326 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4326)==0){
continue;
}
IkReal x4325=pow(x4326,-0.5);
CheckValue<IkReal> x4327 = IKatan2WithCheck(IkReal(x4324),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4327.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4327.value))));
IkReal gconst100=(x4324*x4325);
IkReal gconst101=((1.0)*r20*x4325);
CheckValue<IkReal> x4328 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4328.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4328.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4329=((-1.0)*r21);
CheckValue<IkReal> x4332 = IKatan2WithCheck(IkReal(x4329),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4332.valid){
continue;
}
IkReal x4330=((1.0)*(x4332.value));
IkReal x4331=x4325;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4330)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4330)));
IkReal gconst100=(x4329*x4331);
IkReal gconst101=((1.0)*r20*x4331);
IkReal x4333=r22*r22;
IkReal x4334=((1.0)*x4333);
CheckValue<IkReal> x4338=IKPowWithIntegerCheck(((-1.0)+x4333),-1);
if(!x4338.valid){
continue;
}
IkReal x4335=x4338.value;
if((((1.0)+(((-1.0)*x4334)))) < -0.00001)
continue;
IkReal x4336=IKsqrt(((1.0)+(((-1.0)*x4334))));
IkReal x4337=(cj0*x4335*x4336);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x4334*x4337))+x4337))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4339=((-1.0)*r21);
CheckValue<IkReal> x4342 = IKatan2WithCheck(IkReal(x4339),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4342.valid){
continue;
}
IkReal x4340=((1.0)*(x4342.value));
IkReal x4341=x4325;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4340)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4340)));
IkReal gconst100=(x4339*x4341);
IkReal gconst101=((1.0)*r20*x4341);
IkReal x4343=r22*r22;
IkReal x4344=((1.0)*x4343);
CheckValue<IkReal> x4348=IKPowWithIntegerCheck(((-1.0)+x4343),-1);
if(!x4348.valid){
continue;
}
IkReal x4345=x4348.value;
if((((1.0)+(((-1.0)*x4344)))) < -0.00001)
continue;
IkReal x4346=IKsqrt(((1.0)+(((-1.0)*x4344))));
IkReal x4347=(sj0*x4345*x4346);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4344*x4347))+x4347))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4349=((-1.0)*r21);
CheckValue<IkReal> x4352 = IKatan2WithCheck(IkReal(x4349),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4352.valid){
continue;
}
IkReal x4350=((1.0)*(x4352.value));
IkReal x4351=x4325;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4350)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4350)));
IkReal gconst100=(x4349*x4351);
IkReal gconst101=((1.0)*r20*x4351);
IkReal x4353=r22*r22;
IkReal x4354=(r12*sj0);
IkReal x4355=(cj0*r02);
CheckValue<IkReal> x4359=IKPowWithIntegerCheck(((-1.0)+x4353),-1);
if(!x4359.valid){
continue;
}
IkReal x4356=x4359.value;
if((((1.0)+(((-1.0)*x4353)))) < -0.00001)
continue;
IkReal x4357=IKsqrt(((1.0)+(((-1.0)*x4353))));
IkReal x4358=(r22*x4356*x4357);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4355))+(((-1.0)*x4354)))))+(IKabs((((x4354*x4358))+((x4355*x4358))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4360=((1.0)*sj0);
IkReal x4361=((1.0)*gconst100);
CheckValue<IkReal> x4362=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4361))+(((-1.0)*gconst101*r21)))),-1);
if(!x4362.valid){
continue;
}
CheckValue<IkReal> x4363 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4360)))),IkReal(((((-1.0)*gconst100*r11*x4360))+((gconst101*r10*sj0))+(((-1.0)*cj0*r01*x4361))+((cj0*gconst101*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4362.value)))+(x4363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4364=IKsin(j4);
IkReal x4365=IKcos(j4);
IkReal x4366=(gconst101*r20);
IkReal x4367=(gconst101*r10);
IkReal x4368=((1.0)*cj2);
IkReal x4369=(gconst101*r00);
IkReal x4370=((1.0)*sj0);
IkReal x4371=(cj1*sj2);
IkReal x4372=((1.0)*x4365);
IkReal x4373=((1.0)*x4364);
IkReal x4374=(gconst100*x4364);
IkReal x4375=(gconst100*x4365);
evalcond[0]=((((-1.0)*x4366*x4373))+(((-1.0)*r22*x4372))+((r21*x4374)));
evalcond[1]=(cj0+((r11*x4374))+(((-1.0)*x4367*x4373))+(((-1.0)*r12*x4372)));
evalcond[2]=(((r01*x4374))+(((-1.0)*r02*x4372))+(((-1.0)*x4370))+(((-1.0)*x4369*x4373)));
evalcond[3]=((((-1.0)*x4366*x4372))+(((-1.0)*cj1*x4368))+((sj1*sj2))+((r22*x4364))+((r21*x4375)));
evalcond[4]=((((-1.0)*cj0*x4371))+((r01*x4375))+(((-1.0)*cj0*sj1*x4368))+(((-1.0)*x4369*x4372))+((r02*x4364)));
evalcond[5]=((((-1.0)*x4370*x4371))+((r11*x4375))+((r12*x4364))+(((-1.0)*sj0*sj1*x4368))+(((-1.0)*x4367*x4372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4376=((1.0)*gconst101);
CheckValue<IkReal> x4377=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x4376)))),-1);
if(!x4377.valid){
continue;
}
CheckValue<IkReal> x4378 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4376))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4377.value)))+(x4378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4379=IKsin(j4);
IkReal x4380=IKcos(j4);
IkReal x4381=(gconst101*r20);
IkReal x4382=(gconst101*r10);
IkReal x4383=((1.0)*cj2);
IkReal x4384=(gconst101*r00);
IkReal x4385=((1.0)*sj0);
IkReal x4386=(cj1*sj2);
IkReal x4387=((1.0)*x4380);
IkReal x4388=((1.0)*x4379);
IkReal x4389=(gconst100*x4379);
IkReal x4390=(gconst100*x4380);
evalcond[0]=((((-1.0)*x4381*x4388))+(((-1.0)*r22*x4387))+((r21*x4389)));
evalcond[1]=((((-1.0)*r12*x4387))+cj0+(((-1.0)*x4382*x4388))+((r11*x4389)));
evalcond[2]=((((-1.0)*r02*x4387))+(((-1.0)*x4384*x4388))+(((-1.0)*x4385))+((r01*x4389)));
evalcond[3]=(((r22*x4379))+(((-1.0)*x4381*x4387))+((sj1*sj2))+((r21*x4390))+(((-1.0)*cj1*x4383)));
evalcond[4]=(((r01*x4390))+((r02*x4379))+(((-1.0)*cj0*sj1*x4383))+(((-1.0)*x4384*x4387))+(((-1.0)*cj0*x4386)));
evalcond[5]=(((r12*x4379))+(((-1.0)*x4382*x4387))+((r11*x4390))+(((-1.0)*x4385*x4386))+(((-1.0)*sj0*sj1*x4383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4391=((1.0)*gconst101);
CheckValue<IkReal> x4392=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4391)))),-1);
if(!x4392.valid){
continue;
}
CheckValue<IkReal> x4393 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4392.value)))+(x4393.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4394=IKsin(j4);
IkReal x4395=IKcos(j4);
IkReal x4396=(gconst101*r20);
IkReal x4397=(gconst101*r10);
IkReal x4398=((1.0)*cj2);
IkReal x4399=(gconst101*r00);
IkReal x4400=((1.0)*sj0);
IkReal x4401=(cj1*sj2);
IkReal x4402=((1.0)*x4395);
IkReal x4403=((1.0)*x4394);
IkReal x4404=(gconst100*x4394);
IkReal x4405=(gconst100*x4395);
evalcond[0]=(((r21*x4404))+(((-1.0)*x4396*x4403))+(((-1.0)*r22*x4402)));
evalcond[1]=(((r11*x4404))+cj0+(((-1.0)*r12*x4402))+(((-1.0)*x4397*x4403)));
evalcond[2]=(((r01*x4404))+(((-1.0)*r02*x4402))+(((-1.0)*x4399*x4403))+(((-1.0)*x4400)));
evalcond[3]=(((r21*x4405))+((r22*x4394))+(((-1.0)*x4396*x4402))+((sj1*sj2))+(((-1.0)*cj1*x4398)));
evalcond[4]=((((-1.0)*cj0*sj1*x4398))+(((-1.0)*cj0*x4401))+((r02*x4394))+((r01*x4405))+(((-1.0)*x4399*x4402)));
evalcond[5]=((((-1.0)*sj0*sj1*x4398))+((r11*x4405))+(((-1.0)*x4400*x4401))+(((-1.0)*x4397*x4402))+((r12*x4394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4406=((-1.0)*r10);
IkReal x4408 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4408)==0){
continue;
}
IkReal x4407=pow(x4408,-0.5);
CheckValue<IkReal> x4409 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4406),IKFAST_ATAN2_MAGTHRESH);
if(!x4409.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4409.value));
IkReal gconst103=(r11*x4407);
IkReal gconst104=(x4406*x4407);
CheckValue<IkReal> x4410 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4410.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4410.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4411=((-1.0)*r10);
IkReal x4412=x4407;
CheckValue<IkReal> x4414 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4411),IKFAST_ATAN2_MAGTHRESH);
if(!x4414.valid){
continue;
}
IkReal x4413=((-1.0)*(x4414.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4413;
IkReal gconst102=x4413;
IkReal gconst103=(r11*x4412);
IkReal gconst104=(x4411*x4412);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4415=((1.0)*sj0);
IkReal x4416=((1.0)*gconst103);
CheckValue<IkReal> x4417 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4415)))),IkReal(((((-1.0)*cj0*r01*x4416))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x4415))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4417.valid){
continue;
}
CheckValue<IkReal> x4418=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4416)))),-1);
if(!x4418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4417.value)+(((1.5707963267949)*(x4418.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4419=IKsin(j4);
IkReal x4420=IKcos(j4);
IkReal x4421=(gconst103*r11);
IkReal x4422=((1.0)*cj2);
IkReal x4423=((1.0)*sj0);
IkReal x4424=(cj1*sj2);
IkReal x4425=((1.0)*x4420);
IkReal x4426=(gconst103*x4420);
IkReal x4427=(gconst103*x4419);
IkReal x4428=((1.0)*gconst104*x4419);
evalcond[0]=((((-1.0)*r22*x4425))+(((-1.0)*r20*x4428))+((r21*x4427)));
evalcond[1]=(cj0+((x4419*x4421))+(((-1.0)*r12*x4425))+(((-1.0)*r10*x4428)));
evalcond[2]=((((-1.0)*x4423))+((r01*x4427))+(((-1.0)*r02*x4425))+(((-1.0)*r00*x4428)));
evalcond[3]=(((r22*x4419))+(((-1.0)*gconst104*r20*x4425))+((sj1*sj2))+((r21*x4426))+(((-1.0)*cj1*x4422)));
evalcond[4]=((((-1.0)*cj0*x4424))+(((-1.0)*cj0*sj1*x4422))+((r01*x4426))+((r02*x4419))+(((-1.0)*gconst104*r00*x4425)));
evalcond[5]=((((-1.0)*x4423*x4424))+((x4420*x4421))+((r12*x4419))+(((-1.0)*sj0*sj1*x4422))+(((-1.0)*gconst104*r10*x4425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4429=((1.0)*gconst104);
CheckValue<IkReal> x4430 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4429))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4430.valid){
continue;
}
CheckValue<IkReal> x4431=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4429))+(((-1.0)*gconst103*r00)))),-1);
if(!x4431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4430.value)+(((1.5707963267949)*(x4431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4432=IKsin(j4);
IkReal x4433=IKcos(j4);
IkReal x4434=(gconst103*r11);
IkReal x4435=((1.0)*cj2);
IkReal x4436=((1.0)*sj0);
IkReal x4437=(cj1*sj2);
IkReal x4438=((1.0)*x4433);
IkReal x4439=(gconst103*x4433);
IkReal x4440=(gconst103*x4432);
IkReal x4441=((1.0)*gconst104*x4432);
evalcond[0]=(((r21*x4440))+(((-1.0)*r22*x4438))+(((-1.0)*r20*x4441)));
evalcond[1]=(((x4432*x4434))+cj0+(((-1.0)*r12*x4438))+(((-1.0)*r10*x4441)));
evalcond[2]=((((-1.0)*r02*x4438))+((r01*x4440))+(((-1.0)*x4436))+(((-1.0)*r00*x4441)));
evalcond[3]=(((r22*x4432))+((sj1*sj2))+(((-1.0)*cj1*x4435))+(((-1.0)*gconst104*r20*x4438))+((r21*x4439)));
evalcond[4]=((((-1.0)*cj0*x4437))+(((-1.0)*cj0*sj1*x4435))+(((-1.0)*gconst104*r00*x4438))+((r02*x4432))+((r01*x4439)));
evalcond[5]=((((-1.0)*gconst104*r10*x4438))+((r12*x4432))+(((-1.0)*x4436*x4437))+((x4433*x4434))+(((-1.0)*sj0*sj1*x4435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4442=((-1.0)*r11);
IkReal x4444 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4444)==0){
continue;
}
IkReal x4443=pow(x4444,-0.5);
CheckValue<IkReal> x4445 = IKatan2WithCheck(IkReal(x4442),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4445.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4445.value))));
IkReal gconst106=(x4442*x4443);
IkReal gconst107=((1.0)*r10*x4443);
CheckValue<IkReal> x4446 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4446.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4446.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4447=((-1.0)*r11);
CheckValue<IkReal> x4450 = IKatan2WithCheck(IkReal(x4447),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4450.valid){
continue;
}
IkReal x4448=((1.0)*(x4450.value));
IkReal x4449=x4443;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4448)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4448)));
IkReal gconst106=(x4447*x4449);
IkReal gconst107=((1.0)*r10*x4449);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4451=((-1.0)*r11);
CheckValue<IkReal> x4454 = IKatan2WithCheck(IkReal(x4451),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4454.valid){
continue;
}
IkReal x4452=((1.0)*(x4454.value));
IkReal x4453=x4443;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4452)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4452)));
IkReal gconst106=(x4451*x4453);
IkReal gconst107=((1.0)*r10*x4453);
IkReal x4455=r12*r12;
IkReal x4456=((1.0)*sj0);
IkReal x4457=(cj0*r02);
IkReal x4458=x4443;
j4eval[0]=((IKabs(((((-1.0)*x4456*x4458))+((r12*x4457*x4458))+((sj0*x4455*x4458)))))+(IKabs(((((-1.0)*r12*x4456))+(((-1.0)*x4457))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4459=((-1.0)*r11);
CheckValue<IkReal> x4462 = IKatan2WithCheck(IkReal(x4459),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4462.valid){
continue;
}
IkReal x4460=((1.0)*(x4462.value));
IkReal x4461=x4443;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4460)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4460)));
IkReal gconst106=(x4459*x4461);
IkReal gconst107=((1.0)*r10*x4461);
IkReal x4463=r12*r12;
IkReal x4464=((1.0)+(((-1.0)*x4463)));
IkReal x4465=(r22*sj1*sj2);
IkReal x4466=(cj1*cj2*r22);
CheckValue<IkReal> x4473=IKPowWithIntegerCheck(x4464,-1);
if(!x4473.valid){
continue;
}
IkReal x4467=x4473.value;
CheckValue<IkReal> x4474=IKPowWithIntegerCheck(((-1.0)+x4463),-1);
if(!x4474.valid){
continue;
}
IkReal x4468=x4474.value;
IkReal x4469=((1.0)*x4467);
if((x4464) < -0.00001)
continue;
IkReal x4470=IKsqrt(x4464);
IkReal x4471=(r12*x4468*x4470);
IkReal x4472=((((-2.0)*r10*r11*r20*r21*x4467))+(((-1.0)*(r22*r22)))+(((-1.0)*x4469*(r10*r10)*(r20*r20)))+(((-1.0)*x4469*(r11*r11)*(r21*r21))));
j4eval[0]=x4472;
j4eval[1]=((IKabs(((((-1.0)*x4465*x4471))+((x4466*x4471)))))+(IKabs((x4465+(((-1.0)*x4466))))));
j4eval[2]=IKsign(x4472);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4475=(sj1*sj2);
IkReal x4476=(gconst106*r21);
IkReal x4477=(gconst107*r20);
IkReal x4478=(cj1*cj2);
CheckValue<IkReal> x4479=IKPowWithIntegerCheck(IKsign(((((2.0)*x4476*x4477))+(((-1.0)*(x4477*x4477)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4476*x4476))))),-1);
if(!x4479.valid){
continue;
}
CheckValue<IkReal> x4480 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4478))+((r22*x4475)))),IkReal(((((-1.0)*x4475*x4477))+((x4477*x4478))+(((-1.0)*x4476*x4478))+((x4475*x4476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4479.value)))+(x4480.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4481=IKsin(j4);
IkReal x4482=IKcos(j4);
IkReal x4483=(gconst107*r10);
IkReal x4484=(gconst107*r00);
IkReal x4485=((1.0)*cj2);
IkReal x4486=(gconst107*r20);
IkReal x4487=((1.0)*sj0);
IkReal x4488=(cj1*sj2);
IkReal x4489=((1.0)*x4482);
IkReal x4490=(gconst106*x4482);
IkReal x4491=(gconst106*x4481);
IkReal x4492=((1.0)*x4481);
evalcond[0]=(((r21*x4491))+(((-1.0)*x4486*x4492))+(((-1.0)*r22*x4489)));
evalcond[1]=((((-1.0)*x4483*x4492))+(((-1.0)*r12*x4489))+cj0+((r11*x4491)));
evalcond[2]=((((-1.0)*x4484*x4492))+(((-1.0)*r02*x4489))+((r01*x4491))+(((-1.0)*x4487)));
evalcond[3]=((((-1.0)*x4486*x4489))+(((-1.0)*cj1*x4485))+((sj1*sj2))+((r21*x4490))+((r22*x4481)));
evalcond[4]=((((-1.0)*cj0*x4488))+(((-1.0)*cj0*sj1*x4485))+(((-1.0)*x4484*x4489))+((r02*x4481))+((r01*x4490)));
evalcond[5]=((((-1.0)*x4487*x4488))+(((-1.0)*sj0*sj1*x4485))+((r11*x4490))+((r12*x4481))+(((-1.0)*x4483*x4489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4493=((1.0)*sj0);
IkReal x4494=((1.0)*gconst106);
CheckValue<IkReal> x4495=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4494)))),-1);
if(!x4495.valid){
continue;
}
CheckValue<IkReal> x4496 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4493)))),IkReal(((((-1.0)*gconst106*r11*x4493))+((gconst107*r10*sj0))+(((-1.0)*cj0*r01*x4494))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4495.value)))+(x4496.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4497=IKsin(j4);
IkReal x4498=IKcos(j4);
IkReal x4499=(gconst107*r10);
IkReal x4500=(gconst107*r00);
IkReal x4501=((1.0)*cj2);
IkReal x4502=(gconst107*r20);
IkReal x4503=((1.0)*sj0);
IkReal x4504=(cj1*sj2);
IkReal x4505=((1.0)*x4498);
IkReal x4506=(gconst106*x4498);
IkReal x4507=(gconst106*x4497);
IkReal x4508=((1.0)*x4497);
evalcond[0]=(((r21*x4507))+(((-1.0)*r22*x4505))+(((-1.0)*x4502*x4508)));
evalcond[1]=(cj0+((r11*x4507))+(((-1.0)*r12*x4505))+(((-1.0)*x4499*x4508)));
evalcond[2]=((((-1.0)*x4503))+(((-1.0)*r02*x4505))+(((-1.0)*x4500*x4508))+((r01*x4507)));
evalcond[3]=((((-1.0)*cj1*x4501))+((r21*x4506))+((sj1*sj2))+((r22*x4497))+(((-1.0)*x4502*x4505)));
evalcond[4]=(((r02*x4497))+(((-1.0)*cj0*x4504))+(((-1.0)*x4500*x4505))+((r01*x4506))+(((-1.0)*cj0*sj1*x4501)));
evalcond[5]=(((r12*x4497))+((r11*x4506))+(((-1.0)*x4503*x4504))+(((-1.0)*sj0*sj1*x4501))+(((-1.0)*x4499*x4505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4509=((1.0)*gconst107);
CheckValue<IkReal> x4510 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4509))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4510.valid){
continue;
}
CheckValue<IkReal> x4511=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4509)))),-1);
if(!x4511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4510.value)+(((1.5707963267949)*(x4511.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4512=IKsin(j4);
IkReal x4513=IKcos(j4);
IkReal x4514=(gconst107*r10);
IkReal x4515=(gconst107*r00);
IkReal x4516=((1.0)*cj2);
IkReal x4517=(gconst107*r20);
IkReal x4518=((1.0)*sj0);
IkReal x4519=(cj1*sj2);
IkReal x4520=((1.0)*x4513);
IkReal x4521=(gconst106*x4513);
IkReal x4522=(gconst106*x4512);
IkReal x4523=((1.0)*x4512);
evalcond[0]=(((r21*x4522))+(((-1.0)*r22*x4520))+(((-1.0)*x4517*x4523)));
evalcond[1]=((((-1.0)*r12*x4520))+((r11*x4522))+cj0+(((-1.0)*x4514*x4523)));
evalcond[2]=(((r01*x4522))+(((-1.0)*x4518))+(((-1.0)*r02*x4520))+(((-1.0)*x4515*x4523)));
evalcond[3]=((((-1.0)*cj1*x4516))+((r21*x4521))+((sj1*sj2))+(((-1.0)*x4517*x4520))+((r22*x4512)));
evalcond[4]=(((r02*x4512))+((r01*x4521))+(((-1.0)*cj0*x4519))+(((-1.0)*cj0*sj1*x4516))+(((-1.0)*x4515*x4520)));
evalcond[5]=(((r11*x4521))+(((-1.0)*x4518*x4519))+(((-1.0)*sj0*sj1*x4516))+(((-1.0)*x4514*x4520))+((r12*x4512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4524=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4524;
j4eval[1]=IKsign(x4524);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4525=((1.0)*cj5);
IkReal x4526=((((-1.0)*r01*x4525))+(((-1.0)*r00*sj5)));
j4eval[0]=x4526;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4525))))));
j4eval[2]=IKsign(x4526);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4527=(sj1*sj2);
IkReal x4528=(cj5*r10);
IkReal x4529=(r11*sj5);
IkReal x4530=(cj1*cj2);
IkReal x4531=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4531;
j4eval[1]=((IKabs((((x4528*x4530))+((x4527*x4529))+(((-1.0)*x4527*x4528))+(((-1.0)*x4529*x4530)))))+(IKabs(((((-1.0)*r12*x4527))+((r12*x4530))))));
j4eval[2]=IKsign(x4531);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4532=(sj1*sj2);
IkReal x4533=(cj5*r10);
IkReal x4534=(r11*sj5);
IkReal x4535=(cj1*cj2);
CheckValue<IkReal> x4536=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4536.valid){
continue;
}
CheckValue<IkReal> x4537 = IKatan2WithCheck(IkReal(((((-1.0)*x4534*x4535))+((x4532*x4534))+((x4533*x4535))+(((-1.0)*x4532*x4533)))),IkReal((((r12*x4535))+(((-1.0)*r12*x4532)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4536.value)))+(x4537.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4538=IKcos(j4);
IkReal x4539=IKsin(j4);
IkReal x4540=(cj5*r00);
IkReal x4541=(cj5*r10);
IkReal x4542=(r21*sj5);
IkReal x4543=((1.0)*cj2);
IkReal x4544=(cj5*r20);
IkReal x4545=((1.0)*x4538);
IkReal x4546=((1.0)*x4539);
IkReal x4547=(sj5*x4539);
IkReal x4548=(sj5*x4538);
evalcond[0]=(((r12*x4539))+(((-1.0)*x4541*x4545))+((r11*x4548)));
evalcond[1]=((((-1.0)*r22*x4545))+(((-1.0)*x4544*x4546))+((x4539*x4542)));
evalcond[2]=((((-1.0)*r02*x4545))+((r01*x4547))+(((-1.0)*x4540*x4546)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4545))+(((-1.0)*x4541*x4546))+((r11*x4547)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x4544*x4545))+((r22*x4539))+(((-1.0)*cj1*x4543))+((x4538*x4542)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x4548))+(((-1.0)*x4540*x4545))+((r02*x4539))+(((-1.0)*sj1*x4543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4549=((1.0)*cj5);
CheckValue<IkReal> x4550 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4549)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4550.valid){
continue;
}
CheckValue<IkReal> x4551=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4549)))),-1);
if(!x4551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4550.value)+(((1.5707963267949)*(x4551.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4552=IKcos(j4);
IkReal x4553=IKsin(j4);
IkReal x4554=(cj5*r00);
IkReal x4555=(cj5*r10);
IkReal x4556=(r21*sj5);
IkReal x4557=((1.0)*cj2);
IkReal x4558=(cj5*r20);
IkReal x4559=((1.0)*x4552);
IkReal x4560=((1.0)*x4553);
IkReal x4561=(sj5*x4553);
IkReal x4562=(sj5*x4552);
evalcond[0]=(((r11*x4562))+(((-1.0)*x4555*x4559))+((r12*x4553)));
evalcond[1]=(((x4553*x4556))+(((-1.0)*x4558*x4560))+(((-1.0)*r22*x4559)));
evalcond[2]=((((-1.0)*r02*x4559))+((r01*x4561))+(((-1.0)*x4554*x4560)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4559))+((r11*x4561))+(((-1.0)*x4555*x4560)));
evalcond[4]=(((x4552*x4556))+(((-1.0)*cj1*x4557))+((sj1*sj2))+((r22*x4553))+(((-1.0)*x4558*x4559)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r02*x4553))+(((-1.0)*x4554*x4559))+((r01*x4562))+(((-1.0)*sj1*x4557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4563=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4563.valid){
continue;
}
CheckValue<IkReal> x4564 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4563.value)))+(x4564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4565=IKcos(j4);
IkReal x4566=IKsin(j4);
IkReal x4567=(cj5*r00);
IkReal x4568=(cj5*r10);
IkReal x4569=(r21*sj5);
IkReal x4570=((1.0)*cj2);
IkReal x4571=(cj5*r20);
IkReal x4572=((1.0)*x4565);
IkReal x4573=((1.0)*x4566);
IkReal x4574=(sj5*x4566);
IkReal x4575=(sj5*x4565);
evalcond[0]=(((r12*x4566))+((r11*x4575))+(((-1.0)*x4568*x4572)));
evalcond[1]=(((x4566*x4569))+(((-1.0)*x4571*x4573))+(((-1.0)*r22*x4572)));
evalcond[2]=((((-1.0)*x4567*x4573))+(((-1.0)*r02*x4572))+((r01*x4574)));
evalcond[3]=((1.0)+((r11*x4574))+(((-1.0)*x4568*x4573))+(((-1.0)*r12*x4572)));
evalcond[4]=(((x4565*x4569))+(((-1.0)*cj1*x4570))+((r22*x4566))+(((-1.0)*x4571*x4572))+((sj1*sj2)));
evalcond[5]=((((-1.0)*sj1*x4570))+(((-1.0)*x4567*x4572))+((r02*x4566))+(((-1.0)*cj1*sj2))+((r01*x4575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4576=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4576;
j4eval[1]=IKsign(x4576);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4577=((1.0)*cj5);
IkReal x4578=((((-1.0)*r21*x4577))+(((-1.0)*r20*sj5)));
j4eval[0]=x4578;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x4577))+((r01*sj5))))));
j4eval[2]=IKsign(x4578);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4579=cj5*cj5;
IkReal x4580=r11*r11;
IkReal x4581=(r11*sj5);
IkReal x4582=(cj5*r10);
IkReal x4583=((r12*r12)+x4580+(((-1.0)*x4579*x4580))+((x4579*(r10*r10)))+(((-2.0)*x4581*x4582)));
j4eval[0]=x4583;
j4eval[1]=IKsign(x4583);
j4eval[2]=((IKabs(r12))+(IKabs((x4581+(((-1.0)*x4582))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4584=cj5*cj5;
IkReal x4585=r11*r11;
IkReal x4586=(cj5*r10);
IkReal x4587=(r11*sj5);
CheckValue<IkReal> x4588 = IKatan2WithCheck(IkReal((x4587+(((-1.0)*x4586)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4588.valid){
continue;
}
CheckValue<IkReal> x4589=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x4586*x4587))+(((-1.0)*x4584*x4585))+x4585+((x4584*(r10*r10))))),-1);
if(!x4589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4588.value)+(((1.5707963267949)*(x4589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4590=IKcos(j4);
IkReal x4591=IKsin(j4);
IkReal x4592=(cj5*r00);
IkReal x4593=(cj5*r10);
IkReal x4594=(r21*sj5);
IkReal x4595=(cj5*r20);
IkReal x4596=((1.0)*x4590);
IkReal x4597=((1.0)*x4591);
IkReal x4598=(sj5*x4591);
IkReal x4599=(sj5*x4590);
evalcond[0]=((((-1.0)*x4593*x4596))+((r11*x4599))+((r12*x4591)));
evalcond[1]=((((-1.0)*r22*x4596))+(((-1.0)*x4595*x4597))+((x4591*x4594)));
evalcond[2]=((((-1.0)*x4592*x4597))+(((-1.0)*r02*x4596))+((r01*x4598)));
evalcond[3]=((-1.0)+(((-1.0)*x4593*x4597))+((r11*x4598))+(((-1.0)*r12*x4596)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x4591))+(((-1.0)*x4592*x4596))+((r01*x4599)));
evalcond[5]=(((r22*x4591))+((x4590*x4594))+(((-1.0)*x4595*x4596))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4600=((1.0)*cj5);
CheckValue<IkReal> x4601=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4600))+(((-1.0)*r20*sj5)))),-1);
if(!x4601.valid){
continue;
}
CheckValue<IkReal> x4602 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4601.value)))+(x4602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4603=IKcos(j4);
IkReal x4604=IKsin(j4);
IkReal x4605=(cj5*r00);
IkReal x4606=(cj5*r10);
IkReal x4607=(r21*sj5);
IkReal x4608=(cj5*r20);
IkReal x4609=((1.0)*x4603);
IkReal x4610=((1.0)*x4604);
IkReal x4611=(sj5*x4604);
IkReal x4612=(sj5*x4603);
evalcond[0]=((((-1.0)*x4606*x4609))+((r12*x4604))+((r11*x4612)));
evalcond[1]=(((x4604*x4607))+(((-1.0)*x4608*x4610))+(((-1.0)*r22*x4609)));
evalcond[2]=((((-1.0)*r02*x4609))+((r01*x4611))+(((-1.0)*x4605*x4610)));
evalcond[3]=((-1.0)+(((-1.0)*x4606*x4610))+((r11*x4611))+(((-1.0)*r12*x4609)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x4612))+((r02*x4604))+(((-1.0)*x4605*x4609)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4603*x4607))+((r22*x4604))+(((-1.0)*x4608*x4609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4613 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4613.valid){
continue;
}
CheckValue<IkReal> x4614=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4613.value)+(((1.5707963267949)*(x4614.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4615=IKcos(j4);
IkReal x4616=IKsin(j4);
IkReal x4617=(cj5*r00);
IkReal x4618=(cj5*r10);
IkReal x4619=(r21*sj5);
IkReal x4620=(cj5*r20);
IkReal x4621=((1.0)*x4615);
IkReal x4622=((1.0)*x4616);
IkReal x4623=(sj5*x4616);
IkReal x4624=(sj5*x4615);
evalcond[0]=(((r11*x4624))+(((-1.0)*x4618*x4621))+((r12*x4616)));
evalcond[1]=((((-1.0)*r22*x4621))+(((-1.0)*x4620*x4622))+((x4616*x4619)));
evalcond[2]=((((-1.0)*r02*x4621))+((r01*x4623))+(((-1.0)*x4617*x4622)));
evalcond[3]=((-1.0)+((r11*x4623))+(((-1.0)*x4618*x4622))+(((-1.0)*r12*x4621)));
evalcond[4]=(((cj2*sj1))+((r02*x4616))+((cj1*sj2))+((r01*x4624))+(((-1.0)*x4617*x4621)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4615*x4619))+((r22*x4616))+(((-1.0)*x4620*x4621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4625=((-1.0)*r00);
IkReal x4627 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4627)==0){
continue;
}
IkReal x4626=pow(x4627,-0.5);
CheckValue<IkReal> x4628 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4625),IKFAST_ATAN2_MAGTHRESH);
if(!x4628.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4628.value));
IkReal gconst109=(r01*x4626);
IkReal gconst110=(x4625*x4626);
CheckValue<IkReal> x4629 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4629.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4629.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4630=((-1.0)*r00);
IkReal x4631=x4626;
CheckValue<IkReal> x4633 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4630),IKFAST_ATAN2_MAGTHRESH);
if(!x4633.valid){
continue;
}
IkReal x4632=((-1.0)*(x4633.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4632;
IkReal gconst108=x4632;
IkReal gconst109=(r01*x4631);
IkReal gconst110=(x4630*x4631);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4634=((1.0)*sj0);
IkReal x4635=((1.0)*gconst109);
CheckValue<IkReal> x4636 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4634)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*cj0*r01*x4635))+(((-1.0)*gconst109*r11*x4634)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4636.valid){
continue;
}
CheckValue<IkReal> x4637=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4635))+(((-1.0)*gconst110*r21)))),-1);
if(!x4637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4636.value)+(((1.5707963267949)*(x4637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4638=IKsin(j4);
IkReal x4639=IKcos(j4);
IkReal x4640=(gconst109*r21);
IkReal x4641=((1.0)*cj2);
IkReal x4642=((1.0)*sj0);
IkReal x4643=(cj1*sj2);
IkReal x4644=((1.0)*x4639);
IkReal x4645=(gconst109*x4638);
IkReal x4646=(gconst109*x4639);
IkReal x4647=((1.0)*gconst110*x4638);
evalcond[0]=(((x4638*x4640))+(((-1.0)*r20*x4647))+(((-1.0)*r22*x4644)));
evalcond[1]=(cj0+(((-1.0)*r10*x4647))+((r11*x4645))+(((-1.0)*r12*x4644)));
evalcond[2]=((((-1.0)*r02*x4644))+(((-1.0)*x4642))+((r01*x4645))+(((-1.0)*r00*x4647)));
evalcond[3]=((((-1.0)*cj1*x4641))+((sj1*sj2))+(((-1.0)*gconst110*r20*x4644))+((x4639*x4640))+((r22*x4638)));
evalcond[4]=((((-1.0)*cj0*x4643))+(((-1.0)*cj0*sj1*x4641))+((r01*x4646))+((r02*x4638))+(((-1.0)*gconst110*r00*x4644)));
evalcond[5]=(((r12*x4638))+(((-1.0)*gconst110*r10*x4644))+((r11*x4646))+(((-1.0)*sj0*sj1*x4641))+(((-1.0)*x4642*x4643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4648=((1.0)*gconst110);
CheckValue<IkReal> x4649 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x4648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4649.valid){
continue;
}
CheckValue<IkReal> x4650=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4648))+(((-1.0)*gconst109*r10)))),-1);
if(!x4650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4649.value)+(((1.5707963267949)*(x4650.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4651=IKsin(j4);
IkReal x4652=IKcos(j4);
IkReal x4653=(gconst109*r21);
IkReal x4654=((1.0)*cj2);
IkReal x4655=((1.0)*sj0);
IkReal x4656=(cj1*sj2);
IkReal x4657=((1.0)*x4652);
IkReal x4658=(gconst109*x4651);
IkReal x4659=(gconst109*x4652);
IkReal x4660=((1.0)*gconst110*x4651);
evalcond[0]=((((-1.0)*r20*x4660))+(((-1.0)*r22*x4657))+((x4651*x4653)));
evalcond[1]=(((r11*x4658))+cj0+(((-1.0)*r10*x4660))+(((-1.0)*r12*x4657)));
evalcond[2]=((((-1.0)*x4655))+(((-1.0)*r02*x4657))+(((-1.0)*r00*x4660))+((r01*x4658)));
evalcond[3]=((((-1.0)*cj1*x4654))+((sj1*sj2))+((x4652*x4653))+((r22*x4651))+(((-1.0)*gconst110*r20*x4657)));
evalcond[4]=((((-1.0)*gconst110*r00*x4657))+(((-1.0)*cj0*x4656))+((r02*x4651))+((r01*x4659))+(((-1.0)*cj0*sj1*x4654)));
evalcond[5]=(((r12*x4651))+((r11*x4659))+(((-1.0)*x4655*x4656))+(((-1.0)*gconst110*r10*x4657))+(((-1.0)*sj0*sj1*x4654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4661=((-1.0)*r01);
IkReal x4663 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4663)==0){
continue;
}
IkReal x4662=pow(x4663,-0.5);
CheckValue<IkReal> x4664 = IKatan2WithCheck(IkReal(x4661),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4664.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4664.value))));
IkReal gconst112=(x4661*x4662);
IkReal gconst113=((1.0)*r00*x4662);
CheckValue<IkReal> x4665 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4665.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4665.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4666=((-1.0)*r01);
CheckValue<IkReal> x4669 = IKatan2WithCheck(IkReal(x4666),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4669.valid){
continue;
}
IkReal x4667=((1.0)*(x4669.value));
IkReal x4668=x4662;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4667)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4667)));
IkReal gconst112=(x4666*x4668);
IkReal gconst113=((1.0)*r00*x4668);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4670=((-1.0)*r01);
CheckValue<IkReal> x4673 = IKatan2WithCheck(IkReal(x4670),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4673.valid){
continue;
}
IkReal x4671=((1.0)*(x4673.value));
IkReal x4672=x4662;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4671)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4671)));
IkReal gconst112=(x4670*x4672);
IkReal gconst113=((1.0)*r00*x4672);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4674=((-1.0)*r01);
CheckValue<IkReal> x4677 = IKatan2WithCheck(IkReal(x4674),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4677.valid){
continue;
}
IkReal x4675=((1.0)*(x4677.value));
IkReal x4676=x4662;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4675)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4675)));
IkReal gconst112=(x4674*x4676);
IkReal gconst113=((1.0)*r00*x4676);
IkReal x4678=r02*r02;
IkReal x4679=(r12*sj0);
IkReal x4680=((1.0)*cj0);
IkReal x4681=x4662;
j4eval[0]=((IKabs(((((-1.0)*x4679))+(((-1.0)*r02*x4680)))))+(IKabs((((cj0*x4678*x4681))+((r02*x4679*x4681))+(((-1.0)*x4680*x4681))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4682=((1.0)*sj0);
IkReal x4683=((1.0)*gconst112);
CheckValue<IkReal> x4684 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4682)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4683))+(((-1.0)*gconst112*r11*x4682)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4684.valid){
continue;
}
CheckValue<IkReal> x4685=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x4683)))),-1);
if(!x4685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4684.value)+(((1.5707963267949)*(x4685.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4686=IKsin(j4);
IkReal x4687=IKcos(j4);
IkReal x4688=(gconst113*r20);
IkReal x4689=(gconst112*r21);
IkReal x4690=((1.0)*cj2);
IkReal x4691=(gconst113*r00);
IkReal x4692=(gconst113*r10);
IkReal x4693=((1.0)*sj0);
IkReal x4694=(cj1*sj2);
IkReal x4695=((1.0)*x4687);
IkReal x4696=((1.0)*x4686);
IkReal x4697=(gconst112*x4687);
IkReal x4698=(gconst112*x4686);
evalcond[0]=((((-1.0)*x4688*x4696))+(((-1.0)*r22*x4695))+((x4686*x4689)));
evalcond[1]=((((-1.0)*r12*x4695))+cj0+(((-1.0)*x4692*x4696))+((r11*x4698)));
evalcond[2]=((((-1.0)*r02*x4695))+((r01*x4698))+(((-1.0)*x4693))+(((-1.0)*x4691*x4696)));
evalcond[3]=((((-1.0)*x4688*x4695))+(((-1.0)*cj1*x4690))+((sj1*sj2))+((r22*x4686))+((x4687*x4689)));
evalcond[4]=(((r02*x4686))+(((-1.0)*cj0*sj1*x4690))+(((-1.0)*cj0*x4694))+((r01*x4697))+(((-1.0)*x4691*x4695)));
evalcond[5]=((((-1.0)*x4692*x4695))+(((-1.0)*sj0*sj1*x4690))+(((-1.0)*x4693*x4694))+((r12*x4686))+((r11*x4697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4699=((1.0)*gconst113);
CheckValue<IkReal> x4700 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4699)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4700.valid){
continue;
}
CheckValue<IkReal> x4701=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r10))+(((-1.0)*r11*x4699)))),-1);
if(!x4701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4700.value)+(((1.5707963267949)*(x4701.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4702=IKsin(j4);
IkReal x4703=IKcos(j4);
IkReal x4704=(gconst113*r20);
IkReal x4705=(gconst112*r21);
IkReal x4706=((1.0)*cj2);
IkReal x4707=(gconst113*r00);
IkReal x4708=(gconst113*r10);
IkReal x4709=((1.0)*sj0);
IkReal x4710=(cj1*sj2);
IkReal x4711=((1.0)*x4703);
IkReal x4712=((1.0)*x4702);
IkReal x4713=(gconst112*x4703);
IkReal x4714=(gconst112*x4702);
evalcond[0]=((((-1.0)*r22*x4711))+(((-1.0)*x4704*x4712))+((x4702*x4705)));
evalcond[1]=(cj0+(((-1.0)*r12*x4711))+(((-1.0)*x4708*x4712))+((r11*x4714)));
evalcond[2]=((((-1.0)*r02*x4711))+((r01*x4714))+(((-1.0)*x4707*x4712))+(((-1.0)*x4709)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x4704*x4711))+(((-1.0)*cj1*x4706))+((r22*x4702))+((x4703*x4705)));
evalcond[4]=((((-1.0)*cj0*x4710))+(((-1.0)*cj0*sj1*x4706))+((r01*x4713))+(((-1.0)*x4707*x4711))+((r02*x4702)));
evalcond[5]=((((-1.0)*sj0*sj1*x4706))+(((-1.0)*x4709*x4710))+(((-1.0)*x4708*x4711))+((r11*x4713))+((r12*x4702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4715=((1.0)*gconst113);
CheckValue<IkReal> x4716=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r00))+(((-1.0)*r01*x4715)))),-1);
if(!x4716.valid){
continue;
}
CheckValue<IkReal> x4717 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4716.value)))+(x4717.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4718=IKsin(j4);
IkReal x4719=IKcos(j4);
IkReal x4720=(gconst113*r20);
IkReal x4721=(gconst112*r21);
IkReal x4722=((1.0)*cj2);
IkReal x4723=(gconst113*r00);
IkReal x4724=(gconst113*r10);
IkReal x4725=((1.0)*sj0);
IkReal x4726=(cj1*sj2);
IkReal x4727=((1.0)*x4719);
IkReal x4728=((1.0)*x4718);
IkReal x4729=(gconst112*x4719);
IkReal x4730=(gconst112*x4718);
evalcond[0]=(((x4718*x4721))+(((-1.0)*r22*x4727))+(((-1.0)*x4720*x4728)));
evalcond[1]=(((r11*x4730))+cj0+(((-1.0)*x4724*x4728))+(((-1.0)*r12*x4727)));
evalcond[2]=((((-1.0)*x4723*x4728))+(((-1.0)*x4725))+(((-1.0)*r02*x4727))+((r01*x4730)));
evalcond[3]=(((r22*x4718))+(((-1.0)*cj1*x4722))+((sj1*sj2))+((x4719*x4721))+(((-1.0)*x4720*x4727)));
evalcond[4]=((((-1.0)*x4723*x4727))+(((-1.0)*cj0*sj1*x4722))+(((-1.0)*cj0*x4726))+((r01*x4729))+((r02*x4718)));
evalcond[5]=(((r11*x4729))+(((-1.0)*x4724*x4727))+(((-1.0)*x4725*x4726))+(((-1.0)*sj0*sj1*x4722))+((r12*x4718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4731=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4731;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4731);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4732=((1.0)*cj5);
IkReal x4733=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4732)));
j4eval[0]=x4733;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4732))))));
j4eval[2]=IKsign(x4733);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4734=cj5*cj5;
IkReal x4735=r01*r01;
IkReal x4736=(cj5*r00);
IkReal x4737=(r01*sj5);
IkReal x4738=((((-1.0)*x4734*x4735))+x4735+(((-2.0)*x4736*x4737))+((x4734*(r00*r00)))+(r02*r02));
j4eval[0]=x4738;
j4eval[1]=IKsign(x4738);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4736))+x4737))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4739=cj5*cj5;
IkReal x4740=r01*r01;
IkReal x4741=(r01*sj5);
IkReal x4742=(cj5*r00);
CheckValue<IkReal> x4743=IKPowWithIntegerCheck(IKsign((((x4739*(r00*r00)))+(((-1.0)*x4739*x4740))+x4740+(((-2.0)*x4741*x4742))+(r02*r02))),-1);
if(!x4743.valid){
continue;
}
CheckValue<IkReal> x4744 = IKatan2WithCheck(IkReal((x4741+(((-1.0)*x4742)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4743.value)))+(x4744.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4745=IKcos(j4);
IkReal x4746=IKsin(j4);
IkReal x4747=(cj5*r00);
IkReal x4748=(cj5*r10);
IkReal x4749=(r21*sj5);
IkReal x4750=((1.0)*cj2);
IkReal x4751=(cj5*r20);
IkReal x4752=((1.0)*x4745);
IkReal x4753=((1.0)*x4746);
IkReal x4754=(sj5*x4746);
IkReal x4755=(sj5*x4745);
evalcond[0]=(((r01*x4755))+((r02*x4746))+(((-1.0)*x4747*x4752)));
evalcond[1]=(((x4746*x4749))+(((-1.0)*r22*x4752))+(((-1.0)*x4751*x4753)));
evalcond[2]=(((r11*x4754))+(((-1.0)*x4748*x4753))+(((-1.0)*r12*x4752)));
evalcond[3]=((-1.0)+((r01*x4754))+(((-1.0)*r02*x4752))+(((-1.0)*x4747*x4753)));
evalcond[4]=((((-1.0)*cj1*x4750))+((sj1*sj2))+(((-1.0)*x4751*x4752))+((r22*x4746))+((x4745*x4749)));
evalcond[5]=(((r11*x4755))+((r12*x4746))+(((-1.0)*sj1*x4750))+(((-1.0)*x4748*x4752))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4756=((1.0)*cj5);
CheckValue<IkReal> x4757 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4756))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4757.valid){
continue;
}
CheckValue<IkReal> x4758=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4756)))),-1);
if(!x4758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4757.value)+(((1.5707963267949)*(x4758.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4759=IKcos(j4);
IkReal x4760=IKsin(j4);
IkReal x4761=(cj5*r00);
IkReal x4762=(cj5*r10);
IkReal x4763=(r21*sj5);
IkReal x4764=((1.0)*cj2);
IkReal x4765=(cj5*r20);
IkReal x4766=((1.0)*x4759);
IkReal x4767=((1.0)*x4760);
IkReal x4768=(sj5*x4760);
IkReal x4769=(sj5*x4759);
evalcond[0]=(((r02*x4760))+(((-1.0)*x4761*x4766))+((r01*x4769)));
evalcond[1]=((((-1.0)*r22*x4766))+(((-1.0)*x4765*x4767))+((x4760*x4763)));
evalcond[2]=((((-1.0)*x4762*x4767))+(((-1.0)*r12*x4766))+((r11*x4768)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4766))+(((-1.0)*x4761*x4767))+((r01*x4768)));
evalcond[4]=(((r22*x4760))+((x4759*x4763))+(((-1.0)*x4765*x4766))+((sj1*sj2))+(((-1.0)*cj1*x4764)));
evalcond[5]=((((-1.0)*x4762*x4766))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4764))+((r12*x4760))+((r11*x4769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4770=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4770.valid){
continue;
}
CheckValue<IkReal> x4771 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4770.value)))+(x4771.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4772=IKcos(j4);
IkReal x4773=IKsin(j4);
IkReal x4774=(cj5*r00);
IkReal x4775=(cj5*r10);
IkReal x4776=(r21*sj5);
IkReal x4777=((1.0)*cj2);
IkReal x4778=(cj5*r20);
IkReal x4779=((1.0)*x4772);
IkReal x4780=((1.0)*x4773);
IkReal x4781=(sj5*x4773);
IkReal x4782=(sj5*x4772);
evalcond[0]=(((r01*x4782))+(((-1.0)*x4774*x4779))+((r02*x4773)));
evalcond[1]=((((-1.0)*r22*x4779))+((x4773*x4776))+(((-1.0)*x4778*x4780)));
evalcond[2]=((((-1.0)*r12*x4779))+((r11*x4781))+(((-1.0)*x4775*x4780)));
evalcond[3]=((-1.0)+((r01*x4781))+(((-1.0)*x4774*x4780))+(((-1.0)*r02*x4779)));
evalcond[4]=((((-1.0)*x4778*x4779))+((x4772*x4776))+(((-1.0)*cj1*x4777))+((sj1*sj2))+((r22*x4773)));
evalcond[5]=((((-1.0)*sj1*x4777))+((r12*x4773))+(((-1.0)*cj1*sj2))+((r11*x4782))+(((-1.0)*x4775*x4779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4783=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4783;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4783);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4784=((1.0)*cj5);
IkReal x4785=((((-1.0)*r21*x4784))+(((-1.0)*r20*sj5)));
j4eval[0]=x4785;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4784))))));
j4eval[2]=IKsign(x4785);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4786=cj5*cj5;
IkReal x4787=r01*r01;
IkReal x4788=(r01*sj5);
IkReal x4789=(cj5*r00);
IkReal x4790=((((-1.0)*x4786*(r00*r00)))+((x4786*x4787))+(((-1.0)*(r02*r02)))+(((-1.0)*x4787))+(((2.0)*x4788*x4789)));
j4eval[0]=x4790;
j4eval[1]=IKsign(x4790);
j4eval[2]=((IKabs(r02))+(IKabs((x4788+(((-1.0)*x4789))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4791=cj5*cj5;
IkReal x4792=r01*r01;
IkReal x4793=(r01*sj5);
IkReal x4794=(cj5*r00);
CheckValue<IkReal> x4795=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x4791*x4792))+(((-1.0)*x4792))+(((-1.0)*x4791*(r00*r00)))+(((2.0)*x4793*x4794)))),-1);
if(!x4795.valid){
continue;
}
CheckValue<IkReal> x4796 = IKatan2WithCheck(IkReal((x4793+(((-1.0)*x4794)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4795.value)))+(x4796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4797=IKcos(j4);
IkReal x4798=IKsin(j4);
IkReal x4799=(cj5*r00);
IkReal x4800=(cj5*r10);
IkReal x4801=(r21*sj5);
IkReal x4802=(cj5*r20);
IkReal x4803=((1.0)*x4797);
IkReal x4804=((1.0)*x4798);
IkReal x4805=(sj5*x4798);
IkReal x4806=(sj5*x4797);
evalcond[0]=(((r01*x4806))+(((-1.0)*x4799*x4803))+((r02*x4798)));
evalcond[1]=((((-1.0)*r22*x4803))+(((-1.0)*x4802*x4804))+((x4798*x4801)));
evalcond[2]=((((-1.0)*x4800*x4804))+(((-1.0)*r12*x4803))+((r11*x4805)));
evalcond[3]=((1.0)+((r01*x4805))+(((-1.0)*x4799*x4804))+(((-1.0)*r02*x4803)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4800*x4803))+((r12*x4798))+((r11*x4806)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4797*x4801))+(((-1.0)*x4802*x4803))+((r22*x4798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4807=((1.0)*cj5);
CheckValue<IkReal> x4808=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4807))+(((-1.0)*r20*sj5)))),-1);
if(!x4808.valid){
continue;
}
CheckValue<IkReal> x4809 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4808.value)))+(x4809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4810=IKcos(j4);
IkReal x4811=IKsin(j4);
IkReal x4812=(cj5*r00);
IkReal x4813=(cj5*r10);
IkReal x4814=(r21*sj5);
IkReal x4815=(cj5*r20);
IkReal x4816=((1.0)*x4810);
IkReal x4817=((1.0)*x4811);
IkReal x4818=(sj5*x4811);
IkReal x4819=(sj5*x4810);
evalcond[0]=(((r02*x4811))+(((-1.0)*x4812*x4816))+((r01*x4819)));
evalcond[1]=((((-1.0)*x4815*x4817))+((x4811*x4814))+(((-1.0)*r22*x4816)));
evalcond[2]=(((r11*x4818))+(((-1.0)*x4813*x4817))+(((-1.0)*r12*x4816)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4816))+(((-1.0)*x4812*x4817))+((r01*x4818)));
evalcond[4]=(((cj2*sj1))+((r11*x4819))+((cj1*sj2))+((r12*x4811))+(((-1.0)*x4813*x4816)));
evalcond[5]=((((-1.0)*x4815*x4816))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4810*x4814))+((r22*x4811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4820 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4820.valid){
continue;
}
CheckValue<IkReal> x4821=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4820.value)+(((1.5707963267949)*(x4821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4822=IKcos(j4);
IkReal x4823=IKsin(j4);
IkReal x4824=(cj5*r00);
IkReal x4825=(cj5*r10);
IkReal x4826=(r21*sj5);
IkReal x4827=(cj5*r20);
IkReal x4828=((1.0)*x4822);
IkReal x4829=((1.0)*x4823);
IkReal x4830=(sj5*x4823);
IkReal x4831=(sj5*x4822);
evalcond[0]=(((r01*x4831))+((r02*x4823))+(((-1.0)*x4824*x4828)));
evalcond[1]=((((-1.0)*x4827*x4829))+((x4823*x4826))+(((-1.0)*r22*x4828)));
evalcond[2]=(((r11*x4830))+(((-1.0)*x4825*x4829))+(((-1.0)*r12*x4828)));
evalcond[3]=((1.0)+((r01*x4830))+(((-1.0)*r02*x4828))+(((-1.0)*x4824*x4829)));
evalcond[4]=(((cj2*sj1))+((r11*x4831))+((cj1*sj2))+(((-1.0)*x4825*x4828))+((r12*x4823)));
evalcond[5]=((((-1.0)*x4827*x4828))+((r22*x4823))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4822*x4826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4832=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4832);
rxp1_1=(px*r21);
rxp1_2=(r11*x4832);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4833=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4833);
rxp1_1=(px*r21);
rxp1_2=(r11*x4833);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4834=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4834);
rxp1_1=(px*r21);
rxp1_2=(r11*x4834);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4837=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4837.valid){
continue;
}
IkReal x4835=x4837.value;
IkReal x4836=(sj0*x4835);
cj4array[0]=(((cj1*sj2*x4836))+((cj2*sj1*x4836)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4838=IKsin(j4);
IkReal x4839=IKcos(j4);
IkReal x4840=(r21*sj5);
IkReal x4841=((1.0)*cj5*r20);
evalcond[0]=(r02*x4838);
evalcond[1]=((((-1.0)*r02*x4839))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x4838*x4841))+((x4838*x4840)));
evalcond[3]=(((r11*sj5*x4838))+(((-1.0)*cj5*r10*x4838)));
evalcond[4]=((((-1.0)*x4839*x4841))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4839*x4840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4843=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4843.valid){
continue;
}
IkReal x4842=x4843.value;
cj4array[0]=(((cj1*cj2*x4842))+(((-1.0)*sj1*sj2*x4842)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4844=IKsin(j4);
IkReal x4845=IKcos(j4);
IkReal x4846=((1.0)*sj0);
IkReal x4847=((1.0)*cj5);
IkReal x4848=(sj5*x4844);
evalcond[0]=(r02*x4844);
evalcond[1]=((((-1.0)*x4846))+(((-1.0)*r02*x4845)));
evalcond[2]=((((-1.0)*r20*x4844*x4847))+((r21*x4848)));
evalcond[3]=(((r11*x4848))+(((-1.0)*r10*x4844*x4847)));
evalcond[4]=(((r11*sj5*x4845))+(((-1.0)*r10*x4845*x4847))+(((-1.0)*cj2*sj1*x4846))+(((-1.0)*cj1*sj2*x4846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4849=IKPowWithIntegerCheck(r02,-1);
if(!x4849.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4849.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4850=IKsin(j4);
IkReal x4851=IKcos(j4);
IkReal x4852=((1.0)*cj1);
IkReal x4853=(r21*sj5);
IkReal x4854=((1.0)*cj5);
IkReal x4855=(r11*sj5);
evalcond[0]=(r02*x4850);
evalcond[1]=((((-1.0)*r20*x4850*x4854))+((x4850*x4853)));
evalcond[2]=((((-1.0)*r10*x4850*x4854))+((x4850*x4855)));
evalcond[3]=((((-1.0)*r20*x4851*x4854))+((sj1*sj2))+(((-1.0)*cj2*x4852))+((x4851*x4853)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x4852))+(((-1.0)*r10*x4851*x4854))+((x4851*x4855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4856=((1.0)*sj0);
IkReal x4857=((1.0)*cj0);
CheckValue<IkReal> x4858 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4856))+(((-1.0)*r02*x4857)))),IkReal(((((-1.0)*r11*sj5*x4856))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4857))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4858.valid){
continue;
}
CheckValue<IkReal> x4859=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4858.value)+(((1.5707963267949)*(x4859.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4860=IKsin(j4);
IkReal x4861=IKcos(j4);
IkReal x4862=(cj5*r00);
IkReal x4863=(cj5*r10);
IkReal x4864=(r21*sj5);
IkReal x4865=((1.0)*cj2);
IkReal x4866=((1.0)*sj0);
IkReal x4867=(cj1*sj2);
IkReal x4868=(cj5*r20);
IkReal x4869=((1.0)*x4861);
IkReal x4870=((1.0)*x4860);
IkReal x4871=(sj5*x4860);
IkReal x4872=(sj5*x4861);
evalcond[0]=((((-1.0)*x4868*x4870))+(((-1.0)*r22*x4869))+((x4860*x4864)));
evalcond[1]=(cj0+(((-1.0)*r12*x4869))+(((-1.0)*x4863*x4870))+((r11*x4871)));
evalcond[2]=(((r01*x4871))+(((-1.0)*x4866))+(((-1.0)*x4862*x4870))+(((-1.0)*r02*x4869)));
evalcond[3]=(((r22*x4860))+((x4861*x4864))+((sj1*sj2))+(((-1.0)*x4868*x4869))+(((-1.0)*cj1*x4865)));
evalcond[4]=((((-1.0)*x4862*x4869))+(((-1.0)*cj0*sj1*x4865))+((r01*x4872))+((r02*x4860))+(((-1.0)*cj0*x4867)));
evalcond[5]=((((-1.0)*x4863*x4869))+((r12*x4860))+(((-1.0)*sj0*sj1*x4865))+(((-1.0)*x4866*x4867))+((r11*x4872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4873=((1.0)*cj5);
CheckValue<IkReal> x4874 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4873)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4874.valid){
continue;
}
CheckValue<IkReal> x4875=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4873)))),-1);
if(!x4875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4874.value)+(((1.5707963267949)*(x4875.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4876=IKsin(j4);
IkReal x4877=IKcos(j4);
IkReal x4878=(cj5*r00);
IkReal x4879=(cj5*r10);
IkReal x4880=(r21*sj5);
IkReal x4881=((1.0)*cj2);
IkReal x4882=((1.0)*sj0);
IkReal x4883=(cj1*sj2);
IkReal x4884=(cj5*r20);
IkReal x4885=((1.0)*x4877);
IkReal x4886=((1.0)*x4876);
IkReal x4887=(sj5*x4876);
IkReal x4888=(sj5*x4877);
evalcond[0]=(((x4876*x4880))+(((-1.0)*x4884*x4886))+(((-1.0)*r22*x4885)));
evalcond[1]=(((r11*x4887))+cj0+(((-1.0)*r12*x4885))+(((-1.0)*x4879*x4886)));
evalcond[2]=((((-1.0)*x4882))+(((-1.0)*r02*x4885))+((r01*x4887))+(((-1.0)*x4878*x4886)));
evalcond[3]=((((-1.0)*cj1*x4881))+((sj1*sj2))+(((-1.0)*x4884*x4885))+((r22*x4876))+((x4877*x4880)));
evalcond[4]=((((-1.0)*cj0*x4883))+((r02*x4876))+(((-1.0)*cj0*sj1*x4881))+((r01*x4888))+(((-1.0)*x4878*x4885)));
evalcond[5]=(((r11*x4888))+(((-1.0)*x4879*x4885))+(((-1.0)*x4882*x4883))+(((-1.0)*sj0*sj1*x4881))+((r12*x4876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4889=((1.0)*cj5);
CheckValue<IkReal> x4890=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4889)))),-1);
if(!x4890.valid){
continue;
}
CheckValue<IkReal> x4891 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4889)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4890.value)))+(x4891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4892=IKsin(j4);
IkReal x4893=IKcos(j4);
IkReal x4894=(cj5*r00);
IkReal x4895=(cj5*r10);
IkReal x4896=(r21*sj5);
IkReal x4897=((1.0)*cj2);
IkReal x4898=((1.0)*sj0);
IkReal x4899=(cj1*sj2);
IkReal x4900=(cj5*r20);
IkReal x4901=((1.0)*x4893);
IkReal x4902=((1.0)*x4892);
IkReal x4903=(sj5*x4892);
IkReal x4904=(sj5*x4893);
evalcond[0]=(((x4892*x4896))+(((-1.0)*r22*x4901))+(((-1.0)*x4900*x4902)));
evalcond[1]=((((-1.0)*r12*x4901))+cj0+(((-1.0)*x4895*x4902))+((r11*x4903)));
evalcond[2]=((((-1.0)*x4898))+(((-1.0)*x4894*x4902))+(((-1.0)*r02*x4901))+((r01*x4903)));
evalcond[3]=((((-1.0)*cj1*x4897))+((sj1*sj2))+(((-1.0)*x4900*x4901))+((r22*x4892))+((x4893*x4896)));
evalcond[4]=((((-1.0)*cj0*x4899))+((r02*x4892))+(((-1.0)*cj0*sj1*x4897))+(((-1.0)*x4894*x4901))+((r01*x4904)));
evalcond[5]=((((-1.0)*x4898*x4899))+((r12*x4892))+(((-1.0)*sj0*sj1*x4897))+(((-1.0)*x4895*x4901))+((r11*x4904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4905=((1.0)*cj5);
IkReal x4906=((1.0)*sj5);
IkReal x4907=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4907;
j0eval[1]=((IKabs(((((-1.0)*r11*x4905))+(((-1.0)*r10*x4906)))))+(IKabs(((((-1.0)*r01*x4905))+(((-1.0)*r00*x4906))))));
j0eval[2]=IKsign(x4907);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4908=r21*r21;
IkReal x4909=cj5*cj5;
IkReal x4910=(cj2*sj1);
IkReal x4911=(cj1*sj2);
IkReal x4912=(r21*sj5);
IkReal x4913=((1.0)*cj5*r20);
IkReal x4914=((((-1.0)*x4908))+(((-1.0)*(r22*r22)))+((x4908*x4909))+(((2.0)*cj5*r20*x4912))+(((-1.0)*x4909*(r20*r20))));
j4eval[0]=x4914;
j4eval[1]=((IKabs((((x4911*x4912))+(((-1.0)*x4911*x4913))+(((-1.0)*x4910*x4913))+((x4910*x4912)))))+(IKabs((((r22*x4910))+((r22*x4911))))));
j4eval[2]=IKsign(x4914);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4915=cj1*cj1;
IkReal x4916=(cj2*sj2);
IkReal x4917=(cj2*sj1);
IkReal x4918=(cj1*sj1);
j0eval[0]=(x4918+x4916+(((-1.08418367346939)*cj1*x4917))+(((-2.0)*x4915*x4916))+(((-1.08418367346939)*sj2*x4915))+(((-2.0)*cj1*cj2*x4917)));
j0eval[1]=((((-1.0)*x4917))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.19192641276835)*py))+(((-0.195493438569105)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19192641276835)*px))+(((0.195493438569105)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.19192641276835)*py))+(((-0.195493438569105)*px))))+IKsqr(((((1.19192641276835)*px))+(((0.195493438569105)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.19192641276835)*py))+(((-0.195493438569105)*px))), ((((1.19192641276835)*px))+(((0.195493438569105)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4919=IKcos(j0);
IkReal x4920=IKsin(j0);
evalcond[0]=((((-0.134)*x4920))+(((-1.0)*px))+(((0.817)*x4919)));
evalcond[1]=((((0.134)*x4919))+(((-1.0)*py))+(((0.817)*x4920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4921=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4921;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4921);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4922=((1.0)*cj5);
IkReal x4923=((((-1.0)*r01*x4922))+(((-1.0)*r00*sj5)));
j4eval[0]=x4923;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4922)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4923);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4924=((1.0)*cj5);
IkReal x4925=((((-1.0)*r01*x4924))+(((-1.0)*r00*sj5)));
j4eval[0]=x4925;
j4eval[1]=IKsign(x4925);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4924))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4926=((1.0)*cj5);
CheckValue<IkReal> x4927=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4926))+(((-1.0)*r00*sj5)))),-1);
if(!x4927.valid){
continue;
}
CheckValue<IkReal> x4928 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4926)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4927.value)))+(x4928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4929=IKcos(j4);
IkReal x4930=IKsin(j4);
IkReal x4931=((1.0)*sj0);
IkReal x4932=(cj5*r00);
IkReal x4933=(cj5*r10);
IkReal x4934=(cj5*r20);
IkReal x4935=((1.0)*x4929);
IkReal x4936=((1.0)*x4930);
IkReal x4937=(sj5*x4929);
IkReal x4938=(sj5*x4930);
evalcond[0]=((((-1.0)*x4934*x4935))+((r22*x4930))+((r21*x4937)));
evalcond[1]=((((-1.0)*x4934*x4936))+((r21*x4938))+(((-1.0)*r22*x4935)));
evalcond[2]=((((-1.0)*x4933*x4936))+cj0+(((-1.0)*r12*x4935))+((r11*x4938)));
evalcond[3]=((((-1.0)*x4932*x4935))+((r01*x4937))+((r02*x4930))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4930))+(((-1.0)*x4933*x4935))+((r11*x4937))+(((-1.0)*x4931)));
evalcond[5]=((((-1.0)*r02*x4935))+(((-1.0)*x4932*x4936))+((r01*x4938))+(((-1.0)*x4931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4939=((1.0)*cj5);
CheckValue<IkReal> x4940 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4940.valid){
continue;
}
CheckValue<IkReal> x4941=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4939))+(((-1.0)*r00*sj5)))),-1);
if(!x4941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4940.value)+(((1.5707963267949)*(x4941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4942=IKcos(j4);
IkReal x4943=IKsin(j4);
IkReal x4944=((1.0)*sj0);
IkReal x4945=(cj5*r00);
IkReal x4946=(cj5*r10);
IkReal x4947=(cj5*r20);
IkReal x4948=((1.0)*x4942);
IkReal x4949=((1.0)*x4943);
IkReal x4950=(sj5*x4942);
IkReal x4951=(sj5*x4943);
evalcond[0]=((((-1.0)*x4947*x4948))+((r21*x4950))+((r22*x4943)));
evalcond[1]=((((-1.0)*x4947*x4949))+(((-1.0)*r22*x4948))+((r21*x4951)));
evalcond[2]=((((-1.0)*x4946*x4949))+cj0+(((-1.0)*r12*x4948))+((r11*x4951)));
evalcond[3]=(((r02*x4943))+(((-1.0)*x4945*x4948))+((r01*x4950))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4946*x4948))+(((-1.0)*x4944))+((r12*x4943))+((r11*x4950)));
evalcond[5]=((((-1.0)*x4944))+(((-1.0)*x4945*x4949))+(((-1.0)*r02*x4948))+((r01*x4951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4952 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4952.valid){
continue;
}
CheckValue<IkReal> x4953=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4952.value)+(((1.5707963267949)*(x4953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4954=IKcos(j4);
IkReal x4955=IKsin(j4);
IkReal x4956=((1.0)*sj0);
IkReal x4957=(cj5*r00);
IkReal x4958=(cj5*r10);
IkReal x4959=(cj5*r20);
IkReal x4960=((1.0)*x4954);
IkReal x4961=((1.0)*x4955);
IkReal x4962=(sj5*x4954);
IkReal x4963=(sj5*x4955);
evalcond[0]=(((r22*x4955))+(((-1.0)*x4959*x4960))+((r21*x4962)));
evalcond[1]=((((-1.0)*x4959*x4961))+(((-1.0)*r22*x4960))+((r21*x4963)));
evalcond[2]=(cj0+(((-1.0)*x4958*x4961))+((r11*x4963))+(((-1.0)*r12*x4960)));
evalcond[3]=((((-1.0)*x4957*x4960))+((r02*x4955))+((r01*x4962))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4958*x4960))+((r12*x4955))+(((-1.0)*x4956))+((r11*x4962)));
evalcond[5]=((((-1.0)*x4957*x4961))+(((-1.0)*x4956))+(((-1.0)*r02*x4960))+((r01*x4963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.73273825150958)*px))+(((7.03596744552376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((1.73273825150958)*px))+(((7.03596744552376)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((1.73273825150958)*px))+(((7.03596744552376)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4964=IKcos(j0);
IkReal x4965=IKsin(j0);
evalcond[0]=((((0.033)*x4964))+(((-1.0)*px))+(((-0.134)*x4965)));
evalcond[1]=((((0.033)*x4965))+(((-1.0)*py))+(((0.134)*x4964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4966=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4966;
j4eval[1]=IKsign(x4966);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4967=((1.0)*cj5);
IkReal x4968=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4967)));
j4eval[0]=x4968;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4967)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4968);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4969=cj5*cj5;
IkReal x4970=((1.0)*r20);
IkReal x4971=(r01*r21);
IkReal x4972=(r21*sj5);
IkReal x4973=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4972))+(((-1.0)*x4971))+((x4969*x4971))+(((-1.0)*r00*x4969*x4970)));
j4eval[0]=x4973;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x4970))+((cj0*x4972))))));
j4eval[2]=IKsign(x4973);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4974=cj5*cj5;
IkReal x4975=((1.0)*r20);
IkReal x4976=(r01*r21);
IkReal x4977=(r21*sj5);
CheckValue<IkReal> x4978 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4975))+((cj0*x4977)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4978.valid){
continue;
}
CheckValue<IkReal> x4979=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4977))+(((-1.0)*x4976))+((x4974*x4976))+(((-1.0)*r00*x4974*x4975)))),-1);
if(!x4979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4978.value)+(((1.5707963267949)*(x4979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4980=IKcos(j4);
IkReal x4981=IKsin(j4);
IkReal x4982=(cj5*r00);
IkReal x4983=(cj5*r10);
IkReal x4984=(cj5*r20);
IkReal x4985=((1.0)*x4980);
IkReal x4986=((1.0)*x4981);
IkReal x4987=(sj5*x4980);
IkReal x4988=(sj5*x4981);
evalcond[0]=(((r22*x4981))+((r21*x4987))+(((-1.0)*x4984*x4985)));
evalcond[1]=((((-1.0)*r22*x4985))+((r21*x4988))+(((-1.0)*x4984*x4986)));
evalcond[2]=(((r01*x4987))+(((-1.0)*x4982*x4985))+cj0+((r02*x4981)));
evalcond[3]=(sj0+((r12*x4981))+((r11*x4987))+(((-1.0)*x4983*x4985)));
evalcond[4]=(cj0+((r11*x4988))+(((-1.0)*r12*x4985))+(((-1.0)*x4983*x4986)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4988))+(((-1.0)*x4982*x4986))+(((-1.0)*r02*x4985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4989=((1.0)*cj5);
CheckValue<IkReal> x4990=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4989)))),-1);
if(!x4990.valid){
continue;
}
CheckValue<IkReal> x4991 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4989)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4990.value)))+(x4991.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4992=IKcos(j4);
IkReal x4993=IKsin(j4);
IkReal x4994=(cj5*r00);
IkReal x4995=(cj5*r10);
IkReal x4996=(cj5*r20);
IkReal x4997=((1.0)*x4992);
IkReal x4998=((1.0)*x4993);
IkReal x4999=(sj5*x4992);
IkReal x5000=(sj5*x4993);
evalcond[0]=(((r22*x4993))+((r21*x4999))+(((-1.0)*x4996*x4997)));
evalcond[1]=((((-1.0)*r22*x4997))+((r21*x5000))+(((-1.0)*x4996*x4998)));
evalcond[2]=(cj0+((r02*x4993))+(((-1.0)*x4994*x4997))+((r01*x4999)));
evalcond[3]=(sj0+((r11*x4999))+((r12*x4993))+(((-1.0)*x4995*x4997)));
evalcond[4]=(((r11*x5000))+cj0+(((-1.0)*r12*x4997))+(((-1.0)*x4995*x4998)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4997))+((r01*x5000))+(((-1.0)*x4994*x4998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5001 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5001.valid){
continue;
}
CheckValue<IkReal> x5002=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5001.value)+(((1.5707963267949)*(x5002.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5003=IKcos(j4);
IkReal x5004=IKsin(j4);
IkReal x5005=(cj5*r00);
IkReal x5006=(cj5*r10);
IkReal x5007=(cj5*r20);
IkReal x5008=((1.0)*x5003);
IkReal x5009=((1.0)*x5004);
IkReal x5010=(sj5*x5003);
IkReal x5011=(sj5*x5004);
evalcond[0]=((((-1.0)*x5007*x5008))+((r21*x5010))+((r22*x5004)));
evalcond[1]=((((-1.0)*x5007*x5009))+((r21*x5011))+(((-1.0)*r22*x5008)));
evalcond[2]=(cj0+((r02*x5004))+((r01*x5010))+(((-1.0)*x5005*x5008)));
evalcond[3]=(((r12*x5004))+sj0+(((-1.0)*x5006*x5008))+((r11*x5010)));
evalcond[4]=(cj0+(((-1.0)*x5006*x5009))+(((-1.0)*r12*x5008))+((r11*x5011)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5011))+(((-1.0)*x5005*x5009))+(((-1.0)*r02*x5008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5012=IKsin(j0);
IkReal x5013=IKcos(j0);
IkReal x5014=((0.1)*sj5);
IkReal x5015=(cj5*r11);
IkReal x5016=(cj5*r01);
evalcond[0]=(((r00*sj5))+x5016+(((-1.0)*x5013)));
evalcond[1]=(((r10*sj5))+x5015+(((-1.0)*x5012)));
evalcond[2]=((((-1.0)*px))+(((-0.134)*x5012))+(((-0.1)*x5016))+(((-1.0)*r00*x5014)));
evalcond[3]=((((-1.0)*r10*x5014))+(((-1.0)*py))+(((0.134)*x5013))+(((-0.1)*x5015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5017=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5017;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5017);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5018=((1.0)*cj5);
IkReal x5019=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5018)));
j4eval[0]=x5019;
j4eval[1]=((IKabs(((((-1.0)*r10*x5018))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5019);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5020=cj5*cj5;
IkReal x5021=(r01*r11);
IkReal x5022=((1.0)*r00);
IkReal x5023=(r01*sj5);
IkReal x5024=(((cj5*r10*x5023))+(((-1.0)*r02*r12))+((x5020*x5021))+(((-1.0)*x5021))+(((-1.0)*r10*x5020*x5022))+((cj5*r00*r11*sj5)));
j4eval[0]=x5024;
j4eval[1]=IKsign(x5024);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5023))+(((-1.0)*cj0*cj5*x5022))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5025=cj5*cj5;
IkReal x5026=(r01*r11);
IkReal x5027=(cj5*r00);
IkReal x5028=(r01*sj5);
CheckValue<IkReal> x5029=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5028))+(((-1.0)*r02*r12))+((r11*sj5*x5027))+(((-1.0)*x5026))+((x5025*x5026))+(((-1.0)*r00*r10*x5025)))),-1);
if(!x5029.valid){
continue;
}
CheckValue<IkReal> x5030 = IKatan2WithCheck(IkReal((((cj0*x5028))+(((-1.0)*cj0*x5027)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5029.value)))+(x5030.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5031=IKcos(j4);
IkReal x5032=IKsin(j4);
IkReal x5033=(cj5*r00);
IkReal x5034=(r01*sj5);
IkReal x5035=(cj5*r10);
IkReal x5036=(cj5*r20);
IkReal x5037=((1.0)*x5031);
IkReal x5038=((1.0)*x5032);
IkReal x5039=(sj5*x5032);
IkReal x5040=(sj5*x5031);
evalcond[0]=(((r02*x5032))+(((-1.0)*x5033*x5037))+((x5031*x5034)));
evalcond[1]=(((r12*x5032))+(((-1.0)*x5035*x5037))+((r11*x5040)));
evalcond[2]=((((-1.0)*x5036*x5038))+((r21*x5039))+(((-1.0)*r22*x5037)));
evalcond[3]=((1.0)+((r21*x5040))+(((-1.0)*x5036*x5037))+((r22*x5032)));
evalcond[4]=(cj0+((r11*x5039))+(((-1.0)*r12*x5037))+(((-1.0)*x5035*x5038)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5033*x5038))+((x5032*x5034))+(((-1.0)*r02*x5037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5041=((1.0)*cj5);
CheckValue<IkReal> x5042 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5041))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5042.valid){
continue;
}
CheckValue<IkReal> x5043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5041)))),-1);
if(!x5043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5042.value)+(((1.5707963267949)*(x5043.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5044=IKcos(j4);
IkReal x5045=IKsin(j4);
IkReal x5046=(cj5*r00);
IkReal x5047=(r01*sj5);
IkReal x5048=(cj5*r10);
IkReal x5049=(cj5*r20);
IkReal x5050=((1.0)*x5044);
IkReal x5051=((1.0)*x5045);
IkReal x5052=(sj5*x5045);
IkReal x5053=(sj5*x5044);
evalcond[0]=(((r02*x5045))+((x5044*x5047))+(((-1.0)*x5046*x5050)));
evalcond[1]=(((r11*x5053))+((r12*x5045))+(((-1.0)*x5048*x5050)));
evalcond[2]=(((r21*x5052))+(((-1.0)*r22*x5050))+(((-1.0)*x5049*x5051)));
evalcond[3]=((1.0)+((r21*x5053))+(((-1.0)*x5049*x5050))+((r22*x5045)));
evalcond[4]=(cj0+(((-1.0)*r12*x5050))+((r11*x5052))+(((-1.0)*x5048*x5051)));
evalcond[5]=((((-1.0)*sj0))+((x5045*x5047))+(((-1.0)*r02*x5050))+(((-1.0)*x5046*x5051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5054 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5054.valid){
continue;
}
CheckValue<IkReal> x5055=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5054.value)+(((1.5707963267949)*(x5055.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5056=IKcos(j4);
IkReal x5057=IKsin(j4);
IkReal x5058=(cj5*r00);
IkReal x5059=(r01*sj5);
IkReal x5060=(cj5*r10);
IkReal x5061=(cj5*r20);
IkReal x5062=((1.0)*x5056);
IkReal x5063=((1.0)*x5057);
IkReal x5064=(sj5*x5057);
IkReal x5065=(sj5*x5056);
evalcond[0]=((((-1.0)*x5058*x5062))+((x5056*x5059))+((r02*x5057)));
evalcond[1]=(((r12*x5057))+((r11*x5065))+(((-1.0)*x5060*x5062)));
evalcond[2]=((((-1.0)*x5061*x5063))+(((-1.0)*r22*x5062))+((r21*x5064)));
evalcond[3]=((1.0)+(((-1.0)*x5061*x5062))+((r22*x5057))+((r21*x5065)));
evalcond[4]=(cj0+(((-1.0)*r12*x5062))+((r11*x5064))+(((-1.0)*x5060*x5063)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5058*x5063))+(((-1.0)*r02*x5062))+((x5057*x5059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5066=IKcos(j0);
IkReal x5067=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.392)*x5066))+(((-0.134)*x5067)));
evalcond[1]=((((-1.0)*py))+(((-0.392)*x5067))+(((0.134)*x5066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5068=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5068;
j4eval[1]=IKsign(x5068);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5069=((1.0)*cj5);
IkReal x5070=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5069)));
j4eval[0]=x5070;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5069)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5070);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5071=cj5*cj5;
IkReal x5072=((1.0)*r20);
IkReal x5073=(r01*r21);
IkReal x5074=(r21*sj5);
IkReal x5075=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x5071*x5072))+(((-1.0)*r02*r22))+((cj5*r00*x5074))+((x5071*x5073))+(((-1.0)*x5073)));
j4eval[0]=x5075;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x5074))+(((-1.0)*cj0*cj5*x5072))))));
j4eval[2]=IKsign(x5075);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5076=cj5*cj5;
IkReal x5077=((1.0)*r20);
IkReal x5078=(r01*r21);
IkReal x5079=(r21*sj5);
CheckValue<IkReal> x5080 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5079))+(((-1.0)*cj0*cj5*x5077)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5080.valid){
continue;
}
CheckValue<IkReal> x5081=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x5076*x5077))+(((-1.0)*r02*r22))+((cj5*r00*x5079))+((x5076*x5078))+(((-1.0)*x5078)))),-1);
if(!x5081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5080.value)+(((1.5707963267949)*(x5081.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5082=IKcos(j4);
IkReal x5083=IKsin(j4);
IkReal x5084=(cj5*r00);
IkReal x5085=(cj5*r10);
IkReal x5086=(cj5*r20);
IkReal x5087=((1.0)*x5082);
IkReal x5088=((1.0)*x5083);
IkReal x5089=(sj5*x5082);
IkReal x5090=(sj5*x5083);
evalcond[0]=(((r21*x5089))+((r22*x5083))+(((-1.0)*x5086*x5087)));
evalcond[1]=(((r21*x5090))+(((-1.0)*x5086*x5088))+(((-1.0)*r22*x5087)));
evalcond[2]=(cj0+((r01*x5089))+((r02*x5083))+(((-1.0)*x5084*x5087)));
evalcond[3]=(sj0+((r11*x5089))+(((-1.0)*x5085*x5087))+((r12*x5083)));
evalcond[4]=((((-1.0)*r12*x5087))+cj0+((r11*x5090))+(((-1.0)*x5085*x5088)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5090))+(((-1.0)*r02*x5087))+(((-1.0)*x5084*x5088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5091=((1.0)*cj5);
CheckValue<IkReal> x5092 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5091)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5092.valid){
continue;
}
CheckValue<IkReal> x5093=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5091))+(((-1.0)*r10*sj5)))),-1);
if(!x5093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5092.value)+(((1.5707963267949)*(x5093.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5094=IKcos(j4);
IkReal x5095=IKsin(j4);
IkReal x5096=(cj5*r00);
IkReal x5097=(cj5*r10);
IkReal x5098=(cj5*r20);
IkReal x5099=((1.0)*x5094);
IkReal x5100=((1.0)*x5095);
IkReal x5101=(sj5*x5094);
IkReal x5102=(sj5*x5095);
evalcond[0]=(((r22*x5095))+((r21*x5101))+(((-1.0)*x5098*x5099)));
evalcond[1]=((((-1.0)*r22*x5099))+((r21*x5102))+(((-1.0)*x5098*x5100)));
evalcond[2]=(((r01*x5101))+cj0+(((-1.0)*x5096*x5099))+((r02*x5095)));
evalcond[3]=(sj0+(((-1.0)*x5097*x5099))+((r12*x5095))+((r11*x5101)));
evalcond[4]=((((-1.0)*x5097*x5100))+cj0+((r11*x5102))+(((-1.0)*r12*x5099)));
evalcond[5]=((((-1.0)*x5096*x5100))+(((-1.0)*sj0))+((r01*x5102))+(((-1.0)*r02*x5099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5103 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5103.valid){
continue;
}
CheckValue<IkReal> x5104=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5103.value)+(((1.5707963267949)*(x5104.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5105=IKcos(j4);
IkReal x5106=IKsin(j4);
IkReal x5107=(cj5*r00);
IkReal x5108=(cj5*r10);
IkReal x5109=(cj5*r20);
IkReal x5110=((1.0)*x5105);
IkReal x5111=((1.0)*x5106);
IkReal x5112=(sj5*x5105);
IkReal x5113=(sj5*x5106);
evalcond[0]=(((r22*x5106))+((r21*x5112))+(((-1.0)*x5109*x5110)));
evalcond[1]=((((-1.0)*r22*x5110))+((r21*x5113))+(((-1.0)*x5109*x5111)));
evalcond[2]=(((r01*x5112))+cj0+((r02*x5106))+(((-1.0)*x5107*x5110)));
evalcond[3]=(((r12*x5106))+sj0+(((-1.0)*x5108*x5110))+((r11*x5112)));
evalcond[4]=(cj0+(((-1.0)*x5108*x5111))+((r11*x5113))+(((-1.0)*r12*x5110)));
evalcond[5]=(((r01*x5113))+(((-1.0)*sj0))+(((-1.0)*r02*x5110))+(((-1.0)*x5107*x5111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5114=((1.0)*sj5);
IkReal x5115=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5115))+(((-1.0)*r10*x5114)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5115))+(((-1.0)*r00*x5114)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5115))+(((-1.0)*r10*x5114))))+IKsqr(((((-1.0)*r01*x5115))+(((-1.0)*r00*x5114))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5115))+(((-1.0)*r10*x5114))), ((((-1.0)*r01*x5115))+(((-1.0)*r00*x5114))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5116=IKsin(j0);
IkReal x5117=IKcos(j0);
IkReal x5118=(r10*sj5);
IkReal x5119=(r00*sj5);
IkReal x5120=(cj5*r11);
IkReal x5121=(cj5*r01);
evalcond[0]=(x5117+x5119+x5121);
evalcond[1]=(x5116+x5118+x5120);
evalcond[2]=((((-0.1)*x5119))+(((-0.134)*x5116))+(((-0.1)*x5121))+(((-1.0)*px)));
evalcond[3]=((((-0.1)*x5118))+(((-0.1)*x5120))+(((-1.0)*py))+(((0.134)*x5117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5122=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5122;
j4eval[1]=IKsign(x5122);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5123=((1.0)*cj5);
IkReal x5124=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5123)));
j4eval[0]=x5124;
j4eval[1]=IKsign(x5124);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5123))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5125=cj5*cj5;
IkReal x5126=(r01*r11);
IkReal x5127=((1.0)*r00);
IkReal x5128=(r01*sj5);
IkReal x5129=((((-1.0)*r02*r12))+((x5125*x5126))+(((-1.0)*r10*x5125*x5127))+((cj5*r10*x5128))+(((-1.0)*x5126))+((cj5*r00*r11*sj5)));
j4eval[0]=x5129;
j4eval[1]=IKsign(x5129);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5128))+(((-1.0)*cj0*cj5*x5127))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5130=cj5*cj5;
IkReal x5131=(r01*r11);
IkReal x5132=(cj5*r00);
IkReal x5133=(r01*sj5);
CheckValue<IkReal> x5134 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5132))+((cj0*x5133)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5134.valid){
continue;
}
CheckValue<IkReal> x5135=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((cj5*r10*x5133))+((x5130*x5131))+(((-1.0)*r00*r10*x5130))+(((-1.0)*x5131))+((r11*sj5*x5132)))),-1);
if(!x5135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5134.value)+(((1.5707963267949)*(x5135.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5136=IKcos(j4);
IkReal x5137=IKsin(j4);
IkReal x5138=(cj5*r00);
IkReal x5139=(r01*sj5);
IkReal x5140=(cj5*r10);
IkReal x5141=(cj5*r20);
IkReal x5142=((1.0)*x5136);
IkReal x5143=((1.0)*x5137);
IkReal x5144=(sj5*x5137);
IkReal x5145=(sj5*x5136);
evalcond[0]=(((x5136*x5139))+((r02*x5137))+(((-1.0)*x5138*x5142)));
evalcond[1]=((((-1.0)*x5140*x5142))+((r12*x5137))+((r11*x5145)));
evalcond[2]=(((r21*x5144))+(((-1.0)*x5141*x5143))+(((-1.0)*r22*x5142)));
evalcond[3]=((-1.0)+((r21*x5145))+((r22*x5137))+(((-1.0)*x5141*x5142)));
evalcond[4]=(cj0+(((-1.0)*x5140*x5143))+(((-1.0)*r12*x5142))+((r11*x5144)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5142))+((x5137*x5139))+(((-1.0)*x5138*x5143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5146=((1.0)*cj5);
CheckValue<IkReal> x5147=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5146)))),-1);
if(!x5147.valid){
continue;
}
CheckValue<IkReal> x5148 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5146)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5147.value)))+(x5148.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5149=IKcos(j4);
IkReal x5150=IKsin(j4);
IkReal x5151=(cj5*r00);
IkReal x5152=(r01*sj5);
IkReal x5153=(cj5*r10);
IkReal x5154=(cj5*r20);
IkReal x5155=((1.0)*x5149);
IkReal x5156=((1.0)*x5150);
IkReal x5157=(sj5*x5150);
IkReal x5158=(sj5*x5149);
evalcond[0]=((((-1.0)*x5151*x5155))+((x5149*x5152))+((r02*x5150)));
evalcond[1]=(((r11*x5158))+((r12*x5150))+(((-1.0)*x5153*x5155)));
evalcond[2]=((((-1.0)*x5154*x5156))+((r21*x5157))+(((-1.0)*r22*x5155)));
evalcond[3]=((-1.0)+(((-1.0)*x5154*x5155))+((r21*x5158))+((r22*x5150)));
evalcond[4]=(((r11*x5157))+cj0+(((-1.0)*r12*x5155))+(((-1.0)*x5153*x5156)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5151*x5156))+((x5150*x5152))+(((-1.0)*r02*x5155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5159=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5159.valid){
continue;
}
CheckValue<IkReal> x5160 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5159.value)))+(x5160.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5161=IKcos(j4);
IkReal x5162=IKsin(j4);
IkReal x5163=(cj5*r00);
IkReal x5164=(r01*sj5);
IkReal x5165=(cj5*r10);
IkReal x5166=(cj5*r20);
IkReal x5167=((1.0)*x5161);
IkReal x5168=((1.0)*x5162);
IkReal x5169=(sj5*x5162);
IkReal x5170=(sj5*x5161);
evalcond[0]=((((-1.0)*x5163*x5167))+((r02*x5162))+((x5161*x5164)));
evalcond[1]=(((r12*x5162))+(((-1.0)*x5165*x5167))+((r11*x5170)));
evalcond[2]=((((-1.0)*r22*x5167))+((r21*x5169))+(((-1.0)*x5166*x5168)));
evalcond[3]=((-1.0)+((r22*x5162))+(((-1.0)*x5166*x5167))+((r21*x5170)));
evalcond[4]=(cj0+(((-1.0)*r12*x5167))+((r11*x5169))+(((-1.0)*x5165*x5168)));
evalcond[5]=(((x5162*x5164))+(((-1.0)*sj0))+(((-1.0)*r02*x5167))+(((-1.0)*x5163*x5168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5171=IKsin(j0);
IkReal x5172=IKcos(j0);
evalcond[0]=((((0.392)*x5172))+(((-1.0)*px))+(((-0.134)*x5171)));
evalcond[1]=((((0.392)*x5171))+(((-1.0)*py))+(((0.134)*x5172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5173=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5173;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5173);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5174=((1.0)*cj5);
IkReal x5175=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5174)));
j4eval[0]=x5175;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5174)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5175);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5176=((1.0)*cj5);
IkReal x5177=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5176)));
j4eval[0]=x5177;
j4eval[1]=IKsign(x5177);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5176))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5178=((1.0)*cj5);
CheckValue<IkReal> x5179 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5178))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5179.valid){
continue;
}
CheckValue<IkReal> x5180=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5178)))),-1);
if(!x5180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5179.value)+(((1.5707963267949)*(x5180.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5181=IKcos(j4);
IkReal x5182=IKsin(j4);
IkReal x5183=((1.0)*sj0);
IkReal x5184=(cj5*r00);
IkReal x5185=(cj5*r10);
IkReal x5186=(cj5*r20);
IkReal x5187=((1.0)*x5181);
IkReal x5188=((1.0)*x5182);
IkReal x5189=(sj5*x5181);
IkReal x5190=(sj5*x5182);
evalcond[0]=(((r22*x5182))+((r21*x5189))+(((-1.0)*x5186*x5187)));
evalcond[1]=((((-1.0)*r22*x5187))+((r21*x5190))+(((-1.0)*x5186*x5188)));
evalcond[2]=(cj0+((r11*x5190))+(((-1.0)*x5185*x5188))+(((-1.0)*r12*x5187)));
evalcond[3]=(((r01*x5189))+(((-1.0)*x5184*x5187))+((r02*x5182))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5185*x5187))+((r11*x5189))+(((-1.0)*x5183))+((r12*x5182)));
evalcond[5]=((((-1.0)*r02*x5187))+(((-1.0)*x5184*x5188))+((r01*x5190))+(((-1.0)*x5183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5191=((1.0)*cj5);
CheckValue<IkReal> x5192 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5192.valid){
continue;
}
CheckValue<IkReal> x5193=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5191))+(((-1.0)*r00*sj5)))),-1);
if(!x5193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5192.value)+(((1.5707963267949)*(x5193.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5194=IKcos(j4);
IkReal x5195=IKsin(j4);
IkReal x5196=((1.0)*sj0);
IkReal x5197=(cj5*r00);
IkReal x5198=(cj5*r10);
IkReal x5199=(cj5*r20);
IkReal x5200=((1.0)*x5194);
IkReal x5201=((1.0)*x5195);
IkReal x5202=(sj5*x5194);
IkReal x5203=(sj5*x5195);
evalcond[0]=((((-1.0)*x5199*x5200))+((r22*x5195))+((r21*x5202)));
evalcond[1]=((((-1.0)*x5199*x5201))+(((-1.0)*r22*x5200))+((r21*x5203)));
evalcond[2]=(cj0+((r11*x5203))+(((-1.0)*x5198*x5201))+(((-1.0)*r12*x5200)));
evalcond[3]=(((r01*x5202))+((r02*x5195))+(((-1.0)*x5197*x5200))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5196))+((r11*x5202))+(((-1.0)*x5198*x5200))+((r12*x5195)));
evalcond[5]=((((-1.0)*r02*x5200))+((r01*x5203))+(((-1.0)*x5196))+(((-1.0)*x5197*x5201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5204 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5204.valid){
continue;
}
CheckValue<IkReal> x5205=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5204.value)+(((1.5707963267949)*(x5205.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5206=IKcos(j4);
IkReal x5207=IKsin(j4);
IkReal x5208=((1.0)*sj0);
IkReal x5209=(cj5*r00);
IkReal x5210=(cj5*r10);
IkReal x5211=(cj5*r20);
IkReal x5212=((1.0)*x5206);
IkReal x5213=((1.0)*x5207);
IkReal x5214=(sj5*x5206);
IkReal x5215=(sj5*x5207);
evalcond[0]=(((r22*x5207))+(((-1.0)*x5211*x5212))+((r21*x5214)));
evalcond[1]=((((-1.0)*x5211*x5213))+(((-1.0)*r22*x5212))+((r21*x5215)));
evalcond[2]=(cj0+((r11*x5215))+(((-1.0)*x5210*x5213))+(((-1.0)*r12*x5212)));
evalcond[3]=(((r01*x5214))+((r02*x5207))+(((-1.0)*x5209*x5212))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5208))+((r11*x5214))+((r12*x5207))+(((-1.0)*x5210*x5212)));
evalcond[5]=((((-1.0)*x5208))+((r01*x5215))+(((-1.0)*x5209*x5213))+(((-1.0)*r02*x5212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.195493438569105)*px))+(((-1.19192641276835)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.195493438569105)*py))+(((-1.19192641276835)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))))+IKsqr(((((0.195493438569105)*py))+(((-1.19192641276835)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))), ((((0.195493438569105)*py))+(((-1.19192641276835)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5216=IKcos(j0);
IkReal x5217=IKsin(j0);
evalcond[0]=((((-0.134)*x5217))+(((-1.0)*px))+(((-0.817)*x5216)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x5216))+(((-0.817)*x5217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5218=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5218;
j4eval[1]=IKsign(x5218);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5219=((1.0)*cj5);
IkReal x5220=((((-1.0)*r11*x5219))+(((-1.0)*r10*sj5)));
j4eval[0]=x5220;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5219))))));
j4eval[2]=IKsign(x5220);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5221=cj5*cj5;
IkReal x5222=((1.0)*r20);
IkReal x5223=(r01*r21);
IkReal x5224=(r21*sj5);
IkReal x5225=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5224))+((x5221*x5223))+(((-1.0)*r00*x5221*x5222))+(((-1.0)*x5223)));
j4eval[0]=x5225;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5222))+((cj0*x5224)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5225);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5226=cj5*cj5;
IkReal x5227=((1.0)*r20);
IkReal x5228=(r01*r21);
IkReal x5229=(r21*sj5);
CheckValue<IkReal> x5230 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5227))+((cj0*x5229)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5230.valid){
continue;
}
CheckValue<IkReal> x5231=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x5226*x5228))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5226*x5227))+((cj5*r00*x5229))+(((-1.0)*x5228)))),-1);
if(!x5231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5230.value)+(((1.5707963267949)*(x5231.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5232=IKcos(j4);
IkReal x5233=IKsin(j4);
IkReal x5234=(cj5*r00);
IkReal x5235=(cj5*r10);
IkReal x5236=(cj5*r20);
IkReal x5237=((1.0)*x5232);
IkReal x5238=((1.0)*x5233);
IkReal x5239=(sj5*x5232);
IkReal x5240=(sj5*x5233);
evalcond[0]=((((-1.0)*x5236*x5237))+((r21*x5239))+((r22*x5233)));
evalcond[1]=((((-1.0)*x5236*x5238))+(((-1.0)*r22*x5237))+((r21*x5240)));
evalcond[2]=((((-1.0)*x5234*x5237))+cj0+((r01*x5239))+((r02*x5233)));
evalcond[3]=(sj0+(((-1.0)*x5235*x5237))+((r11*x5239))+((r12*x5233)));
evalcond[4]=(((r11*x5240))+(((-1.0)*x5235*x5238))+cj0+(((-1.0)*r12*x5237)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5234*x5238))+(((-1.0)*r02*x5237))+((r01*x5240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5241=((1.0)*cj5);
CheckValue<IkReal> x5242=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5241)))),-1);
if(!x5242.valid){
continue;
}
CheckValue<IkReal> x5243 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5241))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5242.value)))+(x5243.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5244=IKcos(j4);
IkReal x5245=IKsin(j4);
IkReal x5246=(cj5*r00);
IkReal x5247=(cj5*r10);
IkReal x5248=(cj5*r20);
IkReal x5249=((1.0)*x5244);
IkReal x5250=((1.0)*x5245);
IkReal x5251=(sj5*x5244);
IkReal x5252=(sj5*x5245);
evalcond[0]=((((-1.0)*x5248*x5249))+((r21*x5251))+((r22*x5245)));
evalcond[1]=((((-1.0)*x5248*x5250))+(((-1.0)*r22*x5249))+((r21*x5252)));
evalcond[2]=(((r01*x5251))+cj0+(((-1.0)*x5246*x5249))+((r02*x5245)));
evalcond[3]=((((-1.0)*x5247*x5249))+sj0+((r12*x5245))+((r11*x5251)));
evalcond[4]=((((-1.0)*r12*x5249))+cj0+((r11*x5252))+(((-1.0)*x5247*x5250)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5252))+(((-1.0)*r02*x5249))+(((-1.0)*x5246*x5250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5253 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5253.valid){
continue;
}
CheckValue<IkReal> x5254=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5253.value)+(((1.5707963267949)*(x5254.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5255=IKcos(j4);
IkReal x5256=IKsin(j4);
IkReal x5257=(cj5*r00);
IkReal x5258=(cj5*r10);
IkReal x5259=(cj5*r20);
IkReal x5260=((1.0)*x5255);
IkReal x5261=((1.0)*x5256);
IkReal x5262=(sj5*x5255);
IkReal x5263=(sj5*x5256);
evalcond[0]=(((r22*x5256))+(((-1.0)*x5259*x5260))+((r21*x5262)));
evalcond[1]=((((-1.0)*x5259*x5261))+((r21*x5263))+(((-1.0)*r22*x5260)));
evalcond[2]=(cj0+((r01*x5262))+(((-1.0)*x5257*x5260))+((r02*x5256)));
evalcond[3]=((((-1.0)*x5258*x5260))+sj0+((r12*x5256))+((r11*x5262)));
evalcond[4]=((((-1.0)*x5258*x5261))+cj0+(((-1.0)*r12*x5260))+((r11*x5263)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5263))+(((-1.0)*r02*x5260))+(((-1.0)*x5257*x5261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.03596744552376)*py))+(((-1.73273825150958)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((7.03596744552376)*py))+(((-1.73273825150958)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((7.03596744552376)*py))+(((-1.73273825150958)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5264=IKcos(j0);
IkReal x5265=IKsin(j0);
evalcond[0]=((((-0.033)*x5264))+(((-0.134)*x5265))+(((-1.0)*px)));
evalcond[1]=((((-0.033)*x5265))+(((-1.0)*py))+(((0.134)*x5264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5266=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5266;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5266);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5267=((1.0)*cj5);
IkReal x5268=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5267)));
j4eval[0]=x5268;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5267)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5269=((1.0)*cj5);
IkReal x5270=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5269)));
j4eval[0]=x5270;
j4eval[1]=IKsign(x5270);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5269))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5271=((1.0)*cj5);
CheckValue<IkReal> x5272 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5271)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5272.valid){
continue;
}
CheckValue<IkReal> x5273=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5271))+(((-1.0)*r00*sj5)))),-1);
if(!x5273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5272.value)+(((1.5707963267949)*(x5273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5274=IKcos(j4);
IkReal x5275=IKsin(j4);
IkReal x5276=((1.0)*sj0);
IkReal x5277=(cj5*r00);
IkReal x5278=(cj5*r10);
IkReal x5279=(cj5*r20);
IkReal x5280=((1.0)*x5274);
IkReal x5281=((1.0)*x5275);
IkReal x5282=(sj5*x5274);
IkReal x5283=(sj5*x5275);
evalcond[0]=(((r22*x5275))+(((-1.0)*x5279*x5280))+((r21*x5282)));
evalcond[1]=((((-1.0)*r22*x5280))+(((-1.0)*x5279*x5281))+((r21*x5283)));
evalcond[2]=(cj0+(((-1.0)*x5278*x5281))+(((-1.0)*r12*x5280))+((r11*x5283)));
evalcond[3]=(((r02*x5275))+((r01*x5282))+(((-1.0)*x5277*x5280))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5278*x5280))+(((-1.0)*x5276))+((r11*x5282))+((r12*x5275)));
evalcond[5]=((((-1.0)*x5276))+((r01*x5283))+(((-1.0)*r02*x5280))+(((-1.0)*x5277*x5281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5284=((1.0)*cj5);
CheckValue<IkReal> x5285 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5285.valid){
continue;
}
CheckValue<IkReal> x5286=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5284))+(((-1.0)*r00*sj5)))),-1);
if(!x5286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5285.value)+(((1.5707963267949)*(x5286.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5287=IKcos(j4);
IkReal x5288=IKsin(j4);
IkReal x5289=((1.0)*sj0);
IkReal x5290=(cj5*r00);
IkReal x5291=(cj5*r10);
IkReal x5292=(cj5*r20);
IkReal x5293=((1.0)*x5287);
IkReal x5294=((1.0)*x5288);
IkReal x5295=(sj5*x5287);
IkReal x5296=(sj5*x5288);
evalcond[0]=(((r22*x5288))+((r21*x5295))+(((-1.0)*x5292*x5293)));
evalcond[1]=((((-1.0)*r22*x5293))+((r21*x5296))+(((-1.0)*x5292*x5294)));
evalcond[2]=(cj0+(((-1.0)*r12*x5293))+(((-1.0)*x5291*x5294))+((r11*x5296)));
evalcond[3]=(((r02*x5288))+((r01*x5295))+(((-1.0)*x5290*x5293))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5288))+(((-1.0)*x5289))+(((-1.0)*x5291*x5293))+((r11*x5295)));
evalcond[5]=((((-1.0)*x5289))+((r01*x5296))+(((-1.0)*r02*x5293))+(((-1.0)*x5290*x5294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5297 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5297.valid){
continue;
}
CheckValue<IkReal> x5298=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5297.value)+(((1.5707963267949)*(x5298.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5299=IKcos(j4);
IkReal x5300=IKsin(j4);
IkReal x5301=((1.0)*sj0);
IkReal x5302=(cj5*r00);
IkReal x5303=(cj5*r10);
IkReal x5304=(cj5*r20);
IkReal x5305=((1.0)*x5299);
IkReal x5306=((1.0)*x5300);
IkReal x5307=(sj5*x5299);
IkReal x5308=(sj5*x5300);
evalcond[0]=(((r21*x5307))+((r22*x5300))+(((-1.0)*x5304*x5305)));
evalcond[1]=((((-1.0)*r22*x5305))+((r21*x5308))+(((-1.0)*x5304*x5306)));
evalcond[2]=((((-1.0)*x5303*x5306))+cj0+(((-1.0)*r12*x5305))+((r11*x5308)));
evalcond[3]=((((-1.0)*x5302*x5305))+((r02*x5300))+((r01*x5307))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5303*x5305))+(((-1.0)*x5301))+((r12*x5300))+((r11*x5307)));
evalcond[5]=((((-1.0)*x5301))+(((-1.0)*x5302*x5306))+(((-1.0)*r02*x5305))+((r01*x5308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5309=((1.0)*sj5);
IkReal x5310=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5310))+(((-1.0)*r10*x5309)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5309))+(((-1.0)*r01*x5310)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5310))+(((-1.0)*r10*x5309))))+IKsqr(((((-1.0)*r00*x5309))+(((-1.0)*r01*x5310))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5310))+(((-1.0)*r10*x5309))), ((((-1.0)*r00*x5309))+(((-1.0)*r01*x5310))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5311=IKsin(j0);
IkReal x5312=IKcos(j0);
IkReal x5313=(r10*sj5);
IkReal x5314=(r00*sj5);
IkReal x5315=(cj5*r11);
IkReal x5316=(cj5*r01);
evalcond[0]=(x5312+x5316+x5314);
evalcond[1]=(x5313+x5311+x5315);
evalcond[2]=((((-0.1)*x5314))+(((-0.1)*x5316))+(((-0.134)*x5311))+(((-1.0)*px)));
evalcond[3]=((((-0.1)*x5315))+(((-0.1)*x5313))+(((-1.0)*py))+(((0.134)*x5312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5317=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5317;
j4eval[1]=IKsign(x5317);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5318=((1.0)*cj5);
IkReal x5319=((((-1.0)*r11*x5318))+(((-1.0)*r10*sj5)));
j4eval[0]=x5319;
j4eval[1]=IKsign(x5319);
j4eval[2]=((IKabs((((r01*sj5))+(((-1.0)*r00*x5318)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5320=cj5*cj5;
IkReal x5321=(r01*r11);
IkReal x5322=((1.0)*r00);
IkReal x5323=(r01*sj5);
IkReal x5324=((((-1.0)*x5321))+(((-1.0)*r10*x5320*x5322))+(((-1.0)*r02*r12))+((x5320*x5321))+((cj5*r10*x5323))+((cj5*r00*r11*sj5)));
j4eval[0]=x5324;
j4eval[1]=IKsign(x5324);
j4eval[2]=((IKabs((((cj0*x5323))+(((-1.0)*cj0*cj5*x5322)))))+(IKabs((cj0*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5325=cj5*cj5;
IkReal x5326=(r01*r11);
IkReal x5327=(cj5*r00);
IkReal x5328=(r01*sj5);
CheckValue<IkReal> x5329 = IKatan2WithCheck(IkReal((((cj0*x5328))+(((-1.0)*cj0*x5327)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5329.valid){
continue;
}
CheckValue<IkReal> x5330=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5326))+(((-1.0)*r00*r10*x5325))+((x5325*x5326))+(((-1.0)*r02*r12))+((r11*sj5*x5327))+((cj5*r10*x5328)))),-1);
if(!x5330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5329.value)+(((1.5707963267949)*(x5330.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5331=IKcos(j4);
IkReal x5332=IKsin(j4);
IkReal x5333=(cj5*r00);
IkReal x5334=(r01*sj5);
IkReal x5335=(cj5*r10);
IkReal x5336=(cj5*r20);
IkReal x5337=((1.0)*x5331);
IkReal x5338=((1.0)*x5332);
IkReal x5339=(sj5*x5332);
IkReal x5340=(sj5*x5331);
evalcond[0]=(((x5331*x5334))+(((-1.0)*x5333*x5337))+((r02*x5332)));
evalcond[1]=(((r12*x5332))+(((-1.0)*x5335*x5337))+((r11*x5340)));
evalcond[2]=((((-1.0)*r22*x5337))+((r21*x5339))+(((-1.0)*x5336*x5338)));
evalcond[3]=((-1.0)+((r22*x5332))+(((-1.0)*x5336*x5337))+((r21*x5340)));
evalcond[4]=(cj0+((r11*x5339))+(((-1.0)*x5335*x5338))+(((-1.0)*r12*x5337)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5337))+(((-1.0)*x5333*x5338))+((x5332*x5334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5341=((1.0)*cj5);
CheckValue<IkReal> x5342=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5341)))),-1);
if(!x5342.valid){
continue;
}
CheckValue<IkReal> x5343 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5341)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5342.value)))+(x5343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5344=IKcos(j4);
IkReal x5345=IKsin(j4);
IkReal x5346=(cj5*r00);
IkReal x5347=(r01*sj5);
IkReal x5348=(cj5*r10);
IkReal x5349=(cj5*r20);
IkReal x5350=((1.0)*x5344);
IkReal x5351=((1.0)*x5345);
IkReal x5352=(sj5*x5345);
IkReal x5353=(sj5*x5344);
evalcond[0]=((((-1.0)*x5346*x5350))+((r02*x5345))+((x5344*x5347)));
evalcond[1]=(((r12*x5345))+((r11*x5353))+(((-1.0)*x5348*x5350)));
evalcond[2]=((((-1.0)*x5349*x5351))+(((-1.0)*r22*x5350))+((r21*x5352)));
evalcond[3]=((-1.0)+(((-1.0)*x5349*x5350))+((r22*x5345))+((r21*x5353)));
evalcond[4]=(cj0+((r11*x5352))+(((-1.0)*r12*x5350))+(((-1.0)*x5348*x5351)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5346*x5351))+(((-1.0)*r02*x5350))+((x5345*x5347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5354=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5354.valid){
continue;
}
CheckValue<IkReal> x5355 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5354.value)))+(x5355.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5356=IKcos(j4);
IkReal x5357=IKsin(j4);
IkReal x5358=(cj5*r00);
IkReal x5359=(r01*sj5);
IkReal x5360=(cj5*r10);
IkReal x5361=(cj5*r20);
IkReal x5362=((1.0)*x5356);
IkReal x5363=((1.0)*x5357);
IkReal x5364=(sj5*x5357);
IkReal x5365=(sj5*x5356);
evalcond[0]=((((-1.0)*x5358*x5362))+((x5356*x5359))+((r02*x5357)));
evalcond[1]=((((-1.0)*x5360*x5362))+((r12*x5357))+((r11*x5365)));
evalcond[2]=((((-1.0)*r22*x5362))+((r21*x5364))+(((-1.0)*x5361*x5363)));
evalcond[3]=((-1.0)+((r22*x5357))+((r21*x5365))+(((-1.0)*x5361*x5362)));
evalcond[4]=(cj0+(((-1.0)*x5360*x5363))+(((-1.0)*r12*x5362))+((r11*x5364)));
evalcond[5]=(((x5357*x5359))+(((-1.0)*sj0))+(((-1.0)*r02*x5362))+(((-1.0)*x5358*x5363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5366=IKsin(j0);
IkReal x5367=IKcos(j0);
evalcond[0]=((((-0.134)*x5366))+(((-1.0)*px))+(((0.392)*x5367)));
evalcond[1]=((((-1.0)*py))+(((0.392)*x5366))+(((0.134)*x5367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5368=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5368;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5368);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5369=((1.0)*cj5);
IkReal x5370=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5369)));
j4eval[0]=x5370;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5369)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5370);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5371=((1.0)*cj5);
IkReal x5372=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5371)));
j4eval[0]=x5372;
j4eval[1]=IKsign(x5372);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5371))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5373=((1.0)*cj5);
CheckValue<IkReal> x5374=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5373)))),-1);
if(!x5374.valid){
continue;
}
CheckValue<IkReal> x5375 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5373)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5374.value)))+(x5375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5376=IKcos(j4);
IkReal x5377=IKsin(j4);
IkReal x5378=((1.0)*sj0);
IkReal x5379=(cj5*r00);
IkReal x5380=(cj5*r10);
IkReal x5381=(cj5*r20);
IkReal x5382=((1.0)*x5376);
IkReal x5383=((1.0)*x5377);
IkReal x5384=(sj5*x5376);
IkReal x5385=(sj5*x5377);
evalcond[0]=(((r22*x5377))+((r21*x5384))+(((-1.0)*x5381*x5382)));
evalcond[1]=((((-1.0)*r22*x5382))+((r21*x5385))+(((-1.0)*x5381*x5383)));
evalcond[2]=(cj0+((r11*x5385))+(((-1.0)*x5380*x5383))+(((-1.0)*r12*x5382)));
evalcond[3]=(((r02*x5377))+(((-1.0)*x5379*x5382))+((r01*x5384))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5378))+((r11*x5384))+(((-1.0)*x5380*x5382))+((r12*x5377)));
evalcond[5]=((((-1.0)*x5378))+(((-1.0)*r02*x5382))+(((-1.0)*x5379*x5383))+((r01*x5385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5386=((1.0)*cj5);
CheckValue<IkReal> x5387 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5387.valid){
continue;
}
CheckValue<IkReal> x5388=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5386)))),-1);
if(!x5388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5387.value)+(((1.5707963267949)*(x5388.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5389=IKcos(j4);
IkReal x5390=IKsin(j4);
IkReal x5391=((1.0)*sj0);
IkReal x5392=(cj5*r00);
IkReal x5393=(cj5*r10);
IkReal x5394=(cj5*r20);
IkReal x5395=((1.0)*x5389);
IkReal x5396=((1.0)*x5390);
IkReal x5397=(sj5*x5389);
IkReal x5398=(sj5*x5390);
evalcond[0]=(((r22*x5390))+(((-1.0)*x5394*x5395))+((r21*x5397)));
evalcond[1]=((((-1.0)*x5394*x5396))+(((-1.0)*r22*x5395))+((r21*x5398)));
evalcond[2]=(cj0+(((-1.0)*x5393*x5396))+((r11*x5398))+(((-1.0)*r12*x5395)));
evalcond[3]=(((r02*x5390))+(((-1.0)*x5392*x5395))+((r01*x5397))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5393*x5395))+((r11*x5397))+((r12*x5390))+(((-1.0)*x5391)));
evalcond[5]=((((-1.0)*x5392*x5396))+(((-1.0)*r02*x5395))+(((-1.0)*x5391))+((r01*x5398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5399 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5399.valid){
continue;
}
CheckValue<IkReal> x5400=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5399.value)+(((1.5707963267949)*(x5400.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5401=IKcos(j4);
IkReal x5402=IKsin(j4);
IkReal x5403=((1.0)*sj0);
IkReal x5404=(cj5*r00);
IkReal x5405=(cj5*r10);
IkReal x5406=(cj5*r20);
IkReal x5407=((1.0)*x5401);
IkReal x5408=((1.0)*x5402);
IkReal x5409=(sj5*x5401);
IkReal x5410=(sj5*x5402);
evalcond[0]=(((r21*x5409))+((r22*x5402))+(((-1.0)*x5406*x5407)));
evalcond[1]=((((-1.0)*x5406*x5408))+(((-1.0)*r22*x5407))+((r21*x5410)));
evalcond[2]=(((r11*x5410))+cj0+(((-1.0)*r12*x5407))+(((-1.0)*x5405*x5408)));
evalcond[3]=((((-1.0)*x5404*x5407))+((r02*x5402))+((r01*x5409))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5402))+(((-1.0)*x5403))+((r11*x5409))+(((-1.0)*x5405*x5407)));
evalcond[5]=((((-1.0)*r02*x5407))+(((-1.0)*x5404*x5408))+(((-1.0)*x5403))+((r01*x5410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5411=IKsin(j0);
IkReal x5412=IKcos(j0);
IkReal x5413=((0.1)*sj5);
IkReal x5414=(cj5*r11);
IkReal x5415=(cj5*r01);
evalcond[0]=(((r00*sj5))+(((-1.0)*x5412))+x5415);
evalcond[1]=((((-1.0)*x5411))+x5414+((r10*sj5)));
evalcond[2]=((((-1.0)*r00*x5413))+(((-1.0)*px))+(((-0.1)*x5415))+(((-0.134)*x5411)));
evalcond[3]=((((-1.0)*r10*x5413))+(((-1.0)*py))+(((-0.1)*x5414))+(((0.134)*x5412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5416=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5416;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5416);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5417=((1.0)*cj5);
IkReal x5418=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5417)));
j4eval[0]=x5418;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5417))+((r11*sj5))))));
j4eval[2]=IKsign(x5418);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5419=cj5*cj5;
IkReal x5420=(r01*r11);
IkReal x5421=((1.0)*r00);
IkReal x5422=(r01*sj5);
IkReal x5423=((((-1.0)*r02*r12))+((x5419*x5420))+((cj5*r10*x5422))+(((-1.0)*r10*x5419*x5421))+(((-1.0)*x5420))+((cj5*r00*r11*sj5)));
j4eval[0]=x5423;
j4eval[1]=IKsign(x5423);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5421))+((cj0*x5422))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5424=cj5*cj5;
IkReal x5425=(r01*r11);
IkReal x5426=(cj5*r00);
IkReal x5427=(r01*sj5);
CheckValue<IkReal> x5428=IKPowWithIntegerCheck(IKsign((((r11*sj5*x5426))+(((-1.0)*r02*r12))+(((-1.0)*r00*r10*x5424))+((cj5*r10*x5427))+((x5424*x5425))+(((-1.0)*x5425)))),-1);
if(!x5428.valid){
continue;
}
CheckValue<IkReal> x5429 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5426))+((cj0*x5427)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5428.value)))+(x5429.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5430=IKcos(j4);
IkReal x5431=IKsin(j4);
IkReal x5432=(cj5*r00);
IkReal x5433=(r01*sj5);
IkReal x5434=(cj5*r10);
IkReal x5435=(cj5*r20);
IkReal x5436=((1.0)*x5430);
IkReal x5437=((1.0)*x5431);
IkReal x5438=(sj5*x5431);
IkReal x5439=(sj5*x5430);
evalcond[0]=(((r02*x5431))+((x5430*x5433))+(((-1.0)*x5432*x5436)));
evalcond[1]=((((-1.0)*x5434*x5436))+((r11*x5439))+((r12*x5431)));
evalcond[2]=((((-1.0)*r22*x5436))+(((-1.0)*x5435*x5437))+((r21*x5438)));
evalcond[3]=((1.0)+((r22*x5431))+(((-1.0)*x5435*x5436))+((r21*x5439)));
evalcond[4]=(cj0+(((-1.0)*x5434*x5437))+(((-1.0)*r12*x5436))+((r11*x5438)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5436))+((x5431*x5433))+(((-1.0)*x5432*x5437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5440=((1.0)*cj5);
CheckValue<IkReal> x5441 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5440))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5441.valid){
continue;
}
CheckValue<IkReal> x5442=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5440)))),-1);
if(!x5442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5441.value)+(((1.5707963267949)*(x5442.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5443=IKcos(j4);
IkReal x5444=IKsin(j4);
IkReal x5445=(cj5*r00);
IkReal x5446=(r01*sj5);
IkReal x5447=(cj5*r10);
IkReal x5448=(cj5*r20);
IkReal x5449=((1.0)*x5443);
IkReal x5450=((1.0)*x5444);
IkReal x5451=(sj5*x5444);
IkReal x5452=(sj5*x5443);
evalcond[0]=((((-1.0)*x5445*x5449))+((r02*x5444))+((x5443*x5446)));
evalcond[1]=(((r12*x5444))+(((-1.0)*x5447*x5449))+((r11*x5452)));
evalcond[2]=(((r21*x5451))+(((-1.0)*r22*x5449))+(((-1.0)*x5448*x5450)));
evalcond[3]=((1.0)+(((-1.0)*x5448*x5449))+((r21*x5452))+((r22*x5444)));
evalcond[4]=(cj0+(((-1.0)*r12*x5449))+(((-1.0)*x5447*x5450))+((r11*x5451)));
evalcond[5]=((((-1.0)*sj0))+((x5444*x5446))+(((-1.0)*r02*x5449))+(((-1.0)*x5445*x5450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5453 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5453.valid){
continue;
}
CheckValue<IkReal> x5454=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5453.value)+(((1.5707963267949)*(x5454.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5455=IKcos(j4);
IkReal x5456=IKsin(j4);
IkReal x5457=(cj5*r00);
IkReal x5458=(r01*sj5);
IkReal x5459=(cj5*r10);
IkReal x5460=(cj5*r20);
IkReal x5461=((1.0)*x5455);
IkReal x5462=((1.0)*x5456);
IkReal x5463=(sj5*x5456);
IkReal x5464=(sj5*x5455);
evalcond[0]=(((x5455*x5458))+((r02*x5456))+(((-1.0)*x5457*x5461)));
evalcond[1]=((((-1.0)*x5459*x5461))+((r12*x5456))+((r11*x5464)));
evalcond[2]=(((r21*x5463))+(((-1.0)*x5460*x5462))+(((-1.0)*r22*x5461)));
evalcond[3]=((1.0)+((r22*x5456))+((r21*x5464))+(((-1.0)*x5460*x5461)));
evalcond[4]=((((-1.0)*x5459*x5462))+cj0+((r11*x5463))+(((-1.0)*r12*x5461)));
evalcond[5]=(((x5456*x5458))+(((-1.0)*sj0))+(((-1.0)*r02*x5461))+(((-1.0)*x5457*x5462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5465=IKcos(j0);
IkReal x5466=IKsin(j0);
evalcond[0]=((((-0.392)*x5465))+(((-1.0)*px))+(((-0.134)*x5466)));
evalcond[1]=((((-0.392)*x5466))+(((-1.0)*py))+(((0.134)*x5465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5467=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5467;
j4eval[1]=IKsign(x5467);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5468=((1.0)*cj5);
IkReal x5469=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5468)));
j4eval[0]=x5469;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5468))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5469);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5470=cj5*cj5;
IkReal x5471=((1.0)*r20);
IkReal x5472=(r01*r21);
IkReal x5473=(r21*sj5);
IkReal x5474=(((cj5*r01*r20*sj5))+(((-1.0)*x5472))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5470*x5471))+((cj5*r00*x5473))+((x5470*x5472)));
j4eval[0]=x5474;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5471))+((cj0*x5473)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5474);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5475=cj5*cj5;
IkReal x5476=((1.0)*r20);
IkReal x5477=(r01*r21);
IkReal x5478=(r21*sj5);
CheckValue<IkReal> x5479 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5476))+((cj0*x5478)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5479.valid){
continue;
}
CheckValue<IkReal> x5480=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x5477))+(((-1.0)*r02*r22))+((x5475*x5477))+((cj5*r00*x5478))+(((-1.0)*r00*x5475*x5476)))),-1);
if(!x5480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5479.value)+(((1.5707963267949)*(x5480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5481=IKcos(j4);
IkReal x5482=IKsin(j4);
IkReal x5483=(cj5*r00);
IkReal x5484=(cj5*r10);
IkReal x5485=(cj5*r20);
IkReal x5486=((1.0)*x5481);
IkReal x5487=((1.0)*x5482);
IkReal x5488=(sj5*x5481);
IkReal x5489=(sj5*x5482);
evalcond[0]=((((-1.0)*x5485*x5486))+((r21*x5488))+((r22*x5482)));
evalcond[1]=((((-1.0)*r22*x5486))+(((-1.0)*x5485*x5487))+((r21*x5489)));
evalcond[2]=(cj0+(((-1.0)*x5483*x5486))+((r01*x5488))+((r02*x5482)));
evalcond[3]=(sj0+((r11*x5488))+(((-1.0)*x5484*x5486))+((r12*x5482)));
evalcond[4]=((((-1.0)*r12*x5486))+cj0+((r11*x5489))+(((-1.0)*x5484*x5487)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5483*x5487))+((r01*x5489))+(((-1.0)*r02*x5486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5490=((1.0)*cj5);
CheckValue<IkReal> x5491 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5490)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5491.valid){
continue;
}
CheckValue<IkReal> x5492=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5490)))),-1);
if(!x5492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5491.value)+(((1.5707963267949)*(x5492.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5493=IKcos(j4);
IkReal x5494=IKsin(j4);
IkReal x5495=(cj5*r00);
IkReal x5496=(cj5*r10);
IkReal x5497=(cj5*r20);
IkReal x5498=((1.0)*x5493);
IkReal x5499=((1.0)*x5494);
IkReal x5500=(sj5*x5493);
IkReal x5501=(sj5*x5494);
evalcond[0]=(((r21*x5500))+(((-1.0)*x5497*x5498))+((r22*x5494)));
evalcond[1]=((((-1.0)*r22*x5498))+((r21*x5501))+(((-1.0)*x5497*x5499)));
evalcond[2]=(cj0+(((-1.0)*x5495*x5498))+((r01*x5500))+((r02*x5494)));
evalcond[3]=(sj0+((r12*x5494))+((r11*x5500))+(((-1.0)*x5496*x5498)));
evalcond[4]=(cj0+(((-1.0)*r12*x5498))+((r11*x5501))+(((-1.0)*x5496*x5499)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5495*x5499))+(((-1.0)*r02*x5498))+((r01*x5501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5502 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5502.valid){
continue;
}
CheckValue<IkReal> x5503=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5502.value)+(((1.5707963267949)*(x5503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5504=IKcos(j4);
IkReal x5505=IKsin(j4);
IkReal x5506=(cj5*r00);
IkReal x5507=(cj5*r10);
IkReal x5508=(cj5*r20);
IkReal x5509=((1.0)*x5504);
IkReal x5510=((1.0)*x5505);
IkReal x5511=(sj5*x5504);
IkReal x5512=(sj5*x5505);
evalcond[0]=(((r21*x5511))+((r22*x5505))+(((-1.0)*x5508*x5509)));
evalcond[1]=((((-1.0)*r22*x5509))+((r21*x5512))+(((-1.0)*x5508*x5510)));
evalcond[2]=(cj0+((r02*x5505))+(((-1.0)*x5506*x5509))+((r01*x5511)));
evalcond[3]=(sj0+((r12*x5505))+(((-1.0)*x5507*x5509))+((r11*x5511)));
evalcond[4]=(cj0+(((-1.0)*r12*x5509))+(((-1.0)*x5507*x5510))+((r11*x5512)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5509))+(((-1.0)*x5506*x5510))+((r01*x5512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5513=cj1*cj1;
IkReal x5514=((500.0)*py);
IkReal x5515=(cj1*sj2);
IkReal x5516=(cj2*sj2);
IkReal x5517=(cj5*r01);
IkReal x5518=(cj2*sj1);
IkReal x5519=(cj1*sj1);
IkReal x5520=(r00*sj5);
IkReal x5521=((50.0)*r10*sj5);
IkReal x5522=((50.0)*cj5*r11);
CheckValue<IkReal> x5523=IKPowWithIntegerCheck(((((-392.0)*x5513*x5516))+(((-392.0)*cj1*cj2*x5518))+(((-212.5)*sj2*x5513))+(((196.0)*x5519))+(((196.0)*x5516))+(((-212.5)*cj1*x5518))),-1);
if(!x5523.valid){
continue;
}
CheckValue<IkReal> x5524=IKPowWithIntegerCheck(((((-1.0)*x5518))+(((-1.0)*x5515))),-1);
if(!x5524.valid){
continue;
}
if( IKabs(((x5523.value)*(((((67.0)*x5520))+(((-1.0)*x5515*x5522))+(((-1.0)*x5515*x5521))+(((-1.0)*x5514*x5518))+(((-1.0)*x5514*x5515))+(((67.0)*x5517))+(((-1.0)*x5518*x5521))+(((-1.0)*x5518*x5522)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5524.value)*(((((-1.0)*x5517))+(((-1.0)*x5520)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5523.value)*(((((67.0)*x5520))+(((-1.0)*x5515*x5522))+(((-1.0)*x5515*x5521))+(((-1.0)*x5514*x5518))+(((-1.0)*x5514*x5515))+(((67.0)*x5517))+(((-1.0)*x5518*x5521))+(((-1.0)*x5518*x5522))))))+IKsqr(((x5524.value)*(((((-1.0)*x5517))+(((-1.0)*x5520))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5523.value)*(((((67.0)*x5520))+(((-1.0)*x5515*x5522))+(((-1.0)*x5515*x5521))+(((-1.0)*x5514*x5518))+(((-1.0)*x5514*x5515))+(((67.0)*x5517))+(((-1.0)*x5518*x5521))+(((-1.0)*x5518*x5522))))), ((x5524.value)*(((((-1.0)*x5517))+(((-1.0)*x5520))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5525=IKcos(j0);
IkReal x5526=IKsin(j0);
IkReal x5527=((0.1)*sj5);
IkReal x5528=(cj5*r11);
IkReal x5529=(cj5*r01);
IkReal x5530=((0.392)*cj2);
IkReal x5531=((1.0)*cj2);
IkReal x5532=((0.392)*sj2);
IkReal x5533=((1.0)*cj1*sj2);
IkReal x5534=(cj1*x5525);
IkReal x5535=(cj1*x5526);
IkReal x5536=(sj1*x5525);
IkReal x5537=(sj1*x5526);
evalcond[0]=(((r00*sj5))+x5529+(((-1.0)*x5525*x5533))+(((-1.0)*x5531*x5536)));
evalcond[1]=(x5528+((r10*sj5))+(((-1.0)*x5526*x5533))+(((-1.0)*x5531*x5537)));
evalcond[2]=((((-0.134)*x5526))+((x5530*x5534))+(((-1.0)*px))+(((-0.1)*x5529))+(((0.425)*x5534))+(((-1.0)*r00*x5527))+(((-1.0)*x5532*x5536)));
evalcond[3]=((((-1.0)*r10*x5527))+((x5530*x5535))+(((-1.0)*py))+(((0.134)*x5525))+(((-0.1)*x5528))+(((0.425)*x5535))+(((-1.0)*x5532*x5537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5538=((1.0)*cj5);
IkReal x5539=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5538)));
j4eval[0]=x5539;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5538))))));
j4eval[2]=IKsign(x5539);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5540=((1.0)*cj5);
IkReal x5541=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5540)));
j4eval[0]=x5541;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5540))))));
j4eval[2]=IKsign(x5541);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5542=((1.0)*sj0);
IkReal x5543=((1.0)*cj0);
IkReal x5544=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5544;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5542))+(((-1.0)*r01*sj5*x5543)))))+(IKabs(((((-1.0)*r02*x5543))+(((-1.0)*r12*x5542))))));
j4eval[2]=IKsign(x5544);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5545=((-1.0)*r20);
IkReal x5547 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5547)==0){
continue;
}
IkReal x5546=pow(x5547,-0.5);
CheckValue<IkReal> x5548 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5545),IKFAST_ATAN2_MAGTHRESH);
if(!x5548.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5548.value));
IkReal gconst115=(r21*x5546);
IkReal gconst116=(x5545*x5546);
CheckValue<IkReal> x5549 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5549.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5549.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5550=((-1.0)*r20);
IkReal x5551=x5546;
CheckValue<IkReal> x5553 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5550),IKFAST_ATAN2_MAGTHRESH);
if(!x5553.valid){
continue;
}
IkReal x5552=((-1.0)*(x5553.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5552;
IkReal gconst114=x5552;
IkReal gconst115=(r21*x5551);
IkReal gconst116=(x5550*x5551);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5554=((-1.0)*r20);
IkReal x5555=x5546;
CheckValue<IkReal> x5557 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5554),IKFAST_ATAN2_MAGTHRESH);
if(!x5557.valid){
continue;
}
IkReal x5556=((-1.0)*(x5557.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5556;
IkReal gconst114=x5556;
IkReal gconst115=(r21*x5555);
IkReal gconst116=(x5554*x5555);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5558=((-1.0)*r20);
IkReal x5559=x5546;
CheckValue<IkReal> x5561 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5558),IKFAST_ATAN2_MAGTHRESH);
if(!x5561.valid){
continue;
}
IkReal x5560=((-1.0)*(x5561.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5560;
IkReal gconst114=x5560;
IkReal gconst115=(r21*x5559);
IkReal gconst116=(x5558*x5559);
IkReal x5562=((1.0)*(r22*r22));
CheckValue<IkReal> x5566=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5562))),-1);
if(!x5566.valid){
continue;
}
IkReal x5563=x5566.value;
IkReal x5564=((1.0)*x5563);
IkReal x5565=((((-1.0)*x5564*(r20*r20*r20*r20)))+(((-1.0)*x5564*(r21*r21*r21*r21)))+(((-1.0)*x5562))+(((-2.0)*x5563*(r20*r20)*(r21*r21))));
j4eval[0]=x5565;
j4eval[1]=IKsign(x5565);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5567=(cj2*sj1);
IkReal x5568=(gconst115*r21);
IkReal x5569=(cj1*sj2);
IkReal x5570=((1.0)*gconst116*r20);
CheckValue<IkReal> x5571 = IKatan2WithCheck(IkReal((((r22*x5567))+((r22*x5569)))),IkReal(((((-1.0)*x5569*x5570))+((x5568*x5569))+((x5567*x5568))+(((-1.0)*x5567*x5570)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5571.valid){
continue;
}
CheckValue<IkReal> x5572=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5568*x5568)))+(((-1.0)*gconst116*r20*x5570))+(((2.0)*gconst116*r20*x5568))+(((-1.0)*(r22*r22))))),-1);
if(!x5572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5571.value)+(((1.5707963267949)*(x5572.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5573=IKsin(j4);
IkReal x5574=IKcos(j4);
IkReal x5575=(sj1*sj2);
IkReal x5576=((1.0)*x5574);
IkReal x5577=((1.0)*cj1*cj2);
IkReal x5578=(gconst115*x5573);
IkReal x5579=(gconst115*x5574);
IkReal x5580=((1.0)*gconst116*x5573);
evalcond[0]=((((-1.0)*r20*x5580))+((r21*x5578))+(((-1.0)*r22*x5576)));
evalcond[1]=(cj0+(((-1.0)*r12*x5576))+(((-1.0)*r10*x5580))+((r11*x5578)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5576))+(((-1.0)*r00*x5580))+((r01*x5578)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5573))+((r21*x5579))+(((-1.0)*gconst116*r20*x5576)));
evalcond[4]=(((r02*x5573))+((cj0*x5575))+(((-1.0)*gconst116*r00*x5576))+(((-1.0)*cj0*x5577))+((r01*x5579)));
evalcond[5]=((((-1.0)*sj0*x5577))+((r11*x5579))+((r12*x5573))+((sj0*x5575))+(((-1.0)*gconst116*r10*x5576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5581=((1.0)*gconst116);
CheckValue<IkReal> x5582 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5581)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5582.valid){
continue;
}
CheckValue<IkReal> x5583=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5581))+(((-1.0)*gconst115*r10)))),-1);
if(!x5583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5582.value)+(((1.5707963267949)*(x5583.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5584=IKsin(j4);
IkReal x5585=IKcos(j4);
IkReal x5586=(sj1*sj2);
IkReal x5587=((1.0)*x5585);
IkReal x5588=((1.0)*cj1*cj2);
IkReal x5589=(gconst115*x5584);
IkReal x5590=(gconst115*x5585);
IkReal x5591=((1.0)*gconst116*x5584);
evalcond[0]=(((r21*x5589))+(((-1.0)*r20*x5591))+(((-1.0)*r22*x5587)));
evalcond[1]=((((-1.0)*r12*x5587))+cj0+((r11*x5589))+(((-1.0)*r10*x5591)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5587))+(((-1.0)*r00*x5591))+((r01*x5589)));
evalcond[3]=(((r21*x5590))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5587))+((r22*x5584)));
evalcond[4]=((((-1.0)*cj0*x5588))+((cj0*x5586))+((r02*x5584))+((r01*x5590))+(((-1.0)*gconst116*r00*x5587)));
evalcond[5]=(((sj0*x5586))+((r11*x5590))+((r12*x5584))+(((-1.0)*gconst116*r10*x5587))+(((-1.0)*sj0*x5588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5592=((1.0)*gconst116);
CheckValue<IkReal> x5593 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x5592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5593.valid){
continue;
}
CheckValue<IkReal> x5594=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x5592)))),-1);
if(!x5594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5593.value)+(((1.5707963267949)*(x5594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5595=IKsin(j4);
IkReal x5596=IKcos(j4);
IkReal x5597=(sj1*sj2);
IkReal x5598=((1.0)*x5596);
IkReal x5599=((1.0)*cj1*cj2);
IkReal x5600=(gconst115*x5595);
IkReal x5601=(gconst115*x5596);
IkReal x5602=((1.0)*gconst116*x5595);
evalcond[0]=(((r21*x5600))+(((-1.0)*r22*x5598))+(((-1.0)*r20*x5602)));
evalcond[1]=((((-1.0)*r10*x5602))+(((-1.0)*r12*x5598))+cj0+((r11*x5600)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5602))+(((-1.0)*r02*x5598))+((r01*x5600)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5598))+((r21*x5601))+((r22*x5595)));
evalcond[4]=((((-1.0)*cj0*x5599))+((cj0*x5597))+((r02*x5595))+((r01*x5601))+(((-1.0)*gconst116*r00*x5598)));
evalcond[5]=(((sj0*x5597))+((r12*x5595))+(((-1.0)*gconst116*r10*x5598))+((r11*x5601))+(((-1.0)*sj0*x5599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5603=((-1.0)*r21);
IkReal x5605 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5605)==0){
continue;
}
IkReal x5604=pow(x5605,-0.5);
CheckValue<IkReal> x5606 = IKatan2WithCheck(IkReal(x5603),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5606.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5606.value))));
IkReal gconst118=(x5603*x5604);
IkReal gconst119=((1.0)*r20*x5604);
CheckValue<IkReal> x5607 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5607.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5607.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5608=((-1.0)*r21);
CheckValue<IkReal> x5611 = IKatan2WithCheck(IkReal(x5608),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5611.valid){
continue;
}
IkReal x5609=((1.0)*(x5611.value));
IkReal x5610=x5604;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5609)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5609)));
IkReal gconst118=(x5608*x5610);
IkReal gconst119=((1.0)*r20*x5610);
IkReal x5612=r22*r22;
IkReal x5613=((1.0)*x5612);
CheckValue<IkReal> x5617=IKPowWithIntegerCheck(((-1.0)+x5612),-1);
if(!x5617.valid){
continue;
}
IkReal x5614=x5617.value;
if((((1.0)+(((-1.0)*x5613)))) < -0.00001)
continue;
IkReal x5615=IKsqrt(((1.0)+(((-1.0)*x5613))));
IkReal x5616=(cj0*x5614*x5615);
j4eval[0]=((IKabs(((((-1.0)*x5613*x5616))+x5616)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5618=((-1.0)*r21);
CheckValue<IkReal> x5621 = IKatan2WithCheck(IkReal(x5618),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5621.valid){
continue;
}
IkReal x5619=((1.0)*(x5621.value));
IkReal x5620=x5604;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5619)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5619)));
IkReal gconst118=(x5618*x5620);
IkReal gconst119=((1.0)*r20*x5620);
IkReal x5622=r22*r22;
IkReal x5623=((1.0)*x5622);
CheckValue<IkReal> x5627=IKPowWithIntegerCheck(((-1.0)+x5622),-1);
if(!x5627.valid){
continue;
}
IkReal x5624=x5627.value;
if((((1.0)+(((-1.0)*x5623)))) < -0.00001)
continue;
IkReal x5625=IKsqrt(((1.0)+(((-1.0)*x5623))));
IkReal x5626=(sj0*x5624*x5625);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5626+(((-1.0)*x5623*x5626))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5628=((-1.0)*r21);
CheckValue<IkReal> x5631 = IKatan2WithCheck(IkReal(x5628),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5631.valid){
continue;
}
IkReal x5629=((1.0)*(x5631.value));
IkReal x5630=x5604;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5629)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5629)));
IkReal gconst118=(x5628*x5630);
IkReal gconst119=((1.0)*r20*x5630);
IkReal x5632=r22*r22;
IkReal x5633=(r12*sj0);
IkReal x5634=(cj0*r02);
CheckValue<IkReal> x5638=IKPowWithIntegerCheck(((-1.0)+x5632),-1);
if(!x5638.valid){
continue;
}
IkReal x5635=x5638.value;
if((((1.0)+(((-1.0)*x5632)))) < -0.00001)
continue;
IkReal x5636=IKsqrt(((1.0)+(((-1.0)*x5632))));
IkReal x5637=(r22*x5635*x5636);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x5633*x5637))+((x5634*x5637)))))+(IKabs(((((-1.0)*x5634))+(((-1.0)*x5633))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5639=((1.0)*sj0);
IkReal x5640=((1.0)*gconst118);
CheckValue<IkReal> x5641=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5640)))),-1);
if(!x5641.valid){
continue;
}
CheckValue<IkReal> x5642 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5639))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5640))+(((-1.0)*gconst118*r11*x5639))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5641.value)))+(x5642.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5643=IKsin(j4);
IkReal x5644=IKcos(j4);
IkReal x5645=(gconst118*r01);
IkReal x5646=(sj1*sj2);
IkReal x5647=(gconst119*r20);
IkReal x5648=(gconst119*r10);
IkReal x5649=(gconst119*r00);
IkReal x5650=(gconst118*r21);
IkReal x5651=(gconst118*r11);
IkReal x5652=((1.0)*x5644);
IkReal x5653=((1.0)*cj1*cj2);
IkReal x5654=((1.0)*x5643);
evalcond[0]=((((-1.0)*r22*x5652))+(((-1.0)*x5647*x5654))+((x5643*x5650)));
evalcond[1]=((((-1.0)*r12*x5652))+cj0+(((-1.0)*x5648*x5654))+((x5643*x5651)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5649*x5654))+(((-1.0)*r02*x5652))+((x5643*x5645)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5647*x5652))+((cj1*sj2))+((x5644*x5650))+((r22*x5643)));
evalcond[4]=(((cj0*x5646))+((x5644*x5645))+(((-1.0)*x5649*x5652))+(((-1.0)*cj0*x5653))+((r02*x5643)));
evalcond[5]=((((-1.0)*sj0*x5653))+((sj0*x5646))+((r12*x5643))+((x5644*x5651))+(((-1.0)*x5648*x5652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5655=((1.0)*gconst119);
CheckValue<IkReal> x5656=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5655))+(((-1.0)*gconst118*r10)))),-1);
if(!x5656.valid){
continue;
}
CheckValue<IkReal> x5657 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x5655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5656.value)))+(x5657.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5658=IKsin(j4);
IkReal x5659=IKcos(j4);
IkReal x5660=(gconst118*r01);
IkReal x5661=(sj1*sj2);
IkReal x5662=(gconst119*r20);
IkReal x5663=(gconst119*r10);
IkReal x5664=(gconst119*r00);
IkReal x5665=(gconst118*r21);
IkReal x5666=(gconst118*r11);
IkReal x5667=((1.0)*x5659);
IkReal x5668=((1.0)*cj1*cj2);
IkReal x5669=((1.0)*x5658);
evalcond[0]=((((-1.0)*r22*x5667))+(((-1.0)*x5662*x5669))+((x5658*x5665)));
evalcond[1]=(cj0+(((-1.0)*x5663*x5669))+(((-1.0)*r12*x5667))+((x5658*x5666)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5667))+(((-1.0)*x5664*x5669))+((x5658*x5660)));
evalcond[3]=(((x5659*x5665))+((cj2*sj1))+((cj1*sj2))+((r22*x5658))+(((-1.0)*x5662*x5667)));
evalcond[4]=(((x5659*x5660))+(((-1.0)*cj0*x5668))+((r02*x5658))+(((-1.0)*x5664*x5667))+((cj0*x5661)));
evalcond[5]=(((x5659*x5666))+((r12*x5658))+(((-1.0)*sj0*x5668))+(((-1.0)*x5663*x5667))+((sj0*x5661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5670=((1.0)*gconst119);
CheckValue<IkReal> x5671=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5670))+(((-1.0)*gconst118*r00)))),-1);
if(!x5671.valid){
continue;
}
CheckValue<IkReal> x5672 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5670)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5671.value)))+(x5672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5673=IKsin(j4);
IkReal x5674=IKcos(j4);
IkReal x5675=(gconst118*r01);
IkReal x5676=(sj1*sj2);
IkReal x5677=(gconst119*r20);
IkReal x5678=(gconst119*r10);
IkReal x5679=(gconst119*r00);
IkReal x5680=(gconst118*r21);
IkReal x5681=(gconst118*r11);
IkReal x5682=((1.0)*x5674);
IkReal x5683=((1.0)*cj1*cj2);
IkReal x5684=((1.0)*x5673);
evalcond[0]=(((x5673*x5680))+(((-1.0)*r22*x5682))+(((-1.0)*x5677*x5684)));
evalcond[1]=(cj0+((x5673*x5681))+(((-1.0)*x5678*x5684))+(((-1.0)*r12*x5682)));
evalcond[2]=((((-1.0)*r02*x5682))+(((-1.0)*sj0))+(((-1.0)*x5679*x5684))+((x5673*x5675)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5673))+(((-1.0)*x5677*x5682))+((x5674*x5680)));
evalcond[4]=(((r02*x5673))+((cj0*x5676))+(((-1.0)*cj0*x5683))+(((-1.0)*x5679*x5682))+((x5674*x5675)));
evalcond[5]=(((sj0*x5676))+(((-1.0)*x5678*x5682))+(((-1.0)*sj0*x5683))+((r12*x5673))+((x5674*x5681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5685=((-1.0)*r10);
IkReal x5687 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5687)==0){
continue;
}
IkReal x5686=pow(x5687,-0.5);
CheckValue<IkReal> x5688 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5685),IKFAST_ATAN2_MAGTHRESH);
if(!x5688.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5688.value));
IkReal gconst121=(r11*x5686);
IkReal gconst122=(x5685*x5686);
CheckValue<IkReal> x5689 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5689.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5689.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5690=((-1.0)*r10);
IkReal x5691=x5686;
CheckValue<IkReal> x5693 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5690),IKFAST_ATAN2_MAGTHRESH);
if(!x5693.valid){
continue;
}
IkReal x5692=((-1.0)*(x5693.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5692;
IkReal gconst120=x5692;
IkReal gconst121=(r11*x5691);
IkReal gconst122=(x5690*x5691);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5694=((1.0)*sj0);
IkReal x5695=((1.0)*gconst121);
CheckValue<IkReal> x5696 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5694)))),IkReal(((((-1.0)*cj0*r01*x5695))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x5694))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5696.valid){
continue;
}
CheckValue<IkReal> x5697=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x5695)))),-1);
if(!x5697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5696.value)+(((1.5707963267949)*(x5697.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5698=IKsin(j4);
IkReal x5699=IKcos(j4);
IkReal x5700=(gconst121*r11);
IkReal x5701=(sj1*sj2);
IkReal x5702=(gconst122*r00);
IkReal x5703=(gconst122*r10);
IkReal x5704=(gconst122*r20);
IkReal x5705=((1.0)*x5699);
IkReal x5706=((1.0)*cj1*cj2);
IkReal x5707=((1.0)*x5698);
IkReal x5708=(gconst121*x5698);
IkReal x5709=(gconst121*x5699);
evalcond[0]=((((-1.0)*r22*x5705))+(((-1.0)*x5704*x5707))+((r21*x5708)));
evalcond[1]=((((-1.0)*r12*x5705))+cj0+(((-1.0)*x5703*x5707))+((x5698*x5700)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5702*x5707))+((r01*x5708))+(((-1.0)*r02*x5705)));
evalcond[3]=(((cj2*sj1))+((r22*x5698))+((cj1*sj2))+(((-1.0)*x5704*x5705))+((r21*x5709)));
evalcond[4]=((((-1.0)*x5702*x5705))+((r02*x5698))+((r01*x5709))+(((-1.0)*cj0*x5706))+((cj0*x5701)));
evalcond[5]=(((sj0*x5701))+(((-1.0)*x5703*x5705))+(((-1.0)*sj0*x5706))+((r12*x5698))+((x5699*x5700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5710=((1.0)*gconst122);
CheckValue<IkReal> x5711 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5710))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5711.valid){
continue;
}
CheckValue<IkReal> x5712=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5710))+(((-1.0)*gconst121*r00)))),-1);
if(!x5712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5711.value)+(((1.5707963267949)*(x5712.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5713=IKsin(j4);
IkReal x5714=IKcos(j4);
IkReal x5715=(gconst121*r11);
IkReal x5716=(sj1*sj2);
IkReal x5717=(gconst122*r00);
IkReal x5718=(gconst122*r10);
IkReal x5719=(gconst122*r20);
IkReal x5720=((1.0)*x5714);
IkReal x5721=((1.0)*cj1*cj2);
IkReal x5722=((1.0)*x5713);
IkReal x5723=(gconst121*x5713);
IkReal x5724=(gconst121*x5714);
evalcond[0]=(((r21*x5723))+(((-1.0)*x5719*x5722))+(((-1.0)*r22*x5720)));
evalcond[1]=(cj0+(((-1.0)*r12*x5720))+(((-1.0)*x5718*x5722))+((x5713*x5715)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5723))+(((-1.0)*x5717*x5722))+(((-1.0)*r02*x5720)));
evalcond[3]=(((cj2*sj1))+((r21*x5724))+((r22*x5713))+((cj1*sj2))+(((-1.0)*x5719*x5720)));
evalcond[4]=(((r02*x5713))+((r01*x5724))+((cj0*x5716))+(((-1.0)*x5717*x5720))+(((-1.0)*cj0*x5721)));
evalcond[5]=((((-1.0)*sj0*x5721))+(((-1.0)*x5718*x5720))+((sj0*x5716))+((r12*x5713))+((x5714*x5715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5725=((-1.0)*r11);
IkReal x5727 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5727)==0){
continue;
}
IkReal x5726=pow(x5727,-0.5);
CheckValue<IkReal> x5728 = IKatan2WithCheck(IkReal(x5725),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5728.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5728.value))));
IkReal gconst124=(x5725*x5726);
IkReal gconst125=((1.0)*r10*x5726);
CheckValue<IkReal> x5729 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5729.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5729.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5730=((-1.0)*r11);
CheckValue<IkReal> x5733 = IKatan2WithCheck(IkReal(x5730),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5733.valid){
continue;
}
IkReal x5731=((1.0)*(x5733.value));
IkReal x5732=x5726;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5731)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5731)));
IkReal gconst124=(x5730*x5732);
IkReal gconst125=((1.0)*r10*x5732);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5734=((-1.0)*r11);
CheckValue<IkReal> x5737 = IKatan2WithCheck(IkReal(x5734),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5737.valid){
continue;
}
IkReal x5735=((1.0)*(x5737.value));
IkReal x5736=x5726;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5735)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5735)));
IkReal gconst124=(x5734*x5736);
IkReal gconst125=((1.0)*r10*x5736);
IkReal x5738=r12*r12;
IkReal x5739=((1.0)*sj0);
IkReal x5740=(cj0*r02);
IkReal x5741=x5726;
j4eval[0]=((IKabs(((((-1.0)*r12*x5739))+(((-1.0)*x5740)))))+(IKabs((((sj0*x5738*x5741))+((r12*x5740*x5741))+(((-1.0)*x5739*x5741))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5742=((-1.0)*r11);
CheckValue<IkReal> x5745 = IKatan2WithCheck(IkReal(x5742),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5745.valid){
continue;
}
IkReal x5743=((1.0)*(x5745.value));
IkReal x5744=x5726;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5743)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5743)));
IkReal gconst124=(x5742*x5744);
IkReal gconst125=((1.0)*r10*x5744);
IkReal x5746=r12*r12;
IkReal x5747=((1.0)+(((-1.0)*x5746)));
IkReal x5748=(cj2*r22*sj1);
IkReal x5749=(cj1*r22*sj2);
CheckValue<IkReal> x5756=IKPowWithIntegerCheck(x5747,-1);
if(!x5756.valid){
continue;
}
IkReal x5750=x5756.value;
CheckValue<IkReal> x5757=IKPowWithIntegerCheck(((-1.0)+x5746),-1);
if(!x5757.valid){
continue;
}
IkReal x5751=x5757.value;
IkReal x5752=((1.0)*x5750);
if((x5747) < -0.00001)
continue;
IkReal x5753=IKsqrt(x5747);
IkReal x5754=((1.0)*r12*x5751*x5753);
IkReal x5755=((((-1.0)*x5752*(r10*r10)*(r20*r20)))+(((-1.0)*x5752*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x5750))+(((-1.0)*(r22*r22))));
j4eval[0]=x5755;
j4eval[1]=IKsign(x5755);
j4eval[2]=((IKabs(((((-1.0)*x5749*x5754))+(((-1.0)*x5748*x5754)))))+(IKabs((x5748+x5749))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5758=(gconst124*r21);
IkReal x5759=(cj1*sj2);
IkReal x5760=(cj2*sj1);
IkReal x5761=(gconst125*r20);
CheckValue<IkReal> x5762 = IKatan2WithCheck(IkReal((((r22*x5760))+((r22*x5759)))),IkReal((((x5758*x5759))+(((-1.0)*x5760*x5761))+(((-1.0)*x5759*x5761))+((x5758*x5760)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5762.valid){
continue;
}
CheckValue<IkReal> x5763=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5761*x5761)))+(((2.0)*x5758*x5761))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5758*x5758))))),-1);
if(!x5763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5762.value)+(((1.5707963267949)*(x5763.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5764=IKsin(j4);
IkReal x5765=IKcos(j4);
IkReal x5766=(sj1*sj2);
IkReal x5767=(gconst125*r20);
IkReal x5768=(gconst124*r01);
IkReal x5769=(gconst125*r00);
IkReal x5770=(gconst125*r10);
IkReal x5771=((1.0)*x5765);
IkReal x5772=((1.0)*cj1*cj2);
IkReal x5773=((1.0)*x5764);
IkReal x5774=(gconst124*x5764);
IkReal x5775=(gconst124*x5765);
evalcond[0]=((((-1.0)*x5767*x5773))+((r21*x5774))+(((-1.0)*r22*x5771)));
evalcond[1]=(cj0+(((-1.0)*r12*x5771))+(((-1.0)*x5770*x5773))+((r11*x5774)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5769*x5773))+((x5764*x5768))+(((-1.0)*r02*x5771)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5767*x5771))+((cj1*sj2))+((r22*x5764))+((r21*x5775)));
evalcond[4]=((((-1.0)*x5769*x5771))+((x5765*x5768))+(((-1.0)*cj0*x5772))+((cj0*x5766))+((r02*x5764)));
evalcond[5]=((((-1.0)*sj0*x5772))+(((-1.0)*x5770*x5771))+((r11*x5775))+((r12*x5764))+((sj0*x5766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5776=((1.0)*sj0);
IkReal x5777=((1.0)*cj0);
CheckValue<IkReal> x5778 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5776))+(((-1.0)*r02*x5777)))),IkReal(((((-1.0)*gconst124*r11*x5776))+((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x5777))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5778.valid){
continue;
}
CheckValue<IkReal> x5779=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5778.value)+(((1.5707963267949)*(x5779.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5780=IKsin(j4);
IkReal x5781=IKcos(j4);
IkReal x5782=(sj1*sj2);
IkReal x5783=(gconst125*r20);
IkReal x5784=(gconst124*r01);
IkReal x5785=(gconst125*r00);
IkReal x5786=(gconst125*r10);
IkReal x5787=((1.0)*x5781);
IkReal x5788=((1.0)*cj1*cj2);
IkReal x5789=((1.0)*x5780);
IkReal x5790=(gconst124*x5780);
IkReal x5791=(gconst124*x5781);
evalcond[0]=((((-1.0)*x5783*x5789))+((r21*x5790))+(((-1.0)*r22*x5787)));
evalcond[1]=(cj0+((r11*x5790))+(((-1.0)*x5786*x5789))+(((-1.0)*r12*x5787)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5785*x5789))+(((-1.0)*r02*x5787))+((x5780*x5784)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5783*x5787))+((r21*x5791))+((r22*x5780)));
evalcond[4]=((((-1.0)*x5785*x5787))+(((-1.0)*cj0*x5788))+((r02*x5780))+((cj0*x5782))+((x5781*x5784)));
evalcond[5]=(((r12*x5780))+((r11*x5791))+(((-1.0)*x5786*x5787))+((sj0*x5782))+(((-1.0)*sj0*x5788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5792=((1.0)*gconst125);
CheckValue<IkReal> x5793 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5792))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5793.valid){
continue;
}
CheckValue<IkReal> x5794=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5792)))),-1);
if(!x5794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5793.value)+(((1.5707963267949)*(x5794.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5795=IKsin(j4);
IkReal x5796=IKcos(j4);
IkReal x5797=(sj1*sj2);
IkReal x5798=(gconst125*r20);
IkReal x5799=(gconst124*r01);
IkReal x5800=(gconst125*r00);
IkReal x5801=(gconst125*r10);
IkReal x5802=((1.0)*x5796);
IkReal x5803=((1.0)*cj1*cj2);
IkReal x5804=((1.0)*x5795);
IkReal x5805=(gconst124*x5795);
IkReal x5806=(gconst124*x5796);
evalcond[0]=((((-1.0)*r22*x5802))+(((-1.0)*x5798*x5804))+((r21*x5805)));
evalcond[1]=(cj0+(((-1.0)*r12*x5802))+((r11*x5805))+(((-1.0)*x5801*x5804)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5800*x5804))+((x5795*x5799))+(((-1.0)*r02*x5802)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5798*x5802))+((cj1*sj2))+((r21*x5806))+((r22*x5795)));
evalcond[4]=((((-1.0)*x5800*x5802))+((x5796*x5799))+(((-1.0)*cj0*x5803))+((cj0*x5797))+((r02*x5795)));
evalcond[5]=(((r12*x5795))+((r11*x5806))+((sj0*x5797))+(((-1.0)*sj0*x5803))+(((-1.0)*x5801*x5802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5807=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5807;
j4eval[1]=IKsign(x5807);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5808=((1.0)*cj5);
IkReal x5809=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5808)));
j4eval[0]=x5809;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x5808))+((r21*sj5))))));
j4eval[2]=IKsign(x5809);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5810=cj5*cj5;
IkReal x5811=r11*r11;
IkReal x5812=(cj5*r10);
IkReal x5813=(r11*sj5);
IkReal x5814=((((-1.0)*x5811))+((x5810*x5811))+(((-1.0)*(r12*r12)))+(((-1.0)*x5810*(r10*r10)))+(((2.0)*x5812*x5813)));
j4eval[0]=x5814;
j4eval[1]=IKsign(x5814);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5812))+x5813))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5815=cj5*cj5;
IkReal x5816=r11*r11;
IkReal x5817=(cj5*r10);
IkReal x5818=(r11*sj5);
CheckValue<IkReal> x5819 = IKatan2WithCheck(IkReal(((((-1.0)*x5817))+x5818)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5819.valid){
continue;
}
CheckValue<IkReal> x5820=IKPowWithIntegerCheck(IKsign((((x5815*x5816))+(((-1.0)*x5816))+(((2.0)*x5817*x5818))+(((-1.0)*x5815*(r10*r10)))+(((-1.0)*(r12*r12))))),-1);
if(!x5820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5819.value)+(((1.5707963267949)*(x5820.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5821=IKcos(j4);
IkReal x5822=IKsin(j4);
IkReal x5823=(cj5*r00);
IkReal x5824=(cj5*r10);
IkReal x5825=(r21*sj5);
IkReal x5826=(cj5*r20);
IkReal x5827=((1.0)*x5821);
IkReal x5828=((1.0)*x5822);
IkReal x5829=(sj5*x5822);
IkReal x5830=(sj5*x5821);
evalcond[0]=(((r12*x5822))+((r11*x5830))+(((-1.0)*x5824*x5827)));
evalcond[1]=((((-1.0)*r22*x5827))+((x5822*x5825))+(((-1.0)*x5826*x5828)));
evalcond[2]=((((-1.0)*r02*x5827))+(((-1.0)*x5823*x5828))+((r01*x5829)));
evalcond[3]=((1.0)+((r11*x5829))+(((-1.0)*x5824*x5828))+(((-1.0)*r12*x5827)));
evalcond[4]=(((cj2*sj1))+((x5821*x5825))+((cj1*sj2))+(((-1.0)*x5826*x5827))+((r22*x5822)));
evalcond[5]=(((r02*x5822))+(((-1.0)*x5823*x5827))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5831=((1.0)*cj5);
CheckValue<IkReal> x5832 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5831))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5832.valid){
continue;
}
CheckValue<IkReal> x5833=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5831))+(((-1.0)*r00*sj5)))),-1);
if(!x5833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5832.value)+(((1.5707963267949)*(x5833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5834=IKcos(j4);
IkReal x5835=IKsin(j4);
IkReal x5836=(cj5*r00);
IkReal x5837=(cj5*r10);
IkReal x5838=(r21*sj5);
IkReal x5839=(cj5*r20);
IkReal x5840=((1.0)*x5834);
IkReal x5841=((1.0)*x5835);
IkReal x5842=(sj5*x5835);
IkReal x5843=(sj5*x5834);
evalcond[0]=((((-1.0)*x5837*x5840))+((r11*x5843))+((r12*x5835)));
evalcond[1]=(((x5835*x5838))+(((-1.0)*x5839*x5841))+(((-1.0)*r22*x5840)));
evalcond[2]=((((-1.0)*r02*x5840))+((r01*x5842))+(((-1.0)*x5836*x5841)));
evalcond[3]=((1.0)+(((-1.0)*x5837*x5841))+((r11*x5842))+(((-1.0)*r12*x5840)));
evalcond[4]=(((cj2*sj1))+((x5834*x5838))+((cj1*sj2))+(((-1.0)*x5839*x5840))+((r22*x5835)));
evalcond[5]=(((r02*x5835))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5843))+(((-1.0)*x5836*x5840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5844=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5844.valid){
continue;
}
CheckValue<IkReal> x5845 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5844.value)))+(x5845.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5846=IKcos(j4);
IkReal x5847=IKsin(j4);
IkReal x5848=(cj5*r00);
IkReal x5849=(cj5*r10);
IkReal x5850=(r21*sj5);
IkReal x5851=(cj5*r20);
IkReal x5852=((1.0)*x5846);
IkReal x5853=((1.0)*x5847);
IkReal x5854=(sj5*x5847);
IkReal x5855=(sj5*x5846);
evalcond[0]=((((-1.0)*x5849*x5852))+((r11*x5855))+((r12*x5847)));
evalcond[1]=(((x5847*x5850))+(((-1.0)*r22*x5852))+(((-1.0)*x5851*x5853)));
evalcond[2]=(((r01*x5854))+(((-1.0)*x5848*x5853))+(((-1.0)*r02*x5852)));
evalcond[3]=((1.0)+(((-1.0)*x5849*x5853))+((r11*x5854))+(((-1.0)*r12*x5852)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5851*x5852))+((r22*x5847))+((x5846*x5850)));
evalcond[5]=(((r01*x5855))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5848*x5852))+((r02*x5847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5856=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5856;
j4eval[1]=IKsign(x5856);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5857=((1.0)*cj5);
IkReal x5858=((((-1.0)*r21*x5857))+(((-1.0)*r20*sj5)));
j4eval[0]=x5858;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5857))))));
j4eval[2]=IKsign(x5858);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5859=cj5*cj5;
IkReal x5860=r11*r11;
IkReal x5861=(r11*sj5);
IkReal x5862=(cj5*r10);
IkReal x5863=((r12*r12)+(((-1.0)*x5859*x5860))+(((-2.0)*x5861*x5862))+((x5859*(r10*r10)))+x5860);
j4eval[0]=x5863;
j4eval[1]=IKsign(x5863);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5862))+x5861))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5864=cj5*cj5;
IkReal x5865=r11*r11;
IkReal x5866=(cj5*r10);
IkReal x5867=(r11*sj5);
CheckValue<IkReal> x5868 = IKatan2WithCheck(IkReal(((((-1.0)*x5866))+x5867)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5868.valid){
continue;
}
CheckValue<IkReal> x5869=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5864*x5865))+(r12*r12)+(((-2.0)*x5866*x5867))+((x5864*(r10*r10)))+x5865)),-1);
if(!x5869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5868.value)+(((1.5707963267949)*(x5869.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5870=IKcos(j4);
IkReal x5871=IKsin(j4);
IkReal x5872=(cj5*r00);
IkReal x5873=(cj5*r10);
IkReal x5874=(r21*sj5);
IkReal x5875=(cj5*r20);
IkReal x5876=((1.0)*x5870);
IkReal x5877=((1.0)*x5871);
IkReal x5878=(sj5*x5871);
IkReal x5879=(sj5*x5870);
evalcond[0]=((((-1.0)*x5873*x5876))+((r12*x5871))+((r11*x5879)));
evalcond[1]=((((-1.0)*x5875*x5877))+(((-1.0)*r22*x5876))+((x5871*x5874)));
evalcond[2]=((((-1.0)*x5872*x5877))+(((-1.0)*r02*x5876))+((r01*x5878)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5876))+(((-1.0)*x5873*x5877))+((r11*x5878)));
evalcond[4]=((((-1.0)*x5875*x5876))+((cj2*sj1))+((cj1*sj2))+((r22*x5871))+((x5870*x5874)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x5872*x5876))+((r02*x5871))+((cj1*cj2))+((r01*x5879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5880=((1.0)*cj5);
CheckValue<IkReal> x5881 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5880)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5881.valid){
continue;
}
CheckValue<IkReal> x5882=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5880))+(((-1.0)*r20*sj5)))),-1);
if(!x5882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5881.value)+(((1.5707963267949)*(x5882.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5883=IKcos(j4);
IkReal x5884=IKsin(j4);
IkReal x5885=(cj5*r00);
IkReal x5886=(cj5*r10);
IkReal x5887=(r21*sj5);
IkReal x5888=(cj5*r20);
IkReal x5889=((1.0)*x5883);
IkReal x5890=((1.0)*x5884);
IkReal x5891=(sj5*x5884);
IkReal x5892=(sj5*x5883);
evalcond[0]=(((r12*x5884))+(((-1.0)*x5886*x5889))+((r11*x5892)));
evalcond[1]=(((x5884*x5887))+(((-1.0)*x5888*x5890))+(((-1.0)*r22*x5889)));
evalcond[2]=((((-1.0)*x5885*x5890))+(((-1.0)*r02*x5889))+((r01*x5891)));
evalcond[3]=((-1.0)+(((-1.0)*x5886*x5890))+(((-1.0)*r12*x5889))+((r11*x5891)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5888*x5889))+((r22*x5884))+((x5883*x5887)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x5885*x5889))+((r01*x5892))+((cj1*cj2))+((r02*x5884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5893 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5893.valid){
continue;
}
CheckValue<IkReal> x5894=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5893.value)+(((1.5707963267949)*(x5894.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5895=IKcos(j4);
IkReal x5896=IKsin(j4);
IkReal x5897=(cj5*r00);
IkReal x5898=(cj5*r10);
IkReal x5899=(r21*sj5);
IkReal x5900=(cj5*r20);
IkReal x5901=((1.0)*x5895);
IkReal x5902=((1.0)*x5896);
IkReal x5903=(sj5*x5896);
IkReal x5904=(sj5*x5895);
evalcond[0]=((((-1.0)*x5898*x5901))+((r12*x5896))+((r11*x5904)));
evalcond[1]=((((-1.0)*r22*x5901))+(((-1.0)*x5900*x5902))+((x5896*x5899)));
evalcond[2]=((((-1.0)*x5897*x5902))+(((-1.0)*r02*x5901))+((r01*x5903)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5901))+(((-1.0)*x5898*x5902))+((r11*x5903)));
evalcond[4]=(((r22*x5896))+((cj2*sj1))+((cj1*sj2))+((x5895*x5899))+(((-1.0)*x5900*x5901)));
evalcond[5]=((((-1.0)*x5897*x5901))+(((-1.0)*sj1*sj2))+((r02*x5896))+((cj1*cj2))+((r01*x5904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5905=((-1.0)*r00);
IkReal x5907 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5907)==0){
continue;
}
IkReal x5906=pow(x5907,-0.5);
CheckValue<IkReal> x5908 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5905),IKFAST_ATAN2_MAGTHRESH);
if(!x5908.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5908.value));
IkReal gconst127=(r01*x5906);
IkReal gconst128=(x5905*x5906);
CheckValue<IkReal> x5909 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5909.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5909.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5910=((-1.0)*r00);
IkReal x5911=x5906;
CheckValue<IkReal> x5913 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5910),IKFAST_ATAN2_MAGTHRESH);
if(!x5913.valid){
continue;
}
IkReal x5912=((-1.0)*(x5913.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5912;
IkReal gconst126=x5912;
IkReal gconst127=(r01*x5911);
IkReal gconst128=(x5910*x5911);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5914=((1.0)*sj0);
IkReal x5915=((1.0)*gconst127);
CheckValue<IkReal> x5916 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5914))+(((-1.0)*cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x5915))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5914)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5916.valid){
continue;
}
CheckValue<IkReal> x5917=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5915))+(((-1.0)*gconst128*r21)))),-1);
if(!x5917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5916.value)+(((1.5707963267949)*(x5917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5918=IKsin(j4);
IkReal x5919=IKcos(j4);
IkReal x5920=(gconst127*r01);
IkReal x5921=(sj1*sj2);
IkReal x5922=(gconst128*r10);
IkReal x5923=(gconst128*r00);
IkReal x5924=(gconst128*r20);
IkReal x5925=((1.0)*x5919);
IkReal x5926=((1.0)*cj1*cj2);
IkReal x5927=((1.0)*x5918);
IkReal x5928=(gconst127*x5919);
IkReal x5929=(gconst127*x5918);
evalcond[0]=((((-1.0)*r22*x5925))+((r21*x5929))+(((-1.0)*x5924*x5927)));
evalcond[1]=(cj0+((r11*x5929))+(((-1.0)*r12*x5925))+(((-1.0)*x5922*x5927)));
evalcond[2]=((((-1.0)*sj0))+((x5918*x5920))+(((-1.0)*r02*x5925))+(((-1.0)*x5923*x5927)));
evalcond[3]=(((cj2*sj1))+((r22*x5918))+((cj1*sj2))+((r21*x5928))+(((-1.0)*x5924*x5925)));
evalcond[4]=(((x5919*x5920))+((r02*x5918))+(((-1.0)*x5923*x5925))+((cj0*x5921))+(((-1.0)*cj0*x5926)));
evalcond[5]=(((r12*x5918))+(((-1.0)*sj0*x5926))+((r11*x5928))+((sj0*x5921))+(((-1.0)*x5922*x5925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5930=((1.0)*gconst128);
CheckValue<IkReal> x5931=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5930))+(((-1.0)*gconst127*r10)))),-1);
if(!x5931.valid){
continue;
}
CheckValue<IkReal> x5932 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5930)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5931.value)))+(x5932.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5933=IKsin(j4);
IkReal x5934=IKcos(j4);
IkReal x5935=(gconst127*r01);
IkReal x5936=(sj1*sj2);
IkReal x5937=(gconst128*r10);
IkReal x5938=(gconst128*r00);
IkReal x5939=(gconst128*r20);
IkReal x5940=((1.0)*x5934);
IkReal x5941=((1.0)*cj1*cj2);
IkReal x5942=((1.0)*x5933);
IkReal x5943=(gconst127*x5934);
IkReal x5944=(gconst127*x5933);
evalcond[0]=((((-1.0)*r22*x5940))+((r21*x5944))+(((-1.0)*x5939*x5942)));
evalcond[1]=(cj0+(((-1.0)*x5937*x5942))+(((-1.0)*r12*x5940))+((r11*x5944)));
evalcond[2]=((((-1.0)*sj0))+((x5933*x5935))+(((-1.0)*x5938*x5942))+(((-1.0)*r02*x5940)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5933))+((r21*x5943))+(((-1.0)*x5939*x5940)));
evalcond[4]=(((x5934*x5935))+(((-1.0)*cj0*x5941))+(((-1.0)*x5938*x5940))+((cj0*x5936))+((r02*x5933)));
evalcond[5]=((((-1.0)*sj0*x5941))+(((-1.0)*x5937*x5940))+((r12*x5933))+((sj0*x5936))+((r11*x5943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5945=((-1.0)*r01);
IkReal x5947 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5947)==0){
continue;
}
IkReal x5946=pow(x5947,-0.5);
CheckValue<IkReal> x5948 = IKatan2WithCheck(IkReal(x5945),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5948.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5948.value))));
IkReal gconst130=(x5945*x5946);
IkReal gconst131=((1.0)*r00*x5946);
CheckValue<IkReal> x5949 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5949.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5949.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5950=((-1.0)*r01);
CheckValue<IkReal> x5953 = IKatan2WithCheck(IkReal(x5950),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5953.valid){
continue;
}
IkReal x5951=((1.0)*(x5953.value));
IkReal x5952=x5946;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5951)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5951)));
IkReal gconst130=(x5950*x5952);
IkReal gconst131=((1.0)*r00*x5952);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5954=((-1.0)*r01);
CheckValue<IkReal> x5957 = IKatan2WithCheck(IkReal(x5954),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5957.valid){
continue;
}
IkReal x5955=((1.0)*(x5957.value));
IkReal x5956=x5946;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5955)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5955)));
IkReal gconst130=(x5954*x5956);
IkReal gconst131=((1.0)*r00*x5956);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5958=((-1.0)*r01);
CheckValue<IkReal> x5961 = IKatan2WithCheck(IkReal(x5958),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5961.valid){
continue;
}
IkReal x5959=((1.0)*(x5961.value));
IkReal x5960=x5946;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5959)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5959)));
IkReal gconst130=(x5958*x5960);
IkReal gconst131=((1.0)*r00*x5960);
IkReal x5962=r02*r02;
IkReal x5963=(r12*sj0);
IkReal x5964=((1.0)*cj0);
IkReal x5965=x5946;
j4eval[0]=((IKabs(((((-1.0)*x5963))+(((-1.0)*r02*x5964)))))+(IKabs((((r02*x5963*x5965))+((cj0*x5962*x5965))+(((-1.0)*x5964*x5965))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5966=((1.0)*sj0);
IkReal x5967=((1.0)*gconst130);
CheckValue<IkReal> x5968=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5967))+(((-1.0)*gconst131*r21)))),-1);
if(!x5968.valid){
continue;
}
CheckValue<IkReal> x5969 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5966)))),IkReal(((((-1.0)*gconst130*r11*x5966))+(((-1.0)*cj0*r01*x5967))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5968.value)))+(x5969.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5970=IKsin(j4);
IkReal x5971=IKcos(j4);
IkReal x5972=(gconst131*r10);
IkReal x5973=(sj1*sj2);
IkReal x5974=(gconst131*r20);
IkReal x5975=(gconst131*r00);
IkReal x5976=((1.0)*x5971);
IkReal x5977=((1.0)*cj1*cj2);
IkReal x5978=(gconst130*x5970);
IkReal x5979=((1.0)*x5970);
IkReal x5980=(gconst130*x5971);
evalcond[0]=((((-1.0)*r22*x5976))+((r21*x5978))+(((-1.0)*x5974*x5979)));
evalcond[1]=(cj0+(((-1.0)*r12*x5976))+(((-1.0)*x5972*x5979))+((r11*x5978)));
evalcond[2]=((((-1.0)*r02*x5976))+(((-1.0)*sj0))+((r01*x5978))+(((-1.0)*x5975*x5979)));
evalcond[3]=(((cj2*sj1))+((r21*x5980))+((cj1*sj2))+((r22*x5970))+(((-1.0)*x5974*x5976)));
evalcond[4]=(((cj0*x5973))+(((-1.0)*cj0*x5977))+(((-1.0)*x5975*x5976))+((r02*x5970))+((r01*x5980)));
evalcond[5]=(((r11*x5980))+(((-1.0)*sj0*x5977))+(((-1.0)*x5972*x5976))+((r12*x5970))+((sj0*x5973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5981=((1.0)*gconst131);
CheckValue<IkReal> x5982=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5981))+(((-1.0)*gconst130*r10)))),-1);
if(!x5982.valid){
continue;
}
CheckValue<IkReal> x5983 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5981))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5982.value)))+(x5983.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5984=IKsin(j4);
IkReal x5985=IKcos(j4);
IkReal x5986=(gconst131*r10);
IkReal x5987=(sj1*sj2);
IkReal x5988=(gconst131*r20);
IkReal x5989=(gconst131*r00);
IkReal x5990=((1.0)*x5985);
IkReal x5991=((1.0)*cj1*cj2);
IkReal x5992=(gconst130*x5984);
IkReal x5993=((1.0)*x5984);
IkReal x5994=(gconst130*x5985);
evalcond[0]=(((r21*x5992))+(((-1.0)*x5988*x5993))+(((-1.0)*r22*x5990)));
evalcond[1]=((((-1.0)*r12*x5990))+cj0+(((-1.0)*x5986*x5993))+((r11*x5992)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5990))+((r01*x5992))+(((-1.0)*x5989*x5993)));
evalcond[3]=(((r21*x5994))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5988*x5990))+((r22*x5984)));
evalcond[4]=(((r02*x5984))+(((-1.0)*cj0*x5991))+((cj0*x5987))+((r01*x5994))+(((-1.0)*x5989*x5990)));
evalcond[5]=(((r12*x5984))+(((-1.0)*x5986*x5990))+((r11*x5994))+((sj0*x5987))+(((-1.0)*sj0*x5991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5995=((1.0)*gconst131);
CheckValue<IkReal> x5996 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x5995)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5996.valid){
continue;
}
CheckValue<IkReal> x5997=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r00))+(((-1.0)*r01*x5995)))),-1);
if(!x5997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5996.value)+(((1.5707963267949)*(x5997.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5998=IKsin(j4);
IkReal x5999=IKcos(j4);
IkReal x6000=(gconst131*r10);
IkReal x6001=(sj1*sj2);
IkReal x6002=(gconst131*r20);
IkReal x6003=(gconst131*r00);
IkReal x6004=((1.0)*x5999);
IkReal x6005=((1.0)*cj1*cj2);
IkReal x6006=(gconst130*x5998);
IkReal x6007=((1.0)*x5998);
IkReal x6008=(gconst130*x5999);
evalcond[0]=(((r21*x6006))+(((-1.0)*r22*x6004))+(((-1.0)*x6002*x6007)));
evalcond[1]=(cj0+((r11*x6006))+(((-1.0)*r12*x6004))+(((-1.0)*x6000*x6007)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6006))+(((-1.0)*x6003*x6007))+(((-1.0)*r02*x6004)));
evalcond[3]=(((r21*x6008))+((cj2*sj1))+((cj1*sj2))+((r22*x5998))+(((-1.0)*x6002*x6004)));
evalcond[4]=(((cj0*x6001))+((r02*x5998))+(((-1.0)*cj0*x6005))+((r01*x6008))+(((-1.0)*x6003*x6004)));
evalcond[5]=(((r12*x5998))+(((-1.0)*sj0*x6005))+((r11*x6008))+((sj0*x6001))+(((-1.0)*x6000*x6004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6009=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6009;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6009);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6010=((1.0)*cj5);
IkReal x6011=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6010)));
j4eval[0]=x6011;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6010))))));
j4eval[2]=IKsign(x6011);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6012=cj5*cj5;
IkReal x6013=r01*r01;
IkReal x6014=(cj5*r00);
IkReal x6015=(r01*sj5);
IkReal x6016=((((-2.0)*x6014*x6015))+x6013+((x6012*(r00*r00)))+(((-1.0)*x6012*x6013))+(r02*r02));
j4eval[0]=x6016;
j4eval[1]=IKsign(x6016);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6014))+x6015))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6017=cj5*cj5;
IkReal x6018=r01*r01;
IkReal x6019=(r01*sj5);
IkReal x6020=(cj5*r00);
CheckValue<IkReal> x6021=IKPowWithIntegerCheck(IKsign((x6018+(((-2.0)*x6019*x6020))+(((-1.0)*x6017*x6018))+((x6017*(r00*r00)))+(r02*r02))),-1);
if(!x6021.valid){
continue;
}
CheckValue<IkReal> x6022 = IKatan2WithCheck(IkReal((x6019+(((-1.0)*x6020)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6021.value)))+(x6022.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6023=IKcos(j4);
IkReal x6024=IKsin(j4);
IkReal x6025=(cj5*r00);
IkReal x6026=(cj5*r10);
IkReal x6027=(r21*sj5);
IkReal x6028=(cj5*r20);
IkReal x6029=((1.0)*x6023);
IkReal x6030=((1.0)*x6024);
IkReal x6031=(sj5*x6024);
IkReal x6032=(sj5*x6023);
evalcond[0]=((((-1.0)*x6025*x6029))+((r02*x6024))+((r01*x6032)));
evalcond[1]=((((-1.0)*r22*x6029))+((x6024*x6027))+(((-1.0)*x6028*x6030)));
evalcond[2]=(((r11*x6031))+(((-1.0)*x6026*x6030))+(((-1.0)*r12*x6029)));
evalcond[3]=((-1.0)+(((-1.0)*x6025*x6030))+(((-1.0)*r02*x6029))+((r01*x6031)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6028*x6029))+((x6023*x6027))+((r22*x6024)));
evalcond[5]=((((-1.0)*x6026*x6029))+((r11*x6032))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6033=((1.0)*cj5);
CheckValue<IkReal> x6034 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6033)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6034.valid){
continue;
}
CheckValue<IkReal> x6035=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6033)))),-1);
if(!x6035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6034.value)+(((1.5707963267949)*(x6035.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6036=IKcos(j4);
IkReal x6037=IKsin(j4);
IkReal x6038=(cj5*r00);
IkReal x6039=(cj5*r10);
IkReal x6040=(r21*sj5);
IkReal x6041=(cj5*r20);
IkReal x6042=((1.0)*x6036);
IkReal x6043=((1.0)*x6037);
IkReal x6044=(sj5*x6037);
IkReal x6045=(sj5*x6036);
evalcond[0]=(((r02*x6037))+(((-1.0)*x6038*x6042))+((r01*x6045)));
evalcond[1]=(((x6037*x6040))+(((-1.0)*r22*x6042))+(((-1.0)*x6041*x6043)));
evalcond[2]=(((r11*x6044))+(((-1.0)*x6039*x6043))+(((-1.0)*r12*x6042)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6042))+(((-1.0)*x6038*x6043))+((r01*x6044)));
evalcond[4]=(((r22*x6037))+((cj2*sj1))+((x6036*x6040))+((cj1*sj2))+(((-1.0)*x6041*x6042)));
evalcond[5]=(((r11*x6045))+((r12*x6037))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6039*x6042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6046=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6046.valid){
continue;
}
CheckValue<IkReal> x6047 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6046.value)))+(x6047.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6048=IKcos(j4);
IkReal x6049=IKsin(j4);
IkReal x6050=(cj5*r00);
IkReal x6051=(cj5*r10);
IkReal x6052=(r21*sj5);
IkReal x6053=(cj5*r20);
IkReal x6054=((1.0)*x6048);
IkReal x6055=((1.0)*x6049);
IkReal x6056=(sj5*x6049);
IkReal x6057=(sj5*x6048);
evalcond[0]=(((r01*x6057))+(((-1.0)*x6050*x6054))+((r02*x6049)));
evalcond[1]=((((-1.0)*x6053*x6055))+(((-1.0)*r22*x6054))+((x6049*x6052)));
evalcond[2]=((((-1.0)*x6051*x6055))+(((-1.0)*r12*x6054))+((r11*x6056)));
evalcond[3]=((-1.0)+((r01*x6056))+(((-1.0)*x6050*x6055))+(((-1.0)*r02*x6054)));
evalcond[4]=((((-1.0)*x6053*x6054))+((cj2*sj1))+((cj1*sj2))+((r22*x6049))+((x6048*x6052)));
evalcond[5]=((((-1.0)*x6051*x6054))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6049))+((r11*x6057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6058=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6058;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6058);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6059=((1.0)*cj5);
IkReal x6060=((((-1.0)*r21*x6059))+(((-1.0)*r20*sj5)));
j4eval[0]=x6060;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x6059))+((r11*sj5))))));
j4eval[2]=IKsign(x6060);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6061=(r01*sj5);
IkReal x6062=(cj1*sj2);
IkReal x6063=(cj2*sj1);
IkReal x6064=((1.0)*r02);
IkReal x6065=((1.0)*cj5*r00);
IkReal x6066=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6066;
j4eval[1]=((IKabs(((((-1.0)*x6063*x6064))+(((-1.0)*x6062*x6064)))))+(IKabs((((x6061*x6063))+((x6061*x6062))+(((-1.0)*x6063*x6065))+(((-1.0)*x6062*x6065))))));
j4eval[2]=IKsign(x6066);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6067=(r01*sj5);
IkReal x6068=(cj1*sj2);
IkReal x6069=(cj2*sj1);
IkReal x6070=((1.0)*r02);
IkReal x6071=((1.0)*cj5*r00);
CheckValue<IkReal> x6072 = IKatan2WithCheck(IkReal((((x6067*x6068))+((x6067*x6069))+(((-1.0)*x6068*x6071))+(((-1.0)*x6069*x6071)))),IkReal(((((-1.0)*x6068*x6070))+(((-1.0)*x6069*x6070)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6072.valid){
continue;
}
CheckValue<IkReal> x6073=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6072.value)+(((1.5707963267949)*(x6073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6074=IKcos(j4);
IkReal x6075=IKsin(j4);
IkReal x6076=(cj5*r00);
IkReal x6077=(cj5*r10);
IkReal x6078=(r21*sj5);
IkReal x6079=(cj5*r20);
IkReal x6080=((1.0)*x6074);
IkReal x6081=((1.0)*x6075);
IkReal x6082=(sj5*x6075);
IkReal x6083=(sj5*x6074);
evalcond[0]=(((r01*x6083))+((r02*x6075))+(((-1.0)*x6076*x6080)));
evalcond[1]=(((x6075*x6078))+(((-1.0)*r22*x6080))+(((-1.0)*x6079*x6081)));
evalcond[2]=((((-1.0)*r12*x6080))+(((-1.0)*x6077*x6081))+((r11*x6082)));
evalcond[3]=((1.0)+((r01*x6082))+(((-1.0)*r02*x6080))+(((-1.0)*x6076*x6081)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6075))+((x6074*x6078))+(((-1.0)*x6079*x6080)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x6077*x6080))+((cj1*cj2))+((r11*x6083))+((r12*x6075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6084=((1.0)*cj5);
CheckValue<IkReal> x6085=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6084))+(((-1.0)*r20*sj5)))),-1);
if(!x6085.valid){
continue;
}
CheckValue<IkReal> x6086 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6084)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6085.value)))+(x6086.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6087=IKcos(j4);
IkReal x6088=IKsin(j4);
IkReal x6089=(cj5*r00);
IkReal x6090=(cj5*r10);
IkReal x6091=(r21*sj5);
IkReal x6092=(cj5*r20);
IkReal x6093=((1.0)*x6087);
IkReal x6094=((1.0)*x6088);
IkReal x6095=(sj5*x6088);
IkReal x6096=(sj5*x6087);
evalcond[0]=((((-1.0)*x6089*x6093))+((r01*x6096))+((r02*x6088)));
evalcond[1]=((((-1.0)*r22*x6093))+((x6088*x6091))+(((-1.0)*x6092*x6094)));
evalcond[2]=((((-1.0)*x6090*x6094))+((r11*x6095))+(((-1.0)*r12*x6093)));
evalcond[3]=((1.0)+(((-1.0)*x6089*x6094))+((r01*x6095))+(((-1.0)*r02*x6093)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6092*x6093))+((x6087*x6091))+((r22*x6088)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x6090*x6093))+((r12*x6088))+((r11*x6096))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6097 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6097.valid){
continue;
}
CheckValue<IkReal> x6098=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6097.value)+(((1.5707963267949)*(x6098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6099=IKcos(j4);
IkReal x6100=IKsin(j4);
IkReal x6101=(cj5*r00);
IkReal x6102=(cj5*r10);
IkReal x6103=(r21*sj5);
IkReal x6104=(cj5*r20);
IkReal x6105=((1.0)*x6099);
IkReal x6106=((1.0)*x6100);
IkReal x6107=(sj5*x6100);
IkReal x6108=(sj5*x6099);
evalcond[0]=((((-1.0)*x6101*x6105))+((r02*x6100))+((r01*x6108)));
evalcond[1]=((((-1.0)*x6104*x6106))+((x6100*x6103))+(((-1.0)*r22*x6105)));
evalcond[2]=(((r11*x6107))+(((-1.0)*x6102*x6106))+(((-1.0)*r12*x6105)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6105))+(((-1.0)*x6101*x6106))+((r01*x6107)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6104*x6105))+((r22*x6100))+((cj1*sj2))+((x6099*x6103)));
evalcond[5]=(((r11*x6108))+(((-1.0)*x6102*x6105))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x6100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6109=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6109);
rxp1_1=(px*r21);
rxp1_2=(r11*x6109);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6110=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6110);
rxp1_1=(px*r21);
rxp1_2=(r11*x6110);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6111=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6111);
rxp1_1=(px*r21);
rxp1_2=(r11*x6111);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6114=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6114.valid){
continue;
}
IkReal x6112=x6114.value;
IkReal x6113=(sj0*x6112);
cj4array[0]=(((cj1*cj2*x6113))+(((-1.0)*sj1*sj2*x6113)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6115=IKsin(j4);
IkReal x6116=IKcos(j4);
IkReal x6117=(r21*sj5);
IkReal x6118=((1.0)*cj5*r20);
evalcond[0]=(r02*x6115);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6116)));
evalcond[2]=(((x6115*x6117))+(((-1.0)*x6115*x6118)));
evalcond[3]=(((r11*sj5*x6115))+(((-1.0)*cj5*r10*x6115)));
evalcond[4]=(((cj2*sj1))+((x6116*x6117))+((cj1*sj2))+(((-1.0)*x6116*x6118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6121=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6121.valid){
continue;
}
IkReal x6119=x6121.value;
IkReal x6120=((1.0)*x6119);
cj4array[0]=((((-1.0)*cj2*sj1*x6120))+(((-1.0)*cj1*sj2*x6120)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6122=IKsin(j4);
IkReal x6123=IKcos(j4);
IkReal x6124=((1.0)*sj0);
IkReal x6125=((1.0)*cj5);
IkReal x6126=(sj5*x6122);
evalcond[0]=(r02*x6122);
evalcond[1]=((((-1.0)*x6124))+(((-1.0)*r02*x6123)));
evalcond[2]=(((r21*x6126))+(((-1.0)*r20*x6122*x6125)));
evalcond[3]=((((-1.0)*r10*x6122*x6125))+((r11*x6126)));
evalcond[4]=((((-1.0)*r10*x6123*x6125))+(((-1.0)*cj1*cj2*x6124))+((r11*sj5*x6123))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6127=IKPowWithIntegerCheck(r02,-1);
if(!x6127.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6127.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6128=IKsin(j4);
IkReal x6129=IKcos(j4);
IkReal x6130=(r21*sj5);
IkReal x6131=((1.0)*cj5);
IkReal x6132=(r11*sj5);
evalcond[0]=(r02*x6128);
evalcond[1]=((((-1.0)*r20*x6128*x6131))+((x6128*x6130)));
evalcond[2]=(((x6128*x6132))+(((-1.0)*r10*x6128*x6131)));
evalcond[3]=(((cj2*sj1))+((x6129*x6130))+((cj1*sj2))+(((-1.0)*r20*x6129*x6131)));
evalcond[4]=(((x6129*x6132))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r10*x6129*x6131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6133=((1.0)*sj0);
IkReal x6134=((1.0)*cj0);
CheckValue<IkReal> x6135 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6133))+(((-1.0)*r02*x6134)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6134))+(((-1.0)*r11*sj5*x6133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6135.valid){
continue;
}
CheckValue<IkReal> x6136=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6135.value)+(((1.5707963267949)*(x6136.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6137=IKsin(j4);
IkReal x6138=IKcos(j4);
IkReal x6139=(cj5*r00);
IkReal x6140=(cj5*r10);
IkReal x6141=(r21*sj5);
IkReal x6142=(sj1*sj2);
IkReal x6143=(cj5*r20);
IkReal x6144=((1.0)*x6138);
IkReal x6145=((1.0)*cj1*cj2);
IkReal x6146=((1.0)*x6137);
IkReal x6147=(sj5*x6137);
IkReal x6148=(sj5*x6138);
evalcond[0]=((((-1.0)*x6143*x6146))+((x6137*x6141))+(((-1.0)*r22*x6144)));
evalcond[1]=(cj0+((r11*x6147))+(((-1.0)*x6140*x6146))+(((-1.0)*r12*x6144)));
evalcond[2]=((((-1.0)*x6139*x6146))+(((-1.0)*sj0))+(((-1.0)*r02*x6144))+((r01*x6147)));
evalcond[3]=(((cj2*sj1))+((r22*x6137))+((cj1*sj2))+((x6138*x6141))+(((-1.0)*x6143*x6144)));
evalcond[4]=((((-1.0)*x6139*x6144))+((r01*x6148))+((r02*x6137))+((cj0*x6142))+(((-1.0)*cj0*x6145)));
evalcond[5]=(((sj0*x6142))+(((-1.0)*sj0*x6145))+((r11*x6148))+(((-1.0)*x6140*x6144))+((r12*x6137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6149=((1.0)*cj5);
CheckValue<IkReal> x6150 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6149))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6150.valid){
continue;
}
CheckValue<IkReal> x6151=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6149)))),-1);
if(!x6151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6150.value)+(((1.5707963267949)*(x6151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6152=IKsin(j4);
IkReal x6153=IKcos(j4);
IkReal x6154=(cj5*r00);
IkReal x6155=(cj5*r10);
IkReal x6156=(r21*sj5);
IkReal x6157=(sj1*sj2);
IkReal x6158=(cj5*r20);
IkReal x6159=((1.0)*x6153);
IkReal x6160=((1.0)*cj1*cj2);
IkReal x6161=((1.0)*x6152);
IkReal x6162=(sj5*x6152);
IkReal x6163=(sj5*x6153);
evalcond[0]=(((x6152*x6156))+(((-1.0)*r22*x6159))+(((-1.0)*x6158*x6161)));
evalcond[1]=(cj0+(((-1.0)*x6155*x6161))+((r11*x6162))+(((-1.0)*r12*x6159)));
evalcond[2]=((((-1.0)*x6154*x6161))+(((-1.0)*sj0))+(((-1.0)*r02*x6159))+((r01*x6162)));
evalcond[3]=(((r22*x6152))+((cj2*sj1))+((x6153*x6156))+((cj1*sj2))+(((-1.0)*x6158*x6159)));
evalcond[4]=((((-1.0)*cj0*x6160))+((cj0*x6157))+((r02*x6152))+(((-1.0)*x6154*x6159))+((r01*x6163)));
evalcond[5]=(((r12*x6152))+(((-1.0)*sj0*x6160))+((sj0*x6157))+((r11*x6163))+(((-1.0)*x6155*x6159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6164=((1.0)*cj5);
CheckValue<IkReal> x6165=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6164)))),-1);
if(!x6165.valid){
continue;
}
CheckValue<IkReal> x6166 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6164)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6165.value)))+(x6166.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6167=IKsin(j4);
IkReal x6168=IKcos(j4);
IkReal x6169=(cj5*r00);
IkReal x6170=(cj5*r10);
IkReal x6171=(r21*sj5);
IkReal x6172=(sj1*sj2);
IkReal x6173=(cj5*r20);
IkReal x6174=((1.0)*x6168);
IkReal x6175=((1.0)*cj1*cj2);
IkReal x6176=((1.0)*x6167);
IkReal x6177=(sj5*x6167);
IkReal x6178=(sj5*x6168);
evalcond[0]=(((x6167*x6171))+(((-1.0)*x6173*x6176))+(((-1.0)*r22*x6174)));
evalcond[1]=(cj0+((r11*x6177))+(((-1.0)*r12*x6174))+(((-1.0)*x6170*x6176)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6177))+(((-1.0)*r02*x6174))+(((-1.0)*x6169*x6176)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6168*x6171))+(((-1.0)*x6173*x6174))+((r22*x6167)));
evalcond[4]=((((-1.0)*cj0*x6175))+((r02*x6167))+((r01*x6178))+((cj0*x6172))+(((-1.0)*x6169*x6174)));
evalcond[5]=((((-1.0)*sj0*x6175))+((r12*x6167))+((r11*x6178))+((sj0*x6172))+(((-1.0)*x6170*x6174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6179=r21*r21;
IkReal x6180=cj5*cj5;
IkReal x6181=(cj2*sj1);
IkReal x6182=(cj1*sj2);
IkReal x6183=(r21*sj5);
IkReal x6184=((1.0)*cj5*r20);
CheckValue<IkReal> x6185=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6180*(r20*r20)))+(((-1.0)*x6179))+(((2.0)*cj5*r20*x6183))+(((-1.0)*(r22*r22)))+((x6179*x6180)))),-1);
if(!x6185.valid){
continue;
}
CheckValue<IkReal> x6186 = IKatan2WithCheck(IkReal((((r22*x6182))+((r22*x6181)))),IkReal(((((-1.0)*x6182*x6184))+((x6181*x6183))+((x6182*x6183))+(((-1.0)*x6181*x6184)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6185.value)))+(x6186.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6187=IKsin(j4);
IkReal x6188=IKcos(j4);
IkReal x6189=(r21*sj5);
IkReal x6190=(cj5*r20);
IkReal x6191=((1.0)*x6188);
evalcond[0]=(((x6187*x6189))+(((-1.0)*r22*x6191))+(((-1.0)*x6187*x6190)));
evalcond[1]=(((cj2*sj1))+((r22*x6187))+((cj1*sj2))+(((-1.0)*x6190*x6191))+((x6188*x6189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6192=(cj5*sj4);
IkReal x6193=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x6193))+(((-1.0)*r00*x6192)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6192))+(((-1.0)*r11*x6193))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x6193))+(((-1.0)*r00*x6192))))+IKsqr((((r10*x6192))+(((-1.0)*r11*x6193))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x6193))+(((-1.0)*r00*x6192))), (((r10*x6192))+(((-1.0)*r11*x6193))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6194=IKcos(j0);
IkReal x6195=IKsin(j0);
IkReal x6196=((0.1)*sj5);
IkReal x6197=((0.392)*sj1);
IkReal x6198=(cj5*r11);
IkReal x6199=(cj5*r01);
IkReal x6200=((1.0)*cj1);
IkReal x6201=(r11*sj5);
IkReal x6202=((0.392)*cj2);
IkReal x6203=((1.0)*sj1);
IkReal x6204=((1.0)*cj4);
IkReal x6205=(r01*sj5);
IkReal x6206=(sj2*x6195);
IkReal x6207=(sj2*x6194);
IkReal x6208=(cj5*x6204);
IkReal x6209=(cj1*x6194);
IkReal x6210=(cj1*x6195);
IkReal x6211=(cj2*x6194);
IkReal x6212=((1.0)*cj5*sj4);
IkReal x6213=(cj2*x6195);
evalcond[0]=(x6194+(((-1.0)*r12*x6204))+((sj4*x6201))+(((-1.0)*r10*x6212)));
evalcond[1]=((((-1.0)*r02*x6204))+(((-1.0)*r00*x6212))+(((-1.0)*x6195))+((sj4*x6205)));
evalcond[2]=(((r00*sj5))+x6199+(((-1.0)*x6203*x6211))+(((-1.0)*x6200*x6207)));
evalcond[3]=(((r10*sj5))+x6198+(((-1.0)*x6203*x6213))+(((-1.0)*x6200*x6206)));
evalcond[4]=((((-1.0)*r00*x6208))+((sj1*x6207))+((r02*sj4))+(((-1.0)*x6200*x6211))+((cj4*x6205)));
evalcond[5]=(((sj1*x6206))+((r12*sj4))+(((-1.0)*x6200*x6213))+((cj4*x6201))+(((-1.0)*r10*x6208)));
evalcond[6]=((((-1.0)*x6197*x6207))+(((-0.1)*x6199))+(((-1.0)*px))+(((0.425)*x6209))+(((-0.134)*x6195))+((x6202*x6209))+(((-1.0)*r00*x6196)));
evalcond[7]=((((-1.0)*r10*x6196))+(((-1.0)*x6197*x6206))+(((-0.1)*x6198))+(((-1.0)*py))+(((0.134)*x6194))+((x6202*x6210))+(((0.425)*x6210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6214=((1.0)*cj5);
IkReal x6215=((1.0)*sj5);
CheckValue<IkReal> x6216 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6214))+(((-1.0)*r10*x6215)))),IkReal(((((-1.0)*r00*x6215))+(((-1.0)*r01*x6214)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6216.valid){
continue;
}
CheckValue<IkReal> x6217=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6217.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6216.value)+(((1.5707963267949)*(x6217.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6218=IKcos(j0);
IkReal x6219=IKsin(j0);
IkReal x6220=((0.1)*sj5);
IkReal x6221=(cj5*r11);
IkReal x6222=(cj5*r01);
IkReal x6223=((0.392)*cj2);
IkReal x6224=((1.0)*cj2);
IkReal x6225=((0.392)*sj2);
IkReal x6226=((1.0)*cj1*sj2);
IkReal x6227=(cj1*x6218);
IkReal x6228=(cj1*x6219);
IkReal x6229=(sj1*x6218);
IkReal x6230=(sj1*x6219);
evalcond[0]=((((-1.0)*x6224*x6229))+((r00*sj5))+x6222+(((-1.0)*x6218*x6226)));
evalcond[1]=((((-1.0)*x6224*x6230))+x6221+((r10*sj5))+(((-1.0)*x6219*x6226)));
evalcond[2]=((((-0.134)*x6219))+(((-1.0)*r00*x6220))+(((-1.0)*px))+((x6223*x6227))+(((-0.1)*x6222))+(((0.425)*x6227))+(((-1.0)*x6225*x6229)));
evalcond[3]=((((-1.0)*x6225*x6230))+(((-1.0)*py))+(((0.134)*x6218))+((x6223*x6228))+(((-1.0)*r10*x6220))+(((-0.1)*x6221))+(((0.425)*x6228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6231=((1.0)*cj5);
IkReal x6232=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6231)));
j4eval[0]=x6232;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6231)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6232);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6233=((1.0)*cj5);
IkReal x6234=((((-1.0)*r11*x6233))+(((-1.0)*r10*sj5)));
j4eval[0]=x6234;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6233))))));
j4eval[2]=IKsign(x6234);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6235=((1.0)*sj0);
IkReal x6236=((1.0)*cj0);
IkReal x6237=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6237;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6236))+(((-1.0)*r11*sj5*x6235)))))+(IKabs(((((-1.0)*r12*x6235))+(((-1.0)*r02*x6236))))));
j4eval[2]=IKsign(x6237);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6238=((-1.0)*r20);
IkReal x6240 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6240)==0){
continue;
}
IkReal x6239=pow(x6240,-0.5);
CheckValue<IkReal> x6241 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6238),IKFAST_ATAN2_MAGTHRESH);
if(!x6241.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6241.value));
IkReal gconst115=(r21*x6239);
IkReal gconst116=(x6238*x6239);
CheckValue<IkReal> x6242 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6242.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6242.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6243=((-1.0)*r20);
IkReal x6244=x6239;
CheckValue<IkReal> x6246 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6243),IKFAST_ATAN2_MAGTHRESH);
if(!x6246.valid){
continue;
}
IkReal x6245=((-1.0)*(x6246.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6245;
IkReal gconst114=x6245;
IkReal gconst115=(r21*x6244);
IkReal gconst116=(x6243*x6244);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6247=((-1.0)*r20);
IkReal x6248=x6239;
CheckValue<IkReal> x6250 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6247),IKFAST_ATAN2_MAGTHRESH);
if(!x6250.valid){
continue;
}
IkReal x6249=((-1.0)*(x6250.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6249;
IkReal gconst114=x6249;
IkReal gconst115=(r21*x6248);
IkReal gconst116=(x6247*x6248);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6251=((-1.0)*r20);
IkReal x6252=x6239;
CheckValue<IkReal> x6254 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6251),IKFAST_ATAN2_MAGTHRESH);
if(!x6254.valid){
continue;
}
IkReal x6253=((-1.0)*(x6254.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6253;
IkReal gconst114=x6253;
IkReal gconst115=(r21*x6252);
IkReal gconst116=(x6251*x6252);
IkReal x6255=((1.0)*(r22*r22));
CheckValue<IkReal> x6259=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6255))),-1);
if(!x6259.valid){
continue;
}
IkReal x6256=x6259.value;
IkReal x6257=((1.0)*x6256);
IkReal x6258=((((-2.0)*x6256*(r20*r20)*(r21*r21)))+(((-1.0)*x6255))+(((-1.0)*x6257*(r20*r20*r20*r20)))+(((-1.0)*x6257*(r21*r21*r21*r21))));
j4eval[0]=x6258;
j4eval[1]=IKsign(x6258);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6260=(cj2*sj1);
IkReal x6261=(gconst115*r21);
IkReal x6262=(cj1*sj2);
IkReal x6263=((1.0)*gconst116*r20);
CheckValue<IkReal> x6264=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6261*x6261)))+(((2.0)*gconst116*r20*x6261))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst116*r20*x6263)))),-1);
if(!x6264.valid){
continue;
}
CheckValue<IkReal> x6265 = IKatan2WithCheck(IkReal((((r22*x6262))+((r22*x6260)))),IkReal((((x6261*x6262))+((x6260*x6261))+(((-1.0)*x6260*x6263))+(((-1.0)*x6262*x6263)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6264.value)))+(x6265.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6266=IKsin(j4);
IkReal x6267=IKcos(j4);
IkReal x6268=(sj1*sj2);
IkReal x6269=((1.0)*x6267);
IkReal x6270=((1.0)*cj1*cj2);
IkReal x6271=(gconst115*x6266);
IkReal x6272=(gconst115*x6267);
IkReal x6273=((1.0)*gconst116*x6266);
evalcond[0]=((((-1.0)*r20*x6273))+((r21*x6271))+(((-1.0)*r22*x6269)));
evalcond[1]=((((-1.0)*r10*x6273))+cj0+((r11*x6271))+(((-1.0)*r12*x6269)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6269))+((r01*x6271))+(((-1.0)*r00*x6273)));
evalcond[3]=(((cj2*sj1))+((r22*x6266))+((cj1*sj2))+((r21*x6272))+(((-1.0)*gconst116*r20*x6269)));
evalcond[4]=(((r01*x6272))+(((-1.0)*gconst116*r00*x6269))+((r02*x6266))+(((-1.0)*cj0*x6270))+((cj0*x6268)));
evalcond[5]=((((-1.0)*gconst116*r10*x6269))+(((-1.0)*sj0*x6270))+((sj0*x6268))+((r12*x6266))+((r11*x6272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6274=((1.0)*gconst116);
CheckValue<IkReal> x6275 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x6274)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6275.valid){
continue;
}
CheckValue<IkReal> x6276=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6274)))),-1);
if(!x6276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6275.value)+(((1.5707963267949)*(x6276.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6277=IKsin(j4);
IkReal x6278=IKcos(j4);
IkReal x6279=(sj1*sj2);
IkReal x6280=((1.0)*x6278);
IkReal x6281=((1.0)*cj1*cj2);
IkReal x6282=(gconst115*x6277);
IkReal x6283=(gconst115*x6278);
IkReal x6284=((1.0)*gconst116*x6277);
evalcond[0]=((((-1.0)*r20*x6284))+(((-1.0)*r22*x6280))+((r21*x6282)));
evalcond[1]=(cj0+(((-1.0)*r10*x6284))+((r11*x6282))+(((-1.0)*r12*x6280)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6280))+(((-1.0)*r00*x6284))+((r01*x6282)));
evalcond[3]=(((r22*x6277))+((cj2*sj1))+(((-1.0)*gconst116*r20*x6280))+((cj1*sj2))+((r21*x6283)));
evalcond[4]=((((-1.0)*gconst116*r00*x6280))+((r02*x6277))+(((-1.0)*cj0*x6281))+((r01*x6283))+((cj0*x6279)));
evalcond[5]=(((r12*x6277))+((sj0*x6279))+(((-1.0)*gconst116*r10*x6280))+((r11*x6283))+(((-1.0)*sj0*x6281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6285=((1.0)*gconst116);
CheckValue<IkReal> x6286=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6285)))),-1);
if(!x6286.valid){
continue;
}
CheckValue<IkReal> x6287 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x6285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6286.value)))+(x6287.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6288=IKsin(j4);
IkReal x6289=IKcos(j4);
IkReal x6290=(sj1*sj2);
IkReal x6291=((1.0)*x6289);
IkReal x6292=((1.0)*cj1*cj2);
IkReal x6293=(gconst115*x6288);
IkReal x6294=(gconst115*x6289);
IkReal x6295=((1.0)*gconst116*x6288);
evalcond[0]=((((-1.0)*r20*x6295))+(((-1.0)*r22*x6291))+((r21*x6293)));
evalcond[1]=(cj0+((r11*x6293))+(((-1.0)*r10*x6295))+(((-1.0)*r12*x6291)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6295))+((r01*x6293))+(((-1.0)*r02*x6291)));
evalcond[3]=(((cj2*sj1))+((r22*x6288))+((cj1*sj2))+(((-1.0)*gconst116*r20*x6291))+((r21*x6294)));
evalcond[4]=(((r01*x6294))+(((-1.0)*gconst116*r00*x6291))+((cj0*x6290))+((r02*x6288))+(((-1.0)*cj0*x6292)));
evalcond[5]=(((r11*x6294))+((r12*x6288))+(((-1.0)*gconst116*r10*x6291))+((sj0*x6290))+(((-1.0)*sj0*x6292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6296=((-1.0)*r21);
IkReal x6298 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6298)==0){
continue;
}
IkReal x6297=pow(x6298,-0.5);
CheckValue<IkReal> x6299 = IKatan2WithCheck(IkReal(x6296),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6299.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6299.value))));
IkReal gconst118=(x6296*x6297);
IkReal gconst119=((1.0)*r20*x6297);
CheckValue<IkReal> x6300 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6300.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6300.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6301=((-1.0)*r21);
CheckValue<IkReal> x6304 = IKatan2WithCheck(IkReal(x6301),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6304.valid){
continue;
}
IkReal x6302=((1.0)*(x6304.value));
IkReal x6303=x6297;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6302)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6302)));
IkReal gconst118=(x6301*x6303);
IkReal gconst119=((1.0)*r20*x6303);
IkReal x6305=r22*r22;
IkReal x6306=((1.0)*x6305);
CheckValue<IkReal> x6310=IKPowWithIntegerCheck(((-1.0)+x6305),-1);
if(!x6310.valid){
continue;
}
IkReal x6307=x6310.value;
if((((1.0)+(((-1.0)*x6306)))) < -0.00001)
continue;
IkReal x6308=IKsqrt(((1.0)+(((-1.0)*x6306))));
IkReal x6309=(cj0*x6307*x6308);
j4eval[0]=((IKabs((x6309+(((-1.0)*x6306*x6309)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6311=((-1.0)*r21);
CheckValue<IkReal> x6314 = IKatan2WithCheck(IkReal(x6311),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6314.valid){
continue;
}
IkReal x6312=((1.0)*(x6314.value));
IkReal x6313=x6297;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6312)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6312)));
IkReal gconst118=(x6311*x6313);
IkReal gconst119=((1.0)*r20*x6313);
IkReal x6315=r22*r22;
IkReal x6316=((1.0)*x6315);
CheckValue<IkReal> x6320=IKPowWithIntegerCheck(((-1.0)+x6315),-1);
if(!x6320.valid){
continue;
}
IkReal x6317=x6320.value;
if((((1.0)+(((-1.0)*x6316)))) < -0.00001)
continue;
IkReal x6318=IKsqrt(((1.0)+(((-1.0)*x6316))));
IkReal x6319=(sj0*x6317*x6318);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6319+(((-1.0)*x6316*x6319))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6321=((-1.0)*r21);
CheckValue<IkReal> x6324 = IKatan2WithCheck(IkReal(x6321),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6324.valid){
continue;
}
IkReal x6322=((1.0)*(x6324.value));
IkReal x6323=x6297;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6322)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6322)));
IkReal gconst118=(x6321*x6323);
IkReal gconst119=((1.0)*r20*x6323);
IkReal x6325=r22*r22;
IkReal x6326=(r12*sj0);
IkReal x6327=(cj0*r02);
CheckValue<IkReal> x6331=IKPowWithIntegerCheck(((-1.0)+x6325),-1);
if(!x6331.valid){
continue;
}
IkReal x6328=x6331.value;
if((((1.0)+(((-1.0)*x6325)))) < -0.00001)
continue;
IkReal x6329=IKsqrt(((1.0)+(((-1.0)*x6325))));
IkReal x6330=(r22*x6328*x6329);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x6327))+(((-1.0)*x6326)))))+(IKabs((((x6326*x6330))+((x6327*x6330))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6332=((1.0)*sj0);
IkReal x6333=((1.0)*gconst118);
CheckValue<IkReal> x6334 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6332))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x6332))+(((-1.0)*cj0*r01*x6333))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6334.valid){
continue;
}
CheckValue<IkReal> x6335=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6333)))),-1);
if(!x6335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6334.value)+(((1.5707963267949)*(x6335.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6336=IKsin(j4);
IkReal x6337=IKcos(j4);
IkReal x6338=(gconst118*r01);
IkReal x6339=(sj1*sj2);
IkReal x6340=(gconst119*r20);
IkReal x6341=(gconst119*r10);
IkReal x6342=(gconst119*r00);
IkReal x6343=(gconst118*r21);
IkReal x6344=(gconst118*r11);
IkReal x6345=((1.0)*x6337);
IkReal x6346=((1.0)*cj1*cj2);
IkReal x6347=((1.0)*x6336);
evalcond[0]=((((-1.0)*x6340*x6347))+(((-1.0)*r22*x6345))+((x6336*x6343)));
evalcond[1]=((((-1.0)*x6341*x6347))+cj0+((x6336*x6344))+(((-1.0)*r12*x6345)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6342*x6347))+((x6336*x6338))+(((-1.0)*r02*x6345)));
evalcond[3]=((((-1.0)*x6340*x6345))+((cj2*sj1))+((r22*x6336))+((x6337*x6343))+((cj1*sj2)));
evalcond[4]=(((x6337*x6338))+((r02*x6336))+(((-1.0)*x6342*x6345))+(((-1.0)*cj0*x6346))+((cj0*x6339)));
evalcond[5]=((((-1.0)*x6341*x6345))+((r12*x6336))+((x6337*x6344))+((sj0*x6339))+(((-1.0)*sj0*x6346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6348=((1.0)*gconst119);
CheckValue<IkReal> x6349=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6348))+(((-1.0)*gconst118*r10)))),-1);
if(!x6349.valid){
continue;
}
CheckValue<IkReal> x6350 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x6348)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6349.value)))+(x6350.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6351=IKsin(j4);
IkReal x6352=IKcos(j4);
IkReal x6353=(gconst118*r01);
IkReal x6354=(sj1*sj2);
IkReal x6355=(gconst119*r20);
IkReal x6356=(gconst119*r10);
IkReal x6357=(gconst119*r00);
IkReal x6358=(gconst118*r21);
IkReal x6359=(gconst118*r11);
IkReal x6360=((1.0)*x6352);
IkReal x6361=((1.0)*cj1*cj2);
IkReal x6362=((1.0)*x6351);
evalcond[0]=((((-1.0)*r22*x6360))+(((-1.0)*x6355*x6362))+((x6351*x6358)));
evalcond[1]=(cj0+(((-1.0)*x6356*x6362))+(((-1.0)*r12*x6360))+((x6351*x6359)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6360))+(((-1.0)*x6357*x6362))+((x6351*x6353)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6351))+((x6352*x6358))+(((-1.0)*x6355*x6360)));
evalcond[4]=((((-1.0)*x6357*x6360))+((x6352*x6353))+((r02*x6351))+(((-1.0)*cj0*x6361))+((cj0*x6354)));
evalcond[5]=((((-1.0)*sj0*x6361))+((r12*x6351))+((sj0*x6354))+(((-1.0)*x6356*x6360))+((x6352*x6359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6363=((1.0)*gconst119);
CheckValue<IkReal> x6364 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6364.valid){
continue;
}
CheckValue<IkReal> x6365=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x6363)))),-1);
if(!x6365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6364.value)+(((1.5707963267949)*(x6365.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6366=IKsin(j4);
IkReal x6367=IKcos(j4);
IkReal x6368=(gconst118*r01);
IkReal x6369=(sj1*sj2);
IkReal x6370=(gconst119*r20);
IkReal x6371=(gconst119*r10);
IkReal x6372=(gconst119*r00);
IkReal x6373=(gconst118*r21);
IkReal x6374=(gconst118*r11);
IkReal x6375=((1.0)*x6367);
IkReal x6376=((1.0)*cj1*cj2);
IkReal x6377=((1.0)*x6366);
evalcond[0]=(((x6366*x6373))+(((-1.0)*x6370*x6377))+(((-1.0)*r22*x6375)));
evalcond[1]=(cj0+((x6366*x6374))+(((-1.0)*x6371*x6377))+(((-1.0)*r12*x6375)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6372*x6377))+(((-1.0)*r02*x6375))+((x6366*x6368)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6367*x6373))+(((-1.0)*x6370*x6375))+((r22*x6366)));
evalcond[4]=((((-1.0)*x6372*x6375))+((x6367*x6368))+((cj0*x6369))+((r02*x6366))+(((-1.0)*cj0*x6376)));
evalcond[5]=((((-1.0)*sj0*x6376))+((r12*x6366))+((x6367*x6374))+((sj0*x6369))+(((-1.0)*x6371*x6375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6378=((-1.0)*r10);
IkReal x6380 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6380)==0){
continue;
}
IkReal x6379=pow(x6380,-0.5);
CheckValue<IkReal> x6381 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6378),IKFAST_ATAN2_MAGTHRESH);
if(!x6381.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6381.value));
IkReal gconst121=(r11*x6379);
IkReal gconst122=(x6378*x6379);
CheckValue<IkReal> x6382 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6382.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6382.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6383=((-1.0)*r10);
IkReal x6384=x6379;
CheckValue<IkReal> x6386 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6383),IKFAST_ATAN2_MAGTHRESH);
if(!x6386.valid){
continue;
}
IkReal x6385=((-1.0)*(x6386.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6385;
IkReal gconst120=x6385;
IkReal gconst121=(r11*x6384);
IkReal gconst122=(x6383*x6384);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6387=((1.0)*sj0);
IkReal x6388=((1.0)*gconst121);
CheckValue<IkReal> x6389=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6388))+(((-1.0)*gconst122*r21)))),-1);
if(!x6389.valid){
continue;
}
CheckValue<IkReal> x6390 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6387))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst121*r11*x6387))+(((-1.0)*cj0*r01*x6388))+((cj0*gconst122*r00))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6389.value)))+(x6390.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6391=IKsin(j4);
IkReal x6392=IKcos(j4);
IkReal x6393=(gconst121*r11);
IkReal x6394=(sj1*sj2);
IkReal x6395=(gconst122*r00);
IkReal x6396=(gconst122*r10);
IkReal x6397=(gconst122*r20);
IkReal x6398=((1.0)*x6392);
IkReal x6399=((1.0)*cj1*cj2);
IkReal x6400=((1.0)*x6391);
IkReal x6401=(gconst121*x6391);
IkReal x6402=(gconst121*x6392);
evalcond[0]=(((r21*x6401))+(((-1.0)*r22*x6398))+(((-1.0)*x6397*x6400)));
evalcond[1]=(((x6391*x6393))+cj0+(((-1.0)*x6396*x6400))+(((-1.0)*r12*x6398)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6401))+(((-1.0)*r02*x6398))+(((-1.0)*x6395*x6400)));
evalcond[3]=(((cj2*sj1))+((r21*x6402))+((cj1*sj2))+(((-1.0)*x6397*x6398))+((r22*x6391)));
evalcond[4]=((((-1.0)*x6395*x6398))+((cj0*x6394))+((r01*x6402))+(((-1.0)*cj0*x6399))+((r02*x6391)));
evalcond[5]=((((-1.0)*sj0*x6399))+((x6392*x6393))+((r12*x6391))+((sj0*x6394))+(((-1.0)*x6396*x6398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6403=((1.0)*gconst122);
CheckValue<IkReal> x6404 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6403))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6404.valid){
continue;
}
CheckValue<IkReal> x6405=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6403)))),-1);
if(!x6405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6404.value)+(((1.5707963267949)*(x6405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6406=IKsin(j4);
IkReal x6407=IKcos(j4);
IkReal x6408=(gconst121*r11);
IkReal x6409=(sj1*sj2);
IkReal x6410=(gconst122*r00);
IkReal x6411=(gconst122*r10);
IkReal x6412=(gconst122*r20);
IkReal x6413=((1.0)*x6407);
IkReal x6414=((1.0)*cj1*cj2);
IkReal x6415=((1.0)*x6406);
IkReal x6416=(gconst121*x6406);
IkReal x6417=(gconst121*x6407);
evalcond[0]=(((r21*x6416))+(((-1.0)*x6412*x6415))+(((-1.0)*r22*x6413)));
evalcond[1]=(cj0+((x6406*x6408))+(((-1.0)*x6411*x6415))+(((-1.0)*r12*x6413)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6416))+(((-1.0)*r02*x6413))+(((-1.0)*x6410*x6415)));
evalcond[3]=(((cj2*sj1))+((r21*x6417))+(((-1.0)*x6412*x6413))+((cj1*sj2))+((r22*x6406)));
evalcond[4]=(((r02*x6406))+((r01*x6417))+((cj0*x6409))+(((-1.0)*cj0*x6414))+(((-1.0)*x6410*x6413)));
evalcond[5]=(((sj0*x6409))+((r12*x6406))+(((-1.0)*sj0*x6414))+(((-1.0)*x6411*x6413))+((x6407*x6408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6418=((-1.0)*r11);
IkReal x6420 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6420)==0){
continue;
}
IkReal x6419=pow(x6420,-0.5);
CheckValue<IkReal> x6421 = IKatan2WithCheck(IkReal(x6418),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6421.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6421.value))));
IkReal gconst124=(x6418*x6419);
IkReal gconst125=((1.0)*r10*x6419);
CheckValue<IkReal> x6422 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6422.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6422.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6423=((-1.0)*r11);
CheckValue<IkReal> x6426 = IKatan2WithCheck(IkReal(x6423),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6426.valid){
continue;
}
IkReal x6424=((1.0)*(x6426.value));
IkReal x6425=x6419;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6424)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6424)));
IkReal gconst124=(x6423*x6425);
IkReal gconst125=((1.0)*r10*x6425);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6427=((-1.0)*r11);
CheckValue<IkReal> x6430 = IKatan2WithCheck(IkReal(x6427),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6430.valid){
continue;
}
IkReal x6428=((1.0)*(x6430.value));
IkReal x6429=x6419;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6428)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6428)));
IkReal gconst124=(x6427*x6429);
IkReal gconst125=((1.0)*r10*x6429);
IkReal x6431=r12*r12;
IkReal x6432=((1.0)*sj0);
IkReal x6433=(cj0*r02);
IkReal x6434=x6419;
j4eval[0]=((IKabs(((((-1.0)*r12*x6432))+(((-1.0)*x6433)))))+(IKabs(((((-1.0)*x6432*x6434))+((r12*x6433*x6434))+((sj0*x6431*x6434))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6435=((-1.0)*r11);
CheckValue<IkReal> x6438 = IKatan2WithCheck(IkReal(x6435),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6438.valid){
continue;
}
IkReal x6436=((1.0)*(x6438.value));
IkReal x6437=x6419;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6436)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6436)));
IkReal gconst124=(x6435*x6437);
IkReal gconst125=((1.0)*r10*x6437);
IkReal x6439=r12*r12;
IkReal x6440=((1.0)+(((-1.0)*x6439)));
IkReal x6441=(cj2*r22*sj1);
IkReal x6442=(cj1*r22*sj2);
CheckValue<IkReal> x6449=IKPowWithIntegerCheck(x6440,-1);
if(!x6449.valid){
continue;
}
IkReal x6443=x6449.value;
CheckValue<IkReal> x6450=IKPowWithIntegerCheck(((-1.0)+x6439),-1);
if(!x6450.valid){
continue;
}
IkReal x6444=x6450.value;
IkReal x6445=((1.0)*x6443);
if((x6440) < -0.00001)
continue;
IkReal x6446=IKsqrt(x6440);
IkReal x6447=((1.0)*r12*x6444*x6446);
IkReal x6448=((((-1.0)*x6445*(r11*r11)*(r21*r21)))+(((-1.0)*x6445*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x6443))+(((-1.0)*(r22*r22))));
j4eval[0]=x6448;
j4eval[1]=IKsign(x6448);
j4eval[2]=((IKabs(((((-1.0)*x6442*x6447))+(((-1.0)*x6441*x6447)))))+(IKabs((x6442+x6441))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6451=(gconst124*r21);
IkReal x6452=(cj1*sj2);
IkReal x6453=(cj2*sj1);
IkReal x6454=(gconst125*r20);
CheckValue<IkReal> x6455=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6454*x6454)))+(((2.0)*x6451*x6454))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6451*x6451))))),-1);
if(!x6455.valid){
continue;
}
CheckValue<IkReal> x6456 = IKatan2WithCheck(IkReal((((r22*x6453))+((r22*x6452)))),IkReal((((x6451*x6453))+((x6451*x6452))+(((-1.0)*x6453*x6454))+(((-1.0)*x6452*x6454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6455.value)))+(x6456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6457=IKsin(j4);
IkReal x6458=IKcos(j4);
IkReal x6459=(sj1*sj2);
IkReal x6460=(gconst125*r20);
IkReal x6461=(gconst124*r01);
IkReal x6462=(gconst125*r00);
IkReal x6463=(gconst125*r10);
IkReal x6464=((1.0)*x6458);
IkReal x6465=((1.0)*cj1*cj2);
IkReal x6466=((1.0)*x6457);
IkReal x6467=(gconst124*x6457);
IkReal x6468=(gconst124*x6458);
evalcond[0]=(((r21*x6467))+(((-1.0)*r22*x6464))+(((-1.0)*x6460*x6466)));
evalcond[1]=(cj0+(((-1.0)*x6463*x6466))+(((-1.0)*r12*x6464))+((r11*x6467)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6464))+((x6457*x6461))+(((-1.0)*x6462*x6466)));
evalcond[3]=(((cj2*sj1))+((r21*x6468))+((cj1*sj2))+((r22*x6457))+(((-1.0)*x6460*x6464)));
evalcond[4]=(((cj0*x6459))+((r02*x6457))+((x6458*x6461))+(((-1.0)*x6462*x6464))+(((-1.0)*cj0*x6465)));
evalcond[5]=(((sj0*x6459))+(((-1.0)*x6463*x6464))+((r11*x6468))+(((-1.0)*sj0*x6465))+((r12*x6457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6469=((1.0)*sj0);
IkReal x6470=((1.0)*cj0);
CheckValue<IkReal> x6471 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6469))+(((-1.0)*r02*x6470)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x6470))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r11*x6469)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6471.valid){
continue;
}
CheckValue<IkReal> x6472=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6471.value)+(((1.5707963267949)*(x6472.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6473=IKsin(j4);
IkReal x6474=IKcos(j4);
IkReal x6475=(sj1*sj2);
IkReal x6476=(gconst125*r20);
IkReal x6477=(gconst124*r01);
IkReal x6478=(gconst125*r00);
IkReal x6479=(gconst125*r10);
IkReal x6480=((1.0)*x6474);
IkReal x6481=((1.0)*cj1*cj2);
IkReal x6482=((1.0)*x6473);
IkReal x6483=(gconst124*x6473);
IkReal x6484=(gconst124*x6474);
evalcond[0]=(((r21*x6483))+(((-1.0)*r22*x6480))+(((-1.0)*x6476*x6482)));
evalcond[1]=(((r11*x6483))+cj0+(((-1.0)*r12*x6480))+(((-1.0)*x6479*x6482)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6478*x6482))+((x6473*x6477))+(((-1.0)*r02*x6480)));
evalcond[3]=(((r22*x6473))+((r21*x6484))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6476*x6480)));
evalcond[4]=((((-1.0)*x6478*x6480))+((r02*x6473))+(((-1.0)*cj0*x6481))+((x6474*x6477))+((cj0*x6475)));
evalcond[5]=(((r11*x6484))+(((-1.0)*sj0*x6481))+((r12*x6473))+(((-1.0)*x6479*x6480))+((sj0*x6475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6485=((1.0)*gconst125);
CheckValue<IkReal> x6486 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst124*r21))+(((-1.0)*cj0*r20*x6485)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6486.valid){
continue;
}
CheckValue<IkReal> x6487=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6485)))),-1);
if(!x6487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6486.value)+(((1.5707963267949)*(x6487.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6488=IKsin(j4);
IkReal x6489=IKcos(j4);
IkReal x6490=(sj1*sj2);
IkReal x6491=(gconst125*r20);
IkReal x6492=(gconst124*r01);
IkReal x6493=(gconst125*r00);
IkReal x6494=(gconst125*r10);
IkReal x6495=((1.0)*x6489);
IkReal x6496=((1.0)*cj1*cj2);
IkReal x6497=((1.0)*x6488);
IkReal x6498=(gconst124*x6488);
IkReal x6499=(gconst124*x6489);
evalcond[0]=((((-1.0)*r22*x6495))+(((-1.0)*x6491*x6497))+((r21*x6498)));
evalcond[1]=(cj0+((r11*x6498))+(((-1.0)*r12*x6495))+(((-1.0)*x6494*x6497)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6495))+(((-1.0)*x6493*x6497))+((x6488*x6492)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6491*x6495))+((r22*x6488))+((r21*x6499)));
evalcond[4]=(((cj0*x6490))+((r02*x6488))+((x6489*x6492))+(((-1.0)*cj0*x6496))+(((-1.0)*x6493*x6495)));
evalcond[5]=(((r11*x6499))+(((-1.0)*sj0*x6496))+((r12*x6488))+(((-1.0)*x6494*x6495))+((sj0*x6490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6500=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6500;
j4eval[1]=IKsign(x6500);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6501=((1.0)*cj5);
IkReal x6502=((((-1.0)*r01*x6501))+(((-1.0)*r00*sj5)));
j4eval[0]=x6502;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6501)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6502);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6503=cj5*cj5;
IkReal x6504=r11*r11;
IkReal x6505=(cj5*r10);
IkReal x6506=(r11*sj5);
IkReal x6507=((((-1.0)*x6503*(r10*r10)))+(((2.0)*x6505*x6506))+(((-1.0)*x6504))+(((-1.0)*(r12*r12)))+((x6503*x6504)));
j4eval[0]=x6507;
j4eval[1]=IKsign(x6507);
j4eval[2]=((IKabs(((((-1.0)*x6505))+x6506)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6508=cj5*cj5;
IkReal x6509=r11*r11;
IkReal x6510=(cj5*r10);
IkReal x6511=(r11*sj5);
CheckValue<IkReal> x6512=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6509))+(((-1.0)*(r12*r12)))+((x6508*x6509))+(((2.0)*x6510*x6511))+(((-1.0)*x6508*(r10*r10))))),-1);
if(!x6512.valid){
continue;
}
CheckValue<IkReal> x6513 = IKatan2WithCheck(IkReal((x6511+(((-1.0)*x6510)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6512.value)))+(x6513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6514=IKcos(j4);
IkReal x6515=IKsin(j4);
IkReal x6516=(cj5*r00);
IkReal x6517=(cj5*r10);
IkReal x6518=(r21*sj5);
IkReal x6519=(cj5*r20);
IkReal x6520=((1.0)*x6514);
IkReal x6521=((1.0)*x6515);
IkReal x6522=(sj5*x6515);
IkReal x6523=(sj5*x6514);
evalcond[0]=(((r12*x6515))+(((-1.0)*x6517*x6520))+((r11*x6523)));
evalcond[1]=(((x6515*x6518))+(((-1.0)*x6519*x6521))+(((-1.0)*r22*x6520)));
evalcond[2]=((((-1.0)*r02*x6520))+(((-1.0)*x6516*x6521))+((r01*x6522)));
evalcond[3]=((1.0)+(((-1.0)*x6517*x6521))+(((-1.0)*r12*x6520))+((r11*x6522)));
evalcond[4]=(((x6514*x6518))+((cj2*sj1))+(((-1.0)*x6519*x6520))+((cj1*sj2))+((r22*x6515)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6516*x6520))+((r02*x6515))+((r01*x6523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6524=((1.0)*cj5);
CheckValue<IkReal> x6525 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6524)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6525.valid){
continue;
}
CheckValue<IkReal> x6526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6524)))),-1);
if(!x6526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6525.value)+(((1.5707963267949)*(x6526.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6527=IKcos(j4);
IkReal x6528=IKsin(j4);
IkReal x6529=(cj5*r00);
IkReal x6530=(cj5*r10);
IkReal x6531=(r21*sj5);
IkReal x6532=(cj5*r20);
IkReal x6533=((1.0)*x6527);
IkReal x6534=((1.0)*x6528);
IkReal x6535=(sj5*x6528);
IkReal x6536=(sj5*x6527);
evalcond[0]=(((r12*x6528))+(((-1.0)*x6530*x6533))+((r11*x6536)));
evalcond[1]=(((x6528*x6531))+(((-1.0)*r22*x6533))+(((-1.0)*x6532*x6534)));
evalcond[2]=((((-1.0)*x6529*x6534))+(((-1.0)*r02*x6533))+((r01*x6535)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6533))+(((-1.0)*x6530*x6534))+((r11*x6535)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6527*x6531))+(((-1.0)*x6532*x6533))+((r22*x6528)));
evalcond[5]=((((-1.0)*x6529*x6533))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6528))+((r01*x6536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6537=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6537.valid){
continue;
}
CheckValue<IkReal> x6538 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6537.value)))+(x6538.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6539=IKcos(j4);
IkReal x6540=IKsin(j4);
IkReal x6541=(cj5*r00);
IkReal x6542=(cj5*r10);
IkReal x6543=(r21*sj5);
IkReal x6544=(cj5*r20);
IkReal x6545=((1.0)*x6539);
IkReal x6546=((1.0)*x6540);
IkReal x6547=(sj5*x6540);
IkReal x6548=(sj5*x6539);
evalcond[0]=((((-1.0)*x6542*x6545))+((r11*x6548))+((r12*x6540)));
evalcond[1]=((((-1.0)*r22*x6545))+((x6540*x6543))+(((-1.0)*x6544*x6546)));
evalcond[2]=((((-1.0)*x6541*x6546))+(((-1.0)*r02*x6545))+((r01*x6547)));
evalcond[3]=((1.0)+(((-1.0)*x6542*x6546))+(((-1.0)*r12*x6545))+((r11*x6547)));
evalcond[4]=(((x6539*x6543))+((cj2*sj1))+((cj1*sj2))+((r22*x6540))+(((-1.0)*x6544*x6545)));
evalcond[5]=((((-1.0)*x6541*x6545))+((r02*x6540))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6549=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6549;
j4eval[1]=IKsign(x6549);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6550=((1.0)*cj5);
IkReal x6551=((((-1.0)*r21*x6550))+(((-1.0)*r20*sj5)));
j4eval[0]=x6551;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x6550))+((r01*sj5))))));
j4eval[2]=IKsign(x6551);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6552=cj5*cj5;
IkReal x6553=r11*r11;
IkReal x6554=(r11*sj5);
IkReal x6555=(cj5*r10);
IkReal x6556=((r12*r12)+(((-1.0)*x6552*x6553))+((x6552*(r10*r10)))+x6553+(((-2.0)*x6554*x6555)));
j4eval[0]=x6556;
j4eval[1]=IKsign(x6556);
j4eval[2]=((IKabs(r12))+(IKabs((x6554+(((-1.0)*x6555))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6557=cj5*cj5;
IkReal x6558=r11*r11;
IkReal x6559=(cj5*r10);
IkReal x6560=(r11*sj5);
CheckValue<IkReal> x6561 = IKatan2WithCheck(IkReal((x6560+(((-1.0)*x6559)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6561.valid){
continue;
}
CheckValue<IkReal> x6562=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x6559*x6560))+(((-1.0)*x6557*x6558))+x6558+((x6557*(r10*r10))))),-1);
if(!x6562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6561.value)+(((1.5707963267949)*(x6562.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6563=IKcos(j4);
IkReal x6564=IKsin(j4);
IkReal x6565=(cj5*r00);
IkReal x6566=(cj5*r10);
IkReal x6567=(r21*sj5);
IkReal x6568=(cj5*r20);
IkReal x6569=((1.0)*x6563);
IkReal x6570=((1.0)*x6564);
IkReal x6571=(sj5*x6564);
IkReal x6572=(sj5*x6563);
evalcond[0]=((((-1.0)*x6566*x6569))+((r12*x6564))+((r11*x6572)));
evalcond[1]=(((x6564*x6567))+(((-1.0)*r22*x6569))+(((-1.0)*x6568*x6570)));
evalcond[2]=(((r01*x6571))+(((-1.0)*x6565*x6570))+(((-1.0)*r02*x6569)));
evalcond[3]=((-1.0)+(((-1.0)*x6566*x6570))+((r11*x6571))+(((-1.0)*r12*x6569)));
evalcond[4]=(((cj2*sj1))+((r22*x6564))+((x6563*x6567))+((cj1*sj2))+(((-1.0)*x6568*x6569)));
evalcond[5]=((((-1.0)*x6565*x6569))+((r01*x6572))+(((-1.0)*sj1*sj2))+((r02*x6564))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6573=((1.0)*cj5);
CheckValue<IkReal> x6574 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6574.valid){
continue;
}
CheckValue<IkReal> x6575=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6573))+(((-1.0)*r20*sj5)))),-1);
if(!x6575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6574.value)+(((1.5707963267949)*(x6575.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6576=IKcos(j4);
IkReal x6577=IKsin(j4);
IkReal x6578=(cj5*r00);
IkReal x6579=(cj5*r10);
IkReal x6580=(r21*sj5);
IkReal x6581=(cj5*r20);
IkReal x6582=((1.0)*x6576);
IkReal x6583=((1.0)*x6577);
IkReal x6584=(sj5*x6577);
IkReal x6585=(sj5*x6576);
evalcond[0]=(((r11*x6585))+((r12*x6577))+(((-1.0)*x6579*x6582)));
evalcond[1]=((((-1.0)*x6581*x6583))+(((-1.0)*r22*x6582))+((x6577*x6580)));
evalcond[2]=((((-1.0)*r02*x6582))+((r01*x6584))+(((-1.0)*x6578*x6583)));
evalcond[3]=((-1.0)+((r11*x6584))+(((-1.0)*r12*x6582))+(((-1.0)*x6579*x6583)));
evalcond[4]=(((r22*x6577))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6581*x6582))+((x6576*x6580)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x6585))+(((-1.0)*x6578*x6582))+((cj1*cj2))+((r02*x6577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6586 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6586.valid){
continue;
}
CheckValue<IkReal> x6587=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6586.value)+(((1.5707963267949)*(x6587.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6588=IKcos(j4);
IkReal x6589=IKsin(j4);
IkReal x6590=(cj5*r00);
IkReal x6591=(cj5*r10);
IkReal x6592=(r21*sj5);
IkReal x6593=(cj5*r20);
IkReal x6594=((1.0)*x6588);
IkReal x6595=((1.0)*x6589);
IkReal x6596=(sj5*x6589);
IkReal x6597=(sj5*x6588);
evalcond[0]=(((r11*x6597))+(((-1.0)*x6591*x6594))+((r12*x6589)));
evalcond[1]=((((-1.0)*x6593*x6595))+((x6589*x6592))+(((-1.0)*r22*x6594)));
evalcond[2]=((((-1.0)*x6590*x6595))+(((-1.0)*r02*x6594))+((r01*x6596)));
evalcond[3]=((-1.0)+((r11*x6596))+(((-1.0)*r12*x6594))+(((-1.0)*x6591*x6595)));
evalcond[4]=(((cj2*sj1))+((x6588*x6592))+((r22*x6589))+((cj1*sj2))+(((-1.0)*x6593*x6594)));
evalcond[5]=(((r02*x6589))+(((-1.0)*x6590*x6594))+(((-1.0)*sj1*sj2))+((r01*x6597))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6598=((-1.0)*r00);
IkReal x6600 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6600)==0){
continue;
}
IkReal x6599=pow(x6600,-0.5);
CheckValue<IkReal> x6601 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6598),IKFAST_ATAN2_MAGTHRESH);
if(!x6601.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6601.value));
IkReal gconst127=(r01*x6599);
IkReal gconst128=(x6598*x6599);
CheckValue<IkReal> x6602 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6602.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6602.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6603=((-1.0)*r00);
IkReal x6604=x6599;
CheckValue<IkReal> x6606 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6603),IKFAST_ATAN2_MAGTHRESH);
if(!x6606.valid){
continue;
}
IkReal x6605=((-1.0)*(x6606.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6605;
IkReal gconst126=x6605;
IkReal gconst127=(r01*x6604);
IkReal gconst128=(x6603*x6604);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6607=((1.0)*sj0);
IkReal x6608=((1.0)*gconst127);
CheckValue<IkReal> x6609 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6607)))),IkReal((((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x6607))+(((-1.0)*cj0*r01*x6608)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6609.valid){
continue;
}
CheckValue<IkReal> x6610=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6608)))),-1);
if(!x6610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6609.value)+(((1.5707963267949)*(x6610.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6611=IKsin(j4);
IkReal x6612=IKcos(j4);
IkReal x6613=(gconst127*r01);
IkReal x6614=(sj1*sj2);
IkReal x6615=(gconst128*r10);
IkReal x6616=(gconst128*r00);
IkReal x6617=(gconst128*r20);
IkReal x6618=((1.0)*x6612);
IkReal x6619=((1.0)*cj1*cj2);
IkReal x6620=((1.0)*x6611);
IkReal x6621=(gconst127*x6612);
IkReal x6622=(gconst127*x6611);
evalcond[0]=((((-1.0)*r22*x6618))+(((-1.0)*x6617*x6620))+((r21*x6622)));
evalcond[1]=((((-1.0)*r12*x6618))+cj0+((r11*x6622))+(((-1.0)*x6615*x6620)));
evalcond[2]=((((-1.0)*sj0))+((x6611*x6613))+(((-1.0)*x6616*x6620))+(((-1.0)*r02*x6618)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6617*x6618))+((r22*x6611))+((r21*x6621)));
evalcond[4]=(((r02*x6611))+((x6612*x6613))+(((-1.0)*cj0*x6619))+(((-1.0)*x6616*x6618))+((cj0*x6614)));
evalcond[5]=(((r12*x6611))+(((-1.0)*sj0*x6619))+((r11*x6621))+((sj0*x6614))+(((-1.0)*x6615*x6618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6623=((1.0)*gconst128);
CheckValue<IkReal> x6624=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6623))+(((-1.0)*gconst127*r10)))),-1);
if(!x6624.valid){
continue;
}
CheckValue<IkReal> x6625 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x6623)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6624.value)))+(x6625.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6626=IKsin(j4);
IkReal x6627=IKcos(j4);
IkReal x6628=(gconst127*r01);
IkReal x6629=(sj1*sj2);
IkReal x6630=(gconst128*r10);
IkReal x6631=(gconst128*r00);
IkReal x6632=(gconst128*r20);
IkReal x6633=((1.0)*x6627);
IkReal x6634=((1.0)*cj1*cj2);
IkReal x6635=((1.0)*x6626);
IkReal x6636=(gconst127*x6627);
IkReal x6637=(gconst127*x6626);
evalcond[0]=((((-1.0)*r22*x6633))+((r21*x6637))+(((-1.0)*x6632*x6635)));
evalcond[1]=(cj0+((r11*x6637))+(((-1.0)*x6630*x6635))+(((-1.0)*r12*x6633)));
evalcond[2]=((((-1.0)*sj0))+((x6626*x6628))+(((-1.0)*r02*x6633))+(((-1.0)*x6631*x6635)));
evalcond[3]=(((cj2*sj1))+((r21*x6636))+((cj1*sj2))+((r22*x6626))+(((-1.0)*x6632*x6633)));
evalcond[4]=(((r02*x6626))+((x6627*x6628))+((cj0*x6629))+(((-1.0)*cj0*x6634))+(((-1.0)*x6631*x6633)));
evalcond[5]=(((r12*x6626))+((r11*x6636))+(((-1.0)*x6630*x6633))+((sj0*x6629))+(((-1.0)*sj0*x6634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6638=((-1.0)*r01);
IkReal x6640 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6640)==0){
continue;
}
IkReal x6639=pow(x6640,-0.5);
CheckValue<IkReal> x6641 = IKatan2WithCheck(IkReal(x6638),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6641.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6641.value))));
IkReal gconst130=(x6638*x6639);
IkReal gconst131=((1.0)*r00*x6639);
CheckValue<IkReal> x6642 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6642.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6642.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6643=((-1.0)*r01);
CheckValue<IkReal> x6646 = IKatan2WithCheck(IkReal(x6643),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6646.valid){
continue;
}
IkReal x6644=((1.0)*(x6646.value));
IkReal x6645=x6639;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6644)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6644)));
IkReal gconst130=(x6643*x6645);
IkReal gconst131=((1.0)*r00*x6645);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6647=((-1.0)*r01);
CheckValue<IkReal> x6650 = IKatan2WithCheck(IkReal(x6647),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6650.valid){
continue;
}
IkReal x6648=((1.0)*(x6650.value));
IkReal x6649=x6639;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6648)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6648)));
IkReal gconst130=(x6647*x6649);
IkReal gconst131=((1.0)*r00*x6649);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6651=((-1.0)*r01);
CheckValue<IkReal> x6654 = IKatan2WithCheck(IkReal(x6651),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6654.valid){
continue;
}
IkReal x6652=((1.0)*(x6654.value));
IkReal x6653=x6639;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6652)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6652)));
IkReal gconst130=(x6651*x6653);
IkReal gconst131=((1.0)*r00*x6653);
IkReal x6655=r02*r02;
IkReal x6656=(r12*sj0);
IkReal x6657=((1.0)*cj0);
IkReal x6658=x6639;
j4eval[0]=((IKabs(((((-1.0)*x6656))+(((-1.0)*r02*x6657)))))+(IKabs((((r02*x6656*x6658))+(((-1.0)*x6657*x6658))+((cj0*x6655*x6658))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6659=((1.0)*sj0);
IkReal x6660=((1.0)*gconst130);
CheckValue<IkReal> x6661 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6659))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x6660))+((gconst131*r10*sj0))+((cj0*gconst131*r00))+(((-1.0)*gconst130*r11*x6659)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6661.valid){
continue;
}
CheckValue<IkReal> x6662=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6660))+(((-1.0)*gconst131*r21)))),-1);
if(!x6662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6661.value)+(((1.5707963267949)*(x6662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6663=IKsin(j4);
IkReal x6664=IKcos(j4);
IkReal x6665=(gconst131*r10);
IkReal x6666=(sj1*sj2);
IkReal x6667=(gconst131*r20);
IkReal x6668=(gconst131*r00);
IkReal x6669=((1.0)*x6664);
IkReal x6670=((1.0)*cj1*cj2);
IkReal x6671=(gconst130*x6663);
IkReal x6672=((1.0)*x6663);
IkReal x6673=(gconst130*x6664);
evalcond[0]=((((-1.0)*x6667*x6672))+(((-1.0)*r22*x6669))+((r21*x6671)));
evalcond[1]=(((r11*x6671))+cj0+(((-1.0)*r12*x6669))+(((-1.0)*x6665*x6672)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6668*x6672))+((r01*x6671))+(((-1.0)*r02*x6669)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6667*x6669))+((cj1*sj2))+((r22*x6663))+((r21*x6673)));
evalcond[4]=(((r02*x6663))+(((-1.0)*x6668*x6669))+((r01*x6673))+((cj0*x6666))+(((-1.0)*cj0*x6670)));
evalcond[5]=(((r11*x6673))+((r12*x6663))+((sj0*x6666))+(((-1.0)*sj0*x6670))+(((-1.0)*x6665*x6669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6674=((1.0)*gconst131);
CheckValue<IkReal> x6675=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6674))+(((-1.0)*gconst130*r10)))),-1);
if(!x6675.valid){
continue;
}
CheckValue<IkReal> x6676 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6674)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6675.value)))+(x6676.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6677=IKsin(j4);
IkReal x6678=IKcos(j4);
IkReal x6679=(gconst131*r10);
IkReal x6680=(sj1*sj2);
IkReal x6681=(gconst131*r20);
IkReal x6682=(gconst131*r00);
IkReal x6683=((1.0)*x6678);
IkReal x6684=((1.0)*cj1*cj2);
IkReal x6685=(gconst130*x6677);
IkReal x6686=((1.0)*x6677);
IkReal x6687=(gconst130*x6678);
evalcond[0]=((((-1.0)*x6681*x6686))+((r21*x6685))+(((-1.0)*r22*x6683)));
evalcond[1]=(cj0+(((-1.0)*x6679*x6686))+((r11*x6685))+(((-1.0)*r12*x6683)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6683))+((r01*x6685))+(((-1.0)*x6682*x6686)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6681*x6683))+((cj1*sj2))+((r21*x6687))+((r22*x6677)));
evalcond[4]=(((r02*x6677))+(((-1.0)*cj0*x6684))+((r01*x6687))+(((-1.0)*x6682*x6683))+((cj0*x6680)));
evalcond[5]=(((sj0*x6680))+(((-1.0)*sj0*x6684))+(((-1.0)*x6679*x6683))+((r11*x6687))+((r12*x6677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6688=((1.0)*gconst131);
CheckValue<IkReal> x6689=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6688))+(((-1.0)*gconst130*r00)))),-1);
if(!x6689.valid){
continue;
}
CheckValue<IkReal> x6690 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6688)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6689.value)))+(x6690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6691=IKsin(j4);
IkReal x6692=IKcos(j4);
IkReal x6693=(gconst131*r10);
IkReal x6694=(sj1*sj2);
IkReal x6695=(gconst131*r20);
IkReal x6696=(gconst131*r00);
IkReal x6697=((1.0)*x6692);
IkReal x6698=((1.0)*cj1*cj2);
IkReal x6699=(gconst130*x6691);
IkReal x6700=((1.0)*x6691);
IkReal x6701=(gconst130*x6692);
evalcond[0]=((((-1.0)*x6695*x6700))+((r21*x6699))+(((-1.0)*r22*x6697)));
evalcond[1]=(((r11*x6699))+cj0+(((-1.0)*x6693*x6700))+(((-1.0)*r12*x6697)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6696*x6700))+(((-1.0)*r02*x6697))+((r01*x6699)));
evalcond[3]=(((cj2*sj1))+((r21*x6701))+((r22*x6691))+((cj1*sj2))+(((-1.0)*x6695*x6697)));
evalcond[4]=((((-1.0)*x6696*x6697))+((cj0*x6694))+((r01*x6701))+(((-1.0)*cj0*x6698))+((r02*x6691)));
evalcond[5]=(((r12*x6691))+(((-1.0)*sj0*x6698))+((sj0*x6694))+((r11*x6701))+(((-1.0)*x6693*x6697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6702=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6702;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6702);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6703=((1.0)*cj5);
IkReal x6704=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6703)));
j4eval[0]=x6704;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6703))))));
j4eval[2]=IKsign(x6704);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6705=cj5*cj5;
IkReal x6706=r01*r01;
IkReal x6707=(cj5*r00);
IkReal x6708=(r01*sj5);
IkReal x6709=((((-1.0)*x6705*x6706))+x6706+(((-2.0)*x6707*x6708))+((x6705*(r00*r00)))+(r02*r02));
j4eval[0]=x6709;
j4eval[1]=IKsign(x6709);
j4eval[2]=((IKabs(r02))+(IKabs((x6708+(((-1.0)*x6707))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6710=cj5*cj5;
IkReal x6711=r01*r01;
IkReal x6712=(r01*sj5);
IkReal x6713=(cj5*r00);
CheckValue<IkReal> x6714=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6712*x6713))+x6711+(((-1.0)*x6710*x6711))+(r02*r02)+((x6710*(r00*r00))))),-1);
if(!x6714.valid){
continue;
}
CheckValue<IkReal> x6715 = IKatan2WithCheck(IkReal(((((-1.0)*x6713))+x6712)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6714.value)))+(x6715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6716=IKcos(j4);
IkReal x6717=IKsin(j4);
IkReal x6718=(cj5*r00);
IkReal x6719=(cj5*r10);
IkReal x6720=(r21*sj5);
IkReal x6721=(cj5*r20);
IkReal x6722=((1.0)*x6716);
IkReal x6723=((1.0)*x6717);
IkReal x6724=(sj5*x6717);
IkReal x6725=(sj5*x6716);
evalcond[0]=((((-1.0)*x6718*x6722))+((r02*x6717))+((r01*x6725)));
evalcond[1]=((((-1.0)*r22*x6722))+((x6717*x6720))+(((-1.0)*x6721*x6723)));
evalcond[2]=(((r11*x6724))+(((-1.0)*x6719*x6723))+(((-1.0)*r12*x6722)));
evalcond[3]=((-1.0)+(((-1.0)*x6718*x6723))+(((-1.0)*r02*x6722))+((r01*x6724)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6716*x6720))+((r22*x6717))+(((-1.0)*x6721*x6722)));
evalcond[5]=(((r11*x6725))+(((-1.0)*x6719*x6722))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6726=((1.0)*cj5);
CheckValue<IkReal> x6727 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6726))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6727.valid){
continue;
}
CheckValue<IkReal> x6728=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6726)))),-1);
if(!x6728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6727.value)+(((1.5707963267949)*(x6728.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6729=IKcos(j4);
IkReal x6730=IKsin(j4);
IkReal x6731=(cj5*r00);
IkReal x6732=(cj5*r10);
IkReal x6733=(r21*sj5);
IkReal x6734=(cj5*r20);
IkReal x6735=((1.0)*x6729);
IkReal x6736=((1.0)*x6730);
IkReal x6737=(sj5*x6730);
IkReal x6738=(sj5*x6729);
evalcond[0]=(((r01*x6738))+((r02*x6730))+(((-1.0)*x6731*x6735)));
evalcond[1]=((((-1.0)*r22*x6735))+((x6730*x6733))+(((-1.0)*x6734*x6736)));
evalcond[2]=((((-1.0)*r12*x6735))+((r11*x6737))+(((-1.0)*x6732*x6736)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6735))+((r01*x6737))+(((-1.0)*x6731*x6736)));
evalcond[4]=(((r22*x6730))+((cj2*sj1))+((x6729*x6733))+((cj1*sj2))+(((-1.0)*x6734*x6735)));
evalcond[5]=(((r11*x6738))+((r12*x6730))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6732*x6735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6739=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6739.valid){
continue;
}
CheckValue<IkReal> x6740 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6739.value)))+(x6740.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6741=IKcos(j4);
IkReal x6742=IKsin(j4);
IkReal x6743=(cj5*r00);
IkReal x6744=(cj5*r10);
IkReal x6745=(r21*sj5);
IkReal x6746=(cj5*r20);
IkReal x6747=((1.0)*x6741);
IkReal x6748=((1.0)*x6742);
IkReal x6749=(sj5*x6742);
IkReal x6750=(sj5*x6741);
evalcond[0]=(((r02*x6742))+((r01*x6750))+(((-1.0)*x6743*x6747)));
evalcond[1]=((((-1.0)*r22*x6747))+((x6742*x6745))+(((-1.0)*x6746*x6748)));
evalcond[2]=((((-1.0)*x6744*x6748))+(((-1.0)*r12*x6747))+((r11*x6749)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6747))+(((-1.0)*x6743*x6748))+((r01*x6749)));
evalcond[4]=(((cj2*sj1))+((x6741*x6745))+((cj1*sj2))+(((-1.0)*x6746*x6747))+((r22*x6742)));
evalcond[5]=((((-1.0)*x6744*x6747))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6750))+((r12*x6742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6751=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6751;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6751);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6752=((1.0)*cj5);
IkReal x6753=((((-1.0)*r21*x6752))+(((-1.0)*r20*sj5)));
j4eval[0]=x6753;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x6752)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6753);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6754=(r01*sj5);
IkReal x6755=(cj1*sj2);
IkReal x6756=(cj2*sj1);
IkReal x6757=((1.0)*r02);
IkReal x6758=((1.0)*cj5*r00);
IkReal x6759=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6759;
j4eval[1]=((IKabs(((((-1.0)*x6755*x6758))+((x6754*x6756))+((x6754*x6755))+(((-1.0)*x6756*x6758)))))+(IKabs(((((-1.0)*x6755*x6757))+(((-1.0)*x6756*x6757))))));
j4eval[2]=IKsign(x6759);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6760=(r01*sj5);
IkReal x6761=(cj1*sj2);
IkReal x6762=(cj2*sj1);
IkReal x6763=((1.0)*r02);
IkReal x6764=((1.0)*cj5*r00);
CheckValue<IkReal> x6765=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6765.valid){
continue;
}
CheckValue<IkReal> x6766 = IKatan2WithCheck(IkReal(((((-1.0)*x6762*x6764))+((x6760*x6762))+((x6760*x6761))+(((-1.0)*x6761*x6764)))),IkReal(((((-1.0)*x6762*x6763))+(((-1.0)*x6761*x6763)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6765.value)))+(x6766.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6767=IKcos(j4);
IkReal x6768=IKsin(j4);
IkReal x6769=(cj5*r00);
IkReal x6770=(cj5*r10);
IkReal x6771=(r21*sj5);
IkReal x6772=(cj5*r20);
IkReal x6773=((1.0)*x6767);
IkReal x6774=((1.0)*x6768);
IkReal x6775=(sj5*x6768);
IkReal x6776=(sj5*x6767);
evalcond[0]=((((-1.0)*x6769*x6773))+((r02*x6768))+((r01*x6776)));
evalcond[1]=((((-1.0)*r22*x6773))+(((-1.0)*x6772*x6774))+((x6768*x6771)));
evalcond[2]=(((r11*x6775))+(((-1.0)*x6770*x6774))+(((-1.0)*r12*x6773)));
evalcond[3]=((1.0)+(((-1.0)*x6769*x6774))+(((-1.0)*r02*x6773))+((r01*x6775)));
evalcond[4]=(((cj2*sj1))+((r22*x6768))+((cj1*sj2))+(((-1.0)*x6772*x6773))+((x6767*x6771)));
evalcond[5]=(((r11*x6776))+((r12*x6768))+(((-1.0)*x6770*x6773))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6777=((1.0)*cj5);
CheckValue<IkReal> x6778 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6778.valid){
continue;
}
CheckValue<IkReal> x6779=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6777))+(((-1.0)*r20*sj5)))),-1);
if(!x6779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6778.value)+(((1.5707963267949)*(x6779.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6780=IKcos(j4);
IkReal x6781=IKsin(j4);
IkReal x6782=(cj5*r00);
IkReal x6783=(cj5*r10);
IkReal x6784=(r21*sj5);
IkReal x6785=(cj5*r20);
IkReal x6786=((1.0)*x6780);
IkReal x6787=((1.0)*x6781);
IkReal x6788=(sj5*x6781);
IkReal x6789=(sj5*x6780);
evalcond[0]=((((-1.0)*x6782*x6786))+((r02*x6781))+((r01*x6789)));
evalcond[1]=((((-1.0)*x6785*x6787))+((x6781*x6784))+(((-1.0)*r22*x6786)));
evalcond[2]=(((r11*x6788))+(((-1.0)*r12*x6786))+(((-1.0)*x6783*x6787)));
evalcond[3]=((1.0)+(((-1.0)*x6782*x6787))+(((-1.0)*r02*x6786))+((r01*x6788)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6785*x6786))+((cj1*sj2))+((r22*x6781))+((x6780*x6784)));
evalcond[5]=(((r12*x6781))+((r11*x6789))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x6783*x6786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6790 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6790.valid){
continue;
}
CheckValue<IkReal> x6791=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6790.value)+(((1.5707963267949)*(x6791.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6792=IKcos(j4);
IkReal x6793=IKsin(j4);
IkReal x6794=(cj5*r00);
IkReal x6795=(cj5*r10);
IkReal x6796=(r21*sj5);
IkReal x6797=(cj5*r20);
IkReal x6798=((1.0)*x6792);
IkReal x6799=((1.0)*x6793);
IkReal x6800=(sj5*x6793);
IkReal x6801=(sj5*x6792);
evalcond[0]=(((r02*x6793))+((r01*x6801))+(((-1.0)*x6794*x6798)));
evalcond[1]=(((x6793*x6796))+(((-1.0)*r22*x6798))+(((-1.0)*x6797*x6799)));
evalcond[2]=((((-1.0)*x6795*x6799))+((r11*x6800))+(((-1.0)*r12*x6798)));
evalcond[3]=((1.0)+((r01*x6800))+(((-1.0)*x6794*x6799))+(((-1.0)*r02*x6798)));
evalcond[4]=(((cj2*sj1))+((r22*x6793))+((x6792*x6796))+((cj1*sj2))+(((-1.0)*x6797*x6798)));
evalcond[5]=((((-1.0)*x6795*x6798))+(((-1.0)*sj1*sj2))+((r11*x6801))+((r12*x6793))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6802=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6802);
rxp1_1=(px*r21);
rxp1_2=(r11*x6802);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6803=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6803);
rxp1_1=(px*r21);
rxp1_2=(r11*x6803);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6804=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6804);
rxp1_1=(px*r21);
rxp1_2=(r11*x6804);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6807=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6807.valid){
continue;
}
IkReal x6805=x6807.value;
IkReal x6806=(sj0*x6805);
cj4array[0]=(((cj1*cj2*x6806))+(((-1.0)*sj1*sj2*x6806)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6808=IKsin(j4);
IkReal x6809=IKcos(j4);
IkReal x6810=(r21*sj5);
IkReal x6811=((1.0)*cj5*r20);
evalcond[0]=(r02*x6808);
evalcond[1]=((((-1.0)*r02*x6809))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x6808*x6811))+((x6808*x6810)));
evalcond[3]=(((r11*sj5*x6808))+(((-1.0)*cj5*r10*x6808)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6809*x6811))+((x6809*x6810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6814=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6814.valid){
continue;
}
IkReal x6812=x6814.value;
IkReal x6813=((1.0)*x6812);
cj4array[0]=((((-1.0)*cj1*sj2*x6813))+(((-1.0)*cj2*sj1*x6813)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6815=IKsin(j4);
IkReal x6816=IKcos(j4);
IkReal x6817=((1.0)*sj0);
IkReal x6818=((1.0)*cj5);
IkReal x6819=(sj5*x6815);
evalcond[0]=(r02*x6815);
evalcond[1]=((((-1.0)*r02*x6816))+(((-1.0)*x6817)));
evalcond[2]=((((-1.0)*r20*x6815*x6818))+((r21*x6819)));
evalcond[3]=(((r11*x6819))+(((-1.0)*r10*x6815*x6818)));
evalcond[4]=((((-1.0)*r10*x6816*x6818))+((r11*sj5*x6816))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x6817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6820=IKPowWithIntegerCheck(r02,-1);
if(!x6820.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6820.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6821=IKsin(j4);
IkReal x6822=IKcos(j4);
IkReal x6823=(r21*sj5);
IkReal x6824=((1.0)*cj5);
IkReal x6825=(r11*sj5);
evalcond[0]=(r02*x6821);
evalcond[1]=((((-1.0)*r20*x6821*x6824))+((x6821*x6823)));
evalcond[2]=((((-1.0)*r10*x6821*x6824))+((x6821*x6825)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x6822*x6824))+((cj1*sj2))+((x6822*x6823)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r10*x6822*x6824))+((x6822*x6825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6826=((1.0)*sj0);
IkReal x6827=((1.0)*cj0);
CheckValue<IkReal> x6828 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6827))+(((-1.0)*r12*x6826)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6826))+(((-1.0)*r01*sj5*x6827)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6828.valid){
continue;
}
CheckValue<IkReal> x6829=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6828.value)+(((1.5707963267949)*(x6829.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6830=IKsin(j4);
IkReal x6831=IKcos(j4);
IkReal x6832=(cj5*r00);
IkReal x6833=(cj5*r10);
IkReal x6834=(r21*sj5);
IkReal x6835=(sj1*sj2);
IkReal x6836=(cj5*r20);
IkReal x6837=((1.0)*x6831);
IkReal x6838=((1.0)*cj1*cj2);
IkReal x6839=((1.0)*x6830);
IkReal x6840=(sj5*x6830);
IkReal x6841=(sj5*x6831);
evalcond[0]=(((x6830*x6834))+(((-1.0)*r22*x6837))+(((-1.0)*x6836*x6839)));
evalcond[1]=(cj0+((r11*x6840))+(((-1.0)*r12*x6837))+(((-1.0)*x6833*x6839)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6837))+(((-1.0)*x6832*x6839))+((r01*x6840)));
evalcond[3]=(((cj2*sj1))+((r22*x6830))+((x6831*x6834))+((cj1*sj2))+(((-1.0)*x6836*x6837)));
evalcond[4]=(((r02*x6830))+(((-1.0)*x6832*x6837))+(((-1.0)*cj0*x6838))+((r01*x6841))+((cj0*x6835)));
evalcond[5]=((((-1.0)*sj0*x6838))+((r11*x6841))+((sj0*x6835))+(((-1.0)*x6833*x6837))+((r12*x6830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6842=((1.0)*cj5);
CheckValue<IkReal> x6843=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6842)))),-1);
if(!x6843.valid){
continue;
}
CheckValue<IkReal> x6844 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6842))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6843.value)))+(x6844.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6845=IKsin(j4);
IkReal x6846=IKcos(j4);
IkReal x6847=(cj5*r00);
IkReal x6848=(cj5*r10);
IkReal x6849=(r21*sj5);
IkReal x6850=(sj1*sj2);
IkReal x6851=(cj5*r20);
IkReal x6852=((1.0)*x6846);
IkReal x6853=((1.0)*cj1*cj2);
IkReal x6854=((1.0)*x6845);
IkReal x6855=(sj5*x6845);
IkReal x6856=(sj5*x6846);
evalcond[0]=((((-1.0)*r22*x6852))+(((-1.0)*x6851*x6854))+((x6845*x6849)));
evalcond[1]=(cj0+(((-1.0)*r12*x6852))+((r11*x6855))+(((-1.0)*x6848*x6854)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6852))+((r01*x6855))+(((-1.0)*x6847*x6854)));
evalcond[3]=(((cj2*sj1))+((r22*x6845))+((cj1*sj2))+((x6846*x6849))+(((-1.0)*x6851*x6852)));
evalcond[4]=(((r01*x6856))+(((-1.0)*x6847*x6852))+(((-1.0)*cj0*x6853))+((cj0*x6850))+((r02*x6845)));
evalcond[5]=(((sj0*x6850))+((r12*x6845))+((r11*x6856))+(((-1.0)*x6848*x6852))+(((-1.0)*sj0*x6853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6857=((1.0)*cj5);
CheckValue<IkReal> x6858 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6857))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6858.valid){
continue;
}
CheckValue<IkReal> x6859=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6857)))),-1);
if(!x6859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6858.value)+(((1.5707963267949)*(x6859.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6860=IKsin(j4);
IkReal x6861=IKcos(j4);
IkReal x6862=(cj5*r00);
IkReal x6863=(cj5*r10);
IkReal x6864=(r21*sj5);
IkReal x6865=(sj1*sj2);
IkReal x6866=(cj5*r20);
IkReal x6867=((1.0)*x6861);
IkReal x6868=((1.0)*cj1*cj2);
IkReal x6869=((1.0)*x6860);
IkReal x6870=(sj5*x6860);
IkReal x6871=(sj5*x6861);
evalcond[0]=(((x6860*x6864))+(((-1.0)*r22*x6867))+(((-1.0)*x6866*x6869)));
evalcond[1]=(((r11*x6870))+cj0+(((-1.0)*x6863*x6869))+(((-1.0)*r12*x6867)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6862*x6869))+(((-1.0)*r02*x6867))+((r01*x6870)));
evalcond[3]=(((cj2*sj1))+((r22*x6860))+((cj1*sj2))+((x6861*x6864))+(((-1.0)*x6866*x6867)));
evalcond[4]=(((r02*x6860))+((cj0*x6865))+(((-1.0)*x6862*x6867))+((r01*x6871))+(((-1.0)*cj0*x6868)));
evalcond[5]=(((sj0*x6865))+((r11*x6871))+((r12*x6860))+(((-1.0)*x6863*x6867))+(((-1.0)*sj0*x6868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6872=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6872;
j0eval[1]=IKsign(x6872);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6873=cj5*cj5;
IkReal x6874=r21*r21;
IkReal x6875=(cj2*sj1);
IkReal x6876=(cj1*sj2);
IkReal x6877=(r21*sj5);
IkReal x6878=((1.0)*cj5*r20);
IkReal x6879=(((x6873*(r20*r20)))+(r22*r22)+(((-1.0)*x6873*x6874))+x6874+(((-2.0)*cj5*r20*x6877)));
j4eval[0]=x6879;
j4eval[1]=IKsign(x6879);
j4eval[2]=((IKabs(((((-1.0)*x6876*x6878))+(((-1.0)*x6875*x6878))+((x6875*x6877))+((x6876*x6877)))))+(IKabs((((r22*x6876))+((r22*x6875))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6880=cj1*cj1;
IkReal x6881=(cj2*sj2);
IkReal x6882=(cj2*sj1);
IkReal x6883=(cj1*sj1);
j0eval[0]=((((-2.0)*x6880*x6881))+(((-1.08418367346939)*cj1*x6882))+(((-1.08418367346939)*sj2*x6880))+x6883+x6881+(((-2.0)*cj1*cj2*x6882)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6882)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.19192641276835)*py))+(((-0.195493438569105)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19192641276835)*px))+(((0.195493438569105)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.19192641276835)*py))+(((-0.195493438569105)*px))))+IKsqr(((((1.19192641276835)*px))+(((0.195493438569105)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.19192641276835)*py))+(((-0.195493438569105)*px))), ((((1.19192641276835)*px))+(((0.195493438569105)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6884=IKcos(j0);
IkReal x6885=IKsin(j0);
evalcond[0]=((((-0.134)*x6885))+(((0.817)*x6884))+(((-1.0)*px)));
evalcond[1]=((((0.817)*x6885))+(((-1.0)*py))+(((0.134)*x6884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6886=((1.0)*cj5);
IkReal x6887=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6886)));
j4eval[0]=x6887;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6886)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6887);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6888=((1.0)*cj5);
IkReal x6889=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6888)));
j4eval[0]=x6889;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6888))))));
j4eval[2]=IKsign(x6889);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6890=cj5*cj5;
IkReal x6891=((1.0)*sj5);
IkReal x6892=(cj5*r20);
IkReal x6893=(r11*r21);
IkReal x6894=((((-1.0)*cj5*r10*r21*x6891))+(((-1.0)*r11*x6891*x6892))+((r10*r20*x6890))+((r12*r22))+x6893+(((-1.0)*x6890*x6893)));
j4eval[0]=x6894;
j4eval[1]=IKsign(x6894);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6891))+((cj0*x6892)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6895=cj5*cj5;
IkReal x6896=((1.0)*sj5);
IkReal x6897=(cj5*r20);
IkReal x6898=(r11*r21);
CheckValue<IkReal> x6899=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x6896))+((r10*r20*x6895))+((r12*r22))+x6898+(((-1.0)*r11*x6896*x6897))+(((-1.0)*x6895*x6898)))),-1);
if(!x6899.valid){
continue;
}
CheckValue<IkReal> x6900 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6896))+((cj0*x6897)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6899.value)))+(x6900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6901=IKsin(j4);
IkReal x6902=IKcos(j4);
IkReal x6903=((1.0)*sj0);
IkReal x6904=(cj5*r00);
IkReal x6905=(r11*sj5);
IkReal x6906=(cj5*r10);
IkReal x6907=(r21*sj5);
IkReal x6908=(cj5*r20);
IkReal x6909=(r01*sj5);
IkReal x6910=((1.0)*x6902);
IkReal x6911=((1.0)*x6901);
evalcond[0]=((((-1.0)*x6908*x6911))+(((-1.0)*r22*x6910))+((x6901*x6907)));
evalcond[1]=((((-1.0)*r22*x6911))+(((-1.0)*x6907*x6910))+((x6902*x6908)));
evalcond[2]=(cj0+(((-1.0)*r12*x6910))+(((-1.0)*x6906*x6911))+((x6901*x6905)));
evalcond[3]=((((-1.0)*x6904*x6911))+(((-1.0)*x6903))+((x6901*x6909))+(((-1.0)*r02*x6910)));
evalcond[4]=((((-1.0)*x6909*x6910))+(((-1.0)*r02*x6911))+((x6902*x6904))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6903))+(((-1.0)*r12*x6911))+(((-1.0)*x6905*x6910))+((x6902*x6906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6912=((1.0)*cj5);
CheckValue<IkReal> x6913 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6912))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6913.valid){
continue;
}
CheckValue<IkReal> x6914=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6912)))),-1);
if(!x6914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6913.value)+(((1.5707963267949)*(x6914.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6915=IKsin(j4);
IkReal x6916=IKcos(j4);
IkReal x6917=((1.0)*sj0);
IkReal x6918=(cj5*r00);
IkReal x6919=(r11*sj5);
IkReal x6920=(cj5*r10);
IkReal x6921=(r21*sj5);
IkReal x6922=(cj5*r20);
IkReal x6923=(r01*sj5);
IkReal x6924=((1.0)*x6916);
IkReal x6925=((1.0)*x6915);
evalcond[0]=(((x6915*x6921))+(((-1.0)*r22*x6924))+(((-1.0)*x6922*x6925)));
evalcond[1]=((((-1.0)*r22*x6925))+((x6916*x6922))+(((-1.0)*x6921*x6924)));
evalcond[2]=(cj0+((x6915*x6919))+(((-1.0)*x6920*x6925))+(((-1.0)*r12*x6924)));
evalcond[3]=(((x6915*x6923))+(((-1.0)*r02*x6924))+(((-1.0)*x6917))+(((-1.0)*x6918*x6925)));
evalcond[4]=(((x6916*x6918))+(((-1.0)*r02*x6925))+(((-1.0)*x6923*x6924))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6919*x6924))+(((-1.0)*x6917))+((x6916*x6920))+(((-1.0)*r12*x6925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6926=((1.0)*cj5);
CheckValue<IkReal> x6927 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6927.valid){
continue;
}
CheckValue<IkReal> x6928=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6926)))),-1);
if(!x6928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6927.value)+(((1.5707963267949)*(x6928.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6929=IKsin(j4);
IkReal x6930=IKcos(j4);
IkReal x6931=((1.0)*sj0);
IkReal x6932=(cj5*r00);
IkReal x6933=(r11*sj5);
IkReal x6934=(cj5*r10);
IkReal x6935=(r21*sj5);
IkReal x6936=(cj5*r20);
IkReal x6937=(r01*sj5);
IkReal x6938=((1.0)*x6930);
IkReal x6939=((1.0)*x6929);
evalcond[0]=((((-1.0)*r22*x6938))+((x6929*x6935))+(((-1.0)*x6936*x6939)));
evalcond[1]=((((-1.0)*r22*x6939))+(((-1.0)*x6935*x6938))+((x6930*x6936)));
evalcond[2]=(cj0+(((-1.0)*x6934*x6939))+(((-1.0)*r12*x6938))+((x6929*x6933)));
evalcond[3]=((((-1.0)*x6932*x6939))+(((-1.0)*r02*x6938))+((x6929*x6937))+(((-1.0)*x6931)));
evalcond[4]=((((-1.0)*r02*x6939))+(((-1.0)*x6937*x6938))+((x6930*x6932))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x6939))+((x6930*x6934))+(((-1.0)*x6931))+(((-1.0)*x6933*x6938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.73273825150958)*px))+(((7.03596744552376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((1.73273825150958)*px))+(((7.03596744552376)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((1.73273825150958)*px))+(((7.03596744552376)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6940=IKcos(j0);
IkReal x6941=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.033)*x6940))+(((-0.134)*x6941)));
evalcond[1]=((((-1.0)*py))+(((0.033)*x6941))+(((0.134)*x6940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6942=((1.0)*cj5);
IkReal x6943=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6942)));
j4eval[0]=x6943;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6942))))));
j4eval[2]=IKsign(x6943);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6944=cj5*cj5;
IkReal x6945=((1.0)*r21);
IkReal x6946=(cj5*sj5);
IkReal x6947=((1.0)*r20);
IkReal x6948=(((r00*r20*x6944))+((r01*r21))+(((-1.0)*r00*x6945*x6946))+(((-1.0)*r01*x6944*x6945))+((r02*r22))+(((-1.0)*r01*x6946*x6947)));
j4eval[0]=x6948;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6947)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6948);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6949=cj5*cj5;
IkReal x6950=(r21*sj5);
IkReal x6951=(r11*r21);
IkReal x6952=((1.0)*cj5*r20);
IkReal x6953=((((-1.0)*x6949*x6951))+(((-1.0)*cj5*r10*x6950))+((r12*r22))+(((-1.0)*r11*sj5*x6952))+x6951+((r10*r20*x6949)));
j4eval[0]=x6953;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x6952))+((sj0*x6950))))));
j4eval[2]=IKsign(x6953);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6954=cj5*cj5;
IkReal x6955=(r21*sj5);
IkReal x6956=(r11*r21);
IkReal x6957=((1.0)*cj5*r20);
CheckValue<IkReal> x6958 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6957))+((sj0*x6955)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6958.valid){
continue;
}
CheckValue<IkReal> x6959=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x6955))+((r12*r22))+(((-1.0)*x6954*x6956))+(((-1.0)*r11*sj5*x6957))+x6956+((r10*r20*x6954)))),-1);
if(!x6959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6958.value)+(((1.5707963267949)*(x6959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6960=IKsin(j4);
IkReal x6961=IKcos(j4);
IkReal x6962=(r11*sj5);
IkReal x6963=(cj5*r00);
IkReal x6964=(cj5*r10);
IkReal x6965=(r21*sj5);
IkReal x6966=(cj5*r20);
IkReal x6967=(r01*sj5);
IkReal x6968=((1.0)*x6961);
IkReal x6969=((1.0)*x6960);
evalcond[0]=((((-1.0)*x6966*x6969))+(((-1.0)*r22*x6968))+((x6960*x6965)));
evalcond[1]=((((-1.0)*x6965*x6968))+((x6961*x6966))+(((-1.0)*r22*x6969)));
evalcond[2]=((((-1.0)*x6964*x6969))+cj0+(((-1.0)*r12*x6968))+((x6960*x6962)));
evalcond[3]=((((-1.0)*r02*x6969))+cj0+((x6961*x6963))+(((-1.0)*x6967*x6968)));
evalcond[4]=(sj0+((x6961*x6964))+(((-1.0)*r12*x6969))+(((-1.0)*x6962*x6968)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6968))+((x6960*x6967))+(((-1.0)*x6963*x6969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6970=cj5*cj5;
IkReal x6971=((1.0)*r21);
IkReal x6972=(cj5*sj5);
IkReal x6973=((1.0)*r20);
CheckValue<IkReal> x6974 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6974.valid){
continue;
}
CheckValue<IkReal> x6975=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6972*x6973))+(((-1.0)*r00*x6971*x6972))+((r01*r21))+((r00*r20*x6970))+((r02*r22))+(((-1.0)*r01*x6970*x6971)))),-1);
if(!x6975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6974.value)+(((1.5707963267949)*(x6975.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6976=IKsin(j4);
IkReal x6977=IKcos(j4);
IkReal x6978=(r11*sj5);
IkReal x6979=(cj5*r00);
IkReal x6980=(cj5*r10);
IkReal x6981=(r21*sj5);
IkReal x6982=(cj5*r20);
IkReal x6983=(r01*sj5);
IkReal x6984=((1.0)*x6977);
IkReal x6985=((1.0)*x6976);
evalcond[0]=((((-1.0)*r22*x6984))+((x6976*x6981))+(((-1.0)*x6982*x6985)));
evalcond[1]=((((-1.0)*r22*x6985))+((x6977*x6982))+(((-1.0)*x6981*x6984)));
evalcond[2]=(cj0+(((-1.0)*r12*x6984))+((x6976*x6978))+(((-1.0)*x6980*x6985)));
evalcond[3]=(cj0+(((-1.0)*x6983*x6984))+((x6977*x6979))+(((-1.0)*r02*x6985)));
evalcond[4]=((((-1.0)*x6978*x6984))+sj0+(((-1.0)*r12*x6985))+((x6977*x6980)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6979*x6985))+((x6976*x6983))+(((-1.0)*r02*x6984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6986=((1.0)*cj5);
CheckValue<IkReal> x6987=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6986)))),-1);
if(!x6987.valid){
continue;
}
CheckValue<IkReal> x6988 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6986))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6987.value)))+(x6988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6989=IKsin(j4);
IkReal x6990=IKcos(j4);
IkReal x6991=(r11*sj5);
IkReal x6992=(cj5*r00);
IkReal x6993=(cj5*r10);
IkReal x6994=(r21*sj5);
IkReal x6995=(cj5*r20);
IkReal x6996=(r01*sj5);
IkReal x6997=((1.0)*x6990);
IkReal x6998=((1.0)*x6989);
evalcond[0]=((((-1.0)*r22*x6997))+(((-1.0)*x6995*x6998))+((x6989*x6994)));
evalcond[1]=((((-1.0)*r22*x6998))+((x6990*x6995))+(((-1.0)*x6994*x6997)));
evalcond[2]=((((-1.0)*x6993*x6998))+(((-1.0)*r12*x6997))+cj0+((x6989*x6991)));
evalcond[3]=(cj0+(((-1.0)*x6996*x6997))+((x6990*x6992))+(((-1.0)*r02*x6998)));
evalcond[4]=((((-1.0)*r12*x6998))+sj0+((x6990*x6993))+(((-1.0)*x6991*x6997)));
evalcond[5]=((((-1.0)*sj0))+((x6989*x6996))+(((-1.0)*x6992*x6998))+(((-1.0)*r02*x6997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6999=((1.0)*sj5);
IkReal x7000=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7000))+(((-1.0)*r10*x6999)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6999))+(((-1.0)*r01*x7000)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7000))+(((-1.0)*r10*x6999))))+IKsqr(((((-1.0)*r00*x6999))+(((-1.0)*r01*x7000))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7000))+(((-1.0)*r10*x6999))), ((((-1.0)*r00*x6999))+(((-1.0)*r01*x7000))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7001=IKsin(j0);
IkReal x7002=IKcos(j0);
IkReal x7003=((0.1)*sj5);
IkReal x7004=(cj5*r11);
IkReal x7005=(cj5*r01);
IkReal x7006=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7002))+(((-1.0)*x7005))+(((-1.0)*r00*x7006)));
evalcond[1]=((((-1.0)*x7004))+(((-1.0)*x7001))+(((-1.0)*r10*x7006)));
evalcond[2]=((((-0.1)*x7005))+(((-0.134)*x7001))+(((-1.0)*r00*x7003))+(((-1.0)*px)));
evalcond[3]=((((0.134)*x7002))+(((-0.1)*x7004))+(((-1.0)*r10*x7003))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7007=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7007;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7007);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7008=((1.0)*cj5);
IkReal x7009=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7008)));
j4eval[0]=x7009;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7008)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7009);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7010=cj5*cj5;
IkReal x7011=r21*r21;
IkReal x7012=(r21*sj5);
IkReal x7013=(cj5*r20);
IkReal x7014=(((x7010*(r20*r20)))+x7011+(r22*r22)+(((-1.0)*x7010*x7011))+(((-2.0)*x7012*x7013)));
j4eval[0]=x7014;
j4eval[1]=IKsign(x7014);
j4eval[2]=((IKabs(r22))+(IKabs((x7012+(((-1.0)*x7013))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7015=cj5*cj5;
IkReal x7016=r21*r21;
IkReal x7017=(r21*sj5);
IkReal x7018=(cj5*r20);
CheckValue<IkReal> x7019 = IKatan2WithCheck(IkReal(r22),IkReal((x7017+(((-1.0)*x7018)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7019.valid){
continue;
}
CheckValue<IkReal> x7020=IKPowWithIntegerCheck(IKsign((x7016+(r22*r22)+((x7015*(r20*r20)))+(((-2.0)*x7017*x7018))+(((-1.0)*x7015*x7016)))),-1);
if(!x7020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7019.value)+(((1.5707963267949)*(x7020.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7021=IKsin(j4);
IkReal x7022=IKcos(j4);
IkReal x7023=(r11*sj5);
IkReal x7024=(r21*sj5);
IkReal x7025=(cj5*r00);
IkReal x7026=(cj5*r20);
IkReal x7027=(r01*sj5);
IkReal x7028=(cj5*r10);
IkReal x7029=((1.0)*x7022);
IkReal x7030=((1.0)*x7021);
evalcond[0]=((((-1.0)*r22*x7029))+(((-1.0)*x7026*x7030))+((x7021*x7024)));
evalcond[1]=((((-1.0)*r02*x7030))+(((-1.0)*x7027*x7029))+((x7022*x7025)));
evalcond[2]=((((-1.0)*r12*x7030))+((x7022*x7028))+(((-1.0)*x7023*x7029)));
evalcond[3]=((((-1.0)*r12*x7029))+cj0+(((-1.0)*x7028*x7030))+((x7021*x7023)));
evalcond[4]=((1.0)+(((-1.0)*x7024*x7029))+(((-1.0)*r22*x7030))+((x7022*x7026)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7029))+((x7021*x7027))+(((-1.0)*x7025*x7030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7031=((1.0)*cj5);
CheckValue<IkReal> x7032 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7031)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7032.valid){
continue;
}
CheckValue<IkReal> x7033=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7031))+(((-1.0)*r00*sj5)))),-1);
if(!x7033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7032.value)+(((1.5707963267949)*(x7033.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7034=IKsin(j4);
IkReal x7035=IKcos(j4);
IkReal x7036=(r11*sj5);
IkReal x7037=(r21*sj5);
IkReal x7038=(cj5*r00);
IkReal x7039=(cj5*r20);
IkReal x7040=(r01*sj5);
IkReal x7041=(cj5*r10);
IkReal x7042=((1.0)*x7035);
IkReal x7043=((1.0)*x7034);
evalcond[0]=((((-1.0)*r22*x7042))+((x7034*x7037))+(((-1.0)*x7039*x7043)));
evalcond[1]=((((-1.0)*r02*x7043))+(((-1.0)*x7040*x7042))+((x7035*x7038)));
evalcond[2]=((((-1.0)*r12*x7043))+(((-1.0)*x7036*x7042))+((x7035*x7041)));
evalcond[3]=(cj0+(((-1.0)*r12*x7042))+((x7034*x7036))+(((-1.0)*x7041*x7043)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7043))+((x7035*x7039))+(((-1.0)*x7037*x7042)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7042))+((x7034*x7040))+(((-1.0)*x7038*x7043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7044 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7044.valid){
continue;
}
CheckValue<IkReal> x7045=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7044.value)+(((1.5707963267949)*(x7045.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7046=IKsin(j4);
IkReal x7047=IKcos(j4);
IkReal x7048=(r11*sj5);
IkReal x7049=(r21*sj5);
IkReal x7050=(cj5*r00);
IkReal x7051=(cj5*r20);
IkReal x7052=(r01*sj5);
IkReal x7053=(cj5*r10);
IkReal x7054=((1.0)*x7047);
IkReal x7055=((1.0)*x7046);
evalcond[0]=(((x7046*x7049))+(((-1.0)*r22*x7054))+(((-1.0)*x7051*x7055)));
evalcond[1]=((((-1.0)*x7052*x7054))+((x7047*x7050))+(((-1.0)*r02*x7055)));
evalcond[2]=((((-1.0)*x7048*x7054))+((x7047*x7053))+(((-1.0)*r12*x7055)));
evalcond[3]=(((x7046*x7048))+cj0+(((-1.0)*x7053*x7055))+(((-1.0)*r12*x7054)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7055))+(((-1.0)*x7049*x7054))+((x7047*x7051)));
evalcond[5]=((((-1.0)*sj0))+((x7046*x7052))+(((-1.0)*x7050*x7055))+(((-1.0)*r02*x7054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7056=IKcos(j0);
IkReal x7057=IKsin(j0);
evalcond[0]=((((-0.134)*x7057))+(((-0.392)*x7056))+(((-1.0)*px)));
evalcond[1]=((((-0.392)*x7057))+(((-1.0)*py))+(((0.134)*x7056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7058=((1.0)*cj5);
IkReal x7059=((((-1.0)*r01*x7058))+(((-1.0)*r00*sj5)));
j4eval[0]=x7059;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7058))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7059);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7060=cj5*cj5;
IkReal x7061=((1.0)*r21);
IkReal x7062=(cj5*sj5);
IkReal x7063=((1.0)*r20);
IkReal x7064=((((-1.0)*r01*x7060*x7061))+((r01*r21))+(((-1.0)*r01*x7062*x7063))+(((-1.0)*r00*x7061*x7062))+((r00*r20*x7060))+((r02*r22)));
j4eval[0]=x7064;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7063))))));
j4eval[2]=IKsign(x7064);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7065=cj5*cj5;
IkReal x7066=(r21*sj5);
IkReal x7067=(r11*r21);
IkReal x7068=((1.0)*cj5*r20);
IkReal x7069=(x7067+(((-1.0)*x7065*x7067))+((r12*r22))+(((-1.0)*r11*sj5*x7068))+(((-1.0)*cj5*r10*x7066))+((r10*r20*x7065)));
j4eval[0]=x7069;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7068))+((sj0*x7066))))));
j4eval[2]=IKsign(x7069);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7070=cj5*cj5;
IkReal x7071=(r21*sj5);
IkReal x7072=(r11*r21);
IkReal x7073=((1.0)*cj5*r20);
CheckValue<IkReal> x7074=IKPowWithIntegerCheck(IKsign((x7072+((r10*r20*x7070))+(((-1.0)*x7070*x7072))+((r12*r22))+(((-1.0)*cj5*r10*x7071))+(((-1.0)*r11*sj5*x7073)))),-1);
if(!x7074.valid){
continue;
}
CheckValue<IkReal> x7075 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7073))+((sj0*x7071)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7074.value)))+(x7075.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7076=IKsin(j4);
IkReal x7077=IKcos(j4);
IkReal x7078=(r11*sj5);
IkReal x7079=(cj5*r00);
IkReal x7080=(cj5*r10);
IkReal x7081=(r21*sj5);
IkReal x7082=(cj5*r20);
IkReal x7083=(r01*sj5);
IkReal x7084=((1.0)*x7077);
IkReal x7085=((1.0)*x7076);
evalcond[0]=(((x7076*x7081))+(((-1.0)*x7082*x7085))+(((-1.0)*r22*x7084)));
evalcond[1]=(((x7077*x7082))+(((-1.0)*r22*x7085))+(((-1.0)*x7081*x7084)));
evalcond[2]=(cj0+(((-1.0)*r12*x7084))+((x7076*x7078))+(((-1.0)*x7080*x7085)));
evalcond[3]=(cj0+(((-1.0)*x7083*x7084))+(((-1.0)*r02*x7085))+((x7077*x7079)));
evalcond[4]=(sj0+((x7077*x7080))+(((-1.0)*r12*x7085))+(((-1.0)*x7078*x7084)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7079*x7085))+((x7076*x7083))+(((-1.0)*r02*x7084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7086=cj5*cj5;
IkReal x7087=((1.0)*r21);
IkReal x7088=(cj5*sj5);
IkReal x7089=((1.0)*r20);
CheckValue<IkReal> x7090 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7089)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7090.valid){
continue;
}
CheckValue<IkReal> x7091=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7086*x7087))+((r01*r21))+(((-1.0)*r00*x7087*x7088))+((r00*r20*x7086))+(((-1.0)*r01*x7088*x7089))+((r02*r22)))),-1);
if(!x7091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7090.value)+(((1.5707963267949)*(x7091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7092=IKsin(j4);
IkReal x7093=IKcos(j4);
IkReal x7094=(r11*sj5);
IkReal x7095=(cj5*r00);
IkReal x7096=(cj5*r10);
IkReal x7097=(r21*sj5);
IkReal x7098=(cj5*r20);
IkReal x7099=(r01*sj5);
IkReal x7100=((1.0)*x7093);
IkReal x7101=((1.0)*x7092);
evalcond[0]=(((x7092*x7097))+(((-1.0)*r22*x7100))+(((-1.0)*x7098*x7101)));
evalcond[1]=(((x7093*x7098))+(((-1.0)*r22*x7101))+(((-1.0)*x7097*x7100)));
evalcond[2]=(((x7092*x7094))+cj0+(((-1.0)*r12*x7100))+(((-1.0)*x7096*x7101)));
evalcond[3]=(cj0+((x7093*x7095))+(((-1.0)*r02*x7101))+(((-1.0)*x7099*x7100)));
evalcond[4]=(sj0+(((-1.0)*r12*x7101))+(((-1.0)*x7094*x7100))+((x7093*x7096)));
evalcond[5]=((((-1.0)*sj0))+((x7092*x7099))+(((-1.0)*r02*x7100))+(((-1.0)*x7095*x7101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7102=((1.0)*cj5);
CheckValue<IkReal> x7103 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7103.valid){
continue;
}
CheckValue<IkReal> x7104=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7102)))),-1);
if(!x7104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7103.value)+(((1.5707963267949)*(x7104.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7105=IKsin(j4);
IkReal x7106=IKcos(j4);
IkReal x7107=(r11*sj5);
IkReal x7108=(cj5*r00);
IkReal x7109=(cj5*r10);
IkReal x7110=(r21*sj5);
IkReal x7111=(cj5*r20);
IkReal x7112=(r01*sj5);
IkReal x7113=((1.0)*x7106);
IkReal x7114=((1.0)*x7105);
evalcond[0]=((((-1.0)*x7111*x7114))+(((-1.0)*r22*x7113))+((x7105*x7110)));
evalcond[1]=((((-1.0)*x7110*x7113))+(((-1.0)*r22*x7114))+((x7106*x7111)));
evalcond[2]=(cj0+(((-1.0)*r12*x7113))+(((-1.0)*x7109*x7114))+((x7105*x7107)));
evalcond[3]=(cj0+(((-1.0)*x7112*x7113))+(((-1.0)*r02*x7114))+((x7106*x7108)));
evalcond[4]=((((-1.0)*x7107*x7113))+sj0+(((-1.0)*r12*x7114))+((x7106*x7109)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7113))+((x7105*x7112))+(((-1.0)*x7108*x7114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7115=IKsin(j0);
IkReal x7116=IKcos(j0);
IkReal x7117=((0.1)*sj5);
IkReal x7118=(cj5*r11);
IkReal x7119=(cj5*r01);
IkReal x7120=((1.0)*sj5);
evalcond[0]=(x7116+(((-1.0)*x7119))+(((-1.0)*r00*x7120)));
evalcond[1]=(x7115+(((-1.0)*x7118))+(((-1.0)*r10*x7120)));
evalcond[2]=((((-0.1)*x7119))+(((-0.134)*x7115))+(((-1.0)*px))+(((-1.0)*r00*x7117)));
evalcond[3]=((((-0.1)*x7118))+(((-1.0)*r10*x7117))+(((-1.0)*py))+(((0.134)*x7116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7121=((1.0)*sj5);
IkReal x7122=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7121)));
j4eval[0]=x7122;
j4eval[1]=IKsign(x7122);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7121))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7123=((1.0)*cj5);
IkReal x7124=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7123)));
j4eval[0]=x7124;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7123)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7124);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7125=r21*r21;
IkReal x7126=cj5*cj5;
IkReal x7127=(r21*sj5);
IkReal x7128=(cj5*r20);
IkReal x7129=((((-1.0)*x7125))+(((-1.0)*x7126*(r20*r20)))+(((-1.0)*(r22*r22)))+((x7125*x7126))+(((2.0)*x7127*x7128)));
j4eval[0]=x7129;
j4eval[1]=((IKabs(r22))+(IKabs((x7127+(((-1.0)*x7128))))));
j4eval[2]=IKsign(x7129);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7130=r21*r21;
IkReal x7131=cj5*cj5;
IkReal x7132=(r21*sj5);
IkReal x7133=(cj5*r20);
CheckValue<IkReal> x7134=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7131*(r20*r20)))+((x7130*x7131))+(((-1.0)*(r22*r22)))+(((-1.0)*x7130))+(((2.0)*x7132*x7133)))),-1);
if(!x7134.valid){
continue;
}
CheckValue<IkReal> x7135 = IKatan2WithCheck(IkReal(r22),IkReal((x7132+(((-1.0)*x7133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7134.value)))+(x7135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7136=IKsin(j4);
IkReal x7137=IKcos(j4);
IkReal x7138=(r11*sj5);
IkReal x7139=(r21*sj5);
IkReal x7140=(cj5*r00);
IkReal x7141=(cj5*r20);
IkReal x7142=(r01*sj5);
IkReal x7143=(cj5*r10);
IkReal x7144=((1.0)*x7137);
IkReal x7145=((1.0)*x7136);
evalcond[0]=((((-1.0)*r22*x7144))+(((-1.0)*x7141*x7145))+((x7136*x7139)));
evalcond[1]=((((-1.0)*x7142*x7144))+((x7137*x7140))+(((-1.0)*r02*x7145)));
evalcond[2]=((((-1.0)*x7138*x7144))+((x7137*x7143))+(((-1.0)*r12*x7145)));
evalcond[3]=(cj0+(((-1.0)*r12*x7144))+((x7136*x7138))+(((-1.0)*x7143*x7145)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7145))+((x7137*x7141))+(((-1.0)*x7139*x7144)));
evalcond[5]=((((-1.0)*sj0))+((x7136*x7142))+(((-1.0)*x7140*x7145))+(((-1.0)*r02*x7144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7146=((1.0)*cj5);
CheckValue<IkReal> x7147=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7146)))),-1);
if(!x7147.valid){
continue;
}
CheckValue<IkReal> x7148 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7146)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7147.value)))+(x7148.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7149=IKsin(j4);
IkReal x7150=IKcos(j4);
IkReal x7151=(r11*sj5);
IkReal x7152=(r21*sj5);
IkReal x7153=(cj5*r00);
IkReal x7154=(cj5*r20);
IkReal x7155=(r01*sj5);
IkReal x7156=(cj5*r10);
IkReal x7157=((1.0)*x7150);
IkReal x7158=((1.0)*x7149);
evalcond[0]=(((x7149*x7152))+(((-1.0)*r22*x7157))+(((-1.0)*x7154*x7158)));
evalcond[1]=((((-1.0)*x7155*x7157))+((x7150*x7153))+(((-1.0)*r02*x7158)));
evalcond[2]=((((-1.0)*r12*x7158))+(((-1.0)*x7151*x7157))+((x7150*x7156)));
evalcond[3]=(((x7149*x7151))+(((-1.0)*r12*x7157))+cj0+(((-1.0)*x7156*x7158)));
evalcond[4]=((-1.0)+(((-1.0)*x7152*x7157))+(((-1.0)*r22*x7158))+((x7150*x7154)));
evalcond[5]=(((x7149*x7155))+(((-1.0)*sj0))+(((-1.0)*x7153*x7158))+(((-1.0)*r02*x7157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7159=((1.0)*sj5);
CheckValue<IkReal> x7160=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7159)))),-1);
if(!x7160.valid){
continue;
}
CheckValue<IkReal> x7161 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7159))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7160.value)))+(x7161.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7162=IKsin(j4);
IkReal x7163=IKcos(j4);
IkReal x7164=(r11*sj5);
IkReal x7165=(r21*sj5);
IkReal x7166=(cj5*r00);
IkReal x7167=(cj5*r20);
IkReal x7168=(r01*sj5);
IkReal x7169=(cj5*r10);
IkReal x7170=((1.0)*x7163);
IkReal x7171=((1.0)*x7162);
evalcond[0]=(((x7162*x7165))+(((-1.0)*x7167*x7171))+(((-1.0)*r22*x7170)));
evalcond[1]=((((-1.0)*x7168*x7170))+(((-1.0)*r02*x7171))+((x7163*x7166)));
evalcond[2]=((((-1.0)*r12*x7171))+(((-1.0)*x7164*x7170))+((x7163*x7169)));
evalcond[3]=(((x7162*x7164))+(((-1.0)*x7169*x7171))+cj0+(((-1.0)*r12*x7170)));
evalcond[4]=((-1.0)+(((-1.0)*x7165*x7170))+(((-1.0)*r22*x7171))+((x7163*x7167)));
evalcond[5]=(((x7162*x7168))+(((-1.0)*sj0))+(((-1.0)*r02*x7170))+(((-1.0)*x7166*x7171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7172=IKsin(j0);
IkReal x7173=IKcos(j0);
evalcond[0]=((((0.392)*x7173))+(((-0.134)*x7172))+(((-1.0)*px)));
evalcond[1]=((((0.392)*x7172))+(((-1.0)*py))+(((0.134)*x7173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7174=((1.0)*cj5);
IkReal x7175=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7174)));
j4eval[0]=x7175;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7174))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7175);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7176=((1.0)*cj5);
IkReal x7177=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7176)));
j4eval[0]=x7177;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7176))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7177);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7178=cj5*cj5;
IkReal x7179=((1.0)*sj5);
IkReal x7180=(cj5*r20);
IkReal x7181=(r11*r21);
IkReal x7182=(x7181+(((-1.0)*cj5*r10*r21*x7179))+((r12*r22))+((r10*r20*x7178))+(((-1.0)*r11*x7179*x7180))+(((-1.0)*x7178*x7181)));
j4eval[0]=x7182;
j4eval[1]=IKsign(x7182);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7179))+((cj0*x7180))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7183=cj5*cj5;
IkReal x7184=((1.0)*sj5);
IkReal x7185=(cj5*r20);
IkReal x7186=(r11*r21);
CheckValue<IkReal> x7187 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7184))+((cj0*x7185)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7187.valid){
continue;
}
CheckValue<IkReal> x7188=IKPowWithIntegerCheck(IKsign((x7186+((r12*r22))+(((-1.0)*x7183*x7186))+(((-1.0)*cj5*r10*r21*x7184))+((r10*r20*x7183))+(((-1.0)*r11*x7184*x7185)))),-1);
if(!x7188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7187.value)+(((1.5707963267949)*(x7188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7189=IKsin(j4);
IkReal x7190=IKcos(j4);
IkReal x7191=((1.0)*sj0);
IkReal x7192=(cj5*r00);
IkReal x7193=(r11*sj5);
IkReal x7194=(cj5*r10);
IkReal x7195=(r21*sj5);
IkReal x7196=(cj5*r20);
IkReal x7197=(r01*sj5);
IkReal x7198=((1.0)*x7190);
IkReal x7199=((1.0)*x7189);
evalcond[0]=((((-1.0)*x7196*x7199))+((x7189*x7195))+(((-1.0)*r22*x7198)));
evalcond[1]=(((x7190*x7196))+(((-1.0)*x7195*x7198))+(((-1.0)*r22*x7199)));
evalcond[2]=(cj0+((x7189*x7193))+(((-1.0)*x7194*x7199))+(((-1.0)*r12*x7198)));
evalcond[3]=(((x7189*x7197))+(((-1.0)*x7191))+(((-1.0)*r02*x7198))+(((-1.0)*x7192*x7199)));
evalcond[4]=(((x7190*x7192))+(((-1.0)*x7197*x7198))+(((-1.0)*r02*x7199))+(((-1.0)*cj0)));
evalcond[5]=(((x7190*x7194))+(((-1.0)*x7191))+(((-1.0)*x7193*x7198))+(((-1.0)*r12*x7199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7200=((1.0)*cj5);
CheckValue<IkReal> x7201 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7200))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7201.valid){
continue;
}
CheckValue<IkReal> x7202=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7200)))),-1);
if(!x7202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7201.value)+(((1.5707963267949)*(x7202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7203=IKsin(j4);
IkReal x7204=IKcos(j4);
IkReal x7205=((1.0)*sj0);
IkReal x7206=(cj5*r00);
IkReal x7207=(r11*sj5);
IkReal x7208=(cj5*r10);
IkReal x7209=(r21*sj5);
IkReal x7210=(cj5*r20);
IkReal x7211=(r01*sj5);
IkReal x7212=((1.0)*x7204);
IkReal x7213=((1.0)*x7203);
evalcond[0]=(((x7203*x7209))+(((-1.0)*x7210*x7213))+(((-1.0)*r22*x7212)));
evalcond[1]=(((x7204*x7210))+(((-1.0)*x7209*x7212))+(((-1.0)*r22*x7213)));
evalcond[2]=(cj0+((x7203*x7207))+(((-1.0)*r12*x7212))+(((-1.0)*x7208*x7213)));
evalcond[3]=((((-1.0)*x7206*x7213))+(((-1.0)*r02*x7212))+(((-1.0)*x7205))+((x7203*x7211)));
evalcond[4]=(((x7204*x7206))+(((-1.0)*x7211*x7212))+(((-1.0)*r02*x7213))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7213))+((x7204*x7208))+(((-1.0)*x7205))+(((-1.0)*x7207*x7212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7214=((1.0)*cj5);
CheckValue<IkReal> x7215 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7214)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7215.valid){
continue;
}
CheckValue<IkReal> x7216=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7214))+(((-1.0)*r00*sj5)))),-1);
if(!x7216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7215.value)+(((1.5707963267949)*(x7216.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7217=IKsin(j4);
IkReal x7218=IKcos(j4);
IkReal x7219=((1.0)*sj0);
IkReal x7220=(cj5*r00);
IkReal x7221=(r11*sj5);
IkReal x7222=(cj5*r10);
IkReal x7223=(r21*sj5);
IkReal x7224=(cj5*r20);
IkReal x7225=(r01*sj5);
IkReal x7226=((1.0)*x7218);
IkReal x7227=((1.0)*x7217);
evalcond[0]=((((-1.0)*x7224*x7227))+((x7217*x7223))+(((-1.0)*r22*x7226)));
evalcond[1]=(((x7218*x7224))+(((-1.0)*r22*x7227))+(((-1.0)*x7223*x7226)));
evalcond[2]=(cj0+(((-1.0)*x7222*x7227))+(((-1.0)*r12*x7226))+((x7217*x7221)));
evalcond[3]=((((-1.0)*r02*x7226))+(((-1.0)*x7219))+(((-1.0)*x7220*x7227))+((x7217*x7225)));
evalcond[4]=((((-1.0)*x7225*x7226))+(((-1.0)*r02*x7227))+((x7218*x7220))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7221*x7226))+(((-1.0)*x7219))+((x7218*x7222))+(((-1.0)*r12*x7227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.195493438569105)*px))+(((-1.19192641276835)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.195493438569105)*py))+(((-1.19192641276835)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))))+IKsqr(((((0.195493438569105)*py))+(((-1.19192641276835)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))), ((((0.195493438569105)*py))+(((-1.19192641276835)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7228=IKcos(j0);
IkReal x7229=IKsin(j0);
evalcond[0]=((((-0.134)*x7229))+(((-1.0)*px))+(((-0.817)*x7228)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x7228))+(((-0.817)*x7229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7230=((1.0)*cj5);
IkReal x7231=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7230)));
j4eval[0]=x7231;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7230)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7231);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7232=cj5*cj5;
IkReal x7233=((1.0)*r21);
IkReal x7234=(cj5*sj5);
IkReal x7235=((1.0)*r20);
IkReal x7236=(((r01*r21))+(((-1.0)*r01*x7234*x7235))+(((-1.0)*r00*x7233*x7234))+(((-1.0)*r01*x7232*x7233))+((r02*r22))+((r00*r20*x7232)));
j4eval[0]=x7236;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7235))))));
j4eval[2]=IKsign(x7236);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7237=cj5*cj5;
IkReal x7238=(r21*sj5);
IkReal x7239=(r11*r21);
IkReal x7240=((1.0)*cj5*r20);
IkReal x7241=((((-1.0)*cj5*r10*x7238))+(((-1.0)*x7237*x7239))+((r10*r20*x7237))+x7239+(((-1.0)*r11*sj5*x7240))+((r12*r22)));
j4eval[0]=x7241;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7238))+(((-1.0)*sj0*x7240))))));
j4eval[2]=IKsign(x7241);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7242=cj5*cj5;
IkReal x7243=(r21*sj5);
IkReal x7244=(r11*r21);
IkReal x7245=((1.0)*cj5*r20);
CheckValue<IkReal> x7246 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7243))+(((-1.0)*sj0*x7245)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7246.valid){
continue;
}
CheckValue<IkReal> x7247=IKPowWithIntegerCheck(IKsign((x7244+(((-1.0)*r11*sj5*x7245))+((r12*r22))+((r10*r20*x7242))+(((-1.0)*x7242*x7244))+(((-1.0)*cj5*r10*x7243)))),-1);
if(!x7247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7246.value)+(((1.5707963267949)*(x7247.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7248=IKsin(j4);
IkReal x7249=IKcos(j4);
IkReal x7250=(r11*sj5);
IkReal x7251=(cj5*r00);
IkReal x7252=(cj5*r10);
IkReal x7253=(r21*sj5);
IkReal x7254=(cj5*r20);
IkReal x7255=(r01*sj5);
IkReal x7256=((1.0)*x7249);
IkReal x7257=((1.0)*x7248);
evalcond[0]=((((-1.0)*r22*x7256))+((x7248*x7253))+(((-1.0)*x7254*x7257)));
evalcond[1]=(((x7249*x7254))+(((-1.0)*r22*x7257))+(((-1.0)*x7253*x7256)));
evalcond[2]=((((-1.0)*x7252*x7257))+cj0+(((-1.0)*r12*x7256))+((x7248*x7250)));
evalcond[3]=(cj0+(((-1.0)*r02*x7257))+((x7249*x7251))+(((-1.0)*x7255*x7256)));
evalcond[4]=(sj0+(((-1.0)*r12*x7257))+((x7249*x7252))+(((-1.0)*x7250*x7256)));
evalcond[5]=((((-1.0)*x7251*x7257))+(((-1.0)*sj0))+(((-1.0)*r02*x7256))+((x7248*x7255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7258=cj5*cj5;
IkReal x7259=((1.0)*r21);
IkReal x7260=(cj5*sj5);
IkReal x7261=((1.0)*r20);
CheckValue<IkReal> x7262 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7261)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7262.valid){
continue;
}
CheckValue<IkReal> x7263=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7260*x7261))+((r01*r21))+(((-1.0)*r00*x7259*x7260))+(((-1.0)*r01*x7258*x7259))+((r02*r22))+((r00*r20*x7258)))),-1);
if(!x7263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7262.value)+(((1.5707963267949)*(x7263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7264=IKsin(j4);
IkReal x7265=IKcos(j4);
IkReal x7266=(r11*sj5);
IkReal x7267=(cj5*r00);
IkReal x7268=(cj5*r10);
IkReal x7269=(r21*sj5);
IkReal x7270=(cj5*r20);
IkReal x7271=(r01*sj5);
IkReal x7272=((1.0)*x7265);
IkReal x7273=((1.0)*x7264);
evalcond[0]=((((-1.0)*r22*x7272))+((x7264*x7269))+(((-1.0)*x7270*x7273)));
evalcond[1]=(((x7265*x7270))+(((-1.0)*r22*x7273))+(((-1.0)*x7269*x7272)));
evalcond[2]=(cj0+(((-1.0)*r12*x7272))+((x7264*x7266))+(((-1.0)*x7268*x7273)));
evalcond[3]=(cj0+((x7265*x7267))+(((-1.0)*r02*x7273))+(((-1.0)*x7271*x7272)));
evalcond[4]=((((-1.0)*x7266*x7272))+sj0+(((-1.0)*r12*x7273))+((x7265*x7268)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7267*x7273))+(((-1.0)*r02*x7272))+((x7264*x7271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7274=((1.0)*cj5);
CheckValue<IkReal> x7275 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7274)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7275.valid){
continue;
}
CheckValue<IkReal> x7276=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7274)))),-1);
if(!x7276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7275.value)+(((1.5707963267949)*(x7276.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7277=IKsin(j4);
IkReal x7278=IKcos(j4);
IkReal x7279=(r11*sj5);
IkReal x7280=(cj5*r00);
IkReal x7281=(cj5*r10);
IkReal x7282=(r21*sj5);
IkReal x7283=(cj5*r20);
IkReal x7284=(r01*sj5);
IkReal x7285=((1.0)*x7278);
IkReal x7286=((1.0)*x7277);
evalcond[0]=(((x7277*x7282))+(((-1.0)*x7283*x7286))+(((-1.0)*r22*x7285)));
evalcond[1]=((((-1.0)*x7282*x7285))+((x7278*x7283))+(((-1.0)*r22*x7286)));
evalcond[2]=(cj0+((x7277*x7279))+(((-1.0)*r12*x7285))+(((-1.0)*x7281*x7286)));
evalcond[3]=((((-1.0)*x7284*x7285))+cj0+((x7278*x7280))+(((-1.0)*r02*x7286)));
evalcond[4]=(sj0+((x7278*x7281))+(((-1.0)*r12*x7286))+(((-1.0)*x7279*x7285)));
evalcond[5]=((((-1.0)*sj0))+((x7277*x7284))+(((-1.0)*x7280*x7286))+(((-1.0)*r02*x7285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.03596744552376)*py))+(((-1.73273825150958)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((7.03596744552376)*py))+(((-1.73273825150958)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((7.03596744552376)*py))+(((-1.73273825150958)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7287=IKcos(j0);
IkReal x7288=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.033)*x7287))+(((-0.134)*x7288)));
evalcond[1]=((((0.134)*x7287))+(((-1.0)*py))+(((-0.033)*x7288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7289=((1.0)*cj5);
IkReal x7290=((((-1.0)*r01*x7289))+(((-1.0)*r00*sj5)));
j4eval[0]=x7290;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x7289))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x7290);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7291=((1.0)*cj5);
IkReal x7292=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7291)));
j4eval[0]=x7292;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7291))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7292);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7293=cj5*cj5;
IkReal x7294=((1.0)*sj5);
IkReal x7295=(cj5*r20);
IkReal x7296=(r11*r21);
IkReal x7297=((((-1.0)*r11*x7294*x7295))+x7296+(((-1.0)*cj5*r10*r21*x7294))+((r10*r20*x7293))+((r12*r22))+(((-1.0)*x7293*x7296)));
j4eval[0]=x7297;
j4eval[1]=IKsign(x7297);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x7295))+(((-1.0)*cj0*r21*x7294))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7298=cj5*cj5;
IkReal x7299=((1.0)*sj5);
IkReal x7300=(cj5*r20);
IkReal x7301=(r11*r21);
CheckValue<IkReal> x7302 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7299))+((cj0*x7300)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7302.valid){
continue;
}
CheckValue<IkReal> x7303=IKPowWithIntegerCheck(IKsign((x7301+(((-1.0)*cj5*r10*r21*x7299))+(((-1.0)*x7298*x7301))+((r10*r20*x7298))+((r12*r22))+(((-1.0)*r11*x7299*x7300)))),-1);
if(!x7303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7302.value)+(((1.5707963267949)*(x7303.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7304=IKsin(j4);
IkReal x7305=IKcos(j4);
IkReal x7306=((1.0)*sj0);
IkReal x7307=(cj5*r00);
IkReal x7308=(r11*sj5);
IkReal x7309=(cj5*r10);
IkReal x7310=(r21*sj5);
IkReal x7311=(cj5*r20);
IkReal x7312=(r01*sj5);
IkReal x7313=((1.0)*x7305);
IkReal x7314=((1.0)*x7304);
evalcond[0]=((((-1.0)*x7311*x7314))+((x7304*x7310))+(((-1.0)*r22*x7313)));
evalcond[1]=(((x7305*x7311))+(((-1.0)*r22*x7314))+(((-1.0)*x7310*x7313)));
evalcond[2]=(cj0+(((-1.0)*x7309*x7314))+((x7304*x7308))+(((-1.0)*r12*x7313)));
evalcond[3]=(((x7304*x7312))+(((-1.0)*x7306))+(((-1.0)*x7307*x7314))+(((-1.0)*r02*x7313)));
evalcond[4]=(((x7305*x7307))+(((-1.0)*x7312*x7313))+(((-1.0)*cj0))+(((-1.0)*r02*x7314)));
evalcond[5]=((((-1.0)*r12*x7314))+(((-1.0)*x7308*x7313))+((x7305*x7309))+(((-1.0)*x7306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7315=((1.0)*cj5);
CheckValue<IkReal> x7316 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7315))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7316.valid){
continue;
}
CheckValue<IkReal> x7317=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7315)))),-1);
if(!x7317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7316.value)+(((1.5707963267949)*(x7317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7318=IKsin(j4);
IkReal x7319=IKcos(j4);
IkReal x7320=((1.0)*sj0);
IkReal x7321=(cj5*r00);
IkReal x7322=(r11*sj5);
IkReal x7323=(cj5*r10);
IkReal x7324=(r21*sj5);
IkReal x7325=(cj5*r20);
IkReal x7326=(r01*sj5);
IkReal x7327=((1.0)*x7319);
IkReal x7328=((1.0)*x7318);
evalcond[0]=((((-1.0)*r22*x7327))+(((-1.0)*x7325*x7328))+((x7318*x7324)));
evalcond[1]=((((-1.0)*x7324*x7327))+(((-1.0)*r22*x7328))+((x7319*x7325)));
evalcond[2]=(cj0+(((-1.0)*x7323*x7328))+(((-1.0)*r12*x7327))+((x7318*x7322)));
evalcond[3]=((((-1.0)*x7320))+(((-1.0)*x7321*x7328))+((x7318*x7326))+(((-1.0)*r02*x7327)));
evalcond[4]=((((-1.0)*x7326*x7327))+((x7319*x7321))+(((-1.0)*cj0))+(((-1.0)*r02*x7328)));
evalcond[5]=((((-1.0)*x7322*x7327))+(((-1.0)*x7320))+((x7319*x7323))+(((-1.0)*r12*x7328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7329=((1.0)*cj5);
CheckValue<IkReal> x7330 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7330.valid){
continue;
}
CheckValue<IkReal> x7331=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7329)))),-1);
if(!x7331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7330.value)+(((1.5707963267949)*(x7331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7332=IKsin(j4);
IkReal x7333=IKcos(j4);
IkReal x7334=((1.0)*sj0);
IkReal x7335=(cj5*r00);
IkReal x7336=(r11*sj5);
IkReal x7337=(cj5*r10);
IkReal x7338=(r21*sj5);
IkReal x7339=(cj5*r20);
IkReal x7340=(r01*sj5);
IkReal x7341=((1.0)*x7333);
IkReal x7342=((1.0)*x7332);
evalcond[0]=((((-1.0)*r22*x7341))+((x7332*x7338))+(((-1.0)*x7339*x7342)));
evalcond[1]=((((-1.0)*r22*x7342))+((x7333*x7339))+(((-1.0)*x7338*x7341)));
evalcond[2]=((((-1.0)*x7337*x7342))+cj0+(((-1.0)*r12*x7341))+((x7332*x7336)));
evalcond[3]=(((x7332*x7340))+(((-1.0)*r02*x7341))+(((-1.0)*x7334))+(((-1.0)*x7335*x7342)));
evalcond[4]=((((-1.0)*x7340*x7341))+((x7333*x7335))+(((-1.0)*r02*x7342))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7342))+((x7333*x7337))+(((-1.0)*x7334))+(((-1.0)*x7336*x7341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7343=IKsin(j0);
IkReal x7344=IKcos(j0);
IkReal x7345=((0.1)*sj5);
IkReal x7346=(cj5*r11);
IkReal x7347=(cj5*r01);
IkReal x7348=((1.0)*sj5);
evalcond[0]=(x7344+(((-1.0)*r00*x7348))+(((-1.0)*x7347)));
evalcond[1]=(x7343+(((-1.0)*r10*x7348))+(((-1.0)*x7346)));
evalcond[2]=((((-1.0)*r00*x7345))+(((-0.1)*x7347))+(((-1.0)*px))+(((-0.134)*x7343)));
evalcond[3]=((((0.134)*x7344))+(((-1.0)*r10*x7345))+(((-0.1)*x7346))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7349=((1.0)*sj5);
IkReal x7350=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7349)));
j4eval[0]=x7350;
j4eval[1]=IKsign(x7350);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7349))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7351=((1.0)*cj5);
IkReal x7352=((((-1.0)*r01*x7351))+(((-1.0)*r00*sj5)));
j4eval[0]=x7352;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7351)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7352);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7353=r21*r21;
IkReal x7354=cj5*cj5;
IkReal x7355=(r21*sj5);
IkReal x7356=(cj5*r20);
IkReal x7357=(((x7353*x7354))+(((-1.0)*x7354*(r20*r20)))+(((2.0)*x7355*x7356))+(((-1.0)*(r22*r22)))+(((-1.0)*x7353)));
j4eval[0]=x7357;
j4eval[1]=((IKabs(r22))+(IKabs((x7355+(((-1.0)*x7356))))));
j4eval[2]=IKsign(x7357);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7358=r21*r21;
IkReal x7359=cj5*cj5;
IkReal x7360=(r21*sj5);
IkReal x7361=(cj5*r20);
CheckValue<IkReal> x7362 = IKatan2WithCheck(IkReal(r22),IkReal((x7360+(((-1.0)*x7361)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7362.valid){
continue;
}
CheckValue<IkReal> x7363=IKPowWithIntegerCheck(IKsign(((((2.0)*x7360*x7361))+((x7358*x7359))+(((-1.0)*(r22*r22)))+(((-1.0)*x7359*(r20*r20)))+(((-1.0)*x7358)))),-1);
if(!x7363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7362.value)+(((1.5707963267949)*(x7363.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7364=IKsin(j4);
IkReal x7365=IKcos(j4);
IkReal x7366=(r11*sj5);
IkReal x7367=(r21*sj5);
IkReal x7368=(cj5*r00);
IkReal x7369=(cj5*r20);
IkReal x7370=(r01*sj5);
IkReal x7371=(cj5*r10);
IkReal x7372=((1.0)*x7365);
IkReal x7373=((1.0)*x7364);
evalcond[0]=((((-1.0)*r22*x7372))+((x7364*x7367))+(((-1.0)*x7369*x7373)));
evalcond[1]=((((-1.0)*x7370*x7372))+((x7365*x7368))+(((-1.0)*r02*x7373)));
evalcond[2]=((((-1.0)*r12*x7373))+((x7365*x7371))+(((-1.0)*x7366*x7372)));
evalcond[3]=(cj0+((x7364*x7366))+(((-1.0)*r12*x7372))+(((-1.0)*x7371*x7373)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7373))+((x7365*x7369))+(((-1.0)*x7367*x7372)));
evalcond[5]=((((-1.0)*sj0))+((x7364*x7370))+(((-1.0)*x7368*x7373))+(((-1.0)*r02*x7372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7374=((1.0)*cj5);
CheckValue<IkReal> x7375 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7374)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7375.valid){
continue;
}
CheckValue<IkReal> x7376=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7374))+(((-1.0)*r00*sj5)))),-1);
if(!x7376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7375.value)+(((1.5707963267949)*(x7376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7377=IKsin(j4);
IkReal x7378=IKcos(j4);
IkReal x7379=(r11*sj5);
IkReal x7380=(r21*sj5);
IkReal x7381=(cj5*r00);
IkReal x7382=(cj5*r20);
IkReal x7383=(r01*sj5);
IkReal x7384=(cj5*r10);
IkReal x7385=((1.0)*x7378);
IkReal x7386=((1.0)*x7377);
evalcond[0]=((((-1.0)*r22*x7385))+((x7377*x7380))+(((-1.0)*x7382*x7386)));
evalcond[1]=((((-1.0)*r02*x7386))+((x7378*x7381))+(((-1.0)*x7383*x7385)));
evalcond[2]=((((-1.0)*x7379*x7385))+((x7378*x7384))+(((-1.0)*r12*x7386)));
evalcond[3]=(cj0+((x7377*x7379))+(((-1.0)*x7384*x7386))+(((-1.0)*r12*x7385)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7386))+(((-1.0)*x7380*x7385))+((x7378*x7382)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7385))+(((-1.0)*x7381*x7386))+((x7377*x7383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7387=((1.0)*sj5);
CheckValue<IkReal> x7388 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7387))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7388.valid){
continue;
}
CheckValue<IkReal> x7389=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7387)))),-1);
if(!x7389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7388.value)+(((1.5707963267949)*(x7389.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7390=IKsin(j4);
IkReal x7391=IKcos(j4);
IkReal x7392=(r11*sj5);
IkReal x7393=(r21*sj5);
IkReal x7394=(cj5*r00);
IkReal x7395=(cj5*r20);
IkReal x7396=(r01*sj5);
IkReal x7397=(cj5*r10);
IkReal x7398=((1.0)*x7391);
IkReal x7399=((1.0)*x7390);
evalcond[0]=((((-1.0)*r22*x7398))+(((-1.0)*x7395*x7399))+((x7390*x7393)));
evalcond[1]=((((-1.0)*r02*x7399))+(((-1.0)*x7396*x7398))+((x7391*x7394)));
evalcond[2]=((((-1.0)*r12*x7399))+(((-1.0)*x7392*x7398))+((x7391*x7397)));
evalcond[3]=((((-1.0)*r12*x7398))+cj0+(((-1.0)*x7397*x7399))+((x7390*x7392)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7399))+(((-1.0)*x7393*x7398))+((x7391*x7395)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7394*x7399))+(((-1.0)*r02*x7398))+((x7390*x7396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7400=IKsin(j0);
IkReal x7401=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x7400))+(((0.392)*x7401)));
evalcond[1]=((((0.134)*x7401))+(((-1.0)*py))+(((0.392)*x7400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7402=((1.0)*cj5);
IkReal x7403=((((-1.0)*r01*x7402))+(((-1.0)*r00*sj5)));
j4eval[0]=x7403;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7402))))));
j4eval[2]=IKsign(x7403);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7404=((1.0)*cj5);
IkReal x7405=((((-1.0)*r11*x7404))+(((-1.0)*r10*sj5)));
j4eval[0]=x7405;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7404))))));
j4eval[2]=IKsign(x7405);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7406=cj5*cj5;
IkReal x7407=((1.0)*sj5);
IkReal x7408=(cj5*r20);
IkReal x7409=(r11*r21);
IkReal x7410=((((-1.0)*x7406*x7409))+(((-1.0)*r11*x7407*x7408))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7407))+x7409+((r10*r20*x7406)));
j4eval[0]=x7410;
j4eval[1]=IKsign(x7410);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7407))+((cj0*x7408))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7411=cj5*cj5;
IkReal x7412=((1.0)*sj5);
IkReal x7413=(cj5*r20);
IkReal x7414=(r11*r21);
CheckValue<IkReal> x7415=IKPowWithIntegerCheck(IKsign((((r10*r20*x7411))+(((-1.0)*r11*x7412*x7413))+(((-1.0)*x7411*x7414))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7412))+x7414)),-1);
if(!x7415.valid){
continue;
}
CheckValue<IkReal> x7416 = IKatan2WithCheck(IkReal((((cj0*x7413))+(((-1.0)*cj0*r21*x7412)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7415.value)))+(x7416.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7417=IKsin(j4);
IkReal x7418=IKcos(j4);
IkReal x7419=((1.0)*sj0);
IkReal x7420=(cj5*r00);
IkReal x7421=(r11*sj5);
IkReal x7422=(cj5*r10);
IkReal x7423=(r21*sj5);
IkReal x7424=(cj5*r20);
IkReal x7425=(r01*sj5);
IkReal x7426=((1.0)*x7418);
IkReal x7427=((1.0)*x7417);
evalcond[0]=((((-1.0)*r22*x7426))+(((-1.0)*x7424*x7427))+((x7417*x7423)));
evalcond[1]=((((-1.0)*r22*x7427))+((x7418*x7424))+(((-1.0)*x7423*x7426)));
evalcond[2]=((((-1.0)*x7422*x7427))+cj0+(((-1.0)*r12*x7426))+((x7417*x7421)));
evalcond[3]=((((-1.0)*r02*x7426))+(((-1.0)*x7419))+((x7417*x7425))+(((-1.0)*x7420*x7427)));
evalcond[4]=(((x7418*x7420))+(((-1.0)*r02*x7427))+(((-1.0)*x7425*x7426))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7421*x7426))+((x7418*x7422))+(((-1.0)*r12*x7427))+(((-1.0)*x7419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7428=((1.0)*cj5);
CheckValue<IkReal> x7429 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7428))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7429.valid){
continue;
}
CheckValue<IkReal> x7430=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7428)))),-1);
if(!x7430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7429.value)+(((1.5707963267949)*(x7430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7431=IKsin(j4);
IkReal x7432=IKcos(j4);
IkReal x7433=((1.0)*sj0);
IkReal x7434=(cj5*r00);
IkReal x7435=(r11*sj5);
IkReal x7436=(cj5*r10);
IkReal x7437=(r21*sj5);
IkReal x7438=(cj5*r20);
IkReal x7439=(r01*sj5);
IkReal x7440=((1.0)*x7432);
IkReal x7441=((1.0)*x7431);
evalcond[0]=((((-1.0)*x7438*x7441))+((x7431*x7437))+(((-1.0)*r22*x7440)));
evalcond[1]=((((-1.0)*x7437*x7440))+((x7432*x7438))+(((-1.0)*r22*x7441)));
evalcond[2]=((((-1.0)*x7436*x7441))+cj0+((x7431*x7435))+(((-1.0)*r12*x7440)));
evalcond[3]=((((-1.0)*x7433))+(((-1.0)*r02*x7440))+((x7431*x7439))+(((-1.0)*x7434*x7441)));
evalcond[4]=((((-1.0)*r02*x7441))+((x7432*x7434))+(((-1.0)*x7439*x7440))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7435*x7440))+(((-1.0)*x7433))+((x7432*x7436))+(((-1.0)*r12*x7441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7442=((1.0)*cj5);
CheckValue<IkReal> x7443 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7442)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7443.valid){
continue;
}
CheckValue<IkReal> x7444=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7442))+(((-1.0)*r00*sj5)))),-1);
if(!x7444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7443.value)+(((1.5707963267949)*(x7444.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7445=IKsin(j4);
IkReal x7446=IKcos(j4);
IkReal x7447=((1.0)*sj0);
IkReal x7448=(cj5*r00);
IkReal x7449=(r11*sj5);
IkReal x7450=(cj5*r10);
IkReal x7451=(r21*sj5);
IkReal x7452=(cj5*r20);
IkReal x7453=(r01*sj5);
IkReal x7454=((1.0)*x7446);
IkReal x7455=((1.0)*x7445);
evalcond[0]=((((-1.0)*x7452*x7455))+((x7445*x7451))+(((-1.0)*r22*x7454)));
evalcond[1]=((((-1.0)*x7451*x7454))+((x7446*x7452))+(((-1.0)*r22*x7455)));
evalcond[2]=(cj0+(((-1.0)*x7450*x7455))+((x7445*x7449))+(((-1.0)*r12*x7454)));
evalcond[3]=((((-1.0)*x7447))+((x7445*x7453))+(((-1.0)*r02*x7454))+(((-1.0)*x7448*x7455)));
evalcond[4]=((((-1.0)*x7453*x7454))+((x7446*x7448))+(((-1.0)*r02*x7455))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7447))+((x7446*x7450))+(((-1.0)*x7449*x7454))+(((-1.0)*r12*x7455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7456=((1.0)*sj5);
IkReal x7457=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x7456))+(((-1.0)*r11*x7457)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7456))+(((-1.0)*r01*x7457)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x7456))+(((-1.0)*r11*x7457))))+IKsqr(((((-1.0)*r00*x7456))+(((-1.0)*r01*x7457))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x7456))+(((-1.0)*r11*x7457))), ((((-1.0)*r00*x7456))+(((-1.0)*r01*x7457))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7458=IKsin(j0);
IkReal x7459=IKcos(j0);
IkReal x7460=((0.1)*sj5);
IkReal x7461=(cj5*r11);
IkReal x7462=(cj5*r01);
IkReal x7463=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7459))+(((-1.0)*x7462))+(((-1.0)*r00*x7463)));
evalcond[1]=((((-1.0)*x7458))+(((-1.0)*r10*x7463))+(((-1.0)*x7461)));
evalcond[2]=((((-0.1)*x7462))+(((-1.0)*px))+(((-0.134)*x7458))+(((-1.0)*r00*x7460)));
evalcond[3]=((((-0.1)*x7461))+(((-1.0)*r10*x7460))+(((-1.0)*py))+(((0.134)*x7459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7464=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7464;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7464);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7465=((1.0)*cj5);
IkReal x7466=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7465)));
j4eval[0]=x7466;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7465)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7466);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7467=cj5*cj5;
IkReal x7468=r21*r21;
IkReal x7469=(r21*sj5);
IkReal x7470=(cj5*r20);
IkReal x7471=((((-1.0)*x7467*x7468))+((x7467*(r20*r20)))+(r22*r22)+(((-2.0)*x7469*x7470))+x7468);
j4eval[0]=x7471;
j4eval[1]=IKsign(x7471);
j4eval[2]=((IKabs(((((-1.0)*x7470))+x7469)))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7472=cj5*cj5;
IkReal x7473=r21*r21;
IkReal x7474=(r21*sj5);
IkReal x7475=(cj5*r20);
CheckValue<IkReal> x7476 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7475))+x7474)),IKFAST_ATAN2_MAGTHRESH);
if(!x7476.valid){
continue;
}
CheckValue<IkReal> x7477=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-1.0)*x7472*x7473))+((x7472*(r20*r20)))+(((-2.0)*x7474*x7475))+x7473)),-1);
if(!x7477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7476.value)+(((1.5707963267949)*(x7477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7478=IKsin(j4);
IkReal x7479=IKcos(j4);
IkReal x7480=(r11*sj5);
IkReal x7481=(r21*sj5);
IkReal x7482=(cj5*r00);
IkReal x7483=(cj5*r20);
IkReal x7484=(r01*sj5);
IkReal x7485=(cj5*r10);
IkReal x7486=((1.0)*x7479);
IkReal x7487=((1.0)*x7478);
evalcond[0]=(((x7478*x7481))+(((-1.0)*r22*x7486))+(((-1.0)*x7483*x7487)));
evalcond[1]=((((-1.0)*x7484*x7486))+(((-1.0)*r02*x7487))+((x7479*x7482)));
evalcond[2]=((((-1.0)*x7480*x7486))+(((-1.0)*r12*x7487))+((x7479*x7485)));
evalcond[3]=(((x7478*x7480))+cj0+(((-1.0)*r12*x7486))+(((-1.0)*x7485*x7487)));
evalcond[4]=((1.0)+(((-1.0)*x7481*x7486))+(((-1.0)*r22*x7487))+((x7479*x7483)));
evalcond[5]=((((-1.0)*x7482*x7487))+((x7478*x7484))+(((-1.0)*sj0))+(((-1.0)*r02*x7486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7488=((1.0)*cj5);
CheckValue<IkReal> x7489=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7488)))),-1);
if(!x7489.valid){
continue;
}
CheckValue<IkReal> x7490 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7488)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7489.value)))+(x7490.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7491=IKsin(j4);
IkReal x7492=IKcos(j4);
IkReal x7493=(r11*sj5);
IkReal x7494=(r21*sj5);
IkReal x7495=(cj5*r00);
IkReal x7496=(cj5*r20);
IkReal x7497=(r01*sj5);
IkReal x7498=(cj5*r10);
IkReal x7499=((1.0)*x7492);
IkReal x7500=((1.0)*x7491);
evalcond[0]=((((-1.0)*x7496*x7500))+((x7491*x7494))+(((-1.0)*r22*x7499)));
evalcond[1]=((((-1.0)*r02*x7500))+(((-1.0)*x7497*x7499))+((x7492*x7495)));
evalcond[2]=(((x7492*x7498))+(((-1.0)*x7493*x7499))+(((-1.0)*r12*x7500)));
evalcond[3]=(cj0+((x7491*x7493))+(((-1.0)*x7498*x7500))+(((-1.0)*r12*x7499)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7500))+(((-1.0)*x7494*x7499))+((x7492*x7496)));
evalcond[5]=((((-1.0)*sj0))+((x7491*x7497))+(((-1.0)*r02*x7499))+(((-1.0)*x7495*x7500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7501 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7501.valid){
continue;
}
CheckValue<IkReal> x7502=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7501.value)+(((1.5707963267949)*(x7502.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7503=IKsin(j4);
IkReal x7504=IKcos(j4);
IkReal x7505=(r11*sj5);
IkReal x7506=(r21*sj5);
IkReal x7507=(cj5*r00);
IkReal x7508=(cj5*r20);
IkReal x7509=(r01*sj5);
IkReal x7510=(cj5*r10);
IkReal x7511=((1.0)*x7504);
IkReal x7512=((1.0)*x7503);
evalcond[0]=(((x7503*x7506))+(((-1.0)*x7508*x7512))+(((-1.0)*r22*x7511)));
evalcond[1]=(((x7504*x7507))+(((-1.0)*x7509*x7511))+(((-1.0)*r02*x7512)));
evalcond[2]=(((x7504*x7510))+(((-1.0)*r12*x7512))+(((-1.0)*x7505*x7511)));
evalcond[3]=(((x7503*x7505))+cj0+(((-1.0)*x7510*x7512))+(((-1.0)*r12*x7511)));
evalcond[4]=((1.0)+((x7504*x7508))+(((-1.0)*x7506*x7511))+(((-1.0)*r22*x7512)));
evalcond[5]=(((x7503*x7509))+(((-1.0)*sj0))+(((-1.0)*x7507*x7512))+(((-1.0)*r02*x7511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7513=IKcos(j0);
IkReal x7514=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.392)*x7513))+(((-0.134)*x7514)));
evalcond[1]=((((0.134)*x7513))+(((-1.0)*py))+(((-0.392)*x7514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7515=((1.0)*cj5);
IkReal x7516=((((-1.0)*r01*x7515))+(((-1.0)*r00*sj5)));
j4eval[0]=x7516;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7515))))));
j4eval[2]=IKsign(x7516);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7517=cj5*cj5;
IkReal x7518=((1.0)*r21);
IkReal x7519=(cj5*sj5);
IkReal x7520=((1.0)*r20);
IkReal x7521=((((-1.0)*r01*x7519*x7520))+((r00*r20*x7517))+(((-1.0)*r00*x7518*x7519))+((r01*r21))+(((-1.0)*r01*x7517*x7518))+((r02*r22)));
j4eval[0]=x7521;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7520)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7522=cj5*cj5;
IkReal x7523=(r21*sj5);
IkReal x7524=(r11*r21);
IkReal x7525=((1.0)*cj5*r20);
IkReal x7526=(((r12*r22))+(((-1.0)*cj5*r10*x7523))+(((-1.0)*r11*sj5*x7525))+((r10*r20*x7522))+x7524+(((-1.0)*x7522*x7524)));
j4eval[0]=x7526;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7523))+(((-1.0)*sj0*x7525))))));
j4eval[2]=IKsign(x7526);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7527=cj5*cj5;
IkReal x7528=(r21*sj5);
IkReal x7529=(r11*r21);
IkReal x7530=((1.0)*cj5*r20);
CheckValue<IkReal> x7531=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7530))+((r12*r22))+(((-1.0)*cj5*r10*x7528))+((r10*r20*x7527))+x7529+(((-1.0)*x7527*x7529)))),-1);
if(!x7531.valid){
continue;
}
CheckValue<IkReal> x7532 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7528))+(((-1.0)*sj0*x7530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7531.value)))+(x7532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7533=IKsin(j4);
IkReal x7534=IKcos(j4);
IkReal x7535=(r11*sj5);
IkReal x7536=(cj5*r00);
IkReal x7537=(cj5*r10);
IkReal x7538=(r21*sj5);
IkReal x7539=(cj5*r20);
IkReal x7540=(r01*sj5);
IkReal x7541=((1.0)*x7534);
IkReal x7542=((1.0)*x7533);
evalcond[0]=(((x7533*x7538))+(((-1.0)*r22*x7541))+(((-1.0)*x7539*x7542)));
evalcond[1]=((((-1.0)*x7538*x7541))+(((-1.0)*r22*x7542))+((x7534*x7539)));
evalcond[2]=(((x7533*x7535))+cj0+(((-1.0)*x7537*x7542))+(((-1.0)*r12*x7541)));
evalcond[3]=(cj0+(((-1.0)*x7540*x7541))+((x7534*x7536))+(((-1.0)*r02*x7542)));
evalcond[4]=(sj0+(((-1.0)*x7535*x7541))+((x7534*x7537))+(((-1.0)*r12*x7542)));
evalcond[5]=((((-1.0)*sj0))+((x7533*x7540))+(((-1.0)*x7536*x7542))+(((-1.0)*r02*x7541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7543=cj5*cj5;
IkReal x7544=((1.0)*r21);
IkReal x7545=(cj5*sj5);
IkReal x7546=((1.0)*r20);
CheckValue<IkReal> x7547=IKPowWithIntegerCheck(IKsign((((r00*r20*x7543))+(((-1.0)*r01*x7545*x7546))+((r01*r21))+(((-1.0)*r00*x7544*x7545))+((r02*r22))+(((-1.0)*r01*x7543*x7544)))),-1);
if(!x7547.valid){
continue;
}
CheckValue<IkReal> x7548 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7546)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7547.value)))+(x7548.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7549=IKsin(j4);
IkReal x7550=IKcos(j4);
IkReal x7551=(r11*sj5);
IkReal x7552=(cj5*r00);
IkReal x7553=(cj5*r10);
IkReal x7554=(r21*sj5);
IkReal x7555=(cj5*r20);
IkReal x7556=(r01*sj5);
IkReal x7557=((1.0)*x7550);
IkReal x7558=((1.0)*x7549);
evalcond[0]=((((-1.0)*x7555*x7558))+((x7549*x7554))+(((-1.0)*r22*x7557)));
evalcond[1]=((((-1.0)*x7554*x7557))+((x7550*x7555))+(((-1.0)*r22*x7558)));
evalcond[2]=(cj0+((x7549*x7551))+(((-1.0)*x7553*x7558))+(((-1.0)*r12*x7557)));
evalcond[3]=(cj0+((x7550*x7552))+(((-1.0)*x7556*x7557))+(((-1.0)*r02*x7558)));
evalcond[4]=(sj0+(((-1.0)*x7551*x7557))+((x7550*x7553))+(((-1.0)*r12*x7558)));
evalcond[5]=((((-1.0)*sj0))+((x7549*x7556))+(((-1.0)*x7552*x7558))+(((-1.0)*r02*x7557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7559=((1.0)*cj5);
CheckValue<IkReal> x7560=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7559)))),-1);
if(!x7560.valid){
continue;
}
CheckValue<IkReal> x7561 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7559)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7560.value)))+(x7561.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7562=IKsin(j4);
IkReal x7563=IKcos(j4);
IkReal x7564=(r11*sj5);
IkReal x7565=(cj5*r00);
IkReal x7566=(cj5*r10);
IkReal x7567=(r21*sj5);
IkReal x7568=(cj5*r20);
IkReal x7569=(r01*sj5);
IkReal x7570=((1.0)*x7563);
IkReal x7571=((1.0)*x7562);
evalcond[0]=(((x7562*x7567))+(((-1.0)*x7568*x7571))+(((-1.0)*r22*x7570)));
evalcond[1]=((((-1.0)*x7567*x7570))+(((-1.0)*r22*x7571))+((x7563*x7568)));
evalcond[2]=((((-1.0)*x7566*x7571))+cj0+((x7562*x7564))+(((-1.0)*r12*x7570)));
evalcond[3]=(cj0+(((-1.0)*r02*x7571))+(((-1.0)*x7569*x7570))+((x7563*x7565)));
evalcond[4]=(sj0+((x7563*x7566))+(((-1.0)*x7564*x7570))+(((-1.0)*r12*x7571)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7565*x7571))+((x7562*x7569))+(((-1.0)*r02*x7570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7572=cj1*cj1;
IkReal x7573=((500.0)*py);
IkReal x7574=(cj1*sj2);
IkReal x7575=(cj2*sj2);
IkReal x7576=(cj5*r01);
IkReal x7577=(cj2*sj1);
IkReal x7578=(cj1*sj1);
IkReal x7579=(r00*sj5);
IkReal x7580=((50.0)*r10*sj5);
IkReal x7581=((50.0)*cj5*r11);
CheckValue<IkReal> x7582=IKPowWithIntegerCheck(((((-392.0)*x7572*x7575))+(((-212.5)*sj2*x7572))+(((196.0)*x7578))+(((196.0)*x7575))+(((-392.0)*cj1*cj2*x7577))+(((-212.5)*cj1*x7577))),-1);
if(!x7582.valid){
continue;
}
CheckValue<IkReal> x7583=IKPowWithIntegerCheck(((((-1.0)*x7574))+(((-1.0)*x7577))),-1);
if(!x7583.valid){
continue;
}
if( IKabs(((x7582.value)*(((((-67.0)*x7576))+(((-67.0)*x7579))+(((-1.0)*x7574*x7581))+(((-1.0)*x7574*x7580))+(((-1.0)*x7577*x7580))+(((-1.0)*x7577*x7581))+(((-1.0)*x7573*x7574))+(((-1.0)*x7573*x7577)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7583.value)*((x7576+x7579)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7582.value)*(((((-67.0)*x7576))+(((-67.0)*x7579))+(((-1.0)*x7574*x7581))+(((-1.0)*x7574*x7580))+(((-1.0)*x7577*x7580))+(((-1.0)*x7577*x7581))+(((-1.0)*x7573*x7574))+(((-1.0)*x7573*x7577))))))+IKsqr(((x7583.value)*((x7576+x7579))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7582.value)*(((((-67.0)*x7576))+(((-67.0)*x7579))+(((-1.0)*x7574*x7581))+(((-1.0)*x7574*x7580))+(((-1.0)*x7577*x7580))+(((-1.0)*x7577*x7581))+(((-1.0)*x7573*x7574))+(((-1.0)*x7573*x7577))))), ((x7583.value)*((x7576+x7579))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7584=IKcos(j0);
IkReal x7585=IKsin(j0);
IkReal x7586=(r00*sj5);
IkReal x7587=(cj5*r11);
IkReal x7588=(r10*sj5);
IkReal x7589=((1.0)*cj2);
IkReal x7590=(cj5*r01);
IkReal x7591=((0.392)*sj2);
IkReal x7592=((0.425)*cj1);
IkReal x7593=((1.0)*cj1*sj2);
IkReal x7594=((0.392)*cj1*cj2);
IkReal x7595=(sj1*x7584);
IkReal x7596=(sj1*x7585);
evalcond[0]=((((-1.0)*x7586))+(((-1.0)*x7589*x7595))+(((-1.0)*x7590))+(((-1.0)*x7584*x7593)));
evalcond[1]=((((-1.0)*x7588))+(((-1.0)*x7587))+(((-1.0)*x7589*x7596))+(((-1.0)*x7585*x7593)));
evalcond[2]=((((-0.1)*x7590))+(((-1.0)*x7591*x7595))+((x7584*x7594))+((x7584*x7592))+(((-0.134)*x7585))+(((-1.0)*px))+(((-0.1)*x7586)));
evalcond[3]=((((-1.0)*x7591*x7596))+((x7585*x7594))+((x7585*x7592))+(((0.134)*x7584))+(((-1.0)*py))+(((-0.1)*x7588))+(((-0.1)*x7587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7597=((1.0)*cj5);
IkReal x7598=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7597)));
j4eval[0]=x7598;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7597)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7598);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7599=((1.0)*cj5);
IkReal x7600=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7599)));
j4eval[0]=x7600;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7599))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7600);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7601=((1.0)*sj0);
IkReal x7602=((1.0)*cj0);
IkReal x7603=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7603;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x7601))+(((-1.0)*r01*sj5*x7602))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r02*x7602))+(((-1.0)*r12*x7601))))));
j4eval[2]=IKsign(x7603);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7604=((-1.0)*r20);
IkReal x7606 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7606)==0){
continue;
}
IkReal x7605=pow(x7606,-0.5);
CheckValue<IkReal> x7607 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7604),IKFAST_ATAN2_MAGTHRESH);
if(!x7607.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7607.value));
IkReal gconst133=(r21*x7605);
IkReal gconst134=(x7604*x7605);
CheckValue<IkReal> x7608 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7608.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7608.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7609=((-1.0)*r20);
IkReal x7610=x7605;
CheckValue<IkReal> x7612 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7609),IKFAST_ATAN2_MAGTHRESH);
if(!x7612.valid){
continue;
}
IkReal x7611=((-1.0)*(x7612.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7611;
IkReal gconst132=x7611;
IkReal gconst133=(r21*x7610);
IkReal gconst134=(x7609*x7610);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7613=((-1.0)*r20);
IkReal x7614=x7605;
CheckValue<IkReal> x7616 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7613),IKFAST_ATAN2_MAGTHRESH);
if(!x7616.valid){
continue;
}
IkReal x7615=((-1.0)*(x7616.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7615;
IkReal gconst132=x7615;
IkReal gconst133=(r21*x7614);
IkReal gconst134=(x7613*x7614);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7617=((-1.0)*r20);
IkReal x7618=x7605;
CheckValue<IkReal> x7620 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7617),IKFAST_ATAN2_MAGTHRESH);
if(!x7620.valid){
continue;
}
IkReal x7619=((-1.0)*(x7620.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7619;
IkReal gconst132=x7619;
IkReal gconst133=(r21*x7618);
IkReal gconst134=(x7617*x7618);
IkReal x7621=r22*r22;
CheckValue<IkReal> x7624=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7621))),-1);
if(!x7624.valid){
continue;
}
IkReal x7622=x7624.value;
IkReal x7623=((((2.0)*x7622*(r20*r20)*(r21*r21)))+((x7622*(r20*r20*r20*r20)))+((x7622*(r21*r21*r21*r21)))+x7621);
j4eval[0]=x7623;
j4eval[1]=IKsign(x7623);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7625=(gconst133*r21);
IkReal x7626=(cj1*sj2);
IkReal x7627=(gconst134*r20);
IkReal x7628=(cj2*sj1);
CheckValue<IkReal> x7629 = IKatan2WithCheck(IkReal((((r22*x7626))+((r22*x7628)))),IkReal((((x7625*x7628))+((x7625*x7626))+(((-1.0)*x7626*x7627))+(((-1.0)*x7627*x7628)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7629.valid){
continue;
}
CheckValue<IkReal> x7630=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7627*x7627)+(((-2.0)*x7625*x7627))+(x7625*x7625))),-1);
if(!x7630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7629.value)+(((1.5707963267949)*(x7630.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7631=IKsin(j4);
IkReal x7632=IKcos(j4);
IkReal x7633=(sj1*sj2);
IkReal x7634=(gconst133*r11);
IkReal x7635=(gconst133*r21);
IkReal x7636=(gconst133*r01);
IkReal x7637=((1.0)*x7632);
IkReal x7638=(gconst134*x7632);
IkReal x7639=((1.0)*x7631);
IkReal x7640=((1.0)*cj1*cj2);
evalcond[0]=(((x7631*x7635))+(((-1.0)*r22*x7637))+(((-1.0)*gconst134*r20*x7639)));
evalcond[1]=(((x7631*x7634))+(((-1.0)*gconst134*r10*x7639))+cj0+(((-1.0)*r12*x7637)));
evalcond[2]=(((x7631*x7636))+(((-1.0)*sj0))+(((-1.0)*r02*x7637))+(((-1.0)*gconst134*r00*x7639)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7639))+((cj1*sj2))+(((-1.0)*x7635*x7637))+((r20*x7638)));
evalcond[4]=(((r00*x7638))+(((-1.0)*x7636*x7637))+(((-1.0)*cj0*x7640))+(((-1.0)*r02*x7639))+((cj0*x7633)));
evalcond[5]=((((-1.0)*x7634*x7637))+(((-1.0)*sj0*x7640))+((r10*x7638))+((sj0*x7633))+(((-1.0)*r12*x7639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7641=((1.0)*gconst134);
CheckValue<IkReal> x7642 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7641))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7642.valid){
continue;
}
CheckValue<IkReal> x7643=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7641)))),-1);
if(!x7643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7642.value)+(((1.5707963267949)*(x7643.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7644=IKsin(j4);
IkReal x7645=IKcos(j4);
IkReal x7646=(sj1*sj2);
IkReal x7647=(gconst133*r11);
IkReal x7648=(gconst133*r21);
IkReal x7649=(gconst133*r01);
IkReal x7650=((1.0)*x7645);
IkReal x7651=(gconst134*x7645);
IkReal x7652=((1.0)*x7644);
IkReal x7653=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7650))+((x7644*x7648))+(((-1.0)*gconst134*r20*x7652)));
evalcond[1]=(((x7644*x7647))+cj0+(((-1.0)*gconst134*r10*x7652))+(((-1.0)*r12*x7650)));
evalcond[2]=(((x7644*x7649))+(((-1.0)*sj0))+(((-1.0)*r02*x7650))+(((-1.0)*gconst134*r00*x7652)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7652))+((cj1*sj2))+(((-1.0)*x7648*x7650))+((r20*x7651)));
evalcond[4]=((((-1.0)*x7649*x7650))+(((-1.0)*r02*x7652))+(((-1.0)*cj0*x7653))+((r00*x7651))+((cj0*x7646)));
evalcond[5]=(((sj0*x7646))+(((-1.0)*x7647*x7650))+(((-1.0)*sj0*x7653))+((r10*x7651))+(((-1.0)*r12*x7652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7654=((1.0)*gconst134);
CheckValue<IkReal> x7655=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7654)))),-1);
if(!x7655.valid){
continue;
}
CheckValue<IkReal> x7656 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7654))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7655.value)))+(x7656.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7657=IKsin(j4);
IkReal x7658=IKcos(j4);
IkReal x7659=(sj1*sj2);
IkReal x7660=(gconst133*r11);
IkReal x7661=(gconst133*r21);
IkReal x7662=(gconst133*r01);
IkReal x7663=((1.0)*x7658);
IkReal x7664=(gconst134*x7658);
IkReal x7665=((1.0)*x7657);
IkReal x7666=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7665))+(((-1.0)*r22*x7663))+((x7657*x7661)));
evalcond[1]=((((-1.0)*gconst134*r10*x7665))+(((-1.0)*r12*x7663))+cj0+((x7657*x7660)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7663))+(((-1.0)*gconst134*r00*x7665))+((x7657*x7662)));
evalcond[3]=(((cj2*sj1))+((r20*x7664))+((cj1*sj2))+(((-1.0)*r22*x7665))+(((-1.0)*x7661*x7663)));
evalcond[4]=((((-1.0)*cj0*x7666))+((r00*x7664))+(((-1.0)*r02*x7665))+((cj0*x7659))+(((-1.0)*x7662*x7663)));
evalcond[5]=((((-1.0)*r12*x7665))+((r10*x7664))+(((-1.0)*x7660*x7663))+(((-1.0)*sj0*x7666))+((sj0*x7659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7667=((-1.0)*r21);
IkReal x7669 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7669)==0){
continue;
}
IkReal x7668=pow(x7669,-0.5);
CheckValue<IkReal> x7670 = IKatan2WithCheck(IkReal(x7667),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7670.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7670.value))));
IkReal gconst136=(x7667*x7668);
IkReal gconst137=((1.0)*r20*x7668);
CheckValue<IkReal> x7671 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7671.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7671.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7672=((-1.0)*r21);
CheckValue<IkReal> x7675 = IKatan2WithCheck(IkReal(x7672),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7675.valid){
continue;
}
IkReal x7673=((1.0)*(x7675.value));
IkReal x7674=x7668;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7673)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7673)));
IkReal gconst136=(x7672*x7674);
IkReal gconst137=((1.0)*r20*x7674);
IkReal x7676=r22*r22;
IkReal x7677=((1.0)*x7676);
CheckValue<IkReal> x7681=IKPowWithIntegerCheck(((-1.0)+x7676),-1);
if(!x7681.valid){
continue;
}
IkReal x7678=x7681.value;
if((((1.0)+(((-1.0)*x7677)))) < -0.00001)
continue;
IkReal x7679=IKsqrt(((1.0)+(((-1.0)*x7677))));
IkReal x7680=(cj0*x7678*x7679);
j4eval[0]=((IKabs(((((-1.0)*x7677*x7680))+x7680)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7682=((-1.0)*r21);
CheckValue<IkReal> x7685 = IKatan2WithCheck(IkReal(x7682),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7685.valid){
continue;
}
IkReal x7683=((1.0)*(x7685.value));
IkReal x7684=x7668;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7683)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7683)));
IkReal gconst136=(x7682*x7684);
IkReal gconst137=((1.0)*r20*x7684);
IkReal x7686=r22*r22;
IkReal x7687=((1.0)*x7686);
CheckValue<IkReal> x7691=IKPowWithIntegerCheck(((-1.0)+x7686),-1);
if(!x7691.valid){
continue;
}
IkReal x7688=x7691.value;
if((((1.0)+(((-1.0)*x7687)))) < -0.00001)
continue;
IkReal x7689=IKsqrt(((1.0)+(((-1.0)*x7687))));
IkReal x7690=(sj0*x7688*x7689);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7687*x7690))+x7690))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7692=((-1.0)*r21);
CheckValue<IkReal> x7695 = IKatan2WithCheck(IkReal(x7692),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7695.valid){
continue;
}
IkReal x7693=((1.0)*(x7695.value));
IkReal x7694=x7668;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7693)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7693)));
IkReal gconst136=(x7692*x7694);
IkReal gconst137=((1.0)*r20*x7694);
IkReal x7696=r22*r22;
IkReal x7697=(r12*sj0);
IkReal x7698=(cj0*r02);
CheckValue<IkReal> x7702=IKPowWithIntegerCheck(((-1.0)+x7696),-1);
if(!x7702.valid){
continue;
}
IkReal x7699=x7702.value;
if((((1.0)+(((-1.0)*x7696)))) < -0.00001)
continue;
IkReal x7700=IKsqrt(((1.0)+(((-1.0)*x7696))));
IkReal x7701=(r22*x7699*x7700);
j4eval[0]=0;
j4eval[1]=((IKabs((((x7698*x7701))+((x7697*x7701)))))+(IKabs(((((-1.0)*x7698))+(((-1.0)*x7697))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7703=((1.0)*sj0);
IkReal x7704=((1.0)*cj0);
CheckValue<IkReal> x7705=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7705.valid){
continue;
}
CheckValue<IkReal> x7706 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7703))+(((-1.0)*r02*x7704)))),IkReal(((((-1.0)*gconst136*r01*x7704))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x7703))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7705.value)))+(x7706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7707=IKsin(j4);
IkReal x7708=IKcos(j4);
IkReal x7709=(gconst136*r01);
IkReal x7710=(gconst137*r10);
IkReal x7711=(sj1*sj2);
IkReal x7712=(gconst137*r20);
IkReal x7713=(gconst136*r11);
IkReal x7714=(gconst136*r21);
IkReal x7715=(gconst137*r00);
IkReal x7716=((1.0)*x7708);
IkReal x7717=((1.0)*cj1*cj2);
IkReal x7718=((1.0)*x7707);
evalcond[0]=((((-1.0)*r22*x7716))+((x7707*x7714))+(((-1.0)*x7712*x7718)));
evalcond[1]=(cj0+(((-1.0)*r12*x7716))+((x7707*x7713))+(((-1.0)*x7710*x7718)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7715*x7718))+((x7707*x7709))+(((-1.0)*r02*x7716)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7718))+((cj1*sj2))+(((-1.0)*x7714*x7716))+((x7708*x7712)));
evalcond[4]=((((-1.0)*cj0*x7717))+((cj0*x7711))+(((-1.0)*r02*x7718))+((x7708*x7715))+(((-1.0)*x7709*x7716)));
evalcond[5]=((((-1.0)*r12*x7718))+((sj0*x7711))+(((-1.0)*x7713*x7716))+(((-1.0)*sj0*x7717))+((x7708*x7710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7719=((1.0)*gconst137);
CheckValue<IkReal> x7720=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7719))+(((-1.0)*gconst136*r10)))),-1);
if(!x7720.valid){
continue;
}
CheckValue<IkReal> x7721 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7719))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7720.value)))+(x7721.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7722=IKsin(j4);
IkReal x7723=IKcos(j4);
IkReal x7724=(gconst136*r01);
IkReal x7725=(gconst137*r10);
IkReal x7726=(sj1*sj2);
IkReal x7727=(gconst137*r20);
IkReal x7728=(gconst136*r11);
IkReal x7729=(gconst136*r21);
IkReal x7730=(gconst137*r00);
IkReal x7731=((1.0)*x7723);
IkReal x7732=((1.0)*cj1*cj2);
IkReal x7733=((1.0)*x7722);
evalcond[0]=((((-1.0)*r22*x7731))+((x7722*x7729))+(((-1.0)*x7727*x7733)));
evalcond[1]=(cj0+(((-1.0)*r12*x7731))+((x7722*x7728))+(((-1.0)*x7725*x7733)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7730*x7733))+((x7722*x7724))+(((-1.0)*r02*x7731)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7733))+((x7723*x7727))+(((-1.0)*x7729*x7731)));
evalcond[4]=((((-1.0)*cj0*x7732))+(((-1.0)*x7724*x7731))+((cj0*x7726))+(((-1.0)*r02*x7733))+((x7723*x7730)));
evalcond[5]=(((sj0*x7726))+(((-1.0)*x7728*x7731))+(((-1.0)*r12*x7733))+((x7723*x7725))+(((-1.0)*sj0*x7732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7734=((1.0)*gconst137);
CheckValue<IkReal> x7735 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7734))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7735.valid){
continue;
}
CheckValue<IkReal> x7736=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x7734)))),-1);
if(!x7736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7735.value)+(((1.5707963267949)*(x7736.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7737=IKsin(j4);
IkReal x7738=IKcos(j4);
IkReal x7739=(gconst136*r01);
IkReal x7740=(gconst137*r10);
IkReal x7741=(sj1*sj2);
IkReal x7742=(gconst137*r20);
IkReal x7743=(gconst136*r11);
IkReal x7744=(gconst136*r21);
IkReal x7745=(gconst137*r00);
IkReal x7746=((1.0)*x7738);
IkReal x7747=((1.0)*cj1*cj2);
IkReal x7748=((1.0)*x7737);
evalcond[0]=((((-1.0)*x7742*x7748))+(((-1.0)*r22*x7746))+((x7737*x7744)));
evalcond[1]=(cj0+(((-1.0)*x7740*x7748))+((x7737*x7743))+(((-1.0)*r12*x7746)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7746))+((x7737*x7739))+(((-1.0)*x7745*x7748)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7748))+(((-1.0)*x7744*x7746))+((cj1*sj2))+((x7738*x7742)));
evalcond[4]=((((-1.0)*r02*x7748))+((x7738*x7745))+(((-1.0)*cj0*x7747))+(((-1.0)*x7739*x7746))+((cj0*x7741)));
evalcond[5]=(((x7738*x7740))+((sj0*x7741))+(((-1.0)*r12*x7748))+(((-1.0)*x7743*x7746))+(((-1.0)*sj0*x7747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7749=((-1.0)*r10);
IkReal x7751 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7751)==0){
continue;
}
IkReal x7750=pow(x7751,-0.5);
CheckValue<IkReal> x7752 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7749),IKFAST_ATAN2_MAGTHRESH);
if(!x7752.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7752.value));
IkReal gconst139=(r11*x7750);
IkReal gconst140=(x7749*x7750);
CheckValue<IkReal> x7753 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7753.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7753.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7754=((-1.0)*r10);
IkReal x7755=x7750;
CheckValue<IkReal> x7757 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7754),IKFAST_ATAN2_MAGTHRESH);
if(!x7757.valid){
continue;
}
IkReal x7756=((-1.0)*(x7757.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7756;
IkReal gconst138=x7756;
IkReal gconst139=(r11*x7755);
IkReal gconst140=(x7754*x7755);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7758=((1.0)*sj0);
IkReal x7759=((1.0)*gconst139);
CheckValue<IkReal> x7760=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7759)))),-1);
if(!x7760.valid){
continue;
}
CheckValue<IkReal> x7761 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7758)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x7758))+(((-1.0)*cj0*r01*x7759))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7760.value)))+(x7761.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7762=IKsin(j4);
IkReal x7763=IKcos(j4);
IkReal x7764=(gconst140*r00);
IkReal x7765=(sj1*sj2);
IkReal x7766=(gconst139*r11);
IkReal x7767=(gconst139*r01);
IkReal x7768=(gconst139*r21);
IkReal x7769=((1.0)*x7763);
IkReal x7770=((1.0)*x7762);
IkReal x7771=((1.0)*cj1*cj2);
IkReal x7772=(gconst140*x7763);
evalcond[0]=((((-1.0)*r22*x7769))+((x7762*x7768))+(((-1.0)*gconst140*r20*x7770)));
evalcond[1]=(cj0+((x7762*x7766))+(((-1.0)*r12*x7769))+(((-1.0)*gconst140*r10*x7770)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7769))+(((-1.0)*x7764*x7770))+((x7762*x7767)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7770))+(((-1.0)*x7768*x7769))+((cj1*sj2))+((r20*x7772)));
evalcond[4]=((((-1.0)*r02*x7770))+(((-1.0)*x7767*x7769))+(((-1.0)*cj0*x7771))+((cj0*x7765))+((x7763*x7764)));
evalcond[5]=((((-1.0)*x7766*x7769))+((sj0*x7765))+(((-1.0)*sj0*x7771))+(((-1.0)*r12*x7770))+((r10*x7772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7773=((1.0)*gconst140);
CheckValue<IkReal> x7774=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7773))+(((-1.0)*gconst139*r00)))),-1);
if(!x7774.valid){
continue;
}
CheckValue<IkReal> x7775 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7774.value)))+(x7775.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7776=IKsin(j4);
IkReal x7777=IKcos(j4);
IkReal x7778=(gconst140*r00);
IkReal x7779=(sj1*sj2);
IkReal x7780=(gconst139*r11);
IkReal x7781=(gconst139*r01);
IkReal x7782=(gconst139*r21);
IkReal x7783=((1.0)*x7777);
IkReal x7784=((1.0)*x7776);
IkReal x7785=((1.0)*cj1*cj2);
IkReal x7786=(gconst140*x7777);
evalcond[0]=((((-1.0)*gconst140*r20*x7784))+((x7776*x7782))+(((-1.0)*r22*x7783)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x7784))+((x7776*x7780))+(((-1.0)*r12*x7783)));
evalcond[2]=((((-1.0)*sj0))+((x7776*x7781))+(((-1.0)*r02*x7783))+(((-1.0)*x7778*x7784)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7782*x7783))+((cj1*sj2))+(((-1.0)*r22*x7784))+((r20*x7786)));
evalcond[4]=(((x7777*x7778))+((cj0*x7779))+(((-1.0)*r02*x7784))+(((-1.0)*cj0*x7785))+(((-1.0)*x7781*x7783)));
evalcond[5]=(((sj0*x7779))+((r10*x7786))+(((-1.0)*sj0*x7785))+(((-1.0)*r12*x7784))+(((-1.0)*x7780*x7783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7787=((-1.0)*r11);
IkReal x7789 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7789)==0){
continue;
}
IkReal x7788=pow(x7789,-0.5);
CheckValue<IkReal> x7790 = IKatan2WithCheck(IkReal(x7787),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7790.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7790.value))));
IkReal gconst142=(x7787*x7788);
IkReal gconst143=((1.0)*r10*x7788);
CheckValue<IkReal> x7791 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7791.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7791.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7792=((-1.0)*r11);
CheckValue<IkReal> x7795 = IKatan2WithCheck(IkReal(x7792),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7795.valid){
continue;
}
IkReal x7793=((1.0)*(x7795.value));
IkReal x7794=x7788;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7793)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7793)));
IkReal gconst142=(x7792*x7794);
IkReal gconst143=((1.0)*r10*x7794);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7796=((-1.0)*r11);
CheckValue<IkReal> x7799 = IKatan2WithCheck(IkReal(x7796),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7799.valid){
continue;
}
IkReal x7797=((1.0)*(x7799.value));
IkReal x7798=x7788;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7797)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7797)));
IkReal gconst142=(x7796*x7798);
IkReal gconst143=((1.0)*r10*x7798);
IkReal x7800=r12*r12;
IkReal x7801=((1.0)*sj0);
IkReal x7802=(cj0*r02);
IkReal x7803=x7788;
j4eval[0]=((IKabs(((((-1.0)*r12*x7801))+(((-1.0)*x7802)))))+(IKabs((((r12*x7802*x7803))+(((-1.0)*x7801*x7803))+((sj0*x7800*x7803))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7804=((-1.0)*r11);
CheckValue<IkReal> x7807 = IKatan2WithCheck(IkReal(x7804),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7807.valid){
continue;
}
IkReal x7805=((1.0)*(x7807.value));
IkReal x7806=x7788;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7805)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7805)));
IkReal gconst142=(x7804*x7806);
IkReal gconst143=((1.0)*r10*x7806);
IkReal x7808=r12*r12;
IkReal x7809=(cj1*r22*sj2);
IkReal x7810=(cj2*r22*sj1);
CheckValue<IkReal> x7814=IKPowWithIntegerCheck(((-1.0)+x7808),-1);
if(!x7814.valid){
continue;
}
IkReal x7811=x7814.value;
if((((1.0)+(((-1.0)*x7808)))) < -0.00001)
continue;
IkReal x7812=IKsqrt(((1.0)+(((-1.0)*x7808))));
IkReal x7813=((1.0)*r12*x7811*x7812);
j4eval[0]=((IKabs((x7809+x7810)))+(IKabs(((((-1.0)*x7810*x7813))+(((-1.0)*x7809*x7813))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7815=(gconst142*r21);
IkReal x7816=(cj1*sj2);
IkReal x7817=(cj2*sj1);
IkReal x7818=(gconst143*r20);
CheckValue<IkReal> x7819 = IKatan2WithCheck(IkReal((((r22*x7816))+((r22*x7817)))),IkReal((((x7815*x7816))+((x7815*x7817))+(((-1.0)*x7816*x7818))+(((-1.0)*x7817*x7818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7819.valid){
continue;
}
CheckValue<IkReal> x7820=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7815*x7818))+(r22*r22)+(x7818*x7818)+(x7815*x7815))),-1);
if(!x7820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7819.value)+(((1.5707963267949)*(x7820.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7821=IKsin(j4);
IkReal x7822=IKcos(j4);
IkReal x7823=(sj1*sj2);
IkReal x7824=(gconst143*r20);
IkReal x7825=((1.0)*x7822);
IkReal x7826=((1.0)*cj1*cj2);
IkReal x7827=((1.0)*x7821);
IkReal x7828=(gconst142*x7821);
IkReal x7829=(gconst143*x7822);
evalcond[0]=((((-1.0)*x7824*x7827))+((r21*x7828))+(((-1.0)*r22*x7825)));
evalcond[1]=(cj0+((r11*x7828))+(((-1.0)*r12*x7825))+(((-1.0)*gconst143*r10*x7827)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7825))+((r01*x7828))+(((-1.0)*gconst143*r00*x7827)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7825))+(((-1.0)*r22*x7827))+((x7822*x7824)));
evalcond[4]=((((-1.0)*gconst142*r01*x7825))+(((-1.0)*r02*x7827))+((r00*x7829))+((cj0*x7823))+(((-1.0)*cj0*x7826)));
evalcond[5]=(((r10*x7829))+(((-1.0)*gconst142*r11*x7825))+((sj0*x7823))+(((-1.0)*sj0*x7826))+(((-1.0)*r12*x7827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7830=((1.0)*sj0);
IkReal x7831=((1.0)*gconst142);
CheckValue<IkReal> x7832=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7831))+(((-1.0)*gconst143*r21)))),-1);
if(!x7832.valid){
continue;
}
CheckValue<IkReal> x7833 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7830)))),IkReal(((((-1.0)*cj0*r01*x7831))+((cj0*gconst143*r00))+((gconst143*r10*sj0))+(((-1.0)*gconst142*r11*x7830)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7832.value)))+(x7833.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7834=IKsin(j4);
IkReal x7835=IKcos(j4);
IkReal x7836=(sj1*sj2);
IkReal x7837=(gconst143*r20);
IkReal x7838=((1.0)*x7835);
IkReal x7839=((1.0)*cj1*cj2);
IkReal x7840=((1.0)*x7834);
IkReal x7841=(gconst142*x7834);
IkReal x7842=(gconst143*x7835);
evalcond[0]=((((-1.0)*x7837*x7840))+((r21*x7841))+(((-1.0)*r22*x7838)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x7840))+(((-1.0)*r12*x7838))+((r11*x7841)));
evalcond[2]=((((-1.0)*gconst143*r00*x7840))+(((-1.0)*sj0))+(((-1.0)*r02*x7838))+((r01*x7841)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7840))+((cj1*sj2))+((x7835*x7837))+(((-1.0)*gconst142*r21*x7838)));
evalcond[4]=((((-1.0)*cj0*x7839))+(((-1.0)*gconst142*r01*x7838))+((cj0*x7836))+((r00*x7842))+(((-1.0)*r02*x7840)));
evalcond[5]=(((r10*x7842))+(((-1.0)*r12*x7840))+(((-1.0)*sj0*x7839))+((sj0*x7836))+(((-1.0)*gconst142*r11*x7838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7843=((1.0)*gconst143);
CheckValue<IkReal> x7844=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x7843)))),-1);
if(!x7844.valid){
continue;
}
CheckValue<IkReal> x7845 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7843))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7844.value)))+(x7845.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7846=IKsin(j4);
IkReal x7847=IKcos(j4);
IkReal x7848=(sj1*sj2);
IkReal x7849=(gconst143*r20);
IkReal x7850=((1.0)*x7847);
IkReal x7851=((1.0)*cj1*cj2);
IkReal x7852=((1.0)*x7846);
IkReal x7853=(gconst142*x7846);
IkReal x7854=(gconst143*x7847);
evalcond[0]=((((-1.0)*x7849*x7852))+((r21*x7853))+(((-1.0)*r22*x7850)));
evalcond[1]=(((r11*x7853))+cj0+(((-1.0)*gconst143*r10*x7852))+(((-1.0)*r12*x7850)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7853))+(((-1.0)*r02*x7850))+(((-1.0)*gconst143*r00*x7852)));
evalcond[3]=(((cj2*sj1))+((x7847*x7849))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7850))+(((-1.0)*r22*x7852)));
evalcond[4]=((((-1.0)*cj0*x7851))+((cj0*x7848))+((r00*x7854))+(((-1.0)*r02*x7852))+(((-1.0)*gconst142*r01*x7850)));
evalcond[5]=((((-1.0)*sj0*x7851))+(((-1.0)*gconst142*r11*x7850))+((r10*x7854))+(((-1.0)*r12*x7852))+((sj0*x7848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7855=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7855;
j4eval[1]=IKsign(x7855);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7856=((1.0)*cj5);
IkReal x7857=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7856)));
j4eval[0]=x7857;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x7856)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7857);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7858=cj5*cj5;
IkReal x7859=r11*r11;
IkReal x7860=(r11*sj5);
IkReal x7861=(cj5*r10);
IkReal x7862=((((-2.0)*x7860*x7861))+(r12*r12)+(((-1.0)*x7858*x7859))+x7859+((x7858*(r10*r10))));
j4eval[0]=x7862;
j4eval[1]=IKsign(x7862);
j4eval[2]=((IKabs(r12))+(IKabs((x7861+(((-1.0)*x7860))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7863=cj5*cj5;
IkReal x7864=r11*r11;
IkReal x7865=(cj5*r10);
IkReal x7866=(r11*sj5);
CheckValue<IkReal> x7867=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x7865*x7866))+x7864+(((-1.0)*x7863*x7864))+((x7863*(r10*r10))))),-1);
if(!x7867.valid){
continue;
}
CheckValue<IkReal> x7868 = IKatan2WithCheck(IkReal((x7865+(((-1.0)*x7866)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7867.value)))+(x7868.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7869=IKsin(j4);
IkReal x7870=IKcos(j4);
IkReal x7871=(cj5*r10);
IkReal x7872=(r01*sj5);
IkReal x7873=(cj5*r00);
IkReal x7874=(cj5*r20);
IkReal x7875=((1.0)*x7870);
IkReal x7876=((1.0)*x7869);
IkReal x7877=(sj5*x7869);
evalcond[0]=((((-1.0)*r22*x7875))+(((-1.0)*x7874*x7876))+((r21*x7877)));
evalcond[1]=((((-1.0)*x7873*x7876))+((x7869*x7872))+(((-1.0)*r02*x7875)));
evalcond[2]=((((-1.0)*r11*sj5*x7875))+(((-1.0)*r12*x7876))+((x7870*x7871)));
evalcond[3]=((1.0)+((r11*x7877))+(((-1.0)*x7871*x7876))+(((-1.0)*r12*x7875)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7876))+((cj1*sj2))+(((-1.0)*r21*sj5*x7875))+((x7870*x7874)));
evalcond[5]=((((-1.0)*x7872*x7875))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7876))+((x7870*x7873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7878=((1.0)*cj5);
CheckValue<IkReal> x7879=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7878))+(((-1.0)*r00*sj5)))),-1);
if(!x7879.valid){
continue;
}
CheckValue<IkReal> x7880 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7878)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7879.value)))+(x7880.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7881=IKsin(j4);
IkReal x7882=IKcos(j4);
IkReal x7883=(cj5*r10);
IkReal x7884=(r01*sj5);
IkReal x7885=(cj5*r00);
IkReal x7886=(cj5*r20);
IkReal x7887=((1.0)*x7882);
IkReal x7888=((1.0)*x7881);
IkReal x7889=(sj5*x7881);
evalcond[0]=((((-1.0)*r22*x7887))+((r21*x7889))+(((-1.0)*x7886*x7888)));
evalcond[1]=((((-1.0)*r02*x7887))+((x7881*x7884))+(((-1.0)*x7885*x7888)));
evalcond[2]=(((x7882*x7883))+(((-1.0)*r11*sj5*x7887))+(((-1.0)*r12*x7888)));
evalcond[3]=((1.0)+((r11*x7889))+(((-1.0)*r12*x7887))+(((-1.0)*x7883*x7888)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7888))+((cj1*sj2))+((x7882*x7886))+(((-1.0)*r21*sj5*x7887)));
evalcond[5]=((((-1.0)*r02*x7888))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7884*x7887))+((x7882*x7885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7890=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7890.valid){
continue;
}
CheckValue<IkReal> x7891 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7890.value)))+(x7891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7892=IKsin(j4);
IkReal x7893=IKcos(j4);
IkReal x7894=(cj5*r10);
IkReal x7895=(r01*sj5);
IkReal x7896=(cj5*r00);
IkReal x7897=(cj5*r20);
IkReal x7898=((1.0)*x7893);
IkReal x7899=((1.0)*x7892);
IkReal x7900=(sj5*x7892);
evalcond[0]=((((-1.0)*x7897*x7899))+((r21*x7900))+(((-1.0)*r22*x7898)));
evalcond[1]=(((x7892*x7895))+(((-1.0)*x7896*x7899))+(((-1.0)*r02*x7898)));
evalcond[2]=((((-1.0)*r11*sj5*x7898))+((x7893*x7894))+(((-1.0)*r12*x7899)));
evalcond[3]=((1.0)+(((-1.0)*x7894*x7899))+(((-1.0)*r12*x7898))+((r11*x7900)));
evalcond[4]=(((cj2*sj1))+((x7893*x7897))+((cj1*sj2))+(((-1.0)*r21*sj5*x7898))+(((-1.0)*r22*x7899)));
evalcond[5]=((((-1.0)*x7895*x7898))+((x7893*x7896))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7901=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7901;
j4eval[1]=IKsign(x7901);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7902=((1.0)*cj5);
IkReal x7903=((((-1.0)*r21*x7902))+(((-1.0)*r20*sj5)));
j4eval[0]=x7903;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7902))))));
j4eval[2]=IKsign(x7903);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7904=cj5*cj5;
IkReal x7905=r11*r11;
IkReal x7906=(cj5*r10);
IkReal x7907=(r11*sj5);
IkReal x7908=((((-1.0)*x7905))+(((2.0)*x7906*x7907))+(((-1.0)*(r12*r12)))+(((-1.0)*x7904*(r10*r10)))+((x7904*x7905)));
j4eval[0]=x7908;
j4eval[1]=((IKabs(((((-1.0)*x7907))+x7906)))+(IKabs(r12)));
j4eval[2]=IKsign(x7908);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7909=cj5*cj5;
IkReal x7910=r11*r11;
IkReal x7911=(cj5*r10);
IkReal x7912=(r11*sj5);
CheckValue<IkReal> x7913=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7909*(r10*r10)))+(((-1.0)*x7910))+(((-1.0)*(r12*r12)))+(((2.0)*x7911*x7912))+((x7909*x7910)))),-1);
if(!x7913.valid){
continue;
}
CheckValue<IkReal> x7914 = IKatan2WithCheck(IkReal(((((-1.0)*x7912))+x7911)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7913.value)))+(x7914.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7915=IKsin(j4);
IkReal x7916=IKcos(j4);
IkReal x7917=(cj5*r10);
IkReal x7918=(r01*sj5);
IkReal x7919=(cj5*r00);
IkReal x7920=(cj5*r20);
IkReal x7921=((1.0)*x7916);
IkReal x7922=((1.0)*x7915);
IkReal x7923=(sj5*x7915);
evalcond[0]=((((-1.0)*x7920*x7922))+(((-1.0)*r22*x7921))+((r21*x7923)));
evalcond[1]=((((-1.0)*r02*x7921))+((x7915*x7918))+(((-1.0)*x7919*x7922)));
evalcond[2]=((((-1.0)*r11*sj5*x7921))+(((-1.0)*r12*x7922))+((x7916*x7917)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7921))+((r11*x7923))+(((-1.0)*x7917*x7922)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7922))+(((-1.0)*r21*sj5*x7921))+((x7916*x7920)));
evalcond[5]=((((-1.0)*r02*x7922))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x7916*x7919))+(((-1.0)*x7918*x7921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7924=((1.0)*cj5);
CheckValue<IkReal> x7925=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7924))+(((-1.0)*r20*sj5)))),-1);
if(!x7925.valid){
continue;
}
CheckValue<IkReal> x7926 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7924)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7925.value)))+(x7926.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7927=IKsin(j4);
IkReal x7928=IKcos(j4);
IkReal x7929=(cj5*r10);
IkReal x7930=(r01*sj5);
IkReal x7931=(cj5*r00);
IkReal x7932=(cj5*r20);
IkReal x7933=((1.0)*x7928);
IkReal x7934=((1.0)*x7927);
IkReal x7935=(sj5*x7927);
evalcond[0]=(((r21*x7935))+(((-1.0)*x7932*x7934))+(((-1.0)*r22*x7933)));
evalcond[1]=((((-1.0)*r02*x7933))+((x7927*x7930))+(((-1.0)*x7931*x7934)));
evalcond[2]=((((-1.0)*r11*sj5*x7933))+(((-1.0)*r12*x7934))+((x7928*x7929)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7933))+((r11*x7935))+(((-1.0)*x7929*x7934)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7934))+(((-1.0)*r21*sj5*x7933))+((cj1*sj2))+((x7928*x7932)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x7934))+((x7928*x7931))+((cj1*cj2))+(((-1.0)*x7930*x7933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7936 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7936.valid){
continue;
}
CheckValue<IkReal> x7937=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7936.value)+(((1.5707963267949)*(x7937.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7938=IKsin(j4);
IkReal x7939=IKcos(j4);
IkReal x7940=(cj5*r10);
IkReal x7941=(r01*sj5);
IkReal x7942=(cj5*r00);
IkReal x7943=(cj5*r20);
IkReal x7944=((1.0)*x7939);
IkReal x7945=((1.0)*x7938);
IkReal x7946=(sj5*x7938);
evalcond[0]=(((r21*x7946))+(((-1.0)*r22*x7944))+(((-1.0)*x7943*x7945)));
evalcond[1]=((((-1.0)*r02*x7944))+((x7938*x7941))+(((-1.0)*x7942*x7945)));
evalcond[2]=((((-1.0)*r11*sj5*x7944))+(((-1.0)*r12*x7945))+((x7939*x7940)));
evalcond[3]=((-1.0)+(((-1.0)*x7940*x7945))+((r11*x7946))+(((-1.0)*r12*x7944)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7945))+(((-1.0)*r21*sj5*x7944))+((cj1*sj2))+((x7939*x7943)));
evalcond[5]=((((-1.0)*x7941*x7944))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7945))+((x7939*x7942))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7947=((-1.0)*r00);
IkReal x7949 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7949)==0){
continue;
}
IkReal x7948=pow(x7949,-0.5);
CheckValue<IkReal> x7950 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7947),IKFAST_ATAN2_MAGTHRESH);
if(!x7950.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7950.value));
IkReal gconst145=(r01*x7948);
IkReal gconst146=(x7947*x7948);
CheckValue<IkReal> x7951 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7951.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7951.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7952=((-1.0)*r00);
IkReal x7953=x7948;
CheckValue<IkReal> x7955 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7952),IKFAST_ATAN2_MAGTHRESH);
if(!x7955.valid){
continue;
}
IkReal x7954=((-1.0)*(x7955.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7954;
IkReal gconst144=x7954;
IkReal gconst145=(r01*x7953);
IkReal gconst146=(x7952*x7953);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7956=((1.0)*sj0);
IkReal x7957=((1.0)*gconst145);
CheckValue<IkReal> x7958 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7956)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*gconst145*r11*x7956))+(((-1.0)*cj0*r01*x7957))+((gconst146*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7958.valid){
continue;
}
CheckValue<IkReal> x7959=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x7957)))),-1);
if(!x7959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7958.value)+(((1.5707963267949)*(x7959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7960=IKsin(j4);
IkReal x7961=IKcos(j4);
IkReal x7962=(gconst146*r10);
IkReal x7963=(sj1*sj2);
IkReal x7964=(gconst146*r20);
IkReal x7965=(gconst146*r00);
IkReal x7966=((1.0)*x7961);
IkReal x7967=((1.0)*x7960);
IkReal x7968=(gconst145*x7960);
IkReal x7969=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x7968))+(((-1.0)*r22*x7966))+(((-1.0)*x7964*x7967)));
evalcond[1]=(((r11*x7968))+cj0+(((-1.0)*r12*x7966))+(((-1.0)*x7962*x7967)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7968))+(((-1.0)*x7965*x7967))+(((-1.0)*r02*x7966)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7967))+((cj1*sj2))+(((-1.0)*gconst145*r21*x7966))+((x7961*x7964)));
evalcond[4]=((((-1.0)*gconst145*r01*x7966))+((x7961*x7965))+((cj0*x7963))+(((-1.0)*cj0*x7969))+(((-1.0)*r02*x7967)));
evalcond[5]=((((-1.0)*sj0*x7969))+((x7961*x7962))+(((-1.0)*r12*x7967))+((sj0*x7963))+(((-1.0)*gconst145*r11*x7966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7970=((1.0)*gconst146);
CheckValue<IkReal> x7971 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7970))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7971.valid){
continue;
}
CheckValue<IkReal> x7972=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r10))+(((-1.0)*r11*x7970)))),-1);
if(!x7972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7971.value)+(((1.5707963267949)*(x7972.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7973=IKsin(j4);
IkReal x7974=IKcos(j4);
IkReal x7975=(gconst146*r10);
IkReal x7976=(sj1*sj2);
IkReal x7977=(gconst146*r20);
IkReal x7978=(gconst146*r00);
IkReal x7979=((1.0)*x7974);
IkReal x7980=((1.0)*x7973);
IkReal x7981=(gconst145*x7973);
IkReal x7982=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7979))+((r21*x7981))+(((-1.0)*x7977*x7980)));
evalcond[1]=(cj0+(((-1.0)*r12*x7979))+(((-1.0)*x7975*x7980))+((r11*x7981)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7978*x7980))+((r01*x7981))+(((-1.0)*r02*x7979)));
evalcond[3]=((((-1.0)*r22*x7980))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst145*r21*x7979))+((x7974*x7977)));
evalcond[4]=((((-1.0)*gconst145*r01*x7979))+((cj0*x7976))+((x7974*x7978))+(((-1.0)*cj0*x7982))+(((-1.0)*r02*x7980)));
evalcond[5]=((((-1.0)*r12*x7980))+(((-1.0)*sj0*x7982))+((x7974*x7975))+((sj0*x7976))+(((-1.0)*gconst145*r11*x7979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7983=((-1.0)*r01);
IkReal x7985 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7985)==0){
continue;
}
IkReal x7984=pow(x7985,-0.5);
CheckValue<IkReal> x7986 = IKatan2WithCheck(IkReal(x7983),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7986.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7986.value))));
IkReal gconst148=(x7983*x7984);
IkReal gconst149=((1.0)*r00*x7984);
CheckValue<IkReal> x7987 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7987.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7987.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7988=((-1.0)*r01);
CheckValue<IkReal> x7991 = IKatan2WithCheck(IkReal(x7988),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7991.valid){
continue;
}
IkReal x7989=((1.0)*(x7991.value));
IkReal x7990=x7984;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7989)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7989)));
IkReal gconst148=(x7988*x7990);
IkReal gconst149=((1.0)*r00*x7990);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7992=((-1.0)*r01);
CheckValue<IkReal> x7995 = IKatan2WithCheck(IkReal(x7992),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7995.valid){
continue;
}
IkReal x7993=((1.0)*(x7995.value));
IkReal x7994=x7984;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7993)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7993)));
IkReal gconst148=(x7992*x7994);
IkReal gconst149=((1.0)*r00*x7994);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7996=((-1.0)*r01);
CheckValue<IkReal> x7999 = IKatan2WithCheck(IkReal(x7996),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7999.valid){
continue;
}
IkReal x7997=((1.0)*(x7999.value));
IkReal x7998=x7984;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7997)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7997)));
IkReal gconst148=(x7996*x7998);
IkReal gconst149=((1.0)*r00*x7998);
IkReal x8000=r02*r02;
IkReal x8001=(r12*sj0);
IkReal x8002=((1.0)*cj0);
IkReal x8003=x7984;
j4eval[0]=((IKabs((((cj0*x8000*x8003))+(((-1.0)*x8002*x8003))+((r02*x8001*x8003)))))+(IKabs(((((-1.0)*x8001))+(((-1.0)*r02*x8002))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8004=((1.0)*sj0);
IkReal x8005=((1.0)*gconst148);
CheckValue<IkReal> x8006=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8005))+(((-1.0)*gconst149*r21)))),-1);
if(!x8006.valid){
continue;
}
CheckValue<IkReal> x8007 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8004))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8004))+(((-1.0)*cj0*r01*x8005)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8006.value)))+(x8007.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8008=IKsin(j4);
IkReal x8009=IKcos(j4);
IkReal x8010=(gconst148*r11);
IkReal x8011=(sj1*sj2);
IkReal x8012=((1.0)*x8009);
IkReal x8013=(gconst149*x8009);
IkReal x8014=(gconst148*x8008);
IkReal x8015=((1.0)*cj1*cj2);
IkReal x8016=((1.0)*x8008);
evalcond[0]=((((-1.0)*r22*x8012))+(((-1.0)*gconst149*r20*x8016))+((r21*x8014)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8016))+((x8008*x8010))+(((-1.0)*r12*x8012)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8012))+((r01*x8014))+(((-1.0)*gconst149*r00*x8016)));
evalcond[3]=((((-1.0)*r22*x8016))+((cj2*sj1))+(((-1.0)*gconst148*r21*x8012))+((cj1*sj2))+((r20*x8013)));
evalcond[4]=((((-1.0)*r02*x8016))+((cj0*x8011))+((r00*x8013))+(((-1.0)*cj0*x8015))+(((-1.0)*gconst148*r01*x8012)));
evalcond[5]=((((-1.0)*x8010*x8012))+((sj0*x8011))+((r10*x8013))+(((-1.0)*sj0*x8015))+(((-1.0)*r12*x8016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8017=((1.0)*gconst149);
CheckValue<IkReal> x8018=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8017)))),-1);
if(!x8018.valid){
continue;
}
CheckValue<IkReal> x8019 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8017))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8018.value)))+(x8019.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8020=IKsin(j4);
IkReal x8021=IKcos(j4);
IkReal x8022=(gconst148*r11);
IkReal x8023=(sj1*sj2);
IkReal x8024=((1.0)*x8021);
IkReal x8025=(gconst149*x8021);
IkReal x8026=(gconst148*x8020);
IkReal x8027=((1.0)*cj1*cj2);
IkReal x8028=((1.0)*x8020);
evalcond[0]=((((-1.0)*gconst149*r20*x8028))+((r21*x8026))+(((-1.0)*r22*x8024)));
evalcond[1]=((((-1.0)*r12*x8024))+cj0+(((-1.0)*gconst149*r10*x8028))+((x8020*x8022)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8024))+(((-1.0)*gconst149*r00*x8028))+((r01*x8026)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8024))+((cj1*sj2))+((r20*x8025))+(((-1.0)*r22*x8028)));
evalcond[4]=((((-1.0)*gconst148*r01*x8024))+(((-1.0)*r02*x8028))+((cj0*x8023))+((r00*x8025))+(((-1.0)*cj0*x8027)));
evalcond[5]=(((r10*x8025))+(((-1.0)*r12*x8028))+(((-1.0)*sj0*x8027))+((sj0*x8023))+(((-1.0)*x8022*x8024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8029=((1.0)*gconst149);
CheckValue<IkReal> x8030=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8029)))),-1);
if(!x8030.valid){
continue;
}
CheckValue<IkReal> x8031 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8029)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8030.value)))+(x8031.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8032=IKsin(j4);
IkReal x8033=IKcos(j4);
IkReal x8034=(gconst148*r11);
IkReal x8035=(sj1*sj2);
IkReal x8036=((1.0)*x8033);
IkReal x8037=(gconst149*x8033);
IkReal x8038=(gconst148*x8032);
IkReal x8039=((1.0)*cj1*cj2);
IkReal x8040=((1.0)*x8032);
evalcond[0]=(((r21*x8038))+(((-1.0)*gconst149*r20*x8040))+(((-1.0)*r22*x8036)));
evalcond[1]=(cj0+(((-1.0)*r12*x8036))+(((-1.0)*gconst149*r10*x8040))+((x8032*x8034)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8036))+(((-1.0)*gconst149*r00*x8040))+((r01*x8038)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8036))+((cj1*sj2))+((r20*x8037))+(((-1.0)*r22*x8040)));
evalcond[4]=((((-1.0)*gconst148*r01*x8036))+((cj0*x8035))+(((-1.0)*r02*x8040))+(((-1.0)*cj0*x8039))+((r00*x8037)));
evalcond[5]=((((-1.0)*sj0*x8039))+((r10*x8037))+((sj0*x8035))+(((-1.0)*x8034*x8036))+(((-1.0)*r12*x8040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8041=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8041;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8041);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8042=((1.0)*cj5);
IkReal x8043=((((-1.0)*r11*x8042))+(((-1.0)*r10*sj5)));
j4eval[0]=x8043;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8042))))));
j4eval[2]=IKsign(x8043);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8044=cj5*cj5;
IkReal x8045=r01*r01;
IkReal x8046=(r01*sj5);
IkReal x8047=(cj5*r00);
IkReal x8048=((((-1.0)*x8045))+(((-1.0)*(r02*r02)))+((x8044*x8045))+(((-1.0)*x8044*(r00*r00)))+(((2.0)*x8046*x8047)));
j4eval[0]=x8048;
j4eval[1]=IKsign(x8048);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8046))+x8047))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8049=cj5*cj5;
IkReal x8050=r01*r01;
IkReal x8051=(r01*sj5);
IkReal x8052=(cj5*r00);
CheckValue<IkReal> x8053 = IKatan2WithCheck(IkReal(((((-1.0)*x8051))+x8052)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8053.valid){
continue;
}
CheckValue<IkReal> x8054=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x8050))+(((2.0)*x8051*x8052))+(((-1.0)*x8049*(r00*r00)))+((x8049*x8050)))),-1);
if(!x8054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8053.value)+(((1.5707963267949)*(x8054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8055=IKsin(j4);
IkReal x8056=IKcos(j4);
IkReal x8057=(cj5*r10);
IkReal x8058=(r01*sj5);
IkReal x8059=(cj5*r00);
IkReal x8060=(cj5*r20);
IkReal x8061=((1.0)*x8056);
IkReal x8062=((1.0)*x8055);
IkReal x8063=(sj5*x8055);
evalcond[0]=(((r21*x8063))+(((-1.0)*x8060*x8062))+(((-1.0)*r22*x8061)));
evalcond[1]=((((-1.0)*x8057*x8062))+(((-1.0)*r12*x8061))+((r11*x8063)));
evalcond[2]=((((-1.0)*x8058*x8061))+((x8056*x8059))+(((-1.0)*r02*x8062)));
evalcond[3]=((-1.0)+(((-1.0)*x8059*x8062))+((x8055*x8058))+(((-1.0)*r02*x8061)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8061))+(((-1.0)*r22*x8062))+((x8056*x8060)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8062))+(((-1.0)*r11*sj5*x8061))+((x8056*x8057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8064=((1.0)*cj5);
CheckValue<IkReal> x8065 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8064)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8065.valid){
continue;
}
CheckValue<IkReal> x8066=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8064)))),-1);
if(!x8066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8065.value)+(((1.5707963267949)*(x8066.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8067=IKsin(j4);
IkReal x8068=IKcos(j4);
IkReal x8069=(cj5*r10);
IkReal x8070=(r01*sj5);
IkReal x8071=(cj5*r00);
IkReal x8072=(cj5*r20);
IkReal x8073=((1.0)*x8068);
IkReal x8074=((1.0)*x8067);
IkReal x8075=(sj5*x8067);
evalcond[0]=((((-1.0)*x8072*x8074))+((r21*x8075))+(((-1.0)*r22*x8073)));
evalcond[1]=(((r11*x8075))+(((-1.0)*x8069*x8074))+(((-1.0)*r12*x8073)));
evalcond[2]=(((x8068*x8071))+(((-1.0)*r02*x8074))+(((-1.0)*x8070*x8073)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8073))+((x8067*x8070))+(((-1.0)*x8071*x8074)));
evalcond[4]=(((cj2*sj1))+((x8068*x8072))+((cj1*sj2))+(((-1.0)*r21*sj5*x8073))+(((-1.0)*r22*x8074)));
evalcond[5]=((((-1.0)*r11*sj5*x8073))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8068*x8069))+(((-1.0)*r12*x8074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8076=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8076.valid){
continue;
}
CheckValue<IkReal> x8077 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8076.value)))+(x8077.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8078=IKsin(j4);
IkReal x8079=IKcos(j4);
IkReal x8080=(cj5*r10);
IkReal x8081=(r01*sj5);
IkReal x8082=(cj5*r00);
IkReal x8083=(cj5*r20);
IkReal x8084=((1.0)*x8079);
IkReal x8085=((1.0)*x8078);
IkReal x8086=(sj5*x8078);
evalcond[0]=((((-1.0)*x8083*x8085))+((r21*x8086))+(((-1.0)*r22*x8084)));
evalcond[1]=((((-1.0)*x8080*x8085))+((r11*x8086))+(((-1.0)*r12*x8084)));
evalcond[2]=((((-1.0)*r02*x8085))+((x8079*x8082))+(((-1.0)*x8081*x8084)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8084))+((x8078*x8081))+(((-1.0)*x8082*x8085)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8084))+((cj1*sj2))+((x8079*x8083))+(((-1.0)*r22*x8085)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8084))+((x8079*x8080))+(((-1.0)*r12*x8085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8087=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8087;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8087);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8088=((1.0)*cj5);
IkReal x8089=((((-1.0)*r21*x8088))+(((-1.0)*r20*sj5)));
j4eval[0]=x8089;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8088))))));
j4eval[2]=IKsign(x8089);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8090=cj5*cj5;
IkReal x8091=r01*r01;
IkReal x8092=(cj5*r00);
IkReal x8093=(r01*sj5);
IkReal x8094=((((-2.0)*x8092*x8093))+(((-1.0)*x8090*x8091))+((x8090*(r00*r00)))+x8091+(r02*r02));
j4eval[0]=x8094;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8093))+x8092))));
j4eval[2]=IKsign(x8094);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8095=cj5*cj5;
IkReal x8096=r01*r01;
IkReal x8097=(r01*sj5);
IkReal x8098=(cj5*r00);
CheckValue<IkReal> x8099=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8095*x8096))+((x8095*(r00*r00)))+(((-2.0)*x8097*x8098))+x8096+(r02*r02))),-1);
if(!x8099.valid){
continue;
}
CheckValue<IkReal> x8100 = IKatan2WithCheck(IkReal(((((-1.0)*x8097))+x8098)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8099.value)))+(x8100.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8101=IKsin(j4);
IkReal x8102=IKcos(j4);
IkReal x8103=(cj5*r10);
IkReal x8104=(r01*sj5);
IkReal x8105=(cj5*r00);
IkReal x8106=(cj5*r20);
IkReal x8107=((1.0)*x8102);
IkReal x8108=((1.0)*x8101);
IkReal x8109=(sj5*x8101);
evalcond[0]=((((-1.0)*x8106*x8108))+(((-1.0)*r22*x8107))+((r21*x8109)));
evalcond[1]=(((r11*x8109))+(((-1.0)*x8103*x8108))+(((-1.0)*r12*x8107)));
evalcond[2]=(((x8102*x8105))+(((-1.0)*x8104*x8107))+(((-1.0)*r02*x8108)));
evalcond[3]=((1.0)+(((-1.0)*x8105*x8108))+((x8101*x8104))+(((-1.0)*r02*x8107)));
evalcond[4]=((((-1.0)*r21*sj5*x8107))+((cj2*sj1))+((x8102*x8106))+((cj1*sj2))+(((-1.0)*r22*x8108)));
evalcond[5]=(((x8102*x8103))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8107))+(((-1.0)*r12*x8108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8110=((1.0)*cj5);
CheckValue<IkReal> x8111 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8110)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8111.valid){
continue;
}
CheckValue<IkReal> x8112=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8110))+(((-1.0)*r20*sj5)))),-1);
if(!x8112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8111.value)+(((1.5707963267949)*(x8112.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8113=IKsin(j4);
IkReal x8114=IKcos(j4);
IkReal x8115=(cj5*r10);
IkReal x8116=(r01*sj5);
IkReal x8117=(cj5*r00);
IkReal x8118=(cj5*r20);
IkReal x8119=((1.0)*x8114);
IkReal x8120=((1.0)*x8113);
IkReal x8121=(sj5*x8113);
evalcond[0]=(((r21*x8121))+(((-1.0)*r22*x8119))+(((-1.0)*x8118*x8120)));
evalcond[1]=((((-1.0)*x8115*x8120))+(((-1.0)*r12*x8119))+((r11*x8121)));
evalcond[2]=(((x8114*x8117))+(((-1.0)*x8116*x8119))+(((-1.0)*r02*x8120)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8119))+(((-1.0)*x8117*x8120))+((x8113*x8116)));
evalcond[4]=(((cj2*sj1))+((x8114*x8118))+(((-1.0)*r21*sj5*x8119))+((cj1*sj2))+(((-1.0)*r22*x8120)));
evalcond[5]=((((-1.0)*r11*sj5*x8119))+((x8114*x8115))+(((-1.0)*r12*x8120))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8122 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8122.valid){
continue;
}
CheckValue<IkReal> x8123=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8122.value)+(((1.5707963267949)*(x8123.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8124=IKsin(j4);
IkReal x8125=IKcos(j4);
IkReal x8126=(cj5*r10);
IkReal x8127=(r01*sj5);
IkReal x8128=(cj5*r00);
IkReal x8129=(cj5*r20);
IkReal x8130=((1.0)*x8125);
IkReal x8131=((1.0)*x8124);
IkReal x8132=(sj5*x8124);
evalcond[0]=((((-1.0)*r22*x8130))+((r21*x8132))+(((-1.0)*x8129*x8131)));
evalcond[1]=(((r11*x8132))+(((-1.0)*r12*x8130))+(((-1.0)*x8126*x8131)));
evalcond[2]=((((-1.0)*r02*x8131))+((x8125*x8128))+(((-1.0)*x8127*x8130)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8130))+((x8124*x8127))+(((-1.0)*x8128*x8131)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8131))+(((-1.0)*r21*sj5*x8130))+((cj1*sj2))+((x8125*x8129)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x8131))+((x8125*x8126))+(((-1.0)*r11*sj5*x8130))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8133=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8133);
rxp1_1=(px*r21);
rxp1_2=(r11*x8133);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8134=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8134);
rxp1_1=(px*r21);
rxp1_2=(r11*x8134);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8135=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8135);
rxp1_1=(px*r21);
rxp1_2=(r11*x8135);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8138=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8138.valid){
continue;
}
IkReal x8136=x8138.value;
IkReal x8137=(sj0*x8136);
cj4array[0]=((((-1.0)*sj1*sj2*x8137))+((cj1*cj2*x8137)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8139=IKsin(j4);
IkReal x8140=IKcos(j4);
IkReal x8141=(r21*sj5);
IkReal x8142=(cj5*r20);
IkReal x8143=((1.0)*x8139);
IkReal x8144=((1.0)*x8140);
evalcond[0]=((-1.0)*r02*x8139);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8144)));
evalcond[2]=(((x8139*x8141))+(((-1.0)*x8142*x8143)));
evalcond[3]=(((r11*sj5*x8139))+(((-1.0)*cj5*r10*x8143)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8140*x8142))+(((-1.0)*x8141*x8144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8147=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8147.valid){
continue;
}
IkReal x8145=x8147.value;
IkReal x8146=((1.0)*x8145);
cj4array[0]=((((-1.0)*cj2*sj1*x8146))+(((-1.0)*cj1*sj2*x8146)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8148=IKsin(j4);
IkReal x8149=IKcos(j4);
IkReal x8150=(r11*sj5);
IkReal x8151=((1.0)*sj0);
IkReal x8152=((1.0)*x8149);
IkReal x8153=((1.0)*cj5*x8148);
evalcond[0]=((-1.0)*r02*x8148);
evalcond[1]=((((-1.0)*x8151))+(((-1.0)*r02*x8152)));
evalcond[2]=(((r21*sj5*x8148))+(((-1.0)*r20*x8153)));
evalcond[3]=((((-1.0)*r10*x8153))+((x8148*x8150)));
evalcond[4]=((((-1.0)*x8150*x8152))+((cj5*r10*x8149))+(((-1.0)*cj1*cj2*x8151))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8154=IKPowWithIntegerCheck(r02,-1);
if(!x8154.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8154.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8155=IKsin(j4);
IkReal x8156=IKcos(j4);
IkReal x8157=(cj5*x8156);
IkReal x8158=(sj5*x8155);
IkReal x8159=((1.0)*sj5*x8156);
IkReal x8160=((1.0)*cj5*x8155);
evalcond[0]=((-1.0)*r02*x8155);
evalcond[1]=((((-1.0)*r20*x8160))+((r21*x8158)));
evalcond[2]=((((-1.0)*r10*x8160))+((r11*x8158)));
evalcond[3]=(((cj2*sj1))+((r20*x8157))+((cj1*sj2))+(((-1.0)*r21*x8159)));
evalcond[4]=(((r10*x8157))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r11*x8159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8161=((1.0)*sj0);
IkReal x8162=((1.0)*cj0);
CheckValue<IkReal> x8163 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8162))+(((-1.0)*r12*x8161)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8162))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8163.valid){
continue;
}
CheckValue<IkReal> x8164=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8163.value)+(((1.5707963267949)*(x8164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8165=IKsin(j4);
IkReal x8166=IKcos(j4);
IkReal x8167=(cj5*r10);
IkReal x8168=(sj1*sj2);
IkReal x8169=(r01*sj5);
IkReal x8170=(cj5*r00);
IkReal x8171=(cj5*r20);
IkReal x8172=((1.0)*x8166);
IkReal x8173=((1.0)*cj1*cj2);
IkReal x8174=((1.0)*x8165);
IkReal x8175=(sj5*x8165);
evalcond[0]=((((-1.0)*x8171*x8174))+(((-1.0)*r22*x8172))+((r21*x8175)));
evalcond[1]=((((-1.0)*r12*x8172))+cj0+((r11*x8175))+(((-1.0)*x8167*x8174)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8170*x8174))+(((-1.0)*r02*x8172))+((x8165*x8169)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8166*x8171))+(((-1.0)*r22*x8174))+(((-1.0)*r21*sj5*x8172)));
evalcond[4]=(((cj0*x8168))+(((-1.0)*x8169*x8172))+((x8166*x8170))+(((-1.0)*cj0*x8173))+(((-1.0)*r02*x8174)));
evalcond[5]=((((-1.0)*sj0*x8173))+(((-1.0)*r12*x8174))+((sj0*x8168))+(((-1.0)*r11*sj5*x8172))+((x8166*x8167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8176=((1.0)*cj5);
CheckValue<IkReal> x8177 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8176))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8177.valid){
continue;
}
CheckValue<IkReal> x8178=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8176))+(((-1.0)*r10*sj5)))),-1);
if(!x8178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8177.value)+(((1.5707963267949)*(x8178.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8179=IKsin(j4);
IkReal x8180=IKcos(j4);
IkReal x8181=(cj5*r10);
IkReal x8182=(sj1*sj2);
IkReal x8183=(r01*sj5);
IkReal x8184=(cj5*r00);
IkReal x8185=(cj5*r20);
IkReal x8186=((1.0)*x8180);
IkReal x8187=((1.0)*cj1*cj2);
IkReal x8188=((1.0)*x8179);
IkReal x8189=(sj5*x8179);
evalcond[0]=((((-1.0)*r22*x8186))+((r21*x8189))+(((-1.0)*x8185*x8188)));
evalcond[1]=(((r11*x8189))+cj0+(((-1.0)*r12*x8186))+(((-1.0)*x8181*x8188)));
evalcond[2]=((((-1.0)*r02*x8186))+(((-1.0)*sj0))+((x8179*x8183))+(((-1.0)*x8184*x8188)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8188))+((cj1*sj2))+(((-1.0)*r21*sj5*x8186))+((x8180*x8185)));
evalcond[4]=((((-1.0)*r02*x8188))+(((-1.0)*x8183*x8186))+(((-1.0)*cj0*x8187))+((cj0*x8182))+((x8180*x8184)));
evalcond[5]=(((sj0*x8182))+(((-1.0)*r12*x8188))+(((-1.0)*sj0*x8187))+(((-1.0)*r11*sj5*x8186))+((x8180*x8181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8190=((1.0)*cj5);
CheckValue<IkReal> x8191 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8190)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8191.valid){
continue;
}
CheckValue<IkReal> x8192=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8190))+(((-1.0)*r00*sj5)))),-1);
if(!x8192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8191.value)+(((1.5707963267949)*(x8192.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8193=IKsin(j4);
IkReal x8194=IKcos(j4);
IkReal x8195=(cj5*r10);
IkReal x8196=(sj1*sj2);
IkReal x8197=(r01*sj5);
IkReal x8198=(cj5*r00);
IkReal x8199=(cj5*r20);
IkReal x8200=((1.0)*x8194);
IkReal x8201=((1.0)*cj1*cj2);
IkReal x8202=((1.0)*x8193);
IkReal x8203=(sj5*x8193);
evalcond[0]=((((-1.0)*r22*x8200))+((r21*x8203))+(((-1.0)*x8199*x8202)));
evalcond[1]=(((r11*x8203))+cj0+(((-1.0)*x8195*x8202))+(((-1.0)*r12*x8200)));
evalcond[2]=((((-1.0)*x8198*x8202))+(((-1.0)*sj0))+(((-1.0)*r02*x8200))+((x8193*x8197)));
evalcond[3]=(((cj2*sj1))+((x8194*x8199))+((cj1*sj2))+(((-1.0)*r21*sj5*x8200))+(((-1.0)*r22*x8202)));
evalcond[4]=((((-1.0)*cj0*x8201))+((x8194*x8198))+(((-1.0)*r02*x8202))+(((-1.0)*x8197*x8200))+((cj0*x8196)));
evalcond[5]=(((x8194*x8195))+((sj0*x8196))+(((-1.0)*r12*x8202))+(((-1.0)*r11*sj5*x8200))+(((-1.0)*sj0*x8201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8204=cj5*cj5;
IkReal x8205=r21*r21;
IkReal x8206=(cj2*sj1);
IkReal x8207=(cj1*sj2);
IkReal x8208=(r21*sj5);
IkReal x8209=((1.0)*cj5*r20);
CheckValue<IkReal> x8210 = IKatan2WithCheck(IkReal((((r22*x8206))+((r22*x8207)))),IkReal((((x8206*x8208))+(((-1.0)*x8206*x8209))+(((-1.0)*x8207*x8209))+((x8207*x8208)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8210.valid){
continue;
}
CheckValue<IkReal> x8211=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*r20*x8208))+(r22*r22)+(((-1.0)*x8204*x8205))+((x8204*(r20*r20)))+x8205)),-1);
if(!x8211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8210.value)+(((1.5707963267949)*(x8211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8212=IKsin(j4);
IkReal x8213=IKcos(j4);
IkReal x8214=(r21*sj5);
IkReal x8215=(cj5*r20);
IkReal x8216=((1.0)*x8213);
IkReal x8217=((1.0)*x8212);
evalcond[0]=((((-1.0)*r22*x8216))+(((-1.0)*x8215*x8217))+((x8212*x8214)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8217))+(((-1.0)*x8214*x8216))+((x8213*x8215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8218=(cj5*sj4);
IkReal x8219=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8219))+(((-1.0)*r00*x8218)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x8219))+((r10*x8218))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8219))+(((-1.0)*r00*x8218))))+IKsqr(((((-1.0)*r11*x8219))+((r10*x8218))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8219))+(((-1.0)*r00*x8218))), ((((-1.0)*r11*x8219))+((r10*x8218))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8220=IKcos(j0);
IkReal x8221=IKsin(j0);
IkReal x8222=(cj4*cj5);
IkReal x8223=((0.1)*sj5);
IkReal x8224=((0.392)*sj1);
IkReal x8225=(cj5*r11);
IkReal x8226=((1.0)*cj1);
IkReal x8227=(r11*sj5);
IkReal x8228=((1.0)*sj5);
IkReal x8229=((1.0)*sj4);
IkReal x8230=((0.392)*cj1);
IkReal x8231=((1.0)*sj1);
IkReal x8232=(cj5*r01);
IkReal x8233=((0.425)*cj1);
IkReal x8234=((1.0)*cj4);
IkReal x8235=(sj2*x8221);
IkReal x8236=(sj2*x8220);
IkReal x8237=(cj2*x8220);
IkReal x8238=(cj2*x8221);
evalcond[0]=((((-1.0)*cj5*r10*x8229))+(((-1.0)*r12*x8234))+((sj4*x8227))+x8220);
evalcond[1]=((((-1.0)*r02*x8234))+(((-1.0)*x8221))+((r01*sj4*sj5))+(((-1.0)*cj5*r00*x8229)));
evalcond[2]=((((-1.0)*x8232))+(((-1.0)*x8226*x8236))+(((-1.0)*x8231*x8237))+(((-1.0)*r00*x8228)));
evalcond[3]=((((-1.0)*x8225))+(((-1.0)*x8226*x8235))+(((-1.0)*x8231*x8238))+(((-1.0)*r10*x8228)));
evalcond[4]=((((-1.0)*r02*x8229))+((r00*x8222))+(((-1.0)*x8226*x8237))+(((-1.0)*cj4*r01*x8228))+((sj1*x8236)));
evalcond[5]=((((-1.0)*r12*x8229))+((r10*x8222))+(((-1.0)*x8226*x8238))+(((-1.0)*x8227*x8234))+((sj1*x8235)));
evalcond[6]=((((-1.0)*px))+(((-1.0)*x8224*x8236))+(((-0.134)*x8221))+((x8220*x8233))+((x8230*x8237))+(((-0.1)*x8232))+(((-1.0)*r00*x8223)));
evalcond[7]=((((0.134)*x8220))+(((-1.0)*py))+((x8221*x8233))+(((-1.0)*x8224*x8235))+((x8230*x8238))+(((-0.1)*x8225))+(((-1.0)*r10*x8223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8239 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8239.valid){
continue;
}
CheckValue<IkReal> x8240=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8240.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8239.value)+(((1.5707963267949)*(x8240.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8241=IKcos(j0);
IkReal x8242=IKsin(j0);
IkReal x8243=(r00*sj5);
IkReal x8244=(cj5*r11);
IkReal x8245=(r10*sj5);
IkReal x8246=((1.0)*cj2);
IkReal x8247=(cj5*r01);
IkReal x8248=((0.392)*sj2);
IkReal x8249=((0.425)*cj1);
IkReal x8250=((1.0)*cj1*sj2);
IkReal x8251=((0.392)*cj1*cj2);
IkReal x8252=(sj1*x8241);
IkReal x8253=(sj1*x8242);
evalcond[0]=((((-1.0)*x8246*x8252))+(((-1.0)*x8241*x8250))+(((-1.0)*x8247))+(((-1.0)*x8243)));
evalcond[1]=((((-1.0)*x8246*x8253))+(((-1.0)*x8242*x8250))+(((-1.0)*x8244))+(((-1.0)*x8245)));
evalcond[2]=((((-1.0)*x8248*x8252))+((x8241*x8249))+(((-1.0)*px))+(((-0.1)*x8247))+(((-0.1)*x8243))+(((-0.134)*x8242))+((x8241*x8251)));
evalcond[3]=((((-1.0)*x8248*x8253))+((x8242*x8251))+(((-1.0)*py))+((x8242*x8249))+(((-0.1)*x8245))+(((-0.1)*x8244))+(((0.134)*x8241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8254=((1.0)*cj5);
IkReal x8255=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8254)));
j4eval[0]=x8255;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x8254))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8255);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8256=((1.0)*cj5);
IkReal x8257=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8256)));
j4eval[0]=x8257;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8256))))));
j4eval[2]=IKsign(x8257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8258=((1.0)*sj0);
IkReal x8259=((1.0)*cj0);
IkReal x8260=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8260;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8258))+(((-1.0)*r01*sj5*x8259)))))+(IKabs(((((-1.0)*r12*x8258))+(((-1.0)*r02*x8259))))));
j4eval[2]=IKsign(x8260);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8261=((-1.0)*r20);
IkReal x8263 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8263)==0){
continue;
}
IkReal x8262=pow(x8263,-0.5);
CheckValue<IkReal> x8264 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8261),IKFAST_ATAN2_MAGTHRESH);
if(!x8264.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8264.value));
IkReal gconst133=(r21*x8262);
IkReal gconst134=(x8261*x8262);
CheckValue<IkReal> x8265 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8265.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8265.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8266=((-1.0)*r20);
IkReal x8267=x8262;
CheckValue<IkReal> x8269 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8266),IKFAST_ATAN2_MAGTHRESH);
if(!x8269.valid){
continue;
}
IkReal x8268=((-1.0)*(x8269.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8268;
IkReal gconst132=x8268;
IkReal gconst133=(r21*x8267);
IkReal gconst134=(x8266*x8267);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8270=((-1.0)*r20);
IkReal x8271=x8262;
CheckValue<IkReal> x8273 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8270),IKFAST_ATAN2_MAGTHRESH);
if(!x8273.valid){
continue;
}
IkReal x8272=((-1.0)*(x8273.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8272;
IkReal gconst132=x8272;
IkReal gconst133=(r21*x8271);
IkReal gconst134=(x8270*x8271);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8274=((-1.0)*r20);
IkReal x8275=x8262;
CheckValue<IkReal> x8277 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8274),IKFAST_ATAN2_MAGTHRESH);
if(!x8277.valid){
continue;
}
IkReal x8276=((-1.0)*(x8277.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8276;
IkReal gconst132=x8276;
IkReal gconst133=(r21*x8275);
IkReal gconst134=(x8274*x8275);
IkReal x8278=r22*r22;
CheckValue<IkReal> x8281=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8278))),-1);
if(!x8281.valid){
continue;
}
IkReal x8279=x8281.value;
IkReal x8280=(((x8279*(r21*r21*r21*r21)))+(((2.0)*x8279*(r20*r20)*(r21*r21)))+((x8279*(r20*r20*r20*r20)))+x8278);
j4eval[0]=x8280;
j4eval[1]=IKsign(x8280);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8282=(gconst133*r21);
IkReal x8283=(cj1*sj2);
IkReal x8284=(gconst134*r20);
IkReal x8285=(cj2*sj1);
CheckValue<IkReal> x8286=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8282*x8282)+(((-2.0)*x8282*x8284))+(x8284*x8284))),-1);
if(!x8286.valid){
continue;
}
CheckValue<IkReal> x8287 = IKatan2WithCheck(IkReal((((r22*x8283))+((r22*x8285)))),IkReal((((x8282*x8283))+((x8282*x8285))+(((-1.0)*x8283*x8284))+(((-1.0)*x8284*x8285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8286.value)))+(x8287.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8288=IKsin(j4);
IkReal x8289=IKcos(j4);
IkReal x8290=(sj1*sj2);
IkReal x8291=(gconst133*r11);
IkReal x8292=(gconst133*r21);
IkReal x8293=(gconst133*r01);
IkReal x8294=((1.0)*x8289);
IkReal x8295=(gconst134*x8289);
IkReal x8296=((1.0)*x8288);
IkReal x8297=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8296))+((x8288*x8292))+(((-1.0)*r22*x8294)));
evalcond[1]=((((-1.0)*r12*x8294))+cj0+((x8288*x8291))+(((-1.0)*gconst134*r10*x8296)));
evalcond[2]=((((-1.0)*sj0))+((x8288*x8293))+(((-1.0)*gconst134*r00*x8296))+(((-1.0)*r02*x8294)));
evalcond[3]=(((cj2*sj1))+((r20*x8295))+((cj1*sj2))+(((-1.0)*r22*x8296))+(((-1.0)*x8292*x8294)));
evalcond[4]=(((r00*x8295))+(((-1.0)*x8293*x8294))+(((-1.0)*cj0*x8297))+((cj0*x8290))+(((-1.0)*r02*x8296)));
evalcond[5]=((((-1.0)*r12*x8296))+((r10*x8295))+((sj0*x8290))+(((-1.0)*x8291*x8294))+(((-1.0)*sj0*x8297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8298=((1.0)*gconst134);
CheckValue<IkReal> x8299 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8298))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8299.valid){
continue;
}
CheckValue<IkReal> x8300=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8298))+(((-1.0)*gconst133*r10)))),-1);
if(!x8300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8299.value)+(((1.5707963267949)*(x8300.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8301=IKsin(j4);
IkReal x8302=IKcos(j4);
IkReal x8303=(sj1*sj2);
IkReal x8304=(gconst133*r11);
IkReal x8305=(gconst133*r21);
IkReal x8306=(gconst133*r01);
IkReal x8307=((1.0)*x8302);
IkReal x8308=(gconst134*x8302);
IkReal x8309=((1.0)*x8301);
IkReal x8310=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8307))+(((-1.0)*gconst134*r20*x8309))+((x8301*x8305)));
evalcond[1]=(cj0+(((-1.0)*r12*x8307))+((x8301*x8304))+(((-1.0)*gconst134*r10*x8309)));
evalcond[2]=((((-1.0)*gconst134*r00*x8309))+(((-1.0)*sj0))+((x8301*x8306))+(((-1.0)*r02*x8307)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8309))+(((-1.0)*x8305*x8307))+((cj1*sj2))+((r20*x8308)));
evalcond[4]=(((r00*x8308))+((cj0*x8303))+(((-1.0)*r02*x8309))+(((-1.0)*cj0*x8310))+(((-1.0)*x8306*x8307)));
evalcond[5]=(((sj0*x8303))+(((-1.0)*sj0*x8310))+(((-1.0)*x8304*x8307))+(((-1.0)*r12*x8309))+((r10*x8308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8311=((1.0)*gconst134);
CheckValue<IkReal> x8312 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*r20*x8311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8312.valid){
continue;
}
CheckValue<IkReal> x8313=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8311)))),-1);
if(!x8313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8312.value)+(((1.5707963267949)*(x8313.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8314=IKsin(j4);
IkReal x8315=IKcos(j4);
IkReal x8316=(sj1*sj2);
IkReal x8317=(gconst133*r11);
IkReal x8318=(gconst133*r21);
IkReal x8319=(gconst133*r01);
IkReal x8320=((1.0)*x8315);
IkReal x8321=(gconst134*x8315);
IkReal x8322=((1.0)*x8314);
IkReal x8323=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8322))+(((-1.0)*r22*x8320))+((x8314*x8318)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x8322))+((x8314*x8317))+(((-1.0)*r12*x8320)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8322))+((x8314*x8319))+(((-1.0)*r02*x8320)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8322))+((cj1*sj2))+(((-1.0)*x8318*x8320))+((r20*x8321)));
evalcond[4]=(((cj0*x8316))+((r00*x8321))+(((-1.0)*r02*x8322))+(((-1.0)*x8319*x8320))+(((-1.0)*cj0*x8323)));
evalcond[5]=(((r10*x8321))+((sj0*x8316))+(((-1.0)*x8317*x8320))+(((-1.0)*sj0*x8323))+(((-1.0)*r12*x8322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8324=((-1.0)*r21);
IkReal x8326 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8326)==0){
continue;
}
IkReal x8325=pow(x8326,-0.5);
CheckValue<IkReal> x8327 = IKatan2WithCheck(IkReal(x8324),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8327.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8327.value))));
IkReal gconst136=(x8324*x8325);
IkReal gconst137=((1.0)*r20*x8325);
CheckValue<IkReal> x8328 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8328.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8328.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8329=((-1.0)*r21);
CheckValue<IkReal> x8332 = IKatan2WithCheck(IkReal(x8329),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8332.valid){
continue;
}
IkReal x8330=((1.0)*(x8332.value));
IkReal x8331=x8325;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8330)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8330)));
IkReal gconst136=(x8329*x8331);
IkReal gconst137=((1.0)*r20*x8331);
IkReal x8333=r22*r22;
IkReal x8334=((1.0)*x8333);
CheckValue<IkReal> x8338=IKPowWithIntegerCheck(((-1.0)+x8333),-1);
if(!x8338.valid){
continue;
}
IkReal x8335=x8338.value;
if((((1.0)+(((-1.0)*x8334)))) < -0.00001)
continue;
IkReal x8336=IKsqrt(((1.0)+(((-1.0)*x8334))));
IkReal x8337=(cj0*x8335*x8336);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x8337+(((-1.0)*x8334*x8337))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8339=((-1.0)*r21);
CheckValue<IkReal> x8342 = IKatan2WithCheck(IkReal(x8339),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8342.valid){
continue;
}
IkReal x8340=((1.0)*(x8342.value));
IkReal x8341=x8325;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8340)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8340)));
IkReal gconst136=(x8339*x8341);
IkReal gconst137=((1.0)*r20*x8341);
IkReal x8343=r22*r22;
IkReal x8344=((1.0)*x8343);
CheckValue<IkReal> x8348=IKPowWithIntegerCheck(((-1.0)+x8343),-1);
if(!x8348.valid){
continue;
}
IkReal x8345=x8348.value;
if((((1.0)+(((-1.0)*x8344)))) < -0.00001)
continue;
IkReal x8346=IKsqrt(((1.0)+(((-1.0)*x8344))));
IkReal x8347=(sj0*x8345*x8346);
j4eval[0]=((IKabs((x8347+(((-1.0)*x8344*x8347)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8349=((-1.0)*r21);
CheckValue<IkReal> x8352 = IKatan2WithCheck(IkReal(x8349),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8352.valid){
continue;
}
IkReal x8350=((1.0)*(x8352.value));
IkReal x8351=x8325;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8350)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8350)));
IkReal gconst136=(x8349*x8351);
IkReal gconst137=((1.0)*r20*x8351);
IkReal x8353=r22*r22;
IkReal x8354=(r12*sj0);
IkReal x8355=(cj0*r02);
CheckValue<IkReal> x8359=IKPowWithIntegerCheck(((-1.0)+x8353),-1);
if(!x8359.valid){
continue;
}
IkReal x8356=x8359.value;
if((((1.0)+(((-1.0)*x8353)))) < -0.00001)
continue;
IkReal x8357=IKsqrt(((1.0)+(((-1.0)*x8353))));
IkReal x8358=(r22*x8356*x8357);
j4eval[0]=0;
j4eval[1]=((IKabs((((x8355*x8358))+((x8354*x8358)))))+(IKabs(((((-1.0)*x8354))+(((-1.0)*x8355))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8360=((1.0)*sj0);
IkReal x8361=((1.0)*cj0);
CheckValue<IkReal> x8362=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8362.valid){
continue;
}
CheckValue<IkReal> x8363 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8360))+(((-1.0)*r02*x8361)))),IkReal(((((-1.0)*gconst136*r01*x8361))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x8360))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8362.value)))+(x8363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8364=IKsin(j4);
IkReal x8365=IKcos(j4);
IkReal x8366=(gconst136*r01);
IkReal x8367=(gconst137*r10);
IkReal x8368=(sj1*sj2);
IkReal x8369=(gconst137*r20);
IkReal x8370=(gconst136*r11);
IkReal x8371=(gconst136*r21);
IkReal x8372=(gconst137*r00);
IkReal x8373=((1.0)*x8365);
IkReal x8374=((1.0)*cj1*cj2);
IkReal x8375=((1.0)*x8364);
evalcond[0]=((((-1.0)*r22*x8373))+(((-1.0)*x8369*x8375))+((x8364*x8371)));
evalcond[1]=((((-1.0)*r12*x8373))+cj0+(((-1.0)*x8367*x8375))+((x8364*x8370)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8373))+((x8364*x8366))+(((-1.0)*x8372*x8375)));
evalcond[3]=((((-1.0)*x8371*x8373))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8375))+((x8365*x8369)));
evalcond[4]=(((x8365*x8372))+(((-1.0)*r02*x8375))+(((-1.0)*x8366*x8373))+(((-1.0)*cj0*x8374))+((cj0*x8368)));
evalcond[5]=((((-1.0)*r12*x8375))+((sj0*x8368))+(((-1.0)*x8370*x8373))+(((-1.0)*sj0*x8374))+((x8365*x8367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8376=((1.0)*gconst137);
CheckValue<IkReal> x8377=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x8376)))),-1);
if(!x8377.valid){
continue;
}
CheckValue<IkReal> x8378 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*r20*sj0*x8376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8377.value)))+(x8378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8379=IKsin(j4);
IkReal x8380=IKcos(j4);
IkReal x8381=(gconst136*r01);
IkReal x8382=(gconst137*r10);
IkReal x8383=(sj1*sj2);
IkReal x8384=(gconst137*r20);
IkReal x8385=(gconst136*r11);
IkReal x8386=(gconst136*r21);
IkReal x8387=(gconst137*r00);
IkReal x8388=((1.0)*x8380);
IkReal x8389=((1.0)*cj1*cj2);
IkReal x8390=((1.0)*x8379);
evalcond[0]=((((-1.0)*x8384*x8390))+(((-1.0)*r22*x8388))+((x8379*x8386)));
evalcond[1]=((((-1.0)*x8382*x8390))+cj0+(((-1.0)*r12*x8388))+((x8379*x8385)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8387*x8390))+(((-1.0)*r02*x8388))+((x8379*x8381)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8386*x8388))+((cj1*sj2))+((x8380*x8384))+(((-1.0)*r22*x8390)));
evalcond[4]=((((-1.0)*x8381*x8388))+(((-1.0)*r02*x8390))+(((-1.0)*cj0*x8389))+((x8380*x8387))+((cj0*x8383)));
evalcond[5]=((((-1.0)*sj0*x8389))+((sj0*x8383))+((x8380*x8382))+(((-1.0)*x8385*x8388))+(((-1.0)*r12*x8390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8391=((1.0)*gconst137);
CheckValue<IkReal> x8392 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x8391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8392.valid){
continue;
}
CheckValue<IkReal> x8393=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x8391)))),-1);
if(!x8393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8392.value)+(((1.5707963267949)*(x8393.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8394=IKsin(j4);
IkReal x8395=IKcos(j4);
IkReal x8396=(gconst136*r01);
IkReal x8397=(gconst137*r10);
IkReal x8398=(sj1*sj2);
IkReal x8399=(gconst137*r20);
IkReal x8400=(gconst136*r11);
IkReal x8401=(gconst136*r21);
IkReal x8402=(gconst137*r00);
IkReal x8403=((1.0)*x8395);
IkReal x8404=((1.0)*cj1*cj2);
IkReal x8405=((1.0)*x8394);
evalcond[0]=(((x8394*x8401))+(((-1.0)*x8399*x8405))+(((-1.0)*r22*x8403)));
evalcond[1]=(cj0+((x8394*x8400))+(((-1.0)*r12*x8403))+(((-1.0)*x8397*x8405)));
evalcond[2]=(((x8394*x8396))+(((-1.0)*sj0))+(((-1.0)*r02*x8403))+(((-1.0)*x8402*x8405)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8395*x8399))+(((-1.0)*r22*x8405))+(((-1.0)*x8401*x8403)));
evalcond[4]=((((-1.0)*cj0*x8404))+((x8395*x8402))+(((-1.0)*r02*x8405))+(((-1.0)*x8396*x8403))+((cj0*x8398)));
evalcond[5]=((((-1.0)*x8400*x8403))+(((-1.0)*sj0*x8404))+((x8395*x8397))+((sj0*x8398))+(((-1.0)*r12*x8405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8406=((-1.0)*r10);
IkReal x8408 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8408)==0){
continue;
}
IkReal x8407=pow(x8408,-0.5);
CheckValue<IkReal> x8409 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8406),IKFAST_ATAN2_MAGTHRESH);
if(!x8409.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8409.value));
IkReal gconst139=(r11*x8407);
IkReal gconst140=(x8406*x8407);
CheckValue<IkReal> x8410 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8410.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8410.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8411=((-1.0)*r10);
IkReal x8412=x8407;
CheckValue<IkReal> x8414 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8411),IKFAST_ATAN2_MAGTHRESH);
if(!x8414.valid){
continue;
}
IkReal x8413=((-1.0)*(x8414.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8413;
IkReal gconst138=x8413;
IkReal gconst139=(r11*x8412);
IkReal gconst140=(x8411*x8412);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8415=((1.0)*sj0);
IkReal x8416=((1.0)*gconst139);
CheckValue<IkReal> x8417=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8416)))),-1);
if(!x8417.valid){
continue;
}
CheckValue<IkReal> x8418 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8415))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst139*r11*x8415))+((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x8416))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8417.value)))+(x8418.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8419=IKsin(j4);
IkReal x8420=IKcos(j4);
IkReal x8421=(gconst140*r00);
IkReal x8422=(sj1*sj2);
IkReal x8423=(gconst139*r11);
IkReal x8424=(gconst139*r01);
IkReal x8425=(gconst139*r21);
IkReal x8426=((1.0)*x8420);
IkReal x8427=((1.0)*x8419);
IkReal x8428=((1.0)*cj1*cj2);
IkReal x8429=(gconst140*x8420);
evalcond[0]=((((-1.0)*r22*x8426))+((x8419*x8425))+(((-1.0)*gconst140*r20*x8427)));
evalcond[1]=(cj0+((x8419*x8423))+(((-1.0)*gconst140*r10*x8427))+(((-1.0)*r12*x8426)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8421*x8427))+(((-1.0)*r02*x8426))+((x8419*x8424)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8429))+(((-1.0)*r22*x8427))+(((-1.0)*x8425*x8426)));
evalcond[4]=(((cj0*x8422))+(((-1.0)*x8424*x8426))+(((-1.0)*cj0*x8428))+(((-1.0)*r02*x8427))+((x8420*x8421)));
evalcond[5]=(((r10*x8429))+(((-1.0)*x8423*x8426))+((sj0*x8422))+(((-1.0)*sj0*x8428))+(((-1.0)*r12*x8427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8430=((1.0)*gconst140);
CheckValue<IkReal> x8431=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8430))+(((-1.0)*gconst139*r00)))),-1);
if(!x8431.valid){
continue;
}
CheckValue<IkReal> x8432 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x8430)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8431.value)))+(x8432.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8433=IKsin(j4);
IkReal x8434=IKcos(j4);
IkReal x8435=(gconst140*r00);
IkReal x8436=(sj1*sj2);
IkReal x8437=(gconst139*r11);
IkReal x8438=(gconst139*r01);
IkReal x8439=(gconst139*r21);
IkReal x8440=((1.0)*x8434);
IkReal x8441=((1.0)*x8433);
IkReal x8442=((1.0)*cj1*cj2);
IkReal x8443=(gconst140*x8434);
evalcond[0]=((((-1.0)*r22*x8440))+(((-1.0)*gconst140*r20*x8441))+((x8433*x8439)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8441))+(((-1.0)*r12*x8440))+((x8433*x8437)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8435*x8441))+(((-1.0)*r02*x8440))+((x8433*x8438)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8443))+(((-1.0)*r22*x8441))+(((-1.0)*x8439*x8440)));
evalcond[4]=((((-1.0)*x8438*x8440))+((x8434*x8435))+(((-1.0)*cj0*x8442))+(((-1.0)*r02*x8441))+((cj0*x8436)));
evalcond[5]=((((-1.0)*r12*x8441))+((sj0*x8436))+(((-1.0)*x8437*x8440))+(((-1.0)*sj0*x8442))+((r10*x8443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8444=((-1.0)*r11);
IkReal x8446 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8446)==0){
continue;
}
IkReal x8445=pow(x8446,-0.5);
CheckValue<IkReal> x8447 = IKatan2WithCheck(IkReal(x8444),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8447.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8447.value))));
IkReal gconst142=(x8444*x8445);
IkReal gconst143=((1.0)*r10*x8445);
CheckValue<IkReal> x8448 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8448.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8448.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8449=((-1.0)*r11);
CheckValue<IkReal> x8452 = IKatan2WithCheck(IkReal(x8449),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8452.valid){
continue;
}
IkReal x8450=((1.0)*(x8452.value));
IkReal x8451=x8445;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8450)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8450)));
IkReal gconst142=(x8449*x8451);
IkReal gconst143=((1.0)*r10*x8451);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8453=((-1.0)*r11);
CheckValue<IkReal> x8456 = IKatan2WithCheck(IkReal(x8453),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8456.valid){
continue;
}
IkReal x8454=((1.0)*(x8456.value));
IkReal x8455=x8445;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8454)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8454)));
IkReal gconst142=(x8453*x8455);
IkReal gconst143=((1.0)*r10*x8455);
IkReal x8457=r12*r12;
IkReal x8458=((1.0)*sj0);
IkReal x8459=(cj0*r02);
IkReal x8460=x8445;
j4eval[0]=((IKabs((((sj0*x8457*x8460))+((r12*x8459*x8460))+(((-1.0)*x8458*x8460)))))+(IKabs(((((-1.0)*x8459))+(((-1.0)*r12*x8458))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8461=((-1.0)*r11);
CheckValue<IkReal> x8464 = IKatan2WithCheck(IkReal(x8461),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8464.valid){
continue;
}
IkReal x8462=((1.0)*(x8464.value));
IkReal x8463=x8445;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8462)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8462)));
IkReal gconst142=(x8461*x8463);
IkReal gconst143=((1.0)*r10*x8463);
IkReal x8465=r12*r12;
IkReal x8466=(cj1*r22*sj2);
IkReal x8467=(cj2*r22*sj1);
CheckValue<IkReal> x8471=IKPowWithIntegerCheck(((-1.0)+x8465),-1);
if(!x8471.valid){
continue;
}
IkReal x8468=x8471.value;
if((((1.0)+(((-1.0)*x8465)))) < -0.00001)
continue;
IkReal x8469=IKsqrt(((1.0)+(((-1.0)*x8465))));
IkReal x8470=((1.0)*r12*x8468*x8469);
j4eval[0]=((IKabs(((((-1.0)*x8467*x8470))+(((-1.0)*x8466*x8470)))))+(IKabs((x8466+x8467))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8472=(gconst142*r21);
IkReal x8473=(cj1*sj2);
IkReal x8474=(cj2*sj1);
IkReal x8475=(gconst143*r20);
CheckValue<IkReal> x8476=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8472*x8472)+(((-2.0)*x8472*x8475))+(x8475*x8475))),-1);
if(!x8476.valid){
continue;
}
CheckValue<IkReal> x8477 = IKatan2WithCheck(IkReal((((r22*x8474))+((r22*x8473)))),IkReal((((x8472*x8473))+((x8472*x8474))+(((-1.0)*x8473*x8475))+(((-1.0)*x8474*x8475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8476.value)))+(x8477.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8478=IKsin(j4);
IkReal x8479=IKcos(j4);
IkReal x8480=(sj1*sj2);
IkReal x8481=(gconst143*r20);
IkReal x8482=((1.0)*x8479);
IkReal x8483=((1.0)*cj1*cj2);
IkReal x8484=((1.0)*x8478);
IkReal x8485=(gconst142*x8478);
IkReal x8486=(gconst143*x8479);
evalcond[0]=((((-1.0)*x8481*x8484))+(((-1.0)*r22*x8482))+((r21*x8485)));
evalcond[1]=(cj0+(((-1.0)*r12*x8482))+(((-1.0)*gconst143*r10*x8484))+((r11*x8485)));
evalcond[2]=(((r01*x8485))+(((-1.0)*sj0))+(((-1.0)*r02*x8482))+(((-1.0)*gconst143*r00*x8484)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8479*x8481))+(((-1.0)*r22*x8484))+(((-1.0)*gconst142*r21*x8482)));
evalcond[4]=(((cj0*x8480))+(((-1.0)*cj0*x8483))+(((-1.0)*r02*x8484))+(((-1.0)*gconst142*r01*x8482))+((r00*x8486)));
evalcond[5]=(((r10*x8486))+(((-1.0)*sj0*x8483))+((sj0*x8480))+(((-1.0)*gconst142*r11*x8482))+(((-1.0)*r12*x8484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8487=((1.0)*sj0);
IkReal x8488=((1.0)*gconst142);
CheckValue<IkReal> x8489 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8487)))),IkReal(((((-1.0)*cj0*r01*x8488))+((cj0*gconst143*r00))+(((-1.0)*gconst142*r11*x8487))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8489.valid){
continue;
}
CheckValue<IkReal> x8490=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8488))+(((-1.0)*gconst143*r21)))),-1);
if(!x8490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8489.value)+(((1.5707963267949)*(x8490.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8491=IKsin(j4);
IkReal x8492=IKcos(j4);
IkReal x8493=(sj1*sj2);
IkReal x8494=(gconst143*r20);
IkReal x8495=((1.0)*x8492);
IkReal x8496=((1.0)*cj1*cj2);
IkReal x8497=((1.0)*x8491);
IkReal x8498=(gconst142*x8491);
IkReal x8499=(gconst143*x8492);
evalcond[0]=((((-1.0)*r22*x8495))+(((-1.0)*x8494*x8497))+((r21*x8498)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x8497))+(((-1.0)*r12*x8495))+((r11*x8498)));
evalcond[2]=((((-1.0)*r02*x8495))+(((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8497))+((r01*x8498)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8492*x8494))+(((-1.0)*r22*x8497))+(((-1.0)*gconst142*r21*x8495)));
evalcond[4]=(((r00*x8499))+(((-1.0)*cj0*x8496))+(((-1.0)*r02*x8497))+(((-1.0)*gconst142*r01*x8495))+((cj0*x8493)));
evalcond[5]=(((r10*x8499))+(((-1.0)*sj0*x8496))+((sj0*x8493))+(((-1.0)*gconst142*r11*x8495))+(((-1.0)*r12*x8497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8500=((1.0)*gconst143);
CheckValue<IkReal> x8501 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8500))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8501.valid){
continue;
}
CheckValue<IkReal> x8502=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x8500)))),-1);
if(!x8502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8501.value)+(((1.5707963267949)*(x8502.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8503=IKsin(j4);
IkReal x8504=IKcos(j4);
IkReal x8505=(sj1*sj2);
IkReal x8506=(gconst143*r20);
IkReal x8507=((1.0)*x8504);
IkReal x8508=((1.0)*cj1*cj2);
IkReal x8509=((1.0)*x8503);
IkReal x8510=(gconst142*x8503);
IkReal x8511=(gconst143*x8504);
evalcond[0]=(((r21*x8510))+(((-1.0)*x8506*x8509))+(((-1.0)*r22*x8507)));
evalcond[1]=((((-1.0)*gconst143*r10*x8509))+cj0+((r11*x8510))+(((-1.0)*r12*x8507)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8509))+(((-1.0)*r02*x8507))+((r01*x8510)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8507))+((cj1*sj2))+(((-1.0)*r22*x8509))+((x8504*x8506)));
evalcond[4]=(((cj0*x8505))+(((-1.0)*r02*x8509))+(((-1.0)*gconst142*r01*x8507))+(((-1.0)*cj0*x8508))+((r00*x8511)));
evalcond[5]=(((sj0*x8505))+(((-1.0)*r12*x8509))+(((-1.0)*sj0*x8508))+(((-1.0)*gconst142*r11*x8507))+((r10*x8511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8512=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8512;
j4eval[1]=IKsign(x8512);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8513=((1.0)*cj5);
IkReal x8514=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8513)));
j4eval[0]=x8514;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8513))))));
j4eval[2]=IKsign(x8514);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8515=cj5*cj5;
IkReal x8516=r11*r11;
IkReal x8517=(r11*sj5);
IkReal x8518=(cj5*r10);
IkReal x8519=((r12*r12)+x8516+((x8515*(r10*r10)))+(((-2.0)*x8517*x8518))+(((-1.0)*x8515*x8516)));
j4eval[0]=x8519;
j4eval[1]=IKsign(x8519);
j4eval[2]=((IKabs(r12))+(IKabs((x8518+(((-1.0)*x8517))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8520=cj5*cj5;
IkReal x8521=r11*r11;
IkReal x8522=(cj5*r10);
IkReal x8523=(r11*sj5);
CheckValue<IkReal> x8524=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x8520*(r10*r10)))+x8521+(((-1.0)*x8520*x8521))+(((-2.0)*x8522*x8523)))),-1);
if(!x8524.valid){
continue;
}
CheckValue<IkReal> x8525 = IKatan2WithCheck(IkReal((x8522+(((-1.0)*x8523)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8524.value)))+(x8525.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8526=IKsin(j4);
IkReal x8527=IKcos(j4);
IkReal x8528=(cj5*r10);
IkReal x8529=(r01*sj5);
IkReal x8530=(cj5*r00);
IkReal x8531=(cj5*r20);
IkReal x8532=((1.0)*x8527);
IkReal x8533=((1.0)*x8526);
IkReal x8534=(sj5*x8526);
evalcond[0]=((((-1.0)*x8531*x8533))+(((-1.0)*r22*x8532))+((r21*x8534)));
evalcond[1]=((((-1.0)*r02*x8532))+((x8526*x8529))+(((-1.0)*x8530*x8533)));
evalcond[2]=((((-1.0)*r11*sj5*x8532))+(((-1.0)*r12*x8533))+((x8527*x8528)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8532))+(((-1.0)*x8528*x8533))+((r11*x8534)));
evalcond[4]=(((cj2*sj1))+((x8527*x8531))+(((-1.0)*r22*x8533))+((cj1*sj2))+(((-1.0)*r21*sj5*x8532)));
evalcond[5]=((((-1.0)*r02*x8533))+((x8527*x8530))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8529*x8532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8535=((1.0)*cj5);
CheckValue<IkReal> x8536=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8535))+(((-1.0)*r00*sj5)))),-1);
if(!x8536.valid){
continue;
}
CheckValue<IkReal> x8537 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8535)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8536.value)))+(x8537.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8538=IKsin(j4);
IkReal x8539=IKcos(j4);
IkReal x8540=(cj5*r10);
IkReal x8541=(r01*sj5);
IkReal x8542=(cj5*r00);
IkReal x8543=(cj5*r20);
IkReal x8544=((1.0)*x8539);
IkReal x8545=((1.0)*x8538);
IkReal x8546=(sj5*x8538);
evalcond[0]=((((-1.0)*x8543*x8545))+(((-1.0)*r22*x8544))+((r21*x8546)));
evalcond[1]=((((-1.0)*r02*x8544))+((x8538*x8541))+(((-1.0)*x8542*x8545)));
evalcond[2]=(((x8539*x8540))+(((-1.0)*r11*sj5*x8544))+(((-1.0)*r12*x8545)));
evalcond[3]=((1.0)+(((-1.0)*x8540*x8545))+(((-1.0)*r12*x8544))+((r11*x8546)));
evalcond[4]=(((cj2*sj1))+((x8539*x8543))+((cj1*sj2))+(((-1.0)*r22*x8545))+(((-1.0)*r21*sj5*x8544)));
evalcond[5]=((((-1.0)*r02*x8545))+((x8539*x8542))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8541*x8544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8547=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8547.valid){
continue;
}
CheckValue<IkReal> x8548 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8547.value)))+(x8548.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8549=IKsin(j4);
IkReal x8550=IKcos(j4);
IkReal x8551=(cj5*r10);
IkReal x8552=(r01*sj5);
IkReal x8553=(cj5*r00);
IkReal x8554=(cj5*r20);
IkReal x8555=((1.0)*x8550);
IkReal x8556=((1.0)*x8549);
IkReal x8557=(sj5*x8549);
evalcond[0]=(((r21*x8557))+(((-1.0)*r22*x8555))+(((-1.0)*x8554*x8556)));
evalcond[1]=(((x8549*x8552))+(((-1.0)*x8553*x8556))+(((-1.0)*r02*x8555)));
evalcond[2]=((((-1.0)*r12*x8556))+((x8550*x8551))+(((-1.0)*r11*sj5*x8555)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8555))+((r11*x8557))+(((-1.0)*x8551*x8556)));
evalcond[4]=(((cj2*sj1))+((x8550*x8554))+(((-1.0)*r22*x8556))+(((-1.0)*r21*sj5*x8555))+((cj1*sj2)));
evalcond[5]=(((x8550*x8553))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8552*x8555))+(((-1.0)*r02*x8556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8558=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8558;
j4eval[1]=IKsign(x8558);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8559=((1.0)*cj5);
IkReal x8560=((((-1.0)*r21*x8559))+(((-1.0)*r20*sj5)));
j4eval[0]=x8560;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x8559)))))+(IKabs(r02)));
j4eval[2]=IKsign(x8560);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8561=cj5*cj5;
IkReal x8562=r11*r11;
IkReal x8563=(cj5*r10);
IkReal x8564=(r11*sj5);
IkReal x8565=((((-1.0)*x8561*(r10*r10)))+(((-1.0)*(r12*r12)))+((x8561*x8562))+(((2.0)*x8563*x8564))+(((-1.0)*x8562)));
j4eval[0]=x8565;
j4eval[1]=((IKabs(r12))+(IKabs((x8563+(((-1.0)*x8564))))));
j4eval[2]=IKsign(x8565);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8566=cj5*cj5;
IkReal x8567=r11*r11;
IkReal x8568=(cj5*r10);
IkReal x8569=(r11*sj5);
CheckValue<IkReal> x8570 = IKatan2WithCheck(IkReal((x8568+(((-1.0)*x8569)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8570.valid){
continue;
}
CheckValue<IkReal> x8571=IKPowWithIntegerCheck(IKsign(((((2.0)*x8568*x8569))+(((-1.0)*(r12*r12)))+(((-1.0)*x8566*(r10*r10)))+((x8566*x8567))+(((-1.0)*x8567)))),-1);
if(!x8571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8570.value)+(((1.5707963267949)*(x8571.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8572=IKsin(j4);
IkReal x8573=IKcos(j4);
IkReal x8574=(cj5*r10);
IkReal x8575=(r01*sj5);
IkReal x8576=(cj5*r00);
IkReal x8577=(cj5*r20);
IkReal x8578=((1.0)*x8573);
IkReal x8579=((1.0)*x8572);
IkReal x8580=(sj5*x8572);
evalcond[0]=((((-1.0)*x8577*x8579))+((r21*x8580))+(((-1.0)*r22*x8578)));
evalcond[1]=((((-1.0)*r02*x8578))+((x8572*x8575))+(((-1.0)*x8576*x8579)));
evalcond[2]=((((-1.0)*r11*sj5*x8578))+((x8573*x8574))+(((-1.0)*r12*x8579)));
evalcond[3]=((-1.0)+((r11*x8580))+(((-1.0)*r12*x8578))+(((-1.0)*x8574*x8579)));
evalcond[4]=((((-1.0)*r21*sj5*x8578))+((cj2*sj1))+((cj1*sj2))+((x8573*x8577))+(((-1.0)*r22*x8579)));
evalcond[5]=((((-1.0)*x8575*x8578))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x8579))+((x8573*x8576))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8581=((1.0)*cj5);
CheckValue<IkReal> x8582=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8581))+(((-1.0)*r20*sj5)))),-1);
if(!x8582.valid){
continue;
}
CheckValue<IkReal> x8583 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x8581)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8582.value)))+(x8583.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8584=IKsin(j4);
IkReal x8585=IKcos(j4);
IkReal x8586=(cj5*r10);
IkReal x8587=(r01*sj5);
IkReal x8588=(cj5*r00);
IkReal x8589=(cj5*r20);
IkReal x8590=((1.0)*x8585);
IkReal x8591=((1.0)*x8584);
IkReal x8592=(sj5*x8584);
evalcond[0]=((((-1.0)*x8589*x8591))+(((-1.0)*r22*x8590))+((r21*x8592)));
evalcond[1]=((((-1.0)*r02*x8590))+(((-1.0)*x8588*x8591))+((x8584*x8587)));
evalcond[2]=((((-1.0)*r11*sj5*x8590))+(((-1.0)*r12*x8591))+((x8585*x8586)));
evalcond[3]=((-1.0)+(((-1.0)*x8586*x8591))+(((-1.0)*r12*x8590))+((r11*x8592)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8591))+((cj1*sj2))+(((-1.0)*r21*sj5*x8590))+((x8585*x8589)));
evalcond[5]=((((-1.0)*r02*x8591))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x8585*x8588))+(((-1.0)*x8587*x8590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8593 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8593.valid){
continue;
}
CheckValue<IkReal> x8594=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8593.value)+(((1.5707963267949)*(x8594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8595=IKsin(j4);
IkReal x8596=IKcos(j4);
IkReal x8597=(cj5*r10);
IkReal x8598=(r01*sj5);
IkReal x8599=(cj5*r00);
IkReal x8600=(cj5*r20);
IkReal x8601=((1.0)*x8596);
IkReal x8602=((1.0)*x8595);
IkReal x8603=(sj5*x8595);
evalcond[0]=((((-1.0)*r22*x8601))+((r21*x8603))+(((-1.0)*x8600*x8602)));
evalcond[1]=(((x8595*x8598))+(((-1.0)*r02*x8601))+(((-1.0)*x8599*x8602)));
evalcond[2]=(((x8596*x8597))+(((-1.0)*r12*x8602))+(((-1.0)*r11*sj5*x8601)));
evalcond[3]=((-1.0)+(((-1.0)*x8597*x8602))+((r11*x8603))+(((-1.0)*r12*x8601)));
evalcond[4]=(((cj2*sj1))+((x8596*x8600))+((cj1*sj2))+(((-1.0)*r22*x8602))+(((-1.0)*r21*sj5*x8601)));
evalcond[5]=(((x8596*x8599))+(((-1.0)*r02*x8602))+(((-1.0)*sj1*sj2))+(((-1.0)*x8598*x8601))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8604=((-1.0)*r00);
IkReal x8606 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8606)==0){
continue;
}
IkReal x8605=pow(x8606,-0.5);
CheckValue<IkReal> x8607 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8604),IKFAST_ATAN2_MAGTHRESH);
if(!x8607.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8607.value));
IkReal gconst145=(r01*x8605);
IkReal gconst146=(x8604*x8605);
CheckValue<IkReal> x8608 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8608.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8608.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8609=((-1.0)*r00);
IkReal x8610=x8605;
CheckValue<IkReal> x8612 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8609),IKFAST_ATAN2_MAGTHRESH);
if(!x8612.valid){
continue;
}
IkReal x8611=((-1.0)*(x8612.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8611;
IkReal gconst144=x8611;
IkReal gconst145=(r01*x8610);
IkReal gconst146=(x8609*x8610);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8613=((1.0)*sj0);
IkReal x8614=((1.0)*gconst145);
CheckValue<IkReal> x8615 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8613))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x8614))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x8613)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8615.valid){
continue;
}
CheckValue<IkReal> x8616=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8614))+(((-1.0)*gconst146*r21)))),-1);
if(!x8616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8615.value)+(((1.5707963267949)*(x8616.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8617=IKsin(j4);
IkReal x8618=IKcos(j4);
IkReal x8619=(gconst146*r10);
IkReal x8620=(sj1*sj2);
IkReal x8621=(gconst146*r20);
IkReal x8622=(gconst146*r00);
IkReal x8623=((1.0)*x8618);
IkReal x8624=((1.0)*x8617);
IkReal x8625=(gconst145*x8617);
IkReal x8626=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8625))+(((-1.0)*x8621*x8624))+(((-1.0)*r22*x8623)));
evalcond[1]=((((-1.0)*r12*x8623))+cj0+(((-1.0)*x8619*x8624))+((r11*x8625)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8622*x8624))+((r01*x8625))+(((-1.0)*r02*x8623)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8623))+((cj1*sj2))+(((-1.0)*r22*x8624))+((x8618*x8621)));
evalcond[4]=(((cj0*x8620))+((x8618*x8622))+(((-1.0)*cj0*x8626))+(((-1.0)*r02*x8624))+(((-1.0)*gconst145*r01*x8623)));
evalcond[5]=((((-1.0)*r12*x8624))+((x8618*x8619))+(((-1.0)*gconst145*r11*x8623))+((sj0*x8620))+(((-1.0)*sj0*x8626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8627=((1.0)*gconst146);
CheckValue<IkReal> x8628 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8627))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8628.valid){
continue;
}
CheckValue<IkReal> x8629=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8627))+(((-1.0)*gconst145*r10)))),-1);
if(!x8629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8628.value)+(((1.5707963267949)*(x8629.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8630=IKsin(j4);
IkReal x8631=IKcos(j4);
IkReal x8632=(gconst146*r10);
IkReal x8633=(sj1*sj2);
IkReal x8634=(gconst146*r20);
IkReal x8635=(gconst146*r00);
IkReal x8636=((1.0)*x8631);
IkReal x8637=((1.0)*x8630);
IkReal x8638=(gconst145*x8630);
IkReal x8639=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x8634*x8637))+((r21*x8638))+(((-1.0)*r22*x8636)));
evalcond[1]=(cj0+(((-1.0)*r12*x8636))+(((-1.0)*x8632*x8637))+((r11*x8638)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8635*x8637))+((r01*x8638))+(((-1.0)*r02*x8636)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8636))+((cj1*sj2))+(((-1.0)*r22*x8637))+((x8631*x8634)));
evalcond[4]=((((-1.0)*gconst145*r01*x8636))+((cj0*x8633))+(((-1.0)*cj0*x8639))+((x8631*x8635))+(((-1.0)*r02*x8637)));
evalcond[5]=((((-1.0)*r12*x8637))+(((-1.0)*gconst145*r11*x8636))+((sj0*x8633))+(((-1.0)*sj0*x8639))+((x8631*x8632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8640=((-1.0)*r01);
IkReal x8642 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8642)==0){
continue;
}
IkReal x8641=pow(x8642,-0.5);
CheckValue<IkReal> x8643 = IKatan2WithCheck(IkReal(x8640),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8643.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8643.value))));
IkReal gconst148=(x8640*x8641);
IkReal gconst149=((1.0)*r00*x8641);
CheckValue<IkReal> x8644 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8644.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8644.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8645=((-1.0)*r01);
CheckValue<IkReal> x8648 = IKatan2WithCheck(IkReal(x8645),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8648.valid){
continue;
}
IkReal x8646=((1.0)*(x8648.value));
IkReal x8647=x8641;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8646)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8646)));
IkReal gconst148=(x8645*x8647);
IkReal gconst149=((1.0)*r00*x8647);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8649=((-1.0)*r01);
CheckValue<IkReal> x8652 = IKatan2WithCheck(IkReal(x8649),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8652.valid){
continue;
}
IkReal x8650=((1.0)*(x8652.value));
IkReal x8651=x8641;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8650)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8650)));
IkReal gconst148=(x8649*x8651);
IkReal gconst149=((1.0)*r00*x8651);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8653=((-1.0)*r01);
CheckValue<IkReal> x8656 = IKatan2WithCheck(IkReal(x8653),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8656.valid){
continue;
}
IkReal x8654=((1.0)*(x8656.value));
IkReal x8655=x8641;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8654)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8654)));
IkReal gconst148=(x8653*x8655);
IkReal gconst149=((1.0)*r00*x8655);
IkReal x8657=r02*r02;
IkReal x8658=(r12*sj0);
IkReal x8659=((1.0)*cj0);
IkReal x8660=x8641;
j4eval[0]=((IKabs(((((-1.0)*x8658))+(((-1.0)*r02*x8659)))))+(IKabs(((((-1.0)*x8659*x8660))+((cj0*x8657*x8660))+((r02*x8658*x8660))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8661=((1.0)*sj0);
IkReal x8662=((1.0)*gconst148);
CheckValue<IkReal> x8663 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8661))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*gconst148*r11*x8661))+((cj0*gconst149*r00))+(((-1.0)*cj0*r01*x8662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8663.valid){
continue;
}
CheckValue<IkReal> x8664=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8662)))),-1);
if(!x8664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8663.value)+(((1.5707963267949)*(x8664.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8665=IKsin(j4);
IkReal x8666=IKcos(j4);
IkReal x8667=(gconst148*r11);
IkReal x8668=(sj1*sj2);
IkReal x8669=((1.0)*x8666);
IkReal x8670=(gconst149*x8666);
IkReal x8671=(gconst148*x8665);
IkReal x8672=((1.0)*cj1*cj2);
IkReal x8673=((1.0)*x8665);
evalcond[0]=((((-1.0)*r22*x8669))+(((-1.0)*gconst149*r20*x8673))+((r21*x8671)));
evalcond[1]=(cj0+(((-1.0)*r12*x8669))+(((-1.0)*gconst149*r10*x8673))+((x8665*x8667)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8669))+((r01*x8671))+(((-1.0)*gconst149*r00*x8673)));
evalcond[3]=(((r20*x8670))+((cj2*sj1))+(((-1.0)*r22*x8673))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8669)));
evalcond[4]=((((-1.0)*cj0*x8672))+((cj0*x8668))+(((-1.0)*r02*x8673))+((r00*x8670))+(((-1.0)*gconst148*r01*x8669)));
evalcond[5]=(((sj0*x8668))+(((-1.0)*r12*x8673))+((r10*x8670))+(((-1.0)*x8667*x8669))+(((-1.0)*sj0*x8672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8674=((1.0)*gconst149);
CheckValue<IkReal> x8675=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8674))+(((-1.0)*gconst148*r10)))),-1);
if(!x8675.valid){
continue;
}
CheckValue<IkReal> x8676 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8674))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8675.value)))+(x8676.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8677=IKsin(j4);
IkReal x8678=IKcos(j4);
IkReal x8679=(gconst148*r11);
IkReal x8680=(sj1*sj2);
IkReal x8681=((1.0)*x8678);
IkReal x8682=(gconst149*x8678);
IkReal x8683=(gconst148*x8677);
IkReal x8684=((1.0)*cj1*cj2);
IkReal x8685=((1.0)*x8677);
evalcond[0]=((((-1.0)*gconst149*r20*x8685))+(((-1.0)*r22*x8681))+((r21*x8683)));
evalcond[1]=(cj0+(((-1.0)*r12*x8681))+((x8677*x8679))+(((-1.0)*gconst149*r10*x8685)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8681))+((r01*x8683))+(((-1.0)*gconst149*r00*x8685)));
evalcond[3]=(((cj2*sj1))+((r20*x8682))+(((-1.0)*gconst148*r21*x8681))+((cj1*sj2))+(((-1.0)*r22*x8685)));
evalcond[4]=((((-1.0)*cj0*x8684))+(((-1.0)*r02*x8685))+((r00*x8682))+(((-1.0)*gconst148*r01*x8681))+((cj0*x8680)));
evalcond[5]=((((-1.0)*r12*x8685))+((r10*x8682))+(((-1.0)*sj0*x8684))+(((-1.0)*x8679*x8681))+((sj0*x8680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8686=((1.0)*gconst149);
CheckValue<IkReal> x8687=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8686))+(((-1.0)*gconst148*r00)))),-1);
if(!x8687.valid){
continue;
}
CheckValue<IkReal> x8688 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8686))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8687.value)))+(x8688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8689=IKsin(j4);
IkReal x8690=IKcos(j4);
IkReal x8691=(gconst148*r11);
IkReal x8692=(sj1*sj2);
IkReal x8693=((1.0)*x8690);
IkReal x8694=(gconst149*x8690);
IkReal x8695=(gconst148*x8689);
IkReal x8696=((1.0)*cj1*cj2);
IkReal x8697=((1.0)*x8689);
evalcond[0]=(((r21*x8695))+(((-1.0)*gconst149*r20*x8697))+(((-1.0)*r22*x8693)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8697))+((x8689*x8691))+(((-1.0)*r12*x8693)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8693))+((r01*x8695))+(((-1.0)*gconst149*r00*x8697)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8693))+((r20*x8694))+(((-1.0)*r22*x8697)));
evalcond[4]=(((cj0*x8692))+(((-1.0)*cj0*x8696))+((r00*x8694))+(((-1.0)*r02*x8697))+(((-1.0)*gconst148*r01*x8693)));
evalcond[5]=((((-1.0)*x8691*x8693))+((sj0*x8692))+(((-1.0)*sj0*x8696))+((r10*x8694))+(((-1.0)*r12*x8697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8698=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8698;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8698);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8699=((1.0)*cj5);
IkReal x8700=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8699)));
j4eval[0]=x8700;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8699))))));
j4eval[2]=IKsign(x8700);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8701=cj5*cj5;
IkReal x8702=r01*r01;
IkReal x8703=(r01*sj5);
IkReal x8704=(cj5*r00);
IkReal x8705=((((2.0)*x8703*x8704))+(((-1.0)*(r02*r02)))+(((-1.0)*x8702))+((x8701*x8702))+(((-1.0)*x8701*(r00*r00))));
j4eval[0]=x8705;
j4eval[1]=IKsign(x8705);
j4eval[2]=((IKabs((x8704+(((-1.0)*x8703)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8706=cj5*cj5;
IkReal x8707=r01*r01;
IkReal x8708=(r01*sj5);
IkReal x8709=(cj5*r00);
CheckValue<IkReal> x8710=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8706*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x8707))+(((2.0)*x8708*x8709))+((x8706*x8707)))),-1);
if(!x8710.valid){
continue;
}
CheckValue<IkReal> x8711 = IKatan2WithCheck(IkReal((x8709+(((-1.0)*x8708)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8710.value)))+(x8711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8712=IKsin(j4);
IkReal x8713=IKcos(j4);
IkReal x8714=(cj5*r10);
IkReal x8715=(r01*sj5);
IkReal x8716=(cj5*r00);
IkReal x8717=(cj5*r20);
IkReal x8718=((1.0)*x8713);
IkReal x8719=((1.0)*x8712);
IkReal x8720=(sj5*x8712);
evalcond[0]=(((r21*x8720))+(((-1.0)*r22*x8718))+(((-1.0)*x8717*x8719)));
evalcond[1]=(((r11*x8720))+(((-1.0)*x8714*x8719))+(((-1.0)*r12*x8718)));
evalcond[2]=((((-1.0)*x8715*x8718))+((x8713*x8716))+(((-1.0)*r02*x8719)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8718))+(((-1.0)*x8716*x8719))+((x8712*x8715)));
evalcond[4]=(((cj2*sj1))+((x8713*x8717))+((cj1*sj2))+(((-1.0)*r22*x8719))+(((-1.0)*r21*sj5*x8718)));
evalcond[5]=(((x8713*x8714))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8719))+(((-1.0)*r11*sj5*x8718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8721=((1.0)*cj5);
CheckValue<IkReal> x8722=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8721)))),-1);
if(!x8722.valid){
continue;
}
CheckValue<IkReal> x8723 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8721)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8722.value)))+(x8723.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8724=IKsin(j4);
IkReal x8725=IKcos(j4);
IkReal x8726=(cj5*r10);
IkReal x8727=(r01*sj5);
IkReal x8728=(cj5*r00);
IkReal x8729=(cj5*r20);
IkReal x8730=((1.0)*x8725);
IkReal x8731=((1.0)*x8724);
IkReal x8732=(sj5*x8724);
evalcond[0]=((((-1.0)*x8729*x8731))+((r21*x8732))+(((-1.0)*r22*x8730)));
evalcond[1]=(((r11*x8732))+(((-1.0)*x8726*x8731))+(((-1.0)*r12*x8730)));
evalcond[2]=(((x8725*x8728))+(((-1.0)*x8727*x8730))+(((-1.0)*r02*x8731)));
evalcond[3]=((-1.0)+((x8724*x8727))+(((-1.0)*r02*x8730))+(((-1.0)*x8728*x8731)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8725*x8729))+(((-1.0)*r21*sj5*x8730))+(((-1.0)*r22*x8731)));
evalcond[5]=((((-1.0)*r11*sj5*x8730))+((x8725*x8726))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8733=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8733.valid){
continue;
}
CheckValue<IkReal> x8734 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8733.value)))+(x8734.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8735=IKsin(j4);
IkReal x8736=IKcos(j4);
IkReal x8737=(cj5*r10);
IkReal x8738=(r01*sj5);
IkReal x8739=(cj5*r00);
IkReal x8740=(cj5*r20);
IkReal x8741=((1.0)*x8736);
IkReal x8742=((1.0)*x8735);
IkReal x8743=(sj5*x8735);
evalcond[0]=((((-1.0)*x8740*x8742))+(((-1.0)*r22*x8741))+((r21*x8743)));
evalcond[1]=((((-1.0)*x8737*x8742))+(((-1.0)*r12*x8741))+((r11*x8743)));
evalcond[2]=((((-1.0)*x8738*x8741))+((x8736*x8739))+(((-1.0)*r02*x8742)));
evalcond[3]=((-1.0)+((x8735*x8738))+(((-1.0)*x8739*x8742))+(((-1.0)*r02*x8741)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8741))+((cj1*sj2))+(((-1.0)*r22*x8742))+((x8736*x8740)));
evalcond[5]=((((-1.0)*r12*x8742))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8741))+((x8736*x8737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8744=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8744;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8744);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8745=((1.0)*cj5);
IkReal x8746=((((-1.0)*r21*x8745))+(((-1.0)*r20*sj5)));
j4eval[0]=x8746;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x8745))+((r11*sj5))))));
j4eval[2]=IKsign(x8746);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8747=cj5*cj5;
IkReal x8748=r01*r01;
IkReal x8749=(cj5*r00);
IkReal x8750=(r01*sj5);
IkReal x8751=(x8748+((x8747*(r00*r00)))+(r02*r02)+(((-1.0)*x8747*x8748))+(((-2.0)*x8749*x8750)));
j4eval[0]=x8751;
j4eval[1]=((IKabs(r02))+(IKabs((x8749+(((-1.0)*x8750))))));
j4eval[2]=IKsign(x8751);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8752=cj5*cj5;
IkReal x8753=r01*r01;
IkReal x8754=(r01*sj5);
IkReal x8755=(cj5*r00);
CheckValue<IkReal> x8756=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8754*x8755))+(((-1.0)*x8752*x8753))+x8753+((x8752*(r00*r00)))+(r02*r02))),-1);
if(!x8756.valid){
continue;
}
CheckValue<IkReal> x8757 = IKatan2WithCheck(IkReal((x8755+(((-1.0)*x8754)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8756.value)))+(x8757.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8758=IKsin(j4);
IkReal x8759=IKcos(j4);
IkReal x8760=(cj5*r10);
IkReal x8761=(r01*sj5);
IkReal x8762=(cj5*r00);
IkReal x8763=(cj5*r20);
IkReal x8764=((1.0)*x8759);
IkReal x8765=((1.0)*x8758);
IkReal x8766=(sj5*x8758);
evalcond[0]=((((-1.0)*r22*x8764))+((r21*x8766))+(((-1.0)*x8763*x8765)));
evalcond[1]=((((-1.0)*x8760*x8765))+(((-1.0)*r12*x8764))+((r11*x8766)));
evalcond[2]=((((-1.0)*r02*x8765))+(((-1.0)*x8761*x8764))+((x8759*x8762)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8764))+((x8758*x8761))+(((-1.0)*x8762*x8765)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8765))+(((-1.0)*r21*sj5*x8764))+((x8759*x8763)));
evalcond[5]=((((-1.0)*r11*sj5*x8764))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8765))+((cj1*cj2))+((x8759*x8760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8767=((1.0)*cj5);
CheckValue<IkReal> x8768 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8767))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8768.valid){
continue;
}
CheckValue<IkReal> x8769=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8767))+(((-1.0)*r20*sj5)))),-1);
if(!x8769.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8768.value)+(((1.5707963267949)*(x8769.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8770=IKsin(j4);
IkReal x8771=IKcos(j4);
IkReal x8772=(cj5*r10);
IkReal x8773=(r01*sj5);
IkReal x8774=(cj5*r00);
IkReal x8775=(cj5*r20);
IkReal x8776=((1.0)*x8771);
IkReal x8777=((1.0)*x8770);
IkReal x8778=(sj5*x8770);
evalcond[0]=((((-1.0)*r22*x8776))+(((-1.0)*x8775*x8777))+((r21*x8778)));
evalcond[1]=((((-1.0)*x8772*x8777))+(((-1.0)*r12*x8776))+((r11*x8778)));
evalcond[2]=((((-1.0)*r02*x8777))+(((-1.0)*x8773*x8776))+((x8771*x8774)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8776))+(((-1.0)*x8774*x8777))+((x8770*x8773)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8777))+((x8771*x8775))+(((-1.0)*r21*sj5*x8776)));
evalcond[5]=((((-1.0)*r11*sj5*x8776))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8777))+((x8771*x8772))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8779 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8779.valid){
continue;
}
CheckValue<IkReal> x8780=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8779.value)+(((1.5707963267949)*(x8780.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8781=IKsin(j4);
IkReal x8782=IKcos(j4);
IkReal x8783=(cj5*r10);
IkReal x8784=(r01*sj5);
IkReal x8785=(cj5*r00);
IkReal x8786=(cj5*r20);
IkReal x8787=((1.0)*x8782);
IkReal x8788=((1.0)*x8781);
IkReal x8789=(sj5*x8781);
evalcond[0]=(((r21*x8789))+(((-1.0)*x8786*x8788))+(((-1.0)*r22*x8787)));
evalcond[1]=(((r11*x8789))+(((-1.0)*x8783*x8788))+(((-1.0)*r12*x8787)));
evalcond[2]=((((-1.0)*x8784*x8787))+(((-1.0)*r02*x8788))+((x8782*x8785)));
evalcond[3]=((1.0)+(((-1.0)*x8785*x8788))+((x8781*x8784))+(((-1.0)*r02*x8787)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8782*x8786))+(((-1.0)*r22*x8788))+(((-1.0)*r21*sj5*x8787)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((x8782*x8783))+(((-1.0)*r12*x8788))+(((-1.0)*r11*sj5*x8787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8790=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8790);
rxp1_1=(px*r21);
rxp1_2=(r11*x8790);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8791=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8791);
rxp1_1=(px*r21);
rxp1_2=(r11*x8791);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8792=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8792);
rxp1_1=(px*r21);
rxp1_2=(r11*x8792);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8795=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8795.valid){
continue;
}
IkReal x8793=x8795.value;
IkReal x8794=(sj0*x8793);
cj4array[0]=((((-1.0)*sj1*sj2*x8794))+((cj1*cj2*x8794)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8796=IKsin(j4);
IkReal x8797=IKcos(j4);
IkReal x8798=(r21*sj5);
IkReal x8799=(cj5*r20);
IkReal x8800=((1.0)*x8796);
IkReal x8801=((1.0)*x8797);
evalcond[0]=((-1.0)*r02*x8796);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8801)));
evalcond[2]=(((x8796*x8798))+(((-1.0)*x8799*x8800)));
evalcond[3]=((((-1.0)*cj5*r10*x8800))+((r11*sj5*x8796)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8797*x8799))+(((-1.0)*x8798*x8801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8804=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8804.valid){
continue;
}
IkReal x8802=x8804.value;
IkReal x8803=((1.0)*x8802);
cj4array[0]=((((-1.0)*cj1*sj2*x8803))+(((-1.0)*cj2*sj1*x8803)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8805=IKsin(j4);
IkReal x8806=IKcos(j4);
IkReal x8807=(r11*sj5);
IkReal x8808=((1.0)*sj0);
IkReal x8809=((1.0)*x8806);
IkReal x8810=((1.0)*cj5*x8805);
evalcond[0]=((-1.0)*r02*x8805);
evalcond[1]=((((-1.0)*r02*x8809))+(((-1.0)*x8808)));
evalcond[2]=((((-1.0)*r20*x8810))+((r21*sj5*x8805)));
evalcond[3]=((((-1.0)*r10*x8810))+((x8805*x8807)));
evalcond[4]=((((-1.0)*cj1*cj2*x8808))+(((-1.0)*x8807*x8809))+((sj0*sj1*sj2))+((cj5*r10*x8806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8811=IKPowWithIntegerCheck(r02,-1);
if(!x8811.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8811.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8812=IKsin(j4);
IkReal x8813=IKcos(j4);
IkReal x8814=(cj5*x8813);
IkReal x8815=(sj5*x8812);
IkReal x8816=((1.0)*sj5*x8813);
IkReal x8817=((1.0)*cj5*x8812);
evalcond[0]=((-1.0)*r02*x8812);
evalcond[1]=(((r21*x8815))+(((-1.0)*r20*x8817)));
evalcond[2]=((((-1.0)*r10*x8817))+((r11*x8815)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x8816))+((cj1*sj2))+((r20*x8814)));
evalcond[4]=((((-1.0)*r11*x8816))+((r10*x8814))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8818=((1.0)*sj0);
IkReal x8819=((1.0)*cj0);
CheckValue<IkReal> x8820=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8820.valid){
continue;
}
CheckValue<IkReal> x8821 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8818))+(((-1.0)*r02*x8819)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8819))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8820.value)))+(x8821.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8822=IKsin(j4);
IkReal x8823=IKcos(j4);
IkReal x8824=(cj5*r10);
IkReal x8825=(sj1*sj2);
IkReal x8826=(r01*sj5);
IkReal x8827=(cj5*r00);
IkReal x8828=(cj5*r20);
IkReal x8829=((1.0)*x8823);
IkReal x8830=((1.0)*cj1*cj2);
IkReal x8831=((1.0)*x8822);
IkReal x8832=(sj5*x8822);
evalcond[0]=(((r21*x8832))+(((-1.0)*x8828*x8831))+(((-1.0)*r22*x8829)));
evalcond[1]=((((-1.0)*x8824*x8831))+(((-1.0)*r12*x8829))+cj0+((r11*x8832)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8829))+(((-1.0)*x8827*x8831))+((x8822*x8826)));
evalcond[3]=(((x8823*x8828))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8829))+(((-1.0)*r22*x8831)));
evalcond[4]=(((x8823*x8827))+(((-1.0)*x8826*x8829))+(((-1.0)*cj0*x8830))+(((-1.0)*r02*x8831))+((cj0*x8825)));
evalcond[5]=(((x8823*x8824))+(((-1.0)*r11*sj5*x8829))+((sj0*x8825))+(((-1.0)*sj0*x8830))+(((-1.0)*r12*x8831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8833=((1.0)*cj5);
CheckValue<IkReal> x8834 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8833))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8834.valid){
continue;
}
CheckValue<IkReal> x8835=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8833)))),-1);
if(!x8835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8834.value)+(((1.5707963267949)*(x8835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8836=IKsin(j4);
IkReal x8837=IKcos(j4);
IkReal x8838=(cj5*r10);
IkReal x8839=(sj1*sj2);
IkReal x8840=(r01*sj5);
IkReal x8841=(cj5*r00);
IkReal x8842=(cj5*r20);
IkReal x8843=((1.0)*x8837);
IkReal x8844=((1.0)*cj1*cj2);
IkReal x8845=((1.0)*x8836);
IkReal x8846=(sj5*x8836);
evalcond[0]=((((-1.0)*x8842*x8845))+((r21*x8846))+(((-1.0)*r22*x8843)));
evalcond[1]=(cj0+((r11*x8846))+(((-1.0)*x8838*x8845))+(((-1.0)*r12*x8843)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8841*x8845))+(((-1.0)*r02*x8843))+((x8836*x8840)));
evalcond[3]=(((x8837*x8842))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8843))+(((-1.0)*r22*x8845)));
evalcond[4]=(((x8837*x8841))+(((-1.0)*cj0*x8844))+((cj0*x8839))+(((-1.0)*x8840*x8843))+(((-1.0)*r02*x8845)));
evalcond[5]=(((x8837*x8838))+(((-1.0)*sj0*x8844))+((sj0*x8839))+(((-1.0)*r11*sj5*x8843))+(((-1.0)*r12*x8845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8847=((1.0)*cj5);
CheckValue<IkReal> x8848=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8847)))),-1);
if(!x8848.valid){
continue;
}
CheckValue<IkReal> x8849 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8848.value)))+(x8849.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8850=IKsin(j4);
IkReal x8851=IKcos(j4);
IkReal x8852=(cj5*r10);
IkReal x8853=(sj1*sj2);
IkReal x8854=(r01*sj5);
IkReal x8855=(cj5*r00);
IkReal x8856=(cj5*r20);
IkReal x8857=((1.0)*x8851);
IkReal x8858=((1.0)*cj1*cj2);
IkReal x8859=((1.0)*x8850);
IkReal x8860=(sj5*x8850);
evalcond[0]=((((-1.0)*r22*x8857))+((r21*x8860))+(((-1.0)*x8856*x8859)));
evalcond[1]=(cj0+(((-1.0)*x8852*x8859))+(((-1.0)*r12*x8857))+((r11*x8860)));
evalcond[2]=(((x8850*x8854))+(((-1.0)*sj0))+(((-1.0)*r02*x8857))+(((-1.0)*x8855*x8859)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8859))+((cj1*sj2))+((x8851*x8856))+(((-1.0)*r21*sj5*x8857)));
evalcond[4]=((((-1.0)*cj0*x8858))+((cj0*x8853))+((x8851*x8855))+(((-1.0)*x8854*x8857))+(((-1.0)*r02*x8859)));
evalcond[5]=(((sj0*x8853))+(((-1.0)*r12*x8859))+(((-1.0)*r11*sj5*x8857))+((x8851*x8852))+(((-1.0)*sj0*x8858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8861=cj1*cj1;
IkReal x8862=cj2*cj2;
IkReal x8863=(r10*sj5);
IkReal x8864=(cj1*px);
IkReal x8865=((98000.0)*cj2);
IkReal x8866=(r00*sj5);
IkReal x8867=(cj5*r11);
IkReal x8868=(cj5*r01);
IkReal x8869=((10625.0)*cj1);
IkReal x8870=(sj1*sj2);
IkReal x8871=(cj1*py);
IkReal x8872=((9800.0)*x8870);
IkReal x8873=((9800.0)*cj1*cj2);
CheckValue<IkReal> x8874=IKPowWithIntegerCheck(IKsign(((42905.0)+(((-83300.0)*cj1*x8870))+(((83300.0)*cj2*x8861))+(((6740.25)*x8861))+(((-38416.0)*x8862))+(((-76832.0)*cj1*cj2*x8870))+(((76832.0)*x8861*x8862)))),-1);
if(!x8874.valid){
continue;
}
CheckValue<IkReal> x8875 = IKatan2WithCheck(IkReal((((x8865*x8871))+(((-1.0)*x8867*x8872))+((x8863*x8869))+((x8863*x8873))+(((-3350.0)*x8866))+(((-3350.0)*x8868))+((x8867*x8869))+(((-1.0)*x8863*x8872))+(((106250.0)*x8871))+(((-33500.0)*px))+((x8867*x8873))+(((-98000.0)*py*x8870)))),IkReal(((((3350.0)*x8867))+(((3350.0)*x8863))+((x8864*x8865))+(((-1.0)*x8868*x8872))+(((33500.0)*py))+(((-1.0)*x8866*x8872))+((x8866*x8873))+((x8866*x8869))+((x8868*x8869))+(((-98000.0)*px*x8870))+(((106250.0)*x8864))+((x8868*x8873)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8875.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8874.value)))+(x8875.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8876=IKcos(j0);
IkReal x8877=IKsin(j0);
IkReal x8878=((0.1)*sj5);
IkReal x8879=((0.425)*cj1);
IkReal x8880=((0.1)*cj5);
IkReal x8881=((0.392)*cj1*cj2);
IkReal x8882=((0.392)*sj1*sj2);
evalcond[0]=((((-1.0)*x8876*x8882))+(((-1.0)*r01*x8880))+(((-1.0)*px))+((x8876*x8881))+(((-0.134)*x8877))+((x8876*x8879))+(((-1.0)*r00*x8878)));
evalcond[1]=((((-1.0)*r11*x8880))+((x8877*x8879))+(((-1.0)*x8877*x8882))+(((-1.0)*py))+(((0.134)*x8876))+(((-1.0)*r10*x8878))+((x8877*x8881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8883=((1.0)*cj5);
IkReal x8884=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8883)));
j4eval[0]=x8884;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8883)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8884);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8885=((1.0)*cj5);
IkReal x8886=((((-1.0)*r11*x8885))+(((-1.0)*r10*sj5)));
j4eval[0]=x8886;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x8885))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x8886);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8887=((1.0)*sj0);
IkReal x8888=((1.0)*cj0);
IkReal x8889=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8889;
j4eval[1]=((IKabs(((((-1.0)*r12*x8887))+(((-1.0)*r02*x8888)))))+(IKabs(((((-1.0)*r01*sj5*x8888))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8887))))));
j4eval[2]=IKsign(x8889);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8890=((-1.0)*r20);
IkReal x8892 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8892)==0){
continue;
}
IkReal x8891=pow(x8892,-0.5);
CheckValue<IkReal> x8893 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8890),IKFAST_ATAN2_MAGTHRESH);
if(!x8893.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8893.value));
IkReal gconst1=(r21*x8891);
IkReal gconst2=(x8890*x8891);
CheckValue<IkReal> x8894 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8894.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8894.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8895=((-1.0)*r20);
IkReal x8896=x8891;
CheckValue<IkReal> x8898 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8895),IKFAST_ATAN2_MAGTHRESH);
if(!x8898.valid){
continue;
}
IkReal x8897=((-1.0)*(x8898.value));
sj5=gconst1;
cj5=gconst2;
j5=x8897;
IkReal gconst0=x8897;
IkReal gconst1=(r21*x8896);
IkReal gconst2=(x8895*x8896);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8899=((-1.0)*r20);
IkReal x8900=x8891;
CheckValue<IkReal> x8902 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8899),IKFAST_ATAN2_MAGTHRESH);
if(!x8902.valid){
continue;
}
IkReal x8901=((-1.0)*(x8902.value));
sj5=gconst1;
cj5=gconst2;
j5=x8901;
IkReal gconst0=x8901;
IkReal gconst1=(r21*x8900);
IkReal gconst2=(x8899*x8900);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8903=((-1.0)*r20);
IkReal x8904=x8891;
CheckValue<IkReal> x8906 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8903),IKFAST_ATAN2_MAGTHRESH);
if(!x8906.valid){
continue;
}
IkReal x8905=((-1.0)*(x8906.value));
sj5=gconst1;
cj5=gconst2;
j5=x8905;
IkReal gconst0=x8905;
IkReal gconst1=(r21*x8904);
IkReal gconst2=(x8903*x8904);
IkReal x8907=r22*r22;
CheckValue<IkReal> x8911=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8907))),-1);
if(!x8911.valid){
continue;
}
IkReal x8908=x8911.value;
IkReal x8909=(sj3*x8908);
IkReal x8910=(((x8909*(r21*r21*r21*r21)))+((sj3*x8907))+((x8909*(r20*r20*r20*r20)))+(((2.0)*x8909*(r20*r20)*(r21*r21))));
j4eval[0]=x8910;
j4eval[1]=IKsign(x8910);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8912=((-1.0)*r20);
IkReal x8913=x8891;
CheckValue<IkReal> x8915 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8912),IKFAST_ATAN2_MAGTHRESH);
if(!x8915.valid){
continue;
}
IkReal x8914=((-1.0)*(x8915.value));
sj5=gconst1;
cj5=gconst2;
j5=x8914;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8914;
IkReal gconst1=(r21*x8913);
IkReal gconst2=(x8912*x8913);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8916=((-1.0)*r20);
IkReal x8917=x8891;
CheckValue<IkReal> x8919 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8916),IKFAST_ATAN2_MAGTHRESH);
if(!x8919.valid){
continue;
}
IkReal x8918=((-1.0)*(x8919.value));
sj5=gconst1;
cj5=gconst2;
j5=x8918;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8918;
IkReal gconst1=(r21*x8917);
IkReal gconst2=(x8916*x8917);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8920=((-1.0)*r20);
IkReal x8921=x8891;
CheckValue<IkReal> x8923 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8920),IKFAST_ATAN2_MAGTHRESH);
if(!x8923.valid){
continue;
}
IkReal x8922=((-1.0)*(x8923.value));
sj5=gconst1;
cj5=gconst2;
j5=x8922;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8922;
IkReal gconst1=(r21*x8921);
IkReal gconst2=(x8920*x8921);
IkReal x8924=((1.0)*(r22*r22));
CheckValue<IkReal> x8928=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8924))),-1);
if(!x8928.valid){
continue;
}
IkReal x8925=x8928.value;
IkReal x8926=((1.0)*x8925);
IkReal x8927=((((-1.0)*x8926*(r20*r20*r20*r20)))+(((-1.0)*x8924))+(((-1.0)*x8926*(r21*r21*r21*r21)))+(((-2.0)*x8925*(r20*r20)*(r21*r21))));
j4eval[0]=x8927;
j4eval[1]=IKsign(x8927);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8929=((-1.0)*r20);
IkReal x8930=x8891;
CheckValue<IkReal> x8932 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8929),IKFAST_ATAN2_MAGTHRESH);
if(!x8932.valid){
continue;
}
IkReal x8931=((-1.0)*(x8932.value));
sj5=gconst1;
cj5=gconst2;
j5=x8931;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8931;
IkReal gconst1=(r21*x8930);
IkReal gconst2=(x8929*x8930);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8933=((-1.0)*r20);
IkReal x8934=x8891;
CheckValue<IkReal> x8936 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8933),IKFAST_ATAN2_MAGTHRESH);
if(!x8936.valid){
continue;
}
IkReal x8935=((-1.0)*(x8936.value));
sj5=gconst1;
cj5=gconst2;
j5=x8935;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8935;
IkReal gconst1=(r21*x8934);
IkReal gconst2=(x8933*x8934);
IkReal x8937=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8941=IKPowWithIntegerCheck(x8937,-1);
if(!x8941.valid){
continue;
}
IkReal x8938=x8941.value;
IkReal x8939=((1.0)*x8938);
IkReal x8940=((((-1.0)*x8939*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8938))+(((-1.0)*x8939*(r10*r10)*(r20*r20))));
j4eval[0]=x8940;
j4eval[1]=r12;
j4eval[2]=x8937;
j4eval[3]=IKsign(x8940);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8942=((-1.0)*r20);
IkReal x8943=x8891;
CheckValue<IkReal> x8945 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8942),IKFAST_ATAN2_MAGTHRESH);
if(!x8945.valid){
continue;
}
IkReal x8944=((-1.0)*(x8945.value));
sj5=gconst1;
cj5=gconst2;
j5=x8944;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8944;
IkReal gconst1=(r21*x8943);
IkReal gconst2=(x8942*x8943);
IkReal x8946=r22*r22;
IkReal x8947=(cj1*r12*sj2);
IkReal x8948=(cj2*r12*sj1);
CheckValue<IkReal> x8952=IKPowWithIntegerCheck(((-1.0)+x8946),-1);
if(!x8952.valid){
continue;
}
IkReal x8949=x8952.value;
if((((1.0)+(((-1.0)*x8946)))) < -0.00001)
continue;
IkReal x8950=IKsqrt(((1.0)+(((-1.0)*x8946))));
IkReal x8951=(r22*x8949*x8950);
j4eval[0]=((IKabs(((((-1.0)*x8948))+(((-1.0)*x8947)))))+(IKabs((((x8947*x8951))+((x8948*x8951))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8953=(cj1*sj2);
IkReal x8954=(cj2*sj1);
IkReal x8955=((1.0)*r12);
IkReal x8956=(gconst1*r11);
IkReal x8957=((1.0)*gconst2*r10);
CheckValue<IkReal> x8958 = IKatan2WithCheck(IkReal((((x8953*x8956))+((x8954*x8956))+(((-1.0)*x8953*x8957))+(((-1.0)*x8954*x8957)))),IkReal(((((-1.0)*x8953*x8955))+(((-1.0)*x8954*x8955)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8958.valid){
continue;
}
CheckValue<IkReal> x8959=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8958.value)+(((1.5707963267949)*(x8959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8960=IKcos(j4);
IkReal x8961=IKsin(j4);
IkReal x8962=((1.0)*x8960);
IkReal x8963=(gconst1*x8960);
IkReal x8964=(gconst1*x8961);
IkReal x8965=((1.0)*gconst2*x8961);
evalcond[0]=(((r11*x8963))+(((-1.0)*gconst2*r10*x8962))+((r12*x8961)));
evalcond[1]=((((-1.0)*r22*x8962))+(((-1.0)*r20*x8965))+((r21*x8964)));
evalcond[2]=((((-1.0)*r00*x8965))+((r01*x8964))+(((-1.0)*r02*x8962)));
evalcond[3]=((1.0)+((r11*x8964))+(((-1.0)*r10*x8965))+(((-1.0)*r12*x8962)));
evalcond[4]=(((cj2*sj1))+((r22*x8961))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8962))+((r21*x8963)));
evalcond[5]=(((r02*x8961))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8963))+(((-1.0)*gconst2*r00*x8962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8966=(gconst2*r10);
IkReal x8967=(gconst1*r11);
CheckValue<IkReal> x8968=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8966*x8966)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8967*x8967)))+(((2.0)*x8966*x8967)))),-1);
if(!x8968.valid){
continue;
}
CheckValue<IkReal> x8969 = IKatan2WithCheck(IkReal((x8967+(((-1.0)*x8966)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8968.value)))+(x8969.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8970=IKcos(j4);
IkReal x8971=IKsin(j4);
IkReal x8972=((1.0)*x8970);
IkReal x8973=(gconst1*x8970);
IkReal x8974=(gconst1*x8971);
IkReal x8975=((1.0)*gconst2*x8971);
evalcond[0]=(((r11*x8973))+((r12*x8971))+(((-1.0)*gconst2*r10*x8972)));
evalcond[1]=(((r21*x8974))+(((-1.0)*r22*x8972))+(((-1.0)*r20*x8975)));
evalcond[2]=(((r01*x8974))+(((-1.0)*r02*x8972))+(((-1.0)*r00*x8975)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8975))+((r11*x8974))+(((-1.0)*r12*x8972)));
evalcond[4]=(((r21*x8973))+((cj2*sj1))+(((-1.0)*gconst2*r20*x8972))+((cj1*sj2))+((r22*x8971)));
evalcond[5]=(((r01*x8973))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8972))+((r02*x8971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8976=((1.0)*gconst2);
CheckValue<IkReal> x8977 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8976)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8977.valid){
continue;
}
CheckValue<IkReal> x8978=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8976)))),-1);
if(!x8978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8977.value)+(((1.5707963267949)*(x8978.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8979=IKcos(j4);
IkReal x8980=IKsin(j4);
IkReal x8981=((1.0)*x8979);
IkReal x8982=(gconst1*x8979);
IkReal x8983=(gconst1*x8980);
IkReal x8984=((1.0)*gconst2*x8980);
evalcond[0]=((((-1.0)*gconst2*r10*x8981))+((r11*x8982))+((r12*x8980)));
evalcond[1]=((((-1.0)*r20*x8984))+((r21*x8983))+(((-1.0)*r22*x8981)));
evalcond[2]=(((r01*x8983))+(((-1.0)*r02*x8981))+(((-1.0)*r00*x8984)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8981))+((r11*x8983))+(((-1.0)*r10*x8984)));
evalcond[4]=((((-1.0)*gconst2*r20*x8981))+((cj2*sj1))+((r22*x8980))+((cj1*sj2))+((r21*x8982)));
evalcond[5]=(((r01*x8982))+((r02*x8980))+(((-1.0)*gconst2*r00*x8981))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8985=((-1.0)*r20);
IkReal x8986=x8891;
CheckValue<IkReal> x8988 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8985),IKFAST_ATAN2_MAGTHRESH);
if(!x8988.valid){
continue;
}
IkReal x8987=((-1.0)*(x8988.value));
sj5=gconst1;
cj5=gconst2;
j5=x8987;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8987;
IkReal gconst1=(r21*x8986);
IkReal gconst2=(x8985*x8986);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8989=((-1.0)*r20);
IkReal x8990=x8891;
CheckValue<IkReal> x8992 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8989),IKFAST_ATAN2_MAGTHRESH);
if(!x8992.valid){
continue;
}
IkReal x8991=((-1.0)*(x8992.value));
sj5=gconst1;
cj5=gconst2;
j5=x8991;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8991;
IkReal gconst1=(r21*x8990);
IkReal gconst2=(x8989*x8990);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8993=((-1.0)*r20);
IkReal x8994=x8891;
CheckValue<IkReal> x8996 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8993),IKFAST_ATAN2_MAGTHRESH);
if(!x8996.valid){
continue;
}
IkReal x8995=((-1.0)*(x8996.value));
sj5=gconst1;
cj5=gconst2;
j5=x8995;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8995;
IkReal gconst1=(r21*x8994);
IkReal gconst2=(x8993*x8994);
IkReal x8997=r22*r22;
IkReal x8998=(cj1*r12*sj2);
IkReal x8999=(cj2*r12*sj1);
CheckValue<IkReal> x9003=IKPowWithIntegerCheck(((-1.0)+x8997),-1);
if(!x9003.valid){
continue;
}
IkReal x9000=x9003.value;
if((((1.0)+(((-1.0)*x8997)))) < -0.00001)
continue;
IkReal x9001=IKsqrt(((1.0)+(((-1.0)*x8997))));
IkReal x9002=(r22*x9000*x9001);
j4eval[0]=((IKabs((((x8998*x9002))+((x8999*x9002)))))+(IKabs(((((-1.0)*x8998))+(((-1.0)*x8999))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9004=(cj1*sj2);
IkReal x9005=(cj2*sj1);
IkReal x9006=((1.0)*r12);
IkReal x9007=(gconst1*r11);
IkReal x9008=((1.0)*gconst2*r10);
CheckValue<IkReal> x9009=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9009.valid){
continue;
}
CheckValue<IkReal> x9010 = IKatan2WithCheck(IkReal(((((-1.0)*x9004*x9008))+((x9005*x9007))+(((-1.0)*x9005*x9008))+((x9004*x9007)))),IkReal(((((-1.0)*x9004*x9006))+(((-1.0)*x9005*x9006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9009.value)))+(x9010.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9011=IKcos(j4);
IkReal x9012=IKsin(j4);
IkReal x9013=((1.0)*x9011);
IkReal x9014=(gconst1*x9011);
IkReal x9015=(gconst1*x9012);
IkReal x9016=((1.0)*gconst2*x9012);
evalcond[0]=(((r12*x9012))+(((-1.0)*gconst2*r10*x9013))+((r11*x9014)));
evalcond[1]=((((-1.0)*r22*x9013))+(((-1.0)*r20*x9016))+((r21*x9015)));
evalcond[2]=((((-1.0)*r00*x9016))+(((-1.0)*r02*x9013))+((r01*x9015)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9016))+(((-1.0)*r12*x9013))+((r11*x9015)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9013))+((cj1*sj2))+((r22*x9012))+((r21*x9014)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x9012))+((cj1*cj2))+((r01*x9014))+(((-1.0)*gconst2*r00*x9013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9017=(gconst1*r11);
IkReal x9018=(gconst2*r10);
CheckValue<IkReal> x9019 = IKatan2WithCheck(IkReal(((((-1.0)*x9018))+x9017)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9019.valid){
continue;
}
CheckValue<IkReal> x9020=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9017*x9018))+(x9017*x9017)+(x9018*x9018))),-1);
if(!x9020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9019.value)+(((1.5707963267949)*(x9020.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9021=IKcos(j4);
IkReal x9022=IKsin(j4);
IkReal x9023=((1.0)*x9021);
IkReal x9024=(gconst1*x9021);
IkReal x9025=(gconst1*x9022);
IkReal x9026=((1.0)*gconst2*x9022);
evalcond[0]=((((-1.0)*gconst2*r10*x9023))+((r11*x9024))+((r12*x9022)));
evalcond[1]=(((r21*x9025))+(((-1.0)*r20*x9026))+(((-1.0)*r22*x9023)));
evalcond[2]=(((r01*x9025))+(((-1.0)*r02*x9023))+(((-1.0)*r00*x9026)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9023))+((r11*x9025))+(((-1.0)*r10*x9026)));
evalcond[4]=((((-1.0)*gconst2*r20*x9023))+((cj2*sj1))+((cj1*sj2))+((r21*x9024))+((r22*x9022)));
evalcond[5]=((((-1.0)*gconst2*r00*x9023))+((r01*x9024))+(((-1.0)*sj1*sj2))+((r02*x9022))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9027 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9027.valid){
continue;
}
CheckValue<IkReal> x9028=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9027.value)+(((1.5707963267949)*(x9028.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9029=IKcos(j4);
IkReal x9030=IKsin(j4);
IkReal x9031=((1.0)*x9029);
IkReal x9032=(gconst1*x9029);
IkReal x9033=(gconst1*x9030);
IkReal x9034=((1.0)*gconst2*x9030);
evalcond[0]=((((-1.0)*gconst2*r10*x9031))+((r11*x9032))+((r12*x9030)));
evalcond[1]=(((r21*x9033))+(((-1.0)*r20*x9034))+(((-1.0)*r22*x9031)));
evalcond[2]=(((r01*x9033))+(((-1.0)*r00*x9034))+(((-1.0)*r02*x9031)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9034))+(((-1.0)*r12*x9031))+((r11*x9033)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9031))+((cj1*sj2))+((r22*x9030))+((r21*x9032)));
evalcond[5]=(((r01*x9032))+(((-1.0)*sj1*sj2))+((r02*x9030))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9035=((-1.0)*r20);
IkReal x9036=x8891;
CheckValue<IkReal> x9038 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9035),IKFAST_ATAN2_MAGTHRESH);
if(!x9038.valid){
continue;
}
IkReal x9037=((-1.0)*(x9038.value));
sj5=gconst1;
cj5=gconst2;
j5=x9037;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9037;
IkReal gconst1=(r21*x9036);
IkReal gconst2=(x9035*x9036);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9039=((-1.0)*r20);
IkReal x9040=x8891;
CheckValue<IkReal> x9042 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9039),IKFAST_ATAN2_MAGTHRESH);
if(!x9042.valid){
continue;
}
IkReal x9041=((-1.0)*(x9042.value));
sj5=gconst1;
cj5=gconst2;
j5=x9041;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9041;
IkReal gconst1=(r21*x9040);
IkReal gconst2=(x9039*x9040);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9043=((-1.0)*r20);
IkReal x9044=x8891;
CheckValue<IkReal> x9046 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9043),IKFAST_ATAN2_MAGTHRESH);
if(!x9046.valid){
continue;
}
IkReal x9045=((-1.0)*(x9046.value));
sj5=gconst1;
cj5=gconst2;
j5=x9045;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9045;
IkReal gconst1=(r21*x9044);
IkReal gconst2=(x9043*x9044);
IkReal x9047=r22*r22;
IkReal x9048=((1.0)*r02);
IkReal x9049=(cj1*sj2);
IkReal x9050=(cj2*sj1);
CheckValue<IkReal> x9054=IKPowWithIntegerCheck(((-1.0)+x9047),-1);
if(!x9054.valid){
continue;
}
IkReal x9051=x9054.value;
if((((1.0)+(((-1.0)*x9047)))) < -0.00001)
continue;
IkReal x9052=IKsqrt(((1.0)+(((-1.0)*x9047))));
IkReal x9053=(r02*r22*x9051*x9052);
j4eval[0]=((IKabs(((((-1.0)*x9048*x9050))+(((-1.0)*x9048*x9049)))))+(IKabs((((x9050*x9053))+((x9049*x9053))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9055=(cj1*sj2);
IkReal x9056=(gconst1*r01);
IkReal x9057=((1.0)*r02);
IkReal x9058=(cj2*sj1);
IkReal x9059=((1.0)*gconst2*r00);
CheckValue<IkReal> x9060 = IKatan2WithCheck(IkReal((((x9055*x9056))+(((-1.0)*x9055*x9059))+((x9056*x9058))+(((-1.0)*x9058*x9059)))),IkReal(((((-1.0)*x9055*x9057))+(((-1.0)*x9057*x9058)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9060.valid){
continue;
}
CheckValue<IkReal> x9061=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9060.value)+(((1.5707963267949)*(x9061.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9062=IKcos(j4);
IkReal x9063=IKsin(j4);
IkReal x9064=((1.0)*x9062);
IkReal x9065=(gconst1*x9062);
IkReal x9066=(gconst1*x9063);
IkReal x9067=((1.0)*gconst2*x9063);
evalcond[0]=(((r01*x9065))+(((-1.0)*gconst2*r00*x9064))+((r02*x9063)));
evalcond[1]=((((-1.0)*r20*x9067))+((r21*x9066))+(((-1.0)*r22*x9064)));
evalcond[2]=(((r11*x9066))+(((-1.0)*r10*x9067))+(((-1.0)*r12*x9064)));
evalcond[3]=((-1.0)+((r01*x9066))+(((-1.0)*r02*x9064))+(((-1.0)*r00*x9067)));
evalcond[4]=(((cj2*sj1))+((r22*x9063))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9064))+((r21*x9065)));
evalcond[5]=(((r11*x9065))+((r12*x9063))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9068=(gconst1*r01);
IkReal x9069=(gconst2*r00);
CheckValue<IkReal> x9070=IKPowWithIntegerCheck(IKsign(((x9068*x9068)+(x9069*x9069)+(r02*r02)+(((-2.0)*x9068*x9069)))),-1);
if(!x9070.valid){
continue;
}
CheckValue<IkReal> x9071 = IKatan2WithCheck(IkReal((x9068+(((-1.0)*x9069)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9070.value)))+(x9071.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9072=IKcos(j4);
IkReal x9073=IKsin(j4);
IkReal x9074=((1.0)*x9072);
IkReal x9075=(gconst1*x9072);
IkReal x9076=(gconst1*x9073);
IkReal x9077=((1.0)*gconst2*x9073);
evalcond[0]=((((-1.0)*gconst2*r00*x9074))+((r01*x9075))+((r02*x9073)));
evalcond[1]=(((r21*x9076))+(((-1.0)*r22*x9074))+(((-1.0)*r20*x9077)));
evalcond[2]=((((-1.0)*r12*x9074))+((r11*x9076))+(((-1.0)*r10*x9077)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9074))+(((-1.0)*r00*x9077))+((r01*x9076)));
evalcond[4]=(((cj2*sj1))+((r21*x9075))+((cj1*sj2))+((r22*x9073))+(((-1.0)*gconst2*r20*x9074)));
evalcond[5]=((((-1.0)*gconst2*r10*x9074))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x9075))+((r12*x9073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9078=((1.0)*gconst2);
CheckValue<IkReal> x9079=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9078)))),-1);
if(!x9079.valid){
continue;
}
CheckValue<IkReal> x9080 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9078)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9079.value)))+(x9080.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9081=IKcos(j4);
IkReal x9082=IKsin(j4);
IkReal x9083=((1.0)*x9081);
IkReal x9084=(gconst1*x9081);
IkReal x9085=(gconst1*x9082);
IkReal x9086=((1.0)*gconst2*x9082);
evalcond[0]=((((-1.0)*gconst2*r00*x9083))+((r01*x9084))+((r02*x9082)));
evalcond[1]=(((r21*x9085))+(((-1.0)*r20*x9086))+(((-1.0)*r22*x9083)));
evalcond[2]=(((r11*x9085))+(((-1.0)*r10*x9086))+(((-1.0)*r12*x9083)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9086))+((r01*x9085))+(((-1.0)*r02*x9083)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9083))+((cj1*sj2))+((r21*x9084))+((r22*x9082)));
evalcond[5]=(((r11*x9084))+((r12*x9082))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9087=((-1.0)*r20);
IkReal x9088=x8891;
CheckValue<IkReal> x9090 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9087),IKFAST_ATAN2_MAGTHRESH);
if(!x9090.valid){
continue;
}
IkReal x9089=((-1.0)*(x9090.value));
sj5=gconst1;
cj5=gconst2;
j5=x9089;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9089;
IkReal gconst1=(r21*x9088);
IkReal gconst2=(x9087*x9088);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9091=((-1.0)*r20);
IkReal x9092=x8891;
CheckValue<IkReal> x9094 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9091),IKFAST_ATAN2_MAGTHRESH);
if(!x9094.valid){
continue;
}
IkReal x9093=((-1.0)*(x9094.value));
sj5=gconst1;
cj5=gconst2;
j5=x9093;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9093;
IkReal gconst1=(r21*x9092);
IkReal gconst2=(x9091*x9092);
IkReal x9095=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9099=IKPowWithIntegerCheck(x9095,-1);
if(!x9099.valid){
continue;
}
IkReal x9096=x9099.value;
IkReal x9097=((1.0)*x9096);
IkReal x9098=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9096))+(((-1.0)*x9097*(r01*r01)*(r21*r21)))+(((-1.0)*x9097*(r00*r00)*(r20*r20))));
j4eval[0]=x9098;
j4eval[1]=IKsign(x9098);
j4eval[2]=r02;
j4eval[3]=x9095;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9100=((-1.0)*r20);
IkReal x9101=x8891;
CheckValue<IkReal> x9103 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9100),IKFAST_ATAN2_MAGTHRESH);
if(!x9103.valid){
continue;
}
IkReal x9102=((-1.0)*(x9103.value));
sj5=gconst1;
cj5=gconst2;
j5=x9102;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9102;
IkReal gconst1=(r21*x9101);
IkReal gconst2=(x9100*x9101);
IkReal x9104=r22*r22;
IkReal x9105=((1.0)*r02);
IkReal x9106=(cj1*sj2);
IkReal x9107=(cj2*sj1);
CheckValue<IkReal> x9111=IKPowWithIntegerCheck(((-1.0)+x9104),-1);
if(!x9111.valid){
continue;
}
IkReal x9108=x9111.value;
if((((1.0)+(((-1.0)*x9104)))) < -0.00001)
continue;
IkReal x9109=IKsqrt(((1.0)+(((-1.0)*x9104))));
IkReal x9110=(r02*r22*x9108*x9109);
j4eval[0]=((IKabs(((((-1.0)*x9105*x9107))+(((-1.0)*x9105*x9106)))))+(IKabs((((x9106*x9110))+((x9107*x9110))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9112=(cj1*sj2);
IkReal x9113=(gconst1*r01);
IkReal x9114=((1.0)*r02);
IkReal x9115=(cj2*sj1);
IkReal x9116=((1.0)*gconst2*r00);
CheckValue<IkReal> x9117 = IKatan2WithCheck(IkReal(((((-1.0)*x9115*x9116))+((x9112*x9113))+(((-1.0)*x9112*x9116))+((x9113*x9115)))),IkReal(((((-1.0)*x9114*x9115))+(((-1.0)*x9112*x9114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9117.valid){
continue;
}
CheckValue<IkReal> x9118=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9117.value)+(((1.5707963267949)*(x9118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9119=IKcos(j4);
IkReal x9120=IKsin(j4);
IkReal x9121=((1.0)*x9119);
IkReal x9122=(gconst1*x9119);
IkReal x9123=(gconst1*x9120);
IkReal x9124=((1.0)*gconst2*x9120);
evalcond[0]=((((-1.0)*gconst2*r00*x9121))+((r02*x9120))+((r01*x9122)));
evalcond[1]=((((-1.0)*r20*x9124))+(((-1.0)*r22*x9121))+((r21*x9123)));
evalcond[2]=((((-1.0)*r12*x9121))+(((-1.0)*r10*x9124))+((r11*x9123)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9121))+((r01*x9123))+(((-1.0)*r00*x9124)));
evalcond[4]=(((r22*x9120))+((cj2*sj1))+(((-1.0)*gconst2*r20*x9121))+((cj1*sj2))+((r21*x9122)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9121))+((cj1*cj2))+((r11*x9122))+((r12*x9120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9125=(gconst1*r01);
IkReal x9126=(gconst2*r00);
CheckValue<IkReal> x9127=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x9125*x9126))+(((-1.0)*(x9126*x9126)))+(((-1.0)*(x9125*x9125))))),-1);
if(!x9127.valid){
continue;
}
CheckValue<IkReal> x9128 = IKatan2WithCheck(IkReal((x9125+(((-1.0)*x9126)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9127.value)))+(x9128.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9129=IKcos(j4);
IkReal x9130=IKsin(j4);
IkReal x9131=((1.0)*x9129);
IkReal x9132=(gconst1*x9129);
IkReal x9133=(gconst1*x9130);
IkReal x9134=((1.0)*gconst2*x9130);
evalcond[0]=(((r02*x9130))+(((-1.0)*gconst2*r00*x9131))+((r01*x9132)));
evalcond[1]=((((-1.0)*r22*x9131))+(((-1.0)*r20*x9134))+((r21*x9133)));
evalcond[2]=((((-1.0)*r12*x9131))+(((-1.0)*r10*x9134))+((r11*x9133)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9131))+(((-1.0)*r00*x9134))+((r01*x9133)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9130))+((r21*x9132))+(((-1.0)*gconst2*r20*x9131)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9131))+((r12*x9130))+((r11*x9132))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9135 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9135.valid){
continue;
}
CheckValue<IkReal> x9136=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9135.value)+(((1.5707963267949)*(x9136.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9137=IKcos(j4);
IkReal x9138=IKsin(j4);
IkReal x9139=((1.0)*x9137);
IkReal x9140=(gconst1*x9137);
IkReal x9141=(gconst1*x9138);
IkReal x9142=((1.0)*gconst2*x9138);
evalcond[0]=(((r01*x9140))+((r02*x9138))+(((-1.0)*gconst2*r00*x9139)));
evalcond[1]=((((-1.0)*r20*x9142))+(((-1.0)*r22*x9139))+((r21*x9141)));
evalcond[2]=((((-1.0)*r12*x9139))+(((-1.0)*r10*x9142))+((r11*x9141)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9142))+((r01*x9141))+(((-1.0)*r02*x9139)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9138))+((r21*x9140))+(((-1.0)*gconst2*r20*x9139)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9139))+((r12*x9138))+((cj1*cj2))+((r11*x9140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9143=((-1.0)*r20);
IkReal x9144=((-1.0)*px);
CheckValue<IkReal> x9146 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9143),IKFAST_ATAN2_MAGTHRESH);
if(!x9146.valid){
continue;
}
IkReal x9145=((-1.0)*(x9146.value));
sj5=gconst1;
cj5=gconst2;
j5=x9145;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9144);
rxp1_1=(px*r21);
rxp1_2=(r11*x9144);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9145;
IkReal gconst1=r21;
IkReal gconst2=x9143;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9147=((-1.0)*r20);
IkReal x9148=((-1.0)*px);
CheckValue<IkReal> x9150 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9147),IKFAST_ATAN2_MAGTHRESH);
if(!x9150.valid){
continue;
}
IkReal x9149=((-1.0)*(x9150.value));
sj5=gconst1;
cj5=gconst2;
j5=x9149;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9148);
rxp1_1=(px*r21);
rxp1_2=(r11*x9148);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9149;
IkReal gconst1=r21;
IkReal gconst2=x9147;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9151=((-1.0)*r20);
IkReal x9152=((-1.0)*px);
CheckValue<IkReal> x9154 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9151),IKFAST_ATAN2_MAGTHRESH);
if(!x9154.valid){
continue;
}
IkReal x9153=((-1.0)*(x9154.value));
sj5=gconst1;
cj5=gconst2;
j5=x9153;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9152);
rxp1_1=(px*r21);
rxp1_2=(r11*x9152);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9153;
IkReal gconst1=r21;
IkReal gconst2=x9151;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9157=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9157.valid){
continue;
}
IkReal x9155=x9157.value;
IkReal x9156=(sj0*x9155);
cj4array[0]=(((cj1*cj2*x9156))+(((-1.0)*sj1*sj2*x9156)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9158=IKsin(j4);
IkReal x9159=IKcos(j4);
IkReal x9160=((1.0)*gconst2);
IkReal x9161=(gconst1*r21);
evalcond[0]=(r02*x9158);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9159)));
evalcond[2]=((((-1.0)*r20*x9158*x9160))+((x9158*x9161)));
evalcond[3]=((((-1.0)*r10*x9158*x9160))+((gconst1*r11*x9158)));
evalcond[4]=(((cj2*sj1))+((x9159*x9161))+((cj1*sj2))+(((-1.0)*r20*x9159*x9160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9164=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9164.valid){
continue;
}
IkReal x9162=x9164.value;
IkReal x9163=((1.0)*x9162);
cj4array[0]=((((-1.0)*cj1*sj2*x9163))+(((-1.0)*cj2*sj1*x9163)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9165=IKsin(j4);
IkReal x9166=IKcos(j4);
IkReal x9167=((1.0)*sj0);
IkReal x9168=(gconst1*x9165);
IkReal x9169=((1.0)*x9166);
IkReal x9170=((1.0)*gconst2*x9165);
evalcond[0]=(r02*x9165);
evalcond[1]=((((-1.0)*r02*x9169))+(((-1.0)*x9167)));
evalcond[2]=(((r21*x9168))+(((-1.0)*r20*x9170)));
evalcond[3]=((((-1.0)*r10*x9170))+((r11*x9168)));
evalcond[4]=((((-1.0)*cj1*cj2*x9167))+(((-1.0)*gconst2*r10*x9169))+((gconst1*r11*x9166))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9171=IKPowWithIntegerCheck(r02,-1);
if(!x9171.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9171.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9172=IKsin(j4);
IkReal x9173=IKcos(j4);
IkReal x9174=(gconst1*r21);
IkReal x9175=(gconst1*r11);
IkReal x9176=((1.0)*gconst2*r10);
IkReal x9177=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9172);
evalcond[1]=((((-1.0)*x9172*x9177))+((x9172*x9174)));
evalcond[2]=((((-1.0)*x9172*x9176))+((x9172*x9175)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9173*x9177))+((x9173*x9174)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9173*x9176))+((x9173*x9175))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9178=(cj2*sj1);
IkReal x9179=(cj1*sj2);
IkReal x9180=(gconst1*r21);
IkReal x9181=((1.0)*gconst2*r20);
CheckValue<IkReal> x9182 = IKatan2WithCheck(IkReal((((r22*x9179))+((r22*x9178)))),IkReal((((x9178*x9180))+((x9179*x9180))+(((-1.0)*x9179*x9181))+(((-1.0)*x9178*x9181)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9182.valid){
continue;
}
CheckValue<IkReal> x9183=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r20*x9181))+(((2.0)*gconst2*r20*x9180))+(((-1.0)*(r22*r22)))+(((-1.0)*(x9180*x9180))))),-1);
if(!x9183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9182.value)+(((1.5707963267949)*(x9183.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9184=IKsin(j4);
IkReal x9185=IKcos(j4);
IkReal x9186=(sj1*sj2);
IkReal x9187=(gconst2*r10);
IkReal x9188=(gconst2*r00);
IkReal x9189=(gconst2*r20);
IkReal x9190=((1.0)*x9185);
IkReal x9191=(gconst1*x9185);
IkReal x9192=((1.0)*cj1*cj2);
IkReal x9193=(gconst1*x9184);
IkReal x9194=((1.0)*x9184);
evalcond[0]=((((-1.0)*r22*x9190))+(((-1.0)*x9189*x9194))+((r21*x9193)));
evalcond[1]=(cj0+(((-1.0)*r12*x9190))+(((-1.0)*x9187*x9194))+((r11*x9193)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9193))+(((-1.0)*r02*x9190))+(((-1.0)*x9188*x9194)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9189*x9190))+((cj1*sj2))+((r21*x9191))+((r22*x9184)));
evalcond[4]=(((r01*x9191))+((r02*x9184))+(((-1.0)*x9188*x9190))+(((-1.0)*cj0*x9192))+((cj0*x9186)));
evalcond[5]=(((r12*x9184))+(((-1.0)*sj0*x9192))+((sj0*x9186))+(((-1.0)*x9187*x9190))+((r11*x9191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9195=((1.0)*gconst2);
CheckValue<IkReal> x9196=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9195)))),-1);
if(!x9196.valid){
continue;
}
CheckValue<IkReal> x9197 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9195))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9196.value)))+(x9197.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9198=IKsin(j4);
IkReal x9199=IKcos(j4);
IkReal x9200=(sj1*sj2);
IkReal x9201=(gconst2*r10);
IkReal x9202=(gconst2*r00);
IkReal x9203=(gconst2*r20);
IkReal x9204=((1.0)*x9199);
IkReal x9205=(gconst1*x9199);
IkReal x9206=((1.0)*cj1*cj2);
IkReal x9207=(gconst1*x9198);
IkReal x9208=((1.0)*x9198);
evalcond[0]=(((r21*x9207))+(((-1.0)*r22*x9204))+(((-1.0)*x9203*x9208)));
evalcond[1]=((((-1.0)*x9201*x9208))+cj0+((r11*x9207))+(((-1.0)*r12*x9204)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9207))+(((-1.0)*r02*x9204))+(((-1.0)*x9202*x9208)));
evalcond[3]=(((cj2*sj1))+((r22*x9198))+((cj1*sj2))+((r21*x9205))+(((-1.0)*x9203*x9204)));
evalcond[4]=(((r01*x9205))+(((-1.0)*cj0*x9206))+((r02*x9198))+((cj0*x9200))+(((-1.0)*x9202*x9204)));
evalcond[5]=((((-1.0)*x9201*x9204))+((r11*x9205))+((sj0*x9200))+((r12*x9198))+(((-1.0)*sj0*x9206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9209=((1.0)*gconst2);
CheckValue<IkReal> x9210=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9209)))),-1);
if(!x9210.valid){
continue;
}
CheckValue<IkReal> x9211 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9210.value)))+(x9211.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9212=IKsin(j4);
IkReal x9213=IKcos(j4);
IkReal x9214=(sj1*sj2);
IkReal x9215=(gconst2*r10);
IkReal x9216=(gconst2*r00);
IkReal x9217=(gconst2*r20);
IkReal x9218=((1.0)*x9213);
IkReal x9219=(gconst1*x9213);
IkReal x9220=((1.0)*cj1*cj2);
IkReal x9221=(gconst1*x9212);
IkReal x9222=((1.0)*x9212);
evalcond[0]=((((-1.0)*x9217*x9222))+((r21*x9221))+(((-1.0)*r22*x9218)));
evalcond[1]=(cj0+((r11*x9221))+(((-1.0)*r12*x9218))+(((-1.0)*x9215*x9222)));
evalcond[2]=(((r01*x9221))+(((-1.0)*r02*x9218))+(((-1.0)*sj0))+(((-1.0)*x9216*x9222)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9217*x9218))+((r21*x9219))+((cj1*sj2))+((r22*x9212)));
evalcond[4]=((((-1.0)*x9216*x9218))+(((-1.0)*cj0*x9220))+((r02*x9212))+((cj0*x9214))+((r01*x9219)));
evalcond[5]=(((r12*x9212))+((sj0*x9214))+((r11*x9219))+(((-1.0)*sj0*x9220))+(((-1.0)*x9215*x9218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9223=((-1.0)*r20);
IkReal x9224=x8891;
CheckValue<IkReal> x9226 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9223),IKFAST_ATAN2_MAGTHRESH);
if(!x9226.valid){
continue;
}
IkReal x9225=((-1.0)*(x9226.value));
sj5=gconst1;
cj5=gconst2;
j5=x9225;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9225;
IkReal gconst1=(r21*x9224);
IkReal gconst2=(x9223*x9224);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9227=((-1.0)*r20);
IkReal x9228=x8891;
CheckValue<IkReal> x9230 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9227),IKFAST_ATAN2_MAGTHRESH);
if(!x9230.valid){
continue;
}
IkReal x9229=((-1.0)*(x9230.value));
sj5=gconst1;
cj5=gconst2;
j5=x9229;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9229;
IkReal gconst1=(r21*x9228);
IkReal gconst2=(x9227*x9228);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9231=((-1.0)*r20);
IkReal x9232=x8891;
CheckValue<IkReal> x9234 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9231),IKFAST_ATAN2_MAGTHRESH);
if(!x9234.valid){
continue;
}
IkReal x9233=((-1.0)*(x9234.value));
sj5=gconst1;
cj5=gconst2;
j5=x9233;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9233;
IkReal gconst1=(r21*x9232);
IkReal gconst2=(x9231*x9232);
IkReal x9235=r22*r22;
CheckValue<IkReal> x9238=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9235))),-1);
if(!x9238.valid){
continue;
}
IkReal x9236=x9238.value;
IkReal x9237=(((x9236*(r21*r21*r21*r21)))+x9235+((x9236*(r20*r20*r20*r20)))+(((2.0)*x9236*(r20*r20)*(r21*r21))));
j4eval[0]=x9237;
j4eval[1]=IKsign(x9237);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9239=((-1.0)*r20);
IkReal x9240=x8891;
CheckValue<IkReal> x9242 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9239),IKFAST_ATAN2_MAGTHRESH);
if(!x9242.valid){
continue;
}
IkReal x9241=((-1.0)*(x9242.value));
sj5=gconst1;
cj5=gconst2;
j5=x9241;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9241;
IkReal gconst1=(r21*x9240);
IkReal gconst2=(x9239*x9240);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9243=((-1.0)*r20);
IkReal x9244=x8891;
CheckValue<IkReal> x9246 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9243),IKFAST_ATAN2_MAGTHRESH);
if(!x9246.valid){
continue;
}
IkReal x9245=((-1.0)*(x9246.value));
sj5=gconst1;
cj5=gconst2;
j5=x9245;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9245;
IkReal gconst1=(r21*x9244);
IkReal gconst2=(x9243*x9244);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9247=((-1.0)*r20);
IkReal x9248=x8891;
CheckValue<IkReal> x9250 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9247),IKFAST_ATAN2_MAGTHRESH);
if(!x9250.valid){
continue;
}
IkReal x9249=((-1.0)*(x9250.value));
sj5=gconst1;
cj5=gconst2;
j5=x9249;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9249;
IkReal gconst1=(r21*x9248);
IkReal gconst2=(x9247*x9248);
IkReal x9251=r22*r22;
IkReal x9252=(cj1*r12*sj2);
IkReal x9253=(cj2*r12*sj1);
CheckValue<IkReal> x9257=IKPowWithIntegerCheck(((-1.0)+x9251),-1);
if(!x9257.valid){
continue;
}
IkReal x9254=x9257.value;
if((((1.0)+(((-1.0)*x9251)))) < -0.00001)
continue;
IkReal x9255=IKsqrt(((1.0)+(((-1.0)*x9251))));
IkReal x9256=((1.0)*r22*x9254*x9255);
j4eval[0]=((IKabs(((((-1.0)*x9253*x9256))+(((-1.0)*x9252*x9256)))))+(IKabs((x9252+x9253))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9258=((1.0)*gconst1);
IkReal x9259=(cj2*sj1);
IkReal x9260=(gconst2*r10);
IkReal x9261=(cj1*sj2);
CheckValue<IkReal> x9262 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9258*x9261))+((x9259*x9260))+(((-1.0)*r11*x9258*x9259))+((x9260*x9261)))),IkReal((((r12*x9261))+((r12*x9259)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9262.valid){
continue;
}
CheckValue<IkReal> x9263=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9258))+(((-1.0)*gconst2*r01)))),-1);
if(!x9263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9262.value)+(((1.5707963267949)*(x9263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9264=IKsin(j4);
IkReal x9265=IKcos(j4);
IkReal x9266=((1.0)*x9265);
IkReal x9267=(gconst2*x9265);
IkReal x9268=(gconst1*x9264);
IkReal x9269=((1.0)*x9264);
evalcond[0]=((((-1.0)*gconst2*r20*x9269))+(((-1.0)*r22*x9266))+((r21*x9268)));
evalcond[1]=((((-1.0)*gconst2*r00*x9269))+((r01*x9268))+(((-1.0)*r02*x9266)));
evalcond[2]=((((-1.0)*gconst1*r11*x9266))+((r10*x9267))+(((-1.0)*r12*x9269)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9269))+(((-1.0)*r12*x9266))+((r11*x9268)));
evalcond[4]=((((-1.0)*gconst1*r21*x9266))+((cj2*sj1))+(((-1.0)*r22*x9269))+((cj1*sj2))+((r20*x9267)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9266))+((r00*x9267))+(((-1.0)*r02*x9269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9270=(gconst1*r11);
IkReal x9271=(gconst2*r10);
CheckValue<IkReal> x9272 = IKatan2WithCheck(IkReal((x9271+(((-1.0)*x9270)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9272.valid){
continue;
}
CheckValue<IkReal> x9273=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9270*x9270)+(x9271*x9271)+(((-2.0)*x9270*x9271)))),-1);
if(!x9273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9272.value)+(((1.5707963267949)*(x9273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9274=IKsin(j4);
IkReal x9275=IKcos(j4);
IkReal x9276=((1.0)*x9275);
IkReal x9277=(gconst2*x9275);
IkReal x9278=(gconst1*x9274);
IkReal x9279=((1.0)*x9274);
evalcond[0]=((((-1.0)*gconst2*r20*x9279))+(((-1.0)*r22*x9276))+((r21*x9278)));
evalcond[1]=((((-1.0)*gconst2*r00*x9279))+((r01*x9278))+(((-1.0)*r02*x9276)));
evalcond[2]=((((-1.0)*gconst1*r11*x9276))+((r10*x9277))+(((-1.0)*r12*x9279)));
evalcond[3]=((1.0)+((r11*x9278))+(((-1.0)*r12*x9276))+(((-1.0)*gconst2*r10*x9279)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9276))+(((-1.0)*r22*x9279))+((cj1*sj2))+((r20*x9277)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9276))+((r00*x9277))+(((-1.0)*r02*x9279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9280=((1.0)*gconst2);
CheckValue<IkReal> x9281=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9280)))),-1);
if(!x9281.valid){
continue;
}
CheckValue<IkReal> x9282 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9281.value)))+(x9282.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9283=IKsin(j4);
IkReal x9284=IKcos(j4);
IkReal x9285=((1.0)*x9284);
IkReal x9286=(gconst2*x9284);
IkReal x9287=(gconst1*x9283);
IkReal x9288=((1.0)*x9283);
evalcond[0]=((((-1.0)*gconst2*r20*x9288))+(((-1.0)*r22*x9285))+((r21*x9287)));
evalcond[1]=((((-1.0)*gconst2*r00*x9288))+((r01*x9287))+(((-1.0)*r02*x9285)));
evalcond[2]=((((-1.0)*r12*x9288))+(((-1.0)*gconst1*r11*x9285))+((r10*x9286)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9285))+((r11*x9287))+(((-1.0)*gconst2*r10*x9288)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9285))+((cj1*sj2))+(((-1.0)*r22*x9288))+((r20*x9286)));
evalcond[5]=((((-1.0)*gconst1*r01*x9285))+((r00*x9286))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9289=((-1.0)*r20);
IkReal x9290=x8891;
CheckValue<IkReal> x9292 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9289),IKFAST_ATAN2_MAGTHRESH);
if(!x9292.valid){
continue;
}
IkReal x9291=((-1.0)*(x9292.value));
sj5=gconst1;
cj5=gconst2;
j5=x9291;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9291;
IkReal gconst1=(r21*x9290);
IkReal gconst2=(x9289*x9290);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9293=((-1.0)*r20);
IkReal x9294=x8891;
CheckValue<IkReal> x9296 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9293),IKFAST_ATAN2_MAGTHRESH);
if(!x9296.valid){
continue;
}
IkReal x9295=((-1.0)*(x9296.value));
sj5=gconst1;
cj5=gconst2;
j5=x9295;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9295;
IkReal gconst1=(r21*x9294);
IkReal gconst2=(x9293*x9294);
IkReal x9297=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9301=IKPowWithIntegerCheck(x9297,-1);
if(!x9301.valid){
continue;
}
IkReal x9298=x9301.value;
IkReal x9299=((1.0)*x9298);
IkReal x9300=((((-1.0)*x9299*(r10*r10)*(r20*r20)))+(((-1.0)*x9299*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9298)));
j4eval[0]=x9300;
j4eval[1]=r12;
j4eval[2]=x9297;
j4eval[3]=IKsign(x9300);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9302=((-1.0)*r20);
IkReal x9303=x8891;
CheckValue<IkReal> x9305 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9302),IKFAST_ATAN2_MAGTHRESH);
if(!x9305.valid){
continue;
}
IkReal x9304=((-1.0)*(x9305.value));
sj5=gconst1;
cj5=gconst2;
j5=x9304;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9304;
IkReal gconst1=(r21*x9303);
IkReal gconst2=(x9302*x9303);
IkReal x9306=r22*r22;
IkReal x9307=(cj1*r12*sj2);
IkReal x9308=(cj2*r12*sj1);
CheckValue<IkReal> x9312=IKPowWithIntegerCheck(((-1.0)+x9306),-1);
if(!x9312.valid){
continue;
}
IkReal x9309=x9312.value;
if((((1.0)+(((-1.0)*x9306)))) < -0.00001)
continue;
IkReal x9310=IKsqrt(((1.0)+(((-1.0)*x9306))));
IkReal x9311=((1.0)*r22*x9309*x9310);
j4eval[0]=((IKabs((x9308+x9307)))+(IKabs(((((-1.0)*x9307*x9311))+(((-1.0)*x9308*x9311))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9313=((1.0)*gconst1);
IkReal x9314=(cj2*sj1);
IkReal x9315=(gconst2*r10);
IkReal x9316=(cj1*sj2);
CheckValue<IkReal> x9317 = IKatan2WithCheck(IkReal((((x9314*x9315))+((x9315*x9316))+(((-1.0)*r11*x9313*x9314))+(((-1.0)*r11*x9313*x9316)))),IkReal((((r12*x9314))+((r12*x9316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9317.valid){
continue;
}
CheckValue<IkReal> x9318=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9313)))),-1);
if(!x9318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9317.value)+(((1.5707963267949)*(x9318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9319=IKsin(j4);
IkReal x9320=IKcos(j4);
IkReal x9321=((1.0)*x9320);
IkReal x9322=(gconst2*x9320);
IkReal x9323=(gconst1*x9319);
IkReal x9324=((1.0)*x9319);
evalcond[0]=((((-1.0)*r22*x9321))+(((-1.0)*gconst2*r20*x9324))+((r21*x9323)));
evalcond[1]=((((-1.0)*r02*x9321))+((r01*x9323))+(((-1.0)*gconst2*r00*x9324)));
evalcond[2]=((((-1.0)*r12*x9324))+((r10*x9322))+(((-1.0)*gconst1*r11*x9321)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9321))+(((-1.0)*gconst2*r10*x9324))+((r11*x9323)));
evalcond[4]=(((cj2*sj1))+((r20*x9322))+(((-1.0)*r22*x9324))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9321)));
evalcond[5]=((((-1.0)*gconst1*r01*x9321))+(((-1.0)*r02*x9324))+((r00*x9322))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9325=(gconst1*r11);
IkReal x9326=(gconst2*r10);
CheckValue<IkReal> x9327=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9326*x9326)))+(((2.0)*x9325*x9326))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9325*x9325))))),-1);
if(!x9327.valid){
continue;
}
CheckValue<IkReal> x9328 = IKatan2WithCheck(IkReal(((((-1.0)*x9325))+x9326)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9327.value)))+(x9328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9329=IKsin(j4);
IkReal x9330=IKcos(j4);
IkReal x9331=((1.0)*x9330);
IkReal x9332=(gconst2*x9330);
IkReal x9333=(gconst1*x9329);
IkReal x9334=((1.0)*x9329);
evalcond[0]=((((-1.0)*r22*x9331))+(((-1.0)*gconst2*r20*x9334))+((r21*x9333)));
evalcond[1]=((((-1.0)*r02*x9331))+((r01*x9333))+(((-1.0)*gconst2*r00*x9334)));
evalcond[2]=((((-1.0)*r12*x9334))+((r10*x9332))+(((-1.0)*gconst1*r11*x9331)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9334))+(((-1.0)*r12*x9331))+((r11*x9333)));
evalcond[4]=(((cj2*sj1))+((r20*x9332))+(((-1.0)*r22*x9334))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9331)));
evalcond[5]=((((-1.0)*r02*x9334))+((r00*x9332))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst1*r01*x9331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9335 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9335.valid){
continue;
}
CheckValue<IkReal> x9336=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9335.value)+(((1.5707963267949)*(x9336.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9337=IKsin(j4);
IkReal x9338=IKcos(j4);
IkReal x9339=((1.0)*x9338);
IkReal x9340=(gconst2*x9338);
IkReal x9341=(gconst1*x9337);
IkReal x9342=((1.0)*x9337);
evalcond[0]=((((-1.0)*r22*x9339))+(((-1.0)*gconst2*r20*x9342))+((r21*x9341)));
evalcond[1]=((((-1.0)*r02*x9339))+((r01*x9341))+(((-1.0)*gconst2*r00*x9342)));
evalcond[2]=(((r10*x9340))+(((-1.0)*r12*x9342))+(((-1.0)*gconst1*r11*x9339)));
evalcond[3]=((-1.0)+((r11*x9341))+(((-1.0)*r12*x9339))+(((-1.0)*gconst2*r10*x9342)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9342))+((cj1*sj2))+((r20*x9340))+(((-1.0)*gconst1*r21*x9339)));
evalcond[5]=(((r00*x9340))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x9342))+((cj1*cj2))+(((-1.0)*gconst1*r01*x9339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9343=((-1.0)*r20);
IkReal x9344=x8891;
CheckValue<IkReal> x9346 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9343),IKFAST_ATAN2_MAGTHRESH);
if(!x9346.valid){
continue;
}
IkReal x9345=((-1.0)*(x9346.value));
sj5=gconst1;
cj5=gconst2;
j5=x9345;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9345;
IkReal gconst1=(r21*x9344);
IkReal gconst2=(x9343*x9344);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9347=((-1.0)*r20);
IkReal x9348=x8891;
CheckValue<IkReal> x9350 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9347),IKFAST_ATAN2_MAGTHRESH);
if(!x9350.valid){
continue;
}
IkReal x9349=((-1.0)*(x9350.value));
sj5=gconst1;
cj5=gconst2;
j5=x9349;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9349;
IkReal gconst1=(r21*x9348);
IkReal gconst2=(x9347*x9348);
IkReal x9351=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9355=IKPowWithIntegerCheck(x9351,-1);
if(!x9355.valid){
continue;
}
IkReal x9352=x9355.value;
IkReal x9353=((1.0)*x9352);
IkReal x9354=((((-1.0)*(r02*r02)))+(((-1.0)*x9353*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x9352))+(((-1.0)*x9353*(r00*r00)*(r20*r20))));
j4eval[0]=x9354;
j4eval[1]=IKsign(x9354);
j4eval[2]=r02;
j4eval[3]=x9351;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9356=((-1.0)*r20);
IkReal x9357=x8891;
CheckValue<IkReal> x9359 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9356),IKFAST_ATAN2_MAGTHRESH);
if(!x9359.valid){
continue;
}
IkReal x9358=((-1.0)*(x9359.value));
sj5=gconst1;
cj5=gconst2;
j5=x9358;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9358;
IkReal gconst1=(r21*x9357);
IkReal gconst2=(x9356*x9357);
IkReal x9360=r22*r22;
IkReal x9361=(cj1*r02*sj2);
IkReal x9362=(cj2*r02*sj1);
CheckValue<IkReal> x9366=IKPowWithIntegerCheck(((-1.0)+x9360),-1);
if(!x9366.valid){
continue;
}
IkReal x9363=x9366.value;
if((((1.0)+(((-1.0)*x9360)))) < -0.00001)
continue;
IkReal x9364=IKsqrt(((1.0)+(((-1.0)*x9360))));
IkReal x9365=((1.0)*r22*x9363*x9364);
j4eval[0]=((IKabs(((((-1.0)*x9362*x9365))+(((-1.0)*x9361*x9365)))))+(IKabs((x9362+x9361))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9367=(cj2*sj1);
IkReal x9368=(cj1*sj2);
IkReal x9369=(gconst2*r00);
IkReal x9370=((1.0)*gconst1*r01);
CheckValue<IkReal> x9371 = IKatan2WithCheck(IkReal((((x9368*x9369))+(((-1.0)*x9367*x9370))+(((-1.0)*x9368*x9370))+((x9367*x9369)))),IkReal((((r02*x9368))+((r02*x9367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9371.valid){
continue;
}
CheckValue<IkReal> x9372=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9371.value)+(((1.5707963267949)*(x9372.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9373=IKsin(j4);
IkReal x9374=IKcos(j4);
IkReal x9375=(gconst1*r11);
IkReal x9376=(gconst1*r21);
IkReal x9377=(gconst1*r01);
IkReal x9378=((1.0)*x9374);
IkReal x9379=(gconst2*x9374);
IkReal x9380=((1.0)*x9373);
evalcond[0]=((((-1.0)*gconst2*r20*x9380))+(((-1.0)*r22*x9378))+((x9373*x9376)));
evalcond[1]=((((-1.0)*r12*x9378))+((x9373*x9375))+(((-1.0)*gconst2*r10*x9380)));
evalcond[2]=((((-1.0)*r02*x9380))+(((-1.0)*x9377*x9378))+((r00*x9379)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9378))+(((-1.0)*gconst2*r00*x9380))+((x9373*x9377)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9376*x9378))+((cj1*sj2))+(((-1.0)*r22*x9380))+((r20*x9379)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9380))+(((-1.0)*x9375*x9378))+((r10*x9379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9381=(gconst2*r00);
IkReal x9382=(gconst1*r01);
CheckValue<IkReal> x9383 = IKatan2WithCheck(IkReal((x9381+(((-1.0)*x9382)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9383.valid){
continue;
}
CheckValue<IkReal> x9384=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x9381*x9381)))+(((2.0)*x9381*x9382))+(((-1.0)*(x9382*x9382))))),-1);
if(!x9384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9383.value)+(((1.5707963267949)*(x9384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9385=IKsin(j4);
IkReal x9386=IKcos(j4);
IkReal x9387=(gconst1*r11);
IkReal x9388=(gconst1*r21);
IkReal x9389=(gconst1*r01);
IkReal x9390=((1.0)*x9386);
IkReal x9391=(gconst2*x9386);
IkReal x9392=((1.0)*x9385);
evalcond[0]=((((-1.0)*gconst2*r20*x9392))+(((-1.0)*r22*x9390))+((x9385*x9388)));
evalcond[1]=((((-1.0)*r12*x9390))+(((-1.0)*gconst2*r10*x9392))+((x9385*x9387)));
evalcond[2]=((((-1.0)*x9389*x9390))+(((-1.0)*r02*x9392))+((r00*x9391)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r00*x9392))+((x9385*x9389))+(((-1.0)*r02*x9390)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9388*x9390))+((r20*x9391))+((cj1*sj2))+(((-1.0)*r22*x9392)));
evalcond[5]=((((-1.0)*x9387*x9390))+(((-1.0)*r12*x9392))+((r10*x9391))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9393=((1.0)*gconst2);
CheckValue<IkReal> x9394 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9393))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9394.valid){
continue;
}
CheckValue<IkReal> x9395=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9393))+(((-1.0)*gconst1*r10)))),-1);
if(!x9395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9394.value)+(((1.5707963267949)*(x9395.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9396=IKsin(j4);
IkReal x9397=IKcos(j4);
IkReal x9398=(gconst1*r11);
IkReal x9399=(gconst1*r21);
IkReal x9400=(gconst1*r01);
IkReal x9401=((1.0)*x9397);
IkReal x9402=(gconst2*x9397);
IkReal x9403=((1.0)*x9396);
evalcond[0]=((((-1.0)*r22*x9401))+((x9396*x9399))+(((-1.0)*gconst2*r20*x9403)));
evalcond[1]=(((x9396*x9398))+(((-1.0)*gconst2*r10*x9403))+(((-1.0)*r12*x9401)));
evalcond[2]=((((-1.0)*r02*x9403))+(((-1.0)*x9400*x9401))+((r00*x9402)));
evalcond[3]=((-1.0)+((x9396*x9400))+(((-1.0)*r02*x9401))+(((-1.0)*gconst2*r00*x9403)));
evalcond[4]=((((-1.0)*r22*x9403))+((cj2*sj1))+((cj1*sj2))+((r20*x9402))+(((-1.0)*x9399*x9401)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9403))+((r10*x9402))+(((-1.0)*x9398*x9401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9404=((-1.0)*r20);
IkReal x9405=x8891;
CheckValue<IkReal> x9407 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9404),IKFAST_ATAN2_MAGTHRESH);
if(!x9407.valid){
continue;
}
IkReal x9406=((-1.0)*(x9407.value));
sj5=gconst1;
cj5=gconst2;
j5=x9406;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9406;
IkReal gconst1=(r21*x9405);
IkReal gconst2=(x9404*x9405);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9408=((-1.0)*r20);
IkReal x9409=x8891;
CheckValue<IkReal> x9411 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9408),IKFAST_ATAN2_MAGTHRESH);
if(!x9411.valid){
continue;
}
IkReal x9410=((-1.0)*(x9411.value));
sj5=gconst1;
cj5=gconst2;
j5=x9410;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9410;
IkReal gconst1=(r21*x9409);
IkReal gconst2=(x9408*x9409);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9412=((-1.0)*r20);
IkReal x9413=x8891;
CheckValue<IkReal> x9415 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9412),IKFAST_ATAN2_MAGTHRESH);
if(!x9415.valid){
continue;
}
IkReal x9414=((-1.0)*(x9415.value));
sj5=gconst1;
cj5=gconst2;
j5=x9414;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9414;
IkReal gconst1=(r21*x9413);
IkReal gconst2=(x9412*x9413);
IkReal x9416=r22*r22;
IkReal x9417=(cj1*r02*sj2);
IkReal x9418=(cj2*r02*sj1);
CheckValue<IkReal> x9422=IKPowWithIntegerCheck(((-1.0)+x9416),-1);
if(!x9422.valid){
continue;
}
IkReal x9419=x9422.value;
if((((1.0)+(((-1.0)*x9416)))) < -0.00001)
continue;
IkReal x9420=IKsqrt(((1.0)+(((-1.0)*x9416))));
IkReal x9421=((1.0)*r22*x9419*x9420);
j4eval[0]=((IKabs(((((-1.0)*x9417*x9421))+(((-1.0)*x9418*x9421)))))+(IKabs((x9417+x9418))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9423=(cj2*sj1);
IkReal x9424=(cj1*sj2);
IkReal x9425=(gconst2*r00);
IkReal x9426=((1.0)*gconst1*r01);
CheckValue<IkReal> x9427 = IKatan2WithCheck(IkReal(((((-1.0)*x9424*x9426))+(((-1.0)*x9423*x9426))+((x9424*x9425))+((x9423*x9425)))),IkReal((((r02*x9423))+((r02*x9424)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9427.valid){
continue;
}
CheckValue<IkReal> x9428=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9427.value)+(((1.5707963267949)*(x9428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9429=IKsin(j4);
IkReal x9430=IKcos(j4);
IkReal x9431=(gconst1*r11);
IkReal x9432=(gconst1*r21);
IkReal x9433=(gconst1*r01);
IkReal x9434=((1.0)*x9430);
IkReal x9435=(gconst2*x9430);
IkReal x9436=((1.0)*x9429);
evalcond[0]=(((x9429*x9432))+(((-1.0)*gconst2*r20*x9436))+(((-1.0)*r22*x9434)));
evalcond[1]=(((x9429*x9431))+(((-1.0)*gconst2*r10*x9436))+(((-1.0)*r12*x9434)));
evalcond[2]=((((-1.0)*x9433*x9434))+(((-1.0)*r02*x9436))+((r00*x9435)));
evalcond[3]=((1.0)+((x9429*x9433))+(((-1.0)*gconst2*r00*x9436))+(((-1.0)*r02*x9434)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9435))+(((-1.0)*x9432*x9434))+(((-1.0)*r22*x9436)));
evalcond[5]=((((-1.0)*x9431*x9434))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9436))+((cj1*cj2))+((r10*x9435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9437=(gconst1*r01);
IkReal x9438=(gconst2*r00);
CheckValue<IkReal> x9439 = IKatan2WithCheck(IkReal(((((-1.0)*x9437))+x9438)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9439.valid){
continue;
}
CheckValue<IkReal> x9440=IKPowWithIntegerCheck(IKsign(((x9437*x9437)+(((-2.0)*x9437*x9438))+(r02*r02)+(x9438*x9438))),-1);
if(!x9440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9439.value)+(((1.5707963267949)*(x9440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9441=IKsin(j4);
IkReal x9442=IKcos(j4);
IkReal x9443=(gconst1*r11);
IkReal x9444=(gconst1*r21);
IkReal x9445=(gconst1*r01);
IkReal x9446=((1.0)*x9442);
IkReal x9447=(gconst2*x9442);
IkReal x9448=((1.0)*x9441);
evalcond[0]=(((x9441*x9444))+(((-1.0)*gconst2*r20*x9448))+(((-1.0)*r22*x9446)));
evalcond[1]=(((x9441*x9443))+(((-1.0)*gconst2*r10*x9448))+(((-1.0)*r12*x9446)));
evalcond[2]=((((-1.0)*x9445*x9446))+((r00*x9447))+(((-1.0)*r02*x9448)));
evalcond[3]=((1.0)+((x9441*x9445))+(((-1.0)*gconst2*r00*x9448))+(((-1.0)*r02*x9446)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9444*x9446))+(((-1.0)*r22*x9448))+((r20*x9447)));
evalcond[5]=(((r10*x9447))+(((-1.0)*x9443*x9446))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x9448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9449 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9449.valid){
continue;
}
CheckValue<IkReal> x9450=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9449.value)+(((1.5707963267949)*(x9450.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9451=IKsin(j4);
IkReal x9452=IKcos(j4);
IkReal x9453=(gconst1*r11);
IkReal x9454=(gconst1*r21);
IkReal x9455=(gconst1*r01);
IkReal x9456=((1.0)*x9452);
IkReal x9457=(gconst2*x9452);
IkReal x9458=((1.0)*x9451);
evalcond[0]=(((x9451*x9454))+(((-1.0)*gconst2*r20*x9458))+(((-1.0)*r22*x9456)));
evalcond[1]=(((x9451*x9453))+(((-1.0)*gconst2*r10*x9458))+(((-1.0)*r12*x9456)));
evalcond[2]=(((r00*x9457))+(((-1.0)*x9455*x9456))+(((-1.0)*r02*x9458)));
evalcond[3]=((1.0)+((x9451*x9455))+(((-1.0)*gconst2*r00*x9458))+(((-1.0)*r02*x9456)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9458))+(((-1.0)*x9454*x9456))+((r20*x9457)));
evalcond[5]=(((r10*x9457))+(((-1.0)*sj1*sj2))+(((-1.0)*x9453*x9456))+((cj1*cj2))+(((-1.0)*r12*x9458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9459=((-1.0)*r20);
IkReal x9460=((-1.0)*px);
CheckValue<IkReal> x9462 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9459),IKFAST_ATAN2_MAGTHRESH);
if(!x9462.valid){
continue;
}
IkReal x9461=((-1.0)*(x9462.value));
sj5=gconst1;
cj5=gconst2;
j5=x9461;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9460);
rxp1_1=(px*r21);
rxp1_2=(r11*x9460);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9461;
IkReal gconst1=r21;
IkReal gconst2=x9459;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9463=((-1.0)*r20);
IkReal x9464=((-1.0)*px);
CheckValue<IkReal> x9466 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9463),IKFAST_ATAN2_MAGTHRESH);
if(!x9466.valid){
continue;
}
IkReal x9465=((-1.0)*(x9466.value));
sj5=gconst1;
cj5=gconst2;
j5=x9465;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9464);
rxp1_1=(px*r21);
rxp1_2=(r11*x9464);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9465;
IkReal gconst1=r21;
IkReal gconst2=x9463;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9467=((-1.0)*r20);
IkReal x9468=((-1.0)*px);
CheckValue<IkReal> x9470 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9467),IKFAST_ATAN2_MAGTHRESH);
if(!x9470.valid){
continue;
}
IkReal x9469=((-1.0)*(x9470.value));
sj5=gconst1;
cj5=gconst2;
j5=x9469;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9468);
rxp1_1=(px*r21);
rxp1_2=(r11*x9468);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9469;
IkReal gconst1=r21;
IkReal gconst2=x9467;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9473=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9473.valid){
continue;
}
IkReal x9471=x9473.value;
IkReal x9472=(sj0*x9471);
cj4array[0]=((((-1.0)*sj1*sj2*x9472))+((cj1*cj2*x9472)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9474=IKsin(j4);
IkReal x9475=IKcos(j4);
IkReal x9476=(gconst1*x9474);
IkReal x9477=((1.0)*x9475);
IkReal x9478=((1.0)*gconst2*x9474);
evalcond[0]=((-1.0)*r02*x9474);
evalcond[1]=((((-1.0)*r02*x9477))+(((-1.0)*sj0)));
evalcond[2]=(((r21*x9476))+(((-1.0)*r20*x9478)));
evalcond[3]=((((-1.0)*r10*x9478))+((r11*x9476)));
evalcond[4]=(((cj2*sj1))+((gconst2*r20*x9475))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9481=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9481.valid){
continue;
}
IkReal x9479=x9481.value;
IkReal x9480=((1.0)*x9479);
cj4array[0]=((((-1.0)*cj1*sj2*x9480))+(((-1.0)*cj2*sj1*x9480)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9482=IKsin(j4);
IkReal x9483=IKcos(j4);
IkReal x9484=(gconst2*r10);
IkReal x9485=((1.0)*sj0);
IkReal x9486=(gconst1*r11);
IkReal x9487=((1.0)*x9482);
IkReal x9488=((1.0)*x9483);
evalcond[0]=((-1.0)*r02*x9482);
evalcond[1]=((((-1.0)*r02*x9488))+(((-1.0)*x9485)));
evalcond[2]=((((-1.0)*gconst2*r20*x9487))+((gconst1*r21*x9482)));
evalcond[3]=((((-1.0)*x9484*x9487))+((x9482*x9486)));
evalcond[4]=(((x9483*x9484))+(((-1.0)*x9486*x9488))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x9485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9489=IKPowWithIntegerCheck(r02,-1);
if(!x9489.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9489.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9490=IKsin(j4);
IkReal x9491=IKcos(j4);
IkReal x9492=(gconst2*r10);
IkReal x9493=(gconst1*r11);
IkReal x9494=(gconst1*r21);
IkReal x9495=(gconst2*r20);
IkReal x9496=((1.0)*x9490);
IkReal x9497=((1.0)*x9491);
evalcond[0]=((-1.0)*r02*x9490);
evalcond[1]=(((x9490*x9494))+(((-1.0)*x9495*x9496)));
evalcond[2]=((((-1.0)*x9492*x9496))+((x9490*x9493)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x9491*x9495))+(((-1.0)*x9494*x9497)));
evalcond[4]=((((-1.0)*x9493*x9497))+(((-1.0)*cj1*cj2*sj0))+((x9491*x9492))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9498=(cj2*sj1);
IkReal x9499=(cj1*sj2);
IkReal x9500=(gconst1*r21);
IkReal x9501=((1.0)*gconst2*r20);
CheckValue<IkReal> x9502 = IKatan2WithCheck(IkReal((((r22*x9498))+((r22*x9499)))),IkReal((((x9498*x9500))+(((-1.0)*x9498*x9501))+(((-1.0)*x9499*x9501))+((x9499*x9500)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9502.valid){
continue;
}
CheckValue<IkReal> x9503=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*gconst2*r20*x9500))+(((gconst2*gconst2)*(r20*r20)))+(x9500*x9500))),-1);
if(!x9503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9502.value)+(((1.5707963267949)*(x9503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9504=IKsin(j4);
IkReal x9505=IKcos(j4);
IkReal x9506=(gconst1*r11);
IkReal x9507=(sj1*sj2);
IkReal x9508=(gconst1*r21);
IkReal x9509=(gconst1*r01);
IkReal x9510=((1.0)*x9505);
IkReal x9511=(gconst2*x9505);
IkReal x9512=((1.0)*cj1*cj2);
IkReal x9513=((1.0)*x9504);
evalcond[0]=(((x9504*x9508))+(((-1.0)*gconst2*r20*x9513))+(((-1.0)*r22*x9510)));
evalcond[1]=(((x9504*x9506))+cj0+(((-1.0)*gconst2*r10*x9513))+(((-1.0)*r12*x9510)));
evalcond[2]=((((-1.0)*r02*x9510))+(((-1.0)*sj0))+((x9504*x9509))+(((-1.0)*gconst2*r00*x9513)));
evalcond[3]=((((-1.0)*x9508*x9510))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9513))+((r20*x9511)));
evalcond[4]=((((-1.0)*r02*x9513))+((r00*x9511))+((cj0*x9507))+(((-1.0)*cj0*x9512))+(((-1.0)*x9509*x9510)));
evalcond[5]=(((sj0*x9507))+(((-1.0)*r12*x9513))+((r10*x9511))+(((-1.0)*sj0*x9512))+(((-1.0)*x9506*x9510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9514=((1.0)*gconst2);
CheckValue<IkReal> x9515 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9514))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9515.valid){
continue;
}
CheckValue<IkReal> x9516=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9514)))),-1);
if(!x9516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9515.value)+(((1.5707963267949)*(x9516.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9517=IKsin(j4);
IkReal x9518=IKcos(j4);
IkReal x9519=(gconst1*r11);
IkReal x9520=(sj1*sj2);
IkReal x9521=(gconst1*r21);
IkReal x9522=(gconst1*r01);
IkReal x9523=((1.0)*x9518);
IkReal x9524=(gconst2*x9518);
IkReal x9525=((1.0)*cj1*cj2);
IkReal x9526=((1.0)*x9517);
evalcond[0]=(((x9517*x9521))+(((-1.0)*r22*x9523))+(((-1.0)*gconst2*r20*x9526)));
evalcond[1]=((((-1.0)*r12*x9523))+(((-1.0)*gconst2*r10*x9526))+cj0+((x9517*x9519)));
evalcond[2]=(((x9517*x9522))+(((-1.0)*sj0))+(((-1.0)*r02*x9523))+(((-1.0)*gconst2*r00*x9526)));
evalcond[3]=(((cj2*sj1))+((r20*x9524))+(((-1.0)*x9521*x9523))+((cj1*sj2))+(((-1.0)*r22*x9526)));
evalcond[4]=((((-1.0)*cj0*x9525))+(((-1.0)*r02*x9526))+((cj0*x9520))+((r00*x9524))+(((-1.0)*x9522*x9523)));
evalcond[5]=((((-1.0)*r12*x9526))+((sj0*x9520))+((r10*x9524))+(((-1.0)*x9519*x9523))+(((-1.0)*sj0*x9525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9527=((1.0)*gconst2);
CheckValue<IkReal> x9528=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9527))+(((-1.0)*gconst1*r00)))),-1);
if(!x9528.valid){
continue;
}
CheckValue<IkReal> x9529 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9527))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9528.value)))+(x9529.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9530=IKsin(j4);
IkReal x9531=IKcos(j4);
IkReal x9532=(gconst1*r11);
IkReal x9533=(sj1*sj2);
IkReal x9534=(gconst1*r21);
IkReal x9535=(gconst1*r01);
IkReal x9536=((1.0)*x9531);
IkReal x9537=(gconst2*x9531);
IkReal x9538=((1.0)*cj1*cj2);
IkReal x9539=((1.0)*x9530);
evalcond[0]=((((-1.0)*r22*x9536))+(((-1.0)*gconst2*r20*x9539))+((x9530*x9534)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x9539))+((x9530*x9532))+(((-1.0)*r12*x9536)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst2*r00*x9539))+(((-1.0)*r02*x9536))+((x9530*x9535)));
evalcond[3]=(((cj2*sj1))+((r20*x9537))+(((-1.0)*r22*x9539))+((cj1*sj2))+(((-1.0)*x9534*x9536)));
evalcond[4]=((((-1.0)*cj0*x9538))+(((-1.0)*r02*x9539))+((cj0*x9533))+((r00*x9537))+(((-1.0)*x9535*x9536)));
evalcond[5]=((((-1.0)*x9532*x9536))+((r10*x9537))+((sj0*x9533))+(((-1.0)*sj0*x9538))+(((-1.0)*r12*x9539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9540=((-1.0)*r20);
IkReal x9541=x8891;
CheckValue<IkReal> x9543 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9540),IKFAST_ATAN2_MAGTHRESH);
if(!x9543.valid){
continue;
}
IkReal x9542=((-1.0)*(x9543.value));
sj5=gconst1;
cj5=gconst2;
j5=x9542;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9542;
IkReal gconst1=(r21*x9541);
IkReal gconst2=(x9540*x9541);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9544=((-1.0)*r20);
IkReal x9545=x8891;
CheckValue<IkReal> x9547 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9544),IKFAST_ATAN2_MAGTHRESH);
if(!x9547.valid){
continue;
}
IkReal x9546=((-1.0)*(x9547.value));
sj5=gconst1;
cj5=gconst2;
j5=x9546;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9546;
IkReal gconst1=(r21*x9545);
IkReal gconst2=(x9544*x9545);
CheckValue<IkReal> x9555=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9555.valid){
continue;
}
IkReal x9548=x9555.value;
IkReal x9549=(sj3*x9548);
IkReal x9550=(r11*x9549);
IkReal x9551=(r00*x9549);
IkReal x9552=(r01*x9549);
IkReal x9553=(r10*x9549);
IkReal x9554=(r20*r21*x9549);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9551*(r20*r20)))+((r10*r20*r21*x9552))+((r00*r20*r21*x9550))+((r01*x9550*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9556=gconst2*gconst2;
IkReal x9557=gconst1*gconst1;
IkReal x9558=((1.0)*cj3);
IkReal x9559=((1.0)*sj3);
IkReal x9560=(r11*sj3);
IkReal x9561=(r10*sj3);
IkReal x9562=(gconst1*gconst2*r00);
IkReal x9563=(gconst1*gconst2*r01);
IkReal x9564=(r00*x9556);
IkReal x9565=(r01*x9557);
CheckValue<IkReal> x9566 = IKatan2WithCheck(IkReal((((gconst2*r02*x9560))+((gconst1*r02*x9561)))),IkReal((((x9560*x9563))+(((-1.0)*r10*x9559*x9562))+((x9561*x9565))+(((-1.0)*r11*x9559*x9564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9566.valid){
continue;
}
CheckValue<IkReal> x9567=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9558*x9564))+((cj3*r11*x9562))+(((-1.0)*r02*r12*x9558))+(((-1.0)*r11*x9558*x9565))+((cj3*r10*x9563)))),-1);
if(!x9567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9566.value)+(((1.5707963267949)*(x9567.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9568=IKsin(j4);
IkReal x9569=IKcos(j4);
IkReal x9570=(sj1*sj2);
IkReal x9571=(gconst1*sj3);
IkReal x9572=(cj3*gconst1);
IkReal x9573=(cj3*gconst2);
IkReal x9574=((1.0)*cj2);
IkReal x9575=(cj1*sj2);
IkReal x9576=(gconst2*sj3);
IkReal x9577=(cj1*x9574);
IkReal x9578=((1.0)*x9569);
IkReal x9579=((1.0)*x9568);
IkReal x9580=(gconst1*x9568);
IkReal x9581=(cj3*x9568);
IkReal x9582=(x9569*x9576);
evalcond[0]=((((-1.0)*gconst2*r20*x9579))+(((-1.0)*r22*x9578))+((r21*x9580)));
evalcond[1]=((((-1.0)*r02*x9578))+((r01*x9580))+(((-1.0)*gconst2*r00*x9579)));
evalcond[2]=((1.0)+((r11*x9580))+(((-1.0)*r12*x9578))+(((-1.0)*gconst2*r10*x9579)));
evalcond[3]=((((-1.0)*r10*x9573*x9578))+((r11*x9569*x9572))+((r11*x9576))+((r12*x9581))+((r10*x9571)));
evalcond[4]=((((-1.0)*r11*x9571*x9578))+((r10*x9582))+((r11*x9573))+(((-1.0)*r12*sj3*x9579))+((r10*x9572)));
evalcond[5]=(((cj2*sj1))+((r21*x9576))+((r22*x9581))+(((-1.0)*r20*x9573*x9578))+x9575+((r21*x9569*x9572))+((r20*x9571)));
evalcond[6]=((((-1.0)*r00*x9573*x9578))+((r00*x9571))+((r01*x9569*x9572))+(((-1.0)*x9577))+((r01*x9576))+x9570+((r02*x9581)));
evalcond[7]=(((r20*x9582))+((r21*x9573))+(((-1.0)*x9577))+(((-1.0)*r22*sj3*x9579))+x9570+((r20*x9572))+(((-1.0)*r21*x9571*x9578)));
evalcond[8]=((((-1.0)*r02*sj3*x9579))+((r00*x9582))+(((-1.0)*x9575))+((r00*x9572))+(((-1.0)*r01*x9571*x9578))+((r01*x9573))+(((-1.0)*sj1*x9574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9583=gconst2*gconst2;
IkReal x9584=gconst1*gconst1;
IkReal x9585=(gconst2*r11);
IkReal x9586=(cj3*r02);
IkReal x9587=(gconst1*r01);
IkReal x9588=(cj3*r10);
IkReal x9589=(r10*sj3);
IkReal x9590=((1.0)*gconst1*r00);
IkReal x9591=(r01*x9584);
IkReal x9592=(r00*x9583);
CheckValue<IkReal> x9593 = IKatan2WithCheck(IkReal((((gconst1*r10*x9586))+((x9585*x9586)))),IkReal(((((-1.0)*cj3*r11*x9592))+(((-1.0)*gconst2*x9588*x9590))+((cj3*x9585*x9587))+((x9588*x9591)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9593.valid){
continue;
}
CheckValue<IkReal> x9594=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst2*x9587*x9589))+(((-1.0)*sj3*x9585*x9590))+((x9589*x9592))+((r11*sj3*x9591)))),-1);
if(!x9594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9593.value)+(((1.5707963267949)*(x9594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9595=IKsin(j4);
IkReal x9596=IKcos(j4);
IkReal x9597=(sj1*sj2);
IkReal x9598=(gconst1*sj3);
IkReal x9599=(cj3*gconst1);
IkReal x9600=(cj3*gconst2);
IkReal x9601=((1.0)*cj2);
IkReal x9602=(cj1*sj2);
IkReal x9603=(gconst2*sj3);
IkReal x9604=(cj1*x9601);
IkReal x9605=((1.0)*x9596);
IkReal x9606=((1.0)*x9595);
IkReal x9607=(gconst1*x9595);
IkReal x9608=(cj3*x9595);
IkReal x9609=(x9596*x9603);
evalcond[0]=((((-1.0)*r22*x9605))+((r21*x9607))+(((-1.0)*gconst2*r20*x9606)));
evalcond[1]=(((r01*x9607))+(((-1.0)*r02*x9605))+(((-1.0)*gconst2*r00*x9606)));
evalcond[2]=((1.0)+((r11*x9607))+(((-1.0)*r12*x9605))+(((-1.0)*gconst2*r10*x9606)));
evalcond[3]=(((r11*x9596*x9599))+((r12*x9608))+((r11*x9603))+((r10*x9598))+(((-1.0)*r10*x9600*x9605)));
evalcond[4]=(((r10*x9609))+((r11*x9600))+(((-1.0)*r12*sj3*x9606))+((r10*x9599))+(((-1.0)*r11*x9598*x9605)));
evalcond[5]=(((r20*x9598))+((cj2*sj1))+((r21*x9603))+(((-1.0)*r20*x9600*x9605))+x9602+((r21*x9596*x9599))+((r22*x9608)));
evalcond[6]=((((-1.0)*x9604))+((r00*x9598))+((r01*x9596*x9599))+((r01*x9603))+x9597+(((-1.0)*r00*x9600*x9605))+((r02*x9608)));
evalcond[7]=(((r20*x9599))+((r21*x9600))+(((-1.0)*r21*x9598*x9605))+(((-1.0)*x9604))+((r20*x9609))+x9597+(((-1.0)*r22*sj3*x9606)));
evalcond[8]=((((-1.0)*r02*sj3*x9606))+(((-1.0)*sj1*x9601))+((r00*x9609))+((r00*x9599))+(((-1.0)*r01*x9598*x9605))+((r01*x9600))+(((-1.0)*x9602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9610=((1.0)*gconst2);
CheckValue<IkReal> x9611=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9610)))),-1);
if(!x9611.valid){
continue;
}
CheckValue<IkReal> x9612 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9611.value)))+(x9612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9613=IKsin(j4);
IkReal x9614=IKcos(j4);
IkReal x9615=(sj1*sj2);
IkReal x9616=(gconst1*sj3);
IkReal x9617=(cj3*gconst1);
IkReal x9618=(cj3*gconst2);
IkReal x9619=((1.0)*cj2);
IkReal x9620=(cj1*sj2);
IkReal x9621=(gconst2*sj3);
IkReal x9622=(cj1*x9619);
IkReal x9623=((1.0)*x9614);
IkReal x9624=((1.0)*x9613);
IkReal x9625=(gconst1*x9613);
IkReal x9626=(cj3*x9613);
IkReal x9627=(x9614*x9621);
evalcond[0]=((((-1.0)*r22*x9623))+((r21*x9625))+(((-1.0)*gconst2*r20*x9624)));
evalcond[1]=(((r01*x9625))+(((-1.0)*gconst2*r00*x9624))+(((-1.0)*r02*x9623)));
evalcond[2]=((1.0)+(((-1.0)*r12*x9623))+((r11*x9625))+(((-1.0)*gconst2*r10*x9624)));
evalcond[3]=(((r11*x9614*x9617))+((r10*x9616))+(((-1.0)*r10*x9618*x9623))+((r12*x9626))+((r11*x9621)));
evalcond[4]=((((-1.0)*r11*x9616*x9623))+((r10*x9627))+((r10*x9617))+(((-1.0)*r12*sj3*x9624))+((r11*x9618)));
evalcond[5]=(((cj2*sj1))+((r20*x9616))+(((-1.0)*r20*x9618*x9623))+((r21*x9621))+((r22*x9626))+((r21*x9614*x9617))+x9620);
evalcond[6]=(((r01*x9621))+(((-1.0)*r00*x9618*x9623))+((r00*x9616))+((r02*x9626))+x9615+((r01*x9614*x9617))+(((-1.0)*x9622)));
evalcond[7]=(((r20*x9617))+((r20*x9627))+(((-1.0)*r22*sj3*x9624))+((r21*x9618))+(((-1.0)*r21*x9616*x9623))+x9615+(((-1.0)*x9622)));
evalcond[8]=(((r00*x9627))+((r00*x9617))+((r01*x9618))+(((-1.0)*x9620))+(((-1.0)*r02*sj3*x9624))+(((-1.0)*r01*x9616*x9623))+(((-1.0)*sj1*x9619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9628=((-1.0)*r20);
IkReal x9629=x8891;
CheckValue<IkReal> x9631 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9628),IKFAST_ATAN2_MAGTHRESH);
if(!x9631.valid){
continue;
}
IkReal x9630=((-1.0)*(x9631.value));
sj5=gconst1;
cj5=gconst2;
j5=x9630;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9630;
IkReal gconst1=(r21*x9629);
IkReal gconst2=(x9628*x9629);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9632=((-1.0)*r20);
IkReal x9633=x8891;
CheckValue<IkReal> x9635 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9632),IKFAST_ATAN2_MAGTHRESH);
if(!x9635.valid){
continue;
}
IkReal x9634=((-1.0)*(x9635.value));
sj5=gconst1;
cj5=gconst2;
j5=x9634;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9634;
IkReal gconst1=(r21*x9633);
IkReal gconst2=(x9632*x9633);
CheckValue<IkReal> x9643=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9643.valid){
continue;
}
IkReal x9636=x9643.value;
IkReal x9637=(sj3*x9636);
IkReal x9638=(r11*x9637);
IkReal x9639=(r00*x9637);
IkReal x9640=(r01*x9637);
IkReal x9641=(r10*x9637);
IkReal x9642=(r20*r21*x9637);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9640))+((r00*r20*r21*x9638))+((r01*x9638*(r21*r21)))+((r10*x9639*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9644=gconst2*gconst2;
IkReal x9645=gconst1*gconst1;
IkReal x9646=((1.0)*cj3);
IkReal x9647=((1.0)*sj3);
IkReal x9648=(r11*sj3);
IkReal x9649=(r10*sj3);
IkReal x9650=(gconst1*gconst2*r00);
IkReal x9651=(gconst1*gconst2*r01);
IkReal x9652=(r00*x9644);
IkReal x9653=(r01*x9645);
CheckValue<IkReal> x9654 = IKatan2WithCheck(IkReal((((gconst1*r02*x9649))+((gconst2*r02*x9648)))),IkReal((((x9648*x9651))+(((-1.0)*r11*x9647*x9652))+((x9649*x9653))+(((-1.0)*r10*x9647*x9650)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9654.valid){
continue;
}
CheckValue<IkReal> x9655=IKPowWithIntegerCheck(IKsign((((cj3*r10*x9651))+(((-1.0)*r10*x9646*x9652))+(((-1.0)*r11*x9646*x9653))+(((-1.0)*r02*r12*x9646))+((cj3*r11*x9650)))),-1);
if(!x9655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9654.value)+(((1.5707963267949)*(x9655.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9656=IKsin(j4);
IkReal x9657=IKcos(j4);
IkReal x9658=(cj2*sj1);
IkReal x9659=(cj1*sj2);
IkReal x9660=(gconst1*sj3);
IkReal x9661=(cj3*gconst1);
IkReal x9662=(sj1*sj2);
IkReal x9663=(cj3*gconst2);
IkReal x9664=(cj1*cj2);
IkReal x9665=(gconst2*sj3);
IkReal x9666=((1.0)*x9657);
IkReal x9667=((1.0)*x9656);
IkReal x9668=(gconst1*x9656);
IkReal x9669=(cj3*x9656);
IkReal x9670=(x9658+x9659);
IkReal x9671=(x9657*x9665);
evalcond[0]=((((-1.0)*gconst2*r20*x9667))+((r21*x9668))+(((-1.0)*r22*x9666)));
evalcond[1]=(((r01*x9668))+(((-1.0)*gconst2*r00*x9667))+(((-1.0)*r02*x9666)));
evalcond[2]=((-1.0)+((r11*x9668))+(((-1.0)*r12*x9666))+(((-1.0)*gconst2*r10*x9667)));
evalcond[3]=(((r11*x9657*x9661))+((r11*x9665))+(((-1.0)*r10*x9663*x9666))+((r12*x9669))+((r10*x9660)));
evalcond[4]=((((-1.0)*r11*x9660*x9666))+((r11*x9663))+((r10*x9671))+((r10*x9661))+(((-1.0)*r12*sj3*x9667)));
evalcond[5]=(((r21*x9665))+((r20*x9660))+((r21*x9657*x9661))+x9670+((r22*x9669))+(((-1.0)*r20*x9663*x9666)));
evalcond[6]=(((r01*x9657*x9661))+((r00*x9660))+x9664+((r01*x9665))+(((-1.0)*x9662))+(((-1.0)*r00*x9663*x9666))+((r02*x9669)));
evalcond[7]=((((-1.0)*r02*sj3*x9667))+((r00*x9671))+((r00*x9661))+x9670+((r01*x9663))+(((-1.0)*r01*x9660*x9666)));
evalcond[8]=(((r21*x9663))+((r20*x9661))+((r20*x9671))+(((-1.0)*r21*x9660*x9666))+x9662+(((-1.0)*x9664))+(((-1.0)*r22*sj3*x9667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9672=gconst2*gconst2;
IkReal x9673=gconst1*gconst1;
IkReal x9674=(gconst2*r11);
IkReal x9675=(cj3*r02);
IkReal x9676=(gconst1*r01);
IkReal x9677=(cj3*r10);
IkReal x9678=(r10*sj3);
IkReal x9679=((1.0)*gconst1*r00);
IkReal x9680=(r01*x9673);
IkReal x9681=(r00*x9672);
CheckValue<IkReal> x9682 = IKatan2WithCheck(IkReal((((gconst1*r10*x9675))+((x9674*x9675)))),IkReal((((cj3*x9674*x9676))+((x9677*x9680))+(((-1.0)*gconst2*x9677*x9679))+(((-1.0)*cj3*r11*x9681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9682.valid){
continue;
}
CheckValue<IkReal> x9683=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*sj3*x9674*x9679))+(((-1.0)*gconst2*x9676*x9678))+((r11*sj3*x9680))+((x9678*x9681)))),-1);
if(!x9683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9682.value)+(((1.5707963267949)*(x9683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9684=IKsin(j4);
IkReal x9685=IKcos(j4);
IkReal x9686=(cj2*sj1);
IkReal x9687=(cj1*sj2);
IkReal x9688=(gconst1*sj3);
IkReal x9689=(cj3*gconst1);
IkReal x9690=(sj1*sj2);
IkReal x9691=(cj3*gconst2);
IkReal x9692=(cj1*cj2);
IkReal x9693=(gconst2*sj3);
IkReal x9694=((1.0)*x9685);
IkReal x9695=((1.0)*x9684);
IkReal x9696=(gconst1*x9684);
IkReal x9697=(cj3*x9684);
IkReal x9698=(x9687+x9686);
IkReal x9699=(x9685*x9693);
evalcond[0]=(((r21*x9696))+(((-1.0)*r22*x9694))+(((-1.0)*gconst2*r20*x9695)));
evalcond[1]=((((-1.0)*gconst2*r00*x9695))+(((-1.0)*r02*x9694))+((r01*x9696)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9695))+(((-1.0)*r12*x9694))+((r11*x9696)));
evalcond[3]=(((r11*x9685*x9689))+(((-1.0)*r10*x9691*x9694))+((r12*x9697))+((r11*x9693))+((r10*x9688)));
evalcond[4]=(((r11*x9691))+((r10*x9699))+(((-1.0)*r12*sj3*x9695))+((r10*x9689))+(((-1.0)*r11*x9688*x9694)));
evalcond[5]=((((-1.0)*r20*x9691*x9694))+((r22*x9697))+((r21*x9685*x9689))+((r21*x9693))+x9698+((r20*x9688)));
evalcond[6]=((((-1.0)*x9690))+((r02*x9697))+x9692+((r01*x9693))+((r00*x9688))+(((-1.0)*r00*x9691*x9694))+((r01*x9685*x9689)));
evalcond[7]=((((-1.0)*r02*sj3*x9695))+x9698+((r00*x9699))+((r01*x9691))+((r00*x9689))+(((-1.0)*r01*x9688*x9694)));
evalcond[8]=((((-1.0)*x9692))+(((-1.0)*r22*sj3*x9695))+((r21*x9691))+x9690+(((-1.0)*r21*x9688*x9694))+((r20*x9689))+((r20*x9699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9700 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9700.valid){
continue;
}
CheckValue<IkReal> x9701=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9700.value)+(((1.5707963267949)*(x9701.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9702=IKsin(j4);
IkReal x9703=IKcos(j4);
IkReal x9704=(cj2*sj1);
IkReal x9705=(cj1*sj2);
IkReal x9706=(gconst1*sj3);
IkReal x9707=(cj3*gconst1);
IkReal x9708=(sj1*sj2);
IkReal x9709=(cj3*gconst2);
IkReal x9710=(cj1*cj2);
IkReal x9711=(gconst2*sj3);
IkReal x9712=((1.0)*x9703);
IkReal x9713=((1.0)*x9702);
IkReal x9714=(gconst1*x9702);
IkReal x9715=(cj3*x9702);
IkReal x9716=(x9704+x9705);
IkReal x9717=(x9703*x9711);
evalcond[0]=((((-1.0)*gconst2*r20*x9713))+((r21*x9714))+(((-1.0)*r22*x9712)));
evalcond[1]=((((-1.0)*r02*x9712))+(((-1.0)*gconst2*r00*x9713))+((r01*x9714)));
evalcond[2]=((-1.0)+((r11*x9714))+(((-1.0)*gconst2*r10*x9713))+(((-1.0)*r12*x9712)));
evalcond[3]=(((r10*x9706))+((r12*x9715))+(((-1.0)*r10*x9709*x9712))+((r11*x9711))+((r11*x9703*x9707)));
evalcond[4]=(((r10*x9707))+(((-1.0)*r12*sj3*x9713))+((r11*x9709))+(((-1.0)*r11*x9706*x9712))+((r10*x9717)));
evalcond[5]=(((r22*x9715))+((r20*x9706))+x9716+((r21*x9703*x9707))+((r21*x9711))+(((-1.0)*r20*x9709*x9712)));
evalcond[6]=(((r01*x9703*x9707))+(((-1.0)*x9708))+(((-1.0)*r00*x9709*x9712))+((r02*x9715))+((r00*x9706))+x9710+((r01*x9711)));
evalcond[7]=((((-1.0)*r02*sj3*x9713))+((r01*x9709))+((r00*x9707))+x9716+((r00*x9717))+(((-1.0)*r01*x9706*x9712)));
evalcond[8]=(((r20*x9707))+(((-1.0)*r22*sj3*x9713))+((r21*x9709))+x9708+(((-1.0)*r21*x9706*x9712))+((r20*x9717))+(((-1.0)*x9710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9718=((-1.0)*r20);
IkReal x9719=x8891;
CheckValue<IkReal> x9721 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9718),IKFAST_ATAN2_MAGTHRESH);
if(!x9721.valid){
continue;
}
IkReal x9720=((-1.0)*(x9721.value));
sj5=gconst1;
cj5=gconst2;
j5=x9720;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9720;
IkReal gconst1=(r21*x9719);
IkReal gconst2=(x9718*x9719);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9722=((-1.0)*r20);
IkReal x9723=x8891;
CheckValue<IkReal> x9725 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9722),IKFAST_ATAN2_MAGTHRESH);
if(!x9725.valid){
continue;
}
IkReal x9724=((-1.0)*(x9725.value));
sj5=gconst1;
cj5=gconst2;
j5=x9724;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9724;
IkReal gconst1=(r21*x9723);
IkReal gconst2=(x9722*x9723);
CheckValue<IkReal> x9733=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9733.valid){
continue;
}
IkReal x9726=x9733.value;
IkReal x9727=(sj3*x9726);
IkReal x9728=(r11*x9727);
IkReal x9729=(r00*x9727);
IkReal x9730=(r01*x9727);
IkReal x9731=(r10*x9727);
IkReal x9732=(r20*r21*x9727);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9730))+((r01*x9728*(r21*r21)))+((r10*x9729*(r20*r20)))+((r00*r20*r21*x9728))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9734=gconst1*gconst1;
IkReal x9735=gconst2*gconst2;
IkReal x9736=((1.0)*cj3);
IkReal x9737=(gconst2*r10);
IkReal x9738=(r01*sj3);
IkReal x9739=(gconst1*r00*sj3);
IkReal x9740=(gconst1*gconst2*r11);
IkReal x9741=(r10*x9735);
IkReal x9742=(r11*x9734);
CheckValue<IkReal> x9743 = IKatan2WithCheck(IkReal((((gconst2*r12*x9738))+((r12*x9739)))),IkReal(((((-1.0)*x9737*x9739))+(((-1.0)*x9738*x9741))+((x9738*x9740))+((r00*sj3*x9742)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9743.valid){
continue;
}
CheckValue<IkReal> x9744=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9736))+((cj3*gconst1*r01*x9737))+(((-1.0)*r00*x9736*x9741))+(((-1.0)*r01*x9736*x9742))+((cj3*r00*x9740)))),-1);
if(!x9744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9743.value)+(((1.5707963267949)*(x9744.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9745=IKsin(j4);
IkReal x9746=IKcos(j4);
IkReal x9747=(sj1*sj2);
IkReal x9748=(gconst1*sj3);
IkReal x9749=(cj3*gconst1);
IkReal x9750=(cj3*gconst2);
IkReal x9751=((1.0)*cj2);
IkReal x9752=(cj1*sj2);
IkReal x9753=(gconst2*sj3);
IkReal x9754=(cj1*x9751);
IkReal x9755=((1.0)*x9746);
IkReal x9756=((1.0)*x9745);
IkReal x9757=(gconst1*x9745);
IkReal x9758=(cj3*x9745);
IkReal x9759=(x9746*x9753);
evalcond[0]=(((r21*x9757))+(((-1.0)*r22*x9755))+(((-1.0)*gconst2*r20*x9756)));
evalcond[1]=(((r11*x9757))+(((-1.0)*gconst2*r10*x9756))+(((-1.0)*r12*x9755)));
evalcond[2]=((-1.0)+((r01*x9757))+(((-1.0)*r02*x9755))+(((-1.0)*gconst2*r00*x9756)));
evalcond[3]=(((r01*x9753))+((r01*x9746*x9749))+(((-1.0)*r00*x9750*x9755))+((r02*x9758))+((r00*x9748)));
evalcond[4]=(((r01*x9750))+((r00*x9759))+(((-1.0)*r01*x9748*x9755))+((r00*x9749))+(((-1.0)*r02*sj3*x9756)));
evalcond[5]=(((cj2*sj1))+((r21*x9746*x9749))+(((-1.0)*r20*x9750*x9755))+((r22*x9758))+((r21*x9753))+x9752+((r20*x9748)));
evalcond[6]=(((r11*x9753))+((r11*x9746*x9749))+((r10*x9748))+(((-1.0)*r10*x9750*x9755))+x9747+((r12*x9758))+(((-1.0)*x9754)));
evalcond[7]=((((-1.0)*r21*x9748*x9755))+((r21*x9750))+x9747+((r20*x9749))+(((-1.0)*r22*sj3*x9756))+((r20*x9759))+(((-1.0)*x9754)));
evalcond[8]=(((r10*x9759))+((r11*x9750))+(((-1.0)*x9752))+(((-1.0)*r11*x9748*x9755))+((r10*x9749))+(((-1.0)*r12*sj3*x9756))+(((-1.0)*sj1*x9751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9760=gconst2*gconst2;
IkReal x9761=gconst1*gconst1;
IkReal x9762=(gconst1*r00);
IkReal x9763=(r11*sj3);
IkReal x9764=((1.0)*gconst2);
IkReal x9765=(cj3*r12);
IkReal x9766=(cj3*r11);
IkReal x9767=(gconst2*r01);
IkReal x9768=(cj3*r10);
IkReal x9769=(r10*sj3);
CheckValue<IkReal> x9770 = IKatan2WithCheck(IkReal((((x9765*x9767))+((x9762*x9765)))),IkReal(((((-1.0)*x9762*x9764*x9768))+(((-1.0)*r01*x9760*x9768))+((gconst1*x9766*x9767))+((r00*x9761*x9766)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9770.valid){
continue;
}
CheckValue<IkReal> x9771=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*x9760*x9769))+(((-1.0)*x9762*x9763*x9764))+(((-1.0)*gconst1*r01*x9764*x9769))+((r01*x9761*x9763)))),-1);
if(!x9771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9770.value)+(((1.5707963267949)*(x9771.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9772=IKsin(j4);
IkReal x9773=IKcos(j4);
IkReal x9774=(sj1*sj2);
IkReal x9775=(gconst1*sj3);
IkReal x9776=(cj3*gconst1);
IkReal x9777=(cj3*gconst2);
IkReal x9778=((1.0)*cj2);
IkReal x9779=(cj1*sj2);
IkReal x9780=(gconst2*sj3);
IkReal x9781=(cj1*x9778);
IkReal x9782=((1.0)*x9773);
IkReal x9783=((1.0)*x9772);
IkReal x9784=(gconst1*x9772);
IkReal x9785=(cj3*x9772);
IkReal x9786=(x9773*x9780);
evalcond[0]=(((r21*x9784))+(((-1.0)*gconst2*r20*x9783))+(((-1.0)*r22*x9782)));
evalcond[1]=((((-1.0)*r12*x9782))+((r11*x9784))+(((-1.0)*gconst2*r10*x9783)));
evalcond[2]=((-1.0)+((r01*x9784))+(((-1.0)*gconst2*r00*x9783))+(((-1.0)*r02*x9782)));
evalcond[3]=((((-1.0)*r00*x9777*x9782))+((r01*x9780))+((r00*x9775))+((r01*x9773*x9776))+((r02*x9785)));
evalcond[4]=(((r00*x9786))+(((-1.0)*r02*sj3*x9783))+((r01*x9777))+((r00*x9776))+(((-1.0)*r01*x9775*x9782)));
evalcond[5]=(((cj2*sj1))+((r21*x9780))+(((-1.0)*r20*x9777*x9782))+((r22*x9785))+((r21*x9773*x9776))+x9779+((r20*x9775)));
evalcond[6]=(((r10*x9775))+x9774+((r11*x9780))+((r11*x9773*x9776))+((r12*x9785))+(((-1.0)*x9781))+(((-1.0)*r10*x9777*x9782)));
evalcond[7]=((((-1.0)*r21*x9775*x9782))+(((-1.0)*r22*sj3*x9783))+x9774+((r21*x9777))+((r20*x9776))+((r20*x9786))+(((-1.0)*x9781)));
evalcond[8]=(((r10*x9776))+(((-1.0)*x9779))+(((-1.0)*r12*sj3*x9783))+((r10*x9786))+(((-1.0)*sj1*x9778))+(((-1.0)*r11*x9775*x9782))+((r11*x9777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9787=((1.0)*gconst2);
CheckValue<IkReal> x9788 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9787))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9788.valid){
continue;
}
CheckValue<IkReal> x9789=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9787))+(((-1.0)*gconst1*r10)))),-1);
if(!x9789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9788.value)+(((1.5707963267949)*(x9789.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9790=IKsin(j4);
IkReal x9791=IKcos(j4);
IkReal x9792=(sj1*sj2);
IkReal x9793=(gconst1*sj3);
IkReal x9794=(cj3*gconst1);
IkReal x9795=(cj3*gconst2);
IkReal x9796=((1.0)*cj2);
IkReal x9797=(cj1*sj2);
IkReal x9798=(gconst2*sj3);
IkReal x9799=(cj1*x9796);
IkReal x9800=((1.0)*x9791);
IkReal x9801=((1.0)*x9790);
IkReal x9802=(gconst1*x9790);
IkReal x9803=(cj3*x9790);
IkReal x9804=(x9791*x9798);
evalcond[0]=(((r21*x9802))+(((-1.0)*r22*x9800))+(((-1.0)*gconst2*r20*x9801)));
evalcond[1]=((((-1.0)*gconst2*r10*x9801))+((r11*x9802))+(((-1.0)*r12*x9800)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9801))+(((-1.0)*r02*x9800))+((r01*x9802)));
evalcond[3]=((((-1.0)*r00*x9795*x9800))+((r01*x9791*x9794))+((r00*x9793))+((r02*x9803))+((r01*x9798)));
evalcond[4]=(((r00*x9804))+((r00*x9794))+((r01*x9795))+(((-1.0)*r01*x9793*x9800))+(((-1.0)*r02*sj3*x9801)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x9795*x9800))+((r20*x9793))+((r22*x9803))+x9797+((r21*x9798))+((r21*x9791*x9794)));
evalcond[6]=(((r12*x9803))+((r11*x9798))+((r10*x9793))+(((-1.0)*r10*x9795*x9800))+(((-1.0)*x9799))+x9792+((r11*x9791*x9794)));
evalcond[7]=((((-1.0)*r22*sj3*x9801))+((r20*x9794))+(((-1.0)*x9799))+x9792+(((-1.0)*r21*x9793*x9800))+((r21*x9795))+((r20*x9804)));
evalcond[8]=((((-1.0)*r11*x9793*x9800))+((r10*x9804))+(((-1.0)*sj1*x9796))+((r11*x9795))+((r10*x9794))+(((-1.0)*x9797))+(((-1.0)*r12*sj3*x9801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9805=((-1.0)*r20);
IkReal x9806=x8891;
CheckValue<IkReal> x9808 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9805),IKFAST_ATAN2_MAGTHRESH);
if(!x9808.valid){
continue;
}
IkReal x9807=((-1.0)*(x9808.value));
sj5=gconst1;
cj5=gconst2;
j5=x9807;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9807;
IkReal gconst1=(r21*x9806);
IkReal gconst2=(x9805*x9806);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9809=((-1.0)*r20);
IkReal x9810=x8891;
CheckValue<IkReal> x9812 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9809),IKFAST_ATAN2_MAGTHRESH);
if(!x9812.valid){
continue;
}
IkReal x9811=((-1.0)*(x9812.value));
sj5=gconst1;
cj5=gconst2;
j5=x9811;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9811;
IkReal gconst1=(r21*x9810);
IkReal gconst2=(x9809*x9810);
CheckValue<IkReal> x9820=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9820.valid){
continue;
}
IkReal x9813=x9820.value;
IkReal x9814=(sj3*x9813);
IkReal x9815=(r11*x9814);
IkReal x9816=(r00*x9814);
IkReal x9817=(r01*x9814);
IkReal x9818=(r10*x9814);
IkReal x9819=(r20*r21*x9814);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9815*(r21*r21)))+((r10*r20*r21*x9817))+((r00*r20*r21*x9815))+((r10*x9816*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9821=gconst1*gconst1;
IkReal x9822=gconst2*gconst2;
IkReal x9823=((1.0)*cj3);
IkReal x9824=(gconst2*r10);
IkReal x9825=(r01*sj3);
IkReal x9826=(gconst1*r00*sj3);
IkReal x9827=(gconst1*gconst2*r11);
IkReal x9828=(r10*x9822);
IkReal x9829=(r11*x9821);
CheckValue<IkReal> x9830=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9823*x9828))+((cj3*gconst1*r01*x9824))+((cj3*r00*x9827))+(((-1.0)*r01*x9823*x9829))+(((-1.0)*r02*r12*x9823)))),-1);
if(!x9830.valid){
continue;
}
CheckValue<IkReal> x9831 = IKatan2WithCheck(IkReal((((gconst2*r12*x9825))+((r12*x9826)))),IkReal((((x9825*x9827))+((r00*sj3*x9829))+(((-1.0)*x9824*x9826))+(((-1.0)*x9825*x9828)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9830.value)))+(x9831.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9832=IKsin(j4);
IkReal x9833=IKcos(j4);
IkReal x9834=(cj2*sj1);
IkReal x9835=(cj1*sj2);
IkReal x9836=(gconst1*sj3);
IkReal x9837=(cj3*gconst1);
IkReal x9838=(sj1*sj2);
IkReal x9839=(cj3*gconst2);
IkReal x9840=(cj1*cj2);
IkReal x9841=(gconst2*sj3);
IkReal x9842=((1.0)*x9833);
IkReal x9843=((1.0)*x9832);
IkReal x9844=(gconst1*x9832);
IkReal x9845=(cj3*x9832);
IkReal x9846=(x9834+x9835);
IkReal x9847=(x9833*x9841);
evalcond[0]=((((-1.0)*gconst2*r20*x9843))+(((-1.0)*r22*x9842))+((r21*x9844)));
evalcond[1]=(((r11*x9844))+(((-1.0)*r12*x9842))+(((-1.0)*gconst2*r10*x9843)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9843))+(((-1.0)*r02*x9842))+((r01*x9844)));
evalcond[3]=(((r00*x9836))+((r02*x9845))+((r01*x9833*x9837))+(((-1.0)*r00*x9839*x9842))+((r01*x9841)));
evalcond[4]=(((r00*x9837))+(((-1.0)*r01*x9836*x9842))+((r01*x9839))+(((-1.0)*r02*sj3*x9843))+((r00*x9847)));
evalcond[5]=(((r21*x9833*x9837))+(((-1.0)*r20*x9839*x9842))+((r20*x9836))+x9846+((r22*x9845))+((r21*x9841)));
evalcond[6]=(((r11*x9841))+((r10*x9836))+((r11*x9833*x9837))+(((-1.0)*x9838))+(((-1.0)*r10*x9839*x9842))+((r12*x9845))+x9840);
evalcond[7]=((((-1.0)*r12*sj3*x9843))+((r11*x9839))+((r10*x9847))+((r10*x9837))+(((-1.0)*r11*x9836*x9842))+x9846);
evalcond[8]=((((-1.0)*x9840))+((r21*x9839))+((r20*x9847))+(((-1.0)*r22*sj3*x9843))+(((-1.0)*r21*x9836*x9842))+((r20*x9837))+x9838);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9848=gconst2*gconst2;
IkReal x9849=gconst1*gconst1;
IkReal x9850=(gconst1*r00);
IkReal x9851=(r11*sj3);
IkReal x9852=((1.0)*gconst2);
IkReal x9853=(cj3*r12);
IkReal x9854=(cj3*r11);
IkReal x9855=(gconst2*r01);
IkReal x9856=(cj3*r10);
IkReal x9857=(r10*sj3);
CheckValue<IkReal> x9858 = IKatan2WithCheck(IkReal((((x9850*x9853))+((x9853*x9855)))),IkReal(((((-1.0)*x9850*x9852*x9856))+(((-1.0)*r01*x9848*x9856))+((r00*x9849*x9854))+((gconst1*x9854*x9855)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9858.valid){
continue;
}
CheckValue<IkReal> x9859=IKPowWithIntegerCheck(IKsign((((r01*x9849*x9851))+((r02*r12*sj3))+((r00*x9848*x9857))+(((-1.0)*x9850*x9851*x9852))+(((-1.0)*gconst1*r01*x9852*x9857)))),-1);
if(!x9859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9858.value)+(((1.5707963267949)*(x9859.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9860=IKsin(j4);
IkReal x9861=IKcos(j4);
IkReal x9862=(cj2*sj1);
IkReal x9863=(cj1*sj2);
IkReal x9864=(gconst1*sj3);
IkReal x9865=(cj3*gconst1);
IkReal x9866=(sj1*sj2);
IkReal x9867=(cj3*gconst2);
IkReal x9868=(cj1*cj2);
IkReal x9869=(gconst2*sj3);
IkReal x9870=((1.0)*x9861);
IkReal x9871=((1.0)*x9860);
IkReal x9872=(gconst1*x9860);
IkReal x9873=(cj3*x9860);
IkReal x9874=(x9863+x9862);
IkReal x9875=(x9861*x9869);
evalcond[0]=((((-1.0)*gconst2*r20*x9871))+((r21*x9872))+(((-1.0)*r22*x9870)));
evalcond[1]=((((-1.0)*gconst2*r10*x9871))+((r11*x9872))+(((-1.0)*r12*x9870)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9870))+(((-1.0)*gconst2*r00*x9871))+((r01*x9872)));
evalcond[3]=(((r02*x9873))+((r01*x9861*x9865))+((r00*x9864))+(((-1.0)*r00*x9867*x9870))+((r01*x9869)));
evalcond[4]=((((-1.0)*r01*x9864*x9870))+((r00*x9865))+(((-1.0)*r02*sj3*x9871))+((r01*x9867))+((r00*x9875)));
evalcond[5]=((((-1.0)*r20*x9867*x9870))+((r21*x9861*x9865))+((r22*x9873))+((r21*x9869))+((r20*x9864))+x9874);
evalcond[6]=(((r12*x9873))+((r11*x9869))+(((-1.0)*x9866))+((r10*x9864))+x9868+(((-1.0)*r10*x9867*x9870))+((r11*x9861*x9865)));
evalcond[7]=((((-1.0)*r12*sj3*x9871))+((r10*x9875))+((r11*x9867))+((r10*x9865))+(((-1.0)*r11*x9864*x9870))+x9874);
evalcond[8]=((((-1.0)*r21*x9864*x9870))+((r20*x9875))+(((-1.0)*x9868))+(((-1.0)*r22*sj3*x9871))+((r21*x9867))+((r20*x9865))+x9866);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9876 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9876.valid){
continue;
}
CheckValue<IkReal> x9877=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9876.value)+(((1.5707963267949)*(x9877.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9878=IKsin(j4);
IkReal x9879=IKcos(j4);
IkReal x9880=(cj2*sj1);
IkReal x9881=(cj1*sj2);
IkReal x9882=(gconst1*sj3);
IkReal x9883=(cj3*gconst1);
IkReal x9884=(sj1*sj2);
IkReal x9885=(cj3*gconst2);
IkReal x9886=(cj1*cj2);
IkReal x9887=(gconst2*sj3);
IkReal x9888=((1.0)*x9879);
IkReal x9889=((1.0)*x9878);
IkReal x9890=(gconst1*x9878);
IkReal x9891=(cj3*x9878);
IkReal x9892=(x9881+x9880);
IkReal x9893=(x9879*x9887);
evalcond[0]=((((-1.0)*r22*x9888))+(((-1.0)*gconst2*r20*x9889))+((r21*x9890)));
evalcond[1]=(((r11*x9890))+(((-1.0)*gconst2*r10*x9889))+(((-1.0)*r12*x9888)));
evalcond[2]=((1.0)+((r01*x9890))+(((-1.0)*gconst2*r00*x9889))+(((-1.0)*r02*x9888)));
evalcond[3]=(((r01*x9887))+((r00*x9882))+((r01*x9879*x9883))+((r02*x9891))+(((-1.0)*r00*x9885*x9888)));
evalcond[4]=(((r01*x9885))+((r00*x9893))+((r00*x9883))+(((-1.0)*r02*sj3*x9889))+(((-1.0)*r01*x9882*x9888)));
evalcond[5]=(((r20*x9882))+(((-1.0)*r20*x9885*x9888))+((r22*x9891))+((r21*x9887))+((r21*x9879*x9883))+x9892);
evalcond[6]=((((-1.0)*r10*x9885*x9888))+((r11*x9887))+((r12*x9891))+((r11*x9879*x9883))+((r10*x9882))+(((-1.0)*x9884))+x9886);
evalcond[7]=((((-1.0)*r11*x9882*x9888))+((r11*x9885))+(((-1.0)*r12*sj3*x9889))+((r10*x9883))+((r10*x9893))+x9892);
evalcond[8]=((((-1.0)*r22*sj3*x9889))+((r20*x9883))+((r21*x9885))+(((-1.0)*r21*x9882*x9888))+((r20*x9893))+(((-1.0)*x9886))+x9884);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9894=((-1.0)*r20);
IkReal x9895=((-1.0)*px);
CheckValue<IkReal> x9897 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9894),IKFAST_ATAN2_MAGTHRESH);
if(!x9897.valid){
continue;
}
IkReal x9896=((-1.0)*(x9897.value));
sj5=gconst1;
cj5=gconst2;
j5=x9896;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9895);
rxp1_1=(px*r21);
rxp1_2=(r11*x9895);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9896;
IkReal gconst1=r21;
IkReal gconst2=x9894;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9898=((-1.0)*r20);
IkReal x9899=((-1.0)*px);
CheckValue<IkReal> x9901 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9898),IKFAST_ATAN2_MAGTHRESH);
if(!x9901.valid){
continue;
}
IkReal x9900=((-1.0)*(x9901.value));
sj5=gconst1;
cj5=gconst2;
j5=x9900;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9899);
rxp1_1=(px*r21);
rxp1_2=(r11*x9899);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9900;
IkReal gconst1=r21;
IkReal gconst2=x9898;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9902=((-1.0)*r20);
IkReal x9903=((-1.0)*px);
CheckValue<IkReal> x9905 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9902),IKFAST_ATAN2_MAGTHRESH);
if(!x9905.valid){
continue;
}
IkReal x9904=((-1.0)*(x9905.value));
sj5=gconst1;
cj5=gconst2;
j5=x9904;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9903);
rxp1_1=(px*r21);
rxp1_2=(r11*x9903);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9904;
IkReal gconst1=r21;
IkReal gconst2=x9902;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9906=((-1.0)*r20);
IkReal x9907=((-1.0)*px);
CheckValue<IkReal> x9909 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9906),IKFAST_ATAN2_MAGTHRESH);
if(!x9909.valid){
continue;
}
IkReal x9908=((-1.0)*(x9909.value));
sj5=gconst1;
cj5=gconst2;
j5=x9908;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9907);
rxp1_1=(px*r21);
rxp1_2=(r11*x9907);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9908;
IkReal gconst1=r21;
IkReal gconst2=x9906;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9910=((-1.0)*r20);
IkReal x9911=((-1.0)*px);
CheckValue<IkReal> x9913 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9910),IKFAST_ATAN2_MAGTHRESH);
if(!x9913.valid){
continue;
}
IkReal x9912=((-1.0)*(x9913.value));
sj5=gconst1;
cj5=gconst2;
j5=x9912;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9911);
rxp1_1=(px*r21);
rxp1_2=(r11*x9911);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9912;
IkReal gconst1=r21;
IkReal gconst2=x9910;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9914=((-1.0)*r20);
IkReal x9915=((-1.0)*px);
CheckValue<IkReal> x9917 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9914),IKFAST_ATAN2_MAGTHRESH);
if(!x9917.valid){
continue;
}
IkReal x9916=((-1.0)*(x9917.value));
sj5=gconst1;
cj5=gconst2;
j5=x9916;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9915);
rxp1_1=(px*r21);
rxp1_2=(r11*x9915);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9916;
IkReal gconst1=r21;
IkReal gconst2=x9914;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9920=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9920.valid){
continue;
}
IkReal x9918=x9920.value;
IkReal x9919=(sj0*x9918);
cj4array[0]=(((cj1*sj2*x9919))+((cj2*sj1*x9919)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9921=IKsin(j4);
IkReal x9922=IKcos(j4);
IkReal x9923=(gconst1*x9921);
IkReal x9924=((1.0)*x9922);
IkReal x9925=((1.0)*gconst2*x9921);
evalcond[0]=((-1.0)*r02*x9921);
evalcond[1]=((((-1.0)*r02*x9924))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*r20*x9925))+((r21*x9923)));
evalcond[3]=((((-1.0)*r10*x9925))+((r11*x9923)));
evalcond[4]=((((-1.0)*gconst1*r21*x9924))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst2*r20*x9922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9927=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9927.valid){
continue;
}
IkReal x9926=x9927.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9926))+((cj1*cj2*x9926)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9928=IKsin(j4);
IkReal x9929=IKcos(j4);
IkReal x9930=(gconst2*r10);
IkReal x9931=((1.0)*sj0);
IkReal x9932=((1.0)*x9928);
IkReal x9933=(gconst1*x9928);
IkReal x9934=((1.0)*x9929);
evalcond[0]=((-1.0)*r02*x9928);
evalcond[1]=((((-1.0)*x9931))+(((-1.0)*r02*x9934)));
evalcond[2]=((((-1.0)*gconst2*r20*x9932))+((r21*x9933)));
evalcond[3]=((((-1.0)*x9930*x9932))+((r11*x9933)));
evalcond[4]=((((-1.0)*cj2*sj1*x9931))+(((-1.0)*cj1*sj2*x9931))+((x9929*x9930))+(((-1.0)*gconst1*r11*x9934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9935=IKPowWithIntegerCheck(r02,-1);
if(!x9935.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9935.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9936=IKsin(j4);
IkReal x9937=IKcos(j4);
IkReal x9938=(gconst2*r10);
IkReal x9939=((1.0)*sj0);
IkReal x9940=(gconst1*r11);
IkReal x9941=(gconst1*r21);
IkReal x9942=(gconst2*r20);
IkReal x9943=((1.0)*x9936);
IkReal x9944=((1.0)*x9937);
evalcond[0]=((-1.0)*r02*x9936);
evalcond[1]=(((x9936*x9941))+(((-1.0)*x9942*x9943)));
evalcond[2]=(((x9936*x9940))+(((-1.0)*x9938*x9943)));
evalcond[3]=((((-1.0)*x9941*x9944))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x9937*x9942)));
evalcond[4]=((((-1.0)*cj2*sj1*x9939))+(((-1.0)*x9940*x9944))+(((-1.0)*cj1*sj2*x9939))+((x9937*x9938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9945=((-1.0)*r20);
IkReal x9946=((-1.0)*px);
CheckValue<IkReal> x9948 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9945),IKFAST_ATAN2_MAGTHRESH);
if(!x9948.valid){
continue;
}
IkReal x9947=((-1.0)*(x9948.value));
sj5=gconst1;
cj5=gconst2;
j5=x9947;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9946);
rxp1_1=(px*r21);
rxp1_2=(r11*x9946);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9947;
IkReal gconst1=r21;
IkReal gconst2=x9945;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9949=((-1.0)*r20);
IkReal x9950=((-1.0)*px);
CheckValue<IkReal> x9952 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9949),IKFAST_ATAN2_MAGTHRESH);
if(!x9952.valid){
continue;
}
IkReal x9951=((-1.0)*(x9952.value));
sj5=gconst1;
cj5=gconst2;
j5=x9951;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9950);
rxp1_1=(px*r21);
rxp1_2=(r11*x9950);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9951;
IkReal gconst1=r21;
IkReal gconst2=x9949;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9953=((-1.0)*r20);
IkReal x9954=((-1.0)*px);
CheckValue<IkReal> x9956 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9953),IKFAST_ATAN2_MAGTHRESH);
if(!x9956.valid){
continue;
}
IkReal x9955=((-1.0)*(x9956.value));
sj5=gconst1;
cj5=gconst2;
j5=x9955;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9954);
rxp1_1=(px*r21);
rxp1_2=(r11*x9954);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9955;
IkReal gconst1=r21;
IkReal gconst2=x9953;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9959=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9959.valid){
continue;
}
IkReal x9957=x9959.value;
IkReal x9958=(sj0*x9957);
cj4array[0]=(((cj1*sj2*x9958))+((cj2*sj1*x9958)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9960=IKsin(j4);
IkReal x9961=IKcos(j4);
IkReal x9962=((1.0)*gconst2);
IkReal x9963=(gconst1*r21);
evalcond[0]=(r02*x9960);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9961)));
evalcond[2]=((((-1.0)*r20*x9960*x9962))+((x9960*x9963)));
evalcond[3]=((((-1.0)*r10*x9960*x9962))+((gconst1*r11*x9960)));
evalcond[4]=((((-1.0)*r20*x9961*x9962))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x9961*x9963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9965=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9965.valid){
continue;
}
IkReal x9964=x9965.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9964))+((cj1*cj2*x9964)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9966=IKsin(j4);
IkReal x9967=IKcos(j4);
IkReal x9968=((1.0)*sj0);
IkReal x9969=(gconst1*x9966);
IkReal x9970=((1.0)*x9967);
IkReal x9971=((1.0)*gconst2*x9966);
evalcond[0]=(r02*x9966);
evalcond[1]=((((-1.0)*r02*x9970))+(((-1.0)*x9968)));
evalcond[2]=(((r21*x9969))+(((-1.0)*r20*x9971)));
evalcond[3]=((((-1.0)*r10*x9971))+((r11*x9969)));
evalcond[4]=((((-1.0)*cj2*sj1*x9968))+(((-1.0)*cj1*sj2*x9968))+(((-1.0)*gconst2*r10*x9970))+((gconst1*r11*x9967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9972=IKPowWithIntegerCheck(r02,-1);
if(!x9972.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9972.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9973=IKsin(j4);
IkReal x9974=IKcos(j4);
IkReal x9975=(gconst1*r21);
IkReal x9976=((1.0)*sj0);
IkReal x9977=(gconst1*r11);
IkReal x9978=((1.0)*gconst2*r10);
IkReal x9979=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9973);
evalcond[1]=(((x9973*x9975))+(((-1.0)*x9973*x9979)));
evalcond[2]=(((x9973*x9977))+(((-1.0)*x9973*x9978)));
evalcond[3]=(((x9974*x9975))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9974*x9979)));
evalcond[4]=(((x9974*x9977))+(((-1.0)*cj2*sj1*x9976))+(((-1.0)*cj1*sj2*x9976))+(((-1.0)*x9974*x9978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9981=IKPowWithIntegerCheck(r02,-1);
if(!x9981.valid){
continue;
}
IkReal x9980=x9981.value;
CheckValue<IkReal> x9982=IKPowWithIntegerCheck(cj3,-1);
if(!x9982.valid){
continue;
}
if( IKabs((x9980*(x9982.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x9980)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9980*(x9982.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x9980))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9980*(x9982.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x9980));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9983=IKsin(j4);
IkReal x9984=IKcos(j4);
IkReal x9985=(gconst2*r10);
IkReal x9986=(gconst1*r11);
IkReal x9987=(sj1*sj2);
IkReal x9988=(gconst2*r20);
IkReal x9989=(cj2*sj1);
IkReal x9990=((1.0)*sj0);
IkReal x9991=(gconst1*r20);
IkReal x9992=(gconst2*r11);
IkReal x9993=(gconst1*r21);
IkReal x9994=((1.0)*cj0);
IkReal x9995=(gconst1*r10);
IkReal x9996=(cj1*sj2);
IkReal x9997=(gconst2*r21);
IkReal x9998=(sj3*x9984);
IkReal x9999=((1.0)*cj1*cj2);
IkReal x10000=(cj3*x9984);
IkReal x10001=(r02*x9983);
IkReal x10002=((1.0)*x9983);
evalcond[0]=((((-1.0)*r02*x9984))+(((-1.0)*x9990)));
evalcond[1]=(((x9983*x9993))+(((-1.0)*x10002*x9988)));
evalcond[2]=(cj0+((x9983*x9986))+(((-1.0)*x10002*x9985)));
evalcond[3]=(((cj0*x9987))+((cj3*x10001))+(((-1.0)*cj1*cj2*x9994)));
evalcond[4]=((((-1.0)*x9994*x9996))+(((-1.0)*x9989*x9994))+(((-1.0)*sj3*x10001)));
evalcond[5]=(((sj3*x9997))+((sj3*x9991))+((x10000*x9993))+(((-1.0)*x10000*x9988))+x9989+x9996);
evalcond[6]=(((cj3*x9991))+((cj3*x9997))+(((-1.0)*x9993*x9998))+((x9988*x9998))+x9987+(((-1.0)*x9999)));
evalcond[7]=(((sj0*x9987))+((sj3*x9995))+((sj3*x9992))+((x10000*x9986))+(((-1.0)*x10000*x9985))+(((-1.0)*cj1*cj2*x9990)));
evalcond[8]=(((cj3*x9992))+((cj3*x9995))+(((-1.0)*x9990*x9996))+(((-1.0)*x9986*x9998))+((x9985*x9998))+(((-1.0)*x9989*x9990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10003=((1.0)*sj3);
IkReal x10004=((1.0)*gconst2);
CheckValue<IkReal> x10005=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x10004))),-1);
if(!x10005.valid){
continue;
}
CheckValue<IkReal> x10006=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x10004))),-1);
if(!x10006.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10005.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10006.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst2*r21*x10003))+(((-1.0)*gconst1*r20*x10003))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10005.value)))+IKsqr(((x10006.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst2*r21*x10003))+(((-1.0)*gconst1*r20*x10003))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10005.value)), ((x10006.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst2*r21*x10003))+(((-1.0)*gconst1*r20*x10003))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10007=IKsin(j4);
IkReal x10008=IKcos(j4);
IkReal x10009=(gconst2*r10);
IkReal x10010=(gconst1*r11);
IkReal x10011=(sj1*sj2);
IkReal x10012=(gconst2*r20);
IkReal x10013=(cj2*sj1);
IkReal x10014=((1.0)*sj0);
IkReal x10015=(gconst1*r20);
IkReal x10016=(gconst2*r11);
IkReal x10017=(gconst1*r21);
IkReal x10018=((1.0)*cj0);
IkReal x10019=(gconst1*r10);
IkReal x10020=(cj1*sj2);
IkReal x10021=(gconst2*r21);
IkReal x10022=(sj3*x10008);
IkReal x10023=((1.0)*cj1*cj2);
IkReal x10024=(cj3*x10008);
IkReal x10025=(r02*x10007);
IkReal x10026=((1.0)*x10007);
evalcond[0]=((((-1.0)*r02*x10008))+(((-1.0)*x10014)));
evalcond[1]=(((x10007*x10017))+(((-1.0)*x10012*x10026)));
evalcond[2]=((((-1.0)*x10009*x10026))+cj0+((x10007*x10010)));
evalcond[3]=(((cj0*x10011))+(((-1.0)*cj1*cj2*x10018))+((cj3*x10025)));
evalcond[4]=((((-1.0)*x10013*x10018))+(((-1.0)*sj3*x10025))+(((-1.0)*x10018*x10020)));
evalcond[5]=((((-1.0)*x10012*x10024))+((x10017*x10024))+((sj3*x10021))+x10020+x10013+((sj3*x10015)));
evalcond[6]=((((-1.0)*x10017*x10022))+((cj3*x10015))+x10011+(((-1.0)*x10023))+((cj3*x10021))+((x10012*x10022)));
evalcond[7]=((((-1.0)*x10009*x10024))+((x10010*x10024))+(((-1.0)*cj1*cj2*x10014))+((sj3*x10019))+((sj3*x10016))+((sj0*x10011)));
evalcond[8]=((((-1.0)*x10013*x10014))+(((-1.0)*x10010*x10022))+((cj3*x10019))+((cj3*x10016))+((x10009*x10022))+(((-1.0)*x10014*x10020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10027=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10027.valid){
continue;
}
CheckValue<IkReal> x10028=IKPowWithIntegerCheck(r02,-1);
if(!x10028.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10027.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10028.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10027.value)))+IKsqr(((-1.0)*sj0*(x10028.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10027.value)), ((-1.0)*sj0*(x10028.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10029=IKsin(j4);
IkReal x10030=IKcos(j4);
IkReal x10031=(gconst2*r10);
IkReal x10032=(gconst1*r11);
IkReal x10033=(sj1*sj2);
IkReal x10034=(gconst2*r20);
IkReal x10035=(cj2*sj1);
IkReal x10036=((1.0)*sj0);
IkReal x10037=(gconst1*r20);
IkReal x10038=(gconst2*r11);
IkReal x10039=(gconst1*r21);
IkReal x10040=((1.0)*cj0);
IkReal x10041=(gconst1*r10);
IkReal x10042=(cj1*sj2);
IkReal x10043=(gconst2*r21);
IkReal x10044=(sj3*x10030);
IkReal x10045=((1.0)*cj1*cj2);
IkReal x10046=(cj3*x10030);
IkReal x10047=(r02*x10029);
IkReal x10048=((1.0)*x10029);
evalcond[0]=((((-1.0)*r02*x10030))+(((-1.0)*x10036)));
evalcond[1]=(((x10029*x10039))+(((-1.0)*x10034*x10048)));
evalcond[2]=(cj0+((x10029*x10032))+(((-1.0)*x10031*x10048)));
evalcond[3]=(((cj0*x10033))+(((-1.0)*cj1*cj2*x10040))+((cj3*x10047)));
evalcond[4]=((((-1.0)*sj3*x10047))+(((-1.0)*x10035*x10040))+(((-1.0)*x10040*x10042)));
evalcond[5]=((((-1.0)*x10034*x10046))+((sj3*x10037))+((sj3*x10043))+((x10039*x10046))+x10042+x10035);
evalcond[6]=((((-1.0)*x10039*x10044))+x10033+((cj3*x10037))+((cj3*x10043))+(((-1.0)*x10045))+((x10034*x10044)));
evalcond[7]=(((sj0*x10033))+((sj3*x10038))+((sj3*x10041))+((x10032*x10046))+(((-1.0)*cj1*cj2*x10036))+(((-1.0)*x10031*x10046)));
evalcond[8]=(((x10031*x10044))+(((-1.0)*x10035*x10036))+(((-1.0)*x10036*x10042))+((cj3*x10038))+((cj3*x10041))+(((-1.0)*x10032*x10044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10049=gconst1*gconst1;
IkReal x10050=r21*r21;
IkReal x10051=gconst2*gconst2;
IkReal x10052=r20*r20;
IkReal x10053=(gconst2*r20);
IkReal x10054=(cj1*cj2);
IkReal x10055=(sj1*sj2);
IkReal x10056=(gconst1*r21);
IkReal x10057=(cj3*gconst2);
IkReal x10058=(cj3*r20);
CheckValue<IkReal> x10059=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x10053*x10056))+((sj3*x10051*x10052))+((sj3*x10049*x10050)))),-1);
if(!x10059.valid){
continue;
}
CheckValue<IkReal> x10060 = IKatan2WithCheck(IkReal((((r21*r22*x10057))+((gconst1*r22*x10058))+(((-1.0)*r22*x10054))+((r22*x10055)))),IkReal(((((-1.0)*r21*x10051*x10058))+(((-1.0)*gconst1*x10052*x10057))+(((-1.0)*x10054*x10056))+((r21*x10049*x10058))+(((-1.0)*x10053*x10055))+((x10055*x10056))+((x10053*x10054))+((gconst1*x10050*x10057)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10059.value)))+(x10060.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10061=IKsin(j4);
IkReal x10062=IKcos(j4);
IkReal x10063=(cj3*gconst1);
IkReal x10064=(gconst1*r01);
IkReal x10065=(gconst1*r11);
IkReal x10066=(sj1*sj2);
IkReal x10067=(cj3*gconst2);
IkReal x10068=(gconst1*sj3);
IkReal x10069=(gconst2*sj3);
IkReal x10070=((1.0)*sj0);
IkReal x10071=(cj1*sj2);
IkReal x10072=((1.0)*x10062);
IkReal x10073=((1.0)*x10061);
IkReal x10074=((1.0)*cj1*cj2);
IkReal x10075=(cj3*x10061);
IkReal x10076=((1.0)*cj2*sj1);
IkReal x10077=(x10062*x10069);
evalcond[0]=(((gconst1*r21*x10061))+(((-1.0)*r22*x10072))+(((-1.0)*gconst2*r20*x10073)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x10073))+((x10061*x10065))+(((-1.0)*r12*x10072)));
evalcond[2]=((((-1.0)*x10070))+(((-1.0)*gconst2*r00*x10073))+((x10061*x10064))+(((-1.0)*r02*x10072)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x10067*x10072))+((r20*x10068))+((r21*x10062*x10063))+x10071+((r22*x10075))+((r21*x10069)));
evalcond[4]=((((-1.0)*r22*sj3*x10073))+((r20*x10063))+((r20*x10077))+(((-1.0)*x10074))+(((-1.0)*r21*x10068*x10072))+x10066+((r21*x10067)));
evalcond[5]=((((-1.0)*cj0*x10074))+((r00*x10068))+(((-1.0)*r00*x10067*x10072))+((r01*x10069))+((r02*x10075))+((r01*x10062*x10063))+((cj0*x10066)));
evalcond[6]=((((-1.0)*r10*x10067*x10072))+((r10*x10068))+((r12*x10075))+(((-1.0)*cj1*cj2*x10070))+((r11*x10062*x10063))+((sj0*x10066))+((r11*x10069)));
evalcond[7]=((((-1.0)*cj0*x10076))+(((-1.0)*sj3*x10064*x10072))+((r00*x10063))+((r00*x10077))+((r01*x10067))+(((-1.0)*cj0*x10071))+(((-1.0)*r02*sj3*x10073)));
evalcond[8]=(((r10*x10077))+((r10*x10063))+(((-1.0)*r12*sj3*x10073))+(((-1.0)*sj3*x10065*x10072))+(((-1.0)*cj2*sj1*x10070))+((r11*x10067))+(((-1.0)*x10070*x10071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10078=((1.0)*gconst2);
CheckValue<IkReal> x10079=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10078)))),-1);
if(!x10079.valid){
continue;
}
CheckValue<IkReal> x10080 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10078))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10079.value)))+(x10080.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10081=IKsin(j4);
IkReal x10082=IKcos(j4);
IkReal x10083=(cj3*gconst1);
IkReal x10084=(gconst1*r01);
IkReal x10085=(gconst1*r11);
IkReal x10086=(sj1*sj2);
IkReal x10087=(cj3*gconst2);
IkReal x10088=(gconst1*sj3);
IkReal x10089=(gconst2*sj3);
IkReal x10090=((1.0)*sj0);
IkReal x10091=(cj1*sj2);
IkReal x10092=((1.0)*x10082);
IkReal x10093=((1.0)*x10081);
IkReal x10094=((1.0)*cj1*cj2);
IkReal x10095=(cj3*x10081);
IkReal x10096=((1.0)*cj2*sj1);
IkReal x10097=(x10082*x10089);
evalcond[0]=(((gconst1*r21*x10081))+(((-1.0)*gconst2*r20*x10093))+(((-1.0)*r22*x10092)));
evalcond[1]=(cj0+(((-1.0)*r12*x10092))+(((-1.0)*gconst2*r10*x10093))+((x10081*x10085)));
evalcond[2]=((((-1.0)*gconst2*r00*x10093))+(((-1.0)*r02*x10092))+((x10081*x10084))+(((-1.0)*x10090)));
evalcond[3]=(((cj2*sj1))+((r20*x10088))+x10091+((r22*x10095))+((r21*x10089))+((r21*x10082*x10083))+(((-1.0)*r20*x10087*x10092)));
evalcond[4]=((((-1.0)*r22*sj3*x10093))+(((-1.0)*r21*x10088*x10092))+((r20*x10083))+x10086+((r21*x10087))+((r20*x10097))+(((-1.0)*x10094)));
evalcond[5]=(((r01*x10082*x10083))+((r00*x10088))+((r01*x10089))+((r02*x10095))+(((-1.0)*r00*x10087*x10092))+((cj0*x10086))+(((-1.0)*cj0*x10094)));
evalcond[6]=(((r12*x10095))+((sj0*x10086))+(((-1.0)*r10*x10087*x10092))+(((-1.0)*cj1*cj2*x10090))+((r10*x10088))+((r11*x10089))+((r11*x10082*x10083)));
evalcond[7]=(((r00*x10083))+((r01*x10087))+(((-1.0)*sj3*x10084*x10092))+(((-1.0)*r02*sj3*x10093))+(((-1.0)*cj0*x10096))+(((-1.0)*cj0*x10091))+((r00*x10097)));
evalcond[8]=((((-1.0)*sj3*x10085*x10092))+(((-1.0)*cj2*sj1*x10090))+(((-1.0)*x10090*x10091))+(((-1.0)*r12*sj3*x10093))+((r10*x10097))+((r10*x10083))+((r11*x10087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10098=((1.0)*gconst2);
CheckValue<IkReal> x10099 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x10098)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10099.valid){
continue;
}
CheckValue<IkReal> x10100=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x10098))+(((-1.0)*gconst1*r00)))),-1);
if(!x10100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10099.value)+(((1.5707963267949)*(x10100.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10101=IKsin(j4);
IkReal x10102=IKcos(j4);
IkReal x10103=(cj3*gconst1);
IkReal x10104=(gconst1*r01);
IkReal x10105=(gconst1*r11);
IkReal x10106=(sj1*sj2);
IkReal x10107=(cj3*gconst2);
IkReal x10108=(gconst1*sj3);
IkReal x10109=(gconst2*sj3);
IkReal x10110=((1.0)*sj0);
IkReal x10111=(cj1*sj2);
IkReal x10112=((1.0)*x10102);
IkReal x10113=((1.0)*x10101);
IkReal x10114=((1.0)*cj1*cj2);
IkReal x10115=(cj3*x10101);
IkReal x10116=((1.0)*cj2*sj1);
IkReal x10117=(x10102*x10109);
evalcond[0]=((((-1.0)*gconst2*r20*x10113))+(((-1.0)*r22*x10112))+((gconst1*r21*x10101)));
evalcond[1]=(((x10101*x10105))+(((-1.0)*r12*x10112))+cj0+(((-1.0)*gconst2*r10*x10113)));
evalcond[2]=(((x10101*x10104))+(((-1.0)*r02*x10112))+(((-1.0)*gconst2*r00*x10113))+(((-1.0)*x10110)));
evalcond[3]=(((r21*x10109))+((cj2*sj1))+((r20*x10108))+x10111+(((-1.0)*r20*x10107*x10112))+((r22*x10115))+((r21*x10102*x10103)));
evalcond[4]=(((r21*x10107))+((r20*x10117))+((r20*x10103))+x10106+(((-1.0)*r22*sj3*x10113))+(((-1.0)*x10114))+(((-1.0)*r21*x10108*x10112)));
evalcond[5]=(((cj0*x10106))+((r01*x10109))+((r00*x10108))+(((-1.0)*cj0*x10114))+((r02*x10115))+(((-1.0)*r00*x10107*x10112))+((r01*x10102*x10103)));
evalcond[6]=((((-1.0)*cj1*cj2*x10110))+((r11*x10102*x10103))+((sj0*x10106))+((r11*x10109))+((r12*x10115))+((r10*x10108))+(((-1.0)*r10*x10107*x10112)));
evalcond[7]=(((r01*x10107))+((r00*x10103))+((r00*x10117))+(((-1.0)*sj3*x10104*x10112))+(((-1.0)*cj0*x10116))+(((-1.0)*r02*sj3*x10113))+(((-1.0)*cj0*x10111)));
evalcond[8]=((((-1.0)*x10110*x10111))+(((-1.0)*r12*sj3*x10113))+(((-1.0)*cj2*sj1*x10110))+((r11*x10107))+((r10*x10103))+((r10*x10117))+(((-1.0)*sj3*x10105*x10112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10118=((-1.0)*r21);
IkReal x10120 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10120)==0){
continue;
}
IkReal x10119=pow(x10120,-0.5);
CheckValue<IkReal> x10121 = IKatan2WithCheck(IkReal(x10118),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10121.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10121.value))));
IkReal gconst4=(x10118*x10119);
IkReal gconst5=((1.0)*r20*x10119);
CheckValue<IkReal> x10122 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10122.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10122.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10123=((-1.0)*r21);
CheckValue<IkReal> x10126 = IKatan2WithCheck(IkReal(x10123),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10126.valid){
continue;
}
IkReal x10124=((1.0)*(x10126.value));
IkReal x10125=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10124)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10124)));
IkReal gconst4=(x10123*x10125);
IkReal gconst5=((1.0)*r20*x10125);
IkReal x10127=r22*r22;
IkReal x10128=((1.0)*x10127);
CheckValue<IkReal> x10132=IKPowWithIntegerCheck(((-1.0)+x10127),-1);
if(!x10132.valid){
continue;
}
IkReal x10129=x10132.value;
if((((1.0)+(((-1.0)*x10128)))) < -0.00001)
continue;
IkReal x10130=IKsqrt(((1.0)+(((-1.0)*x10128))));
IkReal x10131=(cj0*x10129*x10130);
j4eval[0]=((IKabs(((((-1.0)*x10128*x10131))+x10131)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10133=((-1.0)*r21);
CheckValue<IkReal> x10136 = IKatan2WithCheck(IkReal(x10133),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10136.valid){
continue;
}
IkReal x10134=((1.0)*(x10136.value));
IkReal x10135=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10134)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10134)));
IkReal gconst4=(x10133*x10135);
IkReal gconst5=((1.0)*r20*x10135);
IkReal x10137=r22*r22;
IkReal x10138=((1.0)*x10137);
CheckValue<IkReal> x10142=IKPowWithIntegerCheck(((-1.0)+x10137),-1);
if(!x10142.valid){
continue;
}
IkReal x10139=x10142.value;
if((((1.0)+(((-1.0)*x10138)))) < -0.00001)
continue;
IkReal x10140=IKsqrt(((1.0)+(((-1.0)*x10138))));
IkReal x10141=(sj0*x10139*x10140);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x10141+(((-1.0)*x10138*x10141))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10143=((-1.0)*r21);
CheckValue<IkReal> x10146 = IKatan2WithCheck(IkReal(x10143),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10146.valid){
continue;
}
IkReal x10144=((1.0)*(x10146.value));
IkReal x10145=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10144)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10144)));
IkReal gconst4=(x10143*x10145);
IkReal gconst5=((1.0)*r20*x10145);
IkReal x10147=r22*r22;
IkReal x10148=(r12*sj0);
IkReal x10149=(cj0*r02);
CheckValue<IkReal> x10153=IKPowWithIntegerCheck(((-1.0)+x10147),-1);
if(!x10153.valid){
continue;
}
IkReal x10150=x10153.value;
if((((1.0)+(((-1.0)*x10147)))) < -0.00001)
continue;
IkReal x10151=IKsqrt(((1.0)+(((-1.0)*x10147))));
IkReal x10152=(r22*x10150*x10151);
j4eval[0]=0;
j4eval[1]=((IKabs((((x10149*x10152))+((x10148*x10152)))))+(IKabs(((((-1.0)*x10149))+(((-1.0)*x10148))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10154=((-1.0)*r21);
CheckValue<IkReal> x10157 = IKatan2WithCheck(IkReal(x10154),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10157.valid){
continue;
}
IkReal x10155=((1.0)*(x10157.value));
IkReal x10156=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10155)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10155)));
IkReal gconst4=(x10154*x10156);
IkReal gconst5=((1.0)*r20*x10156);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10158=((-1.0)*r21);
CheckValue<IkReal> x10161 = IKatan2WithCheck(IkReal(x10158),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10161.valid){
continue;
}
IkReal x10159=((1.0)*(x10161.value));
IkReal x10160=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10159)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10159)));
IkReal gconst4=(x10158*x10160);
IkReal gconst5=((1.0)*r20*x10160);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10162=((-1.0)*r21);
CheckValue<IkReal> x10165 = IKatan2WithCheck(IkReal(x10162),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10165.valid){
continue;
}
IkReal x10163=((1.0)*(x10165.value));
IkReal x10164=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10163)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10163)));
IkReal gconst4=(x10162*x10164);
IkReal gconst5=((1.0)*r20*x10164);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10166=((-1.0)*r21);
CheckValue<IkReal> x10169 = IKatan2WithCheck(IkReal(x10166),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10169.valid){
continue;
}
IkReal x10167=((1.0)*(x10169.value));
IkReal x10168=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10167)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10167)));
IkReal gconst4=(x10166*x10168);
IkReal gconst5=((1.0)*r20*x10168);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10170=((-1.0)*r21);
CheckValue<IkReal> x10173 = IKatan2WithCheck(IkReal(x10170),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10173.valid){
continue;
}
IkReal x10171=((1.0)*(x10173.value));
IkReal x10172=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10171)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10171)));
IkReal gconst4=(x10170*x10172);
IkReal gconst5=((1.0)*r20*x10172);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10174=((-1.0)*r21);
CheckValue<IkReal> x10177 = IKatan2WithCheck(IkReal(x10174),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10177.valid){
continue;
}
IkReal x10175=((1.0)*(x10177.value));
IkReal x10176=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10175)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10175)));
IkReal gconst4=(x10174*x10176);
IkReal gconst5=((1.0)*r20*x10176);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10178=(gconst5*r10);
IkReal x10179=(gconst4*r11);
CheckValue<IkReal> x10180 = IKatan2WithCheck(IkReal(((((-1.0)*x10179))+x10178)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10180.valid){
continue;
}
CheckValue<IkReal> x10181=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10178*x10179))+(x10179*x10179)+(x10178*x10178))),-1);
if(!x10181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10180.value)+(((1.5707963267949)*(x10181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10182=IKsin(j4);
IkReal x10183=IKcos(j4);
IkReal x10184=(gconst4*r11);
IkReal x10185=((1.0)*cj1);
IkReal x10186=(gconst5*r10);
IkReal x10187=(gconst4*r01);
IkReal x10188=(gconst5*r00);
IkReal x10189=(gconst4*r21);
IkReal x10190=(gconst5*r20);
IkReal x10191=((1.0)*x10183);
IkReal x10192=((1.0)*x10182);
evalcond[0]=(((x10182*x10189))+(((-1.0)*x10190*x10192))+(((-1.0)*r22*x10191)));
evalcond[1]=((((-1.0)*r02*x10191))+((x10182*x10187))+(((-1.0)*x10188*x10192)));
evalcond[2]=((((-1.0)*x10184*x10191))+(((-1.0)*r12*x10192))+((x10183*x10186)));
evalcond[3]=((1.0)+(((-1.0)*x10186*x10192))+(((-1.0)*r12*x10191))+((x10182*x10184)));
evalcond[4]=((((-1.0)*cj2*x10185))+((sj1*sj2))+((x10183*x10190))+(((-1.0)*x10189*x10191))+(((-1.0)*r22*x10192)));
evalcond[5]=((((-1.0)*r02*x10192))+(((-1.0)*x10187*x10191))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10185))+((x10183*x10188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10193=((1.0)*gconst5);
CheckValue<IkReal> x10194 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10193))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10194.valid){
continue;
}
CheckValue<IkReal> x10195=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10193)))),-1);
if(!x10195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10194.value)+(((1.5707963267949)*(x10195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10196=IKsin(j4);
IkReal x10197=IKcos(j4);
IkReal x10198=(gconst4*r11);
IkReal x10199=((1.0)*cj1);
IkReal x10200=(gconst5*r10);
IkReal x10201=(gconst4*r01);
IkReal x10202=(gconst5*r00);
IkReal x10203=(gconst4*r21);
IkReal x10204=(gconst5*r20);
IkReal x10205=((1.0)*x10197);
IkReal x10206=((1.0)*x10196);
evalcond[0]=((((-1.0)*r22*x10205))+((x10196*x10203))+(((-1.0)*x10204*x10206)));
evalcond[1]=((((-1.0)*r02*x10205))+((x10196*x10201))+(((-1.0)*x10202*x10206)));
evalcond[2]=(((x10197*x10200))+(((-1.0)*x10198*x10205))+(((-1.0)*r12*x10206)));
evalcond[3]=((1.0)+(((-1.0)*x10200*x10206))+((x10196*x10198))+(((-1.0)*r12*x10205)));
evalcond[4]=((((-1.0)*cj2*x10199))+(((-1.0)*r22*x10206))+((sj1*sj2))+(((-1.0)*x10203*x10205))+((x10197*x10204)));
evalcond[5]=((((-1.0)*r02*x10206))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10199))+(((-1.0)*x10201*x10205))+((x10197*x10202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10207 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10207.valid){
continue;
}
CheckValue<IkReal> x10208=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10207.value)+(((1.5707963267949)*(x10208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10209=IKsin(j4);
IkReal x10210=IKcos(j4);
IkReal x10211=(gconst4*r11);
IkReal x10212=((1.0)*cj1);
IkReal x10213=(gconst5*r10);
IkReal x10214=(gconst4*r01);
IkReal x10215=(gconst5*r00);
IkReal x10216=(gconst4*r21);
IkReal x10217=(gconst5*r20);
IkReal x10218=((1.0)*x10210);
IkReal x10219=((1.0)*x10209);
evalcond[0]=((((-1.0)*r22*x10218))+(((-1.0)*x10217*x10219))+((x10209*x10216)));
evalcond[1]=((((-1.0)*x10215*x10219))+((x10209*x10214))+(((-1.0)*r02*x10218)));
evalcond[2]=((((-1.0)*x10211*x10218))+(((-1.0)*r12*x10219))+((x10210*x10213)));
evalcond[3]=((1.0)+(((-1.0)*x10213*x10219))+(((-1.0)*r12*x10218))+((x10209*x10211)));
evalcond[4]=((((-1.0)*r22*x10219))+((sj1*sj2))+(((-1.0)*x10216*x10218))+(((-1.0)*cj2*x10212))+((x10210*x10217)));
evalcond[5]=((((-1.0)*sj2*x10212))+(((-1.0)*x10214*x10218))+(((-1.0)*cj2*sj1))+((x10210*x10215))+(((-1.0)*r02*x10219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10220=((-1.0)*r21);
CheckValue<IkReal> x10223 = IKatan2WithCheck(IkReal(x10220),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10223.valid){
continue;
}
IkReal x10221=((1.0)*(x10223.value));
IkReal x10222=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10221)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10221)));
IkReal gconst4=(x10220*x10222);
IkReal gconst5=((1.0)*r20*x10222);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10224=((-1.0)*r21);
CheckValue<IkReal> x10227 = IKatan2WithCheck(IkReal(x10224),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10227.valid){
continue;
}
IkReal x10225=((1.0)*(x10227.value));
IkReal x10226=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10225)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10225)));
IkReal gconst4=(x10224*x10226);
IkReal gconst5=((1.0)*r20*x10226);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10228=((-1.0)*r21);
CheckValue<IkReal> x10231 = IKatan2WithCheck(IkReal(x10228),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10231.valid){
continue;
}
IkReal x10229=((1.0)*(x10231.value));
IkReal x10230=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10229)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10229)));
IkReal gconst4=(x10228*x10230);
IkReal gconst5=((1.0)*r20*x10230);
IkReal x10232=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10236=IKPowWithIntegerCheck(x10232,-1);
if(!x10236.valid){
continue;
}
IkReal x10233=x10236.value;
IkReal x10234=((1.0)*x10233);
IkReal x10235=((((-2.0)*r10*r11*r20*r21*x10233))+(((-1.0)*(r12*r12)))+(((-1.0)*x10234*(r11*r11)*(r21*r21)))+(((-1.0)*x10234*(r10*r10)*(r20*r20))));
j4eval[0]=x10235;
j4eval[1]=r12;
j4eval[2]=x10232;
j4eval[3]=IKsign(x10235);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10237=(gconst5*r10);
IkReal x10238=(gconst4*r11);
CheckValue<IkReal> x10239=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10238*x10238)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10237*x10237)))+(((2.0)*x10237*x10238)))),-1);
if(!x10239.valid){
continue;
}
CheckValue<IkReal> x10240 = IKatan2WithCheck(IkReal((x10238+(((-1.0)*x10237)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10239.value)))+(x10240.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10241=IKcos(j4);
IkReal x10242=IKsin(j4);
IkReal x10243=(gconst4*r11);
IkReal x10244=(gconst5*r10);
IkReal x10245=((1.0)*cj1);
IkReal x10246=(gconst5*r00);
IkReal x10247=(gconst5*r20);
IkReal x10248=((1.0)*x10241);
IkReal x10249=(gconst4*x10241);
IkReal x10250=((1.0)*x10242);
IkReal x10251=(gconst4*x10242);
evalcond[0]=(((x10241*x10243))+(((-1.0)*x10244*x10248))+((r12*x10242)));
evalcond[1]=((((-1.0)*x10247*x10250))+(((-1.0)*r22*x10248))+((r21*x10251)));
evalcond[2]=((((-1.0)*x10246*x10250))+(((-1.0)*r02*x10248))+((r01*x10251)));
evalcond[3]=((1.0)+((x10242*x10243))+(((-1.0)*r12*x10248))+(((-1.0)*x10244*x10250)));
evalcond[4]=((((-1.0)*x10247*x10248))+((r22*x10242))+(((-1.0)*cj2*x10245))+((sj1*sj2))+((r21*x10249)));
evalcond[5]=(((r02*x10242))+(((-1.0)*cj2*sj1))+(((-1.0)*x10246*x10248))+(((-1.0)*sj2*x10245))+((r01*x10249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10252=((1.0)*gconst5);
CheckValue<IkReal> x10253 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10252))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10253.valid){
continue;
}
CheckValue<IkReal> x10254=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10252)))),-1);
if(!x10254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10253.value)+(((1.5707963267949)*(x10254.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10255=IKcos(j4);
IkReal x10256=IKsin(j4);
IkReal x10257=(gconst4*r11);
IkReal x10258=(gconst5*r10);
IkReal x10259=((1.0)*cj1);
IkReal x10260=(gconst5*r00);
IkReal x10261=(gconst5*r20);
IkReal x10262=((1.0)*x10255);
IkReal x10263=(gconst4*x10255);
IkReal x10264=((1.0)*x10256);
IkReal x10265=(gconst4*x10256);
evalcond[0]=(((r12*x10256))+((x10255*x10257))+(((-1.0)*x10258*x10262)));
evalcond[1]=((((-1.0)*r22*x10262))+(((-1.0)*x10261*x10264))+((r21*x10265)));
evalcond[2]=((((-1.0)*x10260*x10264))+((r01*x10265))+(((-1.0)*r02*x10262)));
evalcond[3]=((1.0)+((x10256*x10257))+(((-1.0)*r12*x10262))+(((-1.0)*x10258*x10264)));
evalcond[4]=((((-1.0)*x10261*x10262))+((r22*x10256))+(((-1.0)*cj2*x10259))+((sj1*sj2))+((r21*x10263)));
evalcond[5]=((((-1.0)*x10260*x10262))+((r02*x10256))+(((-1.0)*cj2*sj1))+((r01*x10263))+(((-1.0)*sj2*x10259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10266 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10266.valid){
continue;
}
CheckValue<IkReal> x10267=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10266.value)+(((1.5707963267949)*(x10267.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10268=IKcos(j4);
IkReal x10269=IKsin(j4);
IkReal x10270=(gconst4*r11);
IkReal x10271=(gconst5*r10);
IkReal x10272=((1.0)*cj1);
IkReal x10273=(gconst5*r00);
IkReal x10274=(gconst5*r20);
IkReal x10275=((1.0)*x10268);
IkReal x10276=(gconst4*x10268);
IkReal x10277=((1.0)*x10269);
IkReal x10278=(gconst4*x10269);
evalcond[0]=(((r12*x10269))+((x10268*x10270))+(((-1.0)*x10271*x10275)));
evalcond[1]=((((-1.0)*x10274*x10277))+(((-1.0)*r22*x10275))+((r21*x10278)));
evalcond[2]=(((r01*x10278))+(((-1.0)*x10273*x10277))+(((-1.0)*r02*x10275)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10275))+(((-1.0)*x10271*x10277))+((x10269*x10270)));
evalcond[4]=(((r22*x10269))+(((-1.0)*x10274*x10275))+((sj1*sj2))+((r21*x10276))+(((-1.0)*cj2*x10272)));
evalcond[5]=(((r02*x10269))+((r01*x10276))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10272))+(((-1.0)*x10273*x10275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10279=((-1.0)*r21);
CheckValue<IkReal> x10282 = IKatan2WithCheck(IkReal(x10279),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10282.valid){
continue;
}
IkReal x10280=((1.0)*(x10282.value));
IkReal x10281=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10280)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10280)));
IkReal gconst4=(x10279*x10281);
IkReal gconst5=((1.0)*r20*x10281);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10283=((-1.0)*r21);
CheckValue<IkReal> x10286 = IKatan2WithCheck(IkReal(x10283),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10286.valid){
continue;
}
IkReal x10284=((1.0)*(x10286.value));
IkReal x10285=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10284)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10284)));
IkReal gconst4=(x10283*x10285);
IkReal gconst5=((1.0)*r20*x10285);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10287=((-1.0)*r21);
CheckValue<IkReal> x10290 = IKatan2WithCheck(IkReal(x10287),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10290.valid){
continue;
}
IkReal x10288=((1.0)*(x10290.value));
IkReal x10289=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10288)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10288)));
IkReal gconst4=(x10287*x10289);
IkReal gconst5=((1.0)*r20*x10289);
IkReal x10291=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10295=IKPowWithIntegerCheck(x10291,-1);
if(!x10295.valid){
continue;
}
IkReal x10292=x10295.value;
IkReal x10293=((1.0)*x10292);
IkReal x10294=((((-2.0)*r10*r11*r20*r21*x10292))+(((-1.0)*x10293*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10293*(r11*r11)*(r21*r21))));
j4eval[0]=x10294;
j4eval[1]=r12;
j4eval[2]=x10291;
j4eval[3]=IKsign(x10294);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10296=(gconst5*r10);
IkReal x10297=(gconst4*r11);
CheckValue<IkReal> x10298 = IKatan2WithCheck(IkReal(((((-1.0)*x10296))+x10297)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10298.valid){
continue;
}
CheckValue<IkReal> x10299=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10297*x10297)))+(((2.0)*x10296*x10297))+(((-1.0)*(x10296*x10296)))+(((-1.0)*(r12*r12))))),-1);
if(!x10299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10298.value)+(((1.5707963267949)*(x10299.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10300=IKcos(j4);
IkReal x10301=IKsin(j4);
IkReal x10302=(gconst4*r11);
IkReal x10303=(gconst5*r10);
IkReal x10304=(gconst5*r00);
IkReal x10305=(gconst5*r20);
IkReal x10306=((1.0)*x10300);
IkReal x10307=(gconst4*x10300);
IkReal x10308=((1.0)*x10301);
IkReal x10309=(gconst4*x10301);
evalcond[0]=(((x10300*x10302))+((r12*x10301))+(((-1.0)*x10303*x10306)));
evalcond[1]=((((-1.0)*x10305*x10308))+(((-1.0)*r22*x10306))+((r21*x10309)));
evalcond[2]=((((-1.0)*r02*x10306))+(((-1.0)*x10304*x10308))+((r01*x10309)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10306))+(((-1.0)*x10303*x10308))+((x10301*x10302)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10305*x10306))+((cj1*sj2))+((r21*x10307))+((r22*x10301)));
evalcond[5]=(((r02*x10301))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10304*x10306))+((r01*x10307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10310=((1.0)*gconst5);
CheckValue<IkReal> x10311=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10310)))),-1);
if(!x10311.valid){
continue;
}
CheckValue<IkReal> x10312 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10310))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10311.value)))+(x10312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10313=IKcos(j4);
IkReal x10314=IKsin(j4);
IkReal x10315=(gconst4*r11);
IkReal x10316=(gconst5*r10);
IkReal x10317=(gconst5*r00);
IkReal x10318=(gconst5*r20);
IkReal x10319=((1.0)*x10313);
IkReal x10320=(gconst4*x10313);
IkReal x10321=((1.0)*x10314);
IkReal x10322=(gconst4*x10314);
evalcond[0]=((((-1.0)*x10316*x10319))+((r12*x10314))+((x10313*x10315)));
evalcond[1]=((((-1.0)*x10318*x10321))+((r21*x10322))+(((-1.0)*r22*x10319)));
evalcond[2]=(((r01*x10322))+(((-1.0)*r02*x10319))+(((-1.0)*x10317*x10321)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10319))+((x10314*x10315))+(((-1.0)*x10316*x10321)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10314))+((r21*x10320))+(((-1.0)*x10318*x10319)));
evalcond[5]=((((-1.0)*cj1*cj2))+((r01*x10320))+((sj1*sj2))+((r02*x10314))+(((-1.0)*x10317*x10319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10323 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10323.valid){
continue;
}
CheckValue<IkReal> x10324=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10323.value)+(((1.5707963267949)*(x10324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10325=IKcos(j4);
IkReal x10326=IKsin(j4);
IkReal x10327=(gconst4*r11);
IkReal x10328=(gconst5*r10);
IkReal x10329=(gconst5*r00);
IkReal x10330=(gconst5*r20);
IkReal x10331=((1.0)*x10325);
IkReal x10332=(gconst4*x10325);
IkReal x10333=((1.0)*x10326);
IkReal x10334=(gconst4*x10326);
evalcond[0]=((((-1.0)*x10328*x10331))+((x10325*x10327))+((r12*x10326)));
evalcond[1]=((((-1.0)*r22*x10331))+(((-1.0)*x10330*x10333))+((r21*x10334)));
evalcond[2]=(((r01*x10334))+(((-1.0)*x10329*x10333))+(((-1.0)*r02*x10331)));
evalcond[3]=((1.0)+(((-1.0)*x10328*x10333))+(((-1.0)*r12*x10331))+((x10326*x10327)));
evalcond[4]=(((cj2*sj1))+((r22*x10326))+((cj1*sj2))+(((-1.0)*x10330*x10331))+((r21*x10332)));
evalcond[5]=(((r02*x10326))+((r01*x10332))+(((-1.0)*x10329*x10331))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10335=((-1.0)*r21);
CheckValue<IkReal> x10338 = IKatan2WithCheck(IkReal(x10335),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10338.valid){
continue;
}
IkReal x10336=((1.0)*(x10338.value));
IkReal x10337=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10336)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10336)));
IkReal gconst4=(x10335*x10337);
IkReal gconst5=((1.0)*r20*x10337);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10339=((-1.0)*r21);
CheckValue<IkReal> x10342 = IKatan2WithCheck(IkReal(x10339),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10342.valid){
continue;
}
IkReal x10340=((1.0)*(x10342.value));
IkReal x10341=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10340)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10340)));
IkReal gconst4=(x10339*x10341);
IkReal gconst5=((1.0)*r20*x10341);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10343=((-1.0)*r21);
CheckValue<IkReal> x10346 = IKatan2WithCheck(IkReal(x10343),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10346.valid){
continue;
}
IkReal x10344=((1.0)*(x10346.value));
IkReal x10345=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10344)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10344)));
IkReal gconst4=(x10343*x10345);
IkReal gconst5=((1.0)*r20*x10345);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10347=(gconst5*r10);
IkReal x10348=(gconst4*r11);
CheckValue<IkReal> x10349 = IKatan2WithCheck(IkReal((x10347+(((-1.0)*x10348)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10349.valid){
continue;
}
CheckValue<IkReal> x10350=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10347*x10348))+(x10347*x10347)+(x10348*x10348))),-1);
if(!x10350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10349.value)+(((1.5707963267949)*(x10350.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10351=IKsin(j4);
IkReal x10352=IKcos(j4);
IkReal x10353=(gconst4*r11);
IkReal x10354=(gconst5*r10);
IkReal x10355=(gconst4*r01);
IkReal x10356=(gconst5*r00);
IkReal x10357=(gconst4*r21);
IkReal x10358=(gconst5*r20);
IkReal x10359=((1.0)*x10352);
IkReal x10360=((1.0)*x10351);
evalcond[0]=(((x10351*x10357))+(((-1.0)*x10358*x10360))+(((-1.0)*r22*x10359)));
evalcond[1]=((((-1.0)*x10356*x10360))+((x10351*x10355))+(((-1.0)*r02*x10359)));
evalcond[2]=(((x10352*x10354))+(((-1.0)*r12*x10360))+(((-1.0)*x10353*x10359)));
evalcond[3]=((1.0)+(((-1.0)*x10354*x10360))+((x10351*x10353))+(((-1.0)*r12*x10359)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10357*x10359))+((x10352*x10358))+((cj1*sj2))+(((-1.0)*r22*x10360)));
evalcond[5]=(((x10352*x10356))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10360))+(((-1.0)*x10355*x10359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10361=((1.0)*gconst5);
CheckValue<IkReal> x10362=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10361)))),-1);
if(!x10362.valid){
continue;
}
CheckValue<IkReal> x10363 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10361)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10362.value)))+(x10363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10364=IKsin(j4);
IkReal x10365=IKcos(j4);
IkReal x10366=(gconst4*r11);
IkReal x10367=(gconst5*r10);
IkReal x10368=(gconst4*r01);
IkReal x10369=(gconst5*r00);
IkReal x10370=(gconst4*r21);
IkReal x10371=(gconst5*r20);
IkReal x10372=((1.0)*x10365);
IkReal x10373=((1.0)*x10364);
evalcond[0]=(((x10364*x10370))+(((-1.0)*x10371*x10373))+(((-1.0)*r22*x10372)));
evalcond[1]=((((-1.0)*x10369*x10373))+((x10364*x10368))+(((-1.0)*r02*x10372)));
evalcond[2]=(((x10365*x10367))+(((-1.0)*x10366*x10372))+(((-1.0)*r12*x10373)));
evalcond[3]=((1.0)+((x10364*x10366))+(((-1.0)*x10367*x10373))+(((-1.0)*r12*x10372)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10365*x10371))+(((-1.0)*r22*x10373))+(((-1.0)*x10370*x10372)));
evalcond[5]=((((-1.0)*r02*x10373))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10365*x10369))+(((-1.0)*x10368*x10372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10374 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10374.valid){
continue;
}
CheckValue<IkReal> x10375=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10374.value)+(((1.5707963267949)*(x10375.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10376=IKsin(j4);
IkReal x10377=IKcos(j4);
IkReal x10378=(gconst4*r11);
IkReal x10379=(gconst5*r10);
IkReal x10380=(gconst4*r01);
IkReal x10381=(gconst5*r00);
IkReal x10382=(gconst4*r21);
IkReal x10383=(gconst5*r20);
IkReal x10384=((1.0)*x10377);
IkReal x10385=((1.0)*x10376);
evalcond[0]=(((x10376*x10382))+(((-1.0)*r22*x10384))+(((-1.0)*x10383*x10385)));
evalcond[1]=(((x10376*x10380))+(((-1.0)*x10381*x10385))+(((-1.0)*r02*x10384)));
evalcond[2]=(((x10377*x10379))+(((-1.0)*r12*x10385))+(((-1.0)*x10378*x10384)));
evalcond[3]=((1.0)+(((-1.0)*x10379*x10385))+(((-1.0)*r12*x10384))+((x10376*x10378)));
evalcond[4]=(((cj2*sj1))+((x10377*x10383))+((cj1*sj2))+(((-1.0)*r22*x10385))+(((-1.0)*x10382*x10384)));
evalcond[5]=(((x10377*x10381))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10385))+(((-1.0)*x10380*x10384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10386=gconst4*gconst4;
IkReal x10387=gconst5*gconst5;
IkReal x10388=(r10*r21);
IkReal x10389=((1.0)*cj3);
IkReal x10390=(r11*r21);
IkReal x10391=(r11*r20);
IkReal x10392=(r22*sj3);
IkReal x10393=(gconst4*r10);
IkReal x10394=((1.0)*sj3);
IkReal x10395=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10396=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x10389))+(((-1.0)*x10386*x10389*x10390))+(((-1.0)*r10*r20*x10387*x10389))+((x10391*x10395))+((x10388*x10395)))),-1);
if(!x10396.valid){
continue;
}
CheckValue<IkReal> x10397 = IKatan2WithCheck(IkReal((((x10392*x10393))+((gconst5*r11*x10392)))),IkReal((((gconst4*gconst5*sj3*x10390))+(((-1.0)*x10387*x10391*x10394))+(((-1.0)*gconst5*r20*x10393*x10394))+((sj3*x10386*x10388)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10396.value)))+(x10397.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10398=IKsin(j4);
IkReal x10399=IKcos(j4);
IkReal x10400=(sj1*sj2);
IkReal x10401=(gconst5*sj3);
IkReal x10402=(cj3*gconst5);
IkReal x10403=(gconst4*r11);
IkReal x10404=((1.0)*cj1);
IkReal x10405=(gconst4*r01);
IkReal x10406=(cj2*sj1);
IkReal x10407=(gconst4*r21);
IkReal x10408=(gconst4*sj3);
IkReal x10409=(cj3*gconst4);
IkReal x10410=(cj2*x10404);
IkReal x10411=((1.0)*x10399);
IkReal x10412=((1.0)*x10398);
IkReal x10413=(cj3*x10398);
IkReal x10414=(cj3*x10399);
evalcond[0]=(((x10398*x10407))+(((-1.0)*gconst5*r20*x10412))+(((-1.0)*r22*x10411)));
evalcond[1]=((((-1.0)*r02*x10411))+((x10398*x10405))+(((-1.0)*gconst5*r00*x10412)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10412))+((x10398*x10403))+(((-1.0)*r12*x10411)));
evalcond[3]=((((-1.0)*r10*x10402*x10411))+((r11*x10401))+((x10403*x10414))+((r12*x10413))+((r10*x10408)));
evalcond[4]=((((-1.0)*sj3*x10403*x10411))+(((-1.0)*r12*sj3*x10412))+((r11*x10402))+((r10*x10409))+((r10*x10399*x10401)));
evalcond[5]=(((r21*x10401))+((r22*x10413))+((x10407*x10414))+((cj1*sj2))+((r20*x10408))+(((-1.0)*r20*x10402*x10411))+x10406);
evalcond[6]=(((x10405*x10414))+((r01*x10401))+((r00*x10408))+((r02*x10413))+(((-1.0)*r00*x10402*x10411))+(((-1.0)*x10410))+x10400);
evalcond[7]=(((r21*x10402))+(((-1.0)*r22*sj3*x10412))+(((-1.0)*sj3*x10407*x10411))+((r20*x10399*x10401))+(((-1.0)*x10410))+((r20*x10409))+x10400);
evalcond[8]=((((-1.0)*sj3*x10405*x10411))+((r01*x10402))+((r00*x10409))+(((-1.0)*sj2*x10404))+((r00*x10399*x10401))+(((-1.0)*x10406))+(((-1.0)*r02*sj3*x10412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10415=((1.0)*gconst5);
CheckValue<IkReal> x10416 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10415))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10416.valid){
continue;
}
CheckValue<IkReal> x10417=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10415)))),-1);
if(!x10417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10416.value)+(((1.5707963267949)*(x10417.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10418=IKsin(j4);
IkReal x10419=IKcos(j4);
IkReal x10420=(sj1*sj2);
IkReal x10421=(gconst5*sj3);
IkReal x10422=(cj3*gconst5);
IkReal x10423=(gconst4*r11);
IkReal x10424=((1.0)*cj1);
IkReal x10425=(gconst4*r01);
IkReal x10426=(cj2*sj1);
IkReal x10427=(gconst4*r21);
IkReal x10428=(gconst4*sj3);
IkReal x10429=(cj3*gconst4);
IkReal x10430=(cj2*x10424);
IkReal x10431=((1.0)*x10419);
IkReal x10432=((1.0)*x10418);
IkReal x10433=(cj3*x10418);
IkReal x10434=(cj3*x10419);
evalcond[0]=((((-1.0)*gconst5*r20*x10432))+(((-1.0)*r22*x10431))+((x10418*x10427)));
evalcond[1]=((((-1.0)*gconst5*r00*x10432))+(((-1.0)*r02*x10431))+((x10418*x10425)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10432))+(((-1.0)*r12*x10431))+((x10418*x10423)));
evalcond[3]=((((-1.0)*r10*x10422*x10431))+((x10423*x10434))+((r12*x10433))+((r10*x10428))+((r11*x10421)));
evalcond[4]=(((r10*x10419*x10421))+(((-1.0)*r12*sj3*x10432))+(((-1.0)*sj3*x10423*x10431))+((r10*x10429))+((r11*x10422)));
evalcond[5]=(((r22*x10433))+((cj1*sj2))+(((-1.0)*r20*x10422*x10431))+x10426+((r20*x10428))+((x10427*x10434))+((r21*x10421)));
evalcond[6]=(((x10425*x10434))+((r01*x10421))+((r00*x10428))+(((-1.0)*r00*x10422*x10431))+((r02*x10433))+x10420+(((-1.0)*x10430)));
evalcond[7]=(((r20*x10419*x10421))+(((-1.0)*r22*sj3*x10432))+x10420+(((-1.0)*x10430))+((r20*x10429))+(((-1.0)*sj3*x10427*x10431))+((r21*x10422)));
evalcond[8]=(((r01*x10422))+((r00*x10429))+(((-1.0)*sj3*x10425*x10431))+((r00*x10419*x10421))+(((-1.0)*sj2*x10424))+(((-1.0)*x10426))+(((-1.0)*r02*sj3*x10432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10435 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10435.valid){
continue;
}
CheckValue<IkReal> x10436=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10435.value)+(((1.5707963267949)*(x10436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10437=IKsin(j4);
IkReal x10438=IKcos(j4);
IkReal x10439=(sj1*sj2);
IkReal x10440=(gconst5*sj3);
IkReal x10441=(cj3*gconst5);
IkReal x10442=(gconst4*r11);
IkReal x10443=((1.0)*cj1);
IkReal x10444=(gconst4*r01);
IkReal x10445=(cj2*sj1);
IkReal x10446=(gconst4*r21);
IkReal x10447=(gconst4*sj3);
IkReal x10448=(cj3*gconst4);
IkReal x10449=(cj2*x10443);
IkReal x10450=((1.0)*x10438);
IkReal x10451=((1.0)*x10437);
IkReal x10452=(cj3*x10437);
IkReal x10453=(cj3*x10438);
evalcond[0]=((((-1.0)*gconst5*r20*x10451))+((x10437*x10446))+(((-1.0)*r22*x10450)));
evalcond[1]=((((-1.0)*gconst5*r00*x10451))+((x10437*x10444))+(((-1.0)*r02*x10450)));
evalcond[2]=((1.0)+((x10437*x10442))+(((-1.0)*r12*x10450))+(((-1.0)*gconst5*r10*x10451)));
evalcond[3]=((((-1.0)*r10*x10441*x10450))+((x10442*x10453))+((r12*x10452))+((r11*x10440))+((r10*x10447)));
evalcond[4]=(((r11*x10441))+((r10*x10448))+(((-1.0)*r12*sj3*x10451))+(((-1.0)*sj3*x10442*x10450))+((r10*x10438*x10440)));
evalcond[5]=(((cj1*sj2))+((x10446*x10453))+((r22*x10452))+((r20*x10447))+((r21*x10440))+x10445+(((-1.0)*r20*x10441*x10450)));
evalcond[6]=((((-1.0)*r00*x10441*x10450))+(((-1.0)*x10449))+((r00*x10447))+x10439+((r01*x10440))+((r02*x10452))+((x10444*x10453)));
evalcond[7]=((((-1.0)*sj3*x10446*x10450))+((r20*x10438*x10440))+(((-1.0)*x10449))+((r20*x10448))+(((-1.0)*r22*sj3*x10451))+((r21*x10441))+x10439);
evalcond[8]=((((-1.0)*x10445))+(((-1.0)*r02*sj3*x10451))+((r00*x10438*x10440))+(((-1.0)*sj2*x10443))+((r00*x10448))+(((-1.0)*sj3*x10444*x10450))+((r01*x10441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10454=((-1.0)*r21);
CheckValue<IkReal> x10457 = IKatan2WithCheck(IkReal(x10454),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10457.valid){
continue;
}
IkReal x10455=((1.0)*(x10457.value));
IkReal x10456=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10455)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10455)));
IkReal gconst4=(x10454*x10456);
IkReal gconst5=((1.0)*r20*x10456);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10458=((-1.0)*r21);
CheckValue<IkReal> x10461 = IKatan2WithCheck(IkReal(x10458),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10461.valid){
continue;
}
IkReal x10459=((1.0)*(x10461.value));
IkReal x10460=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10459)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10459)));
IkReal gconst4=(x10458*x10460);
IkReal gconst5=((1.0)*r20*x10460);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10462=((-1.0)*r21);
CheckValue<IkReal> x10465 = IKatan2WithCheck(IkReal(x10462),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10465.valid){
continue;
}
IkReal x10463=((1.0)*(x10465.value));
IkReal x10464=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10463)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10463)));
IkReal gconst4=(x10462*x10464);
IkReal gconst5=((1.0)*r20*x10464);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10466=((-1.0)*r21);
CheckValue<IkReal> x10469 = IKatan2WithCheck(IkReal(x10466),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10469.valid){
continue;
}
IkReal x10467=((1.0)*(x10469.value));
IkReal x10468=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10467)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10467)));
IkReal gconst4=(x10466*x10468);
IkReal gconst5=((1.0)*r20*x10468);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10470=((-1.0)*r21);
CheckValue<IkReal> x10473 = IKatan2WithCheck(IkReal(x10470),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10473.valid){
continue;
}
IkReal x10471=((1.0)*(x10473.value));
IkReal x10472=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10471)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10471)));
IkReal gconst4=(x10470*x10472);
IkReal gconst5=((1.0)*r20*x10472);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10474=((-1.0)*r21);
CheckValue<IkReal> x10477 = IKatan2WithCheck(IkReal(x10474),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10477.valid){
continue;
}
IkReal x10475=((1.0)*(x10477.value));
IkReal x10476=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10475)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10475)));
IkReal gconst4=(x10474*x10476);
IkReal gconst5=((1.0)*r20*x10476);
IkReal x10478=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10482=IKPowWithIntegerCheck(x10478,-1);
if(!x10482.valid){
continue;
}
IkReal x10479=x10482.value;
IkReal x10480=((1.0)*x10479);
IkReal x10481=((((-1.0)*(r12*r12)))+(((-1.0)*x10480*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10479))+(((-1.0)*x10480*(r10*r10)*(r20*r20))));
j4eval[0]=x10481;
j4eval[1]=r12;
j4eval[2]=x10478;
j4eval[3]=IKsign(x10481);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10483=(gconst5*r10);
IkReal x10484=(gconst4*r11);
CheckValue<IkReal> x10485=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10483*x10483)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10484*x10484)))+(((2.0)*x10483*x10484)))),-1);
if(!x10485.valid){
continue;
}
CheckValue<IkReal> x10486 = IKatan2WithCheck(IkReal(((((-1.0)*x10484))+x10483)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10485.value)))+(x10486.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10487=IKsin(j4);
IkReal x10488=IKcos(j4);
IkReal x10489=(gconst4*r11);
IkReal x10490=(gconst5*r10);
IkReal x10491=(gconst4*r01);
IkReal x10492=(gconst5*r00);
IkReal x10493=(gconst4*r21);
IkReal x10494=(gconst5*r20);
IkReal x10495=((1.0)*x10488);
IkReal x10496=((1.0)*x10487);
evalcond[0]=((((-1.0)*r22*x10495))+(((-1.0)*x10494*x10496))+((x10487*x10493)));
evalcond[1]=((((-1.0)*x10492*x10496))+(((-1.0)*r02*x10495))+((x10487*x10491)));
evalcond[2]=((((-1.0)*x10489*x10495))+(((-1.0)*r12*x10496))+((x10488*x10490)));
evalcond[3]=((-1.0)+(((-1.0)*x10490*x10496))+(((-1.0)*r12*x10495))+((x10487*x10489)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10491*x10495))+(((-1.0)*r02*x10496))+((x10488*x10492)));
evalcond[5]=((((-1.0)*r22*x10496))+(((-1.0)*x10493*x10495))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10488*x10494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10497=((1.0)*gconst5);
CheckValue<IkReal> x10498 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10497)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10498.valid){
continue;
}
CheckValue<IkReal> x10499=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10497))+(((-1.0)*gconst4*r20)))),-1);
if(!x10499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10498.value)+(((1.5707963267949)*(x10499.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10500=IKsin(j4);
IkReal x10501=IKcos(j4);
IkReal x10502=(gconst4*r11);
IkReal x10503=(gconst5*r10);
IkReal x10504=(gconst4*r01);
IkReal x10505=(gconst5*r00);
IkReal x10506=(gconst4*r21);
IkReal x10507=(gconst5*r20);
IkReal x10508=((1.0)*x10501);
IkReal x10509=((1.0)*x10500);
evalcond[0]=((((-1.0)*r22*x10508))+((x10500*x10506))+(((-1.0)*x10507*x10509)));
evalcond[1]=(((x10500*x10504))+(((-1.0)*r02*x10508))+(((-1.0)*x10505*x10509)));
evalcond[2]=((((-1.0)*x10502*x10508))+(((-1.0)*r12*x10509))+((x10501*x10503)));
evalcond[3]=((-1.0)+(((-1.0)*x10503*x10509))+(((-1.0)*r12*x10508))+((x10500*x10502)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10504*x10508))+(((-1.0)*r02*x10509))+((x10501*x10505)));
evalcond[5]=((((-1.0)*r22*x10509))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10506*x10508))+((x10501*x10507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10510=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10510.valid){
continue;
}
CheckValue<IkReal> x10511 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10510.value)))+(x10511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10512=IKsin(j4);
IkReal x10513=IKcos(j4);
IkReal x10514=(gconst4*r11);
IkReal x10515=(gconst5*r10);
IkReal x10516=(gconst4*r01);
IkReal x10517=(gconst5*r00);
IkReal x10518=(gconst4*r21);
IkReal x10519=(gconst5*r20);
IkReal x10520=((1.0)*x10513);
IkReal x10521=((1.0)*x10512);
evalcond[0]=((((-1.0)*r22*x10520))+((x10512*x10518))+(((-1.0)*x10519*x10521)));
evalcond[1]=(((x10512*x10516))+(((-1.0)*r02*x10520))+(((-1.0)*x10517*x10521)));
evalcond[2]=((((-1.0)*r12*x10521))+((x10513*x10515))+(((-1.0)*x10514*x10520)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10520))+((x10512*x10514))+(((-1.0)*x10515*x10521)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10521))+((x10513*x10517))+(((-1.0)*x10516*x10520)));
evalcond[5]=((((-1.0)*r22*x10521))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10518*x10520))+((x10513*x10519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10522=((-1.0)*r21);
CheckValue<IkReal> x10525 = IKatan2WithCheck(IkReal(x10522),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10525.valid){
continue;
}
IkReal x10523=((1.0)*(x10525.value));
IkReal x10524=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10523)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10523)));
IkReal gconst4=(x10522*x10524);
IkReal gconst5=((1.0)*r20*x10524);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10526=((-1.0)*r21);
CheckValue<IkReal> x10529 = IKatan2WithCheck(IkReal(x10526),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10529.valid){
continue;
}
IkReal x10527=((1.0)*(x10529.value));
IkReal x10528=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10527)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10527)));
IkReal gconst4=(x10526*x10528);
IkReal gconst5=((1.0)*r20*x10528);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10530=((-1.0)*r21);
CheckValue<IkReal> x10533 = IKatan2WithCheck(IkReal(x10530),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10533.valid){
continue;
}
IkReal x10531=((1.0)*(x10533.value));
IkReal x10532=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10531)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10531)));
IkReal gconst4=(x10530*x10532);
IkReal gconst5=((1.0)*r20*x10532);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10534=(gconst5*r10);
IkReal x10535=(gconst4*r11);
CheckValue<IkReal> x10536 = IKatan2WithCheck(IkReal(((((-1.0)*x10534))+x10535)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10536.valid){
continue;
}
CheckValue<IkReal> x10537=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10534*x10534)+(((-2.0)*x10534*x10535))+(x10535*x10535))),-1);
if(!x10537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10536.value)+(((1.5707963267949)*(x10537.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10538=IKcos(j4);
IkReal x10539=IKsin(j4);
IkReal x10540=(gconst4*r11);
IkReal x10541=(gconst5*r10);
IkReal x10542=(gconst5*r00);
IkReal x10543=(gconst5*r20);
IkReal x10544=((1.0)*x10538);
IkReal x10545=(gconst4*x10538);
IkReal x10546=((1.0)*x10539);
IkReal x10547=(gconst4*x10539);
evalcond[0]=(((x10538*x10540))+(((-1.0)*x10541*x10544))+((r12*x10539)));
evalcond[1]=((((-1.0)*x10543*x10546))+(((-1.0)*r22*x10544))+((r21*x10547)));
evalcond[2]=((((-1.0)*x10542*x10546))+(((-1.0)*r02*x10544))+((r01*x10547)));
evalcond[3]=((-1.0)+((x10539*x10540))+(((-1.0)*x10541*x10546))+(((-1.0)*r12*x10544)));
evalcond[4]=(((cj2*sj1))+((r02*x10539))+(((-1.0)*x10542*x10544))+((cj1*sj2))+((r01*x10545)));
evalcond[5]=((((-1.0)*x10543*x10544))+((r22*x10539))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10548=((1.0)*gconst5);
CheckValue<IkReal> x10549=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x10548)))),-1);
if(!x10549.valid){
continue;
}
CheckValue<IkReal> x10550 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10548))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10549.value)))+(x10550.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10551=IKcos(j4);
IkReal x10552=IKsin(j4);
IkReal x10553=(gconst4*r11);
IkReal x10554=(gconst5*r10);
IkReal x10555=(gconst5*r00);
IkReal x10556=(gconst5*r20);
IkReal x10557=((1.0)*x10551);
IkReal x10558=(gconst4*x10551);
IkReal x10559=((1.0)*x10552);
IkReal x10560=(gconst4*x10552);
evalcond[0]=((((-1.0)*x10554*x10557))+((x10551*x10553))+((r12*x10552)));
evalcond[1]=(((r21*x10560))+(((-1.0)*x10556*x10559))+(((-1.0)*r22*x10557)));
evalcond[2]=(((r01*x10560))+(((-1.0)*r02*x10557))+(((-1.0)*x10555*x10559)));
evalcond[3]=((-1.0)+(((-1.0)*x10554*x10559))+((x10552*x10553))+(((-1.0)*r12*x10557)));
evalcond[4]=(((cj2*sj1))+((r02*x10552))+((cj1*sj2))+(((-1.0)*x10555*x10557))+((r01*x10558)));
evalcond[5]=(((r22*x10552))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10558))+(((-1.0)*x10556*x10557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10561=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10561.valid){
continue;
}
CheckValue<IkReal> x10562 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10561.value)))+(x10562.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10563=IKcos(j4);
IkReal x10564=IKsin(j4);
IkReal x10565=(gconst4*r11);
IkReal x10566=(gconst5*r10);
IkReal x10567=(gconst5*r00);
IkReal x10568=(gconst5*r20);
IkReal x10569=((1.0)*x10563);
IkReal x10570=(gconst4*x10563);
IkReal x10571=((1.0)*x10564);
IkReal x10572=(gconst4*x10564);
evalcond[0]=((((-1.0)*x10566*x10569))+((r12*x10564))+((x10563*x10565)));
evalcond[1]=((((-1.0)*r22*x10569))+(((-1.0)*x10568*x10571))+((r21*x10572)));
evalcond[2]=(((r01*x10572))+(((-1.0)*x10567*x10571))+(((-1.0)*r02*x10569)));
evalcond[3]=((-1.0)+(((-1.0)*x10566*x10571))+(((-1.0)*r12*x10569))+((x10564*x10565)));
evalcond[4]=(((cj2*sj1))+((r01*x10570))+((cj1*sj2))+(((-1.0)*x10567*x10569))+((r02*x10564)));
evalcond[5]=((((-1.0)*x10568*x10569))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10570))+((r22*x10564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10573=((-1.0)*r21);
CheckValue<IkReal> x10576 = IKatan2WithCheck(IkReal(x10573),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10576.valid){
continue;
}
IkReal x10574=((1.0)*(x10576.value));
IkReal x10575=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10574)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10574)));
IkReal gconst4=(x10573*x10575);
IkReal gconst5=((1.0)*r20*x10575);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10577=((-1.0)*r21);
CheckValue<IkReal> x10580 = IKatan2WithCheck(IkReal(x10577),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10580.valid){
continue;
}
IkReal x10578=((1.0)*(x10580.value));
IkReal x10579=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10578)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10578)));
IkReal gconst4=(x10577*x10579);
IkReal gconst5=((1.0)*r20*x10579);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10581=((-1.0)*r21);
CheckValue<IkReal> x10584 = IKatan2WithCheck(IkReal(x10581),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10584.valid){
continue;
}
IkReal x10582=((1.0)*(x10584.value));
IkReal x10583=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10582)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10582)));
IkReal gconst4=(x10581*x10583);
IkReal gconst5=((1.0)*r20*x10583);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10585=(gconst5*r10);
IkReal x10586=(gconst4*r11);
CheckValue<IkReal> x10587 = IKatan2WithCheck(IkReal((x10586+(((-1.0)*x10585)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10587.valid){
continue;
}
CheckValue<IkReal> x10588=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10586*x10586)+(x10585*x10585)+(((-2.0)*x10585*x10586)))),-1);
if(!x10588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10587.value)+(((1.5707963267949)*(x10588.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10589=IKcos(j4);
IkReal x10590=IKsin(j4);
IkReal x10591=(gconst5*r10);
IkReal x10592=(gconst5*r00);
IkReal x10593=(gconst5*r20);
IkReal x10594=((1.0)*x10589);
IkReal x10595=(gconst4*x10590);
IkReal x10596=(gconst4*x10589);
IkReal x10597=((1.0)*x10590);
evalcond[0]=(((r12*x10590))+((r11*x10596))+(((-1.0)*x10591*x10594)));
evalcond[1]=(((r21*x10595))+(((-1.0)*r22*x10594))+(((-1.0)*x10593*x10597)));
evalcond[2]=((((-1.0)*x10592*x10597))+(((-1.0)*r02*x10594))+((r01*x10595)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10594))+((r11*x10595))+(((-1.0)*x10591*x10597)));
evalcond[4]=(((r21*x10596))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10593*x10594))+((r22*x10590)));
evalcond[5]=((((-1.0)*x10592*x10594))+(((-1.0)*sj1*sj2))+((r01*x10596))+((cj1*cj2))+((r02*x10590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10598=((1.0)*gconst5);
CheckValue<IkReal> x10599 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10598)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10599.valid){
continue;
}
CheckValue<IkReal> x10600=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10598))+(((-1.0)*gconst4*r20)))),-1);
if(!x10600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10599.value)+(((1.5707963267949)*(x10600.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10601=IKcos(j4);
IkReal x10602=IKsin(j4);
IkReal x10603=(gconst5*r10);
IkReal x10604=(gconst5*r00);
IkReal x10605=(gconst5*r20);
IkReal x10606=((1.0)*x10601);
IkReal x10607=(gconst4*x10602);
IkReal x10608=(gconst4*x10601);
IkReal x10609=((1.0)*x10602);
evalcond[0]=(((r11*x10608))+((r12*x10602))+(((-1.0)*x10603*x10606)));
evalcond[1]=(((r21*x10607))+(((-1.0)*r22*x10606))+(((-1.0)*x10605*x10609)));
evalcond[2]=(((r01*x10607))+(((-1.0)*x10604*x10609))+(((-1.0)*r02*x10606)));
evalcond[3]=((-1.0)+((r11*x10607))+(((-1.0)*r12*x10606))+(((-1.0)*x10603*x10609)));
evalcond[4]=(((cj2*sj1))+((r21*x10608))+((cj1*sj2))+((r22*x10602))+(((-1.0)*x10605*x10606)));
evalcond[5]=(((r01*x10608))+((r02*x10602))+(((-1.0)*sj1*sj2))+(((-1.0)*x10604*x10606))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10610=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10610.valid){
continue;
}
CheckValue<IkReal> x10611 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10610.value)))+(x10611.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10612=IKcos(j4);
IkReal x10613=IKsin(j4);
IkReal x10614=(gconst5*r10);
IkReal x10615=(gconst5*r00);
IkReal x10616=(gconst5*r20);
IkReal x10617=((1.0)*x10612);
IkReal x10618=(gconst4*x10613);
IkReal x10619=(gconst4*x10612);
IkReal x10620=((1.0)*x10613);
evalcond[0]=(((r12*x10613))+(((-1.0)*x10614*x10617))+((r11*x10619)));
evalcond[1]=((((-1.0)*r22*x10617))+(((-1.0)*x10616*x10620))+((r21*x10618)));
evalcond[2]=((((-1.0)*r02*x10617))+((r01*x10618))+(((-1.0)*x10615*x10620)));
evalcond[3]=((-1.0)+(((-1.0)*x10614*x10620))+(((-1.0)*r12*x10617))+((r11*x10618)));
evalcond[4]=(((cj2*sj1))+((r22*x10613))+((cj1*sj2))+(((-1.0)*x10616*x10617))+((r21*x10619)));
evalcond[5]=(((r02*x10613))+(((-1.0)*x10615*x10617))+(((-1.0)*sj1*sj2))+((r01*x10619))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10621=((-1.0)*r21);
CheckValue<IkReal> x10624 = IKatan2WithCheck(IkReal(x10621),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10624.valid){
continue;
}
IkReal x10622=((1.0)*(x10624.value));
IkReal x10623=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10622)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10622)));
IkReal gconst4=(x10621*x10623);
IkReal gconst5=((1.0)*r20*x10623);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10625=((-1.0)*r21);
CheckValue<IkReal> x10628 = IKatan2WithCheck(IkReal(x10625),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10628.valid){
continue;
}
IkReal x10626=((1.0)*(x10628.value));
IkReal x10627=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10626)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10626)));
IkReal gconst4=(x10625*x10627);
IkReal gconst5=((1.0)*r20*x10627);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10629=((-1.0)*r21);
CheckValue<IkReal> x10632 = IKatan2WithCheck(IkReal(x10629),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10632.valid){
continue;
}
IkReal x10630=((1.0)*(x10632.value));
IkReal x10631=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10630)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10630)));
IkReal gconst4=(x10629*x10631);
IkReal gconst5=((1.0)*r20*x10631);
IkReal x10633=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10637=IKPowWithIntegerCheck(x10633,-1);
if(!x10637.valid){
continue;
}
IkReal x10634=x10637.value;
IkReal x10635=((1.0)*x10634);
IkReal x10636=((((-1.0)*x10635*(r11*r11)*(r21*r21)))+(((-1.0)*x10635*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10634))+(((-1.0)*(r12*r12))));
j4eval[0]=x10636;
j4eval[1]=r12;
j4eval[2]=x10633;
j4eval[3]=IKsign(x10636);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10638=(gconst5*r10);
IkReal x10639=(gconst4*r11);
CheckValue<IkReal> x10640=IKPowWithIntegerCheck(IKsign(((((2.0)*x10638*x10639))+(((-1.0)*(x10639*x10639)))+(((-1.0)*(x10638*x10638)))+(((-1.0)*(r12*r12))))),-1);
if(!x10640.valid){
continue;
}
CheckValue<IkReal> x10641 = IKatan2WithCheck(IkReal(((((-1.0)*x10639))+x10638)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10640.value)))+(x10641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10642=IKsin(j4);
IkReal x10643=IKcos(j4);
IkReal x10644=(gconst4*r11);
IkReal x10645=(gconst5*r10);
IkReal x10646=(gconst5*r00);
IkReal x10647=(gconst5*r20);
IkReal x10648=((1.0)*x10643);
IkReal x10649=(gconst4*x10642);
IkReal x10650=((1.0)*x10642);
evalcond[0]=(((r21*x10649))+(((-1.0)*x10647*x10650))+(((-1.0)*r22*x10648)));
evalcond[1]=((((-1.0)*r02*x10648))+(((-1.0)*x10646*x10650))+((r01*x10649)));
evalcond[2]=((((-1.0)*r12*x10650))+((x10643*x10645))+(((-1.0)*x10644*x10648)));
evalcond[3]=((-1.0)+((x10642*x10644))+(((-1.0)*r12*x10648))+(((-1.0)*x10645*x10650)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x10650))+((x10643*x10647))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10648)));
evalcond[5]=(((x10643*x10646))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r01*x10648))+(((-1.0)*r02*x10650))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10651=((1.0)*gconst5);
CheckValue<IkReal> x10652=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10651))+(((-1.0)*gconst4*r20)))),-1);
if(!x10652.valid){
continue;
}
CheckValue<IkReal> x10653 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10652.value)))+(x10653.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10654=IKsin(j4);
IkReal x10655=IKcos(j4);
IkReal x10656=(gconst4*r11);
IkReal x10657=(gconst5*r10);
IkReal x10658=(gconst5*r00);
IkReal x10659=(gconst5*r20);
IkReal x10660=((1.0)*x10655);
IkReal x10661=(gconst4*x10654);
IkReal x10662=((1.0)*x10654);
evalcond[0]=((((-1.0)*x10659*x10662))+(((-1.0)*r22*x10660))+((r21*x10661)));
evalcond[1]=((((-1.0)*x10658*x10662))+(((-1.0)*r02*x10660))+((r01*x10661)));
evalcond[2]=(((x10655*x10657))+(((-1.0)*r12*x10662))+(((-1.0)*x10656*x10660)));
evalcond[3]=((-1.0)+((x10654*x10656))+(((-1.0)*x10657*x10662))+(((-1.0)*r12*x10660)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10655*x10659))+(((-1.0)*gconst4*r21*x10660))+(((-1.0)*r22*x10662)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x10662))+((x10655*x10658))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10663=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10663.valid){
continue;
}
CheckValue<IkReal> x10664 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10663.value)))+(x10664.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10665=IKsin(j4);
IkReal x10666=IKcos(j4);
IkReal x10667=(gconst4*r11);
IkReal x10668=(gconst5*r10);
IkReal x10669=(gconst5*r00);
IkReal x10670=(gconst5*r20);
IkReal x10671=((1.0)*x10666);
IkReal x10672=(gconst4*x10665);
IkReal x10673=((1.0)*x10665);
evalcond[0]=((((-1.0)*r22*x10671))+((r21*x10672))+(((-1.0)*x10670*x10673)));
evalcond[1]=((((-1.0)*x10669*x10673))+(((-1.0)*r02*x10671))+((r01*x10672)));
evalcond[2]=(((x10666*x10668))+(((-1.0)*r12*x10673))+(((-1.0)*x10667*x10671)));
evalcond[3]=((-1.0)+((x10665*x10667))+(((-1.0)*x10668*x10673))+(((-1.0)*r12*x10671)));
evalcond[4]=(((x10666*x10670))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10671))+(((-1.0)*r22*x10673)));
evalcond[5]=(((x10666*x10669))+(((-1.0)*r02*x10673))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10674=((-1.0)*r21);
IkReal x10675=((-1.0)*px);
CheckValue<IkReal> x10677 = IKatan2WithCheck(IkReal(x10674),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10677.valid){
continue;
}
IkReal x10676=((1.0)*(x10677.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10676)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10675);
rxp1_1=(px*r21);
rxp1_2=(r11*x10675);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10676)));
IkReal gconst4=x10674;
IkReal gconst5=((1.0)*r20);
IkReal x10678=((1.0)*cj3);
IkReal x10679=(r10*r20);
IkReal x10680=(r11*r21);
j4eval[0]=((((-1.0)*x10679))+(((-1.0)*x10680)));
j4eval[1]=((((-1.0)*x10678*x10680))+(((-1.0)*x10678*x10679)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10681=((-1.0)*r21);
IkReal x10682=((-1.0)*px);
CheckValue<IkReal> x10684 = IKatan2WithCheck(IkReal(x10681),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10684.valid){
continue;
}
IkReal x10683=((1.0)*(x10684.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10683)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10682);
rxp1_1=(px*r21);
rxp1_2=(r11*x10682);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10683)));
IkReal gconst4=x10681;
IkReal gconst5=((1.0)*r20);
IkReal x10685=((1.0)*r11*r21);
IkReal x10686=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10686))+(((-1.0)*x10685)));
j4eval[1]=(((sj3*x10686))+((sj3*x10685)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10687=((-1.0)*r21);
IkReal x10688=((-1.0)*px);
CheckValue<IkReal> x10690 = IKatan2WithCheck(IkReal(x10687),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10690.valid){
continue;
}
IkReal x10689=((1.0)*(x10690.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10689)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10688);
rxp1_1=(px*r21);
rxp1_2=(r11*x10688);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10689)));
IkReal gconst4=x10687;
IkReal gconst5=((1.0)*r20);
IkReal x10691=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r21*x10691))+(((-1.0)*r10*r20*x10691)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10692=((1.0)*r10);
CheckValue<IkReal> x10693=IKPowWithIntegerCheck(cj3,-1);
if(!x10693.valid){
continue;
}
CheckValue<IkReal> x10694=IKPowWithIntegerCheck(r02,-1);
if(!x10694.valid){
continue;
}
CheckValue<IkReal> x10695=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst5*x10692))+((cj3*gconst4*r11))),-1);
if(!x10695.valid){
continue;
}
if( IKabs(((x10693.value)*(x10694.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10695.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10692)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10693.value)*(x10694.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10695.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10692))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10693.value)*(x10694.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10695.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10692))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10696=IKsin(j4);
IkReal x10697=IKcos(j4);
IkReal x10698=(cj2*sj1);
IkReal x10699=(cj1*sj2);
IkReal x10700=(gconst5*sj3);
IkReal x10701=(gconst4*r11);
IkReal x10702=(sj1*sj2);
IkReal x10703=((1.0)*gconst5);
IkReal x10704=(cj1*cj2);
IkReal x10705=(gconst4*r21);
IkReal x10706=(cj3*gconst4);
IkReal x10707=(gconst4*sj3);
IkReal x10708=(cj3*gconst5);
IkReal x10709=(r20*x10697);
IkReal x10710=(r10*x10697);
IkReal x10711=(cj3*x10697);
IkReal x10712=(r02*x10696);
IkReal x10713=(x10699+x10698);
IkReal x10714=((1.0)*sj3*x10697);
evalcond[0]=((-1.0)*r02*x10697);
evalcond[1]=((((-1.0)*r20*x10696*x10703))+((x10696*x10705)));
evalcond[2]=(((cj3*x10712))+(((-1.0)*x10702))+x10704);
evalcond[3]=((((-1.0)*sj3*x10712))+x10713);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10696*x10703))+((x10696*x10701)));
evalcond[5]=(((x10701*x10711))+((r11*x10700))+((r10*x10707))+(((-1.0)*cj3*x10703*x10710)));
evalcond[6]=(((x10700*x10710))+((r11*x10708))+((r10*x10706))+(((-1.0)*x10701*x10714)));
evalcond[7]=(((r21*x10700))+((x10705*x10711))+x10713+((r20*x10707))+(((-1.0)*cj3*x10703*x10709)));
evalcond[8]=(((x10700*x10709))+(((-1.0)*x10704))+(((-1.0)*x10705*x10714))+((r21*x10708))+x10702+((r20*x10706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10715=((1.0)*gconst5);
IkReal x10716=(gconst4*r11);
CheckValue<IkReal> x10717=IKPowWithIntegerCheck(((((-1.0)*r10*x10715))+x10716),-1);
if(!x10717.valid){
continue;
}
CheckValue<IkReal> x10718=IKPowWithIntegerCheck(((((-1.0)*sj3*x10716))+((gconst5*r10*sj3))),-1);
if(!x10718.valid){
continue;
}
if( IKabs(x10717.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10718.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10715)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10717.value)+IKsqr(((x10718.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10715))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10717.value, ((x10718.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10715))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10719=IKsin(j4);
IkReal x10720=IKcos(j4);
IkReal x10721=(cj2*sj1);
IkReal x10722=(cj1*sj2);
IkReal x10723=(gconst5*sj3);
IkReal x10724=(gconst4*r11);
IkReal x10725=(sj1*sj2);
IkReal x10726=((1.0)*gconst5);
IkReal x10727=(cj1*cj2);
IkReal x10728=(gconst4*r21);
IkReal x10729=(cj3*gconst4);
IkReal x10730=(gconst4*sj3);
IkReal x10731=(cj3*gconst5);
IkReal x10732=(r20*x10720);
IkReal x10733=(r10*x10720);
IkReal x10734=(cj3*x10720);
IkReal x10735=(r02*x10719);
IkReal x10736=(x10722+x10721);
IkReal x10737=((1.0)*sj3*x10720);
evalcond[0]=((-1.0)*r02*x10720);
evalcond[1]=(((x10719*x10728))+(((-1.0)*r20*x10719*x10726)));
evalcond[2]=((((-1.0)*x10725))+x10727+((cj3*x10735)));
evalcond[3]=((((-1.0)*sj3*x10735))+x10736);
evalcond[4]=((-1.0)+((x10719*x10724))+(((-1.0)*r10*x10719*x10726)));
evalcond[5]=(((r10*x10730))+((x10724*x10734))+(((-1.0)*cj3*x10726*x10733))+((r11*x10723)));
evalcond[6]=((((-1.0)*x10724*x10737))+((r10*x10729))+((x10723*x10733))+((r11*x10731)));
evalcond[7]=(((r21*x10723))+((r20*x10730))+x10736+(((-1.0)*cj3*x10726*x10732))+((x10728*x10734)));
evalcond[8]=(((x10723*x10732))+((r21*x10731))+(((-1.0)*x10727))+((r20*x10729))+(((-1.0)*x10728*x10737))+x10725);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10738=((1.0)*sj3);
IkReal x10739=(gconst4*r11);
IkReal x10740=((1.0)*gconst5*r10);
CheckValue<IkReal> x10741=IKPowWithIntegerCheck(((((-1.0)*x10740))+x10739),-1);
if(!x10741.valid){
continue;
}
CheckValue<IkReal> x10742=IKPowWithIntegerCheck(((((-1.0)*cj3*x10740))+((cj3*x10739))),-1);
if(!x10742.valid){
continue;
}
if( IKabs(x10741.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10742.value)*(((((-1.0)*gconst4*r10*x10738))+(((-1.0)*gconst5*r11*x10738)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10741.value)+IKsqr(((x10742.value)*(((((-1.0)*gconst4*r10*x10738))+(((-1.0)*gconst5*r11*x10738))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10741.value, ((x10742.value)*(((((-1.0)*gconst4*r10*x10738))+(((-1.0)*gconst5*r11*x10738))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10743=IKsin(j4);
IkReal x10744=IKcos(j4);
IkReal x10745=(cj2*sj1);
IkReal x10746=(cj1*sj2);
IkReal x10747=(gconst5*sj3);
IkReal x10748=(gconst4*r11);
IkReal x10749=(sj1*sj2);
IkReal x10750=((1.0)*gconst5);
IkReal x10751=(cj1*cj2);
IkReal x10752=(gconst4*r21);
IkReal x10753=(cj3*gconst4);
IkReal x10754=(gconst4*sj3);
IkReal x10755=(cj3*gconst5);
IkReal x10756=(r20*x10744);
IkReal x10757=(r10*x10744);
IkReal x10758=(cj3*x10744);
IkReal x10759=(r02*x10743);
IkReal x10760=(x10745+x10746);
IkReal x10761=((1.0)*sj3*x10744);
evalcond[0]=((-1.0)*r02*x10744);
evalcond[1]=(((x10743*x10752))+(((-1.0)*r20*x10743*x10750)));
evalcond[2]=((((-1.0)*x10749))+((cj3*x10759))+x10751);
evalcond[3]=((((-1.0)*sj3*x10759))+x10760);
evalcond[4]=((-1.0)+((x10743*x10748))+(((-1.0)*r10*x10743*x10750)));
evalcond[5]=(((r10*x10754))+(((-1.0)*cj3*x10750*x10757))+((x10748*x10758))+((r11*x10747)));
evalcond[6]=(((r10*x10753))+((x10747*x10757))+((r11*x10755))+(((-1.0)*x10748*x10761)));
evalcond[7]=((((-1.0)*cj3*x10750*x10756))+((x10752*x10758))+((r20*x10754))+x10760+((r21*x10747)));
evalcond[8]=((((-1.0)*x10752*x10761))+((x10747*x10756))+((r20*x10753))+x10749+((r21*x10755))+(((-1.0)*x10751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10762=gconst4*gconst4;
IkReal x10763=gconst5*gconst5;
IkReal x10764=(r10*r21);
IkReal x10765=((1.0)*cj3);
IkReal x10766=(r11*r21);
IkReal x10767=(r11*r20);
IkReal x10768=(r22*sj3);
IkReal x10769=(gconst4*r10);
IkReal x10770=((1.0)*sj3);
IkReal x10771=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10772=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x10763*x10765))+(((-1.0)*r12*r22*x10765))+((x10767*x10771))+(((-1.0)*x10762*x10765*x10766))+((x10764*x10771)))),-1);
if(!x10772.valid){
continue;
}
CheckValue<IkReal> x10773 = IKatan2WithCheck(IkReal((((gconst5*r11*x10768))+((x10768*x10769)))),IkReal((((gconst4*gconst5*sj3*x10766))+(((-1.0)*x10763*x10767*x10770))+(((-1.0)*gconst5*r20*x10769*x10770))+((sj3*x10762*x10764)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10772.value)))+(x10773.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10774=IKsin(j4);
IkReal x10775=IKcos(j4);
IkReal x10776=(cj2*sj1);
IkReal x10777=(cj1*sj2);
IkReal x10778=(gconst5*sj3);
IkReal x10779=(gconst4*r11);
IkReal x10780=(sj1*sj2);
IkReal x10781=(gconst5*r10);
IkReal x10782=(cj1*cj2);
IkReal x10783=(gconst4*r01);
IkReal x10784=(gconst4*r21);
IkReal x10785=(gconst5*r00);
IkReal x10786=(gconst4*sj3);
IkReal x10787=(cj3*gconst5);
IkReal x10788=(cj3*gconst4);
IkReal x10789=((1.0)*x10775);
IkReal x10790=((1.0)*x10774);
IkReal x10791=(cj3*x10774);
IkReal x10792=(cj3*x10775);
IkReal x10793=(x10776+x10777);
evalcond[0]=(((x10774*x10784))+(((-1.0)*gconst5*r20*x10790))+(((-1.0)*r22*x10789)));
evalcond[1]=(((x10774*x10783))+(((-1.0)*x10785*x10790))+(((-1.0)*r02*x10789)));
evalcond[2]=((-1.0)+(((-1.0)*x10781*x10790))+((x10774*x10779))+(((-1.0)*r12*x10789)));
evalcond[3]=(((r11*x10778))+((r12*x10791))+((x10779*x10792))+((r10*x10786))+(((-1.0)*cj3*x10781*x10789)));
evalcond[4]=((((-1.0)*sj3*x10779*x10789))+((r11*x10787))+((r10*x10775*x10778))+(((-1.0)*r12*sj3*x10790))+((r10*x10788)));
evalcond[5]=(((x10784*x10792))+(((-1.0)*r20*x10787*x10789))+((r20*x10786))+((r21*x10778))+x10793+((r22*x10791)));
evalcond[6]=(((r02*x10791))+(((-1.0)*cj3*x10785*x10789))+((x10783*x10792))+(((-1.0)*x10780))+((r01*x10778))+((r00*x10786))+x10782);
evalcond[7]=((((-1.0)*sj3*x10783*x10789))+(((-1.0)*r02*sj3*x10790))+((r01*x10787))+((r00*x10788))+x10793+((r00*x10775*x10778)));
evalcond[8]=(((r21*x10787))+(((-1.0)*sj3*x10784*x10789))+((r20*x10788))+(((-1.0)*r22*sj3*x10790))+(((-1.0)*x10782))+x10780+((r20*x10775*x10778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10794=((1.0)*gconst5);
CheckValue<IkReal> x10795 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10794))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10795.valid){
continue;
}
CheckValue<IkReal> x10796=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10794))+(((-1.0)*gconst4*r20)))),-1);
if(!x10796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10795.value)+(((1.5707963267949)*(x10796.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10797=IKsin(j4);
IkReal x10798=IKcos(j4);
IkReal x10799=(cj2*sj1);
IkReal x10800=(cj1*sj2);
IkReal x10801=(gconst5*sj3);
IkReal x10802=(gconst4*r11);
IkReal x10803=(sj1*sj2);
IkReal x10804=(gconst5*r10);
IkReal x10805=(cj1*cj2);
IkReal x10806=(gconst4*r01);
IkReal x10807=(gconst4*r21);
IkReal x10808=(gconst5*r00);
IkReal x10809=(gconst4*sj3);
IkReal x10810=(cj3*gconst5);
IkReal x10811=(cj3*gconst4);
IkReal x10812=((1.0)*x10798);
IkReal x10813=((1.0)*x10797);
IkReal x10814=(cj3*x10797);
IkReal x10815=(cj3*x10798);
IkReal x10816=(x10799+x10800);
evalcond[0]=((((-1.0)*gconst5*r20*x10813))+(((-1.0)*r22*x10812))+((x10797*x10807)));
evalcond[1]=((((-1.0)*r02*x10812))+(((-1.0)*x10808*x10813))+((x10797*x10806)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10812))+(((-1.0)*x10804*x10813))+((x10797*x10802)));
evalcond[3]=(((r10*x10809))+((r11*x10801))+((x10802*x10815))+(((-1.0)*cj3*x10804*x10812))+((r12*x10814)));
evalcond[4]=((((-1.0)*sj3*x10802*x10812))+((r10*x10811))+(((-1.0)*r12*sj3*x10813))+((r10*x10798*x10801))+((r11*x10810)));
evalcond[5]=(((r22*x10814))+((r20*x10809))+((x10807*x10815))+((r21*x10801))+(((-1.0)*r20*x10810*x10812))+x10816);
evalcond[6]=(((r02*x10814))+((r01*x10801))+((x10806*x10815))+((r00*x10809))+(((-1.0)*x10803))+(((-1.0)*cj3*x10808*x10812))+x10805);
evalcond[7]=(((r00*x10798*x10801))+(((-1.0)*sj3*x10806*x10812))+(((-1.0)*r02*sj3*x10813))+((r01*x10810))+((r00*x10811))+x10816);
evalcond[8]=((((-1.0)*r22*sj3*x10813))+((r20*x10811))+(((-1.0)*x10805))+((r20*x10798*x10801))+(((-1.0)*sj3*x10807*x10812))+((r21*x10810))+x10803);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10817=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10817.valid){
continue;
}
CheckValue<IkReal> x10818 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10817.value)))+(x10818.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10819=IKsin(j4);
IkReal x10820=IKcos(j4);
IkReal x10821=(cj2*sj1);
IkReal x10822=(cj1*sj2);
IkReal x10823=(gconst5*sj3);
IkReal x10824=(gconst4*r11);
IkReal x10825=(sj1*sj2);
IkReal x10826=(gconst5*r10);
IkReal x10827=(cj1*cj2);
IkReal x10828=(gconst4*r01);
IkReal x10829=(gconst4*r21);
IkReal x10830=(gconst5*r00);
IkReal x10831=(gconst4*sj3);
IkReal x10832=(cj3*gconst5);
IkReal x10833=(cj3*gconst4);
IkReal x10834=((1.0)*x10820);
IkReal x10835=((1.0)*x10819);
IkReal x10836=(cj3*x10819);
IkReal x10837=(cj3*x10820);
IkReal x10838=(x10821+x10822);
evalcond[0]=((((-1.0)*gconst5*r20*x10835))+(((-1.0)*r22*x10834))+((x10819*x10829)));
evalcond[1]=((((-1.0)*x10830*x10835))+(((-1.0)*r02*x10834))+((x10819*x10828)));
evalcond[2]=((-1.0)+(((-1.0)*x10826*x10835))+(((-1.0)*r12*x10834))+((x10819*x10824)));
evalcond[3]=((((-1.0)*cj3*x10826*x10834))+((x10824*x10837))+((r10*x10831))+((r12*x10836))+((r11*x10823)));
evalcond[4]=(((r10*x10833))+(((-1.0)*r12*sj3*x10835))+((r10*x10820*x10823))+(((-1.0)*sj3*x10824*x10834))+((r11*x10832)));
evalcond[5]=(((r21*x10823))+((r22*x10836))+(((-1.0)*r20*x10832*x10834))+((r20*x10831))+((x10829*x10837))+x10838);
evalcond[6]=((((-1.0)*cj3*x10830*x10834))+(((-1.0)*x10825))+((r02*x10836))+((r00*x10831))+((x10828*x10837))+((r01*x10823))+x10827);
evalcond[7]=(((r00*x10820*x10823))+(((-1.0)*r02*sj3*x10835))+(((-1.0)*sj3*x10828*x10834))+((r01*x10832))+((r00*x10833))+x10838);
evalcond[8]=((((-1.0)*x10827))+(((-1.0)*r22*sj3*x10835))+((r20*x10820*x10823))+(((-1.0)*sj3*x10829*x10834))+((r20*x10833))+((r21*x10832))+x10825);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10839=((-1.0)*r21);
CheckValue<IkReal> x10842 = IKatan2WithCheck(IkReal(x10839),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10842.valid){
continue;
}
IkReal x10840=((1.0)*(x10842.value));
IkReal x10841=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10840)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10840)));
IkReal gconst4=(x10839*x10841);
IkReal gconst5=((1.0)*r20*x10841);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10843=((-1.0)*r21);
CheckValue<IkReal> x10846 = IKatan2WithCheck(IkReal(x10843),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10846.valid){
continue;
}
IkReal x10844=((1.0)*(x10846.value));
IkReal x10845=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10844)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10844)));
IkReal gconst4=(x10843*x10845);
IkReal gconst5=((1.0)*r20*x10845);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10847=((-1.0)*r21);
CheckValue<IkReal> x10850 = IKatan2WithCheck(IkReal(x10847),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10850.valid){
continue;
}
IkReal x10848=((1.0)*(x10850.value));
IkReal x10849=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10848)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10848)));
IkReal gconst4=(x10847*x10849);
IkReal gconst5=((1.0)*r20*x10849);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10851=((-1.0)*r21);
CheckValue<IkReal> x10854 = IKatan2WithCheck(IkReal(x10851),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10854.valid){
continue;
}
IkReal x10852=((1.0)*(x10854.value));
IkReal x10853=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10852)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10852)));
IkReal gconst4=(x10851*x10853);
IkReal gconst5=((1.0)*r20*x10853);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10855=((-1.0)*r21);
CheckValue<IkReal> x10858 = IKatan2WithCheck(IkReal(x10855),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10858.valid){
continue;
}
IkReal x10856=((1.0)*(x10858.value));
IkReal x10857=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10856)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10856)));
IkReal gconst4=(x10855*x10857);
IkReal gconst5=((1.0)*r20*x10857);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10859=((-1.0)*r21);
CheckValue<IkReal> x10862 = IKatan2WithCheck(IkReal(x10859),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10862.valid){
continue;
}
IkReal x10860=((1.0)*(x10862.value));
IkReal x10861=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10860)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10860)));
IkReal gconst4=(x10859*x10861);
IkReal gconst5=((1.0)*r20*x10861);
IkReal x10863=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10867=IKPowWithIntegerCheck(x10863,-1);
if(!x10867.valid){
continue;
}
IkReal x10864=x10867.value;
IkReal x10865=((1.0)*x10864);
IkReal x10866=((((-1.0)*x10865*(r01*r01)*(r21*r21)))+(((-1.0)*x10865*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10864)));
j4eval[0]=x10866;
j4eval[1]=r02;
j4eval[2]=x10863;
j4eval[3]=IKsign(x10866);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10868=(gconst5*r00);
IkReal x10869=(gconst4*r01);
CheckValue<IkReal> x10870 = IKatan2WithCheck(IkReal(((((-1.0)*x10869))+x10868)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10870.valid){
continue;
}
CheckValue<IkReal> x10871=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10868*x10868)))+(((-1.0)*(x10869*x10869)))+(((-1.0)*(r02*r02)))+(((2.0)*x10868*x10869)))),-1);
if(!x10871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10870.value)+(((1.5707963267949)*(x10871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10872=IKsin(j4);
IkReal x10873=IKcos(j4);
IkReal x10874=(gconst4*r11);
IkReal x10875=((1.0)*cj1);
IkReal x10876=(gconst5*r10);
IkReal x10877=(gconst4*r01);
IkReal x10878=(gconst5*r00);
IkReal x10879=(gconst4*r21);
IkReal x10880=(gconst5*r20);
IkReal x10881=((1.0)*x10873);
IkReal x10882=((1.0)*x10872);
evalcond[0]=((((-1.0)*x10880*x10882))+(((-1.0)*r22*x10881))+((x10872*x10879)));
evalcond[1]=((((-1.0)*x10876*x10882))+(((-1.0)*r12*x10881))+((x10872*x10874)));
evalcond[2]=((((-1.0)*r02*x10882))+(((-1.0)*x10877*x10881))+((x10873*x10878)));
evalcond[3]=((-1.0)+(((-1.0)*x10878*x10882))+(((-1.0)*r02*x10881))+((x10872*x10877)));
evalcond[4]=(((x10873*x10880))+((sj1*sj2))+(((-1.0)*x10879*x10881))+(((-1.0)*r22*x10882))+(((-1.0)*cj2*x10875)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10874*x10881))+(((-1.0)*sj2*x10875))+(((-1.0)*r12*x10882))+((x10873*x10876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10883=((1.0)*gconst5);
CheckValue<IkReal> x10884 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10884.valid){
continue;
}
CheckValue<IkReal> x10885=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10883))+(((-1.0)*gconst4*r10)))),-1);
if(!x10885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10884.value)+(((1.5707963267949)*(x10885.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10886=IKsin(j4);
IkReal x10887=IKcos(j4);
IkReal x10888=(gconst4*r11);
IkReal x10889=((1.0)*cj1);
IkReal x10890=(gconst5*r10);
IkReal x10891=(gconst4*r01);
IkReal x10892=(gconst5*r00);
IkReal x10893=(gconst4*r21);
IkReal x10894=(gconst5*r20);
IkReal x10895=((1.0)*x10887);
IkReal x10896=((1.0)*x10886);
evalcond[0]=(((x10886*x10893))+(((-1.0)*r22*x10895))+(((-1.0)*x10894*x10896)));
evalcond[1]=((((-1.0)*x10890*x10896))+((x10886*x10888))+(((-1.0)*r12*x10895)));
evalcond[2]=((((-1.0)*x10891*x10895))+(((-1.0)*r02*x10896))+((x10887*x10892)));
evalcond[3]=((-1.0)+(((-1.0)*x10892*x10896))+(((-1.0)*r02*x10895))+((x10886*x10891)));
evalcond[4]=((((-1.0)*x10893*x10895))+((x10887*x10894))+((sj1*sj2))+(((-1.0)*cj2*x10889))+(((-1.0)*r22*x10896)));
evalcond[5]=((((-1.0)*sj2*x10889))+(((-1.0)*x10888*x10895))+(((-1.0)*cj2*sj1))+((x10887*x10890))+(((-1.0)*r12*x10896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10897 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10897.valid){
continue;
}
CheckValue<IkReal> x10898=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10897.value)+(((1.5707963267949)*(x10898.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10899=IKsin(j4);
IkReal x10900=IKcos(j4);
IkReal x10901=(gconst4*r11);
IkReal x10902=((1.0)*cj1);
IkReal x10903=(gconst5*r10);
IkReal x10904=(gconst4*r01);
IkReal x10905=(gconst5*r00);
IkReal x10906=(gconst4*r21);
IkReal x10907=(gconst5*r20);
IkReal x10908=((1.0)*x10900);
IkReal x10909=((1.0)*x10899);
evalcond[0]=((((-1.0)*r22*x10908))+(((-1.0)*x10907*x10909))+((x10899*x10906)));
evalcond[1]=((((-1.0)*x10903*x10909))+(((-1.0)*r12*x10908))+((x10899*x10901)));
evalcond[2]=(((x10900*x10905))+(((-1.0)*x10904*x10908))+(((-1.0)*r02*x10909)));
evalcond[3]=((-1.0)+((x10899*x10904))+(((-1.0)*x10905*x10909))+(((-1.0)*r02*x10908)));
evalcond[4]=(((x10900*x10907))+((sj1*sj2))+(((-1.0)*r22*x10909))+(((-1.0)*cj2*x10902))+(((-1.0)*x10906*x10908)));
evalcond[5]=(((x10900*x10903))+(((-1.0)*cj2*sj1))+(((-1.0)*x10901*x10908))+(((-1.0)*sj2*x10902))+(((-1.0)*r12*x10909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10910=((-1.0)*r21);
CheckValue<IkReal> x10913 = IKatan2WithCheck(IkReal(x10910),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10913.valid){
continue;
}
IkReal x10911=((1.0)*(x10913.value));
IkReal x10912=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10911)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10911)));
IkReal gconst4=(x10910*x10912);
IkReal gconst5=((1.0)*r20*x10912);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10914=((-1.0)*r21);
CheckValue<IkReal> x10917 = IKatan2WithCheck(IkReal(x10914),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10917.valid){
continue;
}
IkReal x10915=((1.0)*(x10917.value));
IkReal x10916=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10915)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10915)));
IkReal gconst4=(x10914*x10916);
IkReal gconst5=((1.0)*r20*x10916);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10918=((-1.0)*r21);
CheckValue<IkReal> x10921 = IKatan2WithCheck(IkReal(x10918),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10921.valid){
continue;
}
IkReal x10919=((1.0)*(x10921.value));
IkReal x10920=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10919)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10919)));
IkReal gconst4=(x10918*x10920);
IkReal gconst5=((1.0)*r20*x10920);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10922=(gconst4*r01);
IkReal x10923=(gconst5*r00);
CheckValue<IkReal> x10924=IKPowWithIntegerCheck(IKsign(((x10922*x10922)+(((-2.0)*x10922*x10923))+(r02*r02)+(x10923*x10923))),-1);
if(!x10924.valid){
continue;
}
CheckValue<IkReal> x10925 = IKatan2WithCheck(IkReal(((((-1.0)*x10923))+x10922)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10924.value)))+(x10925.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10926=IKcos(j4);
IkReal x10927=IKsin(j4);
IkReal x10928=(gconst4*r11);
IkReal x10929=(gconst5*r10);
IkReal x10930=((1.0)*cj1);
IkReal x10931=(gconst5*r00);
IkReal x10932=(gconst5*r20);
IkReal x10933=((1.0)*x10926);
IkReal x10934=(gconst4*x10926);
IkReal x10935=((1.0)*x10927);
IkReal x10936=(gconst4*x10927);
evalcond[0]=((((-1.0)*x10931*x10933))+((r02*x10927))+((r01*x10934)));
evalcond[1]=((((-1.0)*r22*x10933))+((r21*x10936))+(((-1.0)*x10932*x10935)));
evalcond[2]=((((-1.0)*x10929*x10935))+(((-1.0)*r12*x10933))+((x10927*x10928)));
evalcond[3]=((-1.0)+(((-1.0)*x10931*x10935))+(((-1.0)*r02*x10933))+((r01*x10936)));
evalcond[4]=(((sj1*sj2))+((r21*x10934))+(((-1.0)*cj2*x10930))+((r22*x10927))+(((-1.0)*x10932*x10933)));
evalcond[5]=((((-1.0)*x10929*x10933))+((x10926*x10928))+(((-1.0)*cj2*sj1))+((r12*x10927))+(((-1.0)*sj2*x10930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10937=((1.0)*gconst5);
CheckValue<IkReal> x10938=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10937))+(((-1.0)*gconst4*r10)))),-1);
if(!x10938.valid){
continue;
}
CheckValue<IkReal> x10939 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10937))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10938.value)))+(x10939.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10940=IKcos(j4);
IkReal x10941=IKsin(j4);
IkReal x10942=(gconst4*r11);
IkReal x10943=(gconst5*r10);
IkReal x10944=((1.0)*cj1);
IkReal x10945=(gconst5*r00);
IkReal x10946=(gconst5*r20);
IkReal x10947=((1.0)*x10940);
IkReal x10948=(gconst4*x10940);
IkReal x10949=((1.0)*x10941);
IkReal x10950=(gconst4*x10941);
evalcond[0]=((((-1.0)*x10945*x10947))+((r01*x10948))+((r02*x10941)));
evalcond[1]=((((-1.0)*r22*x10947))+(((-1.0)*x10946*x10949))+((r21*x10950)));
evalcond[2]=(((x10941*x10942))+(((-1.0)*r12*x10947))+(((-1.0)*x10943*x10949)));
evalcond[3]=((-1.0)+(((-1.0)*x10945*x10949))+((r01*x10950))+(((-1.0)*r02*x10947)));
evalcond[4]=(((r21*x10948))+((sj1*sj2))+(((-1.0)*x10946*x10947))+((r22*x10941))+(((-1.0)*cj2*x10944)));
evalcond[5]=(((r12*x10941))+(((-1.0)*cj2*sj1))+(((-1.0)*x10943*x10947))+((x10940*x10942))+(((-1.0)*sj2*x10944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10951 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10951.valid){
continue;
}
CheckValue<IkReal> x10952=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10951.value)+(((1.5707963267949)*(x10952.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10953=IKcos(j4);
IkReal x10954=IKsin(j4);
IkReal x10955=(gconst4*r11);
IkReal x10956=(gconst5*r10);
IkReal x10957=((1.0)*cj1);
IkReal x10958=(gconst5*r00);
IkReal x10959=(gconst5*r20);
IkReal x10960=((1.0)*x10953);
IkReal x10961=(gconst4*x10953);
IkReal x10962=((1.0)*x10954);
IkReal x10963=(gconst4*x10954);
evalcond[0]=(((r02*x10954))+((r01*x10961))+(((-1.0)*x10958*x10960)));
evalcond[1]=((((-1.0)*x10959*x10962))+(((-1.0)*r22*x10960))+((r21*x10963)));
evalcond[2]=(((x10954*x10955))+(((-1.0)*x10956*x10962))+(((-1.0)*r12*x10960)));
evalcond[3]=((-1.0)+((r01*x10963))+(((-1.0)*x10958*x10962))+(((-1.0)*r02*x10960)));
evalcond[4]=((((-1.0)*cj2*x10957))+((r22*x10954))+(((-1.0)*x10959*x10960))+((sj1*sj2))+((r21*x10961)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x10953*x10955))+(((-1.0)*sj2*x10957))+(((-1.0)*x10956*x10960))+((r12*x10954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10964=((-1.0)*r21);
CheckValue<IkReal> x10967 = IKatan2WithCheck(IkReal(x10964),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10967.valid){
continue;
}
IkReal x10965=((1.0)*(x10967.value));
IkReal x10966=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10965)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10965)));
IkReal gconst4=(x10964*x10966);
IkReal gconst5=((1.0)*r20*x10966);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10968=((-1.0)*r21);
CheckValue<IkReal> x10971 = IKatan2WithCheck(IkReal(x10968),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10971.valid){
continue;
}
IkReal x10969=((1.0)*(x10971.value));
IkReal x10970=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10969)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10969)));
IkReal gconst4=(x10968*x10970);
IkReal gconst5=((1.0)*r20*x10970);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10972=((-1.0)*r21);
CheckValue<IkReal> x10975 = IKatan2WithCheck(IkReal(x10972),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10975.valid){
continue;
}
IkReal x10973=((1.0)*(x10975.value));
IkReal x10974=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10973)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10973)));
IkReal gconst4=(x10972*x10974);
IkReal gconst5=((1.0)*r20*x10974);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10976=(gconst4*r01);
IkReal x10977=(gconst5*r00);
CheckValue<IkReal> x10978 = IKatan2WithCheck(IkReal(((((-1.0)*x10977))+x10976)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10978.valid){
continue;
}
CheckValue<IkReal> x10979=IKPowWithIntegerCheck(IKsign(((x10977*x10977)+(x10976*x10976)+(r02*r02)+(((-2.0)*x10976*x10977)))),-1);
if(!x10979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10978.value)+(((1.5707963267949)*(x10979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10980=IKcos(j4);
IkReal x10981=IKsin(j4);
IkReal x10982=(gconst4*r11);
IkReal x10983=(gconst5*r10);
IkReal x10984=(gconst5*r00);
IkReal x10985=(gconst5*r20);
IkReal x10986=((1.0)*x10980);
IkReal x10987=(gconst4*x10980);
IkReal x10988=((1.0)*x10981);
IkReal x10989=(gconst4*x10981);
evalcond[0]=(((r01*x10987))+(((-1.0)*x10984*x10986))+((r02*x10981)));
evalcond[1]=(((r21*x10989))+(((-1.0)*r22*x10986))+(((-1.0)*x10985*x10988)));
evalcond[2]=((((-1.0)*x10983*x10988))+(((-1.0)*r12*x10986))+((x10981*x10982)));
evalcond[3]=((-1.0)+((r01*x10989))+(((-1.0)*x10984*x10988))+(((-1.0)*r02*x10986)));
evalcond[4]=(((r22*x10981))+((cj2*sj1))+((r21*x10987))+((cj1*sj2))+(((-1.0)*x10985*x10986)));
evalcond[5]=((((-1.0)*x10983*x10986))+((r12*x10981))+((x10980*x10982))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10990=((1.0)*gconst5);
CheckValue<IkReal> x10991 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10990))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10991.valid){
continue;
}
CheckValue<IkReal> x10992=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10990))+(((-1.0)*gconst4*r10)))),-1);
if(!x10992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10991.value)+(((1.5707963267949)*(x10992.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10993=IKcos(j4);
IkReal x10994=IKsin(j4);
IkReal x10995=(gconst4*r11);
IkReal x10996=(gconst5*r10);
IkReal x10997=(gconst5*r00);
IkReal x10998=(gconst5*r20);
IkReal x10999=((1.0)*x10993);
IkReal x11000=(gconst4*x10993);
IkReal x11001=((1.0)*x10994);
IkReal x11002=(gconst4*x10994);
evalcond[0]=((((-1.0)*x10997*x10999))+((r01*x11000))+((r02*x10994)));
evalcond[1]=((((-1.0)*r22*x10999))+((r21*x11002))+(((-1.0)*x10998*x11001)));
evalcond[2]=((((-1.0)*x10996*x11001))+(((-1.0)*r12*x10999))+((x10994*x10995)));
evalcond[3]=((-1.0)+((r01*x11002))+(((-1.0)*r02*x10999))+(((-1.0)*x10997*x11001)));
evalcond[4]=(((cj2*sj1))+((r22*x10994))+(((-1.0)*x10998*x10999))+((cj1*sj2))+((r21*x11000)));
evalcond[5]=(((r12*x10994))+((x10993*x10995))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10996*x10999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11003 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11003.valid){
continue;
}
CheckValue<IkReal> x11004=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11003.value)+(((1.5707963267949)*(x11004.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11005=IKcos(j4);
IkReal x11006=IKsin(j4);
IkReal x11007=(gconst4*r11);
IkReal x11008=(gconst5*r10);
IkReal x11009=(gconst5*r00);
IkReal x11010=(gconst5*r20);
IkReal x11011=((1.0)*x11005);
IkReal x11012=(gconst4*x11005);
IkReal x11013=((1.0)*x11006);
IkReal x11014=(gconst4*x11006);
evalcond[0]=(((r02*x11006))+((r01*x11012))+(((-1.0)*x11009*x11011)));
evalcond[1]=((((-1.0)*r22*x11011))+(((-1.0)*x11010*x11013))+((r21*x11014)));
evalcond[2]=((((-1.0)*r12*x11011))+((x11006*x11007))+(((-1.0)*x11008*x11013)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11011))+((r01*x11014))+(((-1.0)*x11009*x11013)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11010*x11011))+((r21*x11012))+((r22*x11006)));
evalcond[5]=(((x11005*x11007))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11006))+(((-1.0)*x11008*x11011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11015=((-1.0)*r21);
CheckValue<IkReal> x11018 = IKatan2WithCheck(IkReal(x11015),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11018.valid){
continue;
}
IkReal x11016=((1.0)*(x11018.value));
IkReal x11017=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11016)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11016)));
IkReal gconst4=(x11015*x11017);
IkReal gconst5=((1.0)*r20*x11017);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11019=((-1.0)*r21);
CheckValue<IkReal> x11022 = IKatan2WithCheck(IkReal(x11019),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11022.valid){
continue;
}
IkReal x11020=((1.0)*(x11022.value));
IkReal x11021=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11020)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11020)));
IkReal gconst4=(x11019*x11021);
IkReal gconst5=((1.0)*r20*x11021);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11023=((-1.0)*r21);
CheckValue<IkReal> x11026 = IKatan2WithCheck(IkReal(x11023),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11026.valid){
continue;
}
IkReal x11024=((1.0)*(x11026.value));
IkReal x11025=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11024)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11024)));
IkReal gconst4=(x11023*x11025);
IkReal gconst5=((1.0)*r20*x11025);
IkReal x11027=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11031=IKPowWithIntegerCheck(x11027,-1);
if(!x11031.valid){
continue;
}
IkReal x11028=x11031.value;
IkReal x11029=((1.0)*x11028);
IkReal x11030=((((-1.0)*x11029*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11029*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x11028)));
j4eval[0]=x11030;
j4eval[1]=r02;
j4eval[2]=x11027;
j4eval[3]=IKsign(x11030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11032=(gconst5*r00);
IkReal x11033=(gconst4*r01);
CheckValue<IkReal> x11034=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11032*x11032)))+(((2.0)*x11032*x11033))+(((-1.0)*(x11033*x11033))))),-1);
if(!x11034.valid){
continue;
}
CheckValue<IkReal> x11035 = IKatan2WithCheck(IkReal(((((-1.0)*x11033))+x11032)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11034.value)))+(x11035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11036=IKsin(j4);
IkReal x11037=IKcos(j4);
IkReal x11038=(gconst4*r11);
IkReal x11039=(gconst5*r10);
IkReal x11040=(gconst4*r01);
IkReal x11041=(gconst5*r00);
IkReal x11042=(gconst4*r21);
IkReal x11043=(gconst5*r20);
IkReal x11044=((1.0)*x11037);
IkReal x11045=((1.0)*x11036);
evalcond[0]=((((-1.0)*r22*x11044))+((x11036*x11042))+(((-1.0)*x11043*x11045)));
evalcond[1]=(((x11036*x11038))+(((-1.0)*r12*x11044))+(((-1.0)*x11039*x11045)));
evalcond[2]=(((x11037*x11041))+(((-1.0)*r02*x11045))+(((-1.0)*x11040*x11044)));
evalcond[3]=((-1.0)+(((-1.0)*x11041*x11045))+((x11036*x11040))+(((-1.0)*r02*x11044)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11045))+((cj1*sj2))+((x11037*x11043))+(((-1.0)*x11042*x11044)));
evalcond[5]=(((x11037*x11039))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11045))+(((-1.0)*x11038*x11044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11046=((1.0)*gconst5);
CheckValue<IkReal> x11047 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11046))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11047.valid){
continue;
}
CheckValue<IkReal> x11048=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11046))+(((-1.0)*gconst4*r10)))),-1);
if(!x11048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11047.value)+(((1.5707963267949)*(x11048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11049=IKsin(j4);
IkReal x11050=IKcos(j4);
IkReal x11051=(gconst4*r11);
IkReal x11052=(gconst5*r10);
IkReal x11053=(gconst4*r01);
IkReal x11054=(gconst5*r00);
IkReal x11055=(gconst4*r21);
IkReal x11056=(gconst5*r20);
IkReal x11057=((1.0)*x11050);
IkReal x11058=((1.0)*x11049);
evalcond[0]=((((-1.0)*r22*x11057))+(((-1.0)*x11056*x11058))+((x11049*x11055)));
evalcond[1]=((((-1.0)*r12*x11057))+(((-1.0)*x11052*x11058))+((x11049*x11051)));
evalcond[2]=(((x11050*x11054))+(((-1.0)*x11053*x11057))+(((-1.0)*r02*x11058)));
evalcond[3]=((-1.0)+(((-1.0)*x11054*x11058))+((x11049*x11053))+(((-1.0)*r02*x11057)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11058))+((cj1*sj2))+((x11050*x11056))+(((-1.0)*x11055*x11057)));
evalcond[5]=((((-1.0)*r12*x11058))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11050*x11052))+(((-1.0)*x11051*x11057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11059 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11059.valid){
continue;
}
CheckValue<IkReal> x11060=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11059.value)+(((1.5707963267949)*(x11060.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11061=IKsin(j4);
IkReal x11062=IKcos(j4);
IkReal x11063=(gconst4*r11);
IkReal x11064=(gconst5*r10);
IkReal x11065=(gconst4*r01);
IkReal x11066=(gconst5*r00);
IkReal x11067=(gconst4*r21);
IkReal x11068=(gconst5*r20);
IkReal x11069=((1.0)*x11062);
IkReal x11070=((1.0)*x11061);
evalcond[0]=((((-1.0)*r22*x11069))+((x11061*x11067))+(((-1.0)*x11068*x11070)));
evalcond[1]=((((-1.0)*x11064*x11070))+((x11061*x11063))+(((-1.0)*r12*x11069)));
evalcond[2]=(((x11062*x11066))+(((-1.0)*r02*x11070))+(((-1.0)*x11065*x11069)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11069))+((x11061*x11065))+(((-1.0)*x11066*x11070)));
evalcond[4]=(((cj2*sj1))+((x11062*x11068))+((cj1*sj2))+(((-1.0)*x11067*x11069))+(((-1.0)*r22*x11070)));
evalcond[5]=(((x11062*x11064))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11063*x11069))+(((-1.0)*r12*x11070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11071=gconst4*gconst4;
IkReal x11072=gconst5*gconst5;
IkReal x11073=(r01*r20);
IkReal x11074=(gconst4*sj3);
IkReal x11075=(r01*r21);
IkReal x11076=((1.0)*cj3);
IkReal x11077=(r00*r21);
IkReal x11078=(r00*r20);
IkReal x11079=(cj3*gconst4*gconst5);
IkReal x11080=((1.0)*x11072);
CheckValue<IkReal> x11081=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11072*x11076*x11078))+((x11073*x11079))+(((-1.0)*r02*r22*x11076))+((x11077*x11079))+(((-1.0)*x11071*x11075*x11076)))),-1);
if(!x11081.valid){
continue;
}
CheckValue<IkReal> x11082 = IKatan2WithCheck(IkReal((((r00*r22*x11074))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x11074*x11075))+(((-1.0)*sj3*x11073*x11080))+((sj3*x11071*x11077))+(((-1.0)*gconst5*x11074*x11078)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11081.value)))+(x11082.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11083=IKsin(j4);
IkReal x11084=IKcos(j4);
IkReal x11085=(sj1*sj2);
IkReal x11086=(gconst5*sj3);
IkReal x11087=(gconst4*r11);
IkReal x11088=(gconst5*r10);
IkReal x11089=((1.0)*cj1);
IkReal x11090=(gconst4*r01);
IkReal x11091=(cj2*sj1);
IkReal x11092=(gconst5*r00);
IkReal x11093=(gconst4*sj3);
IkReal x11094=(cj3*gconst5);
IkReal x11095=(cj3*gconst4);
IkReal x11096=(gconst4*r21);
IkReal x11097=(cj2*x11089);
IkReal x11098=((1.0)*x11084);
IkReal x11099=((1.0)*x11083);
IkReal x11100=(cj3*x11083);
IkReal x11101=(cj3*x11084);
evalcond[0]=(((x11083*x11096))+(((-1.0)*r22*x11098))+(((-1.0)*gconst5*r20*x11099)));
evalcond[1]=((((-1.0)*r12*x11098))+((x11083*x11087))+(((-1.0)*x11088*x11099)));
evalcond[2]=((-1.0)+((x11083*x11090))+(((-1.0)*x11092*x11099))+(((-1.0)*r02*x11098)));
evalcond[3]=(((r02*x11100))+((r01*x11086))+((x11090*x11101))+((r00*x11093))+(((-1.0)*cj3*x11092*x11098)));
evalcond[4]=(((r00*x11084*x11086))+(((-1.0)*r02*sj3*x11099))+((r00*x11095))+((r01*x11094))+(((-1.0)*sj3*x11090*x11098)));
evalcond[5]=((((-1.0)*r20*x11094*x11098))+((r21*x11086))+((cj1*sj2))+((r20*x11093))+x11091+((r21*x11084*x11095))+((r22*x11100)));
evalcond[6]=((((-1.0)*x11097))+((x11087*x11101))+x11085+((r11*x11086))+((r10*x11093))+(((-1.0)*cj3*x11088*x11098))+((r12*x11100)));
evalcond[7]=((((-1.0)*x11097))+(((-1.0)*r21*x11093*x11098))+((r20*x11095))+x11085+(((-1.0)*r22*sj3*x11099))+((r21*x11094))+((r20*x11084*x11086)));
evalcond[8]=((((-1.0)*sj2*x11089))+(((-1.0)*r12*sj3*x11099))+(((-1.0)*x11091))+((r11*x11094))+((r10*x11095))+((r10*x11084*x11086))+(((-1.0)*sj3*x11087*x11098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11102=((1.0)*gconst5);
CheckValue<IkReal> x11103 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11103.valid){
continue;
}
CheckValue<IkReal> x11104=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11102))+(((-1.0)*gconst4*r10)))),-1);
if(!x11104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11103.value)+(((1.5707963267949)*(x11104.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11105=IKsin(j4);
IkReal x11106=IKcos(j4);
IkReal x11107=(sj1*sj2);
IkReal x11108=(gconst5*sj3);
IkReal x11109=(gconst4*r11);
IkReal x11110=(gconst5*r10);
IkReal x11111=((1.0)*cj1);
IkReal x11112=(gconst4*r01);
IkReal x11113=(cj2*sj1);
IkReal x11114=(gconst5*r00);
IkReal x11115=(gconst4*sj3);
IkReal x11116=(cj3*gconst5);
IkReal x11117=(cj3*gconst4);
IkReal x11118=(gconst4*r21);
IkReal x11119=(cj2*x11111);
IkReal x11120=((1.0)*x11106);
IkReal x11121=((1.0)*x11105);
IkReal x11122=(cj3*x11105);
IkReal x11123=(cj3*x11106);
evalcond[0]=(((x11105*x11118))+(((-1.0)*gconst5*r20*x11121))+(((-1.0)*r22*x11120)));
evalcond[1]=(((x11105*x11109))+(((-1.0)*r12*x11120))+(((-1.0)*x11110*x11121)));
evalcond[2]=((-1.0)+((x11105*x11112))+(((-1.0)*x11114*x11121))+(((-1.0)*r02*x11120)));
evalcond[3]=((((-1.0)*cj3*x11114*x11120))+((r02*x11122))+((x11112*x11123))+((r00*x11115))+((r01*x11108)));
evalcond[4]=((((-1.0)*sj3*x11112*x11120))+(((-1.0)*r02*sj3*x11121))+((r00*x11117))+((r01*x11116))+((r00*x11106*x11108)));
evalcond[5]=(((r21*x11106*x11117))+((cj1*sj2))+((r22*x11122))+x11113+(((-1.0)*r20*x11116*x11120))+((r21*x11108))+((r20*x11115)));
evalcond[6]=((((-1.0)*cj3*x11110*x11120))+((r10*x11115))+((r12*x11122))+((x11109*x11123))+x11107+((r11*x11108))+(((-1.0)*x11119)));
evalcond[7]=(x11107+((r21*x11116))+(((-1.0)*r21*x11115*x11120))+((r20*x11117))+(((-1.0)*x11119))+(((-1.0)*r22*sj3*x11121))+((r20*x11106*x11108)));
evalcond[8]=((((-1.0)*x11113))+(((-1.0)*r12*sj3*x11121))+((r10*x11117))+((r10*x11106*x11108))+(((-1.0)*sj3*x11109*x11120))+(((-1.0)*sj2*x11111))+((r11*x11116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11124 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11124.valid){
continue;
}
CheckValue<IkReal> x11125=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11124.value)+(((1.5707963267949)*(x11125.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11126=IKsin(j4);
IkReal x11127=IKcos(j4);
IkReal x11128=(sj1*sj2);
IkReal x11129=(gconst5*sj3);
IkReal x11130=(gconst4*r11);
IkReal x11131=(gconst5*r10);
IkReal x11132=((1.0)*cj1);
IkReal x11133=(gconst4*r01);
IkReal x11134=(cj2*sj1);
IkReal x11135=(gconst5*r00);
IkReal x11136=(gconst4*sj3);
IkReal x11137=(cj3*gconst5);
IkReal x11138=(cj3*gconst4);
IkReal x11139=(gconst4*r21);
IkReal x11140=(cj2*x11132);
IkReal x11141=((1.0)*x11127);
IkReal x11142=((1.0)*x11126);
IkReal x11143=(cj3*x11126);
IkReal x11144=(cj3*x11127);
evalcond[0]=(((x11126*x11139))+(((-1.0)*r22*x11141))+(((-1.0)*gconst5*r20*x11142)));
evalcond[1]=((((-1.0)*x11131*x11142))+((x11126*x11130))+(((-1.0)*r12*x11141)));
evalcond[2]=((-1.0)+(((-1.0)*x11135*x11142))+((x11126*x11133))+(((-1.0)*r02*x11141)));
evalcond[3]=(((x11133*x11144))+((r02*x11143))+(((-1.0)*cj3*x11135*x11141))+((r01*x11129))+((r00*x11136)));
evalcond[4]=((((-1.0)*sj3*x11133*x11141))+((r00*x11127*x11129))+(((-1.0)*r02*sj3*x11142))+((r01*x11137))+((r00*x11138)));
evalcond[5]=((((-1.0)*r20*x11137*x11141))+((r21*x11129))+((r22*x11143))+((cj1*sj2))+x11134+((r20*x11136))+((r21*x11127*x11138)));
evalcond[6]=(x11128+((r10*x11136))+((r11*x11129))+((r12*x11143))+((x11130*x11144))+(((-1.0)*cj3*x11131*x11141))+(((-1.0)*x11140)));
evalcond[7]=(((r21*x11137))+x11128+((r20*x11127*x11129))+((r20*x11138))+(((-1.0)*r22*sj3*x11142))+(((-1.0)*r21*x11136*x11141))+(((-1.0)*x11140)));
evalcond[8]=((((-1.0)*x11134))+(((-1.0)*r12*sj3*x11142))+((r10*x11138))+((r11*x11137))+(((-1.0)*sj2*x11132))+((r10*x11127*x11129))+(((-1.0)*sj3*x11130*x11141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11145=((-1.0)*r21);
CheckValue<IkReal> x11148 = IKatan2WithCheck(IkReal(x11145),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11148.valid){
continue;
}
IkReal x11146=((1.0)*(x11148.value));
IkReal x11147=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11146)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11146)));
IkReal gconst4=(x11145*x11147);
IkReal gconst5=((1.0)*r20*x11147);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11149=((-1.0)*r21);
CheckValue<IkReal> x11152 = IKatan2WithCheck(IkReal(x11149),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11152.valid){
continue;
}
IkReal x11150=((1.0)*(x11152.value));
IkReal x11151=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11150)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11150)));
IkReal gconst4=(x11149*x11151);
IkReal gconst5=((1.0)*r20*x11151);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11153=((-1.0)*r21);
CheckValue<IkReal> x11156 = IKatan2WithCheck(IkReal(x11153),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11156.valid){
continue;
}
IkReal x11154=((1.0)*(x11156.value));
IkReal x11155=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11154)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11154)));
IkReal gconst4=(x11153*x11155);
IkReal gconst5=((1.0)*r20*x11155);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11157=((-1.0)*r21);
CheckValue<IkReal> x11160 = IKatan2WithCheck(IkReal(x11157),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11160.valid){
continue;
}
IkReal x11158=((1.0)*(x11160.value));
IkReal x11159=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11158)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11158)));
IkReal gconst4=(x11157*x11159);
IkReal gconst5=((1.0)*r20*x11159);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11161=((-1.0)*r21);
CheckValue<IkReal> x11164 = IKatan2WithCheck(IkReal(x11161),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11164.valid){
continue;
}
IkReal x11162=((1.0)*(x11164.value));
IkReal x11163=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11162)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11162)));
IkReal gconst4=(x11161*x11163);
IkReal gconst5=((1.0)*r20*x11163);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11165=((-1.0)*r21);
CheckValue<IkReal> x11168 = IKatan2WithCheck(IkReal(x11165),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11168.valid){
continue;
}
IkReal x11166=((1.0)*(x11168.value));
IkReal x11167=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11166)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11166)));
IkReal gconst4=(x11165*x11167);
IkReal gconst5=((1.0)*r20*x11167);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11169=(gconst5*r00);
IkReal x11170=(gconst4*r01);
CheckValue<IkReal> x11171 = IKatan2WithCheck(IkReal(((((-1.0)*x11170))+x11169)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11171.valid){
continue;
}
CheckValue<IkReal> x11172=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11169*x11170))+(x11169*x11169)+(r02*r02)+(x11170*x11170))),-1);
if(!x11172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11171.value)+(((1.5707963267949)*(x11172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11173=IKsin(j4);
IkReal x11174=IKcos(j4);
IkReal x11175=(gconst4*r11);
IkReal x11176=(gconst5*r10);
IkReal x11177=(gconst4*r01);
IkReal x11178=(gconst5*r00);
IkReal x11179=(gconst4*r21);
IkReal x11180=(gconst5*r20);
IkReal x11181=((1.0)*x11174);
IkReal x11182=((1.0)*x11173);
evalcond[0]=(((x11173*x11179))+(((-1.0)*r22*x11181))+(((-1.0)*x11180*x11182)));
evalcond[1]=(((x11173*x11175))+(((-1.0)*r12*x11181))+(((-1.0)*x11176*x11182)));
evalcond[2]=((((-1.0)*r02*x11182))+((x11174*x11178))+(((-1.0)*x11177*x11181)));
evalcond[3]=((1.0)+((x11173*x11177))+(((-1.0)*r02*x11181))+(((-1.0)*x11178*x11182)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11175*x11181))+(((-1.0)*r12*x11182))+((x11174*x11176))+((cj1*sj2)));
evalcond[5]=((((-1.0)*r22*x11182))+((x11174*x11180))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11179*x11181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11183=((1.0)*gconst5);
CheckValue<IkReal> x11184 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11183))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11184.valid){
continue;
}
CheckValue<IkReal> x11185=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11183))+(((-1.0)*gconst4*r20)))),-1);
if(!x11185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11184.value)+(((1.5707963267949)*(x11185.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11186=IKsin(j4);
IkReal x11187=IKcos(j4);
IkReal x11188=(gconst4*r11);
IkReal x11189=(gconst5*r10);
IkReal x11190=(gconst4*r01);
IkReal x11191=(gconst5*r00);
IkReal x11192=(gconst4*r21);
IkReal x11193=(gconst5*r20);
IkReal x11194=((1.0)*x11187);
IkReal x11195=((1.0)*x11186);
evalcond[0]=((((-1.0)*r22*x11194))+((x11186*x11192))+(((-1.0)*x11193*x11195)));
evalcond[1]=((((-1.0)*r12*x11194))+((x11186*x11188))+(((-1.0)*x11189*x11195)));
evalcond[2]=((((-1.0)*r02*x11195))+(((-1.0)*x11190*x11194))+((x11187*x11191)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11194))+((x11186*x11190))+(((-1.0)*x11191*x11195)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11195))+((cj1*sj2))+(((-1.0)*x11188*x11194))+((x11187*x11189)));
evalcond[5]=((((-1.0)*r22*x11195))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11192*x11194))+((x11187*x11193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11196=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11196.valid){
continue;
}
CheckValue<IkReal> x11197 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11196.value)))+(x11197.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11198=IKsin(j4);
IkReal x11199=IKcos(j4);
IkReal x11200=(gconst4*r11);
IkReal x11201=(gconst5*r10);
IkReal x11202=(gconst4*r01);
IkReal x11203=(gconst5*r00);
IkReal x11204=(gconst4*r21);
IkReal x11205=(gconst5*r20);
IkReal x11206=((1.0)*x11199);
IkReal x11207=((1.0)*x11198);
evalcond[0]=((((-1.0)*r22*x11206))+((x11198*x11204))+(((-1.0)*x11205*x11207)));
evalcond[1]=(((x11198*x11200))+(((-1.0)*r12*x11206))+(((-1.0)*x11201*x11207)));
evalcond[2]=(((x11199*x11203))+(((-1.0)*r02*x11207))+(((-1.0)*x11202*x11206)));
evalcond[3]=((1.0)+(((-1.0)*x11203*x11207))+((x11198*x11202))+(((-1.0)*r02*x11206)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x11207))+(((-1.0)*x11200*x11206))+((x11199*x11201)));
evalcond[5]=((((-1.0)*r22*x11207))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11199*x11205))+(((-1.0)*x11204*x11206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11208=((-1.0)*r21);
CheckValue<IkReal> x11211 = IKatan2WithCheck(IkReal(x11208),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11211.valid){
continue;
}
IkReal x11209=((1.0)*(x11211.value));
IkReal x11210=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11209)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11209)));
IkReal gconst4=(x11208*x11210);
IkReal gconst5=((1.0)*r20*x11210);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11212=((-1.0)*r21);
CheckValue<IkReal> x11215 = IKatan2WithCheck(IkReal(x11212),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11215.valid){
continue;
}
IkReal x11213=((1.0)*(x11215.value));
IkReal x11214=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11213)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11213)));
IkReal gconst4=(x11212*x11214);
IkReal gconst5=((1.0)*r20*x11214);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11216=((-1.0)*r21);
CheckValue<IkReal> x11219 = IKatan2WithCheck(IkReal(x11216),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11219.valid){
continue;
}
IkReal x11217=((1.0)*(x11219.value));
IkReal x11218=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11217)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11217)));
IkReal gconst4=(x11216*x11218);
IkReal gconst5=((1.0)*r20*x11218);
IkReal x11220=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11224=IKPowWithIntegerCheck(x11220,-1);
if(!x11224.valid){
continue;
}
IkReal x11221=x11224.value;
IkReal x11222=((1.0)*x11221);
IkReal x11223=((((-2.0)*r00*r01*r20*r21*x11221))+(((-1.0)*(r02*r02)))+(((-1.0)*x11222*(r01*r01)*(r21*r21)))+(((-1.0)*x11222*(r00*r00)*(r20*r20))));
j4eval[0]=x11223;
j4eval[1]=IKsign(x11223);
j4eval[2]=r02;
j4eval[3]=x11220;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11225=(gconst4*r01);
IkReal x11226=(gconst5*r00);
CheckValue<IkReal> x11227=IKPowWithIntegerCheck(IKsign(((((2.0)*x11225*x11226))+(((-1.0)*(x11225*x11225)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11226*x11226))))),-1);
if(!x11227.valid){
continue;
}
CheckValue<IkReal> x11228 = IKatan2WithCheck(IkReal((x11225+(((-1.0)*x11226)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11227.value)))+(x11228.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11229=IKcos(j4);
IkReal x11230=IKsin(j4);
IkReal x11231=(gconst4*r11);
IkReal x11232=(gconst5*r10);
IkReal x11233=(gconst5*r00);
IkReal x11234=(gconst5*r20);
IkReal x11235=((1.0)*x11229);
IkReal x11236=(gconst4*x11229);
IkReal x11237=((1.0)*x11230);
IkReal x11238=(gconst4*x11230);
evalcond[0]=((((-1.0)*x11233*x11235))+((r02*x11230))+((r01*x11236)));
evalcond[1]=(((r21*x11238))+(((-1.0)*r22*x11235))+(((-1.0)*x11234*x11237)));
evalcond[2]=((((-1.0)*x11232*x11237))+((x11230*x11231))+(((-1.0)*r12*x11235)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11235))+(((-1.0)*x11233*x11237))+((r01*x11238)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11232*x11235))+((x11229*x11231))+((r12*x11230)));
evalcond[5]=(((r22*x11230))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11236))+(((-1.0)*x11234*x11235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11239=((1.0)*gconst5);
CheckValue<IkReal> x11240=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11239))+(((-1.0)*gconst4*r20)))),-1);
if(!x11240.valid){
continue;
}
CheckValue<IkReal> x11241 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11239)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11240.value)))+(x11241.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11242=IKcos(j4);
IkReal x11243=IKsin(j4);
IkReal x11244=(gconst4*r11);
IkReal x11245=(gconst5*r10);
IkReal x11246=(gconst5*r00);
IkReal x11247=(gconst5*r20);
IkReal x11248=((1.0)*x11242);
IkReal x11249=(gconst4*x11242);
IkReal x11250=((1.0)*x11243);
IkReal x11251=(gconst4*x11243);
evalcond[0]=(((r02*x11243))+(((-1.0)*x11246*x11248))+((r01*x11249)));
evalcond[1]=((((-1.0)*x11247*x11250))+((r21*x11251))+(((-1.0)*r22*x11248)));
evalcond[2]=((((-1.0)*x11245*x11250))+((x11243*x11244))+(((-1.0)*r12*x11248)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11248))+(((-1.0)*x11246*x11250))+((r01*x11251)));
evalcond[4]=(((cj2*sj1))+((x11242*x11244))+(((-1.0)*x11245*x11248))+((cj1*sj2))+((r12*x11243)));
evalcond[5]=(((r22*x11243))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11247*x11248))+((r21*x11249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11252=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11252.valid){
continue;
}
CheckValue<IkReal> x11253 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11252.value)))+(x11253.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11254=IKcos(j4);
IkReal x11255=IKsin(j4);
IkReal x11256=(gconst4*r11);
IkReal x11257=(gconst5*r10);
IkReal x11258=(gconst5*r00);
IkReal x11259=(gconst5*r20);
IkReal x11260=((1.0)*x11254);
IkReal x11261=(gconst4*x11254);
IkReal x11262=((1.0)*x11255);
IkReal x11263=(gconst4*x11255);
evalcond[0]=(((r02*x11255))+((r01*x11261))+(((-1.0)*x11258*x11260)));
evalcond[1]=(((r21*x11263))+(((-1.0)*x11259*x11262))+(((-1.0)*r22*x11260)));
evalcond[2]=(((x11255*x11256))+(((-1.0)*r12*x11260))+(((-1.0)*x11257*x11262)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11260))+((r01*x11263))+(((-1.0)*x11258*x11262)));
evalcond[4]=(((cj2*sj1))+((x11254*x11256))+((cj1*sj2))+((r12*x11255))+(((-1.0)*x11257*x11260)));
evalcond[5]=(((r22*x11255))+((r21*x11261))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11259*x11260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11264=((-1.0)*r21);
CheckValue<IkReal> x11267 = IKatan2WithCheck(IkReal(x11264),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11267.valid){
continue;
}
IkReal x11265=((1.0)*(x11267.value));
IkReal x11266=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11265)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11265)));
IkReal gconst4=(x11264*x11266);
IkReal gconst5=((1.0)*r20*x11266);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11268=((-1.0)*r21);
CheckValue<IkReal> x11271 = IKatan2WithCheck(IkReal(x11268),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11271.valid){
continue;
}
IkReal x11269=((1.0)*(x11271.value));
IkReal x11270=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11269)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11269)));
IkReal gconst4=(x11268*x11270);
IkReal gconst5=((1.0)*r20*x11270);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11272=((-1.0)*r21);
CheckValue<IkReal> x11275 = IKatan2WithCheck(IkReal(x11272),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11275.valid){
continue;
}
IkReal x11273=((1.0)*(x11275.value));
IkReal x11274=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11273)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11273)));
IkReal gconst4=(x11272*x11274);
IkReal gconst5=((1.0)*r20*x11274);
IkReal x11276=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11280=IKPowWithIntegerCheck(x11276,-1);
if(!x11280.valid){
continue;
}
IkReal x11277=x11280.value;
IkReal x11278=((1.0)*x11277);
IkReal x11279=((((-1.0)*(r02*r02)))+(((-1.0)*x11278*(r00*r00)*(r20*r20)))+(((-1.0)*x11278*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x11277)));
j4eval[0]=x11279;
j4eval[1]=IKsign(x11279);
j4eval[2]=r02;
j4eval[3]=x11276;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11281=(gconst4*r01);
IkReal x11282=(gconst5*r00);
CheckValue<IkReal> x11283 = IKatan2WithCheck(IkReal((x11281+(((-1.0)*x11282)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11283.valid){
continue;
}
CheckValue<IkReal> x11284=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11282*x11282)))+(((-1.0)*(r02*r02)))+(((2.0)*x11281*x11282))+(((-1.0)*(x11281*x11281))))),-1);
if(!x11284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11283.value)+(((1.5707963267949)*(x11284.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11285=IKcos(j4);
IkReal x11286=IKsin(j4);
IkReal x11287=(gconst5*r10);
IkReal x11288=(gconst5*r00);
IkReal x11289=(gconst5*r20);
IkReal x11290=((1.0)*x11285);
IkReal x11291=(gconst4*x11286);
IkReal x11292=(gconst4*x11285);
IkReal x11293=((1.0)*x11286);
evalcond[0]=(((r01*x11292))+((r02*x11286))+(((-1.0)*x11288*x11290)));
evalcond[1]=((((-1.0)*r22*x11290))+((r21*x11291))+(((-1.0)*x11289*x11293)));
evalcond[2]=(((r11*x11291))+(((-1.0)*x11287*x11293))+(((-1.0)*r12*x11290)));
evalcond[3]=((1.0)+((r01*x11291))+(((-1.0)*r02*x11290))+(((-1.0)*x11288*x11293)));
evalcond[4]=(((cj2*sj1))+((r22*x11286))+((cj1*sj2))+((r21*x11292))+(((-1.0)*x11289*x11290)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x11292))+((r12*x11286))+(((-1.0)*x11287*x11290))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11294=((1.0)*gconst5);
CheckValue<IkReal> x11295=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11294))+(((-1.0)*gconst4*r20)))),-1);
if(!x11295.valid){
continue;
}
CheckValue<IkReal> x11296 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11294))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11295.value)))+(x11296.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11297=IKcos(j4);
IkReal x11298=IKsin(j4);
IkReal x11299=(gconst5*r10);
IkReal x11300=(gconst5*r00);
IkReal x11301=(gconst5*r20);
IkReal x11302=((1.0)*x11297);
IkReal x11303=(gconst4*x11298);
IkReal x11304=(gconst4*x11297);
IkReal x11305=((1.0)*x11298);
evalcond[0]=(((r01*x11304))+((r02*x11298))+(((-1.0)*x11300*x11302)));
evalcond[1]=((((-1.0)*r22*x11302))+((r21*x11303))+(((-1.0)*x11301*x11305)));
evalcond[2]=((((-1.0)*x11299*x11305))+((r11*x11303))+(((-1.0)*r12*x11302)));
evalcond[3]=((1.0)+((r01*x11303))+(((-1.0)*r02*x11302))+(((-1.0)*x11300*x11305)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x11304))+(((-1.0)*x11301*x11302))+((r22*x11298)));
evalcond[5]=((((-1.0)*x11299*x11302))+(((-1.0)*sj1*sj2))+((r11*x11304))+((cj1*cj2))+((r12*x11298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11306=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11306.valid){
continue;
}
CheckValue<IkReal> x11307 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11306.value)))+(x11307.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11308=IKcos(j4);
IkReal x11309=IKsin(j4);
IkReal x11310=(gconst5*r10);
IkReal x11311=(gconst5*r00);
IkReal x11312=(gconst5*r20);
IkReal x11313=((1.0)*x11308);
IkReal x11314=(gconst4*x11309);
IkReal x11315=(gconst4*x11308);
IkReal x11316=((1.0)*x11309);
evalcond[0]=(((r02*x11309))+(((-1.0)*x11311*x11313))+((r01*x11315)));
evalcond[1]=((((-1.0)*r22*x11313))+((r21*x11314))+(((-1.0)*x11312*x11316)));
evalcond[2]=(((r11*x11314))+(((-1.0)*r12*x11313))+(((-1.0)*x11310*x11316)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11313))+(((-1.0)*x11311*x11316))+((r01*x11314)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x11315))+(((-1.0)*x11312*x11313))+((r22*x11309)));
evalcond[5]=(((r11*x11315))+(((-1.0)*sj1*sj2))+((r12*x11309))+(((-1.0)*x11310*x11313))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11317=((-1.0)*r21);
CheckValue<IkReal> x11320 = IKatan2WithCheck(IkReal(x11317),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11320.valid){
continue;
}
IkReal x11318=((1.0)*(x11320.value));
IkReal x11319=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11318)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11318)));
IkReal gconst4=(x11317*x11319);
IkReal gconst5=((1.0)*r20*x11319);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11321=((-1.0)*r21);
CheckValue<IkReal> x11324 = IKatan2WithCheck(IkReal(x11321),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11324.valid){
continue;
}
IkReal x11322=((1.0)*(x11324.value));
IkReal x11323=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11322)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11322)));
IkReal gconst4=(x11321*x11323);
IkReal gconst5=((1.0)*r20*x11323);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11325=((-1.0)*r21);
CheckValue<IkReal> x11328 = IKatan2WithCheck(IkReal(x11325),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11328.valid){
continue;
}
IkReal x11326=((1.0)*(x11328.value));
IkReal x11327=x10119;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11326)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11326)));
IkReal gconst4=(x11325*x11327);
IkReal gconst5=((1.0)*r20*x11327);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11329=(gconst5*r00);
IkReal x11330=(gconst4*r01);
CheckValue<IkReal> x11331=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11329*x11330))+(x11330*x11330)+(r02*r02)+(x11329*x11329))),-1);
if(!x11331.valid){
continue;
}
CheckValue<IkReal> x11332 = IKatan2WithCheck(IkReal((x11329+(((-1.0)*x11330)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11331.value)))+(x11332.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11333=IKsin(j4);
IkReal x11334=IKcos(j4);
IkReal x11335=(gconst4*r11);
IkReal x11336=(gconst5*r10);
IkReal x11337=(gconst5*r00);
IkReal x11338=(gconst5*r20);
IkReal x11339=((1.0)*x11334);
IkReal x11340=(gconst4*x11333);
IkReal x11341=((1.0)*x11333);
evalcond[0]=((((-1.0)*r22*x11339))+(((-1.0)*x11338*x11341))+((r21*x11340)));
evalcond[1]=((((-1.0)*r12*x11339))+(((-1.0)*x11336*x11341))+((x11333*x11335)));
evalcond[2]=(((x11334*x11337))+(((-1.0)*gconst4*r01*x11339))+(((-1.0)*r02*x11341)));
evalcond[3]=((1.0)+(((-1.0)*x11337*x11341))+((r01*x11340))+(((-1.0)*r02*x11339)));
evalcond[4]=(((cj2*sj1))+((x11334*x11338))+((cj1*sj2))+(((-1.0)*r22*x11341))+(((-1.0)*gconst4*r21*x11339)));
evalcond[5]=(((x11334*x11336))+(((-1.0)*sj1*sj2))+(((-1.0)*x11335*x11339))+((cj1*cj2))+(((-1.0)*r12*x11341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11342=((1.0)*gconst5);
CheckValue<IkReal> x11343=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11342))+(((-1.0)*gconst4*r20)))),-1);
if(!x11343.valid){
continue;
}
CheckValue<IkReal> x11344 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11342))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11343.value)))+(x11344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11345=IKsin(j4);
IkReal x11346=IKcos(j4);
IkReal x11347=(gconst4*r11);
IkReal x11348=(gconst5*r10);
IkReal x11349=(gconst5*r00);
IkReal x11350=(gconst5*r20);
IkReal x11351=((1.0)*x11346);
IkReal x11352=(gconst4*x11345);
IkReal x11353=((1.0)*x11345);
evalcond[0]=((((-1.0)*x11350*x11353))+(((-1.0)*r22*x11351))+((r21*x11352)));
evalcond[1]=((((-1.0)*x11348*x11353))+(((-1.0)*r12*x11351))+((x11345*x11347)));
evalcond[2]=((((-1.0)*gconst4*r01*x11351))+(((-1.0)*r02*x11353))+((x11346*x11349)));
evalcond[3]=((1.0)+(((-1.0)*x11349*x11353))+((r01*x11352))+(((-1.0)*r02*x11351)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11351))+(((-1.0)*r22*x11353))+((x11346*x11350)));
evalcond[5]=((((-1.0)*r12*x11353))+(((-1.0)*sj1*sj2))+(((-1.0)*x11347*x11351))+((cj1*cj2))+((x11346*x11348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11354=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11354.valid){
continue;
}
CheckValue<IkReal> x11355 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11354.value)))+(x11355.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11356=IKsin(j4);
IkReal x11357=IKcos(j4);
IkReal x11358=(gconst4*r11);
IkReal x11359=(gconst5*r10);
IkReal x11360=(gconst5*r00);
IkReal x11361=(gconst5*r20);
IkReal x11362=((1.0)*x11357);
IkReal x11363=(gconst4*x11356);
IkReal x11364=((1.0)*x11356);
evalcond[0]=(((r21*x11363))+(((-1.0)*r22*x11362))+(((-1.0)*x11361*x11364)));
evalcond[1]=(((x11356*x11358))+(((-1.0)*x11359*x11364))+(((-1.0)*r12*x11362)));
evalcond[2]=((((-1.0)*gconst4*r01*x11362))+(((-1.0)*r02*x11364))+((x11357*x11360)));
evalcond[3]=((1.0)+((r01*x11363))+(((-1.0)*r02*x11362))+(((-1.0)*x11360*x11364)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11364))+((cj1*sj2))+((x11357*x11361))+(((-1.0)*gconst4*r21*x11362)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11358*x11362))+(((-1.0)*r12*x11364))+((cj1*cj2))+((x11357*x11359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11365=((-1.0)*r21);
IkReal x11366=((-1.0)*r20);
CheckValue<IkReal> x11368 = IKatan2WithCheck(IkReal(x11365),IkReal(x11366),IKFAST_ATAN2_MAGTHRESH);
if(!x11368.valid){
continue;
}
IkReal x11367=((1.0)*(x11368.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11367)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11366);
rxp0_2=(py*r00);
rxp1_0=(py*x11365);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11367)));
IkReal gconst4=x11365;
IkReal gconst5=((1.0)*r20);
IkReal x11369=((1.0)*r01*r21);
IkReal x11370=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11369))+(((-1.0)*x11370)));
j4eval[1]=((((-1.0)*cj3*x11370))+(((-1.0)*cj3*x11369)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11371=((-1.0)*r21);
IkReal x11372=((-1.0)*r20);
CheckValue<IkReal> x11374 = IKatan2WithCheck(IkReal(x11371),IkReal(x11372),IKFAST_ATAN2_MAGTHRESH);
if(!x11374.valid){
continue;
}
IkReal x11373=((1.0)*(x11374.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11373)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11372);
rxp0_2=(py*r00);
rxp1_0=(py*x11371);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11373)));
IkReal gconst4=x11371;
IkReal gconst5=((1.0)*r20);
IkReal x11375=((1.0)*r01*r21);
IkReal x11376=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11375))+(((-1.0)*x11376)));
j4eval[1]=(((sj3*x11375))+((sj3*x11376)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11377=((-1.0)*r21);
IkReal x11378=((-1.0)*r20);
CheckValue<IkReal> x11380 = IKatan2WithCheck(IkReal(x11377),IkReal(x11378),IKFAST_ATAN2_MAGTHRESH);
if(!x11380.valid){
continue;
}
IkReal x11379=((1.0)*(x11380.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11379)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11378);
rxp0_2=(py*r00);
rxp1_0=(py*x11377);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11379)));
IkReal gconst4=x11377;
IkReal gconst5=((1.0)*r20);
IkReal x11381=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r20*x11381))+(((-1.0)*r01*r21*x11381)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11382=((1.0)*gconst5);
CheckValue<IkReal> x11383=IKPowWithIntegerCheck(cj3,-1);
if(!x11383.valid){
continue;
}
CheckValue<IkReal> x11384=IKPowWithIntegerCheck(r12,-1);
if(!x11384.valid){
continue;
}
CheckValue<IkReal> x11385=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11382))+((cj3*gconst4*r01))),-1);
if(!x11385.valid){
continue;
}
if( IKabs(((x11383.value)*(x11384.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11385.value)*(((((-1.0)*r01*sj3*x11382))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11383.value)*(x11384.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11385.value)*(((((-1.0)*r01*sj3*x11382))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11383.value)*(x11384.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11385.value)*(((((-1.0)*r01*sj3*x11382))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11386=IKsin(j4);
IkReal x11387=IKcos(j4);
IkReal x11388=(cj2*sj1);
IkReal x11389=(cj1*sj2);
IkReal x11390=(sj1*sj2);
IkReal x11391=(gconst5*sj3);
IkReal x11392=(gconst5*r00);
IkReal x11393=(cj3*gconst5);
IkReal x11394=(gconst4*sj3);
IkReal x11395=(cj3*gconst4);
IkReal x11396=(cj1*cj2);
IkReal x11397=((1.0)*x11386);
IkReal x11398=(gconst4*x11386);
IkReal x11399=((1.0)*x11387);
IkReal x11400=(x11388+x11389);
IkReal x11401=(x11387*x11391);
IkReal x11402=(x11387*x11395);
evalcond[0]=((-1.0)*r12*x11387);
evalcond[1]=((((-1.0)*gconst5*r20*x11397))+((r21*x11398)));
evalcond[2]=(((cj3*r12*x11386))+x11396+(((-1.0)*x11390)));
evalcond[3]=(x11400+(((-1.0)*r12*sj3*x11397)));
evalcond[4]=((1.0)+(((-1.0)*x11392*x11397))+((r01*x11398)));
evalcond[5]=(((r00*x11394))+((r01*x11391))+((r01*x11402))+(((-1.0)*cj3*x11392*x11399)));
evalcond[6]=((((-1.0)*r01*x11394*x11399))+((r00*x11395))+((r01*x11393))+((r00*x11401)));
evalcond[7]=(((r21*x11402))+x11400+((r20*x11394))+(((-1.0)*r20*x11393*x11399))+((r21*x11391)));
evalcond[8]=(((r20*x11395))+x11390+(((-1.0)*r21*x11394*x11399))+(((-1.0)*x11396))+((r20*x11401))+((r21*x11393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11403=((1.0)*gconst4);
IkReal x11404=(gconst5*r00);
CheckValue<IkReal> x11405=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x11404))),-1);
if(!x11405.valid){
continue;
}
CheckValue<IkReal> x11406=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x11403))+((sj3*x11404))),-1);
if(!x11406.valid){
continue;
}
if( IKabs(((-1.0)*(x11405.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11406.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11403)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11405.value)))+IKsqr(((x11406.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11403))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11405.value)), ((x11406.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11403))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11407=IKsin(j4);
IkReal x11408=IKcos(j4);
IkReal x11409=(cj2*sj1);
IkReal x11410=(cj1*sj2);
IkReal x11411=(sj1*sj2);
IkReal x11412=(gconst5*sj3);
IkReal x11413=(gconst5*r00);
IkReal x11414=(cj3*gconst5);
IkReal x11415=(gconst4*sj3);
IkReal x11416=(cj3*gconst4);
IkReal x11417=(cj1*cj2);
IkReal x11418=((1.0)*x11407);
IkReal x11419=(gconst4*x11407);
IkReal x11420=((1.0)*x11408);
IkReal x11421=(x11410+x11409);
IkReal x11422=(x11408*x11412);
IkReal x11423=(x11408*x11416);
evalcond[0]=((-1.0)*r12*x11408);
evalcond[1]=((((-1.0)*gconst5*r20*x11418))+((r21*x11419)));
evalcond[2]=(x11417+(((-1.0)*x11411))+((cj3*r12*x11407)));
evalcond[3]=(x11421+(((-1.0)*r12*sj3*x11418)));
evalcond[4]=((1.0)+(((-1.0)*x11413*x11418))+((r01*x11419)));
evalcond[5]=(((r01*x11412))+((r00*x11415))+((r01*x11423))+(((-1.0)*cj3*x11413*x11420)));
evalcond[6]=(((r01*x11414))+((r00*x11416))+(((-1.0)*r01*x11415*x11420))+((r00*x11422)));
evalcond[7]=(x11421+((r21*x11412))+((r21*x11423))+((r20*x11415))+(((-1.0)*r20*x11414*x11420)));
evalcond[8]=((((-1.0)*r21*x11415*x11420))+((r20*x11422))+x11411+((r21*x11414))+(((-1.0)*x11417))+((r20*x11416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11424=((1.0)*gconst5);
IkReal x11425=(gconst4*r01);
CheckValue<IkReal> x11426=IKPowWithIntegerCheck((x11425+(((-1.0)*r00*x11424))),-1);
if(!x11426.valid){
continue;
}
CheckValue<IkReal> x11427=IKPowWithIntegerCheck((((cj3*x11425))+(((-1.0)*cj3*r00*x11424))),-1);
if(!x11427.valid){
continue;
}
if( IKabs(((-1.0)*(x11426.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11427.value)*(((((-1.0)*r01*sj3*x11424))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11426.value)))+IKsqr(((x11427.value)*(((((-1.0)*r01*sj3*x11424))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11426.value)), ((x11427.value)*(((((-1.0)*r01*sj3*x11424))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11428=IKsin(j4);
IkReal x11429=IKcos(j4);
IkReal x11430=(cj2*sj1);
IkReal x11431=(cj1*sj2);
IkReal x11432=(sj1*sj2);
IkReal x11433=(gconst5*sj3);
IkReal x11434=(gconst5*r00);
IkReal x11435=(cj3*gconst5);
IkReal x11436=(gconst4*sj3);
IkReal x11437=(cj3*gconst4);
IkReal x11438=(cj1*cj2);
IkReal x11439=((1.0)*x11428);
IkReal x11440=(gconst4*x11428);
IkReal x11441=((1.0)*x11429);
IkReal x11442=(x11430+x11431);
IkReal x11443=(x11429*x11433);
IkReal x11444=(x11429*x11437);
evalcond[0]=((-1.0)*r12*x11429);
evalcond[1]=((((-1.0)*gconst5*r20*x11439))+((r21*x11440)));
evalcond[2]=(x11438+((cj3*r12*x11428))+(((-1.0)*x11432)));
evalcond[3]=(x11442+(((-1.0)*r12*sj3*x11439)));
evalcond[4]=((1.0)+(((-1.0)*x11434*x11439))+((r01*x11440)));
evalcond[5]=((((-1.0)*cj3*x11434*x11441))+((r01*x11433))+((r00*x11436))+((r01*x11444)));
evalcond[6]=(((r00*x11443))+(((-1.0)*r01*x11436*x11441))+((r01*x11435))+((r00*x11437)));
evalcond[7]=(((r20*x11436))+x11442+(((-1.0)*r20*x11435*x11441))+((r21*x11433))+((r21*x11444)));
evalcond[8]=(((r20*x11437))+x11432+((r21*x11435))+(((-1.0)*x11438))+((r20*x11443))+(((-1.0)*r21*x11436*x11441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11445=gconst4*gconst4;
IkReal x11446=gconst5*gconst5;
IkReal x11447=(r01*r20);
IkReal x11448=(gconst4*sj3);
IkReal x11449=(r01*r21);
IkReal x11450=((1.0)*cj3);
IkReal x11451=(r00*r21);
IkReal x11452=(r00*r20);
IkReal x11453=(cj3*gconst4*gconst5);
IkReal x11454=((1.0)*x11446);
CheckValue<IkReal> x11455=IKPowWithIntegerCheck(IKsign((((x11447*x11453))+(((-1.0)*r02*r22*x11450))+(((-1.0)*x11445*x11449*x11450))+(((-1.0)*x11446*x11450*x11452))+((x11451*x11453)))),-1);
if(!x11455.valid){
continue;
}
CheckValue<IkReal> x11456 = IKatan2WithCheck(IkReal((((r00*r22*x11448))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*sj3*x11447*x11454))+((sj3*x11445*x11451))+(((-1.0)*gconst5*x11448*x11452))+((gconst5*x11448*x11449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11455.value)))+(x11456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11457=IKsin(j4);
IkReal x11458=IKcos(j4);
IkReal x11459=(cj2*sj1);
IkReal x11460=(cj1*sj2);
IkReal x11461=(gconst5*sj3);
IkReal x11462=(gconst4*r11);
IkReal x11463=(sj1*sj2);
IkReal x11464=(gconst5*r10);
IkReal x11465=(cj1*cj2);
IkReal x11466=(gconst4*r01);
IkReal x11467=(gconst5*r00);
IkReal x11468=(gconst4*sj3);
IkReal x11469=(cj3*gconst5);
IkReal x11470=(cj3*gconst4);
IkReal x11471=(gconst4*r21);
IkReal x11472=((1.0)*x11458);
IkReal x11473=((1.0)*x11457);
IkReal x11474=(cj3*x11457);
IkReal x11475=(cj3*x11458);
IkReal x11476=(x11459+x11460);
evalcond[0]=(((x11457*x11471))+(((-1.0)*gconst5*r20*x11473))+(((-1.0)*r22*x11472)));
evalcond[1]=(((x11457*x11462))+(((-1.0)*r12*x11472))+(((-1.0)*x11464*x11473)));
evalcond[2]=((1.0)+((x11457*x11466))+(((-1.0)*x11467*x11473))+(((-1.0)*r02*x11472)));
evalcond[3]=(((r01*x11461))+(((-1.0)*cj3*x11467*x11472))+((x11466*x11475))+((r02*x11474))+((r00*x11468)));
evalcond[4]=(((r00*x11470))+((r00*x11458*x11461))+((r01*x11469))+(((-1.0)*r02*sj3*x11473))+(((-1.0)*sj3*x11466*x11472)));
evalcond[5]=(x11476+(((-1.0)*r20*x11469*x11472))+((r22*x11474))+((r20*x11468))+((r21*x11458*x11470))+((r21*x11461)));
evalcond[6]=(((r12*x11474))+x11465+(((-1.0)*cj3*x11464*x11472))+((r11*x11461))+((r10*x11468))+((x11462*x11475))+(((-1.0)*x11463)));
evalcond[7]=(x11476+((r11*x11469))+((r10*x11458*x11461))+((r10*x11470))+(((-1.0)*r12*sj3*x11473))+(((-1.0)*sj3*x11462*x11472)));
evalcond[8]=((((-1.0)*r21*x11468*x11472))+x11463+((r20*x11458*x11461))+(((-1.0)*r22*sj3*x11473))+((r20*x11470))+((r21*x11469))+(((-1.0)*x11465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11477=((1.0)*gconst5);
CheckValue<IkReal> x11478 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11477)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11478.valid){
continue;
}
CheckValue<IkReal> x11479=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11477))+(((-1.0)*gconst4*r20)))),-1);
if(!x11479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11478.value)+(((1.5707963267949)*(x11479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11480=IKsin(j4);
IkReal x11481=IKcos(j4);
IkReal x11482=(cj2*sj1);
IkReal x11483=(cj1*sj2);
IkReal x11484=(gconst5*sj3);
IkReal x11485=(gconst4*r11);
IkReal x11486=(sj1*sj2);
IkReal x11487=(gconst5*r10);
IkReal x11488=(cj1*cj2);
IkReal x11489=(gconst4*r01);
IkReal x11490=(gconst5*r00);
IkReal x11491=(gconst4*sj3);
IkReal x11492=(cj3*gconst5);
IkReal x11493=(cj3*gconst4);
IkReal x11494=(gconst4*r21);
IkReal x11495=((1.0)*x11481);
IkReal x11496=((1.0)*x11480);
IkReal x11497=(cj3*x11480);
IkReal x11498=(cj3*x11481);
IkReal x11499=(x11483+x11482);
evalcond[0]=(((x11480*x11494))+(((-1.0)*gconst5*r20*x11496))+(((-1.0)*r22*x11495)));
evalcond[1]=(((x11480*x11485))+(((-1.0)*r12*x11495))+(((-1.0)*x11487*x11496)));
evalcond[2]=((1.0)+(((-1.0)*x11490*x11496))+((x11480*x11489))+(((-1.0)*r02*x11495)));
evalcond[3]=(((r00*x11491))+((r02*x11497))+((x11489*x11498))+(((-1.0)*cj3*x11490*x11495))+((r01*x11484)));
evalcond[4]=(((r00*x11493))+(((-1.0)*sj3*x11489*x11495))+((r00*x11481*x11484))+(((-1.0)*r02*sj3*x11496))+((r01*x11492)));
evalcond[5]=(((r22*x11497))+x11499+(((-1.0)*r20*x11492*x11495))+((r20*x11491))+((r21*x11481*x11493))+((r21*x11484)));
evalcond[6]=(x11488+(((-1.0)*x11486))+((r10*x11491))+((r12*x11497))+((x11485*x11498))+((r11*x11484))+(((-1.0)*cj3*x11487*x11495)));
evalcond[7]=(x11499+((r10*x11481*x11484))+((r11*x11492))+((r10*x11493))+(((-1.0)*r12*sj3*x11496))+(((-1.0)*sj3*x11485*x11495)));
evalcond[8]=(x11486+((r21*x11492))+(((-1.0)*r22*sj3*x11496))+(((-1.0)*x11488))+((r20*x11493))+((r20*x11481*x11484))+(((-1.0)*r21*x11491*x11495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11500=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11500.valid){
continue;
}
CheckValue<IkReal> x11501 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11500.value)))+(x11501.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11502=IKsin(j4);
IkReal x11503=IKcos(j4);
IkReal x11504=(cj2*sj1);
IkReal x11505=(cj1*sj2);
IkReal x11506=(gconst5*sj3);
IkReal x11507=(gconst4*r11);
IkReal x11508=(sj1*sj2);
IkReal x11509=(gconst5*r10);
IkReal x11510=(cj1*cj2);
IkReal x11511=(gconst4*r01);
IkReal x11512=(gconst5*r00);
IkReal x11513=(gconst4*sj3);
IkReal x11514=(cj3*gconst5);
IkReal x11515=(cj3*gconst4);
IkReal x11516=(gconst4*r21);
IkReal x11517=((1.0)*x11503);
IkReal x11518=((1.0)*x11502);
IkReal x11519=(cj3*x11502);
IkReal x11520=(cj3*x11503);
IkReal x11521=(x11504+x11505);
evalcond[0]=((((-1.0)*r22*x11517))+(((-1.0)*gconst5*r20*x11518))+((x11502*x11516)));
evalcond[1]=((((-1.0)*x11509*x11518))+((x11502*x11507))+(((-1.0)*r12*x11517)));
evalcond[2]=((1.0)+(((-1.0)*x11512*x11518))+(((-1.0)*r02*x11517))+((x11502*x11511)));
evalcond[3]=(((x11511*x11520))+((r01*x11506))+((r02*x11519))+(((-1.0)*cj3*x11512*x11517))+((r00*x11513)));
evalcond[4]=(((r01*x11514))+(((-1.0)*sj3*x11511*x11517))+((r00*x11503*x11506))+(((-1.0)*r02*sj3*x11518))+((r00*x11515)));
evalcond[5]=(x11521+((r20*x11513))+((r21*x11506))+((r22*x11519))+((r21*x11503*x11515))+(((-1.0)*r20*x11514*x11517)));
evalcond[6]=(((x11507*x11520))+x11510+((r11*x11506))+(((-1.0)*cj3*x11509*x11517))+(((-1.0)*x11508))+((r12*x11519))+((r10*x11513)));
evalcond[7]=((((-1.0)*sj3*x11507*x11517))+x11521+((r10*x11503*x11506))+(((-1.0)*r12*sj3*x11518))+((r10*x11515))+((r11*x11514)));
evalcond[8]=((((-1.0)*x11510))+x11508+((r20*x11515))+(((-1.0)*r21*x11513*x11517))+(((-1.0)*r22*sj3*x11518))+((r20*x11503*x11506))+((r21*x11514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11522=((-1.0)*r21);
IkReal x11523=((-1.0)*px);
CheckValue<IkReal> x11525 = IKatan2WithCheck(IkReal(x11522),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11525.valid){
continue;
}
IkReal x11524=((1.0)*(x11525.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11524)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11523);
rxp1_1=(px*r21);
rxp1_2=(r11*x11523);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11524)));
IkReal gconst4=x11522;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11526=((-1.0)*r21);
IkReal x11527=((-1.0)*px);
CheckValue<IkReal> x11529 = IKatan2WithCheck(IkReal(x11526),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11529.valid){
continue;
}
IkReal x11528=((1.0)*(x11529.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11528)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11527);
rxp1_1=(px*r21);
rxp1_2=(r11*x11527);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11528)));
IkReal gconst4=x11526;
IkReal gconst5=((1.0)*r20);
IkReal x11530=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=((((-1.0)*x11530*(r21*r21)))+((x11530*(r10*r10)))+(((-1.0)*x11530)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11531=((-1.0)*r21);
IkReal x11532=((-1.0)*px);
CheckValue<IkReal> x11534 = IKatan2WithCheck(IkReal(x11531),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11534.valid){
continue;
}
IkReal x11533=((1.0)*(x11534.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11533)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11532);
rxp1_1=(px*r21);
rxp1_2=(r11*x11532);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11533)));
IkReal gconst4=x11531;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11535=((-1.0)*r21);
IkReal x11536=((-1.0)*px);
CheckValue<IkReal> x11538 = IKatan2WithCheck(IkReal(x11535),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11538.valid){
continue;
}
IkReal x11537=((1.0)*(x11538.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11537)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11536);
rxp1_1=(px*r21);
rxp1_2=(r11*x11536);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11537)));
IkReal gconst4=x11535;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11539=((-1.0)*r21);
IkReal x11540=((-1.0)*px);
CheckValue<IkReal> x11542 = IKatan2WithCheck(IkReal(x11539),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11542.valid){
continue;
}
IkReal x11541=((1.0)*(x11542.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11541)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11540);
rxp1_1=(px*r21);
rxp1_2=(r11*x11540);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11541)));
IkReal gconst4=x11539;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11543=((-1.0)*r21);
IkReal x11544=((-1.0)*px);
CheckValue<IkReal> x11546 = IKatan2WithCheck(IkReal(x11543),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11546.valid){
continue;
}
IkReal x11545=((1.0)*(x11546.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11545)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11544);
rxp1_1=(px*r21);
rxp1_2=(r11*x11544);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11545)));
IkReal gconst4=x11543;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11549=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11549.valid){
continue;
}
IkReal x11547=x11549.value;
IkReal x11548=(sj0*x11547);
cj4array[0]=(((cj1*sj2*x11548))+((cj2*sj1*x11548)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11550=IKsin(j4);
IkReal x11551=IKcos(j4);
IkReal x11552=(gconst5*r20);
IkReal x11553=(gconst4*x11550);
IkReal x11554=((1.0)*x11551);
IkReal x11555=((1.0)*x11550);
evalcond[0]=((-1.0)*r02*x11550);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11554)));
evalcond[2]=(((r21*x11553))+(((-1.0)*x11552*x11555)));
evalcond[3]=(((r11*x11553))+(((-1.0)*gconst5*r10*x11555)));
evalcond[4]=(((x11551*x11552))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x11554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11557=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11557.valid){
continue;
}
IkReal x11556=x11557.value;
cj4array[0]=(((cj1*cj2*x11556))+(((-1.0)*sj1*sj2*x11556)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11558=IKsin(j4);
IkReal x11559=IKcos(j4);
IkReal x11560=(gconst5*r10);
IkReal x11561=((1.0)*sj0);
IkReal x11562=(gconst4*x11558);
IkReal x11563=((1.0)*x11559);
IkReal x11564=((1.0)*x11558);
evalcond[0]=((-1.0)*r02*x11558);
evalcond[1]=((((-1.0)*x11561))+(((-1.0)*r02*x11563)));
evalcond[2]=((((-1.0)*gconst5*r20*x11564))+((r21*x11562)));
evalcond[3]=(((r11*x11562))+(((-1.0)*x11560*x11564)));
evalcond[4]=((((-1.0)*cj2*sj1*x11561))+(((-1.0)*cj1*sj2*x11561))+(((-1.0)*gconst4*r11*x11563))+((x11559*x11560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11565=IKPowWithIntegerCheck(r02,-1);
if(!x11565.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11565.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11566=IKsin(j4);
IkReal x11567=IKcos(j4);
IkReal x11568=((1.0)*sj0);
IkReal x11569=(gconst5*x11567);
IkReal x11570=(gconst4*x11566);
IkReal x11571=((1.0)*gconst4*x11567);
IkReal x11572=((1.0)*gconst5*x11566);
evalcond[0]=((-1.0)*r02*x11566);
evalcond[1]=(((r21*x11570))+(((-1.0)*r20*x11572)));
evalcond[2]=((((-1.0)*r10*x11572))+((r11*x11570)));
evalcond[3]=(((r20*x11569))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11571)));
evalcond[4]=(((r10*x11569))+(((-1.0)*cj2*sj1*x11568))+(((-1.0)*cj1*sj2*x11568))+(((-1.0)*r11*x11571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11573=((-1.0)*r21);
IkReal x11574=((-1.0)*px);
CheckValue<IkReal> x11576 = IKatan2WithCheck(IkReal(x11573),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11576.valid){
continue;
}
IkReal x11575=((1.0)*(x11576.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11575)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11574);
rxp1_1=(px*r21);
rxp1_2=(r11*x11574);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11575)));
IkReal gconst4=x11573;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11577=((-1.0)*r21);
IkReal x11578=((-1.0)*px);
CheckValue<IkReal> x11580 = IKatan2WithCheck(IkReal(x11577),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11580.valid){
continue;
}
IkReal x11579=((1.0)*(x11580.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11579)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11578);
rxp1_1=(px*r21);
rxp1_2=(r11*x11578);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11579)));
IkReal gconst4=x11577;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11581=((-1.0)*r21);
IkReal x11582=((-1.0)*px);
CheckValue<IkReal> x11584 = IKatan2WithCheck(IkReal(x11581),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11584.valid){
continue;
}
IkReal x11583=((1.0)*(x11584.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11583)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11582);
rxp1_1=(px*r21);
rxp1_2=(r11*x11582);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11583)));
IkReal gconst4=x11581;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11587=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11587.valid){
continue;
}
IkReal x11585=x11587.value;
IkReal x11586=(sj0*x11585);
cj4array[0]=(((cj2*sj1*x11586))+((cj1*sj2*x11586)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11588=IKsin(j4);
IkReal x11589=IKcos(j4);
IkReal x11590=(gconst5*r20);
IkReal x11591=(gconst4*x11588);
IkReal x11592=((1.0)*x11589);
IkReal x11593=((1.0)*x11588);
evalcond[0]=(r02*x11588);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11592)));
evalcond[2]=((((-1.0)*x11590*x11593))+((r21*x11591)));
evalcond[3]=((((-1.0)*gconst5*r10*x11593))+((r11*x11591)));
evalcond[4]=((((-1.0)*x11590*x11592))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst4*r21*x11589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11595=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11595.valid){
continue;
}
IkReal x11594=x11595.value;
cj4array[0]=(((cj1*cj2*x11594))+(((-1.0)*sj1*sj2*x11594)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11596=IKsin(j4);
IkReal x11597=IKcos(j4);
IkReal x11598=(gconst4*r11);
IkReal x11599=((1.0)*sj0);
IkReal x11600=(gconst5*r10);
IkReal x11601=((1.0)*x11597);
IkReal x11602=((1.0)*x11596);
evalcond[0]=(r02*x11596);
evalcond[1]=((((-1.0)*r02*x11601))+(((-1.0)*x11599)));
evalcond[2]=(((gconst4*r21*x11596))+(((-1.0)*gconst5*r20*x11602)));
evalcond[3]=(((x11596*x11598))+(((-1.0)*x11600*x11602)));
evalcond[4]=((((-1.0)*cj2*sj1*x11599))+(((-1.0)*cj1*sj2*x11599))+(((-1.0)*x11600*x11601))+((x11597*x11598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11603=IKPowWithIntegerCheck(r02,-1);
if(!x11603.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11603.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11604=IKsin(j4);
IkReal x11605=IKcos(j4);
IkReal x11606=(gconst4*r11);
IkReal x11607=((1.0)*cj1);
IkReal x11608=(gconst4*r21);
IkReal x11609=((1.0)*gconst5*x11605);
IkReal x11610=((1.0)*gconst5*x11604);
evalcond[0]=(r02*x11604);
evalcond[1]=((((-1.0)*r20*x11610))+((x11604*x11608)));
evalcond[2]=((((-1.0)*r10*x11610))+((x11604*x11606)));
evalcond[3]=((((-1.0)*r20*x11609))+((sj1*sj2))+((x11605*x11608))+(((-1.0)*cj2*x11607)));
evalcond[4]=((((-1.0)*sj0*sj2*x11607))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x11609))+((x11605*x11606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11612=IKPowWithIntegerCheck(r02,-1);
if(!x11612.valid){
continue;
}
IkReal x11611=x11612.value;
CheckValue<IkReal> x11613=IKPowWithIntegerCheck(cj3,-1);
if(!x11613.valid){
continue;
}
if( IKabs((x11611*(x11613.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11611)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11611*(x11613.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11611))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11611*(x11613.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11611));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11614=IKsin(j4);
IkReal x11615=IKcos(j4);
IkReal x11616=(gconst5*sj3);
IkReal x11617=(gconst4*r11);
IkReal x11618=(sj1*sj2);
IkReal x11619=((1.0)*gconst5);
IkReal x11620=(cj2*sj1);
IkReal x11621=((1.0)*sj0);
IkReal x11622=((1.0)*cj0);
IkReal x11623=(gconst4*r21);
IkReal x11624=(cj1*sj2);
IkReal x11625=(cj3*gconst4);
IkReal x11626=(gconst4*sj3);
IkReal x11627=(cj3*gconst5);
IkReal x11628=(r20*x11615);
IkReal x11629=((1.0)*cj1*cj2);
IkReal x11630=(r10*x11615);
IkReal x11631=(cj3*x11615);
IkReal x11632=(r02*x11614);
IkReal x11633=((1.0)*sj3*x11615);
evalcond[0]=((((-1.0)*x11621))+(((-1.0)*r02*x11615)));
evalcond[1]=(((x11614*x11623))+(((-1.0)*r20*x11614*x11619)));
evalcond[2]=(cj0+((x11614*x11617))+(((-1.0)*r10*x11614*x11619)));
evalcond[3]=((((-1.0)*cj1*cj2*x11622))+((cj3*x11632))+((cj0*x11618)));
evalcond[4]=((((-1.0)*sj3*x11632))+(((-1.0)*x11620*x11622))+(((-1.0)*x11622*x11624)));
evalcond[5]=(x11620+x11624+(((-1.0)*cj3*x11619*x11628))+((x11623*x11631))+((r21*x11616))+((r20*x11626)));
evalcond[6]=(x11618+(((-1.0)*x11629))+((r21*x11627))+((x11616*x11628))+(((-1.0)*x11623*x11633))+((r20*x11625)));
evalcond[7]=((((-1.0)*cj1*cj2*x11621))+((x11617*x11631))+((r11*x11616))+((sj0*x11618))+(((-1.0)*cj3*x11619*x11630))+((r10*x11626)));
evalcond[8]=(((r11*x11627))+((x11616*x11630))+(((-1.0)*x11620*x11621))+(((-1.0)*x11621*x11624))+(((-1.0)*x11617*x11633))+((r10*x11625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11634=((1.0)*gconst5);
CheckValue<IkReal> x11635=IKPowWithIntegerCheck(((((-1.0)*r10*x11634))+((gconst4*r11))),-1);
if(!x11635.valid){
continue;
}
CheckValue<IkReal> x11636=IKPowWithIntegerCheck((((cj3*gconst4*r21))+(((-1.0)*cj3*r20*x11634))),-1);
if(!x11636.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11635.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11636.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11634))+(((-1.0)*gconst4*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11635.value)))+IKsqr(((x11636.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11634))+(((-1.0)*gconst4*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11635.value)), ((x11636.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11634))+(((-1.0)*gconst4*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11637=IKsin(j4);
IkReal x11638=IKcos(j4);
IkReal x11639=(gconst5*sj3);
IkReal x11640=(gconst4*r11);
IkReal x11641=(sj1*sj2);
IkReal x11642=((1.0)*gconst5);
IkReal x11643=(cj2*sj1);
IkReal x11644=((1.0)*sj0);
IkReal x11645=((1.0)*cj0);
IkReal x11646=(gconst4*r21);
IkReal x11647=(cj1*sj2);
IkReal x11648=(cj3*gconst4);
IkReal x11649=(gconst4*sj3);
IkReal x11650=(cj3*gconst5);
IkReal x11651=(r20*x11638);
IkReal x11652=((1.0)*cj1*cj2);
IkReal x11653=(r10*x11638);
IkReal x11654=(cj3*x11638);
IkReal x11655=(r02*x11637);
IkReal x11656=((1.0)*sj3*x11638);
evalcond[0]=((((-1.0)*r02*x11638))+(((-1.0)*x11644)));
evalcond[1]=(((x11637*x11646))+(((-1.0)*r20*x11637*x11642)));
evalcond[2]=(((x11637*x11640))+cj0+(((-1.0)*r10*x11637*x11642)));
evalcond[3]=((((-1.0)*cj1*cj2*x11645))+((cj3*x11655))+((cj0*x11641)));
evalcond[4]=((((-1.0)*sj3*x11655))+(((-1.0)*x11643*x11645))+(((-1.0)*x11645*x11647)));
evalcond[5]=(x11643+x11647+((x11646*x11654))+((r21*x11639))+((r20*x11649))+(((-1.0)*cj3*x11642*x11651)));
evalcond[6]=((((-1.0)*x11652))+(((-1.0)*x11646*x11656))+x11641+((r21*x11650))+((r20*x11648))+((x11639*x11651)));
evalcond[7]=(((r11*x11639))+((x11640*x11654))+(((-1.0)*cj1*cj2*x11644))+((r10*x11649))+((sj0*x11641))+(((-1.0)*cj3*x11642*x11653)));
evalcond[8]=((((-1.0)*x11640*x11656))+((r11*x11650))+((r10*x11648))+(((-1.0)*x11643*x11644))+((x11639*x11653))+(((-1.0)*x11644*x11647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11657=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11657.valid){
continue;
}
CheckValue<IkReal> x11658=IKPowWithIntegerCheck(r02,-1);
if(!x11658.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11657.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11658.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11657.value)))+IKsqr(((-1.0)*sj0*(x11658.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11657.value)), ((-1.0)*sj0*(x11658.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11659=IKsin(j4);
IkReal x11660=IKcos(j4);
IkReal x11661=(gconst5*sj3);
IkReal x11662=(gconst4*r11);
IkReal x11663=(sj1*sj2);
IkReal x11664=((1.0)*gconst5);
IkReal x11665=(cj2*sj1);
IkReal x11666=((1.0)*sj0);
IkReal x11667=((1.0)*cj0);
IkReal x11668=(gconst4*r21);
IkReal x11669=(cj1*sj2);
IkReal x11670=(cj3*gconst4);
IkReal x11671=(gconst4*sj3);
IkReal x11672=(cj3*gconst5);
IkReal x11673=(r20*x11660);
IkReal x11674=((1.0)*cj1*cj2);
IkReal x11675=(r10*x11660);
IkReal x11676=(cj3*x11660);
IkReal x11677=(r02*x11659);
IkReal x11678=((1.0)*sj3*x11660);
evalcond[0]=((((-1.0)*r02*x11660))+(((-1.0)*x11666)));
evalcond[1]=(((x11659*x11668))+(((-1.0)*r20*x11659*x11664)));
evalcond[2]=(cj0+((x11659*x11662))+(((-1.0)*r10*x11659*x11664)));
evalcond[3]=(((cj0*x11663))+((cj3*x11677))+(((-1.0)*cj1*cj2*x11667)));
evalcond[4]=((((-1.0)*sj3*x11677))+(((-1.0)*x11667*x11669))+(((-1.0)*x11665*x11667)));
evalcond[5]=(((r21*x11661))+x11665+x11669+((x11668*x11676))+(((-1.0)*cj3*x11664*x11673))+((r20*x11671)));
evalcond[6]=(x11663+(((-1.0)*x11668*x11678))+((x11661*x11673))+((r20*x11670))+((r21*x11672))+(((-1.0)*x11674)));
evalcond[7]=((((-1.0)*cj3*x11664*x11675))+((r11*x11661))+((x11662*x11676))+((r10*x11671))+(((-1.0)*cj1*cj2*x11666))+((sj0*x11663)));
evalcond[8]=((((-1.0)*x11666*x11669))+((r11*x11672))+(((-1.0)*x11662*x11678))+((x11661*x11675))+(((-1.0)*x11665*x11666))+((r10*x11670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11679=((1.0)*sj0);
IkReal x11680=((1.0)*gconst4);
CheckValue<IkReal> x11681 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11679)))),IkReal(((((-1.0)*cj0*r01*x11680))+((cj0*gconst5*r00))+(((-1.0)*gconst4*r11*x11679))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11681.valid){
continue;
}
CheckValue<IkReal> x11682=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11680))+(((-1.0)*gconst5*r21)))),-1);
if(!x11682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11681.value)+(((1.5707963267949)*(x11682.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11683=IKsin(j4);
IkReal x11684=IKcos(j4);
IkReal x11685=(gconst5*sj3);
IkReal x11686=(cj3*gconst5);
IkReal x11687=(gconst4*r11);
IkReal x11688=(sj1*sj2);
IkReal x11689=(cj2*sj1);
IkReal x11690=((1.0)*sj0);
IkReal x11691=(gconst4*r01);
IkReal x11692=(gconst4*r21);
IkReal x11693=((1.0)*cj0);
IkReal x11694=(cj1*sj2);
IkReal x11695=(gconst4*sj3);
IkReal x11696=(cj3*gconst4);
IkReal x11697=((1.0)*x11684);
IkReal x11698=((1.0)*cj1*cj2);
IkReal x11699=(cj3*x11683);
IkReal x11700=(cj3*x11684);
IkReal x11701=((1.0)*gconst5*x11683);
IkReal x11702=((1.0)*sj3*x11683);
evalcond[0]=((((-1.0)*r22*x11697))+(((-1.0)*r20*x11701))+((x11683*x11692)));
evalcond[1]=(((x11683*x11687))+cj0+(((-1.0)*r12*x11697))+(((-1.0)*r10*x11701)));
evalcond[2]=(((x11683*x11691))+(((-1.0)*r02*x11697))+(((-1.0)*x11690))+(((-1.0)*r00*x11701)));
evalcond[3]=(x11689+x11694+((x11692*x11700))+(((-1.0)*r20*x11686*x11697))+((r20*x11695))+((r21*x11685))+((r22*x11699)));
evalcond[4]=(x11688+(((-1.0)*r22*x11702))+((r20*x11684*x11685))+(((-1.0)*sj3*x11692*x11697))+((r20*x11696))+((r21*x11686))+(((-1.0)*x11698)));
evalcond[5]=(((x11691*x11700))+(((-1.0)*r00*x11686*x11697))+((r00*x11695))+((cj0*x11688))+(((-1.0)*cj1*cj2*x11693))+((r02*x11699))+((r01*x11685)));
evalcond[6]=(((sj0*x11688))+((r11*x11685))+(((-1.0)*r10*x11686*x11697))+((r12*x11699))+((r10*x11695))+((x11687*x11700))+(((-1.0)*cj1*cj2*x11690)));
evalcond[7]=((((-1.0)*x11689*x11693))+((r00*x11696))+(((-1.0)*sj3*x11691*x11697))+((r00*x11684*x11685))+(((-1.0)*x11693*x11694))+((r01*x11686))+(((-1.0)*r02*x11702)));
evalcond[8]=((((-1.0)*x11690*x11694))+(((-1.0)*x11689*x11690))+(((-1.0)*sj3*x11687*x11697))+((r11*x11686))+((r10*x11696))+((r10*x11684*x11685))+(((-1.0)*r12*x11702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11703=((1.0)*gconst5);
CheckValue<IkReal> x11704 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11703))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11704.valid){
continue;
}
CheckValue<IkReal> x11705=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11703))+(((-1.0)*gconst4*r10)))),-1);
if(!x11705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11704.value)+(((1.5707963267949)*(x11705.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11706=IKsin(j4);
IkReal x11707=IKcos(j4);
IkReal x11708=(gconst5*sj3);
IkReal x11709=(cj3*gconst5);
IkReal x11710=(gconst4*r11);
IkReal x11711=(sj1*sj2);
IkReal x11712=(cj2*sj1);
IkReal x11713=((1.0)*sj0);
IkReal x11714=(gconst4*r01);
IkReal x11715=(gconst4*r21);
IkReal x11716=((1.0)*cj0);
IkReal x11717=(cj1*sj2);
IkReal x11718=(gconst4*sj3);
IkReal x11719=(cj3*gconst4);
IkReal x11720=((1.0)*x11707);
IkReal x11721=((1.0)*cj1*cj2);
IkReal x11722=(cj3*x11706);
IkReal x11723=(cj3*x11707);
IkReal x11724=((1.0)*gconst5*x11706);
IkReal x11725=((1.0)*sj3*x11706);
evalcond[0]=((((-1.0)*r20*x11724))+(((-1.0)*r22*x11720))+((x11706*x11715)));
evalcond[1]=(cj0+(((-1.0)*r12*x11720))+(((-1.0)*r10*x11724))+((x11706*x11710)));
evalcond[2]=((((-1.0)*x11713))+(((-1.0)*r00*x11724))+((x11706*x11714))+(((-1.0)*r02*x11720)));
evalcond[3]=(x11712+x11717+(((-1.0)*r20*x11709*x11720))+((r21*x11708))+((r20*x11718))+((r22*x11722))+((x11715*x11723)));
evalcond[4]=(x11711+(((-1.0)*x11721))+((r21*x11709))+((r20*x11719))+((r20*x11707*x11708))+(((-1.0)*r22*x11725))+(((-1.0)*sj3*x11715*x11720)));
evalcond[5]=(((r00*x11718))+((r01*x11708))+((cj0*x11711))+((r02*x11722))+(((-1.0)*cj1*cj2*x11716))+(((-1.0)*r00*x11709*x11720))+((x11714*x11723)));
evalcond[6]=(((r12*x11722))+(((-1.0)*r10*x11709*x11720))+((sj0*x11711))+(((-1.0)*cj1*cj2*x11713))+((r10*x11718))+((r11*x11708))+((x11710*x11723)));
evalcond[7]=(((r00*x11719))+((r01*x11709))+(((-1.0)*x11712*x11716))+(((-1.0)*sj3*x11714*x11720))+((r00*x11707*x11708))+(((-1.0)*x11716*x11717))+(((-1.0)*r02*x11725)));
evalcond[8]=((((-1.0)*r12*x11725))+(((-1.0)*sj3*x11710*x11720))+(((-1.0)*x11712*x11713))+(((-1.0)*x11713*x11717))+((r10*x11719))+((r11*x11709))+((r10*x11707*x11708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11726=((1.0)*gconst5);
CheckValue<IkReal> x11727 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11726))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11727.valid){
continue;
}
CheckValue<IkReal> x11728=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11726)))),-1);
if(!x11728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11727.value)+(((1.5707963267949)*(x11728.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11729=IKsin(j4);
IkReal x11730=IKcos(j4);
IkReal x11731=(gconst5*sj3);
IkReal x11732=(cj3*gconst5);
IkReal x11733=(gconst4*r11);
IkReal x11734=(sj1*sj2);
IkReal x11735=(cj2*sj1);
IkReal x11736=((1.0)*sj0);
IkReal x11737=(gconst4*r01);
IkReal x11738=(gconst4*r21);
IkReal x11739=((1.0)*cj0);
IkReal x11740=(cj1*sj2);
IkReal x11741=(gconst4*sj3);
IkReal x11742=(cj3*gconst4);
IkReal x11743=((1.0)*x11730);
IkReal x11744=((1.0)*cj1*cj2);
IkReal x11745=(cj3*x11729);
IkReal x11746=(cj3*x11730);
IkReal x11747=((1.0)*gconst5*x11729);
IkReal x11748=((1.0)*sj3*x11729);
evalcond[0]=((((-1.0)*r20*x11747))+((x11729*x11738))+(((-1.0)*r22*x11743)));
evalcond[1]=(cj0+((x11729*x11733))+(((-1.0)*r10*x11747))+(((-1.0)*r12*x11743)));
evalcond[2]=((((-1.0)*r00*x11747))+(((-1.0)*x11736))+((x11729*x11737))+(((-1.0)*r02*x11743)));
evalcond[3]=(x11740+x11735+(((-1.0)*r20*x11732*x11743))+((r20*x11741))+((r21*x11731))+((r22*x11745))+((x11738*x11746)));
evalcond[4]=(x11734+(((-1.0)*sj3*x11738*x11743))+(((-1.0)*x11744))+(((-1.0)*r22*x11748))+((r20*x11742))+((r21*x11732))+((r20*x11730*x11731)));
evalcond[5]=(((r01*x11731))+((r00*x11741))+(((-1.0)*r00*x11732*x11743))+((cj0*x11734))+((x11737*x11746))+(((-1.0)*cj1*cj2*x11739))+((r02*x11745)));
evalcond[6]=(((r11*x11731))+((sj0*x11734))+(((-1.0)*r10*x11732*x11743))+((x11733*x11746))+(((-1.0)*cj1*cj2*x11736))+((r10*x11741))+((r12*x11745)));
evalcond[7]=(((r01*x11732))+(((-1.0)*x11739*x11740))+((r00*x11742))+((r00*x11730*x11731))+(((-1.0)*sj3*x11737*x11743))+(((-1.0)*r02*x11748))+(((-1.0)*x11735*x11739)));
evalcond[8]=(((r11*x11732))+((r10*x11730*x11731))+((r10*x11742))+(((-1.0)*r12*x11748))+(((-1.0)*x11736*x11740))+(((-1.0)*x11735*x11736))+(((-1.0)*sj3*x11733*x11743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11749=((-1.0)*r10);
IkReal x11751 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11751)==0){
continue;
}
IkReal x11750=pow(x11751,-0.5);
CheckValue<IkReal> x11752 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11749),IKFAST_ATAN2_MAGTHRESH);
if(!x11752.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11752.value));
IkReal gconst7=(r11*x11750);
IkReal gconst8=(x11749*x11750);
CheckValue<IkReal> x11753 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11753.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11753.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11754=((-1.0)*r10);
IkReal x11755=x11750;
CheckValue<IkReal> x11757 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11754),IKFAST_ATAN2_MAGTHRESH);
if(!x11757.valid){
continue;
}
IkReal x11756=((-1.0)*(x11757.value));
sj5=gconst7;
cj5=gconst8;
j5=x11756;
IkReal gconst6=x11756;
IkReal gconst7=(r11*x11755);
IkReal gconst8=(x11754*x11755);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11758=((1.0)*sj0);
IkReal x11759=((1.0)*gconst7);
CheckValue<IkReal> x11760 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11758))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst7*r11*x11758))+((gconst8*r10*sj0))+(((-1.0)*cj0*r01*x11759))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11760.valid){
continue;
}
CheckValue<IkReal> x11761=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*r21))+(((-1.0)*r20*x11759)))),-1);
if(!x11761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11760.value)+(((1.5707963267949)*(x11761.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11762=IKsin(j4);
IkReal x11763=IKcos(j4);
IkReal x11764=(gconst7*sj3);
IkReal x11765=(cj3*gconst8);
IkReal x11766=(cj3*gconst7);
IkReal x11767=(sj1*sj2);
IkReal x11768=(cj2*sj1);
IkReal x11769=((1.0)*sj0);
IkReal x11770=((1.0)*cj0);
IkReal x11771=(gconst8*sj3);
IkReal x11772=(cj1*sj2);
IkReal x11773=((1.0)*x11763);
IkReal x11774=((1.0)*x11762);
IkReal x11775=((1.0)*cj1*cj2);
IkReal x11776=(cj3*x11762);
IkReal x11777=(gconst7*x11762);
IkReal x11778=(x11763*x11771);
evalcond[0]=((((-1.0)*gconst8*r20*x11774))+(((-1.0)*r22*x11773))+((r21*x11777)));
evalcond[1]=(cj0+(((-1.0)*r12*x11773))+((r11*x11777))+(((-1.0)*gconst8*r10*x11774)));
evalcond[2]=((((-1.0)*r02*x11773))+((r01*x11777))+(((-1.0)*x11769))+(((-1.0)*gconst8*r00*x11774)));
evalcond[3]=((((-1.0)*r20*x11765*x11773))+((r21*x11763*x11766))+x11772+x11768+((r20*x11764))+((r21*x11771))+((r22*x11776)));
evalcond[4]=(x11767+((r20*x11766))+((r20*x11778))+(((-1.0)*r22*sj3*x11774))+(((-1.0)*r21*x11764*x11773))+(((-1.0)*x11775))+((r21*x11765)));
evalcond[5]=(((cj0*x11767))+(((-1.0)*r00*x11765*x11773))+((r02*x11776))+((r01*x11763*x11766))+((r01*x11771))+((r00*x11764))+(((-1.0)*cj1*cj2*x11770)));
evalcond[6]=((((-1.0)*cj1*cj2*x11769))+((r11*x11763*x11766))+((r12*x11776))+((r10*x11764))+((r11*x11771))+((sj0*x11767))+(((-1.0)*r10*x11765*x11773)));
evalcond[7]=((((-1.0)*x11768*x11770))+(((-1.0)*r02*sj3*x11774))+(((-1.0)*x11770*x11772))+(((-1.0)*r01*x11764*x11773))+((r00*x11778))+((r00*x11766))+((r01*x11765)));
evalcond[8]=((((-1.0)*x11768*x11769))+((r11*x11765))+((r10*x11778))+((r10*x11766))+(((-1.0)*r11*x11764*x11773))+(((-1.0)*r12*sj3*x11774))+(((-1.0)*x11769*x11772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11779=((1.0)*gconst8);
CheckValue<IkReal> x11780=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11779)))),-1);
if(!x11780.valid){
continue;
}
CheckValue<IkReal> x11781 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11779)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11780.value)))+(x11781.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11782=IKsin(j4);
IkReal x11783=IKcos(j4);
IkReal x11784=(gconst7*sj3);
IkReal x11785=(cj3*gconst8);
IkReal x11786=(cj3*gconst7);
IkReal x11787=(sj1*sj2);
IkReal x11788=(cj2*sj1);
IkReal x11789=((1.0)*sj0);
IkReal x11790=((1.0)*cj0);
IkReal x11791=(gconst8*sj3);
IkReal x11792=(cj1*sj2);
IkReal x11793=((1.0)*x11783);
IkReal x11794=((1.0)*x11782);
IkReal x11795=((1.0)*cj1*cj2);
IkReal x11796=(cj3*x11782);
IkReal x11797=(gconst7*x11782);
IkReal x11798=(x11783*x11791);
evalcond[0]=((((-1.0)*gconst8*r20*x11794))+(((-1.0)*r22*x11793))+((r21*x11797)));
evalcond[1]=(cj0+((r11*x11797))+(((-1.0)*gconst8*r10*x11794))+(((-1.0)*r12*x11793)));
evalcond[2]=((((-1.0)*gconst8*r00*x11794))+(((-1.0)*r02*x11793))+((r01*x11797))+(((-1.0)*x11789)));
evalcond[3]=(x11792+x11788+(((-1.0)*r20*x11785*x11793))+((r20*x11784))+((r22*x11796))+((r21*x11791))+((r21*x11783*x11786)));
evalcond[4]=(((r21*x11785))+x11787+((r20*x11786))+((r20*x11798))+(((-1.0)*r22*sj3*x11794))+(((-1.0)*r21*x11784*x11793))+(((-1.0)*x11795)));
evalcond[5]=((((-1.0)*cj1*cj2*x11790))+((cj0*x11787))+((r01*x11783*x11786))+((r02*x11796))+(((-1.0)*r00*x11785*x11793))+((r01*x11791))+((r00*x11784)));
evalcond[6]=(((r12*x11796))+((r11*x11791))+(((-1.0)*cj1*cj2*x11789))+((r10*x11784))+((r11*x11783*x11786))+((sj0*x11787))+(((-1.0)*r10*x11785*x11793)));
evalcond[7]=((((-1.0)*r02*sj3*x11794))+(((-1.0)*r01*x11784*x11793))+(((-1.0)*x11788*x11790))+((r00*x11798))+((r00*x11786))+((r01*x11785))+(((-1.0)*x11790*x11792)));
evalcond[8]=((((-1.0)*r11*x11784*x11793))+((r11*x11785))+((r10*x11798))+((r10*x11786))+(((-1.0)*x11788*x11789))+(((-1.0)*x11789*x11792))+(((-1.0)*r12*sj3*x11794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11799=((-1.0)*r11);
IkReal x11801 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11801)==0){
continue;
}
IkReal x11800=pow(x11801,-0.5);
CheckValue<IkReal> x11802 = IKatan2WithCheck(IkReal(x11799),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11802.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11802.value))));
IkReal gconst10=(x11799*x11800);
IkReal gconst11=((1.0)*r10*x11800);
CheckValue<IkReal> x11803 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11803.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11803.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11804=((-1.0)*r11);
CheckValue<IkReal> x11807 = IKatan2WithCheck(IkReal(x11804),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11807.valid){
continue;
}
IkReal x11805=((1.0)*(x11807.value));
IkReal x11806=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11805)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11805)));
IkReal gconst10=(x11804*x11806);
IkReal gconst11=((1.0)*r10*x11806);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11808=((-1.0)*r11);
CheckValue<IkReal> x11811 = IKatan2WithCheck(IkReal(x11808),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11811.valid){
continue;
}
IkReal x11809=((1.0)*(x11811.value));
IkReal x11810=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11809)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11809)));
IkReal gconst10=(x11808*x11810);
IkReal gconst11=((1.0)*r10*x11810);
IkReal x11812=r12*r12;
IkReal x11813=((1.0)*sj0);
IkReal x11814=(cj0*r02);
IkReal x11815=x11800;
j4eval[0]=((IKabs(((((-1.0)*x11813*x11815))+((sj0*x11812*x11815))+((r12*x11814*x11815)))))+(IKabs(((((-1.0)*x11814))+(((-1.0)*r12*x11813))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11816=((-1.0)*r11);
CheckValue<IkReal> x11819 = IKatan2WithCheck(IkReal(x11816),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11819.valid){
continue;
}
IkReal x11817=((1.0)*(x11819.value));
IkReal x11818=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11817)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11817)));
IkReal gconst10=(x11816*x11818);
IkReal gconst11=((1.0)*r10*x11818);
IkReal x11820=((1.0)*cj3);
CheckValue<IkReal> x11825=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11825.valid){
continue;
}
IkReal x11821=x11825.value;
IkReal x11822=(cj3*x11821);
IkReal x11823=(x11820*x11821);
IkReal x11824=((((-1.0)*x11823*(r11*r11)*(r21*r21)))+(((-1.0)*x11823*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x11822))+(((-1.0)*x11820*(r22*r22))));
j4eval[0]=x11824;
j4eval[1]=IKsign(x11824);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11826=((-1.0)*r11);
CheckValue<IkReal> x11829 = IKatan2WithCheck(IkReal(x11826),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11829.valid){
continue;
}
IkReal x11827=((1.0)*(x11829.value));
IkReal x11828=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11827)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11827)));
IkReal gconst10=(x11826*x11828);
IkReal gconst11=((1.0)*r10*x11828);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11830=((-1.0)*r11);
CheckValue<IkReal> x11833 = IKatan2WithCheck(IkReal(x11830),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11833.valid){
continue;
}
IkReal x11831=((1.0)*(x11833.value));
IkReal x11832=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11831)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11831)));
IkReal gconst10=(x11830*x11832);
IkReal gconst11=((1.0)*r10*x11832);
IkReal x11834=r12*r12;
IkReal x11835=((1.0)*sj0);
IkReal x11836=(cj0*r02);
IkReal x11837=x11800;
j4eval[0]=((IKabs(((((-1.0)*x11835*x11837))+((r12*x11836*x11837))+((sj0*x11834*x11837)))))+(IKabs(((((-1.0)*r12*x11835))+(((-1.0)*x11836))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11838=((-1.0)*r11);
CheckValue<IkReal> x11841 = IKatan2WithCheck(IkReal(x11838),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11841.valid){
continue;
}
IkReal x11839=((1.0)*(x11841.value));
IkReal x11840=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11839)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11839)));
IkReal gconst10=(x11838*x11840);
IkReal gconst11=((1.0)*r10*x11840);
IkReal x11842=r12*r12;
IkReal x11843=(cj1*cj2*r22);
IkReal x11844=(r22*sj1*sj2);
CheckValue<IkReal> x11848=IKPowWithIntegerCheck(((-1.0)+x11842),-1);
if(!x11848.valid){
continue;
}
IkReal x11845=x11848.value;
if((((1.0)+(((-1.0)*x11842)))) < -0.00001)
continue;
IkReal x11846=IKsqrt(((1.0)+(((-1.0)*x11842))));
IkReal x11847=(r12*x11845*x11846);
j4eval[0]=((IKabs(((((-1.0)*x11844*x11847))+((x11843*x11847)))))+(IKabs(((((-1.0)*x11843))+x11844))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11849=((-1.0)*r11);
CheckValue<IkReal> x11852 = IKatan2WithCheck(IkReal(x11849),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11852.valid){
continue;
}
IkReal x11850=((1.0)*(x11852.value));
IkReal x11851=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11850)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11850)));
IkReal gconst10=(x11849*x11851);
IkReal gconst11=((1.0)*r10*x11851);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11853=((-1.0)*r11);
CheckValue<IkReal> x11856 = IKatan2WithCheck(IkReal(x11853),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11856.valid){
continue;
}
IkReal x11854=((1.0)*(x11856.value));
IkReal x11855=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11854)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11854)));
IkReal gconst10=(x11853*x11855);
IkReal gconst11=((1.0)*r10*x11855);
IkReal x11857=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11861=IKPowWithIntegerCheck(x11857,-1);
if(!x11861.valid){
continue;
}
IkReal x11858=x11861.value;
IkReal x11859=((1.0)*x11858);
IkReal x11860=((((-1.0)*x11859*(r00*r00)*(r10*r10)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x11858))+(((-1.0)*x11859*(r01*r01)*(r11*r11))));
j4eval[0]=x11860;
j4eval[1]=IKsign(x11860);
j4eval[2]=r02;
j4eval[3]=x11857;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11862=((-1.0)*r11);
CheckValue<IkReal> x11865 = IKatan2WithCheck(IkReal(x11862),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11865.valid){
continue;
}
IkReal x11863=((1.0)*(x11865.value));
IkReal x11864=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11863)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11863)));
IkReal gconst10=(x11862*x11864);
IkReal gconst11=((1.0)*r10*x11864);
IkReal x11866=r12*r12;
IkReal x11867=(cj1*cj2*r22);
IkReal x11868=(r22*sj1*sj2);
CheckValue<IkReal> x11872=IKPowWithIntegerCheck(((-1.0)+x11866),-1);
if(!x11872.valid){
continue;
}
IkReal x11869=x11872.value;
if((((1.0)+(((-1.0)*x11866)))) < -0.00001)
continue;
IkReal x11870=IKsqrt(((1.0)+(((-1.0)*x11866))));
IkReal x11871=(r12*x11869*x11870);
j4eval[0]=((IKabs(((((-1.0)*x11867))+x11868)))+(IKabs(((((-1.0)*x11868*x11871))+((x11867*x11871))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11873=(gconst10*r21);
IkReal x11874=(gconst11*r20);
IkReal x11875=(sj1*sj2);
IkReal x11876=(cj1*cj2);
CheckValue<IkReal> x11877 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11876))+((r22*x11875)))),IkReal(((((-1.0)*x11874*x11875))+(((-1.0)*x11873*x11876))+((x11874*x11876))+((x11873*x11875)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11877.valid){
continue;
}
CheckValue<IkReal> x11878=IKPowWithIntegerCheck(IKsign(((x11874*x11874)+(x11873*x11873)+(r22*r22)+(((-2.0)*x11873*x11874)))),-1);
if(!x11878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11877.value)+(((1.5707963267949)*(x11878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11879=IKsin(j4);
IkReal x11880=IKcos(j4);
IkReal x11881=((1.0)*cj2);
IkReal x11882=((1.0)*x11880);
IkReal x11883=(gconst10*x11879);
IkReal x11884=((1.0)*x11879);
IkReal x11885=(gconst11*x11880);
IkReal x11886=(gconst11*x11884);
evalcond[0]=(((r21*x11883))+(((-1.0)*r22*x11882))+(((-1.0)*r20*x11886)));
evalcond[1]=((((-1.0)*r12*x11882))+((r11*x11883))+(((-1.0)*r10*x11886)));
evalcond[2]=((((-1.0)*gconst10*r01*x11882))+((r00*x11885))+(((-1.0)*r02*x11884)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11886))+((r01*x11883))+(((-1.0)*r02*x11882)));
evalcond[4]=((((-1.0)*r22*x11884))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11882))+(((-1.0)*cj1*x11881))+((r20*x11885)));
evalcond[5]=((((-1.0)*gconst10*r11*x11882))+(((-1.0)*cj1*sj2))+((r10*x11885))+(((-1.0)*r12*x11884))+(((-1.0)*sj1*x11881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11887=(gconst11*r00);
IkReal x11888=(gconst10*r01);
CheckValue<IkReal> x11889 = IKatan2WithCheck(IkReal(((((-1.0)*x11888))+x11887)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11889.valid){
continue;
}
CheckValue<IkReal> x11890=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x11887*x11888))+(((-1.0)*(x11887*x11887)))+(((-1.0)*(x11888*x11888))))),-1);
if(!x11890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11889.value)+(((1.5707963267949)*(x11890.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11891=IKsin(j4);
IkReal x11892=IKcos(j4);
IkReal x11893=((1.0)*cj2);
IkReal x11894=((1.0)*x11892);
IkReal x11895=(gconst10*x11891);
IkReal x11896=((1.0)*x11891);
IkReal x11897=(gconst11*x11892);
IkReal x11898=(gconst11*x11896);
evalcond[0]=((((-1.0)*r20*x11898))+(((-1.0)*r22*x11894))+((r21*x11895)));
evalcond[1]=((((-1.0)*r10*x11898))+(((-1.0)*r12*x11894))+((r11*x11895)));
evalcond[2]=((((-1.0)*gconst10*r01*x11894))+((r00*x11897))+(((-1.0)*r02*x11896)));
evalcond[3]=((-1.0)+((r01*x11895))+(((-1.0)*r00*x11898))+(((-1.0)*r02*x11894)));
evalcond[4]=((((-1.0)*cj1*x11893))+(((-1.0)*r22*x11896))+((sj1*sj2))+((r20*x11897))+(((-1.0)*gconst10*r21*x11894)));
evalcond[5]=((((-1.0)*gconst10*r11*x11894))+(((-1.0)*r12*x11896))+(((-1.0)*cj1*sj2))+((r10*x11897))+(((-1.0)*sj1*x11893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11899 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11899.valid){
continue;
}
CheckValue<IkReal> x11900=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11899.value)+(((1.5707963267949)*(x11900.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11901=IKsin(j4);
IkReal x11902=IKcos(j4);
IkReal x11903=((1.0)*cj2);
IkReal x11904=((1.0)*x11902);
IkReal x11905=(gconst10*x11901);
IkReal x11906=((1.0)*x11901);
IkReal x11907=(gconst11*x11902);
IkReal x11908=(gconst11*x11906);
evalcond[0]=((((-1.0)*r22*x11904))+(((-1.0)*r20*x11908))+((r21*x11905)));
evalcond[1]=((((-1.0)*r12*x11904))+(((-1.0)*r10*x11908))+((r11*x11905)));
evalcond[2]=((((-1.0)*r02*x11906))+((r00*x11907))+(((-1.0)*gconst10*r01*x11904)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11904))+(((-1.0)*r00*x11908))+((r01*x11905)));
evalcond[4]=((((-1.0)*r22*x11906))+(((-1.0)*gconst10*r21*x11904))+(((-1.0)*cj1*x11903))+((sj1*sj2))+((r20*x11907)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11903))+(((-1.0)*r12*x11906))+(((-1.0)*gconst10*r11*x11904))+((r10*x11907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11909=((-1.0)*r11);
CheckValue<IkReal> x11912 = IKatan2WithCheck(IkReal(x11909),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11912.valid){
continue;
}
IkReal x11910=((1.0)*(x11912.value));
IkReal x11911=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11910)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11910)));
IkReal gconst10=(x11909*x11911);
IkReal gconst11=((1.0)*r10*x11911);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11913=((-1.0)*r11);
CheckValue<IkReal> x11916 = IKatan2WithCheck(IkReal(x11913),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11916.valid){
continue;
}
IkReal x11914=((1.0)*(x11916.value));
IkReal x11915=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11914)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11914)));
IkReal gconst10=(x11913*x11915);
IkReal gconst11=((1.0)*r10*x11915);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11917=((-1.0)*r11);
CheckValue<IkReal> x11920 = IKatan2WithCheck(IkReal(x11917),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11920.valid){
continue;
}
IkReal x11918=((1.0)*(x11920.value));
IkReal x11919=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11918)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11918)));
IkReal gconst10=(x11917*x11919);
IkReal gconst11=((1.0)*r10*x11919);
IkReal x11921=r12*r12;
CheckValue<IkReal> x11924=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11921))),-1);
if(!x11924.valid){
continue;
}
IkReal x11922=x11924.value;
IkReal x11923=((1.0)*x11922);
j4eval[0]=IKsign((x11921+((x11923*(r10*r10*r10*r10)))+(((2.0)*x11922*(r10*r10)*(r11*r11)))+((x11923*(r11*r11*r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11925=(cj2*sj1);
IkReal x11926=(gconst10*r11);
IkReal x11927=(gconst11*r10);
IkReal x11928=(cj1*sj2);
CheckValue<IkReal> x11929=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11926*x11926)+(((-2.0)*x11926*x11927))+(x11927*x11927))),-1);
if(!x11929.valid){
continue;
}
CheckValue<IkReal> x11930 = IKatan2WithCheck(IkReal((((r12*x11925))+((r12*x11928)))),IkReal(((((-1.0)*x11925*x11927))+((x11925*x11926))+((x11926*x11928))+(((-1.0)*x11927*x11928)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11929.value)))+(x11930.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11931=IKsin(j4);
IkReal x11932=IKcos(j4);
IkReal x11933=((1.0)*x11932);
IkReal x11934=(gconst10*x11931);
IkReal x11935=((1.0)*x11931);
IkReal x11936=(gconst11*x11932);
IkReal x11937=(gconst11*x11935);
evalcond[0]=(((r21*x11934))+(((-1.0)*r22*x11933))+(((-1.0)*r20*x11937)));
evalcond[1]=((((-1.0)*r10*x11937))+((r11*x11934))+(((-1.0)*r12*x11933)));
evalcond[2]=((((-1.0)*gconst10*r01*x11933))+(((-1.0)*r02*x11935))+((r00*x11936)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11933))+(((-1.0)*r00*x11937))+((r01*x11934)));
evalcond[4]=(((cj2*sj1))+((r10*x11936))+(((-1.0)*gconst10*r11*x11933))+((cj1*sj2))+(((-1.0)*r12*x11935)));
evalcond[5]=(((r20*x11936))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11933))+(((-1.0)*r22*x11935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11938=(gconst11*r00);
IkReal x11939=(gconst10*r01);
CheckValue<IkReal> x11940 = IKatan2WithCheck(IkReal((x11938+(((-1.0)*x11939)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11940.valid){
continue;
}
CheckValue<IkReal> x11941=IKPowWithIntegerCheck(IKsign(((x11938*x11938)+(((-2.0)*x11938*x11939))+(r02*r02)+(x11939*x11939))),-1);
if(!x11941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11940.value)+(((1.5707963267949)*(x11941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11942=IKsin(j4);
IkReal x11943=IKcos(j4);
IkReal x11944=((1.0)*x11943);
IkReal x11945=(gconst10*x11942);
IkReal x11946=((1.0)*x11942);
IkReal x11947=(gconst11*x11943);
IkReal x11948=(gconst11*x11946);
evalcond[0]=((((-1.0)*r20*x11948))+(((-1.0)*r22*x11944))+((r21*x11945)));
evalcond[1]=(((r11*x11945))+(((-1.0)*r12*x11944))+(((-1.0)*r10*x11948)));
evalcond[2]=((((-1.0)*r02*x11946))+((r00*x11947))+(((-1.0)*gconst10*r01*x11944)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11944))+(((-1.0)*r00*x11948))+((r01*x11945)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst10*r11*x11944))+((cj1*sj2))+((r10*x11947))+(((-1.0)*r12*x11946)));
evalcond[5]=((((-1.0)*gconst10*r21*x11944))+((r20*x11947))+(((-1.0)*r22*x11946))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11949=((1.0)*gconst11);
CheckValue<IkReal> x11950=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11949))+(((-1.0)*gconst10*r20)))),-1);
if(!x11950.valid){
continue;
}
CheckValue<IkReal> x11951 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11950.value)))+(x11951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11952=IKsin(j4);
IkReal x11953=IKcos(j4);
IkReal x11954=((1.0)*x11953);
IkReal x11955=(gconst10*x11952);
IkReal x11956=((1.0)*x11952);
IkReal x11957=(gconst11*x11953);
IkReal x11958=(gconst11*x11956);
evalcond[0]=((((-1.0)*r20*x11958))+((r21*x11955))+(((-1.0)*r22*x11954)));
evalcond[1]=((((-1.0)*r12*x11954))+((r11*x11955))+(((-1.0)*r10*x11958)));
evalcond[2]=((((-1.0)*gconst10*r01*x11954))+(((-1.0)*r02*x11956))+((r00*x11957)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11954))+(((-1.0)*r00*x11958))+((r01*x11955)));
evalcond[4]=((((-1.0)*r12*x11956))+((cj2*sj1))+(((-1.0)*gconst10*r11*x11954))+((cj1*sj2))+((r10*x11957)));
evalcond[5]=((((-1.0)*gconst10*r21*x11954))+((r20*x11957))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11959=((-1.0)*r11);
IkReal x11960=((-1.0)*r10);
CheckValue<IkReal> x11962 = IKatan2WithCheck(IkReal(x11959),IkReal(x11960),IKFAST_ATAN2_MAGTHRESH);
if(!x11962.valid){
continue;
}
IkReal x11961=((1.0)*(x11962.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11961)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11960);
rxp1_1=(px*r21);
rxp1_2=(px*x11959);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11961)));
IkReal gconst10=x11959;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11963=((-1.0)*r11);
IkReal x11964=((-1.0)*r10);
CheckValue<IkReal> x11966 = IKatan2WithCheck(IkReal(x11963),IkReal(x11964),IKFAST_ATAN2_MAGTHRESH);
if(!x11966.valid){
continue;
}
IkReal x11965=((1.0)*(x11966.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11965)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11964);
rxp1_1=(px*r21);
rxp1_2=(px*x11963);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11965)));
IkReal gconst10=x11963;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11967=((-1.0)*r11);
IkReal x11968=((-1.0)*r10);
CheckValue<IkReal> x11970 = IKatan2WithCheck(IkReal(x11967),IkReal(x11968),IKFAST_ATAN2_MAGTHRESH);
if(!x11970.valid){
continue;
}
IkReal x11969=((1.0)*(x11970.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11969)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11968);
rxp1_1=(px*r21);
rxp1_2=(px*x11967);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11969)));
IkReal gconst10=x11967;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11973=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11973.valid){
continue;
}
IkReal x11971=x11973.value;
IkReal x11972=(sj0*x11971);
cj4array[0]=(((cj1*sj2*x11972))+((cj2*sj1*x11972)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11974=IKsin(j4);
IkReal x11975=IKcos(j4);
IkReal x11976=(gconst10*r21);
IkReal x11977=(gconst11*r20);
IkReal x11978=((1.0)*x11974);
IkReal x11979=((1.0)*x11975);
evalcond[0]=((-1.0)*r02*x11974);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11979)));
evalcond[2]=(((x11974*x11976))+(((-1.0)*x11977*x11978)));
evalcond[3]=((((-1.0)*gconst11*r10*x11978))+((gconst10*r11*x11974)));
evalcond[4]=(((x11975*x11977))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11976*x11979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11981=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11981.valid){
continue;
}
IkReal x11980=x11981.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11980))+((cj1*cj2*x11980)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11982=IKsin(j4);
IkReal x11983=IKcos(j4);
IkReal x11984=((1.0)*sj0);
IkReal x11985=(gconst10*x11982);
IkReal x11986=((1.0)*x11983);
IkReal x11987=((1.0)*gconst11*x11982);
evalcond[0]=((-1.0)*r02*x11982);
evalcond[1]=((((-1.0)*r02*x11986))+(((-1.0)*x11984)));
evalcond[2]=(((r21*x11985))+(((-1.0)*r20*x11987)));
evalcond[3]=((((-1.0)*r10*x11987))+((r11*x11985)));
evalcond[4]=(((gconst11*r10*x11983))+(((-1.0)*gconst10*r11*x11986))+(((-1.0)*cj2*sj1*x11984))+(((-1.0)*cj1*sj2*x11984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11988=IKPowWithIntegerCheck(r02,-1);
if(!x11988.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11988.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11989=IKsin(j4);
IkReal x11990=IKcos(j4);
IkReal x11991=(gconst10*r21);
IkReal x11992=((1.0)*sj0);
IkReal x11993=(gconst10*r11);
IkReal x11994=(gconst11*x11990);
IkReal x11995=((1.0)*x11990);
IkReal x11996=((1.0)*gconst11*x11989);
evalcond[0]=((-1.0)*r02*x11989);
evalcond[1]=(((x11989*x11991))+(((-1.0)*r20*x11996)));
evalcond[2]=(((x11989*x11993))+(((-1.0)*r10*x11996)));
evalcond[3]=(((r20*x11994))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11991*x11995)));
evalcond[4]=((((-1.0)*cj1*sj2*x11992))+(((-1.0)*x11993*x11995))+(((-1.0)*cj2*sj1*x11992))+((r10*x11994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11997=((1.0)*gconst11);
CheckValue<IkReal> x11998 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x11997))+((gconst10*r11*sj0))+(((-1.0)*cj0*r00*x11997))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11998.valid){
continue;
}
CheckValue<IkReal> x11999=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11998.value)+(((1.5707963267949)*(x11999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12000=IKsin(j4);
IkReal x12001=IKcos(j4);
IkReal x12002=((1.0)*cj2);
IkReal x12003=((1.0)*sj0);
IkReal x12004=(cj1*sj2);
IkReal x12005=(gconst10*x12000);
IkReal x12006=((1.0)*x12001);
IkReal x12007=(gconst11*x12001);
IkReal x12008=((1.0)*x12000);
IkReal x12009=(gconst11*x12008);
evalcond[0]=(((r21*x12005))+(((-1.0)*r20*x12009)));
evalcond[1]=((((-1.0)*r10*x12009))+cj0+(((-1.0)*r12*x12006))+((r11*x12005)));
evalcond[2]=(((r20*x12007))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12006))+(((-1.0)*cj1*x12002)));
evalcond[3]=((((-1.0)*x12003))+(((-1.0)*r00*x12009))+((r01*x12005))+(((-1.0)*r02*x12006)));
evalcond[4]=((((-1.0)*gconst10*r01*x12006))+((r00*x12007))+(((-1.0)*cj0*sj1*x12002))+(((-1.0)*r02*x12008))+(((-1.0)*cj0*x12004)));
evalcond[5]=((((-1.0)*sj0*sj1*x12002))+(((-1.0)*gconst10*r11*x12006))+(((-1.0)*r12*x12008))+((r10*x12007))+(((-1.0)*x12003*x12004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12010=(gconst10*r21);
IkReal x12011=(gconst11*r20);
IkReal x12012=(sj1*sj2);
IkReal x12013=(cj1*cj2);
CheckValue<IkReal> x12014=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12010*x12011))+(r22*r22)+(x12011*x12011)+(x12010*x12010))),-1);
if(!x12014.valid){
continue;
}
CheckValue<IkReal> x12015 = IKatan2WithCheck(IkReal((((r22*x12012))+(((-1.0)*r22*x12013)))),IkReal((((x12011*x12013))+(((-1.0)*x12011*x12012))+(((-1.0)*x12010*x12013))+((x12010*x12012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12014.value)))+(x12015.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12016=IKsin(j4);
IkReal x12017=IKcos(j4);
IkReal x12018=((1.0)*cj2);
IkReal x12019=((1.0)*sj0);
IkReal x12020=(cj1*sj2);
IkReal x12021=((1.0)*x12017);
IkReal x12022=(gconst10*x12016);
IkReal x12023=((1.0)*x12016);
IkReal x12024=(gconst11*x12017);
IkReal x12025=(gconst11*x12023);
evalcond[0]=((((-1.0)*r20*x12025))+((r21*x12022))+(((-1.0)*r22*x12021)));
evalcond[1]=(cj0+((r11*x12022))+(((-1.0)*r12*x12021))+(((-1.0)*r10*x12025)));
evalcond[2]=(((r01*x12022))+(((-1.0)*r00*x12025))+(((-1.0)*r02*x12021))+(((-1.0)*x12019)));
evalcond[3]=(((r20*x12024))+(((-1.0)*cj1*x12018))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12021))+(((-1.0)*r22*x12023)));
evalcond[4]=((((-1.0)*cj0*sj1*x12018))+((r00*x12024))+(((-1.0)*r02*x12023))+(((-1.0)*cj0*x12020))+(((-1.0)*gconst10*r01*x12021)));
evalcond[5]=((((-1.0)*gconst10*r11*x12021))+(((-1.0)*sj0*sj1*x12018))+(((-1.0)*r12*x12023))+((r10*x12024))+(((-1.0)*x12019*x12020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12026=((1.0)*sj0);
IkReal x12027=((1.0)*gconst10);
CheckValue<IkReal> x12028 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12026)))),IkReal(((((-1.0)*gconst10*r11*x12026))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*cj0*r01*x12027)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12028.valid){
continue;
}
CheckValue<IkReal> x12029=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12027))+(((-1.0)*gconst11*r21)))),-1);
if(!x12029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12028.value)+(((1.5707963267949)*(x12029.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12030=IKsin(j4);
IkReal x12031=IKcos(j4);
IkReal x12032=((1.0)*cj2);
IkReal x12033=((1.0)*sj0);
IkReal x12034=(cj1*sj2);
IkReal x12035=((1.0)*x12031);
IkReal x12036=(gconst10*x12030);
IkReal x12037=((1.0)*x12030);
IkReal x12038=(gconst11*x12031);
IkReal x12039=(gconst11*x12037);
evalcond[0]=((((-1.0)*r20*x12039))+((r21*x12036))+(((-1.0)*r22*x12035)));
evalcond[1]=(cj0+(((-1.0)*r12*x12035))+((r11*x12036))+(((-1.0)*r10*x12039)));
evalcond[2]=((((-1.0)*x12033))+((r01*x12036))+(((-1.0)*r02*x12035))+(((-1.0)*r00*x12039)));
evalcond[3]=((((-1.0)*cj1*x12032))+((r20*x12038))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12035))+(((-1.0)*r22*x12037)));
evalcond[4]=((((-1.0)*gconst10*r01*x12035))+((r00*x12038))+(((-1.0)*r02*x12037))+(((-1.0)*cj0*sj1*x12032))+(((-1.0)*cj0*x12034)));
evalcond[5]=((((-1.0)*x12033*x12034))+(((-1.0)*gconst10*r11*x12035))+(((-1.0)*r12*x12037))+((r10*x12038))+(((-1.0)*sj0*sj1*x12032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12040=((1.0)*gconst11);
CheckValue<IkReal> x12041 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12040)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12041.valid){
continue;
}
CheckValue<IkReal> x12042=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12040)))),-1);
if(!x12042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12041.value)+(((1.5707963267949)*(x12042.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12043=IKsin(j4);
IkReal x12044=IKcos(j4);
IkReal x12045=((1.0)*cj2);
IkReal x12046=((1.0)*sj0);
IkReal x12047=(cj1*sj2);
IkReal x12048=((1.0)*x12044);
IkReal x12049=(gconst10*x12043);
IkReal x12050=((1.0)*x12043);
IkReal x12051=(gconst11*x12044);
IkReal x12052=(gconst11*x12050);
evalcond[0]=((((-1.0)*r20*x12052))+((r21*x12049))+(((-1.0)*r22*x12048)));
evalcond[1]=((((-1.0)*r12*x12048))+(((-1.0)*r10*x12052))+cj0+((r11*x12049)));
evalcond[2]=((((-1.0)*x12046))+((r01*x12049))+(((-1.0)*r00*x12052))+(((-1.0)*r02*x12048)));
evalcond[3]=(((r20*x12051))+(((-1.0)*cj1*x12045))+((sj1*sj2))+(((-1.0)*r22*x12050))+(((-1.0)*gconst10*r21*x12048)));
evalcond[4]=((((-1.0)*cj0*x12047))+(((-1.0)*gconst10*r01*x12048))+((r00*x12051))+(((-1.0)*r02*x12050))+(((-1.0)*cj0*sj1*x12045)));
evalcond[5]=(((r10*x12051))+(((-1.0)*x12046*x12047))+(((-1.0)*sj0*sj1*x12045))+(((-1.0)*gconst10*r11*x12048))+(((-1.0)*r12*x12050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12053=((-1.0)*r11);
CheckValue<IkReal> x12056 = IKatan2WithCheck(IkReal(x12053),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12056.valid){
continue;
}
IkReal x12054=((1.0)*(x12056.value));
IkReal x12055=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12054)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12054)));
IkReal gconst10=(x12053*x12055);
IkReal gconst11=((1.0)*r10*x12055);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12057=((-1.0)*r11);
CheckValue<IkReal> x12060 = IKatan2WithCheck(IkReal(x12057),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12060.valid){
continue;
}
IkReal x12058=((1.0)*(x12060.value));
IkReal x12059=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12058)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12058)));
IkReal gconst10=(x12057*x12059);
IkReal gconst11=((1.0)*r10*x12059);
IkReal x12061=r12*r12;
IkReal x12062=((1.0)*sj0);
IkReal x12063=(cj0*r02);
IkReal x12064=x11800;
j4eval[0]=((IKabs(((((-1.0)*x12063))+(((-1.0)*r12*x12062)))))+(IKabs(((((-1.0)*x12062*x12064))+((r12*x12063*x12064))+((sj0*x12061*x12064))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12065=((-1.0)*r11);
CheckValue<IkReal> x12068 = IKatan2WithCheck(IkReal(x12065),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12068.valid){
continue;
}
IkReal x12066=((1.0)*(x12068.value));
IkReal x12067=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12066)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12066)));
IkReal gconst10=(x12065*x12067);
IkReal gconst11=((1.0)*r10*x12067);
IkReal x12069=r12*r12;
IkReal x12070=((1.0)+(((-1.0)*x12069)));
IkReal x12071=(r22*sj1*sj2);
IkReal x12072=(cj1*cj2*r22);
CheckValue<IkReal> x12079=IKPowWithIntegerCheck(x12070,-1);
if(!x12079.valid){
continue;
}
IkReal x12073=x12079.value;
CheckValue<IkReal> x12080=IKPowWithIntegerCheck(((-1.0)+x12069),-1);
if(!x12080.valid){
continue;
}
IkReal x12074=x12080.value;
IkReal x12075=((1.0)*x12073);
if((x12070) < -0.00001)
continue;
IkReal x12076=IKsqrt(x12070);
IkReal x12077=(r12*x12074*x12076);
IkReal x12078=((((-2.0)*r10*r11*r20*r21*x12073))+(((-1.0)*x12075*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x12075*(r11*r11)*(r21*r21))));
j4eval[0]=x12078;
j4eval[1]=((IKabs(((((-1.0)*x12072))+x12071)))+(IKabs((((x12072*x12077))+(((-1.0)*x12071*x12077))))));
j4eval[2]=IKsign(x12078);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12081=((-1.0)*r11);
CheckValue<IkReal> x12084 = IKatan2WithCheck(IkReal(x12081),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12084.valid){
continue;
}
IkReal x12082=((1.0)*(x12084.value));
IkReal x12083=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12082)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12082)));
IkReal gconst10=(x12081*x12083);
IkReal gconst11=((1.0)*r10*x12083);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12085=((-1.0)*r11);
CheckValue<IkReal> x12088 = IKatan2WithCheck(IkReal(x12085),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12088.valid){
continue;
}
IkReal x12086=((1.0)*(x12088.value));
IkReal x12087=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12086)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12086)));
IkReal gconst10=(x12085*x12087);
IkReal gconst11=((1.0)*r10*x12087);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12089=((-1.0)*r11);
CheckValue<IkReal> x12092 = IKatan2WithCheck(IkReal(x12089),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12092.valid){
continue;
}
IkReal x12090=((1.0)*(x12092.value));
IkReal x12091=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12090)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12090)));
IkReal gconst10=(x12089*x12091);
IkReal gconst11=((1.0)*r10*x12091);
IkReal x12093=(cj1*r02*sj2);
IkReal x12094=(cj2*r02*sj1);
IkReal x12095=x11800;
IkReal x12096=(r12*x12095);
j4eval[0]=((IKabs((x12094+x12093)))+(IKabs((((x12094*x12096))+((x12093*x12096))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12097=(cj1*sj2);
IkReal x12098=(cj2*sj1);
IkReal x12099=(gconst11*r00);
IkReal x12100=((1.0)*gconst10*r01);
CheckValue<IkReal> x12101=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12101.valid){
continue;
}
CheckValue<IkReal> x12102 = IKatan2WithCheck(IkReal((((x12097*x12099))+(((-1.0)*x12097*x12100))+(((-1.0)*x12098*x12100))+((x12098*x12099)))),IkReal((((r02*x12097))+((r02*x12098)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12101.value)))+(x12102.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12103=IKcos(j4);
IkReal x12104=IKsin(j4);
IkReal x12105=((1.0)*cj2);
IkReal x12106=((1.0)*x12103);
IkReal x12107=(gconst10*x12103);
IkReal x12108=(gconst10*x12104);
IkReal x12109=((1.0)*gconst11*x12104);
evalcond[0]=(((r02*x12104))+((r01*x12107))+(((-1.0)*gconst11*r00*x12106)));
evalcond[1]=((((-1.0)*r22*x12106))+(((-1.0)*r20*x12109))+((r21*x12108)));
evalcond[2]=((((-1.0)*r12*x12106))+(((-1.0)*r10*x12109))+((r11*x12108)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12109))+((r01*x12108))+(((-1.0)*r02*x12106)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x12105))+(((-1.0)*gconst11*r20*x12106))+((r22*x12104))+((r21*x12107)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12105))+((r12*x12104))+((r11*x12107))+(((-1.0)*gconst11*r10*x12106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12110=(gconst10*r01);
IkReal x12111=(gconst11*r00);
CheckValue<IkReal> x12112=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12110*x12111))+(x12111*x12111)+(x12110*x12110)+(r02*r02))),-1);
if(!x12112.valid){
continue;
}
CheckValue<IkReal> x12113 = IKatan2WithCheck(IkReal(((((-1.0)*x12111))+x12110)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12112.value)))+(x12113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12114=IKcos(j4);
IkReal x12115=IKsin(j4);
IkReal x12116=((1.0)*cj2);
IkReal x12117=((1.0)*x12114);
IkReal x12118=(gconst10*x12114);
IkReal x12119=(gconst10*x12115);
IkReal x12120=((1.0)*gconst11*x12115);
evalcond[0]=(((r02*x12115))+((r01*x12118))+(((-1.0)*gconst11*r00*x12117)));
evalcond[1]=((((-1.0)*r20*x12120))+(((-1.0)*r22*x12117))+((r21*x12119)));
evalcond[2]=((((-1.0)*r12*x12117))+(((-1.0)*r10*x12120))+((r11*x12119)));
evalcond[3]=((-1.0)+((r01*x12119))+(((-1.0)*r02*x12117))+(((-1.0)*r00*x12120)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*gconst11*r20*x12117))+(((-1.0)*cj1*x12116))+((r21*x12118))+((r22*x12115)));
evalcond[5]=((((-1.0)*gconst11*r10*x12117))+(((-1.0)*sj1*x12116))+(((-1.0)*cj1*sj2))+((r12*x12115))+((r11*x12118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12121 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12121.valid){
continue;
}
CheckValue<IkReal> x12122=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12121.value)+(((1.5707963267949)*(x12122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12123=IKcos(j4);
IkReal x12124=IKsin(j4);
IkReal x12125=((1.0)*cj2);
IkReal x12126=((1.0)*x12123);
IkReal x12127=(gconst10*x12123);
IkReal x12128=(gconst10*x12124);
IkReal x12129=((1.0)*gconst11*x12124);
evalcond[0]=(((r01*x12127))+(((-1.0)*gconst11*r00*x12126))+((r02*x12124)));
evalcond[1]=((((-1.0)*r20*x12129))+((r21*x12128))+(((-1.0)*r22*x12126)));
evalcond[2]=((((-1.0)*r12*x12126))+(((-1.0)*r10*x12129))+((r11*x12128)));
evalcond[3]=((-1.0)+((r01*x12128))+(((-1.0)*r02*x12126))+(((-1.0)*r00*x12129)));
evalcond[4]=(((r21*x12127))+(((-1.0)*cj1*x12125))+((sj1*sj2))+((r22*x12124))+(((-1.0)*gconst11*r20*x12126)));
evalcond[5]=((((-1.0)*sj1*x12125))+((r12*x12124))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12126))+((r11*x12127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12130=((-1.0)*r11);
CheckValue<IkReal> x12133 = IKatan2WithCheck(IkReal(x12130),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12133.valid){
continue;
}
IkReal x12131=((1.0)*(x12133.value));
IkReal x12132=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12131)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12131)));
IkReal gconst10=(x12130*x12132);
IkReal gconst11=((1.0)*r10*x12132);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12134=((-1.0)*r11);
CheckValue<IkReal> x12137 = IKatan2WithCheck(IkReal(x12134),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12137.valid){
continue;
}
IkReal x12135=((1.0)*(x12137.value));
IkReal x12136=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12135)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12135)));
IkReal gconst10=(x12134*x12136);
IkReal gconst11=((1.0)*r10*x12136);
IkReal x12138=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12142=IKPowWithIntegerCheck(x12138,-1);
if(!x12142.valid){
continue;
}
IkReal x12139=x12142.value;
IkReal x12140=((1.0)*x12139);
IkReal x12141=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x12139))+(((-1.0)*x12140*(r00*r00)*(r10*r10)))+(((-1.0)*x12140*(r01*r01)*(r11*r11))));
j4eval[0]=x12141;
j4eval[1]=r02;
j4eval[2]=x12138;
j4eval[3]=IKsign(x12141);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12143=((-1.0)*r11);
CheckValue<IkReal> x12146 = IKatan2WithCheck(IkReal(x12143),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12146.valid){
continue;
}
IkReal x12144=((1.0)*(x12146.value));
IkReal x12145=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12144)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12144)));
IkReal gconst10=(x12143*x12145);
IkReal gconst11=((1.0)*r10*x12145);
IkReal x12147=r12*r12;
IkReal x12148=((1.0)*r02);
IkReal x12149=(cj1*sj2);
IkReal x12150=(cj2*sj1);
CheckValue<IkReal> x12154=IKPowWithIntegerCheck(((-1.0)+x12147),-1);
if(!x12154.valid){
continue;
}
IkReal x12151=x12154.value;
if((((1.0)+(((-1.0)*x12147)))) < -0.00001)
continue;
IkReal x12152=IKsqrt(((1.0)+(((-1.0)*x12147))));
IkReal x12153=(r12*x12151*x12152);
j4eval[0]=((IKabs(((((-1.0)*x12148*x12150))+(((-1.0)*x12148*x12149)))))+(IKabs(((((-1.0)*x12148*x12150*x12153))+(((-1.0)*x12148*x12149*x12153))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12155=(cj1*sj2);
IkReal x12156=(gconst10*r01);
IkReal x12157=(cj2*sj1);
IkReal x12158=((1.0)*r02);
IkReal x12159=((1.0)*gconst11*r00);
CheckValue<IkReal> x12160=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12160.valid){
continue;
}
CheckValue<IkReal> x12161 = IKatan2WithCheck(IkReal((((x12156*x12157))+((x12155*x12156))+(((-1.0)*x12157*x12159))+(((-1.0)*x12155*x12159)))),IkReal(((((-1.0)*x12157*x12158))+(((-1.0)*x12155*x12158)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12160.value)))+(x12161.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12162=IKcos(j4);
IkReal x12163=IKsin(j4);
IkReal x12164=((1.0)*x12162);
IkReal x12165=(gconst10*x12162);
IkReal x12166=(gconst10*x12163);
IkReal x12167=((1.0)*gconst11*x12163);
evalcond[0]=((((-1.0)*gconst11*r00*x12164))+((r02*x12163))+((r01*x12165)));
evalcond[1]=(((r21*x12166))+(((-1.0)*r22*x12164))+(((-1.0)*r20*x12167)));
evalcond[2]=((((-1.0)*r10*x12167))+((r11*x12166))+(((-1.0)*r12*x12164)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12167))+((r01*x12166))+(((-1.0)*r02*x12164)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12164))+((cj1*sj2))+((r11*x12165))+((r12*x12163)));
evalcond[5]=(((r21*x12165))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12164))+((r22*x12163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12168=(gconst10*r01);
IkReal x12169=(gconst11*r00);
CheckValue<IkReal> x12170 = IKatan2WithCheck(IkReal(((((-1.0)*x12169))+x12168)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12170.valid){
continue;
}
CheckValue<IkReal> x12171=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x12168*x12168)))+(((2.0)*x12168*x12169))+(((-1.0)*(x12169*x12169))))),-1);
if(!x12171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12170.value)+(((1.5707963267949)*(x12171.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12172=IKcos(j4);
IkReal x12173=IKsin(j4);
IkReal x12174=((1.0)*x12172);
IkReal x12175=(gconst10*x12172);
IkReal x12176=(gconst10*x12173);
IkReal x12177=((1.0)*gconst11*x12173);
evalcond[0]=((((-1.0)*gconst11*r00*x12174))+((r01*x12175))+((r02*x12173)));
evalcond[1]=(((r21*x12176))+(((-1.0)*r22*x12174))+(((-1.0)*r20*x12177)));
evalcond[2]=((((-1.0)*r10*x12177))+((r11*x12176))+(((-1.0)*r12*x12174)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12177))+((r01*x12176))+(((-1.0)*r02*x12174)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12174))+((cj1*sj2))+((r11*x12175))+((r12*x12173)));
evalcond[5]=(((r21*x12175))+(((-1.0)*gconst11*r20*x12174))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12178=((1.0)*gconst11);
CheckValue<IkReal> x12179=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12178)))),-1);
if(!x12179.valid){
continue;
}
CheckValue<IkReal> x12180 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12178)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12179.value)))+(x12180.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12181=IKcos(j4);
IkReal x12182=IKsin(j4);
IkReal x12183=((1.0)*x12181);
IkReal x12184=(gconst10*x12181);
IkReal x12185=(gconst10*x12182);
IkReal x12186=((1.0)*gconst11*x12182);
evalcond[0]=((((-1.0)*gconst11*r00*x12183))+((r02*x12182))+((r01*x12184)));
evalcond[1]=(((r21*x12185))+(((-1.0)*r22*x12183))+(((-1.0)*r20*x12186)));
evalcond[2]=(((r11*x12185))+(((-1.0)*r10*x12186))+(((-1.0)*r12*x12183)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12183))+(((-1.0)*r00*x12186))+((r01*x12185)));
evalcond[4]=(((cj2*sj1))+((r12*x12182))+((r11*x12184))+((cj1*sj2))+(((-1.0)*gconst11*r10*x12183)));
evalcond[5]=((((-1.0)*cj1*cj2))+((r22*x12182))+((sj1*sj2))+((r21*x12184))+(((-1.0)*gconst11*r20*x12183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12187=((-1.0)*r11);
IkReal x12188=((-1.0)*r10);
CheckValue<IkReal> x12190 = IKatan2WithCheck(IkReal(x12187),IkReal(x12188),IKFAST_ATAN2_MAGTHRESH);
if(!x12190.valid){
continue;
}
IkReal x12189=((1.0)*(x12190.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12189)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12188);
rxp1_1=(px*r21);
rxp1_2=(px*x12187);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12189)));
IkReal gconst10=x12187;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12191=((-1.0)*r11);
IkReal x12192=((-1.0)*r10);
CheckValue<IkReal> x12194 = IKatan2WithCheck(IkReal(x12191),IkReal(x12192),IKFAST_ATAN2_MAGTHRESH);
if(!x12194.valid){
continue;
}
IkReal x12193=((1.0)*(x12194.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12193)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12192);
rxp1_1=(px*r21);
rxp1_2=(px*x12191);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12193)));
IkReal gconst10=x12191;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12195=((-1.0)*r11);
IkReal x12196=((-1.0)*r10);
CheckValue<IkReal> x12198 = IKatan2WithCheck(IkReal(x12195),IkReal(x12196),IKFAST_ATAN2_MAGTHRESH);
if(!x12198.valid){
continue;
}
IkReal x12197=((1.0)*(x12198.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12197)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12196);
rxp1_1=(px*r21);
rxp1_2=(px*x12195);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12197)));
IkReal gconst10=x12195;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12201=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12201.valid){
continue;
}
IkReal x12199=x12201.value;
IkReal x12200=(sj0*x12199);
cj4array[0]=(((cj1*sj2*x12200))+((cj2*sj1*x12200)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12202=IKsin(j4);
IkReal x12203=IKcos(j4);
IkReal x12204=(gconst10*r21);
IkReal x12205=((1.0)*x12203);
IkReal x12206=((1.0)*gconst11*x12202);
evalcond[0]=(r02*x12202);
evalcond[1]=((((-1.0)*r02*x12205))+(((-1.0)*sj0)));
evalcond[2]=(((x12202*x12204))+(((-1.0)*r20*x12206)));
evalcond[3]=((((-1.0)*r10*x12206))+((gconst10*r11*x12202)));
evalcond[4]=(((x12203*x12204))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12208=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12208.valid){
continue;
}
IkReal x12207=x12208.value;
cj4array[0]=(((cj1*cj2*x12207))+(((-1.0)*sj1*sj2*x12207)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12209=IKsin(j4);
IkReal x12210=IKcos(j4);
IkReal x12211=((1.0)*sj0);
IkReal x12212=(gconst10*x12209);
IkReal x12213=((1.0)*x12210);
IkReal x12214=((1.0)*gconst11*x12209);
evalcond[0]=(r02*x12209);
evalcond[1]=((((-1.0)*x12211))+(((-1.0)*r02*x12213)));
evalcond[2]=(((r21*x12212))+(((-1.0)*r20*x12214)));
evalcond[3]=((((-1.0)*r10*x12214))+((r11*x12212)));
evalcond[4]=((((-1.0)*gconst11*r10*x12213))+(((-1.0)*cj2*sj1*x12211))+(((-1.0)*cj1*sj2*x12211))+((gconst10*r11*x12210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12215=IKPowWithIntegerCheck(r02,-1);
if(!x12215.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12215.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12216=IKsin(j4);
IkReal x12217=IKcos(j4);
IkReal x12218=(gconst10*r21);
IkReal x12219=((1.0)*cj1);
IkReal x12220=(gconst10*r11);
IkReal x12221=((1.0)*gconst11*x12216);
IkReal x12222=((1.0)*gconst11*x12217);
evalcond[0]=(r02*x12216);
evalcond[1]=(((x12216*x12218))+(((-1.0)*r20*x12221)));
evalcond[2]=(((x12216*x12220))+(((-1.0)*r10*x12221)));
evalcond[3]=(((x12217*x12218))+((sj1*sj2))+(((-1.0)*cj2*x12219))+(((-1.0)*r20*x12222)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x12219))+((x12217*x12220))+(((-1.0)*r10*x12222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12223=((1.0)*gconst11);
CheckValue<IkReal> x12224 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x12223))+(((-1.0)*cj0*r00*x12223))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12224.valid){
continue;
}
CheckValue<IkReal> x12225=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12224.value)+(((1.5707963267949)*(x12225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12226=IKsin(j4);
IkReal x12227=IKcos(j4);
IkReal x12228=((1.0)*gconst11);
IkReal x12229=((1.0)*cj2);
IkReal x12230=((1.0)*sj0);
IkReal x12231=(cj1*sj2);
IkReal x12232=(gconst10*x12227);
IkReal x12233=(gconst10*x12226);
IkReal x12234=((1.0)*x12227);
evalcond[0]=((((-1.0)*r20*x12226*x12228))+((r21*x12233)));
evalcond[1]=((((-1.0)*r12*x12234))+(((-1.0)*r10*x12226*x12228))+cj0+((r11*x12233)));
evalcond[2]=((((-1.0)*cj1*x12229))+((sj1*sj2))+(((-1.0)*r20*x12227*x12228))+((r21*x12232)));
evalcond[3]=(((r01*x12233))+(((-1.0)*r02*x12234))+(((-1.0)*x12230))+(((-1.0)*r00*x12226*x12228)));
evalcond[4]=(((r01*x12232))+((r02*x12226))+(((-1.0)*cj0*x12231))+(((-1.0)*r00*x12227*x12228))+(((-1.0)*cj0*sj1*x12229)));
evalcond[5]=((((-1.0)*sj0*sj1*x12229))+(((-1.0)*x12230*x12231))+(((-1.0)*r10*x12227*x12228))+((r11*x12232))+((r12*x12226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12235=(gconst10*r21);
IkReal x12236=(gconst11*r20);
IkReal x12237=(sj1*sj2);
IkReal x12238=(cj1*cj2);
CheckValue<IkReal> x12239=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12235*x12235)))+(((2.0)*x12235*x12236))+(((-1.0)*(r22*r22)))+(((-1.0)*(x12236*x12236))))),-1);
if(!x12239.valid){
continue;
}
CheckValue<IkReal> x12240 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12238))+((r22*x12237)))),IkReal((((x12235*x12237))+(((-1.0)*x12236*x12237))+(((-1.0)*x12235*x12238))+((x12236*x12238)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12239.value)))+(x12240.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12241=IKsin(j4);
IkReal x12242=IKcos(j4);
IkReal x12243=((1.0)*cj2);
IkReal x12244=((1.0)*sj0);
IkReal x12245=(cj1*sj2);
IkReal x12246=((1.0)*x12242);
IkReal x12247=(gconst10*x12242);
IkReal x12248=(gconst10*x12241);
IkReal x12249=((1.0)*gconst11*x12241);
evalcond[0]=((((-1.0)*r20*x12249))+(((-1.0)*r22*x12246))+((r21*x12248)));
evalcond[1]=((((-1.0)*r12*x12246))+(((-1.0)*r10*x12249))+cj0+((r11*x12248)));
evalcond[2]=(((r01*x12248))+(((-1.0)*x12244))+(((-1.0)*r02*x12246))+(((-1.0)*r00*x12249)));
evalcond[3]=((((-1.0)*cj1*x12243))+((sj1*sj2))+((r22*x12241))+(((-1.0)*gconst11*r20*x12246))+((r21*x12247)));
evalcond[4]=((((-1.0)*cj0*sj1*x12243))+(((-1.0)*gconst11*r00*x12246))+((r01*x12247))+((r02*x12241))+(((-1.0)*cj0*x12245)));
evalcond[5]=(((r11*x12247))+((r12*x12241))+(((-1.0)*x12244*x12245))+(((-1.0)*gconst11*r10*x12246))+(((-1.0)*sj0*sj1*x12243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12250=((1.0)*sj0);
IkReal x12251=((1.0)*gconst10);
CheckValue<IkReal> x12252 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12250))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12250))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*cj0*r01*x12251)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12252.valid){
continue;
}
CheckValue<IkReal> x12253=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12251))+(((-1.0)*gconst11*r21)))),-1);
if(!x12253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12252.value)+(((1.5707963267949)*(x12253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12254=IKsin(j4);
IkReal x12255=IKcos(j4);
IkReal x12256=((1.0)*cj2);
IkReal x12257=((1.0)*sj0);
IkReal x12258=(cj1*sj2);
IkReal x12259=((1.0)*x12255);
IkReal x12260=(gconst10*x12255);
IkReal x12261=(gconst10*x12254);
IkReal x12262=((1.0)*gconst11*x12254);
evalcond[0]=((((-1.0)*r20*x12262))+(((-1.0)*r22*x12259))+((r21*x12261)));
evalcond[1]=(cj0+(((-1.0)*r12*x12259))+((r11*x12261))+(((-1.0)*r10*x12262)));
evalcond[2]=(((r01*x12261))+(((-1.0)*r02*x12259))+(((-1.0)*x12257))+(((-1.0)*r00*x12262)));
evalcond[3]=((((-1.0)*gconst11*r20*x12259))+((r22*x12254))+((sj1*sj2))+((r21*x12260))+(((-1.0)*cj1*x12256)));
evalcond[4]=((((-1.0)*gconst11*r00*x12259))+(((-1.0)*cj0*sj1*x12256))+((r01*x12260))+(((-1.0)*cj0*x12258))+((r02*x12254)));
evalcond[5]=(((r12*x12254))+((r11*x12260))+(((-1.0)*gconst11*r10*x12259))+(((-1.0)*sj0*sj1*x12256))+(((-1.0)*x12257*x12258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12263=((1.0)*gconst11);
CheckValue<IkReal> x12264 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12263))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12264.valid){
continue;
}
CheckValue<IkReal> x12265=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12263)))),-1);
if(!x12265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12264.value)+(((1.5707963267949)*(x12265.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12266=IKsin(j4);
IkReal x12267=IKcos(j4);
IkReal x12268=((1.0)*cj2);
IkReal x12269=((1.0)*sj0);
IkReal x12270=(cj1*sj2);
IkReal x12271=((1.0)*x12267);
IkReal x12272=(gconst10*x12267);
IkReal x12273=(gconst10*x12266);
IkReal x12274=((1.0)*gconst11*x12266);
evalcond[0]=(((r21*x12273))+(((-1.0)*r22*x12271))+(((-1.0)*r20*x12274)));
evalcond[1]=(cj0+(((-1.0)*r10*x12274))+(((-1.0)*r12*x12271))+((r11*x12273)));
evalcond[2]=((((-1.0)*r02*x12271))+(((-1.0)*r00*x12274))+(((-1.0)*x12269))+((r01*x12273)));
evalcond[3]=(((r21*x12272))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12271))+(((-1.0)*cj1*x12268))+((r22*x12266)));
evalcond[4]=((((-1.0)*cj0*x12270))+(((-1.0)*cj0*sj1*x12268))+(((-1.0)*gconst11*r00*x12271))+((r01*x12272))+((r02*x12266)));
evalcond[5]=((((-1.0)*x12269*x12270))+((r12*x12266))+((r11*x12272))+(((-1.0)*gconst11*r10*x12271))+(((-1.0)*sj0*sj1*x12268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12275=((-1.0)*r11);
CheckValue<IkReal> x12278 = IKatan2WithCheck(IkReal(x12275),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12278.valid){
continue;
}
IkReal x12276=((1.0)*(x12278.value));
IkReal x12277=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12276)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12276)));
IkReal gconst10=(x12275*x12277);
IkReal gconst11=((1.0)*r10*x12277);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12279=gconst10*gconst10;
IkReal x12280=gconst11*gconst11;
IkReal x12281=(gconst10*r21);
IkReal x12282=(cj3*r00);
IkReal x12283=(r00*sj3);
IkReal x12284=((1.0)*gconst11);
IkReal x12285=(gconst10*r20);
IkReal x12286=(r01*sj3);
IkReal x12287=(cj3*gconst11*r01);
IkReal x12288=(r21*x12279);
IkReal x12289=(r20*x12280);
CheckValue<IkReal> x12290 = IKatan2WithCheck(IkReal((((r22*x12287))+((gconst10*r22*x12282)))),IkReal((((x12281*x12287))+(((-1.0)*x12282*x12284*x12285))+((x12282*x12288))+(((-1.0)*cj3*r01*x12289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12290.valid){
continue;
}
CheckValue<IkReal> x12291=IKPowWithIntegerCheck(IKsign((((x12283*x12289))+(((-1.0)*x12284*x12285*x12286))+((x12286*x12288))+(((-1.0)*x12281*x12283*x12284))+((r02*r22*sj3)))),-1);
if(!x12291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12290.value)+(((1.5707963267949)*(x12291.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12292=IKsin(j4);
IkReal x12293=IKcos(j4);
IkReal x12294=(sj1*sj2);
IkReal x12295=(gconst10*sj3);
IkReal x12296=(cj3*gconst10);
IkReal x12297=(gconst11*r20);
IkReal x12298=(gconst11*r21);
IkReal x12299=(gconst11*r00);
IkReal x12300=(cj3*gconst11);
IkReal x12301=(gconst11*r10);
IkReal x12302=((1.0)*cj1);
IkReal x12303=(cj2*sj1);
IkReal x12304=(gconst11*sj3);
IkReal x12305=(cj2*x12302);
IkReal x12306=((1.0)*x12293);
IkReal x12307=((1.0)*x12292);
IkReal x12308=(gconst10*x12292);
IkReal x12309=(cj3*x12292);
IkReal x12310=(sj3*x12293);
evalcond[0]=((((-1.0)*x12297*x12307))+((r21*x12308))+(((-1.0)*r22*x12306)));
evalcond[1]=(((r11*x12308))+(((-1.0)*x12301*x12307))+(((-1.0)*r12*x12306)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12306))+((r01*x12308))+(((-1.0)*x12299*x12307)));
evalcond[3]=(((r00*x12295))+(((-1.0)*cj3*x12299*x12306))+((r01*x12304))+((r01*x12293*x12296))+((r02*x12309)));
evalcond[4]=(((r00*x12296))+((x12299*x12310))+(((-1.0)*r02*sj3*x12307))+((r01*x12300))+(((-1.0)*r01*x12295*x12306)));
evalcond[5]=(((r20*x12295))+((cj1*sj2))+x12303+((r21*x12293*x12296))+(((-1.0)*cj3*x12297*x12306))+((sj3*x12298))+((r22*x12309)));
evalcond[6]=(((r10*x12295))+((r11*x12304))+x12294+((r11*x12293*x12296))+((r12*x12309))+(((-1.0)*x12305))+(((-1.0)*r10*x12300*x12306)));
evalcond[7]=((((-1.0)*r22*sj3*x12307))+((r20*x12296))+((cj3*x12298))+x12294+(((-1.0)*x12305))+(((-1.0)*r21*x12295*x12306))+((x12297*x12310)));
evalcond[8]=(((x12301*x12310))+(((-1.0)*r12*sj3*x12307))+(((-1.0)*r11*x12295*x12306))+((r10*x12296))+(((-1.0)*x12303))+((r11*x12300))+(((-1.0)*sj2*x12302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12311 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12311.valid){
continue;
}
CheckValue<IkReal> x12312=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12311.value)+(((1.5707963267949)*(x12312.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12313=IKsin(j4);
IkReal x12314=IKcos(j4);
IkReal x12315=(sj1*sj2);
IkReal x12316=(gconst10*sj3);
IkReal x12317=(cj3*gconst10);
IkReal x12318=(gconst11*r20);
IkReal x12319=(gconst11*r21);
IkReal x12320=(gconst11*r00);
IkReal x12321=(cj3*gconst11);
IkReal x12322=(gconst11*r10);
IkReal x12323=((1.0)*cj1);
IkReal x12324=(cj2*sj1);
IkReal x12325=(gconst11*sj3);
IkReal x12326=(cj2*x12323);
IkReal x12327=((1.0)*x12314);
IkReal x12328=((1.0)*x12313);
IkReal x12329=(gconst10*x12313);
IkReal x12330=(cj3*x12313);
IkReal x12331=(sj3*x12314);
evalcond[0]=((((-1.0)*r22*x12327))+((r21*x12329))+(((-1.0)*x12318*x12328)));
evalcond[1]=((((-1.0)*r12*x12327))+((r11*x12329))+(((-1.0)*x12322*x12328)));
evalcond[2]=((-1.0)+(((-1.0)*x12320*x12328))+((r01*x12329))+(((-1.0)*r02*x12327)));
evalcond[3]=(((r01*x12325))+(((-1.0)*cj3*x12320*x12327))+((r00*x12316))+((r01*x12314*x12317))+((r02*x12330)));
evalcond[4]=(((r01*x12321))+(((-1.0)*r01*x12316*x12327))+((r00*x12317))+(((-1.0)*r02*sj3*x12328))+((x12320*x12331)));
evalcond[5]=(((sj3*x12319))+((cj1*sj2))+x12324+(((-1.0)*cj3*x12318*x12327))+((r22*x12330))+((r20*x12316))+((r21*x12314*x12317)));
evalcond[6]=(((r10*x12316))+((r11*x12314*x12317))+x12315+(((-1.0)*x12326))+(((-1.0)*r10*x12321*x12327))+((r12*x12330))+((r11*x12325)));
evalcond[7]=(x12315+(((-1.0)*x12326))+((x12318*x12331))+(((-1.0)*r22*sj3*x12328))+(((-1.0)*r21*x12316*x12327))+((r20*x12317))+((cj3*x12319)));
evalcond[8]=(((r10*x12317))+((x12322*x12331))+(((-1.0)*r12*sj3*x12328))+(((-1.0)*sj2*x12323))+(((-1.0)*r11*x12316*x12327))+((r11*x12321))+(((-1.0)*x12324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12332=((-1.0)*r11);
CheckValue<IkReal> x12335 = IKatan2WithCheck(IkReal(x12332),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12335.valid){
continue;
}
IkReal x12333=((1.0)*(x12335.value));
IkReal x12334=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12333)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12333)));
IkReal gconst10=(x12332*x12334);
IkReal gconst11=((1.0)*r10*x12334);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12336=gconst10*gconst10;
IkReal x12337=gconst11*gconst11;
IkReal x12338=(gconst10*r21);
IkReal x12339=(cj3*r00);
IkReal x12340=(r00*sj3);
IkReal x12341=((1.0)*gconst11);
IkReal x12342=(gconst10*r20);
IkReal x12343=(r01*sj3);
IkReal x12344=(cj3*gconst11*r01);
IkReal x12345=(r21*x12336);
IkReal x12346=(r20*x12337);
CheckValue<IkReal> x12347 = IKatan2WithCheck(IkReal((((r22*x12344))+((gconst10*r22*x12339)))),IkReal((((x12339*x12345))+(((-1.0)*cj3*r01*x12346))+(((-1.0)*x12339*x12341*x12342))+((x12338*x12344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12347.valid){
continue;
}
CheckValue<IkReal> x12348=IKPowWithIntegerCheck(IKsign((((x12340*x12346))+((x12343*x12345))+(((-1.0)*x12341*x12342*x12343))+(((-1.0)*x12338*x12340*x12341))+((r02*r22*sj3)))),-1);
if(!x12348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12347.value)+(((1.5707963267949)*(x12348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12349=IKsin(j4);
IkReal x12350=IKcos(j4);
IkReal x12351=(cj2*sj1);
IkReal x12352=(cj1*sj2);
IkReal x12353=(gconst10*sj3);
IkReal x12354=(cj3*gconst10);
IkReal x12355=(gconst11*r20);
IkReal x12356=(gconst11*r21);
IkReal x12357=(gconst11*r00);
IkReal x12358=(sj1*sj2);
IkReal x12359=(cj3*gconst11);
IkReal x12360=(gconst11*r10);
IkReal x12361=(cj1*cj2);
IkReal x12362=(gconst11*sj3);
IkReal x12363=((1.0)*x12350);
IkReal x12364=((1.0)*x12349);
IkReal x12365=(gconst10*x12349);
IkReal x12366=(cj3*x12349);
IkReal x12367=(sj3*x12350);
IkReal x12368=(x12351+x12352);
evalcond[0]=((((-1.0)*r22*x12363))+((r21*x12365))+(((-1.0)*x12355*x12364)));
evalcond[1]=(((r11*x12365))+(((-1.0)*r12*x12363))+(((-1.0)*x12360*x12364)));
evalcond[2]=((1.0)+(((-1.0)*x12357*x12364))+(((-1.0)*r02*x12363))+((r01*x12365)));
evalcond[3]=((((-1.0)*cj3*x12357*x12363))+((r00*x12353))+((r02*x12366))+((r01*x12362))+((r01*x12350*x12354)));
evalcond[4]=((((-1.0)*r02*sj3*x12364))+((r01*x12359))+((r00*x12354))+((x12357*x12367))+(((-1.0)*r01*x12353*x12363)));
evalcond[5]=(((r20*x12353))+(((-1.0)*cj3*x12355*x12363))+x12368+((sj3*x12356))+((r22*x12366))+((r21*x12350*x12354)));
evalcond[6]=((((-1.0)*x12358))+((r11*x12362))+x12361+((r11*x12350*x12354))+(((-1.0)*r10*x12359*x12363))+((r10*x12353))+((r12*x12366)));
evalcond[7]=(x12368+(((-1.0)*r11*x12353*x12363))+((r11*x12359))+((x12360*x12367))+((r10*x12354))+(((-1.0)*r12*sj3*x12364)));
evalcond[8]=(((r20*x12354))+x12358+((cj3*x12356))+(((-1.0)*r21*x12353*x12363))+(((-1.0)*x12361))+(((-1.0)*r22*sj3*x12364))+((x12355*x12367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12369=((1.0)*gconst11);
CheckValue<IkReal> x12370 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12369)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12370.valid){
continue;
}
CheckValue<IkReal> x12371=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12369))+(((-1.0)*gconst10*r20)))),-1);
if(!x12371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12370.value)+(((1.5707963267949)*(x12371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12372=IKsin(j4);
IkReal x12373=IKcos(j4);
IkReal x12374=(cj2*sj1);
IkReal x12375=(cj1*sj2);
IkReal x12376=(gconst10*sj3);
IkReal x12377=(cj3*gconst10);
IkReal x12378=(gconst11*r20);
IkReal x12379=(gconst11*r21);
IkReal x12380=(gconst11*r00);
IkReal x12381=(sj1*sj2);
IkReal x12382=(cj3*gconst11);
IkReal x12383=(gconst11*r10);
IkReal x12384=(cj1*cj2);
IkReal x12385=(gconst11*sj3);
IkReal x12386=((1.0)*x12373);
IkReal x12387=((1.0)*x12372);
IkReal x12388=(gconst10*x12372);
IkReal x12389=(cj3*x12372);
IkReal x12390=(sj3*x12373);
IkReal x12391=(x12374+x12375);
evalcond[0]=(((r21*x12388))+(((-1.0)*r22*x12386))+(((-1.0)*x12378*x12387)));
evalcond[1]=(((r11*x12388))+(((-1.0)*x12383*x12387))+(((-1.0)*r12*x12386)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12386))+(((-1.0)*x12380*x12387))+((r01*x12388)));
evalcond[3]=(((r02*x12389))+((r01*x12385))+(((-1.0)*cj3*x12380*x12386))+((r01*x12373*x12377))+((r00*x12376)));
evalcond[4]=(((x12380*x12390))+((r01*x12382))+(((-1.0)*r02*sj3*x12387))+(((-1.0)*r01*x12376*x12386))+((r00*x12377)));
evalcond[5]=(((r21*x12373*x12377))+(((-1.0)*cj3*x12378*x12386))+x12391+((sj3*x12379))+((r20*x12376))+((r22*x12389)));
evalcond[6]=((((-1.0)*r10*x12382*x12386))+((r12*x12389))+((r11*x12385))+((r10*x12376))+x12384+(((-1.0)*x12381))+((r11*x12373*x12377)));
evalcond[7]=((((-1.0)*r11*x12376*x12386))+((r11*x12382))+((r10*x12377))+x12391+((x12383*x12390))+(((-1.0)*r12*sj3*x12387)));
evalcond[8]=((((-1.0)*r21*x12376*x12386))+x12381+(((-1.0)*r22*sj3*x12387))+((cj3*x12379))+(((-1.0)*x12384))+((x12378*x12390))+((r20*x12377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12392=((-1.0)*r11);
IkReal x12393=((-1.0)*r10);
CheckValue<IkReal> x12395 = IKatan2WithCheck(IkReal(x12392),IkReal(x12393),IKFAST_ATAN2_MAGTHRESH);
if(!x12395.valid){
continue;
}
IkReal x12394=((1.0)*(x12395.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12394)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12393);
rxp1_1=(px*r21);
rxp1_2=(px*x12392);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12394)));
IkReal gconst10=x12392;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12396=((-1.0)*r11);
IkReal x12397=((-1.0)*r10);
CheckValue<IkReal> x12399 = IKatan2WithCheck(IkReal(x12396),IkReal(x12397),IKFAST_ATAN2_MAGTHRESH);
if(!x12399.valid){
continue;
}
IkReal x12398=((1.0)*(x12399.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12398)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12397);
rxp1_1=(px*r21);
rxp1_2=(px*x12396);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12398)));
IkReal gconst10=x12396;
IkReal gconst11=((1.0)*r10);
IkReal x12400=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r11*r21*x12400))+(((-1.0)*r10*r20*x12400)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12401=((-1.0)*r11);
IkReal x12402=((-1.0)*r10);
CheckValue<IkReal> x12404 = IKatan2WithCheck(IkReal(x12401),IkReal(x12402),IKFAST_ATAN2_MAGTHRESH);
if(!x12404.valid){
continue;
}
IkReal x12403=((1.0)*(x12404.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12403)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12402);
rxp1_1=(px*r21);
rxp1_2=(px*x12401);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12403)));
IkReal gconst10=x12401;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12406=IKPowWithIntegerCheck(r02,-1);
if(!x12406.valid){
continue;
}
IkReal x12405=x12406.value;
CheckValue<IkReal> x12407=IKPowWithIntegerCheck(cj3,-1);
if(!x12407.valid){
continue;
}
if( IKabs((x12405*(x12407.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12405)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12405*(x12407.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12405))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12405*(x12407.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12405));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12408=IKsin(j4);
IkReal x12409=IKcos(j4);
IkReal x12410=(cj3*r10);
IkReal x12411=((1.0)*gconst11);
IkReal x12412=(sj1*sj2);
IkReal x12413=(gconst11*sj3);
IkReal x12414=(cj3*r11);
IkReal x12415=(cj2*sj1);
IkReal x12416=(gconst10*r20);
IkReal x12417=(gconst10*sj3);
IkReal x12418=((1.0)*cj0);
IkReal x12419=((1.0)*sj0);
IkReal x12420=(cj1*sj2);
IkReal x12421=(cj3*r21);
IkReal x12422=((1.0)*cj1*cj2);
IkReal x12423=(r20*x12409);
IkReal x12424=(gconst10*x12408);
IkReal x12425=(gconst10*x12409);
IkReal x12426=(r02*x12408);
IkReal x12427=((1.0)*x12409);
evalcond[0]=((((-1.0)*x12419))+(((-1.0)*r02*x12427)));
evalcond[1]=(((r21*x12424))+(((-1.0)*r20*x12408*x12411)));
evalcond[2]=(cj0+(((-1.0)*r10*x12408*x12411))+((r11*x12424)));
evalcond[3]=((((-1.0)*cj1*cj2*x12418))+((cj0*x12412))+((cj3*x12426)));
evalcond[4]=((((-1.0)*x12418*x12420))+(((-1.0)*x12415*x12418))+(((-1.0)*sj3*x12426)));
evalcond[5]=(((sj3*x12416))+((r21*x12413))+((x12421*x12425))+x12420+x12415+(((-1.0)*cj3*x12411*x12423)));
evalcond[6]=(((cj3*x12416))+(((-1.0)*r21*x12417*x12427))+(((-1.0)*x12422))+((gconst11*x12421))+x12412+((x12413*x12423)));
evalcond[7]=(((r10*x12417))+(((-1.0)*cj1*cj2*x12419))+((r11*x12413))+(((-1.0)*x12409*x12410*x12411))+((sj0*x12412))+((x12414*x12425)));
evalcond[8]=(((gconst11*x12414))+(((-1.0)*x12415*x12419))+(((-1.0)*x12419*x12420))+(((-1.0)*r11*x12417*x12427))+((gconst10*x12410))+((r10*x12409*x12413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12428=((1.0)*r20);
IkReal x12429=((1.0)*gconst11);
CheckValue<IkReal> x12430=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12429))),-1);
if(!x12430.valid){
continue;
}
CheckValue<IkReal> x12431=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12428))+((cj3*gconst10*r21))),-1);
if(!x12431.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12430.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12431.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12429))+(((-1.0)*gconst10*sj3*x12428)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12430.value)))+IKsqr(((x12431.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12429))+(((-1.0)*gconst10*sj3*x12428))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12430.value)), ((x12431.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12429))+(((-1.0)*gconst10*sj3*x12428))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12432=IKsin(j4);
IkReal x12433=IKcos(j4);
IkReal x12434=(cj3*r10);
IkReal x12435=((1.0)*gconst11);
IkReal x12436=(sj1*sj2);
IkReal x12437=(gconst11*sj3);
IkReal x12438=(cj3*r11);
IkReal x12439=(cj2*sj1);
IkReal x12440=(gconst10*r20);
IkReal x12441=(gconst10*sj3);
IkReal x12442=((1.0)*cj0);
IkReal x12443=((1.0)*sj0);
IkReal x12444=(cj1*sj2);
IkReal x12445=(cj3*r21);
IkReal x12446=((1.0)*cj1*cj2);
IkReal x12447=(r20*x12433);
IkReal x12448=(gconst10*x12432);
IkReal x12449=(gconst10*x12433);
IkReal x12450=(r02*x12432);
IkReal x12451=((1.0)*x12433);
evalcond[0]=((((-1.0)*x12443))+(((-1.0)*r02*x12451)));
evalcond[1]=((((-1.0)*r20*x12432*x12435))+((r21*x12448)));
evalcond[2]=(cj0+((r11*x12448))+(((-1.0)*r10*x12432*x12435)));
evalcond[3]=(((cj0*x12436))+((cj3*x12450))+(((-1.0)*cj1*cj2*x12442)));
evalcond[4]=((((-1.0)*sj3*x12450))+(((-1.0)*x12439*x12442))+(((-1.0)*x12442*x12444)));
evalcond[5]=(((r21*x12437))+(((-1.0)*cj3*x12435*x12447))+((x12445*x12449))+((sj3*x12440))+x12439+x12444);
evalcond[6]=((((-1.0)*x12446))+((cj3*x12440))+x12436+((gconst11*x12445))+((x12437*x12447))+(((-1.0)*r21*x12441*x12451)));
evalcond[7]=(((sj0*x12436))+(((-1.0)*x12433*x12434*x12435))+((x12438*x12449))+((r11*x12437))+(((-1.0)*cj1*cj2*x12443))+((r10*x12441)));
evalcond[8]=(((r10*x12433*x12437))+(((-1.0)*r11*x12441*x12451))+((gconst10*x12434))+(((-1.0)*x12443*x12444))+(((-1.0)*x12439*x12443))+((gconst11*x12438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12452=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12452.valid){
continue;
}
CheckValue<IkReal> x12453=IKPowWithIntegerCheck(r02,-1);
if(!x12453.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12452.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12453.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12452.value)))+IKsqr(((-1.0)*sj0*(x12453.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12452.value)), ((-1.0)*sj0*(x12453.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12454=IKsin(j4);
IkReal x12455=IKcos(j4);
IkReal x12456=(cj3*r10);
IkReal x12457=((1.0)*gconst11);
IkReal x12458=(sj1*sj2);
IkReal x12459=(gconst11*sj3);
IkReal x12460=(cj3*r11);
IkReal x12461=(cj2*sj1);
IkReal x12462=(gconst10*r20);
IkReal x12463=(gconst10*sj3);
IkReal x12464=((1.0)*cj0);
IkReal x12465=((1.0)*sj0);
IkReal x12466=(cj1*sj2);
IkReal x12467=(cj3*r21);
IkReal x12468=((1.0)*cj1*cj2);
IkReal x12469=(r20*x12455);
IkReal x12470=(gconst10*x12454);
IkReal x12471=(gconst10*x12455);
IkReal x12472=(r02*x12454);
IkReal x12473=((1.0)*x12455);
evalcond[0]=((((-1.0)*r02*x12473))+(((-1.0)*x12465)));
evalcond[1]=((((-1.0)*r20*x12454*x12457))+((r21*x12470)));
evalcond[2]=(cj0+(((-1.0)*r10*x12454*x12457))+((r11*x12470)));
evalcond[3]=(((cj3*x12472))+((cj0*x12458))+(((-1.0)*cj1*cj2*x12464)));
evalcond[4]=((((-1.0)*x12464*x12466))+(((-1.0)*sj3*x12472))+(((-1.0)*x12461*x12464)));
evalcond[5]=(((sj3*x12462))+x12466+x12461+(((-1.0)*cj3*x12457*x12469))+((x12467*x12471))+((r21*x12459)));
evalcond[6]=(((gconst11*x12467))+((cj3*x12462))+((x12459*x12469))+(((-1.0)*x12468))+x12458+(((-1.0)*r21*x12463*x12473)));
evalcond[7]=((((-1.0)*x12455*x12456*x12457))+((r11*x12459))+((sj0*x12458))+((x12460*x12471))+(((-1.0)*cj1*cj2*x12465))+((r10*x12463)));
evalcond[8]=(((gconst11*x12460))+(((-1.0)*x12465*x12466))+(((-1.0)*r11*x12463*x12473))+((r10*x12455*x12459))+(((-1.0)*x12461*x12465))+((gconst10*x12456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12474=((-1.0)*r11);
CheckValue<IkReal> x12477 = IKatan2WithCheck(IkReal(x12474),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12477.valid){
continue;
}
IkReal x12475=((1.0)*(x12477.value));
IkReal x12476=x11800;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12475)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12475)));
IkReal gconst10=(x12474*x12476);
IkReal gconst11=((1.0)*r10*x12476);
IkReal x12478=r12*r12;
IkReal x12479=((1.0)*sj0);
IkReal x12480=(cj0*r02);
IkReal x12481=x11800;
j4eval[0]=((IKabs(((((-1.0)*x12480))+(((-1.0)*r12*x12479)))))+(IKabs(((((-1.0)*x12479*x12481))+((r12*x12480*x12481))+((sj0*x12478*x12481))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12482=((1.0)*r12);
IkReal x12483=(sj1*sj2);
IkReal x12484=((1.0)*r21);
IkReal x12485=(cj3*gconst11);
IkReal x12486=(r11*sj3);
IkReal x12487=(gconst11*r20);
IkReal x12488=((1.0)*sj3);
IkReal x12489=(cj1*cj2);
IkReal x12490=(gconst10*r21*sj3);
IkReal x12491=(cj3*gconst10*r20);
CheckValue<IkReal> x12492=IKPowWithIntegerCheck((((gconst11*r10*x12490))+(((-1.0)*gconst11*r10*x12487*x12488))+(((-1.0)*x12484*x12486*(gconst10*gconst10)))+((gconst10*x12486*x12487))),-1);
if(!x12492.valid){
continue;
}
CheckValue<IkReal> x12493=IKPowWithIntegerCheck(((((-1.0)*gconst10*sj3*x12484))+((sj3*x12487))),-1);
if(!x12493.valid){
continue;
}
if( IKabs(((x12492.value)*(((((-1.0)*x12482*x12483))+(((-1.0)*cj0*x12487*x12488))+((r12*x12489))+((cj0*x12490))+(((-1.0)*r21*x12482*x12485))+(((-1.0)*x12482*x12491)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12493.value)*(((((-1.0)*x12483))+(((-1.0)*x12484*x12485))+x12489+(((-1.0)*x12491)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12492.value)*(((((-1.0)*x12482*x12483))+(((-1.0)*cj0*x12487*x12488))+((r12*x12489))+((cj0*x12490))+(((-1.0)*r21*x12482*x12485))+(((-1.0)*x12482*x12491))))))+IKsqr(((x12493.value)*(((((-1.0)*x12483))+(((-1.0)*x12484*x12485))+x12489+(((-1.0)*x12491))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12492.value)*(((((-1.0)*x12482*x12483))+(((-1.0)*cj0*x12487*x12488))+((r12*x12489))+((cj0*x12490))+(((-1.0)*r21*x12482*x12485))+(((-1.0)*x12482*x12491))))), ((x12493.value)*(((((-1.0)*x12483))+(((-1.0)*x12484*x12485))+x12489+(((-1.0)*x12491))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12494=IKsin(j4);
IkReal x12495=IKcos(j4);
IkReal x12496=(cj3*r10);
IkReal x12497=(gconst11*r20);
IkReal x12498=(gconst11*sj3);
IkReal x12499=(sj1*sj2);
IkReal x12500=(cj3*r11);
IkReal x12501=(r10*sj3);
IkReal x12502=(gconst10*r01);
IkReal x12503=(gconst10*sj3);
IkReal x12504=(cj2*sj1);
IkReal x12505=((1.0)*sj0);
IkReal x12506=(cj1*sj2);
IkReal x12507=(gconst10*r21);
IkReal x12508=(cj3*gconst10);
IkReal x12509=(cj3*gconst11);
IkReal x12510=((1.0)*cj0);
IkReal x12511=((1.0)*x12494);
IkReal x12512=((1.0)*cj1*cj2);
IkReal x12513=(gconst11*x12495);
IkReal x12514=(sj3*x12495);
IkReal x12515=(gconst10*x12494);
IkReal x12516=((1.0)*x12495);
IkReal x12517=(cj3*x12495);
IkReal x12518=(cj3*x12494);
evalcond[0]=((((-1.0)*x12497*x12511))+((x12494*x12507)));
evalcond[1]=((((-1.0)*r12*x12516))+cj0+(((-1.0)*gconst11*r10*x12511))+((r11*x12515)));
evalcond[2]=((((-1.0)*x12505))+(((-1.0)*gconst11*r00*x12511))+(((-1.0)*r02*x12516))+((x12494*x12502)));
evalcond[3]=(((r20*x12503))+((r21*x12498))+((x12507*x12517))+(((-1.0)*cj3*x12497*x12516))+x12504+x12506);
evalcond[4]=((((-1.0)*x12512))+((r20*x12508))+((r21*x12509))+(((-1.0)*r21*x12503*x12516))+x12499+((x12497*x12514)));
evalcond[5]=(((x12502*x12517))+((r01*x12498))+((r00*x12503))+(((-1.0)*r00*x12509*x12516))+((cj0*x12499))+((r02*x12518))+(((-1.0)*cj1*cj2*x12510)));
evalcond[6]=(((r12*x12518))+((sj0*x12499))+(((-1.0)*x12496*x12513))+(((-1.0)*cj1*cj2*x12505))+((gconst10*x12495*x12500))+((gconst10*x12501))+((r11*x12498)));
evalcond[7]=(((r00*x12495*x12498))+((r01*x12509))+((r00*x12508))+(((-1.0)*r02*sj3*x12511))+(((-1.0)*x12504*x12510))+(((-1.0)*x12506*x12510))+(((-1.0)*x12502*x12514)));
evalcond[8]=((((-1.0)*r11*x12503*x12516))+(((-1.0)*x12505*x12506))+(((-1.0)*x12504*x12505))+((gconst10*x12496))+(((-1.0)*r12*sj3*x12511))+((r10*x12495*x12498))+((gconst11*x12500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12519=((1.0)*sj0);
IkReal x12520=((1.0)*gconst10);
CheckValue<IkReal> x12521 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12519))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12519))+((cj0*gconst11*r00))+(((-1.0)*cj0*r01*x12520))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12521.valid){
continue;
}
CheckValue<IkReal> x12522=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12520))+(((-1.0)*gconst11*r21)))),-1);
if(!x12522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12521.value)+(((1.5707963267949)*(x12522.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12523=IKsin(j4);
IkReal x12524=IKcos(j4);
IkReal x12525=(cj3*r10);
IkReal x12526=(gconst11*r20);
IkReal x12527=(gconst11*sj3);
IkReal x12528=(sj1*sj2);
IkReal x12529=(cj3*r11);
IkReal x12530=(r10*sj3);
IkReal x12531=(gconst10*r01);
IkReal x12532=(gconst10*sj3);
IkReal x12533=(cj2*sj1);
IkReal x12534=((1.0)*sj0);
IkReal x12535=(cj1*sj2);
IkReal x12536=(gconst10*r21);
IkReal x12537=(cj3*gconst10);
IkReal x12538=(cj3*gconst11);
IkReal x12539=((1.0)*cj0);
IkReal x12540=((1.0)*x12523);
IkReal x12541=((1.0)*cj1*cj2);
IkReal x12542=(gconst11*x12524);
IkReal x12543=(sj3*x12524);
IkReal x12544=(gconst10*x12523);
IkReal x12545=((1.0)*x12524);
IkReal x12546=(cj3*x12524);
IkReal x12547=(cj3*x12523);
evalcond[0]=((((-1.0)*x12526*x12540))+((x12523*x12536)));
evalcond[1]=(cj0+((r11*x12544))+(((-1.0)*gconst11*r10*x12540))+(((-1.0)*r12*x12545)));
evalcond[2]=(((x12523*x12531))+(((-1.0)*x12534))+(((-1.0)*gconst11*r00*x12540))+(((-1.0)*r02*x12545)));
evalcond[3]=(((r20*x12532))+(((-1.0)*cj3*x12526*x12545))+((r21*x12527))+x12535+x12533+((x12536*x12546)));
evalcond[4]=(((r20*x12537))+((x12526*x12543))+((r21*x12538))+(((-1.0)*r21*x12532*x12545))+x12528+(((-1.0)*x12541)));
evalcond[5]=(((r00*x12532))+((cj0*x12528))+(((-1.0)*cj1*cj2*x12539))+(((-1.0)*r00*x12538*x12545))+((x12531*x12546))+((r02*x12547))+((r01*x12527)));
evalcond[6]=(((sj0*x12528))+((r12*x12547))+(((-1.0)*x12525*x12542))+(((-1.0)*cj1*cj2*x12534))+((r11*x12527))+((gconst10*x12530))+((gconst10*x12524*x12529)));
evalcond[7]=(((r00*x12537))+(((-1.0)*x12533*x12539))+(((-1.0)*x12535*x12539))+((r00*x12524*x12527))+(((-1.0)*r02*sj3*x12540))+((r01*x12538))+(((-1.0)*x12531*x12543)));
evalcond[8]=((((-1.0)*x12533*x12534))+(((-1.0)*x12534*x12535))+((gconst11*x12529))+(((-1.0)*r12*sj3*x12540))+((gconst10*x12525))+(((-1.0)*r11*x12532*x12545))+((r10*x12524*x12527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12548=gconst10*gconst10;
IkReal x12549=r21*r21;
IkReal x12550=gconst11*gconst11;
IkReal x12551=r20*r20;
IkReal x12552=((1.0)*cj3);
IkReal x12553=(r20*sj3);
IkReal x12554=(gconst10*gconst11);
IkReal x12555=(cj2*sj1);
IkReal x12556=(gconst10*r21);
IkReal x12557=(cj1*sj2);
IkReal x12558=((1.0)*gconst11*r20);
CheckValue<IkReal> x12559 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((gconst10*r22*x12553))+((r22*x12557))+((r22*x12555)))),IkReal((((x12555*x12556))+((r21*x12548*x12553))+((x12556*x12557))+(((-1.0)*x12555*x12558))+((sj3*x12549*x12554))+(((-1.0)*r21*x12550*x12553))+(((-1.0)*x12557*x12558))+(((-1.0)*sj3*x12551*x12554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12559.valid){
continue;
}
CheckValue<IkReal> x12560=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12552*(r22*r22)))+(((-1.0)*x12550*x12551*x12552))+(((2.0)*cj3*r20*r21*x12554))+(((-1.0)*x12548*x12549*x12552)))),-1);
if(!x12560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12559.value)+(((1.5707963267949)*(x12560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12561=IKsin(j4);
IkReal x12562=IKcos(j4);
IkReal x12563=(cj3*r10);
IkReal x12564=(gconst11*r20);
IkReal x12565=(gconst11*sj3);
IkReal x12566=(sj1*sj2);
IkReal x12567=(gconst11*r00);
IkReal x12568=(cj3*r11);
IkReal x12569=(gconst10*sj3);
IkReal x12570=(cj2*sj1);
IkReal x12571=(cj3*r01);
IkReal x12572=((1.0)*sj0);
IkReal x12573=(cj1*sj2);
IkReal x12574=(cj3*r21);
IkReal x12575=(cj3*gconst10);
IkReal x12576=((1.0)*cj0);
IkReal x12577=((1.0)*x12562);
IkReal x12578=((1.0)*x12561);
IkReal x12579=((1.0)*cj1*cj2);
IkReal x12580=(cj3*x12561);
IkReal x12581=(gconst10*x12561);
IkReal x12582=(gconst10*x12562);
evalcond[0]=((((-1.0)*x12564*x12578))+((r21*x12581))+(((-1.0)*r22*x12577)));
evalcond[1]=((((-1.0)*gconst11*r10*x12578))+cj0+(((-1.0)*r12*x12577))+((r11*x12581)));
evalcond[2]=(((r01*x12581))+(((-1.0)*x12572))+(((-1.0)*x12567*x12578))+(((-1.0)*r02*x12577)));
evalcond[3]=((((-1.0)*cj3*x12564*x12577))+((x12574*x12582))+((r20*x12569))+((r22*x12580))+((r21*x12565))+x12570+x12573);
evalcond[4]=(((gconst11*x12574))+(((-1.0)*x12579))+(((-1.0)*r22*sj3*x12578))+((r20*x12575))+x12566+(((-1.0)*r21*x12569*x12577))+((sj3*x12562*x12564)));
evalcond[5]=((((-1.0)*cj3*x12567*x12577))+((r01*x12565))+((r00*x12569))+((x12571*x12582))+((r02*x12580))+(((-1.0)*cj1*cj2*x12576))+((cj0*x12566)));
evalcond[6]=(((r11*x12565))+((r12*x12580))+(((-1.0)*gconst11*x12563*x12577))+((sj0*x12566))+((r10*x12569))+((x12568*x12582))+(((-1.0)*cj1*cj2*x12572)));
evalcond[7]=(((gconst11*x12571))+(((-1.0)*x12573*x12576))+(((-1.0)*x12570*x12576))+((r00*x12575))+((r00*x12562*x12565))+(((-1.0)*r01*x12569*x12577))+(((-1.0)*r02*sj3*x12578)));
evalcond[8]=(((r10*x12562*x12565))+((gconst11*x12568))+(((-1.0)*x12572*x12573))+(((-1.0)*x12570*x12572))+(((-1.0)*r11*x12569*x12577))+((gconst10*x12563))+(((-1.0)*r12*sj3*x12578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12583=((1.0)*sj0);
IkReal x12584=((1.0)*gconst10);
CheckValue<IkReal> x12585=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12584))+(((-1.0)*gconst11*r21)))),-1);
if(!x12585.valid){
continue;
}
CheckValue<IkReal> x12586 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12583))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12583))+(((-1.0)*cj0*r01*x12584))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12585.value)))+(x12586.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12587=IKsin(j4);
IkReal x12588=IKcos(j4);
IkReal x12589=(cj3*r10);
IkReal x12590=(gconst11*r20);
IkReal x12591=(gconst11*sj3);
IkReal x12592=(sj1*sj2);
IkReal x12593=(gconst11*r00);
IkReal x12594=(cj3*r11);
IkReal x12595=(gconst10*sj3);
IkReal x12596=(cj2*sj1);
IkReal x12597=(cj3*r01);
IkReal x12598=((1.0)*sj0);
IkReal x12599=(cj1*sj2);
IkReal x12600=(cj3*r21);
IkReal x12601=(cj3*gconst10);
IkReal x12602=((1.0)*cj0);
IkReal x12603=((1.0)*x12588);
IkReal x12604=((1.0)*x12587);
IkReal x12605=((1.0)*cj1*cj2);
IkReal x12606=(cj3*x12587);
IkReal x12607=(gconst10*x12587);
IkReal x12608=(gconst10*x12588);
evalcond[0]=((((-1.0)*x12590*x12604))+(((-1.0)*r22*x12603))+((r21*x12607)));
evalcond[1]=(cj0+((r11*x12607))+(((-1.0)*gconst11*r10*x12604))+(((-1.0)*r12*x12603)));
evalcond[2]=(((r01*x12607))+(((-1.0)*x12593*x12604))+(((-1.0)*x12598))+(((-1.0)*r02*x12603)));
evalcond[3]=(((x12600*x12608))+(((-1.0)*cj3*x12590*x12603))+((r21*x12591))+((r22*x12606))+x12596+x12599+((r20*x12595)));
evalcond[4]=(((r20*x12601))+(((-1.0)*r22*sj3*x12604))+((sj3*x12588*x12590))+(((-1.0)*x12605))+((gconst11*x12600))+x12592+(((-1.0)*r21*x12595*x12603)));
evalcond[5]=(((r01*x12591))+((cj0*x12592))+((r00*x12595))+((r02*x12606))+((x12597*x12608))+(((-1.0)*cj3*x12593*x12603))+(((-1.0)*cj1*cj2*x12602)));
evalcond[6]=((((-1.0)*gconst11*x12589*x12603))+((r12*x12606))+(((-1.0)*cj1*cj2*x12598))+((x12594*x12608))+((sj0*x12592))+((r11*x12591))+((r10*x12595)));
evalcond[7]=(((r00*x12601))+((r00*x12588*x12591))+((gconst11*x12597))+(((-1.0)*r02*sj3*x12604))+(((-1.0)*x12599*x12602))+(((-1.0)*x12596*x12602))+(((-1.0)*r01*x12595*x12603)));
evalcond[8]=((((-1.0)*x12596*x12598))+((r10*x12588*x12591))+((gconst11*x12594))+(((-1.0)*x12598*x12599))+((gconst10*x12589))+(((-1.0)*r12*sj3*x12604))+(((-1.0)*r11*x12595*x12603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12609=((1.0)*gconst11);
CheckValue<IkReal> x12610=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12609)))),-1);
if(!x12610.valid){
continue;
}
CheckValue<IkReal> x12611 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12609)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12610.value)))+(x12611.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12612=IKsin(j4);
IkReal x12613=IKcos(j4);
IkReal x12614=(cj3*r10);
IkReal x12615=(gconst11*r20);
IkReal x12616=(gconst11*sj3);
IkReal x12617=(sj1*sj2);
IkReal x12618=(gconst11*r00);
IkReal x12619=(cj3*r11);
IkReal x12620=(gconst10*sj3);
IkReal x12621=(cj2*sj1);
IkReal x12622=(cj3*r01);
IkReal x12623=((1.0)*sj0);
IkReal x12624=(cj1*sj2);
IkReal x12625=(cj3*r21);
IkReal x12626=(cj3*gconst10);
IkReal x12627=((1.0)*cj0);
IkReal x12628=((1.0)*x12613);
IkReal x12629=((1.0)*x12612);
IkReal x12630=((1.0)*cj1*cj2);
IkReal x12631=(cj3*x12612);
IkReal x12632=(gconst10*x12612);
IkReal x12633=(gconst10*x12613);
evalcond[0]=((((-1.0)*r22*x12628))+(((-1.0)*x12615*x12629))+((r21*x12632)));
evalcond[1]=(((r11*x12632))+cj0+(((-1.0)*r12*x12628))+(((-1.0)*gconst11*r10*x12629)));
evalcond[2]=((((-1.0)*x12623))+(((-1.0)*r02*x12628))+((r01*x12632))+(((-1.0)*x12618*x12629)));
evalcond[3]=((((-1.0)*cj3*x12615*x12628))+((x12625*x12633))+((r21*x12616))+x12621+x12624+((r22*x12631))+((r20*x12620)));
evalcond[4]=(((sj3*x12613*x12615))+((gconst11*x12625))+(((-1.0)*x12630))+x12617+(((-1.0)*r21*x12620*x12628))+((r20*x12626))+(((-1.0)*r22*sj3*x12629)));
evalcond[5]=((((-1.0)*cj3*x12618*x12628))+((r02*x12631))+((r00*x12620))+((x12622*x12633))+(((-1.0)*cj1*cj2*x12627))+((r01*x12616))+((cj0*x12617)));
evalcond[6]=(((r12*x12631))+((x12619*x12633))+((sj0*x12617))+(((-1.0)*cj1*cj2*x12623))+((r11*x12616))+(((-1.0)*gconst11*x12614*x12628))+((r10*x12620)));
evalcond[7]=(((gconst11*x12622))+(((-1.0)*x12621*x12627))+(((-1.0)*r01*x12620*x12628))+((r00*x12613*x12616))+(((-1.0)*r02*sj3*x12629))+((r00*x12626))+(((-1.0)*x12624*x12627)));
evalcond[8]=((((-1.0)*x12621*x12623))+((gconst11*x12619))+((r10*x12613*x12616))+(((-1.0)*x12623*x12624))+((gconst10*x12614))+(((-1.0)*r11*x12620*x12628))+(((-1.0)*r12*sj3*x12629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12634=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12634;
j4eval[1]=IKsign(x12634);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12635=((1.0)*cj5);
IkReal x12636=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12635)));
j4eval[0]=x12636;
j4eval[1]=((IKabs(((((-1.0)*r20*x12635))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12636);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12637=cj5*cj5;
IkReal x12638=(cj3*r21);
IkReal x12639=(cj5*sj5);
IkReal x12640=((1.0)*cj3);
IkReal x12641=(((r10*x12638*x12639))+(((-1.0)*r11*x12638))+((cj3*r11*r20*x12639))+((r11*x12637*x12638))+(((-1.0)*r10*r20*x12637*x12640))+(((-1.0)*r12*r22*x12640)));
j4eval[0]=x12641;
j4eval[1]=IKsign(x12641);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12642=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12642;
j4eval[1]=IKsign(x12642);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12643=((1.0)*cj5);
IkReal x12644=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12643)));
j4eval[0]=x12644;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12643))+((r21*sj5))))));
j4eval[2]=IKsign(x12644);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12645=cj5*cj5;
IkReal x12646=r11*r11;
IkReal x12647=(r11*sj5);
IkReal x12648=(cj5*r10);
IkReal x12649=((r12*r12)+(((-2.0)*x12647*x12648))+(((-1.0)*x12645*x12646))+((x12645*(r10*r10)))+x12646);
j4eval[0]=x12649;
j4eval[1]=IKsign(x12649);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12647))+x12648))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12650=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12650);
rxp1_1=(px*r21);
rxp1_2=(r11*x12650);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12651=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12651);
rxp1_1=(px*r21);
rxp1_2=(r11*x12651);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12652=((1.0)*sj1);
CheckValue<IkReal> x12653=IKPowWithIntegerCheck(r02,-1);
if(!x12653.valid){
continue;
}
CheckValue<IkReal> x12654=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12654.valid){
continue;
}
if( IKabs(((x12653.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12652)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12654.value)*(((((-1.0)*sj2*x12652))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12653.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12652))))))+IKsqr(((x12654.value)*(((((-1.0)*sj2*x12652))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12653.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12652))))), ((x12654.value)*(((((-1.0)*sj2*x12652))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12655=IKsin(j4);
IkReal x12656=IKcos(j4);
IkReal x12657=(cj5*r20);
IkReal x12658=((1.0)*cj2);
IkReal x12659=(cj5*r10);
IkReal x12660=((1.0)*x12655);
IkReal x12661=(sj5*x12655);
IkReal x12662=((1.0)*sj5*x12656);
evalcond[0]=((-1.0)*r02*x12656);
evalcond[1]=(((r21*x12661))+(((-1.0)*x12657*x12660)));
evalcond[2]=((((-1.0)*r11*x12662))+((x12656*x12659)));
evalcond[3]=((1.0)+(((-1.0)*x12659*x12660))+((r11*x12661)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x12660))+(((-1.0)*sj1*x12658)));
evalcond[5]=((((-1.0)*cj1*x12658))+((sj1*sj2))+(((-1.0)*r21*x12662))+((x12656*x12657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12663=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12663.valid){
continue;
}
CheckValue<IkReal> x12664=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12664.valid){
continue;
}
if( IKabs(((-1.0)*(x12663.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12664.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12663.value)))+IKsqr(((x12664.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12663.value)), ((x12664.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12665=IKsin(j4);
IkReal x12666=IKcos(j4);
IkReal x12667=(cj5*r20);
IkReal x12668=((1.0)*cj2);
IkReal x12669=(cj5*r10);
IkReal x12670=((1.0)*x12665);
IkReal x12671=(sj5*x12665);
IkReal x12672=((1.0)*sj5*x12666);
evalcond[0]=((-1.0)*r02*x12666);
evalcond[1]=(((r21*x12671))+(((-1.0)*x12667*x12670)));
evalcond[2]=((((-1.0)*r11*x12672))+((x12666*x12669)));
evalcond[3]=((1.0)+(((-1.0)*x12669*x12670))+((r11*x12671)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x12670))+(((-1.0)*sj1*x12668)));
evalcond[5]=((((-1.0)*cj1*x12668))+((sj1*sj2))+(((-1.0)*r21*x12672))+((x12666*x12667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12673=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12673);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12673);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12674=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12674);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12674);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12675=IKPowWithIntegerCheck(r22,-1);
if(!x12675.valid){
continue;
}
CheckValue<IkReal> x12676=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12676.valid){
continue;
}
if( IKabs(((x12675.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12676.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12675.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12676.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12675.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12676.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12677=IKsin(j4);
IkReal x12678=IKcos(j4);
IkReal x12679=((1.0)*cj2);
IkReal x12680=(cj5*x12678);
IkReal x12681=(sj5*x12677);
IkReal x12682=((1.0)*sj5*x12678);
IkReal x12683=((1.0)*cj5*x12677);
evalcond[0]=((-1.0)*r22*x12678);
evalcond[1]=(((r01*x12681))+(((-1.0)*r00*x12683)));
evalcond[2]=((((-1.0)*cj1*x12679))+(((-1.0)*r22*x12677))+((sj1*sj2)));
evalcond[3]=(((r10*x12680))+(((-1.0)*r11*x12682)));
evalcond[4]=((1.0)+((r11*x12681))+(((-1.0)*r10*x12683)));
evalcond[5]=(((r00*x12680))+(((-1.0)*r01*x12682))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12684=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12684.valid){
continue;
}
CheckValue<IkReal> x12685=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12685.valid){
continue;
}
if( IKabs(((-1.0)*(x12684.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12685.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12684.value)))+IKsqr(((x12685.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12684.value)), ((x12685.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12686=IKsin(j4);
IkReal x12687=IKcos(j4);
IkReal x12688=((1.0)*cj2);
IkReal x12689=(cj5*x12687);
IkReal x12690=(sj5*x12686);
IkReal x12691=((1.0)*sj5*x12687);
IkReal x12692=((1.0)*cj5*x12686);
evalcond[0]=((-1.0)*r22*x12687);
evalcond[1]=((((-1.0)*r00*x12692))+((r01*x12690)));
evalcond[2]=((((-1.0)*cj1*x12688))+((sj1*sj2))+(((-1.0)*r22*x12686)));
evalcond[3]=((((-1.0)*r11*x12691))+((r10*x12689)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12692))+((r11*x12690)));
evalcond[5]=((((-1.0)*sj1*x12688))+((r00*x12689))+(((-1.0)*cj1*sj2))+(((-1.0)*r01*x12691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12693=cj5*cj5;
IkReal x12694=r11*r11;
IkReal x12695=(cj5*r10);
IkReal x12696=(r11*sj5);
CheckValue<IkReal> x12697=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x12695*x12696))+((x12693*(r10*r10)))+x12694+(((-1.0)*x12693*x12694)))),-1);
if(!x12697.valid){
continue;
}
CheckValue<IkReal> x12698 = IKatan2WithCheck(IkReal((x12695+(((-1.0)*x12696)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12697.value)))+(x12698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12699=IKsin(j4);
IkReal x12700=IKcos(j4);
IkReal x12701=(cj5*r10);
IkReal x12702=(r01*sj5);
IkReal x12703=((1.0)*cj2);
IkReal x12704=(cj5*r00);
IkReal x12705=(cj5*r20);
IkReal x12706=((1.0)*x12700);
IkReal x12707=((1.0)*x12699);
IkReal x12708=(sj5*x12699);
evalcond[0]=(((r21*x12708))+(((-1.0)*x12705*x12707))+(((-1.0)*r22*x12706)));
evalcond[1]=(((x12699*x12702))+(((-1.0)*x12704*x12707))+(((-1.0)*r02*x12706)));
evalcond[2]=(((x12700*x12701))+(((-1.0)*r11*sj5*x12706))+(((-1.0)*r12*x12707)));
evalcond[3]=((1.0)+(((-1.0)*x12701*x12707))+((r11*x12708))+(((-1.0)*r12*x12706)));
evalcond[4]=((((-1.0)*r21*sj5*x12706))+((x12700*x12705))+((sj1*sj2))+(((-1.0)*r22*x12707))+(((-1.0)*cj1*x12703)));
evalcond[5]=((((-1.0)*x12702*x12706))+((x12700*x12704))+(((-1.0)*sj1*x12703))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12709=((1.0)*cj5);
CheckValue<IkReal> x12710=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12709))+(((-1.0)*r00*sj5)))),-1);
if(!x12710.valid){
continue;
}
CheckValue<IkReal> x12711 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12710.value)))+(x12711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12712=IKsin(j4);
IkReal x12713=IKcos(j4);
IkReal x12714=(cj5*r10);
IkReal x12715=(r01*sj5);
IkReal x12716=((1.0)*cj2);
IkReal x12717=(cj5*r00);
IkReal x12718=(cj5*r20);
IkReal x12719=((1.0)*x12713);
IkReal x12720=((1.0)*x12712);
IkReal x12721=(sj5*x12712);
evalcond[0]=(((r21*x12721))+(((-1.0)*r22*x12719))+(((-1.0)*x12718*x12720)));
evalcond[1]=((((-1.0)*x12717*x12720))+((x12712*x12715))+(((-1.0)*r02*x12719)));
evalcond[2]=(((x12713*x12714))+(((-1.0)*r12*x12720))+(((-1.0)*r11*sj5*x12719)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12719))+((r11*x12721))+(((-1.0)*x12714*x12720)));
evalcond[4]=((((-1.0)*r22*x12720))+((sj1*sj2))+((x12713*x12718))+(((-1.0)*cj1*x12716))+(((-1.0)*r21*sj5*x12719)));
evalcond[5]=((((-1.0)*x12715*x12719))+(((-1.0)*r02*x12720))+(((-1.0)*sj1*x12716))+(((-1.0)*cj1*sj2))+((x12713*x12717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12722=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12722.valid){
continue;
}
CheckValue<IkReal> x12723 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12722.value)))+(x12723.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12724=IKsin(j4);
IkReal x12725=IKcos(j4);
IkReal x12726=(cj5*r10);
IkReal x12727=(r01*sj5);
IkReal x12728=((1.0)*cj2);
IkReal x12729=(cj5*r00);
IkReal x12730=(cj5*r20);
IkReal x12731=((1.0)*x12725);
IkReal x12732=((1.0)*x12724);
IkReal x12733=(sj5*x12724);
evalcond[0]=(((r21*x12733))+(((-1.0)*r22*x12731))+(((-1.0)*x12730*x12732)));
evalcond[1]=((((-1.0)*r02*x12731))+(((-1.0)*x12729*x12732))+((x12724*x12727)));
evalcond[2]=((((-1.0)*r11*sj5*x12731))+((x12725*x12726))+(((-1.0)*r12*x12732)));
evalcond[3]=((1.0)+((r11*x12733))+(((-1.0)*x12726*x12732))+(((-1.0)*r12*x12731)));
evalcond[4]=((((-1.0)*r22*x12732))+((sj1*sj2))+((x12725*x12730))+(((-1.0)*r21*sj5*x12731))+(((-1.0)*cj1*x12728)));
evalcond[5]=((((-1.0)*x12727*x12731))+(((-1.0)*sj1*x12728))+(((-1.0)*r02*x12732))+(((-1.0)*cj1*sj2))+((x12725*x12729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12734=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12734;
j4eval[1]=IKsign(x12734);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12735=((1.0)*cj5);
IkReal x12736=((((-1.0)*r01*x12735))+(((-1.0)*r00*sj5)));
j4eval[0]=x12736;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12735)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12736);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12737=(sj1*sj2);
IkReal x12738=(cj5*r10);
IkReal x12739=(r11*sj5);
IkReal x12740=(cj1*cj2);
IkReal x12741=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12741;
j4eval[1]=((IKabs((((x12737*x12739))+(((-1.0)*x12739*x12740))+(((-1.0)*x12737*x12738))+((x12738*x12740)))))+(IKabs(((((-1.0)*r12*x12737))+((r12*x12740))))));
j4eval[2]=IKsign(x12741);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12742=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12742);
rxp1_1=(px*r21);
rxp1_2=(r11*x12742);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12743=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12743);
rxp1_1=(px*r21);
rxp1_2=(r11*x12743);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12744=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x12744)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12744)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12745=((1.0)*cj5);
CheckValue<IkReal> x12746=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12745))),-1);
if(!x12746.valid){
continue;
}
CheckValue<IkReal> x12747=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12745))),-1);
if(!x12747.valid){
continue;
}
if( IKabs(((-1.0)*(x12746.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12747.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12746.value)))+IKsqr(((x12747.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12746.value)), ((x12747.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12748=IKsin(j4);
IkReal x12749=IKcos(j4);
IkReal x12750=((1.0)*cj2);
IkReal x12751=(r21*sj5);
IkReal x12752=(r11*sj5);
IkReal x12753=((1.0)*cj5*x12748);
IkReal x12754=((1.0)*cj5*x12749);
evalcond[0]=((-1.0)*r02*x12749);
evalcond[1]=(((x12748*x12751))+(((-1.0)*r20*x12753)));
evalcond[2]=((((-1.0)*sj1*x12750))+(((-1.0)*cj1*sj2))+((r02*x12748)));
evalcond[3]=((((-1.0)*r10*x12754))+((x12749*x12752)));
evalcond[4]=((1.0)+((x12748*x12752))+(((-1.0)*r10*x12753)));
evalcond[5]=(((sj1*sj2))+((x12749*x12751))+(((-1.0)*r20*x12754))+(((-1.0)*cj1*x12750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12755=IKPowWithIntegerCheck(r02,-1);
if(!x12755.valid){
continue;
}
CheckValue<IkReal> x12756=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12756.valid){
continue;
}
if( IKabs(((x12755.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12756.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12755.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12756.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12755.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12756.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12757=IKsin(j4);
IkReal x12758=IKcos(j4);
IkReal x12759=((1.0)*cj2);
IkReal x12760=(r21*sj5);
IkReal x12761=(r11*sj5);
IkReal x12762=((1.0)*cj5*x12757);
IkReal x12763=((1.0)*cj5*x12758);
evalcond[0]=((-1.0)*r02*x12758);
evalcond[1]=((((-1.0)*r20*x12762))+((x12757*x12760)));
evalcond[2]=((((-1.0)*sj1*x12759))+(((-1.0)*cj1*sj2))+((r02*x12757)));
evalcond[3]=((((-1.0)*r10*x12763))+((x12758*x12761)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12762))+((x12757*x12761)));
evalcond[5]=((((-1.0)*r20*x12763))+((x12758*x12760))+((sj1*sj2))+(((-1.0)*cj1*x12759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12764=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12764;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12764);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12765=((1.0)*cj5);
IkReal x12766=((((-1.0)*r21*x12765))+(((-1.0)*r20*sj5)));
j4eval[0]=x12766;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12765))+((r11*sj5))))));
j4eval[2]=IKsign(x12766);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12767=cj5*cj5;
IkReal x12768=(r11*r21);
IkReal x12769=((1.0)*r20);
IkReal x12770=(cj5*sj5);
IkReal x12771=(((r11*r20*x12770))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12767*x12769))+((x12767*x12768))+((r10*r21*x12770))+(((-1.0)*x12768)));
j4eval[0]=x12771;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12769))+((r21*sj5))))));
j4eval[2]=IKsign(x12771);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12772=cj5*cj5;
IkReal x12773=(r21*sj5);
IkReal x12774=(r11*r21);
IkReal x12775=((1.0)*r20);
CheckValue<IkReal> x12776=IKPowWithIntegerCheck(IKsign((((x12772*x12774))+(((-1.0)*r12*r22))+((cj5*r10*x12773))+(((-1.0)*x12774))+(((-1.0)*r10*x12772*x12775))+((cj5*r11*r20*sj5)))),-1);
if(!x12776.valid){
continue;
}
CheckValue<IkReal> x12777 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12775))+x12773)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12776.value)))+(x12777.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12778=IKcos(j4);
IkReal x12779=IKsin(j4);
IkReal x12780=(cj5*r00);
IkReal x12781=(cj5*r20);
IkReal x12782=(cj5*r10);
IkReal x12783=((1.0)*x12778);
IkReal x12784=((1.0)*x12779);
IkReal x12785=(sj5*x12778);
IkReal x12786=(sj5*x12779);
evalcond[0]=(((r21*x12785))+((r22*x12779))+(((-1.0)*x12781*x12783)));
evalcond[1]=((((-1.0)*x12782*x12783))+((r11*x12785))+((r12*x12779)));
evalcond[2]=(((r21*x12786))+(((-1.0)*r22*x12783))+(((-1.0)*x12781*x12784)));
evalcond[3]=(((r01*x12786))+(((-1.0)*r02*x12783))+(((-1.0)*x12780*x12784)));
evalcond[4]=((-1.0)+((r01*x12785))+(((-1.0)*x12780*x12783))+((r02*x12779)));
evalcond[5]=((1.0)+(((-1.0)*x12782*x12784))+((r11*x12786))+(((-1.0)*r12*x12783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12787=((1.0)*cj5);
CheckValue<IkReal> x12788=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12787))+(((-1.0)*r20*sj5)))),-1);
if(!x12788.valid){
continue;
}
CheckValue<IkReal> x12789 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12787)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12788.value)))+(x12789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12790=IKcos(j4);
IkReal x12791=IKsin(j4);
IkReal x12792=(cj5*r00);
IkReal x12793=(cj5*r20);
IkReal x12794=(cj5*r10);
IkReal x12795=((1.0)*x12790);
IkReal x12796=((1.0)*x12791);
IkReal x12797=(sj5*x12790);
IkReal x12798=(sj5*x12791);
evalcond[0]=((((-1.0)*x12793*x12795))+((r21*x12797))+((r22*x12791)));
evalcond[1]=((((-1.0)*x12794*x12795))+((r11*x12797))+((r12*x12791)));
evalcond[2]=((((-1.0)*r22*x12795))+(((-1.0)*x12793*x12796))+((r21*x12798)));
evalcond[3]=((((-1.0)*x12792*x12796))+(((-1.0)*r02*x12795))+((r01*x12798)));
evalcond[4]=((-1.0)+((r02*x12791))+(((-1.0)*x12792*x12795))+((r01*x12797)));
evalcond[5]=((1.0)+(((-1.0)*x12794*x12796))+((r11*x12798))+(((-1.0)*r12*x12795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12799 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12799.valid){
continue;
}
CheckValue<IkReal> x12800=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12799.value)+(((1.5707963267949)*(x12800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12801=IKcos(j4);
IkReal x12802=IKsin(j4);
IkReal x12803=(cj5*r00);
IkReal x12804=(cj5*r20);
IkReal x12805=(cj5*r10);
IkReal x12806=((1.0)*x12801);
IkReal x12807=((1.0)*x12802);
IkReal x12808=(sj5*x12801);
IkReal x12809=(sj5*x12802);
evalcond[0]=(((r21*x12808))+(((-1.0)*x12804*x12806))+((r22*x12802)));
evalcond[1]=((((-1.0)*x12805*x12806))+((r11*x12808))+((r12*x12802)));
evalcond[2]=(((r21*x12809))+(((-1.0)*r22*x12806))+(((-1.0)*x12804*x12807)));
evalcond[3]=((((-1.0)*x12803*x12807))+(((-1.0)*r02*x12806))+((r01*x12809)));
evalcond[4]=((-1.0)+((r02*x12802))+(((-1.0)*x12803*x12806))+((r01*x12808)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12806))+(((-1.0)*x12805*x12807))+((r11*x12809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12810=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12810;
j4eval[1]=IKsign(x12810);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12811=((1.0)*cj5);
IkReal x12812=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12811)));
j4eval[0]=x12812;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12811))))));
j4eval[2]=IKsign(x12812);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12813=cj5*cj5;
IkReal x12814=(r11*r21);
IkReal x12815=((1.0)*r20);
IkReal x12816=(cj5*sj5);
IkReal x12817=(((x12813*x12814))+(((-1.0)*r12*r22))+((r11*r20*x12816))+(((-1.0)*x12814))+(((-1.0)*r10*x12813*x12815))+((r10*r21*x12816)));
j4eval[0]=x12817;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12815))+((r21*sj5))))));
j4eval[2]=IKsign(x12817);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12818=cj5*cj5;
IkReal x12819=(r21*sj5);
IkReal x12820=(r11*r21);
IkReal x12821=((1.0)*r20);
CheckValue<IkReal> x12822 = IKatan2WithCheck(IkReal((x12819+(((-1.0)*cj5*x12821)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12822.valid){
continue;
}
CheckValue<IkReal> x12823=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x12818*x12820))+(((-1.0)*x12820))+(((-1.0)*r10*x12818*x12821))+((cj5*r10*x12819))+((cj5*r11*r20*sj5)))),-1);
if(!x12823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12822.value)+(((1.5707963267949)*(x12823.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12824=IKcos(j4);
IkReal x12825=IKsin(j4);
IkReal x12826=(cj5*r00);
IkReal x12827=(cj5*r20);
IkReal x12828=(cj5*r10);
IkReal x12829=((1.0)*x12824);
IkReal x12830=((1.0)*x12825);
IkReal x12831=(sj5*x12824);
IkReal x12832=(sj5*x12825);
evalcond[0]=(((r21*x12831))+((r22*x12825))+(((-1.0)*x12827*x12829)));
evalcond[1]=((((-1.0)*x12828*x12829))+((r11*x12831))+((r12*x12825)));
evalcond[2]=(((r21*x12832))+(((-1.0)*r22*x12829))+(((-1.0)*x12827*x12830)));
evalcond[3]=((((-1.0)*r02*x12829))+((r01*x12832))+(((-1.0)*x12826*x12830)));
evalcond[4]=((1.0)+(((-1.0)*x12826*x12829))+((r02*x12825))+((r01*x12831)));
evalcond[5]=((1.0)+((r11*x12832))+(((-1.0)*r12*x12829))+(((-1.0)*x12828*x12830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12833=((1.0)*cj5);
CheckValue<IkReal> x12834=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12833)))),-1);
if(!x12834.valid){
continue;
}
CheckValue<IkReal> x12835 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12833)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12834.value)))+(x12835.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12836=IKcos(j4);
IkReal x12837=IKsin(j4);
IkReal x12838=(cj5*r00);
IkReal x12839=(cj5*r20);
IkReal x12840=(cj5*r10);
IkReal x12841=((1.0)*x12836);
IkReal x12842=((1.0)*x12837);
IkReal x12843=(sj5*x12836);
IkReal x12844=(sj5*x12837);
evalcond[0]=(((r22*x12837))+(((-1.0)*x12839*x12841))+((r21*x12843)));
evalcond[1]=(((r12*x12837))+(((-1.0)*x12840*x12841))+((r11*x12843)));
evalcond[2]=((((-1.0)*r22*x12841))+(((-1.0)*x12839*x12842))+((r21*x12844)));
evalcond[3]=((((-1.0)*x12838*x12842))+(((-1.0)*r02*x12841))+((r01*x12844)));
evalcond[4]=((1.0)+(((-1.0)*x12838*x12841))+((r01*x12843))+((r02*x12837)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12841))+(((-1.0)*x12840*x12842))+((r11*x12844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12845=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12845.valid){
continue;
}
CheckValue<IkReal> x12846 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12845.value)))+(x12846.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12847=IKcos(j4);
IkReal x12848=IKsin(j4);
IkReal x12849=(cj5*r00);
IkReal x12850=(cj5*r20);
IkReal x12851=(cj5*r10);
IkReal x12852=((1.0)*x12847);
IkReal x12853=((1.0)*x12848);
IkReal x12854=(sj5*x12847);
IkReal x12855=(sj5*x12848);
evalcond[0]=((((-1.0)*x12850*x12852))+((r22*x12848))+((r21*x12854)));
evalcond[1]=((((-1.0)*x12851*x12852))+((r11*x12854))+((r12*x12848)));
evalcond[2]=((((-1.0)*x12850*x12853))+(((-1.0)*r22*x12852))+((r21*x12855)));
evalcond[3]=((((-1.0)*r02*x12852))+((r01*x12855))+(((-1.0)*x12849*x12853)));
evalcond[4]=((1.0)+((r01*x12854))+((r02*x12848))+(((-1.0)*x12849*x12852)));
evalcond[5]=((1.0)+(((-1.0)*x12851*x12853))+(((-1.0)*r12*x12852))+((r11*x12855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12856=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12856;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12856);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12857=((1.0)*cj5);
IkReal x12858=((((-1.0)*r21*x12857))+(((-1.0)*r20*sj5)));
j4eval[0]=x12858;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12857))))));
j4eval[2]=IKsign(x12858);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12859=cj5*cj5;
IkReal x12860=(r11*r21);
IkReal x12861=((1.0)*r20);
IkReal x12862=(cj5*sj5);
IkReal x12863=((((-1.0)*x12860))+((r10*r21*x12862))+(((-1.0)*r12*r22))+((x12859*x12860))+((r11*r20*x12862))+(((-1.0)*r10*x12859*x12861)));
j4eval[0]=x12863;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12861)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12863);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12864=cj5*cj5;
IkReal x12865=(r21*sj5);
IkReal x12866=(r11*r21);
IkReal x12867=((1.0)*r20);
CheckValue<IkReal> x12868 = IKatan2WithCheck(IkReal((x12865+(((-1.0)*cj5*x12867)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12868.valid){
continue;
}
CheckValue<IkReal> x12869=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12866))+((x12864*x12866))+(((-1.0)*r12*r22))+((cj5*r10*x12865))+((cj5*r11*r20*sj5))+(((-1.0)*r10*x12864*x12867)))),-1);
if(!x12869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12868.value)+(((1.5707963267949)*(x12869.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12870=IKcos(j4);
IkReal x12871=IKsin(j4);
IkReal x12872=(cj5*r00);
IkReal x12873=(cj5*r20);
IkReal x12874=(cj5*r10);
IkReal x12875=((1.0)*x12870);
IkReal x12876=((1.0)*x12871);
IkReal x12877=(sj5*x12870);
IkReal x12878=(sj5*x12871);
evalcond[0]=(((r22*x12871))+((r21*x12877))+(((-1.0)*x12873*x12875)));
evalcond[1]=(((r11*x12877))+((r12*x12871))+(((-1.0)*x12874*x12875)));
evalcond[2]=((((-1.0)*r22*x12875))+((r21*x12878))+(((-1.0)*x12873*x12876)));
evalcond[3]=((((-1.0)*x12872*x12876))+((r01*x12878))+(((-1.0)*r02*x12875)));
evalcond[4]=((-1.0)+(((-1.0)*x12872*x12875))+((r01*x12877))+((r02*x12871)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12875))+((r11*x12878))+(((-1.0)*x12874*x12876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12879=((1.0)*cj5);
CheckValue<IkReal> x12880=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12879))+(((-1.0)*r20*sj5)))),-1);
if(!x12880.valid){
continue;
}
CheckValue<IkReal> x12881 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12879)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12880.value)))+(x12881.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12882=IKcos(j4);
IkReal x12883=IKsin(j4);
IkReal x12884=(cj5*r00);
IkReal x12885=(cj5*r20);
IkReal x12886=(cj5*r10);
IkReal x12887=((1.0)*x12882);
IkReal x12888=((1.0)*x12883);
IkReal x12889=(sj5*x12882);
IkReal x12890=(sj5*x12883);
evalcond[0]=((((-1.0)*x12885*x12887))+((r22*x12883))+((r21*x12889)));
evalcond[1]=((((-1.0)*x12886*x12887))+((r12*x12883))+((r11*x12889)));
evalcond[2]=((((-1.0)*r22*x12887))+((r21*x12890))+(((-1.0)*x12885*x12888)));
evalcond[3]=(((r01*x12890))+(((-1.0)*r02*x12887))+(((-1.0)*x12884*x12888)));
evalcond[4]=((-1.0)+(((-1.0)*x12884*x12887))+((r01*x12889))+((r02*x12883)));
evalcond[5]=((1.0)+(((-1.0)*x12886*x12888))+(((-1.0)*r12*x12887))+((r11*x12890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12891 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12891.valid){
continue;
}
CheckValue<IkReal> x12892=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12891.value)+(((1.5707963267949)*(x12892.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12893=IKcos(j4);
IkReal x12894=IKsin(j4);
IkReal x12895=(cj5*r00);
IkReal x12896=(cj5*r20);
IkReal x12897=(cj5*r10);
IkReal x12898=((1.0)*x12893);
IkReal x12899=((1.0)*x12894);
IkReal x12900=(sj5*x12893);
IkReal x12901=(sj5*x12894);
evalcond[0]=(((r22*x12894))+(((-1.0)*x12896*x12898))+((r21*x12900)));
evalcond[1]=(((r12*x12894))+((r11*x12900))+(((-1.0)*x12897*x12898)));
evalcond[2]=((((-1.0)*r22*x12898))+(((-1.0)*x12896*x12899))+((r21*x12901)));
evalcond[3]=(((r01*x12901))+(((-1.0)*x12895*x12899))+(((-1.0)*r02*x12898)));
evalcond[4]=((-1.0)+((r01*x12900))+((r02*x12894))+(((-1.0)*x12895*x12898)));
evalcond[5]=((1.0)+((r11*x12901))+(((-1.0)*x12897*x12899))+(((-1.0)*r12*x12898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12902=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12902;
j4eval[1]=IKsign(x12902);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12903=((1.0)*cj5);
IkReal x12904=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12903)));
j4eval[0]=x12904;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12903))))));
j4eval[2]=IKsign(x12904);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12905=cj5*cj5;
IkReal x12906=(r11*r21);
IkReal x12907=((1.0)*r20);
IkReal x12908=(cj5*sj5);
IkReal x12909=((((-1.0)*r12*r22))+(((-1.0)*x12906))+((r11*r20*x12908))+(((-1.0)*r10*x12905*x12907))+((r10*r21*x12908))+((x12905*x12906)));
j4eval[0]=x12909;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12907)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12909);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12910=cj5*cj5;
IkReal x12911=(r21*sj5);
IkReal x12912=(r11*r21);
IkReal x12913=((1.0)*r20);
CheckValue<IkReal> x12914 = IKatan2WithCheck(IkReal((x12911+(((-1.0)*cj5*x12913)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12914.valid){
continue;
}
CheckValue<IkReal> x12915=IKPowWithIntegerCheck(IKsign((((x12910*x12912))+(((-1.0)*r12*r22))+(((-1.0)*x12912))+(((-1.0)*r10*x12910*x12913))+((cj5*r11*r20*sj5))+((cj5*r10*x12911)))),-1);
if(!x12915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12914.value)+(((1.5707963267949)*(x12915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12916=IKcos(j4);
IkReal x12917=IKsin(j4);
IkReal x12918=(cj5*r00);
IkReal x12919=(cj5*r20);
IkReal x12920=(cj5*r10);
IkReal x12921=((1.0)*x12916);
IkReal x12922=((1.0)*x12917);
IkReal x12923=(sj5*x12916);
IkReal x12924=(sj5*x12917);
evalcond[0]=((((-1.0)*x12919*x12921))+((r21*x12923))+((r22*x12917)));
evalcond[1]=(((r11*x12923))+((r12*x12917))+(((-1.0)*x12920*x12921)));
evalcond[2]=((((-1.0)*x12919*x12922))+((r21*x12924))+(((-1.0)*r22*x12921)));
evalcond[3]=((((-1.0)*r02*x12921))+(((-1.0)*x12918*x12922))+((r01*x12924)));
evalcond[4]=((1.0)+(((-1.0)*x12918*x12921))+((r02*x12917))+((r01*x12923)));
evalcond[5]=((1.0)+((r11*x12924))+(((-1.0)*r12*x12921))+(((-1.0)*x12920*x12922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12925=((1.0)*cj5);
CheckValue<IkReal> x12926=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12925)))),-1);
if(!x12926.valid){
continue;
}
CheckValue<IkReal> x12927 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12925))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12926.value)))+(x12927.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12928=IKcos(j4);
IkReal x12929=IKsin(j4);
IkReal x12930=(cj5*r00);
IkReal x12931=(cj5*r20);
IkReal x12932=(cj5*r10);
IkReal x12933=((1.0)*x12928);
IkReal x12934=((1.0)*x12929);
IkReal x12935=(sj5*x12928);
IkReal x12936=(sj5*x12929);
evalcond[0]=(((r22*x12929))+((r21*x12935))+(((-1.0)*x12931*x12933)));
evalcond[1]=(((r11*x12935))+(((-1.0)*x12932*x12933))+((r12*x12929)));
evalcond[2]=((((-1.0)*r22*x12933))+((r21*x12936))+(((-1.0)*x12931*x12934)));
evalcond[3]=((((-1.0)*r02*x12933))+(((-1.0)*x12930*x12934))+((r01*x12936)));
evalcond[4]=((1.0)+(((-1.0)*x12930*x12933))+((r02*x12929))+((r01*x12935)));
evalcond[5]=((1.0)+((r11*x12936))+(((-1.0)*r12*x12933))+(((-1.0)*x12932*x12934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12937=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12937.valid){
continue;
}
CheckValue<IkReal> x12938 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12937.value)))+(x12938.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12939=IKcos(j4);
IkReal x12940=IKsin(j4);
IkReal x12941=(cj5*r00);
IkReal x12942=(cj5*r20);
IkReal x12943=(cj5*r10);
IkReal x12944=((1.0)*x12939);
IkReal x12945=((1.0)*x12940);
IkReal x12946=(sj5*x12939);
IkReal x12947=(sj5*x12940);
evalcond[0]=(((r22*x12940))+((r21*x12946))+(((-1.0)*x12942*x12944)));
evalcond[1]=(((r12*x12940))+((r11*x12946))+(((-1.0)*x12943*x12944)));
evalcond[2]=(((r21*x12947))+(((-1.0)*r22*x12944))+(((-1.0)*x12942*x12945)));
evalcond[3]=(((r01*x12947))+(((-1.0)*r02*x12944))+(((-1.0)*x12941*x12945)));
evalcond[4]=((1.0)+((r01*x12946))+((r02*x12940))+(((-1.0)*x12941*x12944)));
evalcond[5]=((1.0)+((r11*x12947))+(((-1.0)*x12943*x12945))+(((-1.0)*r12*x12944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12948=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12948;
j4eval[1]=IKsign(x12948);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12949=((1.0)*cj5);
IkReal x12950=((((-1.0)*r11*x12949))+(((-1.0)*r10*sj5)));
j4eval[0]=x12950;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12949))))));
j4eval[2]=IKsign(x12950);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12951=cj5*cj5;
IkReal x12952=(r11*r21);
IkReal x12953=((1.0)*r20);
IkReal x12954=(cj5*sj5);
IkReal x12955=(((x12951*x12952))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12951*x12953))+((r10*r21*x12954))+((r11*r20*x12954))+(((-1.0)*x12952)));
j4eval[0]=x12955;
j4eval[1]=((IKabs(((((-1.0)*cj5*x12953))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12955);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12956=cj5*cj5;
IkReal x12957=(r21*sj5);
IkReal x12958=(r11*r21);
IkReal x12959=((1.0)*r20);
CheckValue<IkReal> x12960 = IKatan2WithCheck(IkReal((x12957+(((-1.0)*cj5*x12959)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12960.valid){
continue;
}
CheckValue<IkReal> x12961=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x12956*x12959))+(((-1.0)*x12958))+((cj5*r10*x12957))+((x12956*x12958))+((cj5*r11*r20*sj5)))),-1);
if(!x12961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12960.value)+(((1.5707963267949)*(x12961.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12962=IKcos(j4);
IkReal x12963=IKsin(j4);
IkReal x12964=(cj5*r00);
IkReal x12965=(cj5*r20);
IkReal x12966=(cj5*r10);
IkReal x12967=((1.0)*x12962);
IkReal x12968=((1.0)*x12963);
IkReal x12969=(sj5*x12962);
IkReal x12970=(sj5*x12963);
evalcond[0]=((((-1.0)*x12965*x12967))+((r22*x12963))+((r21*x12969)));
evalcond[1]=((((-1.0)*x12966*x12967))+((r11*x12969))+((r12*x12963)));
evalcond[2]=((((-1.0)*x12965*x12968))+(((-1.0)*r22*x12967))+((r21*x12970)));
evalcond[3]=(((r01*x12970))+(((-1.0)*r02*x12967))+(((-1.0)*x12964*x12968)));
evalcond[4]=((1.0)+((r01*x12969))+((r02*x12963))+(((-1.0)*x12964*x12967)));
evalcond[5]=((1.0)+(((-1.0)*x12966*x12968))+(((-1.0)*r12*x12967))+((r11*x12970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12971=((1.0)*cj5);
CheckValue<IkReal> x12972=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12971)))),-1);
if(!x12972.valid){
continue;
}
CheckValue<IkReal> x12973 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12971)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12972.value)))+(x12973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12974=IKcos(j4);
IkReal x12975=IKsin(j4);
IkReal x12976=(cj5*r00);
IkReal x12977=(cj5*r20);
IkReal x12978=(cj5*r10);
IkReal x12979=((1.0)*x12974);
IkReal x12980=((1.0)*x12975);
IkReal x12981=(sj5*x12974);
IkReal x12982=(sj5*x12975);
evalcond[0]=(((r21*x12981))+((r22*x12975))+(((-1.0)*x12977*x12979)));
evalcond[1]=(((r11*x12981))+((r12*x12975))+(((-1.0)*x12978*x12979)));
evalcond[2]=((((-1.0)*x12977*x12980))+((r21*x12982))+(((-1.0)*r22*x12979)));
evalcond[3]=(((r01*x12982))+(((-1.0)*r02*x12979))+(((-1.0)*x12976*x12980)));
evalcond[4]=((1.0)+((r02*x12975))+((r01*x12981))+(((-1.0)*x12976*x12979)));
evalcond[5]=((1.0)+((r11*x12982))+(((-1.0)*r12*x12979))+(((-1.0)*x12978*x12980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12983=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12983.valid){
continue;
}
CheckValue<IkReal> x12984 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12983.value)))+(x12984.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12985=IKcos(j4);
IkReal x12986=IKsin(j4);
IkReal x12987=(cj5*r00);
IkReal x12988=(cj5*r20);
IkReal x12989=(cj5*r10);
IkReal x12990=((1.0)*x12985);
IkReal x12991=((1.0)*x12986);
IkReal x12992=(sj5*x12985);
IkReal x12993=(sj5*x12986);
evalcond[0]=(((r22*x12986))+((r21*x12992))+(((-1.0)*x12988*x12990)));
evalcond[1]=((((-1.0)*x12989*x12990))+((r11*x12992))+((r12*x12986)));
evalcond[2]=((((-1.0)*r22*x12990))+((r21*x12993))+(((-1.0)*x12988*x12991)));
evalcond[3]=(((r01*x12993))+(((-1.0)*x12987*x12991))+(((-1.0)*r02*x12990)));
evalcond[4]=((1.0)+((r01*x12992))+(((-1.0)*x12987*x12990))+((r02*x12986)));
evalcond[5]=((1.0)+(((-1.0)*x12989*x12991))+((r11*x12993))+(((-1.0)*r12*x12990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12994=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12994;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12994);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12995=((1.0)*cj5);
IkReal x12996=((((-1.0)*r21*x12995))+(((-1.0)*r20*sj5)));
j4eval[0]=x12996;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12995))+((r11*sj5))))));
j4eval[2]=IKsign(x12996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12997=cj5*cj5;
IkReal x12998=(r11*r21);
IkReal x12999=((1.0)*r20);
IkReal x13000=(cj5*sj5);
IkReal x13001=(((r10*r21*x13000))+(((-1.0)*r10*x12997*x12999))+(((-1.0)*r12*r22))+((r11*r20*x13000))+((x12997*x12998))+(((-1.0)*x12998)));
j4eval[0]=x13001;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12999)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13001);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13002=cj5*cj5;
IkReal x13003=(r21*sj5);
IkReal x13004=(r11*r21);
IkReal x13005=((1.0)*r20);
CheckValue<IkReal> x13006 = IKatan2WithCheck(IkReal((x13003+(((-1.0)*cj5*x13005)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13006.valid){
continue;
}
CheckValue<IkReal> x13007=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x13002*x13005))+(((-1.0)*r12*r22))+((cj5*r10*x13003))+(((-1.0)*x13004))+((cj5*r11*r20*sj5))+((x13002*x13004)))),-1);
if(!x13007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13006.value)+(((1.5707963267949)*(x13007.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13008=IKcos(j4);
IkReal x13009=IKsin(j4);
IkReal x13010=(cj5*r00);
IkReal x13011=(cj5*r20);
IkReal x13012=(cj5*r10);
IkReal x13013=((1.0)*x13008);
IkReal x13014=((1.0)*x13009);
IkReal x13015=(sj5*x13008);
IkReal x13016=(sj5*x13009);
evalcond[0]=(((r21*x13015))+(((-1.0)*x13011*x13013))+((r22*x13009)));
evalcond[1]=((((-1.0)*x13012*x13013))+((r12*x13009))+((r11*x13015)));
evalcond[2]=((((-1.0)*r22*x13013))+((r21*x13016))+(((-1.0)*x13011*x13014)));
evalcond[3]=(((r01*x13016))+(((-1.0)*x13010*x13014))+(((-1.0)*r02*x13013)));
evalcond[4]=((-1.0)+((r01*x13015))+((r02*x13009))+(((-1.0)*x13010*x13013)));
evalcond[5]=((1.0)+(((-1.0)*x13012*x13014))+((r11*x13016))+(((-1.0)*r12*x13013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13017=((1.0)*cj5);
CheckValue<IkReal> x13018 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13017))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13018.valid){
continue;
}
CheckValue<IkReal> x13019=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13017))+(((-1.0)*r20*sj5)))),-1);
if(!x13019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13018.value)+(((1.5707963267949)*(x13019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13020=IKcos(j4);
IkReal x13021=IKsin(j4);
IkReal x13022=(cj5*r00);
IkReal x13023=(cj5*r20);
IkReal x13024=(cj5*r10);
IkReal x13025=((1.0)*x13020);
IkReal x13026=((1.0)*x13021);
IkReal x13027=(sj5*x13020);
IkReal x13028=(sj5*x13021);
evalcond[0]=(((r21*x13027))+((r22*x13021))+(((-1.0)*x13023*x13025)));
evalcond[1]=((((-1.0)*x13024*x13025))+((r11*x13027))+((r12*x13021)));
evalcond[2]=((((-1.0)*r22*x13025))+((r21*x13028))+(((-1.0)*x13023*x13026)));
evalcond[3]=(((r01*x13028))+(((-1.0)*x13022*x13026))+(((-1.0)*r02*x13025)));
evalcond[4]=((-1.0)+((r01*x13027))+((r02*x13021))+(((-1.0)*x13022*x13025)));
evalcond[5]=((1.0)+(((-1.0)*x13024*x13026))+((r11*x13028))+(((-1.0)*r12*x13025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13029 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13029.valid){
continue;
}
CheckValue<IkReal> x13030=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13029.value)+(((1.5707963267949)*(x13030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13031=IKcos(j4);
IkReal x13032=IKsin(j4);
IkReal x13033=(cj5*r00);
IkReal x13034=(cj5*r20);
IkReal x13035=(cj5*r10);
IkReal x13036=((1.0)*x13031);
IkReal x13037=((1.0)*x13032);
IkReal x13038=(sj5*x13031);
IkReal x13039=(sj5*x13032);
evalcond[0]=(((r22*x13032))+(((-1.0)*x13034*x13036))+((r21*x13038)));
evalcond[1]=(((r11*x13038))+(((-1.0)*x13035*x13036))+((r12*x13032)));
evalcond[2]=((((-1.0)*x13034*x13037))+(((-1.0)*r22*x13036))+((r21*x13039)));
evalcond[3]=((((-1.0)*x13033*x13037))+(((-1.0)*r02*x13036))+((r01*x13039)));
evalcond[4]=((-1.0)+(((-1.0)*x13033*x13036))+((r01*x13038))+((r02*x13032)));
evalcond[5]=((1.0)+((r11*x13039))+(((-1.0)*x13035*x13037))+(((-1.0)*r12*x13036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13040=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13040;
j4eval[1]=IKsign(x13040);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13041=((1.0)*cj5);
IkReal x13042=((((-1.0)*r10*sj5))+(((-1.0)*r11*x13041)));
j4eval[0]=x13042;
j4eval[1]=((IKabs(((((-1.0)*r20*x13041))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13042);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13043=cj5*cj5;
IkReal x13044=(r11*r21);
IkReal x13045=((1.0)*r20);
IkReal x13046=(cj5*sj5);
IkReal x13047=((((-1.0)*r10*x13043*x13045))+(((-1.0)*x13044))+((r11*r20*x13046))+(((-1.0)*r12*r22))+((x13043*x13044))+((r10*r21*x13046)));
j4eval[0]=x13047;
j4eval[1]=((IKabs(((((-1.0)*cj5*x13045))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13047);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13048=cj5*cj5;
IkReal x13049=(r21*sj5);
IkReal x13050=(r11*r21);
IkReal x13051=((1.0)*r20);
CheckValue<IkReal> x13052=IKPowWithIntegerCheck(IKsign((((x13048*x13050))+(((-1.0)*x13050))+(((-1.0)*r12*r22))+((cj5*r10*x13049))+(((-1.0)*r10*x13048*x13051))+((cj5*r11*r20*sj5)))),-1);
if(!x13052.valid){
continue;
}
CheckValue<IkReal> x13053 = IKatan2WithCheck(IkReal((x13049+(((-1.0)*cj5*x13051)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13052.value)))+(x13053.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13054=IKcos(j4);
IkReal x13055=IKsin(j4);
IkReal x13056=(cj5*r00);
IkReal x13057=(cj5*r20);
IkReal x13058=(cj5*r10);
IkReal x13059=((1.0)*x13054);
IkReal x13060=((1.0)*x13055);
IkReal x13061=(sj5*x13054);
IkReal x13062=(sj5*x13055);
evalcond[0]=((((-1.0)*x13057*x13059))+((r22*x13055))+((r21*x13061)));
evalcond[1]=(((r12*x13055))+((r11*x13061))+(((-1.0)*x13058*x13059)));
evalcond[2]=((((-1.0)*x13057*x13060))+((r21*x13062))+(((-1.0)*r22*x13059)));
evalcond[3]=((((-1.0)*x13056*x13060))+(((-1.0)*r02*x13059))+((r01*x13062)));
evalcond[4]=((1.0)+((r02*x13055))+(((-1.0)*x13056*x13059))+((r01*x13061)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13059))+((r11*x13062))+(((-1.0)*x13058*x13060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13063=((1.0)*cj5);
CheckValue<IkReal> x13064=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13063)))),-1);
if(!x13064.valid){
continue;
}
CheckValue<IkReal> x13065 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13063))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13064.value)))+(x13065.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13066=IKcos(j4);
IkReal x13067=IKsin(j4);
IkReal x13068=(cj5*r00);
IkReal x13069=(cj5*r20);
IkReal x13070=(cj5*r10);
IkReal x13071=((1.0)*x13066);
IkReal x13072=((1.0)*x13067);
IkReal x13073=(sj5*x13066);
IkReal x13074=(sj5*x13067);
evalcond[0]=(((r21*x13073))+(((-1.0)*x13069*x13071))+((r22*x13067)));
evalcond[1]=(((r12*x13067))+((r11*x13073))+(((-1.0)*x13070*x13071)));
evalcond[2]=(((r21*x13074))+(((-1.0)*x13069*x13072))+(((-1.0)*r22*x13071)));
evalcond[3]=((((-1.0)*r02*x13071))+(((-1.0)*x13068*x13072))+((r01*x13074)));
evalcond[4]=((1.0)+((r02*x13067))+(((-1.0)*x13068*x13071))+((r01*x13073)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13071))+((r11*x13074))+(((-1.0)*x13070*x13072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13075=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13075.valid){
continue;
}
CheckValue<IkReal> x13076 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13075.value)))+(x13076.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13077=IKcos(j4);
IkReal x13078=IKsin(j4);
IkReal x13079=(cj5*r00);
IkReal x13080=(cj5*r20);
IkReal x13081=(cj5*r10);
IkReal x13082=((1.0)*x13077);
IkReal x13083=((1.0)*x13078);
IkReal x13084=(sj5*x13077);
IkReal x13085=(sj5*x13078);
evalcond[0]=((((-1.0)*x13080*x13082))+((r22*x13078))+((r21*x13084)));
evalcond[1]=(((r11*x13084))+(((-1.0)*x13081*x13082))+((r12*x13078)));
evalcond[2]=((((-1.0)*r22*x13082))+(((-1.0)*x13080*x13083))+((r21*x13085)));
evalcond[3]=((((-1.0)*r02*x13082))+(((-1.0)*x13079*x13083))+((r01*x13085)));
evalcond[4]=((1.0)+((r02*x13078))+(((-1.0)*x13079*x13082))+((r01*x13084)));
evalcond[5]=((1.0)+((r11*x13085))+(((-1.0)*x13081*x13083))+(((-1.0)*r12*x13082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13086=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13086;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13086);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13087=((1.0)*cj5);
IkReal x13088=((((-1.0)*r21*x13087))+(((-1.0)*r20*sj5)));
j4eval[0]=x13088;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x13087))))));
j4eval[2]=IKsign(x13088);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13089=cj5*cj5;
IkReal x13090=(r11*r21);
IkReal x13091=((1.0)*r20);
IkReal x13092=(cj5*sj5);
IkReal x13093=((((-1.0)*r12*r22))+((x13089*x13090))+((r11*r20*x13092))+((r10*r21*x13092))+(((-1.0)*r10*x13089*x13091))+(((-1.0)*x13090)));
j4eval[0]=x13093;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13091))))));
j4eval[2]=IKsign(x13093);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13094=cj5*cj5;
IkReal x13095=(r21*sj5);
IkReal x13096=(r11*r21);
IkReal x13097=((1.0)*r20);
CheckValue<IkReal> x13098=IKPowWithIntegerCheck(IKsign((((cj5*r10*x13095))+(((-1.0)*r10*x13094*x13097))+(((-1.0)*r12*r22))+((x13094*x13096))+(((-1.0)*x13096))+((cj5*r11*r20*sj5)))),-1);
if(!x13098.valid){
continue;
}
CheckValue<IkReal> x13099 = IKatan2WithCheck(IkReal((x13095+(((-1.0)*cj5*x13097)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13098.value)))+(x13099.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13100=IKcos(j4);
IkReal x13101=IKsin(j4);
IkReal x13102=(cj5*r00);
IkReal x13103=(cj5*r20);
IkReal x13104=(cj5*r10);
IkReal x13105=((1.0)*x13100);
IkReal x13106=((1.0)*x13101);
IkReal x13107=(sj5*x13100);
IkReal x13108=(sj5*x13101);
evalcond[0]=(((r22*x13101))+(((-1.0)*x13103*x13105))+((r21*x13107)));
evalcond[1]=((((-1.0)*x13104*x13105))+((r12*x13101))+((r11*x13107)));
evalcond[2]=((((-1.0)*x13103*x13106))+((r21*x13108))+(((-1.0)*r22*x13105)));
evalcond[3]=(((r01*x13108))+(((-1.0)*x13102*x13106))+(((-1.0)*r02*x13105)));
evalcond[4]=((-1.0)+((r01*x13107))+(((-1.0)*x13102*x13105))+((r02*x13101)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13105))+(((-1.0)*x13104*x13106))+((r11*x13108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13109=((1.0)*cj5);
CheckValue<IkReal> x13110=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13109))+(((-1.0)*r20*sj5)))),-1);
if(!x13110.valid){
continue;
}
CheckValue<IkReal> x13111 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13109)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13110.value)))+(x13111.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13112=IKcos(j4);
IkReal x13113=IKsin(j4);
IkReal x13114=(cj5*r00);
IkReal x13115=(cj5*r20);
IkReal x13116=(cj5*r10);
IkReal x13117=((1.0)*x13112);
IkReal x13118=((1.0)*x13113);
IkReal x13119=(sj5*x13112);
IkReal x13120=(sj5*x13113);
evalcond[0]=(((r22*x13113))+((r21*x13119))+(((-1.0)*x13115*x13117)));
evalcond[1]=(((r12*x13113))+(((-1.0)*x13116*x13117))+((r11*x13119)));
evalcond[2]=((((-1.0)*x13115*x13118))+((r21*x13120))+(((-1.0)*r22*x13117)));
evalcond[3]=(((r01*x13120))+(((-1.0)*x13114*x13118))+(((-1.0)*r02*x13117)));
evalcond[4]=((-1.0)+((r02*x13113))+(((-1.0)*x13114*x13117))+((r01*x13119)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13117))+(((-1.0)*x13116*x13118))+((r11*x13120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13121 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13121.valid){
continue;
}
CheckValue<IkReal> x13122=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13121.value)+(((1.5707963267949)*(x13122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13123=IKcos(j4);
IkReal x13124=IKsin(j4);
IkReal x13125=(cj5*r00);
IkReal x13126=(cj5*r20);
IkReal x13127=(cj5*r10);
IkReal x13128=((1.0)*x13123);
IkReal x13129=((1.0)*x13124);
IkReal x13130=(sj5*x13123);
IkReal x13131=(sj5*x13124);
evalcond[0]=((((-1.0)*x13126*x13128))+((r21*x13130))+((r22*x13124)));
evalcond[1]=((((-1.0)*x13127*x13128))+((r12*x13124))+((r11*x13130)));
evalcond[2]=((((-1.0)*x13126*x13129))+((r21*x13131))+(((-1.0)*r22*x13128)));
evalcond[3]=((((-1.0)*r02*x13128))+((r01*x13131))+(((-1.0)*x13125*x13129)));
evalcond[4]=((-1.0)+((r01*x13130))+(((-1.0)*x13125*x13128))+((r02*x13124)));
evalcond[5]=((1.0)+(((-1.0)*x13127*x13129))+((r11*x13131))+(((-1.0)*r12*x13128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13132=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13132);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13132);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13133=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13133);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13133);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13134=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13134))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13134)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13135=((1.0)*cj5);
CheckValue<IkReal> x13136=IKPowWithIntegerCheck(((((-1.0)*r10*x13135))+((r11*sj5))),-1);
if(!x13136.valid){
continue;
}
CheckValue<IkReal> x13137=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13135))),-1);
if(!x13137.valid){
continue;
}
if( IKabs(((-1.0)*(x13136.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13137.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13136.value)))+IKsqr(((x13137.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13136.value)), ((x13137.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13138=IKsin(j4);
IkReal x13139=IKcos(j4);
IkReal x13140=((1.0)*cj5);
IkReal x13141=((1.0)*cj2);
IkReal x13142=(sj5*x13139);
IkReal x13143=(sj5*x13138);
evalcond[0]=((-1.0)*r22*x13139);
evalcond[1]=(((sj1*sj2))+(((-1.0)*cj1*x13141))+((r22*x13138)));
evalcond[2]=((((-1.0)*r00*x13138*x13140))+((r01*x13143)));
evalcond[3]=((((-1.0)*r10*x13139*x13140))+((r11*x13142)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13138*x13140))+((r11*x13143)));
evalcond[5]=((((-1.0)*sj1*x13141))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x13139*x13140))+((r01*x13142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13144=IKPowWithIntegerCheck(r22,-1);
if(!x13144.valid){
continue;
}
CheckValue<IkReal> x13145=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13145.valid){
continue;
}
if( IKabs(((x13144.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13145.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13144.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13145.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13144.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13145.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13146=IKsin(j4);
IkReal x13147=IKcos(j4);
IkReal x13148=((1.0)*cj5);
IkReal x13149=((1.0)*cj2);
IkReal x13150=(sj5*x13147);
IkReal x13151=(sj5*x13146);
evalcond[0]=((-1.0)*r22*x13147);
evalcond[1]=(((r22*x13146))+((sj1*sj2))+(((-1.0)*cj1*x13149)));
evalcond[2]=((((-1.0)*r00*x13146*x13148))+((r01*x13151)));
evalcond[3]=((((-1.0)*r10*x13147*x13148))+((r11*x13150)));
evalcond[4]=((1.0)+((r11*x13151))+(((-1.0)*r10*x13146*x13148)));
evalcond[5]=((((-1.0)*sj1*x13149))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x13147*x13148))+((r01*x13150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13152=(sj1*sj2);
IkReal x13153=(cj5*r10);
IkReal x13154=(r11*sj5);
IkReal x13155=(cj1*cj2);
CheckValue<IkReal> x13156=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13156.valid){
continue;
}
CheckValue<IkReal> x13157 = IKatan2WithCheck(IkReal(((((-1.0)*x13152*x13153))+((x13152*x13154))+((x13153*x13155))+(((-1.0)*x13154*x13155)))),IkReal(((((-1.0)*r12*x13152))+((r12*x13155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13156.value)))+(x13157.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13158=IKcos(j4);
IkReal x13159=IKsin(j4);
IkReal x13160=(cj5*r00);
IkReal x13161=(cj5*r10);
IkReal x13162=(r21*sj5);
IkReal x13163=((1.0)*cj2);
IkReal x13164=(cj5*r20);
IkReal x13165=((1.0)*x13158);
IkReal x13166=((1.0)*x13159);
IkReal x13167=(sj5*x13159);
IkReal x13168=(sj5*x13158);
evalcond[0]=((((-1.0)*x13161*x13165))+((r11*x13168))+((r12*x13159)));
evalcond[1]=((((-1.0)*x13164*x13166))+(((-1.0)*r22*x13165))+((x13159*x13162)));
evalcond[2]=((((-1.0)*x13160*x13166))+((r01*x13167))+(((-1.0)*r02*x13165)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13165))+(((-1.0)*x13161*x13166))+((r11*x13167)));
evalcond[4]=(((x13158*x13162))+(((-1.0)*cj1*x13163))+((sj1*sj2))+(((-1.0)*x13164*x13165))+((r22*x13159)));
evalcond[5]=(((r02*x13159))+(((-1.0)*x13160*x13165))+((r01*x13168))+(((-1.0)*sj1*x13163))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13169=((1.0)*cj5);
CheckValue<IkReal> x13170 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13169))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13170.valid){
continue;
}
CheckValue<IkReal> x13171=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13169))+(((-1.0)*r00*sj5)))),-1);
if(!x13171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13170.value)+(((1.5707963267949)*(x13171.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13172=IKcos(j4);
IkReal x13173=IKsin(j4);
IkReal x13174=(cj5*r00);
IkReal x13175=(cj5*r10);
IkReal x13176=(r21*sj5);
IkReal x13177=((1.0)*cj2);
IkReal x13178=(cj5*r20);
IkReal x13179=((1.0)*x13172);
IkReal x13180=((1.0)*x13173);
IkReal x13181=(sj5*x13173);
IkReal x13182=(sj5*x13172);
evalcond[0]=(((r11*x13182))+((r12*x13173))+(((-1.0)*x13175*x13179)));
evalcond[1]=((((-1.0)*x13178*x13180))+((x13173*x13176))+(((-1.0)*r22*x13179)));
evalcond[2]=((((-1.0)*x13174*x13180))+((r01*x13181))+(((-1.0)*r02*x13179)));
evalcond[3]=((1.0)+(((-1.0)*x13175*x13180))+((r11*x13181))+(((-1.0)*r12*x13179)));
evalcond[4]=((((-1.0)*cj1*x13177))+((sj1*sj2))+(((-1.0)*x13178*x13179))+((r22*x13173))+((x13172*x13176)));
evalcond[5]=((((-1.0)*sj1*x13177))+(((-1.0)*cj1*sj2))+((r01*x13182))+((r02*x13173))+(((-1.0)*x13174*x13179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13183=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13183.valid){
continue;
}
CheckValue<IkReal> x13184 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13183.value)))+(x13184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13185=IKcos(j4);
IkReal x13186=IKsin(j4);
IkReal x13187=(cj5*r00);
IkReal x13188=(cj5*r10);
IkReal x13189=(r21*sj5);
IkReal x13190=((1.0)*cj2);
IkReal x13191=(cj5*r20);
IkReal x13192=((1.0)*x13185);
IkReal x13193=((1.0)*x13186);
IkReal x13194=(sj5*x13186);
IkReal x13195=(sj5*x13185);
evalcond[0]=(((r12*x13186))+((r11*x13195))+(((-1.0)*x13188*x13192)));
evalcond[1]=(((x13186*x13189))+(((-1.0)*r22*x13192))+(((-1.0)*x13191*x13193)));
evalcond[2]=((((-1.0)*r02*x13192))+((r01*x13194))+(((-1.0)*x13187*x13193)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13192))+((r11*x13194))+(((-1.0)*x13188*x13193)));
evalcond[4]=(((r22*x13186))+(((-1.0)*cj1*x13190))+((sj1*sj2))+(((-1.0)*x13191*x13192))+((x13185*x13189)));
evalcond[5]=(((r02*x13186))+(((-1.0)*cj1*sj2))+((r01*x13195))+(((-1.0)*sj1*x13190))+(((-1.0)*x13187*x13192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13196=((-1.0)*r00);
IkReal x13198 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13198)==0){
continue;
}
IkReal x13197=pow(x13198,-0.5);
CheckValue<IkReal> x13199 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13196),IKFAST_ATAN2_MAGTHRESH);
if(!x13199.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13199.value));
IkReal gconst19=(r01*x13197);
IkReal gconst20=(x13196*x13197);
CheckValue<IkReal> x13200 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13200.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13200.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13201=((-1.0)*r00);
IkReal x13202=x13197;
CheckValue<IkReal> x13204 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13201),IKFAST_ATAN2_MAGTHRESH);
if(!x13204.valid){
continue;
}
IkReal x13203=((-1.0)*(x13204.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13203;
IkReal gconst18=x13203;
IkReal gconst19=(r01*x13202);
IkReal gconst20=(x13201*x13202);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13205=((-1.0)*r00);
IkReal x13206=x13197;
CheckValue<IkReal> x13208 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13205),IKFAST_ATAN2_MAGTHRESH);
if(!x13208.valid){
continue;
}
IkReal x13207=((-1.0)*(x13208.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13207;
IkReal gconst18=x13207;
IkReal gconst19=(r01*x13206);
IkReal gconst20=(x13205*x13206);
CheckValue<IkReal> x13216=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13216.valid){
continue;
}
IkReal x13209=x13216.value;
IkReal x13210=(sj3*x13209);
IkReal x13211=(r11*x13210);
IkReal x13212=(r21*x13210);
IkReal x13213=(r20*x13210);
IkReal x13214=(r10*x13210);
IkReal x13215=(r00*r01*x13210);
j4eval[0]=IKsign((((r10*x13213*(r00*r00)))+((r21*x13211*(r01*r01)))+((r12*r22*sj3))+((r00*r01*r10*x13212))+((r00*r01*r20*x13211))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13217=gconst19*gconst19;
IkReal x13218=gconst20*gconst20;
IkReal x13219=(gconst20*sj3);
IkReal x13220=((1.0)*cj3);
IkReal x13221=(r10*sj3);
IkReal x13222=(gconst19*r21);
IkReal x13223=(r11*r20);
IkReal x13224=(cj3*gconst20);
IkReal x13225=((1.0)*r10*r20);
IkReal x13226=(r21*x13217);
CheckValue<IkReal> x13227 = IKatan2WithCheck(IkReal((((gconst19*r22*x13221))+((r11*r22*x13219)))),IkReal((((r11*x13219*x13222))+(((-1.0)*gconst19*x13219*x13225))+((x13221*x13226))+(((-1.0)*sj3*x13218*x13223)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13227.valid){
continue;
}
CheckValue<IkReal> x13228=IKPowWithIntegerCheck(IKsign((((gconst19*x13223*x13224))+(((-1.0)*r12*r22*x13220))+((r10*x13222*x13224))+(((-1.0)*r10*r20*x13218*x13220))+(((-1.0)*r11*x13220*x13226)))),-1);
if(!x13228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13227.value)+(((1.5707963267949)*(x13228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13229=IKsin(j4);
IkReal x13230=IKcos(j4);
IkReal x13231=(sj1*sj2);
IkReal x13232=(gconst20*sj3);
IkReal x13233=(gconst19*r21);
IkReal x13234=(gconst20*r10);
IkReal x13235=(cj3*gconst19);
IkReal x13236=(gconst19*sj3);
IkReal x13237=((1.0)*cj1);
IkReal x13238=(cj3*gconst20);
IkReal x13239=(cj2*sj1);
IkReal x13240=(cj2*x13237);
IkReal x13241=((1.0)*x13230);
IkReal x13242=((1.0)*x13229);
IkReal x13243=(cj3*x13229);
IkReal x13244=(gconst19*x13229);
evalcond[0]=(((x13229*x13233))+(((-1.0)*r22*x13241))+(((-1.0)*gconst20*r20*x13242)));
evalcond[1]=((((-1.0)*r02*x13241))+((r01*x13244))+(((-1.0)*gconst20*r00*x13242)));
evalcond[2]=((1.0)+(((-1.0)*x13234*x13242))+((r11*x13244))+(((-1.0)*r12*x13241)));
evalcond[3]=(((r11*x13230*x13235))+((r10*x13236))+((r11*x13232))+((r12*x13243))+(((-1.0)*cj3*x13234*x13241)));
evalcond[4]=(((r10*x13235))+(((-1.0)*r11*x13236*x13241))+((r11*x13238))+((r10*x13230*x13232))+(((-1.0)*r12*sj3*x13242)));
evalcond[5]=(((r20*x13236))+((cj1*sj2))+((r22*x13243))+((cj3*x13230*x13233))+((r21*x13232))+(((-1.0)*r20*x13238*x13241))+x13239);
evalcond[6]=(((r01*x13232))+(((-1.0)*r00*x13238*x13241))+((r02*x13243))+(((-1.0)*x13240))+x13231+((r01*x13230*x13235))+((r00*x13236)));
evalcond[7]=(((r20*x13235))+(((-1.0)*r22*sj3*x13242))+((r20*x13230*x13232))+(((-1.0)*sj3*x13233*x13241))+((r21*x13238))+(((-1.0)*x13240))+x13231);
evalcond[8]=(((r01*x13238))+(((-1.0)*r02*sj3*x13242))+(((-1.0)*r01*x13236*x13241))+((r00*x13230*x13232))+(((-1.0)*x13239))+(((-1.0)*sj2*x13237))+((r00*x13235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13245=gconst19*gconst19;
IkReal x13246=gconst20*gconst20;
IkReal x13247=(r21*sj3);
IkReal x13248=(cj3*r11);
IkReal x13249=(gconst19*gconst20);
IkReal x13250=((1.0)*r10);
IkReal x13251=(cj3*r10);
IkReal x13252=(r20*x13246);
CheckValue<IkReal> x13253=IKPowWithIntegerCheck(IKsign((((r11*x13245*x13247))+(((-1.0)*x13247*x13249*x13250))+((r12*r22*sj3))+(((-1.0)*r11*r20*sj3*x13249))+((r10*sj3*x13252)))),-1);
if(!x13253.valid){
continue;
}
CheckValue<IkReal> x13254 = IKatan2WithCheck(IkReal((((gconst19*r22*x13251))+((gconst20*r22*x13248)))),IkReal(((((-1.0)*x13248*x13252))+(((-1.0)*cj3*r20*x13249*x13250))+((r21*x13245*x13251))+((r21*x13248*x13249)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13253.value)))+(x13254.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13255=IKsin(j4);
IkReal x13256=IKcos(j4);
IkReal x13257=(sj1*sj2);
IkReal x13258=(gconst20*sj3);
IkReal x13259=(gconst19*r21);
IkReal x13260=(gconst20*r10);
IkReal x13261=(cj3*gconst19);
IkReal x13262=(gconst19*sj3);
IkReal x13263=((1.0)*cj1);
IkReal x13264=(cj3*gconst20);
IkReal x13265=(cj2*sj1);
IkReal x13266=(cj2*x13263);
IkReal x13267=((1.0)*x13256);
IkReal x13268=((1.0)*x13255);
IkReal x13269=(cj3*x13255);
IkReal x13270=(gconst19*x13255);
evalcond[0]=(((x13255*x13259))+(((-1.0)*r22*x13267))+(((-1.0)*gconst20*r20*x13268)));
evalcond[1]=((((-1.0)*gconst20*r00*x13268))+((r01*x13270))+(((-1.0)*r02*x13267)));
evalcond[2]=((1.0)+((r11*x13270))+(((-1.0)*r12*x13267))+(((-1.0)*x13260*x13268)));
evalcond[3]=(((r12*x13269))+((r10*x13262))+((r11*x13258))+(((-1.0)*cj3*x13260*x13267))+((r11*x13256*x13261)));
evalcond[4]=(((r11*x13264))+((r10*x13261))+(((-1.0)*r11*x13262*x13267))+(((-1.0)*r12*sj3*x13268))+((r10*x13256*x13258)));
evalcond[5]=(((r21*x13258))+((cj3*x13256*x13259))+((cj1*sj2))+((r20*x13262))+(((-1.0)*r20*x13264*x13267))+((r22*x13269))+x13265);
evalcond[6]=((((-1.0)*x13266))+((r01*x13256*x13261))+((r00*x13262))+((r01*x13258))+((r02*x13269))+(((-1.0)*r00*x13264*x13267))+x13257);
evalcond[7]=((((-1.0)*x13266))+((r21*x13264))+((r20*x13256*x13258))+((r20*x13261))+(((-1.0)*r22*sj3*x13268))+(((-1.0)*sj3*x13259*x13267))+x13257);
evalcond[8]=((((-1.0)*x13265))+(((-1.0)*sj2*x13263))+((r00*x13261))+((r01*x13264))+((r00*x13256*x13258))+(((-1.0)*r02*sj3*x13268))+(((-1.0)*r01*x13262*x13267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13271 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13271.valid){
continue;
}
CheckValue<IkReal> x13272=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13271.value)+(((1.5707963267949)*(x13272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13273=IKsin(j4);
IkReal x13274=IKcos(j4);
IkReal x13275=(sj1*sj2);
IkReal x13276=(gconst20*sj3);
IkReal x13277=(gconst19*r21);
IkReal x13278=(gconst20*r10);
IkReal x13279=(cj3*gconst19);
IkReal x13280=(gconst19*sj3);
IkReal x13281=((1.0)*cj1);
IkReal x13282=(cj3*gconst20);
IkReal x13283=(cj2*sj1);
IkReal x13284=(cj2*x13281);
IkReal x13285=((1.0)*x13274);
IkReal x13286=((1.0)*x13273);
IkReal x13287=(cj3*x13273);
IkReal x13288=(gconst19*x13273);
evalcond[0]=((((-1.0)*r22*x13285))+(((-1.0)*gconst20*r20*x13286))+((x13273*x13277)));
evalcond[1]=((((-1.0)*gconst20*r00*x13286))+(((-1.0)*r02*x13285))+((r01*x13288)));
evalcond[2]=((1.0)+((r11*x13288))+(((-1.0)*x13278*x13286))+(((-1.0)*r12*x13285)));
evalcond[3]=(((r12*x13287))+((r11*x13276))+((r10*x13280))+((r11*x13274*x13279))+(((-1.0)*cj3*x13278*x13285)));
evalcond[4]=(((r11*x13282))+((r10*x13279))+(((-1.0)*r11*x13280*x13285))+(((-1.0)*r12*sj3*x13286))+((r10*x13274*x13276)));
evalcond[5]=(((cj3*x13274*x13277))+((r21*x13276))+(((-1.0)*r20*x13282*x13285))+((r20*x13280))+((cj1*sj2))+((r22*x13287))+x13283);
evalcond[6]=(((r01*x13276))+(((-1.0)*r00*x13282*x13285))+((r01*x13274*x13279))+((r02*x13287))+x13275+((r00*x13280))+(((-1.0)*x13284)));
evalcond[7]=(((r20*x13279))+(((-1.0)*r22*sj3*x13286))+(((-1.0)*sj3*x13277*x13285))+((r20*x13274*x13276))+((r21*x13282))+x13275+(((-1.0)*x13284)));
evalcond[8]=((((-1.0)*r01*x13280*x13285))+(((-1.0)*sj2*x13281))+((r00*x13274*x13276))+((r00*x13279))+(((-1.0)*x13283))+((r01*x13282))+(((-1.0)*r02*sj3*x13286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13289=((-1.0)*r01);
IkReal x13291 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13291)==0){
continue;
}
IkReal x13290=pow(x13291,-0.5);
CheckValue<IkReal> x13292 = IKatan2WithCheck(IkReal(x13289),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13292.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13292.value))));
IkReal gconst22=(x13289*x13290);
IkReal gconst23=((1.0)*r00*x13290);
CheckValue<IkReal> x13293 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13293.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13293.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13294=((-1.0)*r01);
CheckValue<IkReal> x13297 = IKatan2WithCheck(IkReal(x13294),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13297.valid){
continue;
}
IkReal x13295=((1.0)*(x13297.value));
IkReal x13296=x13290;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13295)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13295)));
IkReal gconst22=(x13294*x13296);
IkReal gconst23=((1.0)*r00*x13296);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13298=((-1.0)*r01);
CheckValue<IkReal> x13301 = IKatan2WithCheck(IkReal(x13298),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13301.valid){
continue;
}
IkReal x13299=((1.0)*(x13301.value));
IkReal x13300=x13290;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13299)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13299)));
IkReal gconst22=(x13298*x13300);
IkReal gconst23=((1.0)*r00*x13300);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13302=gconst22*gconst22;
IkReal x13303=gconst23*gconst23;
IkReal x13304=(r21*sj3);
IkReal x13305=((1.0)*cj3);
IkReal x13306=(gconst23*r11);
IkReal x13307=(r22*sj3);
IkReal x13308=(gconst22*r10);
IkReal x13309=((1.0)*r20*sj3);
CheckValue<IkReal> x13310 = IKatan2WithCheck(IkReal((((x13306*x13307))+((x13307*x13308)))),IkReal((((gconst22*x13304*x13306))+((r10*x13302*x13304))+(((-1.0)*r11*x13303*x13309))+(((-1.0)*gconst23*x13308*x13309)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13310.valid){
continue;
}
CheckValue<IkReal> x13311=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*r21*x13302*x13305))+(((-1.0)*r10*r20*x13303*x13305))+((cj3*gconst23*r21*x13308))+((cj3*gconst22*r20*x13306))+(((-1.0)*r12*r22*x13305)))),-1);
if(!x13311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13310.value)+(((1.5707963267949)*(x13311.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13312=IKsin(j4);
IkReal x13313=IKcos(j4);
IkReal x13314=(sj1*sj2);
IkReal x13315=(gconst23*sj3);
IkReal x13316=(gconst22*sj3);
IkReal x13317=(cj2*sj1);
IkReal x13318=((1.0)*cj1);
IkReal x13319=(cj3*gconst23);
IkReal x13320=(cj3*gconst22);
IkReal x13321=(cj2*x13318);
IkReal x13322=((1.0)*x13313);
IkReal x13323=(cj3*x13312);
IkReal x13324=(gconst22*x13312);
IkReal x13325=((1.0)*sj3*x13312);
IkReal x13326=(x13313*x13320);
IkReal x13327=((1.0)*gconst23*x13312);
evalcond[0]=((((-1.0)*r22*x13322))+((r21*x13324))+(((-1.0)*r20*x13327)));
evalcond[1]=((((-1.0)*r02*x13322))+(((-1.0)*r00*x13327))+((r01*x13324)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13327))+(((-1.0)*r12*x13322))+((r11*x13324)));
evalcond[3]=(((r12*x13323))+((r11*x13315))+((r10*x13316))+(((-1.0)*r10*x13319*x13322))+((r11*x13326)));
evalcond[4]=((((-1.0)*r12*x13325))+((r11*x13319))+((r10*x13320))+(((-1.0)*r11*x13316*x13322))+((r10*x13313*x13315)));
evalcond[5]=(((r20*x13316))+((cj1*sj2))+(((-1.0)*r20*x13319*x13322))+((r21*x13326))+((r21*x13315))+x13317+((r22*x13323)));
evalcond[6]=(((r02*x13323))+((r01*x13315))+((r00*x13316))+(((-1.0)*r00*x13319*x13322))+((r01*x13326))+(((-1.0)*x13321))+x13314);
evalcond[7]=((((-1.0)*r22*x13325))+((r20*x13320))+(((-1.0)*r21*x13316*x13322))+(((-1.0)*x13321))+((r20*x13313*x13315))+((r21*x13319))+x13314);
evalcond[8]=(((r00*x13313*x13315))+(((-1.0)*r02*x13325))+(((-1.0)*sj2*x13318))+(((-1.0)*r01*x13316*x13322))+((r01*x13319))+((r00*x13320))+(((-1.0)*x13317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13328=((1.0)*gconst23);
CheckValue<IkReal> x13329=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13328)))),-1);
if(!x13329.valid){
continue;
}
CheckValue<IkReal> x13330 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x13328)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13329.value)))+(x13330.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13331=IKsin(j4);
IkReal x13332=IKcos(j4);
IkReal x13333=(sj1*sj2);
IkReal x13334=(gconst23*sj3);
IkReal x13335=(gconst22*sj3);
IkReal x13336=(cj2*sj1);
IkReal x13337=((1.0)*cj1);
IkReal x13338=(cj3*gconst23);
IkReal x13339=(cj3*gconst22);
IkReal x13340=(cj2*x13337);
IkReal x13341=((1.0)*x13332);
IkReal x13342=(cj3*x13331);
IkReal x13343=(gconst22*x13331);
IkReal x13344=((1.0)*sj3*x13331);
IkReal x13345=(x13332*x13339);
IkReal x13346=((1.0)*gconst23*x13331);
evalcond[0]=(((r21*x13343))+(((-1.0)*r22*x13341))+(((-1.0)*r20*x13346)));
evalcond[1]=((((-1.0)*r02*x13341))+((r01*x13343))+(((-1.0)*r00*x13346)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13346))+(((-1.0)*r12*x13341))+((r11*x13343)));
evalcond[3]=(((r10*x13335))+(((-1.0)*r10*x13338*x13341))+((r12*x13342))+((r11*x13345))+((r11*x13334)));
evalcond[4]=(((r10*x13339))+(((-1.0)*r11*x13335*x13341))+((r10*x13332*x13334))+(((-1.0)*r12*x13344))+((r11*x13338)));
evalcond[5]=(((cj1*sj2))+((r22*x13342))+((r21*x13345))+((r20*x13335))+((r21*x13334))+(((-1.0)*r20*x13338*x13341))+x13336);
evalcond[6]=((((-1.0)*x13340))+(((-1.0)*r00*x13338*x13341))+((r00*x13335))+((r01*x13334))+((r02*x13342))+((r01*x13345))+x13333);
evalcond[7]=((((-1.0)*r21*x13335*x13341))+(((-1.0)*x13340))+((r20*x13332*x13334))+((r20*x13339))+((r21*x13338))+(((-1.0)*r22*x13344))+x13333);
evalcond[8]=((((-1.0)*r01*x13335*x13341))+(((-1.0)*sj2*x13337))+(((-1.0)*x13336))+(((-1.0)*r02*x13344))+((r00*x13339))+((r01*x13338))+((r00*x13332*x13334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13347=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13347.valid){
continue;
}
CheckValue<IkReal> x13348 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13347.value)))+(x13348.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13349=IKsin(j4);
IkReal x13350=IKcos(j4);
IkReal x13351=(sj1*sj2);
IkReal x13352=(gconst23*sj3);
IkReal x13353=(gconst22*sj3);
IkReal x13354=(cj2*sj1);
IkReal x13355=((1.0)*cj1);
IkReal x13356=(cj3*gconst23);
IkReal x13357=(cj3*gconst22);
IkReal x13358=(cj2*x13355);
IkReal x13359=((1.0)*x13350);
IkReal x13360=(cj3*x13349);
IkReal x13361=(gconst22*x13349);
IkReal x13362=((1.0)*sj3*x13349);
IkReal x13363=(x13350*x13357);
IkReal x13364=((1.0)*gconst23*x13349);
evalcond[0]=((((-1.0)*r22*x13359))+(((-1.0)*r20*x13364))+((r21*x13361)));
evalcond[1]=((((-1.0)*r02*x13359))+((r01*x13361))+(((-1.0)*r00*x13364)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13364))+(((-1.0)*r12*x13359))+((r11*x13361)));
evalcond[3]=(((r12*x13360))+((r11*x13363))+((r10*x13353))+(((-1.0)*r10*x13356*x13359))+((r11*x13352)));
evalcond[4]=((((-1.0)*r12*x13362))+((r10*x13357))+((r10*x13350*x13352))+((r11*x13356))+(((-1.0)*r11*x13353*x13359)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*r20*x13356*x13359))+((r20*x13353))+((r21*x13352))+((r21*x13363))+((r22*x13360))+x13354);
evalcond[6]=(((r01*x13363))+((r01*x13352))+((r00*x13353))+(((-1.0)*x13358))+(((-1.0)*r00*x13356*x13359))+x13351+((r02*x13360)));
evalcond[7]=((((-1.0)*r22*x13362))+((r20*x13357))+(((-1.0)*r21*x13353*x13359))+((r21*x13356))+(((-1.0)*x13358))+x13351+((r20*x13350*x13352)));
evalcond[8]=((((-1.0)*x13354))+(((-1.0)*r02*x13362))+(((-1.0)*r01*x13353*x13359))+((r01*x13356))+((r00*x13357))+((r00*x13350*x13352))+(((-1.0)*sj2*x13355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13366 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13366)==0){
continue;
}
IkReal x13365=pow(x13366,-0.5);
CheckValue<IkReal> x13367 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13367.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13367.value));
IkReal gconst25=((-1.0)*r21*x13365);
IkReal gconst26=(r20*x13365);
CheckValue<IkReal> x13368 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13368.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13368.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13371 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13371.valid){
continue;
}
IkReal x13369=((-1.0)*(x13371.value));
IkReal x13370=x13365;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13369;
IkReal gconst24=x13369;
IkReal gconst25=((-1.0)*r21*x13370);
IkReal gconst26=(r20*x13370);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13374 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13374.valid){
continue;
}
IkReal x13372=((-1.0)*(x13374.value));
IkReal x13373=x13365;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13372;
IkReal gconst24=x13372;
IkReal gconst25=((-1.0)*r21*x13373);
IkReal gconst26=(r20*x13373);
CheckValue<IkReal> x13382=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13382.valid){
continue;
}
IkReal x13375=x13382.value;
IkReal x13376=(sj3*x13375);
IkReal x13377=(r11*x13376);
IkReal x13378=(r00*x13376);
IkReal x13379=(r01*x13376);
IkReal x13380=(r10*x13376);
IkReal x13381=(r20*r21*x13376);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x13377*(r21*r21)))+((r10*x13378*(r20*r20)))+((r00*r20*r21*x13377))+((r10*r20*r21*x13379))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13383=gconst25*gconst25;
IkReal x13384=gconst26*gconst26;
IkReal x13385=(r00*r11);
IkReal x13386=(r01*r10);
IkReal x13387=(r02*sj3);
IkReal x13388=(gconst25*r10);
IkReal x13389=(gconst26*r11);
IkReal x13390=((1.0)*sj3);
IkReal x13391=((1.0)*cj3);
IkReal x13392=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13393=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r10*x13384*x13391))+(((-1.0)*r02*r12*x13391))+((x13385*x13392))+((x13386*x13392))+(((-1.0)*r01*r11*x13383*x13391)))),-1);
if(!x13393.valid){
continue;
}
CheckValue<IkReal> x13394 = IKatan2WithCheck(IkReal((((x13387*x13388))+((x13387*x13389)))),IkReal((((sj3*x13383*x13386))+((gconst25*r01*sj3*x13389))+(((-1.0)*x13384*x13385*x13390))+(((-1.0)*gconst26*r00*x13388*x13390)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13393.value)))+(x13394.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13395=IKsin(j4);
IkReal x13396=IKcos(j4);
IkReal x13397=(sj1*sj2);
IkReal x13398=(gconst26*sj3);
IkReal x13399=(gconst25*sj3);
IkReal x13400=(gconst26*r10);
IkReal x13401=(gconst25*r11);
IkReal x13402=(cj3*gconst25);
IkReal x13403=((1.0)*cj2);
IkReal x13404=(cj1*sj2);
IkReal x13405=(gconst26*r00);
IkReal x13406=(gconst26*r20);
IkReal x13407=(cj3*gconst26);
IkReal x13408=(cj1*x13403);
IkReal x13409=((1.0)*x13396);
IkReal x13410=((1.0)*x13395);
IkReal x13411=(cj3*x13395);
IkReal x13412=(gconst25*x13395);
evalcond[0]=((((-1.0)*x13406*x13410))+(((-1.0)*r22*x13409))+((r21*x13412)));
evalcond[1]=((((-1.0)*r02*x13409))+((r01*x13412))+(((-1.0)*x13405*x13410)));
evalcond[2]=((1.0)+(((-1.0)*x13400*x13410))+(((-1.0)*r12*x13409))+((x13395*x13401)));
evalcond[3]=(((r11*x13398))+((r10*x13399))+((cj3*x13396*x13401))+((r12*x13411))+(((-1.0)*cj3*x13400*x13409)));
evalcond[4]=(((r10*x13396*x13398))+((r11*x13407))+((r10*x13402))+(((-1.0)*r12*sj3*x13410))+(((-1.0)*r11*x13399*x13409)));
evalcond[5]=(x13404+((r22*x13411))+((cj2*sj1))+((r21*x13398))+((r20*x13399))+(((-1.0)*cj3*x13406*x13409))+((r21*x13396*x13402)));
evalcond[6]=(((r02*x13411))+((r01*x13396*x13402))+(((-1.0)*cj3*x13405*x13409))+((r00*x13399))+(((-1.0)*x13408))+((r01*x13398))+x13397);
evalcond[7]=(((r21*x13407))+(((-1.0)*x13408))+((r20*x13396*x13398))+(((-1.0)*r22*sj3*x13410))+(((-1.0)*r21*x13399*x13409))+((r20*x13402))+x13397);
evalcond[8]=(((r01*x13407))+(((-1.0)*r01*x13399*x13409))+((r00*x13402))+(((-1.0)*sj1*x13403))+((r00*x13396*x13398))+(((-1.0)*x13404))+(((-1.0)*r02*sj3*x13410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13413=gconst26*gconst26;
IkReal x13414=gconst25*gconst25;
IkReal x13415=(r01*r10);
IkReal x13416=(cj3*r11);
IkReal x13417=(gconst25*gconst26);
IkReal x13418=(cj3*r10);
IkReal x13419=(r00*x13413);
IkReal x13420=((1.0)*sj3*x13417);
CheckValue<IkReal> x13421=IKPowWithIntegerCheck(IKsign((((r10*sj3*x13419))+((r02*r12*sj3))+(((-1.0)*x13415*x13420))+(((-1.0)*r00*r11*x13420))+((r01*r11*sj3*x13414)))),-1);
if(!x13421.valid){
continue;
}
CheckValue<IkReal> x13422 = IKatan2WithCheck(IkReal((((gconst25*r02*x13418))+((gconst26*r02*x13416)))),IkReal((((r01*x13416*x13417))+((cj3*x13414*x13415))+(((-1.0)*x13416*x13419))+(((-1.0)*r00*x13417*x13418)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13421.value)))+(x13422.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13423=IKsin(j4);
IkReal x13424=IKcos(j4);
IkReal x13425=(sj1*sj2);
IkReal x13426=(gconst26*sj3);
IkReal x13427=(gconst25*sj3);
IkReal x13428=(gconst26*r10);
IkReal x13429=(gconst25*r11);
IkReal x13430=(cj3*gconst25);
IkReal x13431=((1.0)*cj2);
IkReal x13432=(cj1*sj2);
IkReal x13433=(gconst26*r00);
IkReal x13434=(gconst26*r20);
IkReal x13435=(cj3*gconst26);
IkReal x13436=(cj1*x13431);
IkReal x13437=((1.0)*x13424);
IkReal x13438=((1.0)*x13423);
IkReal x13439=(cj3*x13423);
IkReal x13440=(gconst25*x13423);
evalcond[0]=((((-1.0)*x13434*x13438))+(((-1.0)*r22*x13437))+((r21*x13440)));
evalcond[1]=((((-1.0)*x13433*x13438))+((r01*x13440))+(((-1.0)*r02*x13437)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13437))+(((-1.0)*x13428*x13438))+((x13423*x13429)));
evalcond[3]=(((r11*x13426))+((r12*x13439))+(((-1.0)*cj3*x13428*x13437))+((r10*x13427))+((cj3*x13424*x13429)));
evalcond[4]=(((r10*x13424*x13426))+(((-1.0)*r11*x13427*x13437))+((r11*x13435))+(((-1.0)*r12*sj3*x13438))+((r10*x13430)));
evalcond[5]=(x13432+((cj2*sj1))+(((-1.0)*cj3*x13434*x13437))+((r22*x13439))+((r21*x13424*x13430))+((r21*x13426))+((r20*x13427)));
evalcond[6]=(x13425+(((-1.0)*x13436))+((r02*x13439))+((r01*x13424*x13430))+(((-1.0)*cj3*x13433*x13437))+((r00*x13427))+((r01*x13426)));
evalcond[7]=(x13425+(((-1.0)*x13436))+(((-1.0)*r21*x13427*x13437))+((r20*x13424*x13426))+((r21*x13435))+((r20*x13430))+(((-1.0)*r22*sj3*x13438)));
evalcond[8]=(((r01*x13435))+(((-1.0)*x13432))+(((-1.0)*sj1*x13431))+(((-1.0)*r01*x13427*x13437))+(((-1.0)*r02*sj3*x13438))+((r00*x13424*x13426))+((r00*x13430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13441=((1.0)*gconst26);
CheckValue<IkReal> x13442=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13441))+(((-1.0)*gconst25*r00)))),-1);
if(!x13442.valid){
continue;
}
CheckValue<IkReal> x13443 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13441))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13442.value)))+(x13443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13444=IKsin(j4);
IkReal x13445=IKcos(j4);
IkReal x13446=(sj1*sj2);
IkReal x13447=(gconst26*sj3);
IkReal x13448=(gconst25*sj3);
IkReal x13449=(gconst26*r10);
IkReal x13450=(gconst25*r11);
IkReal x13451=(cj3*gconst25);
IkReal x13452=((1.0)*cj2);
IkReal x13453=(cj1*sj2);
IkReal x13454=(gconst26*r00);
IkReal x13455=(gconst26*r20);
IkReal x13456=(cj3*gconst26);
IkReal x13457=(cj1*x13452);
IkReal x13458=((1.0)*x13445);
IkReal x13459=((1.0)*x13444);
IkReal x13460=(cj3*x13444);
IkReal x13461=(gconst25*x13444);
evalcond[0]=((((-1.0)*r22*x13458))+((r21*x13461))+(((-1.0)*x13455*x13459)));
evalcond[1]=((((-1.0)*x13454*x13459))+(((-1.0)*r02*x13458))+((r01*x13461)));
evalcond[2]=((1.0)+((x13444*x13450))+(((-1.0)*x13449*x13459))+(((-1.0)*r12*x13458)));
evalcond[3]=(((r12*x13460))+(((-1.0)*cj3*x13449*x13458))+((cj3*x13445*x13450))+((r10*x13448))+((r11*x13447)));
evalcond[4]=(((r10*x13451))+((r11*x13456))+(((-1.0)*r12*sj3*x13459))+((r10*x13445*x13447))+(((-1.0)*r11*x13448*x13458)));
evalcond[5]=(x13453+((cj2*sj1))+((r21*x13445*x13451))+((r20*x13448))+((r22*x13460))+(((-1.0)*cj3*x13455*x13458))+((r21*x13447)));
evalcond[6]=(x13446+((r01*x13445*x13451))+(((-1.0)*x13457))+((r00*x13448))+((r01*x13447))+((r02*x13460))+(((-1.0)*cj3*x13454*x13458)));
evalcond[7]=(x13446+((r20*x13451))+((r21*x13456))+(((-1.0)*x13457))+(((-1.0)*r21*x13448*x13458))+((r20*x13445*x13447))+(((-1.0)*r22*sj3*x13459)));
evalcond[8]=((((-1.0)*r02*sj3*x13459))+((r00*x13445*x13447))+(((-1.0)*sj1*x13452))+(((-1.0)*x13453))+(((-1.0)*r01*x13448*x13458))+((r01*x13456))+((r00*x13451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13463 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13463)==0){
continue;
}
IkReal x13462=pow(x13463,-0.5);
CheckValue<IkReal> x13464 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13464.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13464.value))));
IkReal gconst28=((1.0)*r21*x13462);
IkReal gconst29=((-1.0)*r20*x13462);
CheckValue<IkReal> x13465 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13465.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13465.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13468 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13468.valid){
continue;
}
IkReal x13466=((1.0)*(x13468.value));
IkReal x13467=x13462;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13466)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13466)));
IkReal gconst28=((1.0)*r21*x13467);
IkReal gconst29=((-1.0)*r20*x13467);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13471 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13471.valid){
continue;
}
IkReal x13469=((1.0)*(x13471.value));
IkReal x13470=x13462;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13469)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13469)));
IkReal gconst28=((1.0)*r21*x13470);
IkReal gconst29=((-1.0)*r20*x13470);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13474 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13474.valid){
continue;
}
IkReal x13472=((1.0)*(x13474.value));
IkReal x13473=x13462;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13472)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13472)));
IkReal gconst28=((1.0)*r21*x13473);
IkReal gconst29=((-1.0)*r20*x13473);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13477 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13477.valid){
continue;
}
IkReal x13475=((1.0)*(x13477.value));
IkReal x13476=x13462;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13475)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13475)));
IkReal gconst28=((1.0)*r21*x13476);
IkReal gconst29=((-1.0)*r20*x13476);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13480 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13480.valid){
continue;
}
IkReal x13478=((1.0)*(x13480.value));
IkReal x13479=x13462;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13478)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13478)));
IkReal gconst28=((1.0)*r21*x13479);
IkReal gconst29=((-1.0)*r20*x13479);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13483 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13483.valid){
continue;
}
IkReal x13481=((1.0)*(x13483.value));
IkReal x13482=x13462;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13481)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13481)));
IkReal gconst28=((1.0)*r21*x13482);
IkReal gconst29=((-1.0)*r20*x13482);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13484=(gconst29*r10);
IkReal x13485=(gconst28*r11);
CheckValue<IkReal> x13486=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13484*x13485))+(x13485*x13485)+(x13484*x13484))),-1);
if(!x13486.valid){
continue;
}
CheckValue<IkReal> x13487 = IKatan2WithCheck(IkReal((x13484+(((-1.0)*x13485)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13486.value)))+(x13487.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13488=IKsin(j4);
IkReal x13489=IKcos(j4);
IkReal x13490=(gconst28*r11);
IkReal x13491=((1.0)*cj2);
IkReal x13492=((1.0)*x13489);
IkReal x13493=(gconst29*x13489);
IkReal x13494=(gconst28*x13488);
IkReal x13495=((1.0)*x13488);
IkReal x13496=(gconst29*x13495);
evalcond[0]=((((-1.0)*r20*x13496))+(((-1.0)*r22*x13492))+((r21*x13494)));
evalcond[1]=((((-1.0)*r00*x13496))+(((-1.0)*r02*x13492))+((r01*x13494)));
evalcond[2]=((((-1.0)*r12*x13495))+(((-1.0)*x13490*x13492))+((r10*x13493)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13492))+(((-1.0)*r10*x13496))+((x13488*x13490)));
evalcond[4]=((((-1.0)*r22*x13495))+((sj1*sj2))+((r20*x13493))+(((-1.0)*gconst28*r21*x13492))+(((-1.0)*cj1*x13491)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x13495))+((r00*x13493))+(((-1.0)*gconst28*r01*x13492))+(((-1.0)*sj1*x13491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13497=((1.0)*gconst29);
CheckValue<IkReal> x13498=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13497))+(((-1.0)*gconst28*r00)))),-1);
if(!x13498.valid){
continue;
}
CheckValue<IkReal> x13499 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13497))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13498.value)))+(x13499.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13500=IKsin(j4);
IkReal x13501=IKcos(j4);
IkReal x13502=(gconst28*r11);
IkReal x13503=((1.0)*cj2);
IkReal x13504=((1.0)*x13501);
IkReal x13505=(gconst29*x13501);
IkReal x13506=(gconst28*x13500);
IkReal x13507=((1.0)*x13500);
IkReal x13508=(gconst29*x13507);
evalcond[0]=((((-1.0)*r20*x13508))+((r21*x13506))+(((-1.0)*r22*x13504)));
evalcond[1]=((((-1.0)*r00*x13508))+(((-1.0)*r02*x13504))+((r01*x13506)));
evalcond[2]=(((r10*x13505))+(((-1.0)*r12*x13507))+(((-1.0)*x13502*x13504)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13504))+(((-1.0)*r10*x13508))+((x13500*x13502)));
evalcond[4]=(((r20*x13505))+((sj1*sj2))+(((-1.0)*cj1*x13503))+(((-1.0)*gconst28*r21*x13504))+(((-1.0)*r22*x13507)));
evalcond[5]=((((-1.0)*sj1*x13503))+(((-1.0)*gconst28*r01*x13504))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13507))+((r00*x13505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13509=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13509.valid){
continue;
}
CheckValue<IkReal> x13510 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13509.value)))+(x13510.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13511=IKsin(j4);
IkReal x13512=IKcos(j4);
IkReal x13513=(gconst28*r11);
IkReal x13514=((1.0)*cj2);
IkReal x13515=((1.0)*x13512);
IkReal x13516=(gconst29*x13512);
IkReal x13517=(gconst28*x13511);
IkReal x13518=((1.0)*x13511);
IkReal x13519=(gconst29*x13518);
evalcond[0]=(((r21*x13517))+(((-1.0)*r22*x13515))+(((-1.0)*r20*x13519)));
evalcond[1]=((((-1.0)*r00*x13519))+((r01*x13517))+(((-1.0)*r02*x13515)));
evalcond[2]=((((-1.0)*r12*x13518))+(((-1.0)*x13513*x13515))+((r10*x13516)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13515))+(((-1.0)*r10*x13519))+((x13511*x13513)));
evalcond[4]=((((-1.0)*r22*x13518))+((r20*x13516))+(((-1.0)*cj1*x13514))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13515)));
evalcond[5]=((((-1.0)*sj1*x13514))+(((-1.0)*gconst28*r01*x13515))+(((-1.0)*cj1*sj2))+((r00*x13516))+(((-1.0)*r02*x13518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13522 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13522.valid){
continue;
}
IkReal x13520=((1.0)*(x13522.value));
IkReal x13521=x13462;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13520)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13520)));
IkReal gconst28=((1.0)*r21*x13521);
IkReal gconst29=((-1.0)*r20*x13521);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13525 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13525.valid){
continue;
}
IkReal x13523=((1.0)*(x13525.value));
IkReal x13524=x13462;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13523)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13523)));
IkReal gconst28=((1.0)*r21*x13524);
IkReal gconst29=((-1.0)*r20*x13524);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13528 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13528.valid){
continue;
}
IkReal x13526=((1.0)*(x13528.value));
IkReal x13527=x13462;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13526)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13526)));
IkReal gconst28=((1.0)*r21*x13527);
IkReal gconst29=((-1.0)*r20*x13527);
IkReal x13529=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13533=IKPowWithIntegerCheck(x13529,-1);
if(!x13533.valid){
continue;
}
IkReal x13530=x13533.value;
IkReal x13531=((1.0)*x13530);
IkReal x13532=((((-2.0)*r10*r11*r20*r21*x13530))+(((-1.0)*x13531*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13531*(r10*r10)*(r20*r20))));
j4eval[0]=x13532;
j4eval[1]=r12;
j4eval[2]=x13529;
j4eval[3]=IKsign(x13532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13534=(gconst28*r11);
IkReal x13535=(gconst29*r10);
CheckValue<IkReal> x13536=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13534*x13534)))+(((-1.0)*(x13535*x13535)))+(((-1.0)*(r12*r12)))+(((2.0)*x13534*x13535)))),-1);
if(!x13536.valid){
continue;
}
CheckValue<IkReal> x13537 = IKatan2WithCheck(IkReal((x13534+(((-1.0)*x13535)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13536.value)))+(x13537.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13538=IKcos(j4);
IkReal x13539=IKsin(j4);
IkReal x13540=(gconst29*r10);
IkReal x13541=(gconst29*r20);
IkReal x13542=(gconst28*r21);
IkReal x13543=((1.0)*cj2);
IkReal x13544=(gconst29*r00);
IkReal x13545=((1.0)*x13538);
IkReal x13546=((1.0)*x13539);
IkReal x13547=(gconst28*x13538);
IkReal x13548=(gconst28*x13539);
evalcond[0]=((((-1.0)*x13540*x13545))+((r11*x13547))+((r12*x13539)));
evalcond[1]=(((x13539*x13542))+(((-1.0)*r22*x13545))+(((-1.0)*x13541*x13546)));
evalcond[2]=((((-1.0)*x13544*x13546))+((r01*x13548))+(((-1.0)*r02*x13545)));
evalcond[3]=((1.0)+(((-1.0)*x13540*x13546))+((r11*x13548))+(((-1.0)*r12*x13545)));
evalcond[4]=(((sj1*sj2))+((r22*x13539))+(((-1.0)*cj1*x13543))+((x13538*x13542))+(((-1.0)*x13541*x13545)));
evalcond[5]=((((-1.0)*x13544*x13545))+((r01*x13547))+((r02*x13539))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13549=((1.0)*gconst29);
CheckValue<IkReal> x13550 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13549)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13550.valid){
continue;
}
CheckValue<IkReal> x13551=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13549))+(((-1.0)*gconst28*r00)))),-1);
if(!x13551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13550.value)+(((1.5707963267949)*(x13551.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13552=IKcos(j4);
IkReal x13553=IKsin(j4);
IkReal x13554=(gconst29*r10);
IkReal x13555=(gconst29*r20);
IkReal x13556=(gconst28*r21);
IkReal x13557=((1.0)*cj2);
IkReal x13558=(gconst29*r00);
IkReal x13559=((1.0)*x13552);
IkReal x13560=((1.0)*x13553);
IkReal x13561=(gconst28*x13552);
IkReal x13562=(gconst28*x13553);
evalcond[0]=(((r12*x13553))+((r11*x13561))+(((-1.0)*x13554*x13559)));
evalcond[1]=((((-1.0)*x13555*x13560))+((x13553*x13556))+(((-1.0)*r22*x13559)));
evalcond[2]=(((r01*x13562))+(((-1.0)*r02*x13559))+(((-1.0)*x13558*x13560)));
evalcond[3]=((1.0)+(((-1.0)*x13554*x13560))+((r11*x13562))+(((-1.0)*r12*x13559)));
evalcond[4]=(((r22*x13553))+(((-1.0)*x13555*x13559))+((sj1*sj2))+(((-1.0)*cj1*x13557))+((x13552*x13556)));
evalcond[5]=(((r01*x13561))+(((-1.0)*cj1*sj2))+(((-1.0)*x13558*x13559))+(((-1.0)*sj1*x13557))+((r02*x13553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13563=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13563.valid){
continue;
}
CheckValue<IkReal> x13564 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13563.value)))+(x13564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13565=IKcos(j4);
IkReal x13566=IKsin(j4);
IkReal x13567=(gconst29*r10);
IkReal x13568=(gconst29*r20);
IkReal x13569=(gconst28*r21);
IkReal x13570=((1.0)*cj2);
IkReal x13571=(gconst29*r00);
IkReal x13572=((1.0)*x13565);
IkReal x13573=((1.0)*x13566);
IkReal x13574=(gconst28*x13565);
IkReal x13575=(gconst28*x13566);
evalcond[0]=((((-1.0)*x13567*x13572))+((r11*x13574))+((r12*x13566)));
evalcond[1]=((((-1.0)*r22*x13572))+(((-1.0)*x13568*x13573))+((x13566*x13569)));
evalcond[2]=((((-1.0)*r02*x13572))+(((-1.0)*x13571*x13573))+((r01*x13575)));
evalcond[3]=((1.0)+(((-1.0)*x13567*x13573))+((r11*x13575))+(((-1.0)*r12*x13572)));
evalcond[4]=((((-1.0)*x13568*x13572))+((x13565*x13569))+((sj1*sj2))+(((-1.0)*cj1*x13570))+((r22*x13566)));
evalcond[5]=((((-1.0)*sj1*x13570))+(((-1.0)*cj1*sj2))+((r02*x13566))+(((-1.0)*x13571*x13572))+((r01*x13574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13578 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13578.valid){
continue;
}
IkReal x13576=((1.0)*(x13578.value));
IkReal x13577=x13462;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13576)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13576)));
IkReal gconst28=((1.0)*r21*x13577);
IkReal gconst29=((-1.0)*r20*x13577);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13581 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13581.valid){
continue;
}
IkReal x13579=((1.0)*(x13581.value));
IkReal x13580=x13462;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13579)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13579)));
IkReal gconst28=((1.0)*r21*x13580);
IkReal gconst29=((-1.0)*r20*x13580);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13584 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13584.valid){
continue;
}
IkReal x13582=((1.0)*(x13584.value));
IkReal x13583=x13462;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13582)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13582)));
IkReal gconst28=((1.0)*r21*x13583);
IkReal gconst29=((-1.0)*r20*x13583);
IkReal x13585=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13589=IKPowWithIntegerCheck(x13585,-1);
if(!x13589.valid){
continue;
}
IkReal x13586=x13589.value;
IkReal x13587=((1.0)*x13586);
IkReal x13588=((((-1.0)*x13587*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x13586))+(((-1.0)*(r12*r12)))+(((-1.0)*x13587*(r11*r11)*(r21*r21))));
j4eval[0]=x13588;
j4eval[1]=r12;
j4eval[2]=x13585;
j4eval[3]=IKsign(x13588);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13590=(gconst28*r11);
IkReal x13591=(gconst29*r10);
CheckValue<IkReal> x13592 = IKatan2WithCheck(IkReal((x13590+(((-1.0)*x13591)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13592.valid){
continue;
}
CheckValue<IkReal> x13593=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13591*x13591)))+(((-1.0)*(x13590*x13590)))+(((2.0)*x13590*x13591))+(((-1.0)*(r12*r12))))),-1);
if(!x13593.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13592.value)+(((1.5707963267949)*(x13593.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13594=IKcos(j4);
IkReal x13595=IKsin(j4);
IkReal x13596=(gconst29*r10);
IkReal x13597=(gconst29*r20);
IkReal x13598=(gconst28*r21);
IkReal x13599=(gconst29*r00);
IkReal x13600=((1.0)*x13594);
IkReal x13601=((1.0)*x13595);
IkReal x13602=(gconst28*x13594);
IkReal x13603=(gconst28*x13595);
evalcond[0]=(((r11*x13602))+(((-1.0)*x13596*x13600))+((r12*x13595)));
evalcond[1]=((((-1.0)*x13597*x13601))+((x13595*x13598))+(((-1.0)*r22*x13600)));
evalcond[2]=((((-1.0)*x13599*x13601))+(((-1.0)*r02*x13600))+((r01*x13603)));
evalcond[3]=((1.0)+((r11*x13603))+(((-1.0)*x13596*x13601))+(((-1.0)*r12*x13600)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13597*x13600))+((r22*x13595))+((cj1*sj2))+((x13594*x13598)));
evalcond[5]=((((-1.0)*x13599*x13600))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13595))+((r01*x13602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13604=((1.0)*gconst29);
CheckValue<IkReal> x13605 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13604)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13605.valid){
continue;
}
CheckValue<IkReal> x13606=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13604))+(((-1.0)*gconst28*r00)))),-1);
if(!x13606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13605.value)+(((1.5707963267949)*(x13606.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13607=IKcos(j4);
IkReal x13608=IKsin(j4);
IkReal x13609=(gconst29*r10);
IkReal x13610=(gconst29*r20);
IkReal x13611=(gconst28*r21);
IkReal x13612=(gconst29*r00);
IkReal x13613=((1.0)*x13607);
IkReal x13614=((1.0)*x13608);
IkReal x13615=(gconst28*x13607);
IkReal x13616=(gconst28*x13608);
evalcond[0]=((((-1.0)*x13609*x13613))+((r12*x13608))+((r11*x13615)));
evalcond[1]=(((x13608*x13611))+(((-1.0)*x13610*x13614))+(((-1.0)*r22*x13613)));
evalcond[2]=((((-1.0)*x13612*x13614))+(((-1.0)*r02*x13613))+((r01*x13616)));
evalcond[3]=((1.0)+(((-1.0)*x13609*x13614))+((r11*x13616))+(((-1.0)*r12*x13613)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x13608))+((x13607*x13611))+(((-1.0)*x13610*x13613)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13612*x13613))+((r01*x13615))+((r02*x13608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13617=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13617.valid){
continue;
}
CheckValue<IkReal> x13618 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13617.value)))+(x13618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13619=IKcos(j4);
IkReal x13620=IKsin(j4);
IkReal x13621=(gconst29*r10);
IkReal x13622=(gconst29*r20);
IkReal x13623=(gconst28*r21);
IkReal x13624=(gconst29*r00);
IkReal x13625=((1.0)*x13619);
IkReal x13626=((1.0)*x13620);
IkReal x13627=(gconst28*x13619);
IkReal x13628=(gconst28*x13620);
evalcond[0]=((((-1.0)*x13621*x13625))+((r12*x13620))+((r11*x13627)));
evalcond[1]=((((-1.0)*x13622*x13626))+((x13620*x13623))+(((-1.0)*r22*x13625)));
evalcond[2]=((((-1.0)*x13624*x13626))+((r01*x13628))+(((-1.0)*r02*x13625)));
evalcond[3]=((1.0)+(((-1.0)*x13621*x13626))+((r11*x13628))+(((-1.0)*r12*x13625)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13622*x13625))+((cj1*sj2))+((x13619*x13623))+((r22*x13620)));
evalcond[5]=((((-1.0)*x13624*x13625))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13620))+((r01*x13627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13631 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13631.valid){
continue;
}
IkReal x13629=((1.0)*(x13631.value));
IkReal x13630=x13462;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13629)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13629)));
IkReal gconst28=((1.0)*r21*x13630);
IkReal gconst29=((-1.0)*r20*x13630);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13634 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13634.valid){
continue;
}
IkReal x13632=((1.0)*(x13634.value));
IkReal x13633=x13462;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13632)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13632)));
IkReal gconst28=((1.0)*r21*x13633);
IkReal gconst29=((-1.0)*r20*x13633);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13637 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13637.valid){
continue;
}
IkReal x13635=((1.0)*(x13637.value));
IkReal x13636=x13462;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13635)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13635)));
IkReal gconst28=((1.0)*r21*x13636);
IkReal gconst29=((-1.0)*r20*x13636);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13638=(gconst29*r10);
IkReal x13639=(gconst28*r11);
CheckValue<IkReal> x13640=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13638*x13639))+(x13639*x13639)+(x13638*x13638))),-1);
if(!x13640.valid){
continue;
}
CheckValue<IkReal> x13641 = IKatan2WithCheck(IkReal(((((-1.0)*x13639))+x13638)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13640.value)))+(x13641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13642=IKsin(j4);
IkReal x13643=IKcos(j4);
IkReal x13644=(gconst28*r11);
IkReal x13645=((1.0)*x13643);
IkReal x13646=(gconst29*x13643);
IkReal x13647=(gconst28*x13642);
IkReal x13648=((1.0)*x13642);
IkReal x13649=(gconst29*x13648);
evalcond[0]=((((-1.0)*r20*x13649))+(((-1.0)*r22*x13645))+((r21*x13647)));
evalcond[1]=((((-1.0)*r00*x13649))+((r01*x13647))+(((-1.0)*r02*x13645)));
evalcond[2]=((((-1.0)*r12*x13648))+(((-1.0)*x13644*x13645))+((r10*x13646)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13649))+(((-1.0)*r12*x13645))+((x13642*x13644)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13645))+((cj1*sj2))+((r20*x13646))+(((-1.0)*r22*x13648)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13646))+(((-1.0)*gconst28*r01*x13645))+(((-1.0)*r02*x13648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13650=((1.0)*gconst29);
CheckValue<IkReal> x13651 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13650))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13651.valid){
continue;
}
CheckValue<IkReal> x13652=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13650))+(((-1.0)*gconst28*r00)))),-1);
if(!x13652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13651.value)+(((1.5707963267949)*(x13652.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13653=IKsin(j4);
IkReal x13654=IKcos(j4);
IkReal x13655=(gconst28*r11);
IkReal x13656=((1.0)*x13654);
IkReal x13657=(gconst29*x13654);
IkReal x13658=(gconst28*x13653);
IkReal x13659=((1.0)*x13653);
IkReal x13660=(gconst29*x13659);
evalcond[0]=((((-1.0)*r22*x13656))+(((-1.0)*r20*x13660))+((r21*x13658)));
evalcond[1]=(((r01*x13658))+(((-1.0)*r02*x13656))+(((-1.0)*r00*x13660)));
evalcond[2]=(((r10*x13657))+(((-1.0)*x13655*x13656))+(((-1.0)*r12*x13659)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13656))+((x13653*x13655))+(((-1.0)*r10*x13660)));
evalcond[4]=(((r20*x13657))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13659))+(((-1.0)*gconst28*r21*x13656)));
evalcond[5]=(((r00*x13657))+(((-1.0)*gconst28*r01*x13656))+(((-1.0)*r02*x13659))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13661=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13661.valid){
continue;
}
CheckValue<IkReal> x13662 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13661.value)))+(x13662.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13663=IKsin(j4);
IkReal x13664=IKcos(j4);
IkReal x13665=(gconst28*r11);
IkReal x13666=((1.0)*x13664);
IkReal x13667=(gconst29*x13664);
IkReal x13668=(gconst28*x13663);
IkReal x13669=((1.0)*x13663);
IkReal x13670=(gconst29*x13669);
evalcond[0]=((((-1.0)*r22*x13666))+(((-1.0)*r20*x13670))+((r21*x13668)));
evalcond[1]=(((r01*x13668))+(((-1.0)*r00*x13670))+(((-1.0)*r02*x13666)));
evalcond[2]=((((-1.0)*r12*x13669))+((r10*x13667))+(((-1.0)*x13665*x13666)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13666))+((x13663*x13665))+(((-1.0)*r10*x13670)));
evalcond[4]=((((-1.0)*r22*x13669))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13666))+((r20*x13667)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13667))+(((-1.0)*r02*x13669))+(((-1.0)*gconst28*r01*x13666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13671=gconst28*gconst28;
IkReal x13672=gconst29*gconst29;
IkReal x13673=(r11*r21);
IkReal x13674=(gconst29*sj3);
IkReal x13675=((1.0)*cj3);
IkReal x13676=(r10*r20);
IkReal x13677=(r10*r21);
IkReal x13678=(r11*r20);
IkReal x13679=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13680 = IKatan2WithCheck(IkReal((((r11*r22*x13674))+((gconst28*r10*r22*sj3)))),IkReal(((((-1.0)*sj3*x13672*x13678))+(((-1.0)*gconst28*x13674*x13676))+((sj3*x13671*x13677))+((gconst28*x13673*x13674)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13680.valid){
continue;
}
CheckValue<IkReal> x13681=IKPowWithIntegerCheck(IKsign((((x13678*x13679))+(((-1.0)*x13672*x13675*x13676))+(((-1.0)*x13671*x13673*x13675))+((x13677*x13679))+(((-1.0)*r12*r22*x13675)))),-1);
if(!x13681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13680.value)+(((1.5707963267949)*(x13681.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13682=IKsin(j4);
IkReal x13683=IKcos(j4);
IkReal x13684=(sj1*sj2);
IkReal x13685=(gconst29*r20);
IkReal x13686=(gconst28*r20);
IkReal x13687=((1.0)*cj2);
IkReal x13688=(r11*sj3);
IkReal x13689=(cj1*sj2);
IkReal x13690=(gconst29*r01);
IkReal x13691=(gconst29*r10);
IkReal x13692=(cj3*gconst28);
IkReal x13693=(cj3*gconst29);
IkReal x13694=(gconst28*sj3);
IkReal x13695=(gconst29*r00);
IkReal x13696=(cj1*x13687);
IkReal x13697=((1.0)*x13683);
IkReal x13698=((1.0)*x13682);
IkReal x13699=(gconst28*x13682);
IkReal x13700=(cj3*x13682);
IkReal x13701=(sj3*x13683);
evalcond[0]=(((r21*x13699))+(((-1.0)*r22*x13697))+(((-1.0)*x13685*x13698)));
evalcond[1]=(((r01*x13699))+(((-1.0)*r02*x13697))+(((-1.0)*x13695*x13698)));
evalcond[2]=((1.0)+(((-1.0)*x13691*x13698))+((r11*x13699))+(((-1.0)*r12*x13697)));
evalcond[3]=(((r12*x13700))+((gconst29*x13688))+((r10*x13694))+(((-1.0)*cj3*x13691*x13697))+((r11*x13683*x13692)));
evalcond[4]=(((r10*x13692))+((x13691*x13701))+(((-1.0)*gconst28*x13688*x13697))+(((-1.0)*r12*sj3*x13698))+((r11*x13693)));
evalcond[5]=(((cj2*sj1))+x13689+((gconst29*r21*sj3))+((r21*x13683*x13692))+((r22*x13700))+((sj3*x13686))+(((-1.0)*cj3*x13685*x13697)));
evalcond[6]=((((-1.0)*r00*x13693*x13697))+((r00*x13694))+((sj3*x13690))+x13684+(((-1.0)*x13696))+((r01*x13683*x13692))+((r02*x13700)));
evalcond[7]=((((-1.0)*r22*sj3*x13698))+x13684+(((-1.0)*x13696))+((cj3*x13686))+((r21*x13693))+((x13685*x13701))+(((-1.0)*r21*x13694*x13697)));
evalcond[8]=(((r00*x13692))+(((-1.0)*sj1*x13687))+((x13695*x13701))+(((-1.0)*r01*x13694*x13697))+(((-1.0)*x13689))+((cj3*x13690))+(((-1.0)*r02*sj3*x13698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13702=((1.0)*gconst29);
CheckValue<IkReal> x13703 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13702))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13703.valid){
continue;
}
CheckValue<IkReal> x13704=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13702))+(((-1.0)*gconst28*r00)))),-1);
if(!x13704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13703.value)+(((1.5707963267949)*(x13704.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13705=IKsin(j4);
IkReal x13706=IKcos(j4);
IkReal x13707=(sj1*sj2);
IkReal x13708=(gconst29*r20);
IkReal x13709=(gconst28*r20);
IkReal x13710=((1.0)*cj2);
IkReal x13711=(r11*sj3);
IkReal x13712=(cj1*sj2);
IkReal x13713=(gconst29*r01);
IkReal x13714=(gconst29*r10);
IkReal x13715=(cj3*gconst28);
IkReal x13716=(cj3*gconst29);
IkReal x13717=(gconst28*sj3);
IkReal x13718=(gconst29*r00);
IkReal x13719=(cj1*x13710);
IkReal x13720=((1.0)*x13706);
IkReal x13721=((1.0)*x13705);
IkReal x13722=(gconst28*x13705);
IkReal x13723=(cj3*x13705);
IkReal x13724=(sj3*x13706);
evalcond[0]=((((-1.0)*r22*x13720))+((r21*x13722))+(((-1.0)*x13708*x13721)));
evalcond[1]=(((r01*x13722))+(((-1.0)*r02*x13720))+(((-1.0)*x13718*x13721)));
evalcond[2]=((1.0)+(((-1.0)*x13714*x13721))+((r11*x13722))+(((-1.0)*r12*x13720)));
evalcond[3]=(((r11*x13706*x13715))+((r12*x13723))+((gconst29*x13711))+(((-1.0)*cj3*x13714*x13720))+((r10*x13717)));
evalcond[4]=((((-1.0)*r12*sj3*x13721))+(((-1.0)*gconst28*x13711*x13720))+((r10*x13715))+((x13714*x13724))+((r11*x13716)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((sj3*x13709))+x13712+((r22*x13723))+((r21*x13706*x13715))+(((-1.0)*cj3*x13708*x13720)));
evalcond[6]=(((sj3*x13713))+((r01*x13706*x13715))+x13707+((r00*x13717))+(((-1.0)*r00*x13716*x13720))+((r02*x13723))+(((-1.0)*x13719)));
evalcond[7]=(((r21*x13716))+x13707+((cj3*x13709))+(((-1.0)*r22*sj3*x13721))+((x13708*x13724))+(((-1.0)*x13719))+(((-1.0)*r21*x13717*x13720)));
evalcond[8]=((((-1.0)*x13712))+(((-1.0)*sj1*x13710))+((cj3*x13713))+((r00*x13715))+(((-1.0)*r02*sj3*x13721))+((x13718*x13724))+(((-1.0)*r01*x13717*x13720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13725=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13725.valid){
continue;
}
CheckValue<IkReal> x13726 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13725.value)))+(x13726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13727=IKsin(j4);
IkReal x13728=IKcos(j4);
IkReal x13729=(sj1*sj2);
IkReal x13730=(gconst29*r20);
IkReal x13731=(gconst28*r20);
IkReal x13732=((1.0)*cj2);
IkReal x13733=(r11*sj3);
IkReal x13734=(cj1*sj2);
IkReal x13735=(gconst29*r01);
IkReal x13736=(gconst29*r10);
IkReal x13737=(cj3*gconst28);
IkReal x13738=(cj3*gconst29);
IkReal x13739=(gconst28*sj3);
IkReal x13740=(gconst29*r00);
IkReal x13741=(cj1*x13732);
IkReal x13742=((1.0)*x13728);
IkReal x13743=((1.0)*x13727);
IkReal x13744=(gconst28*x13727);
IkReal x13745=(cj3*x13727);
IkReal x13746=(sj3*x13728);
evalcond[0]=((((-1.0)*r22*x13742))+(((-1.0)*x13730*x13743))+((r21*x13744)));
evalcond[1]=((((-1.0)*r02*x13742))+((r01*x13744))+(((-1.0)*x13740*x13743)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13742))+(((-1.0)*x13736*x13743))+((r11*x13744)));
evalcond[3]=(((r10*x13739))+((r11*x13728*x13737))+((r12*x13745))+((gconst29*x13733))+(((-1.0)*cj3*x13736*x13742)));
evalcond[4]=(((r10*x13737))+((x13736*x13746))+(((-1.0)*gconst28*x13733*x13742))+((r11*x13738))+(((-1.0)*r12*sj3*x13743)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((r21*x13728*x13737))+x13734+(((-1.0)*cj3*x13730*x13742))+((r22*x13745))+((sj3*x13731)));
evalcond[6]=(((r00*x13739))+x13729+((r01*x13728*x13737))+(((-1.0)*r00*x13738*x13742))+((sj3*x13735))+(((-1.0)*x13741))+((r02*x13745)));
evalcond[7]=(x13729+((x13730*x13746))+((r21*x13738))+(((-1.0)*r21*x13739*x13742))+(((-1.0)*r22*sj3*x13743))+(((-1.0)*x13741))+((cj3*x13731)));
evalcond[8]=((((-1.0)*r01*x13739*x13742))+((r00*x13737))+(((-1.0)*sj1*x13732))+(((-1.0)*r02*sj3*x13743))+((x13740*x13746))+(((-1.0)*x13734))+((cj3*x13735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13747=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13747);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13747);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13748=(r11*sj5);
IkReal x13749=((1.0)*cj5*r10);
j4eval[0]=(x13748+(((-1.0)*x13749)));
j4eval[1]=((((-1.0)*cj3*x13749))+((cj3*x13748)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13750=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13750);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13750);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13751=(cj5*r10);
IkReal x13752=(r11*sj5);
j4eval[0]=(x13752+(((-1.0)*x13751)));
j4eval[1]=((((-1.0)*sj3*x13752))+((sj3*x13751)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13753=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13753);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13753);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13754=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13754);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13754);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13755=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13755)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13755)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13756=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13756);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13756);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13757=((1.0)*sj1);
CheckValue<IkReal> x13758=IKPowWithIntegerCheck(r22,-1);
if(!x13758.valid){
continue;
}
CheckValue<IkReal> x13759=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13759.valid){
continue;
}
if( IKabs(((x13758.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13757)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13759.value)*((((cj1*cj2))+(((-1.0)*sj2*x13757)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13758.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13757))))))+IKsqr(((x13759.value)*((((cj1*cj2))+(((-1.0)*sj2*x13757))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13758.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13757))))), ((x13759.value)*((((cj1*cj2))+(((-1.0)*sj2*x13757))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13760=IKsin(j4);
IkReal x13761=IKcos(j4);
IkReal x13762=((1.0)*cj5);
IkReal x13763=(sj5*x13761);
IkReal x13764=(sj5*x13760);
evalcond[0]=((-1.0)*r22*x13761);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13760)));
evalcond[2]=(((r01*x13764))+(((-1.0)*r00*x13760*x13762)));
evalcond[3]=(((r11*x13763))+(((-1.0)*r10*x13761*x13762)));
evalcond[4]=((1.0)+((r11*x13764))+(((-1.0)*r10*x13760*x13762)));
evalcond[5]=((((-1.0)*r00*x13761*x13762))+((r01*x13763))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13765=((1.0)*cj5);
CheckValue<IkReal> x13766=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13765))),-1);
if(!x13766.valid){
continue;
}
CheckValue<IkReal> x13767=IKPowWithIntegerCheck(((((-1.0)*r00*x13765))+((r01*sj5))),-1);
if(!x13767.valid){
continue;
}
if( IKabs(((-1.0)*(x13766.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13767.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13766.value)))+IKsqr(((x13767.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13766.value)), ((x13767.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13768=IKsin(j4);
IkReal x13769=IKcos(j4);
IkReal x13770=((1.0)*cj5);
IkReal x13771=(sj5*x13769);
IkReal x13772=(sj5*x13768);
evalcond[0]=((-1.0)*r22*x13769);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13768)));
evalcond[2]=((((-1.0)*r00*x13768*x13770))+((r01*x13772)));
evalcond[3]=(((r11*x13771))+(((-1.0)*r10*x13769*x13770)));
evalcond[4]=((1.0)+((r11*x13772))+(((-1.0)*r10*x13768*x13770)));
evalcond[5]=((((-1.0)*r00*x13769*x13770))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13773=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13773);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13773);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13774=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13774);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13774);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13775=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13775.valid){
continue;
}
CheckValue<IkReal> x13776=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13776.valid){
continue;
}
if( IKabs(((-1.0)*(x13775.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13776.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13775.value)))+IKsqr(((x13776.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13775.value)), ((x13776.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13777=IKsin(j4);
IkReal x13778=IKcos(j4);
IkReal x13779=(cj5*x13778);
IkReal x13780=(sj5*x13777);
IkReal x13781=((1.0)*cj5*x13777);
IkReal x13782=((1.0)*sj5*x13778);
evalcond[0]=((-1.0)*r22*x13778);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x13777))+((cj1*sj2)));
evalcond[2]=(((r01*x13780))+(((-1.0)*r00*x13781)));
evalcond[3]=(((r10*x13779))+(((-1.0)*r11*x13782)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13781))+((r11*x13780)));
evalcond[5]=(((r00*x13779))+(((-1.0)*r01*x13782))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13783=IKPowWithIntegerCheck(r22,-1);
if(!x13783.valid){
continue;
}
CheckValue<IkReal> x13784=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13784.valid){
continue;
}
if( IKabs(((x13783.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13784.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13783.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13784.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13783.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13784.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13785=IKsin(j4);
IkReal x13786=IKcos(j4);
IkReal x13787=(cj5*x13786);
IkReal x13788=(sj5*x13785);
IkReal x13789=((1.0)*cj5*x13785);
IkReal x13790=((1.0)*sj5*x13786);
evalcond[0]=((-1.0)*r22*x13786);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x13785))+((cj1*sj2)));
evalcond[2]=(((r01*x13788))+(((-1.0)*r00*x13789)));
evalcond[3]=(((r10*x13787))+(((-1.0)*r11*x13790)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13789))+((r11*x13788)));
evalcond[5]=(((r00*x13787))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13791=((1.0)*r10);
CheckValue<IkReal> x13792=IKPowWithIntegerCheck(cj3,-1);
if(!x13792.valid){
continue;
}
CheckValue<IkReal> x13793=IKPowWithIntegerCheck(r22,-1);
if(!x13793.valid){
continue;
}
CheckValue<IkReal> x13794=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13791))+((cj3*r11*sj5))),-1);
if(!x13794.valid){
continue;
}
if( IKabs(((x13792.value)*(x13793.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13794.value)*(((((-1.0)*sj3*sj5*x13791))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13792.value)*(x13793.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13794.value)*(((((-1.0)*sj3*sj5*x13791))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13792.value)*(x13793.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13794.value)*(((((-1.0)*sj3*sj5*x13791))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13795=IKsin(j4);
IkReal x13796=IKcos(j4);
IkReal x13797=(sj1*sj2);
IkReal x13798=(r11*sj5);
IkReal x13799=(r00*sj3);
IkReal x13800=(cj5*r01);
IkReal x13801=((1.0)*cj1);
IkReal x13802=(cj3*sj5);
IkReal x13803=(cj5*r11);
IkReal x13804=(r10*sj3);
IkReal x13805=(cj2*sj1);
IkReal x13806=((1.0)*cj5);
IkReal x13807=((1.0)*sj3);
IkReal x13808=(r01*sj5);
IkReal x13809=(cj2*x13801);
IkReal x13810=(cj3*x13796);
IkReal x13811=(r22*x13795);
IkReal x13812=(cj5*x13796);
IkReal x13813=(x13795*x13806);
evalcond[0]=((-1.0)*r22*x13796);
evalcond[1]=(x13805+((cj1*sj2))+((cj3*x13811)));
evalcond[2]=(((x13795*x13808))+(((-1.0)*r00*x13813)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13813))+((x13795*x13798)));
evalcond[4]=((((-1.0)*x13809))+x13797+(((-1.0)*x13807*x13811)));
evalcond[5]=(((x13798*x13810))+((sj5*x13804))+(((-1.0)*r10*x13806*x13810))+((sj3*x13803)));
evalcond[6]=(((x13804*x13812))+(((-1.0)*x13796*x13798*x13807))+((cj3*x13803))+((r10*x13802)));
evalcond[7]=((((-1.0)*x13809))+x13797+((sj3*x13800))+((sj5*x13799))+((r01*x13796*x13802))+(((-1.0)*r00*x13806*x13810)));
evalcond[8]=((((-1.0)*x13796*x13807*x13808))+((x13799*x13812))+((r00*x13802))+(((-1.0)*x13805))+(((-1.0)*sj2*x13801))+((cj3*x13800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13814=(cj5*r10);
IkReal x13815=((1.0)*r11);
CheckValue<IkReal> x13816=IKPowWithIntegerCheck(((((-1.0)*x13814))+((r11*sj5))),-1);
if(!x13816.valid){
continue;
}
CheckValue<IkReal> x13817=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13815))+((sj3*x13814))),-1);
if(!x13817.valid){
continue;
}
if( IKabs(((-1.0)*(x13816.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13817.value)*(((((-1.0)*cj3*cj5*x13815))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13816.value)))+IKsqr(((x13817.value)*(((((-1.0)*cj3*cj5*x13815))+(((-1.0)*cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13816.value)), ((x13817.value)*(((((-1.0)*cj3*cj5*x13815))+(((-1.0)*cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13818=IKsin(j4);
IkReal x13819=IKcos(j4);
IkReal x13820=(sj1*sj2);
IkReal x13821=(r11*sj5);
IkReal x13822=(r00*sj3);
IkReal x13823=(cj5*r01);
IkReal x13824=((1.0)*cj1);
IkReal x13825=(cj3*sj5);
IkReal x13826=(cj5*r11);
IkReal x13827=(r10*sj3);
IkReal x13828=(cj2*sj1);
IkReal x13829=((1.0)*cj5);
IkReal x13830=((1.0)*sj3);
IkReal x13831=(r01*sj5);
IkReal x13832=(cj2*x13824);
IkReal x13833=(cj3*x13819);
IkReal x13834=(r22*x13818);
IkReal x13835=(cj5*x13819);
IkReal x13836=(x13818*x13829);
evalcond[0]=((-1.0)*r22*x13819);
evalcond[1]=(x13828+((cj1*sj2))+((cj3*x13834)));
evalcond[2]=(((x13818*x13831))+(((-1.0)*r00*x13836)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13836))+((x13818*x13821)));
evalcond[4]=((((-1.0)*x13832))+(((-1.0)*x13830*x13834))+x13820);
evalcond[5]=(((x13821*x13833))+((sj3*x13826))+(((-1.0)*r10*x13829*x13833))+((sj5*x13827)));
evalcond[6]=(((r10*x13825))+((cj3*x13826))+((x13827*x13835))+(((-1.0)*x13819*x13821*x13830)));
evalcond[7]=((((-1.0)*r00*x13829*x13833))+(((-1.0)*x13832))+x13820+((r01*x13819*x13825))+((sj3*x13823))+((sj5*x13822)));
evalcond[8]=(((x13822*x13835))+(((-1.0)*x13819*x13830*x13831))+((r00*x13825))+(((-1.0)*sj2*x13824))+(((-1.0)*x13828))+((cj3*x13823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13837=((1.0)*sj3);
IkReal x13838=(r11*sj5);
IkReal x13839=((1.0)*cj5*r10);
CheckValue<IkReal> x13840=IKPowWithIntegerCheck(((((-1.0)*x13839))+x13838),-1);
if(!x13840.valid){
continue;
}
CheckValue<IkReal> x13841=IKPowWithIntegerCheck(((((-1.0)*cj3*x13839))+((cj3*x13838))),-1);
if(!x13841.valid){
continue;
}
if( IKabs(((-1.0)*(x13840.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13841.value)*(((((-1.0)*r10*sj5*x13837))+(((-1.0)*cj5*r11*x13837)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13840.value)))+IKsqr(((x13841.value)*(((((-1.0)*r10*sj5*x13837))+(((-1.0)*cj5*r11*x13837))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13840.value)), ((x13841.value)*(((((-1.0)*r10*sj5*x13837))+(((-1.0)*cj5*r11*x13837))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13842=IKsin(j4);
IkReal x13843=IKcos(j4);
IkReal x13844=(sj1*sj2);
IkReal x13845=(r11*sj5);
IkReal x13846=(r00*sj3);
IkReal x13847=(cj5*r01);
IkReal x13848=((1.0)*cj1);
IkReal x13849=(cj3*sj5);
IkReal x13850=(cj5*r11);
IkReal x13851=(r10*sj3);
IkReal x13852=(cj2*sj1);
IkReal x13853=((1.0)*cj5);
IkReal x13854=((1.0)*sj3);
IkReal x13855=(r01*sj5);
IkReal x13856=(cj2*x13848);
IkReal x13857=(cj3*x13843);
IkReal x13858=(r22*x13842);
IkReal x13859=(cj5*x13843);
IkReal x13860=(x13842*x13853);
evalcond[0]=((-1.0)*r22*x13843);
evalcond[1]=(x13852+((cj1*sj2))+((cj3*x13858)));
evalcond[2]=((((-1.0)*r00*x13860))+((x13842*x13855)));
evalcond[3]=((1.0)+((x13842*x13845))+(((-1.0)*r10*x13860)));
evalcond[4]=(x13844+(((-1.0)*x13856))+(((-1.0)*x13854*x13858)));
evalcond[5]=(((sj3*x13850))+(((-1.0)*r10*x13853*x13857))+((sj5*x13851))+((x13845*x13857)));
evalcond[6]=(((x13851*x13859))+(((-1.0)*x13843*x13845*x13854))+((r10*x13849))+((cj3*x13850)));
evalcond[7]=(x13844+((sj5*x13846))+((sj3*x13847))+(((-1.0)*r00*x13853*x13857))+(((-1.0)*x13856))+((r01*x13843*x13849)));
evalcond[8]=((((-1.0)*x13852))+(((-1.0)*sj2*x13848))+(((-1.0)*x13843*x13854*x13855))+((x13846*x13859))+((cj3*x13847))+((r00*x13849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13861=cj5*cj5;
IkReal x13862=((1.0)*cj3);
IkReal x13863=(r10*r21);
IkReal x13864=(cj5*sj5);
IkReal x13865=(r11*r21);
IkReal x13866=(r11*r20);
IkReal x13867=(r22*sj3);
IkReal x13868=(r10*r20);
IkReal x13869=((1.0)*sj3*x13861);
CheckValue<IkReal> x13870=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13862*x13865))+(((-1.0)*r12*r22*x13862))+((cj3*x13864*x13866))+(((-1.0)*x13861*x13862*x13868))+((cj3*x13861*x13865))+((cj3*x13863*x13864)))),-1);
if(!x13870.valid){
continue;
}
CheckValue<IkReal> x13871 = IKatan2WithCheck(IkReal((((cj5*r11*x13867))+((r10*sj5*x13867)))),IkReal(((((-1.0)*sj3*x13864*x13868))+(((-1.0)*x13863*x13869))+((sj3*x13863))+(((-1.0)*x13866*x13869))+((sj3*x13864*x13865)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13870.value)))+(x13871.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13872=IKsin(j4);
IkReal x13873=IKcos(j4);
IkReal x13874=(sj1*sj2);
IkReal x13875=(cj5*sj3);
IkReal x13876=(cj5*r10);
IkReal x13877=(r00*sj5);
IkReal x13878=(r11*sj5);
IkReal x13879=(cj3*cj5);
IkReal x13880=((1.0)*cj1);
IkReal x13881=(cj3*sj5);
IkReal x13882=(r21*sj5);
IkReal x13883=(cj2*sj1);
IkReal x13884=(sj3*sj5);
IkReal x13885=(r01*sj5);
IkReal x13886=(cj2*x13880);
IkReal x13887=((1.0)*x13873);
IkReal x13888=((1.0)*x13872);
IkReal x13889=(cj3*x13872);
IkReal x13890=(cj3*x13873);
evalcond[0]=(((x13872*x13882))+(((-1.0)*cj5*r20*x13888))+(((-1.0)*r22*x13887)));
evalcond[1]=((((-1.0)*r02*x13887))+((x13872*x13885))+(((-1.0)*cj5*r00*x13888)));
evalcond[2]=((1.0)+((x13872*x13878))+(((-1.0)*x13876*x13888))+(((-1.0)*r12*x13887)));
evalcond[3]=((((-1.0)*cj3*x13876*x13887))+((x13878*x13890))+((r10*x13884))+((r11*x13875))+((r12*x13889)));
evalcond[4]=((((-1.0)*sj3*x13878*x13887))+((r10*x13873*x13875))+((r10*x13881))+((r11*x13879))+(((-1.0)*r12*sj3*x13888)));
evalcond[5]=(x13883+((cj1*sj2))+(((-1.0)*r20*x13879*x13887))+((r21*x13875))+((r20*x13884))+((r21*x13873*x13881))+((r22*x13889)));
evalcond[6]=(((sj3*x13877))+x13874+((r02*x13889))+((r01*x13875))+((r01*x13873*x13881))+(((-1.0)*x13886))+(((-1.0)*r00*x13879*x13887)));
evalcond[7]=((((-1.0)*r22*sj3*x13888))+x13874+((r21*x13879))+(((-1.0)*sj3*x13882*x13887))+((r20*x13881))+((r20*x13873*x13875))+(((-1.0)*x13886)));
evalcond[8]=((((-1.0)*sj2*x13880))+(((-1.0)*r01*x13884*x13887))+((cj3*x13877))+((r01*x13879))+(((-1.0)*x13883))+((r00*x13873*x13875))+(((-1.0)*r02*sj3*x13888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13891=((1.0)*cj5);
CheckValue<IkReal> x13892=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13891))+(((-1.0)*r00*sj5)))),-1);
if(!x13892.valid){
continue;
}
CheckValue<IkReal> x13893 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13891)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13892.value)))+(x13893.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13894=IKsin(j4);
IkReal x13895=IKcos(j4);
IkReal x13896=(sj1*sj2);
IkReal x13897=(cj5*sj3);
IkReal x13898=(cj5*r10);
IkReal x13899=(r00*sj5);
IkReal x13900=(r11*sj5);
IkReal x13901=(cj3*cj5);
IkReal x13902=((1.0)*cj1);
IkReal x13903=(cj3*sj5);
IkReal x13904=(r21*sj5);
IkReal x13905=(cj2*sj1);
IkReal x13906=(sj3*sj5);
IkReal x13907=(r01*sj5);
IkReal x13908=(cj2*x13902);
IkReal x13909=((1.0)*x13895);
IkReal x13910=((1.0)*x13894);
IkReal x13911=(cj3*x13894);
IkReal x13912=(cj3*x13895);
evalcond[0]=(((x13894*x13904))+(((-1.0)*r22*x13909))+(((-1.0)*cj5*r20*x13910)));
evalcond[1]=(((x13894*x13907))+(((-1.0)*cj5*r00*x13910))+(((-1.0)*r02*x13909)));
evalcond[2]=((1.0)+((x13894*x13900))+(((-1.0)*x13898*x13910))+(((-1.0)*r12*x13909)));
evalcond[3]=(((r10*x13906))+(((-1.0)*cj3*x13898*x13909))+((x13900*x13912))+((r12*x13911))+((r11*x13897)));
evalcond[4]=(((r10*x13903))+(((-1.0)*r12*sj3*x13910))+((r10*x13895*x13897))+((r11*x13901))+(((-1.0)*sj3*x13900*x13909)));
evalcond[5]=(((r22*x13911))+((r21*x13895*x13903))+((cj1*sj2))+x13905+(((-1.0)*r20*x13901*x13909))+((r20*x13906))+((r21*x13897)));
evalcond[6]=(x13896+((sj3*x13899))+((r02*x13911))+((r01*x13895*x13903))+((r01*x13897))+(((-1.0)*x13908))+(((-1.0)*r00*x13901*x13909)));
evalcond[7]=((((-1.0)*r22*sj3*x13910))+x13896+((r20*x13903))+((r21*x13901))+(((-1.0)*x13908))+(((-1.0)*sj3*x13904*x13909))+((r20*x13895*x13897)));
evalcond[8]=((((-1.0)*r01*x13906*x13909))+(((-1.0)*r02*sj3*x13910))+((cj3*x13899))+(((-1.0)*x13905))+(((-1.0)*sj2*x13902))+((r01*x13901))+((r00*x13895*x13897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13913=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13913.valid){
continue;
}
CheckValue<IkReal> x13914 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13913.value)))+(x13914.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13915=IKsin(j4);
IkReal x13916=IKcos(j4);
IkReal x13917=(sj1*sj2);
IkReal x13918=(cj5*sj3);
IkReal x13919=(cj5*r10);
IkReal x13920=(r00*sj5);
IkReal x13921=(r11*sj5);
IkReal x13922=(cj3*cj5);
IkReal x13923=((1.0)*cj1);
IkReal x13924=(cj3*sj5);
IkReal x13925=(r21*sj5);
IkReal x13926=(cj2*sj1);
IkReal x13927=(sj3*sj5);
IkReal x13928=(r01*sj5);
IkReal x13929=(cj2*x13923);
IkReal x13930=((1.0)*x13916);
IkReal x13931=((1.0)*x13915);
IkReal x13932=(cj3*x13915);
IkReal x13933=(cj3*x13916);
evalcond[0]=(((x13915*x13925))+(((-1.0)*cj5*r20*x13931))+(((-1.0)*r22*x13930)));
evalcond[1]=((((-1.0)*cj5*r00*x13931))+((x13915*x13928))+(((-1.0)*r02*x13930)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13930))+(((-1.0)*x13919*x13931))+((x13915*x13921)));
evalcond[3]=(((r10*x13927))+((r11*x13918))+((x13921*x13933))+(((-1.0)*cj3*x13919*x13930))+((r12*x13932)));
evalcond[4]=((((-1.0)*r12*sj3*x13931))+((r10*x13924))+(((-1.0)*sj3*x13921*x13930))+((r10*x13916*x13918))+((r11*x13922)));
evalcond[5]=(((r20*x13927))+((cj1*sj2))+x13926+((r22*x13932))+((r21*x13916*x13924))+((r21*x13918))+(((-1.0)*r20*x13922*x13930)));
evalcond[6]=(((sj3*x13920))+(((-1.0)*r00*x13922*x13930))+x13917+(((-1.0)*x13929))+((r01*x13916*x13924))+((r01*x13918))+((r02*x13932)));
evalcond[7]=(((r21*x13922))+((r20*x13924))+((r20*x13916*x13918))+(((-1.0)*r22*sj3*x13931))+x13917+(((-1.0)*x13929))+(((-1.0)*sj3*x13925*x13930)));
evalcond[8]=((((-1.0)*sj2*x13923))+(((-1.0)*r02*sj3*x13931))+(((-1.0)*r01*x13927*x13930))+(((-1.0)*x13926))+((r01*x13922))+((r00*x13916*x13918))+((cj3*x13920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13934=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13934;
j4eval[1]=IKsign(x13934);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13935=((1.0)*cj5);
IkReal x13936=((((-1.0)*r21*x13935))+(((-1.0)*r20*sj5)));
j4eval[0]=x13936;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13935))))));
j4eval[2]=IKsign(x13936);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13937=cj5*cj5;
IkReal x13938=(cj3*r21);
IkReal x13939=(cj5*sj5);
IkReal x13940=((1.0)*cj3);
IkReal x13941=(((r11*x13937*x13938))+((r10*x13938*x13939))+(((-1.0)*r10*r20*x13937*x13940))+(((-1.0)*r11*x13938))+((cj3*r11*r20*x13939))+(((-1.0)*r12*r22*x13940)));
j4eval[0]=x13941;
j4eval[1]=IKsign(x13941);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13942=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13942;
j4eval[1]=IKsign(x13942);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13943=((1.0)*cj5);
IkReal x13944=((((-1.0)*r21*x13943))+(((-1.0)*r20*sj5)));
j4eval[0]=x13944;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13943))))));
j4eval[2]=IKsign(x13944);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13945=cj5*cj5;
IkReal x13946=r11*r11;
IkReal x13947=(cj5*r10);
IkReal x13948=(r11*sj5);
IkReal x13949=((((-1.0)*x13946))+(((2.0)*x13947*x13948))+(((-1.0)*x13945*(r10*r10)))+(((-1.0)*(r12*r12)))+((x13945*x13946)));
j4eval[0]=x13949;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x13948))+x13947))));
j4eval[2]=IKsign(x13949);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13950=cj5*cj5;
IkReal x13951=r11*r11;
IkReal x13952=(cj5*r10);
IkReal x13953=(r11*sj5);
CheckValue<IkReal> x13954 = IKatan2WithCheck(IkReal((x13952+(((-1.0)*x13953)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13954.valid){
continue;
}
CheckValue<IkReal> x13955=IKPowWithIntegerCheck(IKsign(((((2.0)*x13952*x13953))+(((-1.0)*x13950*(r10*r10)))+((x13950*x13951))+(((-1.0)*(r12*r12)))+(((-1.0)*x13951)))),-1);
if(!x13955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13954.value)+(((1.5707963267949)*(x13955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13956=IKsin(j4);
IkReal x13957=IKcos(j4);
IkReal x13958=(cj5*r10);
IkReal x13959=(r01*sj5);
IkReal x13960=(cj5*r00);
IkReal x13961=(cj5*r20);
IkReal x13962=((1.0)*x13957);
IkReal x13963=((1.0)*x13956);
IkReal x13964=(sj5*x13956);
evalcond[0]=((((-1.0)*r22*x13962))+((r21*x13964))+(((-1.0)*x13961*x13963)));
evalcond[1]=((((-1.0)*r02*x13962))+((x13956*x13959))+(((-1.0)*x13960*x13963)));
evalcond[2]=((((-1.0)*r12*x13963))+(((-1.0)*r11*sj5*x13962))+((x13957*x13958)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13962))+((r11*x13964))+(((-1.0)*x13958*x13963)));
evalcond[4]=((((-1.0)*r02*x13963))+((cj2*sj1))+((x13957*x13960))+((cj1*sj2))+(((-1.0)*x13959*x13962)));
evalcond[5]=((((-1.0)*r22*x13963))+((x13957*x13961))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x13962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13965=((1.0)*cj5);
CheckValue<IkReal> x13966 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13965)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13966.valid){
continue;
}
CheckValue<IkReal> x13967=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13965))+(((-1.0)*r20*sj5)))),-1);
if(!x13967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13966.value)+(((1.5707963267949)*(x13967.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13968=IKsin(j4);
IkReal x13969=IKcos(j4);
IkReal x13970=(cj5*r10);
IkReal x13971=(r01*sj5);
IkReal x13972=(cj5*r00);
IkReal x13973=(cj5*r20);
IkReal x13974=((1.0)*x13969);
IkReal x13975=((1.0)*x13968);
IkReal x13976=(sj5*x13968);
evalcond[0]=((((-1.0)*x13973*x13975))+(((-1.0)*r22*x13974))+((r21*x13976)));
evalcond[1]=((((-1.0)*x13972*x13975))+(((-1.0)*r02*x13974))+((x13968*x13971)));
evalcond[2]=((((-1.0)*r12*x13975))+((x13969*x13970))+(((-1.0)*r11*sj5*x13974)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13974))+((r11*x13976))+(((-1.0)*x13970*x13975)));
evalcond[4]=((((-1.0)*x13971*x13974))+((cj2*sj1))+(((-1.0)*r02*x13975))+((cj1*sj2))+((x13969*x13972)));
evalcond[5]=((((-1.0)*r22*x13975))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13969*x13973))+(((-1.0)*r21*sj5*x13974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13977 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13977.valid){
continue;
}
CheckValue<IkReal> x13978=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13977.value)+(((1.5707963267949)*(x13978.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13979=IKsin(j4);
IkReal x13980=IKcos(j4);
IkReal x13981=(cj5*r10);
IkReal x13982=(r01*sj5);
IkReal x13983=(cj5*r00);
IkReal x13984=(cj5*r20);
IkReal x13985=((1.0)*x13980);
IkReal x13986=((1.0)*x13979);
IkReal x13987=(sj5*x13979);
evalcond[0]=((((-1.0)*x13984*x13986))+((r21*x13987))+(((-1.0)*r22*x13985)));
evalcond[1]=((((-1.0)*r02*x13985))+(((-1.0)*x13983*x13986))+((x13979*x13982)));
evalcond[2]=(((x13980*x13981))+(((-1.0)*r11*sj5*x13985))+(((-1.0)*r12*x13986)));
evalcond[3]=((-1.0)+((r11*x13987))+(((-1.0)*r12*x13985))+(((-1.0)*x13981*x13986)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13982*x13985))+((x13980*x13983))+(((-1.0)*r02*x13986)));
evalcond[5]=((((-1.0)*r21*sj5*x13985))+((x13980*x13984))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13988=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13988;
j4eval[1]=IKsign(x13988);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13989=((1.0)*cj5);
IkReal x13990=((((-1.0)*r21*x13989))+(((-1.0)*r20*sj5)));
j4eval[0]=x13990;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13989))))));
j4eval[2]=IKsign(x13990);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13991=cj5*cj5;
IkReal x13992=r11*r11;
IkReal x13993=(r11*sj5);
IkReal x13994=(cj5*r10);
IkReal x13995=((r12*r12)+(((-1.0)*x13991*x13992))+x13992+((x13991*(r10*r10)))+(((-2.0)*x13993*x13994)));
j4eval[0]=x13995;
j4eval[1]=IKsign(x13995);
j4eval[2]=((IKabs(r12))+(IKabs((x13993+(((-1.0)*x13994))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13996=cj5*cj5;
IkReal x13997=r11*r11;
IkReal x13998=(cj5*r10);
IkReal x13999=(r11*sj5);
CheckValue<IkReal> x14000=IKPowWithIntegerCheck(IKsign(((r12*r12)+x13997+(((-1.0)*x13996*x13997))+(((-2.0)*x13998*x13999))+((x13996*(r10*r10))))),-1);
if(!x14000.valid){
continue;
}
CheckValue<IkReal> x14001 = IKatan2WithCheck(IkReal((x13999+(((-1.0)*x13998)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14000.value)))+(x14001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14002=IKcos(j4);
IkReal x14003=IKsin(j4);
IkReal x14004=(cj5*r00);
IkReal x14005=(cj5*r10);
IkReal x14006=(r21*sj5);
IkReal x14007=(cj5*r20);
IkReal x14008=((1.0)*x14002);
IkReal x14009=((1.0)*x14003);
IkReal x14010=(sj5*x14003);
IkReal x14011=(sj5*x14002);
evalcond[0]=((((-1.0)*x14005*x14008))+((r11*x14011))+((r12*x14003)));
evalcond[1]=(((x14003*x14006))+(((-1.0)*x14007*x14009))+(((-1.0)*r22*x14008)));
evalcond[2]=((((-1.0)*r02*x14008))+(((-1.0)*x14004*x14009))+((r01*x14010)));
evalcond[3]=((-1.0)+(((-1.0)*x14005*x14009))+((r11*x14010))+(((-1.0)*r12*x14008)));
evalcond[4]=(((cj2*sj1))+((r02*x14003))+((cj1*sj2))+(((-1.0)*x14004*x14008))+((r01*x14011)));
evalcond[5]=(((x14002*x14006))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14007*x14008))+((r22*x14003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14012=((1.0)*cj5);
CheckValue<IkReal> x14013=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14012))+(((-1.0)*r20*sj5)))),-1);
if(!x14013.valid){
continue;
}
CheckValue<IkReal> x14014 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14013.value)))+(x14014.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14015=IKcos(j4);
IkReal x14016=IKsin(j4);
IkReal x14017=(cj5*r00);
IkReal x14018=(cj5*r10);
IkReal x14019=(r21*sj5);
IkReal x14020=(cj5*r20);
IkReal x14021=((1.0)*x14015);
IkReal x14022=((1.0)*x14016);
IkReal x14023=(sj5*x14016);
IkReal x14024=(sj5*x14015);
evalcond[0]=(((r11*x14024))+((r12*x14016))+(((-1.0)*x14018*x14021)));
evalcond[1]=((((-1.0)*x14020*x14022))+(((-1.0)*r22*x14021))+((x14016*x14019)));
evalcond[2]=(((r01*x14023))+(((-1.0)*r02*x14021))+(((-1.0)*x14017*x14022)));
evalcond[3]=((-1.0)+((r11*x14023))+(((-1.0)*r12*x14021))+(((-1.0)*x14018*x14022)));
evalcond[4]=(((cj2*sj1))+((r01*x14024))+((r02*x14016))+((cj1*sj2))+(((-1.0)*x14017*x14021)));
evalcond[5]=(((x14015*x14019))+(((-1.0)*x14020*x14021))+(((-1.0)*cj1*cj2))+((r22*x14016))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14025 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14025.valid){
continue;
}
CheckValue<IkReal> x14026=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14025.value)+(((1.5707963267949)*(x14026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14027=IKcos(j4);
IkReal x14028=IKsin(j4);
IkReal x14029=(cj5*r00);
IkReal x14030=(cj5*r10);
IkReal x14031=(r21*sj5);
IkReal x14032=(cj5*r20);
IkReal x14033=((1.0)*x14027);
IkReal x14034=((1.0)*x14028);
IkReal x14035=(sj5*x14028);
IkReal x14036=(sj5*x14027);
evalcond[0]=(((r11*x14036))+(((-1.0)*x14030*x14033))+((r12*x14028)));
evalcond[1]=((((-1.0)*x14032*x14034))+(((-1.0)*r22*x14033))+((x14028*x14031)));
evalcond[2]=(((r01*x14035))+(((-1.0)*x14029*x14034))+(((-1.0)*r02*x14033)));
evalcond[3]=((-1.0)+((r11*x14035))+(((-1.0)*x14030*x14034))+(((-1.0)*r12*x14033)));
evalcond[4]=(((r01*x14036))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14029*x14033))+((r02*x14028)));
evalcond[5]=(((r22*x14028))+((x14027*x14031))+(((-1.0)*x14032*x14033))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14038 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14038)==0){
continue;
}
IkReal x14037=pow(x14038,-0.5);
CheckValue<IkReal> x14039 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14039.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14039.value));
IkReal gconst37=((-1.0)*r01*x14037);
IkReal gconst38=(r00*x14037);
CheckValue<IkReal> x14040 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14040.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14040.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14043 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14043.valid){
continue;
}
IkReal x14041=((-1.0)*(x14043.value));
IkReal x14042=x14037;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14041;
IkReal gconst36=x14041;
IkReal gconst37=((-1.0)*r01*x14042);
IkReal gconst38=(r00*x14042);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14046 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14046.valid){
continue;
}
IkReal x14044=((-1.0)*(x14046.value));
IkReal x14045=x14037;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14044;
IkReal gconst36=x14044;
IkReal gconst37=((-1.0)*r01*x14045);
IkReal gconst38=(r00*x14045);
CheckValue<IkReal> x14054=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14054.valid){
continue;
}
IkReal x14047=x14054.value;
IkReal x14048=(sj3*x14047);
IkReal x14049=(r11*x14048);
IkReal x14050=(r21*x14048);
IkReal x14051=(r20*x14048);
IkReal x14052=(r10*x14048);
IkReal x14053=(r00*r01*x14048);
j4eval[0]=IKsign((((r21*x14049*(r01*r01)))+((r00*r01*r20*x14049))+((r00*r01*r10*x14050))+((r10*x14051*(r00*r00)))+((r12*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14055=gconst38*gconst38;
IkReal x14056=gconst37*gconst37;
IkReal x14057=((1.0)*cj3);
IkReal x14058=(r11*r20);
IkReal x14059=(r10*sj3);
IkReal x14060=(gconst37*gconst38);
IkReal x14061=(r11*sj3);
IkReal x14062=(r21*x14056);
IkReal x14063=(cj3*x14060);
CheckValue<IkReal> x14064 = IKatan2WithCheck(IkReal((((gconst38*r22*x14061))+((gconst37*r22*x14059)))),IkReal(((((-1.0)*sj3*x14055*x14058))+(((-1.0)*r20*x14059*x14060))+((x14059*x14062))+((r21*x14060*x14061)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14064.valid){
continue;
}
CheckValue<IkReal> x14065=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14057*x14062))+((r10*r21*x14063))+(((-1.0)*r10*r20*x14055*x14057))+(((-1.0)*r12*r22*x14057))+((x14058*x14063)))),-1);
if(!x14065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14064.value)+(((1.5707963267949)*(x14065.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14066=IKsin(j4);
IkReal x14067=IKcos(j4);
IkReal x14068=(cj2*sj1);
IkReal x14069=(cj1*sj2);
IkReal x14070=(gconst38*r21);
IkReal x14071=(cj3*r20);
IkReal x14072=(gconst38*r10);
IkReal x14073=(cj3*gconst37);
IkReal x14074=(sj1*sj2);
IkReal x14075=(gconst38*r00);
IkReal x14076=(cj1*cj2);
IkReal x14077=(gconst37*sj3);
IkReal x14078=(gconst38*r20);
IkReal x14079=(gconst38*r01);
IkReal x14080=(gconst38*r11);
IkReal x14081=((1.0)*x14067);
IkReal x14082=((1.0)*x14066);
IkReal x14083=(cj3*x14066);
IkReal x14084=(sj3*x14067);
IkReal x14085=(gconst37*x14066);
IkReal x14086=(x14068+x14069);
evalcond[0]=((((-1.0)*r22*x14081))+(((-1.0)*x14078*x14082))+((r21*x14085)));
evalcond[1]=((((-1.0)*x14075*x14082))+((r01*x14085))+(((-1.0)*r02*x14081)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14081))+((r11*x14085))+(((-1.0)*x14072*x14082)));
evalcond[3]=((((-1.0)*cj3*x14072*x14081))+((r10*x14077))+((r12*x14083))+((r11*x14067*x14073))+((sj3*x14080)));
evalcond[4]=((((-1.0)*r12*sj3*x14082))+((x14072*x14084))+((cj3*x14080))+((r10*x14073))+(((-1.0)*r11*x14077*x14081)));
evalcond[5]=((((-1.0)*gconst38*x14071*x14081))+((sj3*x14070))+((r22*x14083))+((r20*x14077))+x14086+((r21*x14067*x14073)));
evalcond[6]=(((r01*x14067*x14073))+((sj3*x14079))+((r02*x14083))+((r00*x14077))+(((-1.0)*cj3*x14075*x14081))+(((-1.0)*x14074))+x14076);
evalcond[7]=(((x14075*x14084))+((r00*x14073))+(((-1.0)*r02*sj3*x14082))+x14086+((cj3*x14079))+(((-1.0)*r01*x14077*x14081)));
evalcond[8]=((((-1.0)*r22*sj3*x14082))+((gconst37*x14071))+(((-1.0)*x14076))+((x14078*x14084))+(((-1.0)*r21*x14077*x14081))+x14074+((cj3*x14070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14087=gconst38*gconst38;
IkReal x14088=gconst37*gconst37;
IkReal x14089=(gconst37*r10);
IkReal x14090=(cj3*r22);
IkReal x14091=((1.0)*gconst38);
IkReal x14092=(r21*sj3);
IkReal x14093=(gconst38*r11);
IkReal x14094=(cj3*r20);
IkReal x14095=(cj3*r21);
IkReal x14096=(r20*sj3);
CheckValue<IkReal> x14097 = IKatan2WithCheck(IkReal((((x14089*x14090))+((x14090*x14093)))),IkReal(((((-1.0)*x14089*x14091*x14094))+((gconst37*x14093*x14095))+((r10*x14088*x14095))+(((-1.0)*r11*x14087*x14094)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14097.valid){
continue;
}
CheckValue<IkReal> x14098=IKPowWithIntegerCheck(IKsign((((r11*x14088*x14092))+(((-1.0)*gconst37*r11*x14091*x14096))+((r10*x14087*x14096))+(((-1.0)*x14089*x14091*x14092))+((r12*r22*sj3)))),-1);
if(!x14098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14097.value)+(((1.5707963267949)*(x14098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14099=IKsin(j4);
IkReal x14100=IKcos(j4);
IkReal x14101=(cj2*sj1);
IkReal x14102=(cj1*sj2);
IkReal x14103=(gconst38*r21);
IkReal x14104=(cj3*r20);
IkReal x14105=(gconst38*r10);
IkReal x14106=(cj3*gconst37);
IkReal x14107=(sj1*sj2);
IkReal x14108=(gconst38*r00);
IkReal x14109=(cj1*cj2);
IkReal x14110=(gconst37*sj3);
IkReal x14111=(gconst38*r20);
IkReal x14112=(gconst38*r01);
IkReal x14113=(gconst38*r11);
IkReal x14114=((1.0)*x14100);
IkReal x14115=((1.0)*x14099);
IkReal x14116=(cj3*x14099);
IkReal x14117=(sj3*x14100);
IkReal x14118=(gconst37*x14099);
IkReal x14119=(x14102+x14101);
evalcond[0]=((((-1.0)*r22*x14114))+(((-1.0)*x14111*x14115))+((r21*x14118)));
evalcond[1]=((((-1.0)*x14108*x14115))+((r01*x14118))+(((-1.0)*r02*x14114)));
evalcond[2]=((-1.0)+((r11*x14118))+(((-1.0)*x14105*x14115))+(((-1.0)*r12*x14114)));
evalcond[3]=(((sj3*x14113))+((r10*x14110))+(((-1.0)*cj3*x14105*x14114))+((r12*x14116))+((r11*x14100*x14106)));
evalcond[4]=((((-1.0)*r11*x14110*x14114))+((cj3*x14113))+((x14105*x14117))+((r10*x14106))+(((-1.0)*r12*sj3*x14115)));
evalcond[5]=(((sj3*x14103))+((r21*x14100*x14106))+((r22*x14116))+(((-1.0)*gconst38*x14104*x14114))+((r20*x14110))+x14119);
evalcond[6]=(((r02*x14116))+((sj3*x14112))+((r00*x14110))+(((-1.0)*x14107))+x14109+((r01*x14100*x14106))+(((-1.0)*cj3*x14108*x14114)));
evalcond[7]=((((-1.0)*r01*x14110*x14114))+((r00*x14106))+((x14108*x14117))+(((-1.0)*r02*sj3*x14115))+((cj3*x14112))+x14119);
evalcond[8]=(((x14111*x14117))+(((-1.0)*r21*x14110*x14114))+((cj3*x14103))+(((-1.0)*x14109))+x14107+((gconst37*x14104))+(((-1.0)*r22*sj3*x14115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14120=((1.0)*gconst38);
CheckValue<IkReal> x14121=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14120)))),-1);
if(!x14121.valid){
continue;
}
CheckValue<IkReal> x14122 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14120))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14121.value)))+(x14122.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14123=IKsin(j4);
IkReal x14124=IKcos(j4);
IkReal x14125=(cj2*sj1);
IkReal x14126=(cj1*sj2);
IkReal x14127=(gconst38*r21);
IkReal x14128=(cj3*r20);
IkReal x14129=(gconst38*r10);
IkReal x14130=(cj3*gconst37);
IkReal x14131=(sj1*sj2);
IkReal x14132=(gconst38*r00);
IkReal x14133=(cj1*cj2);
IkReal x14134=(gconst37*sj3);
IkReal x14135=(gconst38*r20);
IkReal x14136=(gconst38*r01);
IkReal x14137=(gconst38*r11);
IkReal x14138=((1.0)*x14124);
IkReal x14139=((1.0)*x14123);
IkReal x14140=(cj3*x14123);
IkReal x14141=(sj3*x14124);
IkReal x14142=(gconst37*x14123);
IkReal x14143=(x14125+x14126);
evalcond[0]=((((-1.0)*x14135*x14139))+((r21*x14142))+(((-1.0)*r22*x14138)));
evalcond[1]=((((-1.0)*r02*x14138))+((r01*x14142))+(((-1.0)*x14132*x14139)));
evalcond[2]=((-1.0)+(((-1.0)*x14129*x14139))+(((-1.0)*r12*x14138))+((r11*x14142)));
evalcond[3]=(((sj3*x14137))+((r10*x14134))+((r12*x14140))+((r11*x14124*x14130))+(((-1.0)*cj3*x14129*x14138)));
evalcond[4]=(((r10*x14130))+((x14129*x14141))+(((-1.0)*r11*x14134*x14138))+(((-1.0)*r12*sj3*x14139))+((cj3*x14137)));
evalcond[5]=(((r20*x14134))+(((-1.0)*gconst38*x14128*x14138))+((r21*x14124*x14130))+((r22*x14140))+x14143+((sj3*x14127)));
evalcond[6]=((((-1.0)*x14131))+((r02*x14140))+((sj3*x14136))+(((-1.0)*cj3*x14132*x14138))+x14133+((r01*x14124*x14130))+((r00*x14134)));
evalcond[7]=((((-1.0)*r02*sj3*x14139))+(((-1.0)*r01*x14134*x14138))+x14143+((cj3*x14136))+((r00*x14130))+((x14132*x14141)));
evalcond[8]=((((-1.0)*x14133))+((cj3*x14127))+(((-1.0)*r22*sj3*x14139))+x14131+((x14135*x14141))+(((-1.0)*r21*x14134*x14138))+((gconst37*x14128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14145 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14145)==0){
continue;
}
IkReal x14144=pow(x14145,-0.5);
CheckValue<IkReal> x14146 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14146.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14146.value))));
IkReal gconst40=((1.0)*r01*x14144);
IkReal gconst41=((-1.0)*r00*x14144);
CheckValue<IkReal> x14147 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14147.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14147.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14150 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14150.valid){
continue;
}
IkReal x14148=((1.0)*(x14150.value));
IkReal x14149=x14144;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14148)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14148)));
IkReal gconst40=((1.0)*r01*x14149);
IkReal gconst41=((-1.0)*r00*x14149);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14153 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14153.valid){
continue;
}
IkReal x14151=((1.0)*(x14153.value));
IkReal x14152=x14144;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14151)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14151)));
IkReal gconst40=((1.0)*r01*x14152);
IkReal gconst41=((-1.0)*r00*x14152);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14154=gconst41*gconst41;
IkReal x14155=gconst40*gconst40;
IkReal x14156=(gconst40*r10);
IkReal x14157=(r22*sj3);
IkReal x14158=(r11*sj3);
IkReal x14159=((1.0)*cj3);
IkReal x14160=(gconst41*r21);
IkReal x14161=(gconst41*r20);
IkReal x14162=(r21*x14155);
IkReal x14163=((1.0)*r20*x14154);
CheckValue<IkReal> x14164 = IKatan2WithCheck(IkReal((((gconst41*r11*x14157))+((x14156*x14157)))),IkReal((((gconst40*x14158*x14160))+(((-1.0)*sj3*x14156*x14161))+((r10*sj3*x14162))+(((-1.0)*x14158*x14163)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14164.valid){
continue;
}
CheckValue<IkReal> x14165=IKPowWithIntegerCheck(IKsign((((cj3*gconst40*r11*x14161))+(((-1.0)*r10*r20*x14154*x14159))+(((-1.0)*r12*r22*x14159))+(((-1.0)*r11*x14159*x14162))+((cj3*x14156*x14160)))),-1);
if(!x14165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14164.value)+(((1.5707963267949)*(x14165.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14166=IKsin(j4);
IkReal x14167=IKcos(j4);
IkReal x14168=(cj2*sj1);
IkReal x14169=(cj1*sj2);
IkReal x14170=(gconst40*sj3);
IkReal x14171=(gconst41*sj3);
IkReal x14172=(gconst41*r20);
IkReal x14173=(cj3*gconst41);
IkReal x14174=(sj1*sj2);
IkReal x14175=(cj1*cj2);
IkReal x14176=(cj3*gconst40);
IkReal x14177=((1.0)*x14167);
IkReal x14178=((1.0)*x14166);
IkReal x14179=(cj3*x14166);
IkReal x14180=(gconst40*x14166);
IkReal x14181=(x14169+x14168);
IkReal x14182=(x14167*x14176);
evalcond[0]=((((-1.0)*r22*x14177))+(((-1.0)*x14172*x14178))+((r21*x14180)));
evalcond[1]=((((-1.0)*r02*x14177))+(((-1.0)*gconst41*r00*x14178))+((r01*x14180)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14178))+((r11*x14180))+(((-1.0)*r12*x14177)));
evalcond[3]=(((r11*x14171))+((r12*x14179))+(((-1.0)*r10*x14173*x14177))+((r11*x14182))+((r10*x14170)));
evalcond[4]=((((-1.0)*r12*sj3*x14178))+((r11*x14173))+(((-1.0)*r11*x14170*x14177))+((r10*x14167*x14171))+((r10*x14176)));
evalcond[5]=(((r22*x14179))+((r21*x14171))+(((-1.0)*cj3*x14172*x14177))+((r20*x14170))+((r21*x14182))+x14181);
evalcond[6]=(((r01*x14171))+((r00*x14170))+(((-1.0)*x14174))+((r01*x14182))+((r02*x14179))+x14175+(((-1.0)*r00*x14173*x14177)));
evalcond[7]=(((r01*x14173))+((r00*x14176))+((r00*x14167*x14171))+x14181+(((-1.0)*r02*sj3*x14178))+(((-1.0)*r01*x14170*x14177)));
evalcond[8]=(((r21*x14173))+(((-1.0)*r21*x14170*x14177))+((r20*x14176))+(((-1.0)*x14175))+x14174+(((-1.0)*r22*sj3*x14178))+((r20*x14167*x14171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14183=((1.0)*gconst41);
CheckValue<IkReal> x14184=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14183))+(((-1.0)*gconst40*r20)))),-1);
if(!x14184.valid){
continue;
}
CheckValue<IkReal> x14185 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14183))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14184.value)))+(x14185.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14186=IKsin(j4);
IkReal x14187=IKcos(j4);
IkReal x14188=(cj2*sj1);
IkReal x14189=(cj1*sj2);
IkReal x14190=(gconst40*sj3);
IkReal x14191=(gconst41*sj3);
IkReal x14192=(gconst41*r20);
IkReal x14193=(cj3*gconst41);
IkReal x14194=(sj1*sj2);
IkReal x14195=(cj1*cj2);
IkReal x14196=(cj3*gconst40);
IkReal x14197=((1.0)*x14187);
IkReal x14198=((1.0)*x14186);
IkReal x14199=(cj3*x14186);
IkReal x14200=(gconst40*x14186);
IkReal x14201=(x14189+x14188);
IkReal x14202=(x14187*x14196);
evalcond[0]=((((-1.0)*r22*x14197))+((r21*x14200))+(((-1.0)*x14192*x14198)));
evalcond[1]=((((-1.0)*gconst41*r00*x14198))+(((-1.0)*r02*x14197))+((r01*x14200)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14197))+(((-1.0)*gconst41*r10*x14198))+((r11*x14200)));
evalcond[3]=(((r10*x14190))+(((-1.0)*r10*x14193*x14197))+((r11*x14191))+((r12*x14199))+((r11*x14202)));
evalcond[4]=(((r10*x14196))+((r10*x14187*x14191))+(((-1.0)*r12*sj3*x14198))+(((-1.0)*r11*x14190*x14197))+((r11*x14193)));
evalcond[5]=(((r21*x14202))+((r22*x14199))+(((-1.0)*cj3*x14192*x14197))+((r21*x14191))+x14201+((r20*x14190)));
evalcond[6]=((((-1.0)*x14194))+((r02*x14199))+(((-1.0)*r00*x14193*x14197))+((r01*x14191))+((r01*x14202))+((r00*x14190))+x14195);
evalcond[7]=((((-1.0)*r01*x14190*x14197))+((r01*x14193))+((r00*x14196))+(((-1.0)*r02*sj3*x14198))+((r00*x14187*x14191))+x14201);
evalcond[8]=((((-1.0)*x14195))+(((-1.0)*r22*sj3*x14198))+((r20*x14187*x14191))+(((-1.0)*r21*x14190*x14197))+x14194+((r21*x14193))+((r20*x14196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14203 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14203.valid){
continue;
}
CheckValue<IkReal> x14204=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14203.value)+(((1.5707963267949)*(x14204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14205=IKsin(j4);
IkReal x14206=IKcos(j4);
IkReal x14207=(cj2*sj1);
IkReal x14208=(cj1*sj2);
IkReal x14209=(gconst40*sj3);
IkReal x14210=(gconst41*sj3);
IkReal x14211=(gconst41*r20);
IkReal x14212=(cj3*gconst41);
IkReal x14213=(sj1*sj2);
IkReal x14214=(cj1*cj2);
IkReal x14215=(cj3*gconst40);
IkReal x14216=((1.0)*x14206);
IkReal x14217=((1.0)*x14205);
IkReal x14218=(cj3*x14205);
IkReal x14219=(gconst40*x14205);
IkReal x14220=(x14208+x14207);
IkReal x14221=(x14206*x14215);
evalcond[0]=((((-1.0)*x14211*x14217))+(((-1.0)*r22*x14216))+((r21*x14219)));
evalcond[1]=((((-1.0)*gconst41*r00*x14217))+(((-1.0)*r02*x14216))+((r01*x14219)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14216))+((r11*x14219))+(((-1.0)*gconst41*r10*x14217)));
evalcond[3]=(((r11*x14210))+((r12*x14218))+((r10*x14209))+(((-1.0)*r10*x14212*x14216))+((r11*x14221)));
evalcond[4]=(((r11*x14212))+((r10*x14215))+((r10*x14206*x14210))+(((-1.0)*r12*sj3*x14217))+(((-1.0)*r11*x14209*x14216)));
evalcond[5]=(((r22*x14218))+((r20*x14209))+((r21*x14221))+((r21*x14210))+x14220+(((-1.0)*cj3*x14211*x14216)));
evalcond[6]=(((r01*x14210))+((r00*x14209))+(((-1.0)*x14213))+((r02*x14218))+((r01*x14221))+x14214+(((-1.0)*r00*x14212*x14216)));
evalcond[7]=((((-1.0)*r02*sj3*x14217))+((r00*x14206*x14210))+((r01*x14212))+((r00*x14215))+(((-1.0)*r01*x14209*x14216))+x14220);
evalcond[8]=((((-1.0)*r21*x14209*x14216))+(((-1.0)*r22*sj3*x14217))+(((-1.0)*x14214))+((r21*x14212))+((r20*x14215))+x14213+((r20*x14206*x14210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14222=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14222);
rxp1_1=(px*r21);
rxp1_2=(r11*x14222);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14223=(r11*sj5);
IkReal x14224=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14224))+x14223);
j4eval[1]=(((cj3*x14223))+(((-1.0)*cj3*x14224)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14225=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14225);
rxp1_1=(px*r21);
rxp1_2=(r11*x14225);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14226=(cj5*r10);
IkReal x14227=(r11*sj5);
j4eval[0]=((((-1.0)*x14226))+x14227);
j4eval[1]=((((-1.0)*sj3*x14227))+((sj3*x14226)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14228=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14228);
rxp1_1=(px*r21);
rxp1_2=(r11*x14228);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14229=((1.0)*r10);
CheckValue<IkReal> x14230=IKPowWithIntegerCheck(cj3,-1);
if(!x14230.valid){
continue;
}
CheckValue<IkReal> x14231=IKPowWithIntegerCheck(r02,-1);
if(!x14231.valid){
continue;
}
CheckValue<IkReal> x14232=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14229))),-1);
if(!x14232.valid){
continue;
}
if( IKabs(((x14230.value)*(x14231.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14232.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14229)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14230.value)*(x14231.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14232.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14229))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14230.value)*(x14231.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14232.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14229))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14233=IKsin(j4);
IkReal x14234=IKcos(j4);
IkReal x14235=(cj2*sj1);
IkReal x14236=(cj1*sj2);
IkReal x14237=(cj5*r10);
IkReal x14238=(sj1*sj2);
IkReal x14239=(cj5*sj3);
IkReal x14240=(r11*sj5);
IkReal x14241=(cj3*sj5);
IkReal x14242=(r21*sj5);
IkReal x14243=(cj1*cj2);
IkReal x14244=(cj3*cj5);
IkReal x14245=(sj3*sj5);
IkReal x14246=((1.0)*x14233);
IkReal x14247=(r20*x14234);
IkReal x14248=(cj3*x14234);
IkReal x14249=(sj3*x14234);
IkReal x14250=(x14235+x14236);
evalcond[0]=((-1.0)*r02*x14234);
evalcond[1]=((((-1.0)*cj5*r20*x14246))+((x14233*x14242)));
evalcond[2]=((((-1.0)*x14238))+((cj3*r02*x14233))+x14243);
evalcond[3]=((((-1.0)*r02*sj3*x14246))+x14250);
evalcond[4]=((-1.0)+(((-1.0)*x14237*x14246))+((x14233*x14240)));
evalcond[5]=((((-1.0)*x14237*x14248))+((x14240*x14248))+((r10*x14245))+((r11*x14239)));
evalcond[6]=(((x14237*x14249))+((r11*x14244))+((r10*x14241))+(((-1.0)*x14240*x14249)));
evalcond[7]=((((-1.0)*x14244*x14247))+((r21*x14239))+((r21*x14234*x14241))+((r20*x14245))+x14250);
evalcond[8]=(((r21*x14244))+(((-1.0)*x14243))+(((-1.0)*x14242*x14249))+((x14239*x14247))+((r20*x14241))+x14238);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14251=(cj5*r10);
IkReal x14252=((1.0)*r11);
CheckValue<IkReal> x14253=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x14251))),-1);
if(!x14253.valid){
continue;
}
CheckValue<IkReal> x14254=IKPowWithIntegerCheck((((sj3*x14251))+(((-1.0)*sj3*sj5*x14252))),-1);
if(!x14254.valid){
continue;
}
if( IKabs(x14253.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14254.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14252)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14253.value)+IKsqr(((x14254.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14252))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14253.value, ((x14254.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14252))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14255=IKsin(j4);
IkReal x14256=IKcos(j4);
IkReal x14257=(cj2*sj1);
IkReal x14258=(cj1*sj2);
IkReal x14259=(cj5*r10);
IkReal x14260=(sj1*sj2);
IkReal x14261=(cj5*sj3);
IkReal x14262=(r11*sj5);
IkReal x14263=(cj3*sj5);
IkReal x14264=(r21*sj5);
IkReal x14265=(cj1*cj2);
IkReal x14266=(cj3*cj5);
IkReal x14267=(sj3*sj5);
IkReal x14268=((1.0)*x14255);
IkReal x14269=(r20*x14256);
IkReal x14270=(cj3*x14256);
IkReal x14271=(sj3*x14256);
IkReal x14272=(x14257+x14258);
evalcond[0]=((-1.0)*r02*x14256);
evalcond[1]=((((-1.0)*cj5*r20*x14268))+((x14255*x14264)));
evalcond[2]=((((-1.0)*x14260))+((cj3*r02*x14255))+x14265);
evalcond[3]=((((-1.0)*r02*sj3*x14268))+x14272);
evalcond[4]=((-1.0)+(((-1.0)*x14259*x14268))+((x14255*x14262)));
evalcond[5]=(((r11*x14261))+((x14262*x14270))+(((-1.0)*x14259*x14270))+((r10*x14267)));
evalcond[6]=((((-1.0)*x14262*x14271))+((r11*x14266))+((x14259*x14271))+((r10*x14263)));
evalcond[7]=(((r21*x14256*x14263))+((r21*x14261))+((r20*x14267))+(((-1.0)*x14266*x14269))+x14272);
evalcond[8]=((((-1.0)*x14264*x14271))+((r21*x14266))+(((-1.0)*x14265))+((r20*x14263))+((x14261*x14269))+x14260);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14273=((1.0)*r10);
IkReal x14274=(r11*sj5);
CheckValue<IkReal> x14275=IKPowWithIntegerCheck((x14274+(((-1.0)*cj5*x14273))),-1);
if(!x14275.valid){
continue;
}
CheckValue<IkReal> x14276=IKPowWithIntegerCheck((((cj3*x14274))+(((-1.0)*cj3*cj5*x14273))),-1);
if(!x14276.valid){
continue;
}
if( IKabs(x14275.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14276.value)*(((((-1.0)*sj3*sj5*x14273))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14275.value)+IKsqr(((x14276.value)*(((((-1.0)*sj3*sj5*x14273))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14275.value, ((x14276.value)*(((((-1.0)*sj3*sj5*x14273))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14277=IKsin(j4);
IkReal x14278=IKcos(j4);
IkReal x14279=(cj2*sj1);
IkReal x14280=(cj1*sj2);
IkReal x14281=(cj5*r10);
IkReal x14282=(sj1*sj2);
IkReal x14283=(cj5*sj3);
IkReal x14284=(r11*sj5);
IkReal x14285=(cj3*sj5);
IkReal x14286=(r21*sj5);
IkReal x14287=(cj1*cj2);
IkReal x14288=(cj3*cj5);
IkReal x14289=(sj3*sj5);
IkReal x14290=((1.0)*x14277);
IkReal x14291=(r20*x14278);
IkReal x14292=(cj3*x14278);
IkReal x14293=(sj3*x14278);
IkReal x14294=(x14279+x14280);
evalcond[0]=((-1.0)*r02*x14278);
evalcond[1]=((((-1.0)*cj5*r20*x14290))+((x14277*x14286)));
evalcond[2]=(((cj3*r02*x14277))+(((-1.0)*x14282))+x14287);
evalcond[3]=((((-1.0)*r02*sj3*x14290))+x14294);
evalcond[4]=((-1.0)+(((-1.0)*x14281*x14290))+((x14277*x14284)));
evalcond[5]=(((r10*x14289))+((x14284*x14292))+((r11*x14283))+(((-1.0)*x14281*x14292)));
evalcond[6]=(((x14281*x14293))+((r10*x14285))+((r11*x14288))+(((-1.0)*x14284*x14293)));
evalcond[7]=((((-1.0)*x14288*x14291))+((r21*x14283))+((r21*x14278*x14285))+x14294+((r20*x14289)));
evalcond[8]=(((r21*x14288))+(((-1.0)*x14286*x14293))+((x14283*x14291))+(((-1.0)*x14287))+x14282+((r20*x14285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14295=cj5*cj5;
IkReal x14296=((1.0)*cj3);
IkReal x14297=(r10*r21);
IkReal x14298=(cj5*sj5);
IkReal x14299=(r11*r21);
IkReal x14300=(r11*r20);
IkReal x14301=(r22*sj3);
IkReal x14302=(r10*r20);
IkReal x14303=((1.0)*sj3*x14295);
CheckValue<IkReal> x14304 = IKatan2WithCheck(IkReal((((r10*sj5*x14301))+((cj5*r11*x14301)))),IkReal(((((-1.0)*x14297*x14303))+(((-1.0)*x14300*x14303))+((sj3*x14297))+((sj3*x14298*x14299))+(((-1.0)*sj3*x14298*x14302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14304.valid){
continue;
}
CheckValue<IkReal> x14305=IKPowWithIntegerCheck(IKsign((((cj3*x14297*x14298))+((cj3*x14298*x14300))+((cj3*x14295*x14299))+(((-1.0)*x14296*x14299))+(((-1.0)*x14295*x14296*x14302))+(((-1.0)*r12*r22*x14296)))),-1);
if(!x14305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14304.value)+(((1.5707963267949)*(x14305.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14306=IKsin(j4);
IkReal x14307=IKcos(j4);
IkReal x14308=(cj2*sj1);
IkReal x14309=(cj1*sj2);
IkReal x14310=(cj5*sj3);
IkReal x14311=(cj5*r10);
IkReal x14312=(r00*sj5);
IkReal x14313=(sj1*sj2);
IkReal x14314=(r11*sj5);
IkReal x14315=(cj3*cj5);
IkReal x14316=(cj3*sj5);
IkReal x14317=(r21*sj5);
IkReal x14318=(cj1*cj2);
IkReal x14319=(sj3*sj5);
IkReal x14320=(r01*sj5);
IkReal x14321=((1.0)*x14307);
IkReal x14322=((1.0)*x14306);
IkReal x14323=(cj3*x14306);
IkReal x14324=(cj3*x14307);
IkReal x14325=(x14309+x14308);
evalcond[0]=(((x14306*x14317))+(((-1.0)*cj5*r20*x14322))+(((-1.0)*r22*x14321)));
evalcond[1]=((((-1.0)*cj5*r00*x14322))+((x14306*x14320))+(((-1.0)*r02*x14321)));
evalcond[2]=((-1.0)+(((-1.0)*x14311*x14322))+((x14306*x14314))+(((-1.0)*r12*x14321)));
evalcond[3]=(((r11*x14310))+(((-1.0)*cj3*x14311*x14321))+((x14314*x14324))+((r12*x14323))+((r10*x14319)));
evalcond[4]=(((r11*x14315))+(((-1.0)*sj3*x14314*x14321))+((r10*x14307*x14310))+(((-1.0)*r12*sj3*x14322))+((r10*x14316)));
evalcond[5]=(((r21*x14307*x14316))+((r20*x14319))+(((-1.0)*r20*x14315*x14321))+((r21*x14310))+x14325+((r22*x14323)));
evalcond[6]=(((sj3*x14312))+(((-1.0)*r00*x14315*x14321))+((r02*x14323))+(((-1.0)*x14313))+((r01*x14310))+x14318+((r01*x14307*x14316)));
evalcond[7]=(((cj3*x14312))+((r00*x14307*x14310))+(((-1.0)*r02*sj3*x14322))+(((-1.0)*r01*x14319*x14321))+((r01*x14315))+x14325);
evalcond[8]=(((r20*x14307*x14310))+(((-1.0)*r22*sj3*x14322))+(((-1.0)*x14318))+((r20*x14316))+(((-1.0)*sj3*x14317*x14321))+((r21*x14315))+x14313);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14326=((1.0)*cj5);
CheckValue<IkReal> x14327 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14326)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14327.valid){
continue;
}
CheckValue<IkReal> x14328=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14326))+(((-1.0)*r20*sj5)))),-1);
if(!x14328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14327.value)+(((1.5707963267949)*(x14328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14329=IKsin(j4);
IkReal x14330=IKcos(j4);
IkReal x14331=(cj2*sj1);
IkReal x14332=(cj1*sj2);
IkReal x14333=(cj5*sj3);
IkReal x14334=(cj5*r10);
IkReal x14335=(r00*sj5);
IkReal x14336=(sj1*sj2);
IkReal x14337=(r11*sj5);
IkReal x14338=(cj3*cj5);
IkReal x14339=(cj3*sj5);
IkReal x14340=(r21*sj5);
IkReal x14341=(cj1*cj2);
IkReal x14342=(sj3*sj5);
IkReal x14343=(r01*sj5);
IkReal x14344=((1.0)*x14330);
IkReal x14345=((1.0)*x14329);
IkReal x14346=(cj3*x14329);
IkReal x14347=(cj3*x14330);
IkReal x14348=(x14331+x14332);
evalcond[0]=(((x14329*x14340))+(((-1.0)*r22*x14344))+(((-1.0)*cj5*r20*x14345)));
evalcond[1]=(((x14329*x14343))+(((-1.0)*cj5*r00*x14345))+(((-1.0)*r02*x14344)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14344))+(((-1.0)*x14334*x14345))+((x14329*x14337)));
evalcond[3]=(((r11*x14333))+((x14337*x14347))+((r10*x14342))+((r12*x14346))+(((-1.0)*cj3*x14334*x14344)));
evalcond[4]=((((-1.0)*sj3*x14337*x14344))+((r11*x14338))+(((-1.0)*r12*sj3*x14345))+((r10*x14339))+((r10*x14330*x14333)));
evalcond[5]=((((-1.0)*r20*x14338*x14344))+((r21*x14330*x14339))+((r22*x14346))+((r20*x14342))+x14348+((r21*x14333)));
evalcond[6]=((((-1.0)*x14336))+((r01*x14333))+((r01*x14330*x14339))+(((-1.0)*r00*x14338*x14344))+((r02*x14346))+x14341+((sj3*x14335)));
evalcond[7]=((((-1.0)*r01*x14342*x14344))+(((-1.0)*r02*sj3*x14345))+((r01*x14338))+((r00*x14330*x14333))+x14348+((cj3*x14335)));
evalcond[8]=(((r20*x14339))+(((-1.0)*x14341))+(((-1.0)*sj3*x14340*x14344))+((r20*x14330*x14333))+x14336+((r21*x14338))+(((-1.0)*r22*sj3*x14345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14349 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14349.valid){
continue;
}
CheckValue<IkReal> x14350=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14349.value)+(((1.5707963267949)*(x14350.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14351=IKsin(j4);
IkReal x14352=IKcos(j4);
IkReal x14353=(cj2*sj1);
IkReal x14354=(cj1*sj2);
IkReal x14355=(cj5*sj3);
IkReal x14356=(cj5*r10);
IkReal x14357=(r00*sj5);
IkReal x14358=(sj1*sj2);
IkReal x14359=(r11*sj5);
IkReal x14360=(cj3*cj5);
IkReal x14361=(cj3*sj5);
IkReal x14362=(r21*sj5);
IkReal x14363=(cj1*cj2);
IkReal x14364=(sj3*sj5);
IkReal x14365=(r01*sj5);
IkReal x14366=((1.0)*x14352);
IkReal x14367=((1.0)*x14351);
IkReal x14368=(cj3*x14351);
IkReal x14369=(cj3*x14352);
IkReal x14370=(x14353+x14354);
evalcond[0]=((((-1.0)*r22*x14366))+(((-1.0)*cj5*r20*x14367))+((x14351*x14362)));
evalcond[1]=((((-1.0)*r02*x14366))+(((-1.0)*cj5*r00*x14367))+((x14351*x14365)));
evalcond[2]=((-1.0)+(((-1.0)*x14356*x14367))+((x14351*x14359))+(((-1.0)*r12*x14366)));
evalcond[3]=(((r10*x14364))+((r11*x14355))+((x14359*x14369))+(((-1.0)*cj3*x14356*x14366))+((r12*x14368)));
evalcond[4]=(((r10*x14361))+((r11*x14360))+((r10*x14352*x14355))+(((-1.0)*r12*sj3*x14367))+(((-1.0)*sj3*x14359*x14366)));
evalcond[5]=((((-1.0)*r20*x14360*x14366))+((r20*x14364))+((r21*x14352*x14361))+((r21*x14355))+x14370+((r22*x14368)));
evalcond[6]=(((sj3*x14357))+(((-1.0)*r00*x14360*x14366))+((r02*x14368))+((r01*x14352*x14361))+(((-1.0)*x14358))+((r01*x14355))+x14363);
evalcond[7]=(((cj3*x14357))+((r00*x14352*x14355))+(((-1.0)*r01*x14364*x14366))+(((-1.0)*r02*sj3*x14367))+((r01*x14360))+x14370);
evalcond[8]=(((r20*x14352*x14355))+((r20*x14361))+(((-1.0)*x14363))+((r21*x14360))+x14358+(((-1.0)*r22*sj3*x14367))+(((-1.0)*sj3*x14362*x14366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14371=((-1.0)*r00);
IkReal x14373 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14373)==0){
continue;
}
IkReal x14372=pow(x14373,-0.5);
CheckValue<IkReal> x14374 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14371),IKFAST_ATAN2_MAGTHRESH);
if(!x14374.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14374.value));
IkReal gconst13=(r01*x14372);
IkReal gconst14=(x14371*x14372);
CheckValue<IkReal> x14375 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14375.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14375.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14376=((-1.0)*r00);
IkReal x14377=x14372;
CheckValue<IkReal> x14379 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14376),IKFAST_ATAN2_MAGTHRESH);
if(!x14379.valid){
continue;
}
IkReal x14378=((-1.0)*(x14379.value));
sj5=gconst13;
cj5=gconst14;
j5=x14378;
IkReal gconst12=x14378;
IkReal gconst13=(r01*x14377);
IkReal gconst14=(x14376*x14377);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14380=((1.0)*sj0);
IkReal x14381=((1.0)*cj0);
CheckValue<IkReal> x14382 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14380))+(((-1.0)*r02*x14381)))),IkReal((((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r11*x14380))+(((-1.0)*gconst13*r01*x14381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14382.valid){
continue;
}
CheckValue<IkReal> x14383=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14382.value)+(((1.5707963267949)*(x14383.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14384=IKsin(j4);
IkReal x14385=IKcos(j4);
IkReal x14386=((1.0)*r22);
IkReal x14387=((1.0)*r12);
IkReal x14388=(gconst13*sj3);
IkReal x14389=(gconst13*r01);
IkReal x14390=(sj1*sj2);
IkReal x14391=(gconst14*sj3);
IkReal x14392=(cj2*sj1);
IkReal x14393=((1.0)*sj0);
IkReal x14394=(cj3*gconst13);
IkReal x14395=(cj3*gconst14);
IkReal x14396=((1.0)*cj0);
IkReal x14397=((1.0)*gconst14);
IkReal x14398=(cj1*sj2);
IkReal x14399=(sj3*x14384);
IkReal x14400=((1.0)*cj1*cj2);
IkReal x14401=(cj3*x14385);
IkReal x14402=(cj3*x14384);
IkReal x14403=(gconst13*x14384);
IkReal x14404=((1.0)*x14385);
IkReal x14405=(x14384*x14397);
evalcond[0]=(((r21*x14403))+(((-1.0)*x14385*x14386))+(((-1.0)*r20*x14405)));
evalcond[1]=(cj0+((r11*x14403))+(((-1.0)*r10*x14405))+(((-1.0)*x14385*x14387)));
evalcond[2]=(((x14384*x14389))+(((-1.0)*r02*x14404))+(((-1.0)*r00*x14405))+(((-1.0)*x14393)));
evalcond[3]=(((r20*x14388))+((r21*x14391))+((r21*x14385*x14394))+((r22*x14402))+x14392+x14398+(((-1.0)*r20*x14395*x14404)));
evalcond[4]=((((-1.0)*r21*x14388*x14404))+(((-1.0)*x14400))+((r21*x14395))+((r20*x14385*x14391))+x14390+((r20*x14394))+(((-1.0)*x14386*x14399)));
evalcond[5]=(((cj0*x14390))+(((-1.0)*r00*x14395*x14404))+((x14389*x14401))+(((-1.0)*cj1*cj2*x14396))+((r01*x14391))+((r00*x14388))+((r02*x14402)));
evalcond[6]=(((sj0*x14390))+(((-1.0)*r10*x14395*x14404))+(((-1.0)*cj1*cj2*x14393))+((r12*x14402))+((r11*x14385*x14394))+((r10*x14388))+((r11*x14391)));
evalcond[7]=((((-1.0)*x14392*x14396))+((r00*x14385*x14391))+(((-1.0)*r01*x14388*x14404))+((r01*x14395))+((r00*x14394))+(((-1.0)*r02*x14399))+(((-1.0)*x14396*x14398)));
evalcond[8]=((((-1.0)*x14392*x14393))+(((-1.0)*x14393*x14398))+((r10*x14385*x14391))+((r10*x14394))+((r11*x14395))+(((-1.0)*r11*x14388*x14404))+(((-1.0)*x14387*x14399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14406=((1.0)*gconst14);
CheckValue<IkReal> x14407=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14406)))),-1);
if(!x14407.valid){
continue;
}
CheckValue<IkReal> x14408 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst13*r21*sj0))+(((-1.0)*r20*sj0*x14406)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14407.value)))+(x14408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14409=IKsin(j4);
IkReal x14410=IKcos(j4);
IkReal x14411=((1.0)*r22);
IkReal x14412=((1.0)*r12);
IkReal x14413=(gconst13*sj3);
IkReal x14414=(gconst13*r01);
IkReal x14415=(sj1*sj2);
IkReal x14416=(gconst14*sj3);
IkReal x14417=(cj2*sj1);
IkReal x14418=((1.0)*sj0);
IkReal x14419=(cj3*gconst13);
IkReal x14420=(cj3*gconst14);
IkReal x14421=((1.0)*cj0);
IkReal x14422=((1.0)*gconst14);
IkReal x14423=(cj1*sj2);
IkReal x14424=(sj3*x14409);
IkReal x14425=((1.0)*cj1*cj2);
IkReal x14426=(cj3*x14410);
IkReal x14427=(cj3*x14409);
IkReal x14428=(gconst13*x14409);
IkReal x14429=((1.0)*x14410);
IkReal x14430=(x14409*x14422);
evalcond[0]=((((-1.0)*x14410*x14411))+(((-1.0)*r20*x14430))+((r21*x14428)));
evalcond[1]=((((-1.0)*r10*x14430))+cj0+((r11*x14428))+(((-1.0)*x14410*x14412)));
evalcond[2]=((((-1.0)*x14418))+((x14409*x14414))+(((-1.0)*r00*x14430))+(((-1.0)*r02*x14429)));
evalcond[3]=(((r21*x14416))+x14423+x14417+((r22*x14427))+((r21*x14410*x14419))+(((-1.0)*r20*x14420*x14429))+((r20*x14413)));
evalcond[4]=(x14415+((r20*x14410*x14416))+(((-1.0)*x14411*x14424))+(((-1.0)*r21*x14413*x14429))+(((-1.0)*x14425))+((r20*x14419))+((r21*x14420)));
evalcond[5]=(((cj0*x14415))+((x14414*x14426))+((r00*x14413))+((r01*x14416))+(((-1.0)*r00*x14420*x14429))+((r02*x14427))+(((-1.0)*cj1*cj2*x14421)));
evalcond[6]=((((-1.0)*cj1*cj2*x14418))+((r11*x14416))+((r12*x14427))+((sj0*x14415))+((r11*x14410*x14419))+(((-1.0)*r10*x14420*x14429))+((r10*x14413)));
evalcond[7]=(((r00*x14410*x14416))+(((-1.0)*r01*x14413*x14429))+(((-1.0)*x14421*x14423))+(((-1.0)*x14417*x14421))+((r01*x14420))+((r00*x14419))+(((-1.0)*r02*x14424)));
evalcond[8]=((((-1.0)*r11*x14413*x14429))+(((-1.0)*x14417*x14418))+((r11*x14420))+(((-1.0)*x14418*x14423))+((r10*x14410*x14416))+((r10*x14419))+(((-1.0)*x14412*x14424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14431=((-1.0)*r01);
IkReal x14433 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14433)==0){
continue;
}
IkReal x14432=pow(x14433,-0.5);
CheckValue<IkReal> x14434 = IKatan2WithCheck(IkReal(x14431),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14434.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14434.value))));
IkReal gconst16=(x14431*x14432);
IkReal gconst17=((1.0)*r00*x14432);
CheckValue<IkReal> x14435 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14435.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14435.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14436=((-1.0)*r01);
CheckValue<IkReal> x14439 = IKatan2WithCheck(IkReal(x14436),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14439.valid){
continue;
}
IkReal x14437=((1.0)*(x14439.value));
IkReal x14438=x14432;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14437)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14437)));
IkReal gconst16=(x14436*x14438);
IkReal gconst17=((1.0)*r00*x14438);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14440=((-1.0)*r01);
CheckValue<IkReal> x14443 = IKatan2WithCheck(IkReal(x14440),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14443.valid){
continue;
}
IkReal x14441=((1.0)*(x14443.value));
IkReal x14442=x14432;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14441)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14441)));
IkReal gconst16=(x14440*x14442);
IkReal gconst17=((1.0)*r00*x14442);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14444=((-1.0)*r01);
CheckValue<IkReal> x14447 = IKatan2WithCheck(IkReal(x14444),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14447.valid){
continue;
}
IkReal x14445=((1.0)*(x14447.value));
IkReal x14446=x14432;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14445)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14445)));
IkReal gconst16=(x14444*x14446);
IkReal gconst17=((1.0)*r00*x14446);
IkReal x14448=r02*r02;
IkReal x14449=(r12*sj0);
IkReal x14450=((1.0)*cj0);
IkReal x14451=x14432;
j4eval[0]=((IKabs(((((-1.0)*x14449))+(((-1.0)*r02*x14450)))))+(IKabs((((cj0*x14448*x14451))+(((-1.0)*x14450*x14451))+((r02*x14449*x14451))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14452=((-1.0)*r01);
CheckValue<IkReal> x14455 = IKatan2WithCheck(IkReal(x14452),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14455.valid){
continue;
}
IkReal x14453=((1.0)*(x14455.value));
IkReal x14454=x14432;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14453)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14453)));
IkReal gconst16=(x14452*x14454);
IkReal gconst17=((1.0)*r00*x14454);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14456=((-1.0)*r01);
CheckValue<IkReal> x14459 = IKatan2WithCheck(IkReal(x14456),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14459.valid){
continue;
}
IkReal x14457=((1.0)*(x14459.value));
IkReal x14458=x14432;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14457)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14457)));
IkReal gconst16=(x14456*x14458);
IkReal gconst17=((1.0)*r00*x14458);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14460=gconst16*gconst16;
IkReal x14461=gconst17*gconst17;
IkReal x14462=(r11*sj3);
IkReal x14463=(cj3*r10);
IkReal x14464=((1.0)*cj3);
IkReal x14465=(r10*sj3);
IkReal x14466=(gconst16*gconst17);
IkReal x14467=(r21*x14460);
IkReal x14468=((1.0)*r20*x14461);
CheckValue<IkReal> x14469 = IKatan2WithCheck(IkReal((((gconst16*r22*x14465))+((gconst17*r22*x14462)))),IkReal(((((-1.0)*x14462*x14468))+(((-1.0)*r20*x14465*x14466))+((x14465*x14467))+((r21*x14462*x14466)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14469.valid){
continue;
}
CheckValue<IkReal> x14470=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14463*x14468))+(((-1.0)*r12*r22*x14464))+((cj3*r11*r20*x14466))+(((-1.0)*r11*x14464*x14467))+((r21*x14463*x14466)))),-1);
if(!x14470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14469.value)+(((1.5707963267949)*(x14470.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14471=IKsin(j4);
IkReal x14472=IKcos(j4);
IkReal x14473=(cj2*sj1);
IkReal x14474=(cj1*sj2);
IkReal x14475=(gconst16*r21);
IkReal x14476=(cj3*gconst17);
IkReal x14477=(gconst16*r20);
IkReal x14478=(sj1*sj2);
IkReal x14479=(gconst17*r20);
IkReal x14480=(gconst17*sj3);
IkReal x14481=(gconst16*r10);
IkReal x14482=(cj1*cj2);
IkReal x14483=(gconst16*sj3);
IkReal x14484=((1.0)*x14472);
IkReal x14485=((1.0)*x14471);
IkReal x14486=(gconst16*x14471);
IkReal x14487=(cj3*x14472);
IkReal x14488=(cj3*x14471);
IkReal x14489=(x14473+x14474);
evalcond[0]=(((x14471*x14475))+(((-1.0)*x14479*x14485))+(((-1.0)*r22*x14484)));
evalcond[1]=((((-1.0)*gconst17*r00*x14485))+(((-1.0)*r02*x14484))+((r01*x14486)));
evalcond[2]=((-1.0)+((r11*x14486))+(((-1.0)*gconst17*r10*x14485))+(((-1.0)*r12*x14484)));
evalcond[3]=((((-1.0)*r10*x14476*x14484))+((r11*x14480))+((r12*x14488))+((gconst16*r11*x14487))+((sj3*x14481)));
evalcond[4]=(((r10*x14472*x14480))+(((-1.0)*r11*x14483*x14484))+((cj3*x14481))+((r11*x14476))+(((-1.0)*r12*sj3*x14485)));
evalcond[5]=(((r21*x14480))+((sj3*x14477))+((r22*x14488))+((x14475*x14487))+x14489+(((-1.0)*r20*x14476*x14484)));
evalcond[6]=((((-1.0)*r00*x14476*x14484))+((r02*x14488))+(((-1.0)*x14478))+x14482+((r00*x14483))+((r01*x14480))+((gconst16*r01*x14487)));
evalcond[7]=((((-1.0)*r02*sj3*x14485))+((r01*x14476))+((r00*x14472*x14480))+x14489+((cj3*gconst16*r00))+(((-1.0)*r01*x14483*x14484)));
evalcond[8]=((((-1.0)*sj3*x14475*x14484))+(((-1.0)*x14482))+((r21*x14476))+(((-1.0)*r22*sj3*x14485))+((sj3*x14472*x14479))+x14478+((cj3*x14477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14490=((1.0)*gconst17);
CheckValue<IkReal> x14491=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14490)))),-1);
if(!x14491.valid){
continue;
}
CheckValue<IkReal> x14492 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14490))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14491.value)))+(x14492.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14493=IKsin(j4);
IkReal x14494=IKcos(j4);
IkReal x14495=(cj2*sj1);
IkReal x14496=(cj1*sj2);
IkReal x14497=(gconst16*r21);
IkReal x14498=(cj3*gconst17);
IkReal x14499=(gconst16*r20);
IkReal x14500=(sj1*sj2);
IkReal x14501=(gconst17*r20);
IkReal x14502=(gconst17*sj3);
IkReal x14503=(gconst16*r10);
IkReal x14504=(cj1*cj2);
IkReal x14505=(gconst16*sj3);
IkReal x14506=((1.0)*x14494);
IkReal x14507=((1.0)*x14493);
IkReal x14508=(gconst16*x14493);
IkReal x14509=(cj3*x14494);
IkReal x14510=(cj3*x14493);
IkReal x14511=(x14495+x14496);
evalcond[0]=((((-1.0)*x14501*x14507))+((x14493*x14497))+(((-1.0)*r22*x14506)));
evalcond[1]=((((-1.0)*r02*x14506))+(((-1.0)*gconst17*r00*x14507))+((r01*x14508)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14506))+((r11*x14508))+(((-1.0)*gconst17*r10*x14507)));
evalcond[3]=(((gconst16*r11*x14509))+((r12*x14510))+((sj3*x14503))+((r11*x14502))+(((-1.0)*r10*x14498*x14506)));
evalcond[4]=(((cj3*x14503))+((r11*x14498))+((r10*x14494*x14502))+(((-1.0)*r11*x14505*x14506))+(((-1.0)*r12*sj3*x14507)));
evalcond[5]=(((r22*x14510))+((x14497*x14509))+((sj3*x14499))+((r21*x14502))+(((-1.0)*r20*x14498*x14506))+x14511);
evalcond[6]=((((-1.0)*x14500))+x14504+((gconst16*r01*x14509))+(((-1.0)*r00*x14498*x14506))+((r02*x14510))+((r00*x14505))+((r01*x14502)));
evalcond[7]=((((-1.0)*r01*x14505*x14506))+x14511+((r01*x14498))+((cj3*gconst16*r00))+(((-1.0)*r02*sj3*x14507))+((r00*x14494*x14502)));
evalcond[8]=(((r21*x14498))+(((-1.0)*x14504))+((sj3*x14494*x14501))+x14500+((cj3*x14499))+(((-1.0)*r22*sj3*x14507))+(((-1.0)*sj3*x14497*x14506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14512=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14512.valid){
continue;
}
CheckValue<IkReal> x14513 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14512.value)))+(x14513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14514=IKsin(j4);
IkReal x14515=IKcos(j4);
IkReal x14516=(cj2*sj1);
IkReal x14517=(cj1*sj2);
IkReal x14518=(gconst16*r21);
IkReal x14519=(cj3*gconst17);
IkReal x14520=(gconst16*r20);
IkReal x14521=(sj1*sj2);
IkReal x14522=(gconst17*r20);
IkReal x14523=(gconst17*sj3);
IkReal x14524=(gconst16*r10);
IkReal x14525=(cj1*cj2);
IkReal x14526=(gconst16*sj3);
IkReal x14527=((1.0)*x14515);
IkReal x14528=((1.0)*x14514);
IkReal x14529=(gconst16*x14514);
IkReal x14530=(cj3*x14515);
IkReal x14531=(cj3*x14514);
IkReal x14532=(x14516+x14517);
evalcond[0]=((((-1.0)*x14522*x14528))+(((-1.0)*r22*x14527))+((x14514*x14518)));
evalcond[1]=((((-1.0)*gconst17*r00*x14528))+((r01*x14529))+(((-1.0)*r02*x14527)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14528))+((r11*x14529))+(((-1.0)*r12*x14527)));
evalcond[3]=(((r12*x14531))+((sj3*x14524))+((r11*x14523))+(((-1.0)*r10*x14519*x14527))+((gconst16*r11*x14530)));
evalcond[4]=((((-1.0)*r12*sj3*x14528))+((r10*x14515*x14523))+(((-1.0)*r11*x14526*x14527))+((r11*x14519))+((cj3*x14524)));
evalcond[5]=(((sj3*x14520))+((r22*x14531))+((x14518*x14530))+x14532+(((-1.0)*r20*x14519*x14527))+((r21*x14523)));
evalcond[6]=((((-1.0)*x14521))+(((-1.0)*r00*x14519*x14527))+((r02*x14531))+((r01*x14523))+((r00*x14526))+x14525+((gconst16*r01*x14530)));
evalcond[7]=(((r01*x14519))+x14532+(((-1.0)*r02*sj3*x14528))+(((-1.0)*r01*x14526*x14527))+((cj3*gconst16*r00))+((r00*x14515*x14523)));
evalcond[8]=((((-1.0)*x14525))+((cj3*x14520))+(((-1.0)*sj3*x14518*x14527))+((sj3*x14515*x14522))+x14521+(((-1.0)*r22*sj3*x14528))+((r21*x14519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14533=((-1.0)*r01);
CheckValue<IkReal> x14536 = IKatan2WithCheck(IkReal(x14533),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14536.valid){
continue;
}
IkReal x14534=((1.0)*(x14536.value));
IkReal x14535=x14432;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14534)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14534)));
IkReal gconst16=(x14533*x14535);
IkReal gconst17=((1.0)*r00*x14535);
IkReal x14537=r02*r02;
IkReal x14538=(r12*sj0);
IkReal x14539=((1.0)*cj0);
IkReal x14540=x14432;
j4eval[0]=((IKabs(((((-1.0)*x14539*x14540))+((r02*x14538*x14540))+((cj0*x14537*x14540)))))+(IKabs(((((-1.0)*x14538))+(((-1.0)*r02*x14539))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14541=((1.0)*r12);
IkReal x14542=(sj1*sj2);
IkReal x14543=(cj1*cj2);
IkReal x14544=((1.0)*sj3);
IkReal x14545=(gconst16*r21);
IkReal x14546=(cj3*gconst16*r20);
IkReal x14547=(gconst17*r20*sj3);
IkReal x14548=(cj3*gconst17*r21);
CheckValue<IkReal> x14549=IKPowWithIntegerCheck((((gconst16*r11*x14547))+(((-1.0)*gconst16*r11*x14544*x14545))+((gconst17*r10*sj3*x14545))+(((-1.0)*r10*r20*x14544*(gconst17*gconst17)))),-1);
if(!x14549.valid){
continue;
}
CheckValue<IkReal> x14550=IKPowWithIntegerCheck((x14547+(((-1.0)*x14544*x14545))),-1);
if(!x14550.valid){
continue;
}
if( IKabs(((x14549.value)*((((r12*x14543))+((cj0*sj3*x14545))+(((-1.0)*cj0*gconst17*r20*x14544))+(((-1.0)*x14541*x14546))+(((-1.0)*x14541*x14542))+(((-1.0)*x14541*x14548)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14550.value)*(((((-1.0)*x14546))+(((-1.0)*x14542))+(((-1.0)*x14548))+x14543)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14549.value)*((((r12*x14543))+((cj0*sj3*x14545))+(((-1.0)*cj0*gconst17*r20*x14544))+(((-1.0)*x14541*x14546))+(((-1.0)*x14541*x14542))+(((-1.0)*x14541*x14548))))))+IKsqr(((x14550.value)*(((((-1.0)*x14546))+(((-1.0)*x14542))+(((-1.0)*x14548))+x14543))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14549.value)*((((r12*x14543))+((cj0*sj3*x14545))+(((-1.0)*cj0*gconst17*r20*x14544))+(((-1.0)*x14541*x14546))+(((-1.0)*x14541*x14542))+(((-1.0)*x14541*x14548))))), ((x14550.value)*(((((-1.0)*x14546))+(((-1.0)*x14542))+(((-1.0)*x14548))+x14543))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14551=IKsin(j4);
IkReal x14552=IKcos(j4);
IkReal x14553=((1.0)*gconst17);
IkReal x14554=(gconst17*sj3);
IkReal x14555=(gconst16*r21);
IkReal x14556=(cj3*gconst17);
IkReal x14557=(sj1*sj2);
IkReal x14558=((1.0)*sj0);
IkReal x14559=(gconst16*sj3);
IkReal x14560=(cj3*gconst16);
IkReal x14561=(cj2*sj1);
IkReal x14562=((1.0)*cj0);
IkReal x14563=((1.0)*sj3);
IkReal x14564=(cj1*sj2);
IkReal x14565=(cj3*x14552);
IkReal x14566=(gconst16*x14551);
IkReal x14567=((1.0)*x14552);
IkReal x14568=((1.0)*cj1*cj2);
IkReal x14569=(r02*x14551);
IkReal x14570=(r12*x14551);
evalcond[0]=((((-1.0)*r20*x14551*x14553))+((x14551*x14555)));
evalcond[1]=(cj0+(((-1.0)*r12*x14567))+(((-1.0)*r10*x14551*x14553))+((r11*x14566)));
evalcond[2]=(((r01*x14566))+(((-1.0)*r00*x14551*x14553))+(((-1.0)*r02*x14567))+(((-1.0)*x14558)));
evalcond[3]=(((r20*x14559))+(((-1.0)*r20*x14553*x14565))+x14564+x14561+((x14555*x14565))+((r21*x14554)));
evalcond[4]=(((r20*x14560))+(((-1.0)*x14568))+((r20*x14552*x14554))+x14557+(((-1.0)*x14552*x14555*x14563))+((r21*x14556)));
evalcond[5]=(((r01*x14552*x14560))+(((-1.0)*cj1*cj2*x14562))+((cj3*x14569))+((r01*x14554))+((r00*x14559))+((cj0*x14557))+(((-1.0)*r00*x14553*x14565)));
evalcond[6]=((((-1.0)*r10*x14553*x14565))+(((-1.0)*cj1*cj2*x14558))+((r11*x14552*x14560))+((sj0*x14557))+((r10*x14559))+((cj3*x14570))+((r11*x14554)));
evalcond[7]=((((-1.0)*x14563*x14569))+(((-1.0)*x14562*x14564))+(((-1.0)*r01*x14559*x14567))+(((-1.0)*x14561*x14562))+((r00*x14552*x14554))+((r01*x14556))+((r00*x14560)));
evalcond[8]=((((-1.0)*x14563*x14570))+(((-1.0)*r11*x14559*x14567))+(((-1.0)*x14558*x14564))+(((-1.0)*x14558*x14561))+((r10*x14560))+((r11*x14556))+((r10*x14552*x14554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14571=((1.0)*sj0);
IkReal x14572=((1.0)*cj0);
CheckValue<IkReal> x14573=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14573.valid){
continue;
}
CheckValue<IkReal> x14574 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14572))+(((-1.0)*r12*x14571)))),IkReal(((((-1.0)*gconst16*r11*x14571))+(((-1.0)*gconst16*r01*x14572))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14573.value)))+(x14574.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14575=IKsin(j4);
IkReal x14576=IKcos(j4);
IkReal x14577=((1.0)*gconst17);
IkReal x14578=(gconst17*sj3);
IkReal x14579=(gconst16*r21);
IkReal x14580=(cj3*gconst17);
IkReal x14581=(sj1*sj2);
IkReal x14582=((1.0)*sj0);
IkReal x14583=(gconst16*sj3);
IkReal x14584=(cj3*gconst16);
IkReal x14585=(cj2*sj1);
IkReal x14586=((1.0)*cj0);
IkReal x14587=((1.0)*sj3);
IkReal x14588=(cj1*sj2);
IkReal x14589=(cj3*x14576);
IkReal x14590=(gconst16*x14575);
IkReal x14591=((1.0)*x14576);
IkReal x14592=((1.0)*cj1*cj2);
IkReal x14593=(r02*x14575);
IkReal x14594=(r12*x14575);
evalcond[0]=((((-1.0)*r20*x14575*x14577))+((x14575*x14579)));
evalcond[1]=(cj0+(((-1.0)*r12*x14591))+((r11*x14590))+(((-1.0)*r10*x14575*x14577)));
evalcond[2]=((((-1.0)*r02*x14591))+(((-1.0)*x14582))+(((-1.0)*r00*x14575*x14577))+((r01*x14590)));
evalcond[3]=(((r21*x14578))+((r20*x14583))+(((-1.0)*r20*x14577*x14589))+x14588+x14585+((x14579*x14589)));
evalcond[4]=(((r20*x14584))+(((-1.0)*x14592))+(((-1.0)*x14576*x14579*x14587))+((r21*x14580))+x14581+((r20*x14576*x14578)));
evalcond[5]=(((cj3*x14593))+((r01*x14576*x14584))+(((-1.0)*r00*x14577*x14589))+(((-1.0)*cj1*cj2*x14586))+((r00*x14583))+((cj0*x14581))+((r01*x14578)));
evalcond[6]=(((cj3*x14594))+((sj0*x14581))+(((-1.0)*cj1*cj2*x14582))+((r10*x14583))+((r11*x14578))+((r11*x14576*x14584))+(((-1.0)*r10*x14577*x14589)));
evalcond[7]=(((r00*x14576*x14578))+(((-1.0)*x14587*x14593))+(((-1.0)*x14585*x14586))+(((-1.0)*r01*x14583*x14591))+((r00*x14584))+((r01*x14580))+(((-1.0)*x14586*x14588)));
evalcond[8]=((((-1.0)*x14587*x14594))+(((-1.0)*r11*x14583*x14591))+((r10*x14584))+((r10*x14576*x14578))+((r11*x14580))+(((-1.0)*x14582*x14588))+(((-1.0)*x14582*x14585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14595=((1.0)*sj0);
IkReal x14596=((1.0)*cj0);
CheckValue<IkReal> x14597=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14597.valid){
continue;
}
CheckValue<IkReal> x14598 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14596))+(((-1.0)*r12*x14595)))),IkReal(((((-1.0)*gconst16*r01*x14596))+(((-1.0)*gconst16*r11*x14595))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14597.value)))+(x14598.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14599=IKsin(j4);
IkReal x14600=IKcos(j4);
IkReal x14601=(cj3*gconst17);
IkReal x14602=(gconst16*r21);
IkReal x14603=(gconst17*sj3);
IkReal x14604=(gconst16*r20);
IkReal x14605=(sj1*sj2);
IkReal x14606=(gconst16*r10);
IkReal x14607=(cj2*sj1);
IkReal x14608=(gconst16*sj3);
IkReal x14609=((1.0)*cj0);
IkReal x14610=((1.0)*sj0);
IkReal x14611=(cj1*sj2);
IkReal x14612=((1.0)*x14600);
IkReal x14613=(gconst16*x14599);
IkReal x14614=(cj3*x14600);
IkReal x14615=(cj3*x14599);
IkReal x14616=((1.0)*cj1*cj2);
IkReal x14617=((1.0)*gconst17*x14599);
IkReal x14618=((1.0)*sj3*x14599);
evalcond[0]=((((-1.0)*r20*x14617))+(((-1.0)*r22*x14612))+((x14599*x14602)));
evalcond[1]=(cj0+(((-1.0)*r10*x14617))+(((-1.0)*r12*x14612))+((r11*x14613)));
evalcond[2]=(((r01*x14613))+(((-1.0)*r00*x14617))+(((-1.0)*r02*x14612))+(((-1.0)*x14610)));
evalcond[3]=(((r21*x14603))+((x14602*x14614))+((r22*x14615))+x14611+x14607+(((-1.0)*r20*x14601*x14612))+((sj3*x14604)));
evalcond[4]=((((-1.0)*r22*x14618))+((r21*x14601))+((r20*x14600*x14603))+((cj3*x14604))+x14605+(((-1.0)*sj3*x14602*x14612))+(((-1.0)*x14616)));
evalcond[5]=(((gconst16*r01*x14614))+((r02*x14615))+(((-1.0)*r00*x14601*x14612))+((cj0*x14605))+((r01*x14603))+(((-1.0)*cj1*cj2*x14609))+((r00*x14608)));
evalcond[6]=(((gconst16*r11*x14614))+((sj0*x14605))+(((-1.0)*cj1*cj2*x14610))+((r11*x14603))+((sj3*x14606))+(((-1.0)*r10*x14601*x14612))+((r12*x14615)));
evalcond[7]=((((-1.0)*r01*x14608*x14612))+((r00*x14600*x14603))+((r01*x14601))+(((-1.0)*x14607*x14609))+(((-1.0)*r02*x14618))+((cj3*gconst16*r00))+(((-1.0)*x14609*x14611)));
evalcond[8]=((((-1.0)*r11*x14608*x14612))+(((-1.0)*r12*x14618))+(((-1.0)*x14607*x14610))+((cj3*x14606))+((r11*x14601))+(((-1.0)*x14610*x14611))+((r10*x14600*x14603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14619=((1.0)*gconst17);
CheckValue<IkReal> x14620=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14619)))),-1);
if(!x14620.valid){
continue;
}
CheckValue<IkReal> x14621 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14620.value)))+(x14621.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14622=IKsin(j4);
IkReal x14623=IKcos(j4);
IkReal x14624=(cj3*gconst17);
IkReal x14625=(gconst16*r21);
IkReal x14626=(gconst17*sj3);
IkReal x14627=(gconst16*r20);
IkReal x14628=(sj1*sj2);
IkReal x14629=(gconst16*r10);
IkReal x14630=(cj2*sj1);
IkReal x14631=(gconst16*sj3);
IkReal x14632=((1.0)*cj0);
IkReal x14633=((1.0)*sj0);
IkReal x14634=(cj1*sj2);
IkReal x14635=((1.0)*x14623);
IkReal x14636=(gconst16*x14622);
IkReal x14637=(cj3*x14623);
IkReal x14638=(cj3*x14622);
IkReal x14639=((1.0)*cj1*cj2);
IkReal x14640=((1.0)*gconst17*x14622);
IkReal x14641=((1.0)*sj3*x14622);
evalcond[0]=((((-1.0)*r22*x14635))+((x14622*x14625))+(((-1.0)*r20*x14640)));
evalcond[1]=(cj0+(((-1.0)*r10*x14640))+((r11*x14636))+(((-1.0)*r12*x14635)));
evalcond[2]=((((-1.0)*x14633))+((r01*x14636))+(((-1.0)*r00*x14640))+(((-1.0)*r02*x14635)));
evalcond[3]=(((sj3*x14627))+((r22*x14638))+((r21*x14626))+(((-1.0)*r20*x14624*x14635))+((x14625*x14637))+x14630+x14634);
evalcond[4]=(((r21*x14624))+(((-1.0)*r22*x14641))+((cj3*x14627))+(((-1.0)*x14639))+((r20*x14623*x14626))+x14628+(((-1.0)*sj3*x14625*x14635)));
evalcond[5]=((((-1.0)*r00*x14624*x14635))+((r02*x14638))+((gconst16*r01*x14637))+(((-1.0)*cj1*cj2*x14632))+((r00*x14631))+((cj0*x14628))+((r01*x14626)));
evalcond[6]=(((sj3*x14629))+((gconst16*r11*x14637))+((r11*x14626))+((r12*x14638))+(((-1.0)*cj1*cj2*x14633))+(((-1.0)*r10*x14624*x14635))+((sj0*x14628)));
evalcond[7]=(((r00*x14623*x14626))+(((-1.0)*r02*x14641))+(((-1.0)*x14632*x14634))+(((-1.0)*x14630*x14632))+((r01*x14624))+(((-1.0)*r01*x14631*x14635))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14633*x14634))+(((-1.0)*r11*x14631*x14635))+(((-1.0)*r12*x14641))+((cj3*x14629))+((r11*x14624))+((r10*x14623*x14626))+(((-1.0)*x14630*x14633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14642=((1.0)*gconst17);
CheckValue<IkReal> x14643=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14642)))),-1);
if(!x14643.valid){
continue;
}
CheckValue<IkReal> x14644 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14642))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14643.value)))+(x14644.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14645=IKsin(j4);
IkReal x14646=IKcos(j4);
IkReal x14647=(cj3*gconst17);
IkReal x14648=(gconst16*r21);
IkReal x14649=(gconst17*sj3);
IkReal x14650=(gconst16*r20);
IkReal x14651=(sj1*sj2);
IkReal x14652=(gconst16*r10);
IkReal x14653=(cj2*sj1);
IkReal x14654=(gconst16*sj3);
IkReal x14655=((1.0)*cj0);
IkReal x14656=((1.0)*sj0);
IkReal x14657=(cj1*sj2);
IkReal x14658=((1.0)*x14646);
IkReal x14659=(gconst16*x14645);
IkReal x14660=(cj3*x14646);
IkReal x14661=(cj3*x14645);
IkReal x14662=((1.0)*cj1*cj2);
IkReal x14663=((1.0)*gconst17*x14645);
IkReal x14664=((1.0)*sj3*x14645);
evalcond[0]=((((-1.0)*r22*x14658))+((x14645*x14648))+(((-1.0)*r20*x14663)));
evalcond[1]=(cj0+(((-1.0)*r12*x14658))+(((-1.0)*r10*x14663))+((r11*x14659)));
evalcond[2]=(((r01*x14659))+(((-1.0)*r02*x14658))+(((-1.0)*r00*x14663))+(((-1.0)*x14656)));
evalcond[3]=(((x14648*x14660))+(((-1.0)*r20*x14647*x14658))+((sj3*x14650))+((r22*x14661))+((r21*x14649))+x14653+x14657);
evalcond[4]=((((-1.0)*sj3*x14648*x14658))+(((-1.0)*r22*x14664))+((r20*x14646*x14649))+((r21*x14647))+x14651+((cj3*x14650))+(((-1.0)*x14662)));
evalcond[5]=(((r02*x14661))+((gconst16*r01*x14660))+((cj0*x14651))+((r01*x14649))+((r00*x14654))+(((-1.0)*cj1*cj2*x14655))+(((-1.0)*r00*x14647*x14658)));
evalcond[6]=(((r11*x14649))+((gconst16*r11*x14660))+((sj0*x14651))+((sj3*x14652))+(((-1.0)*cj1*cj2*x14656))+(((-1.0)*r10*x14647*x14658))+((r12*x14661)));
evalcond[7]=((((-1.0)*r01*x14654*x14658))+(((-1.0)*x14655*x14657))+((r01*x14647))+(((-1.0)*x14653*x14655))+((r00*x14646*x14649))+(((-1.0)*r02*x14664))+((cj3*gconst16*r00)));
evalcond[8]=(((r11*x14647))+(((-1.0)*x14656*x14657))+(((-1.0)*x14653*x14656))+(((-1.0)*r12*x14664))+((r10*x14646*x14649))+((cj3*x14652))+(((-1.0)*r11*x14654*x14658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14665=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14665;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14665);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14666=((1.0)*cj5);
IkReal x14667=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14666)));
j4eval[0]=x14667;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14666)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14667);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14668=cj5*cj5;
IkReal x14669=(cj3*r01);
IkReal x14670=(cj5*sj5);
IkReal x14671=((1.0)*cj3);
IkReal x14672=(((cj3*r00*r21*x14670))+(((-1.0)*r00*r20*x14668*x14671))+(((-1.0)*r21*x14669))+(((-1.0)*r02*r22*x14671))+((r20*x14669*x14670))+((r21*x14668*x14669)));
j4eval[0]=x14672;
j4eval[1]=IKsign(x14672);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14673=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14673;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14673);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14674=((1.0)*cj5);
IkReal x14675=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14674)));
j4eval[0]=x14675;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14674))))));
j4eval[2]=IKsign(x14675);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14676=cj5*cj5;
IkReal x14677=r01*r01;
IkReal x14678=(r01*sj5);
IkReal x14679=(cj5*r00);
IkReal x14680=((((-1.0)*(r02*r02)))+(((2.0)*x14678*x14679))+(((-1.0)*x14677))+((x14676*x14677))+(((-1.0)*x14676*(r00*r00))));
j4eval[0]=x14680;
j4eval[1]=IKsign(x14680);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14678))+x14679))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14681=cj5*cj5;
IkReal x14682=r01*r01;
IkReal x14683=(r01*sj5);
IkReal x14684=(cj5*r00);
CheckValue<IkReal> x14685 = IKatan2WithCheck(IkReal((x14684+(((-1.0)*x14683)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14685.valid){
continue;
}
CheckValue<IkReal> x14686=IKPowWithIntegerCheck(IKsign((((x14681*x14682))+(((-1.0)*(r02*r02)))+(((-1.0)*x14681*(r00*r00)))+(((2.0)*x14683*x14684))+(((-1.0)*x14682)))),-1);
if(!x14686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14685.value)+(((1.5707963267949)*(x14686.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14687=IKsin(j4);
IkReal x14688=IKcos(j4);
IkReal x14689=(cj5*r10);
IkReal x14690=(r01*sj5);
IkReal x14691=((1.0)*cj2);
IkReal x14692=(cj5*r00);
IkReal x14693=(cj5*r20);
IkReal x14694=((1.0)*x14688);
IkReal x14695=((1.0)*x14687);
IkReal x14696=(sj5*x14687);
evalcond[0]=((((-1.0)*r22*x14694))+(((-1.0)*x14693*x14695))+((r21*x14696)));
evalcond[1]=(((r11*x14696))+(((-1.0)*r12*x14694))+(((-1.0)*x14689*x14695)));
evalcond[2]=((((-1.0)*r02*x14695))+((x14688*x14692))+(((-1.0)*x14690*x14694)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14694))+((x14687*x14690))+(((-1.0)*x14692*x14695)));
evalcond[4]=((((-1.0)*r21*sj5*x14694))+(((-1.0)*cj1*x14691))+((sj1*sj2))+((x14688*x14693))+(((-1.0)*r22*x14695)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x14688*x14689))+(((-1.0)*r11*sj5*x14694))+(((-1.0)*sj1*x14691))+(((-1.0)*r12*x14695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14697=((1.0)*cj5);
CheckValue<IkReal> x14698 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14698.valid){
continue;
}
CheckValue<IkReal> x14699=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14697)))),-1);
if(!x14699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14698.value)+(((1.5707963267949)*(x14699.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14700=IKsin(j4);
IkReal x14701=IKcos(j4);
IkReal x14702=(cj5*r10);
IkReal x14703=(r01*sj5);
IkReal x14704=((1.0)*cj2);
IkReal x14705=(cj5*r00);
IkReal x14706=(cj5*r20);
IkReal x14707=((1.0)*x14701);
IkReal x14708=((1.0)*x14700);
IkReal x14709=(sj5*x14700);
evalcond[0]=((((-1.0)*x14706*x14708))+((r21*x14709))+(((-1.0)*r22*x14707)));
evalcond[1]=((((-1.0)*r12*x14707))+((r11*x14709))+(((-1.0)*x14702*x14708)));
evalcond[2]=(((x14701*x14705))+(((-1.0)*x14703*x14707))+(((-1.0)*r02*x14708)));
evalcond[3]=((-1.0)+(((-1.0)*x14705*x14708))+((x14700*x14703))+(((-1.0)*r02*x14707)));
evalcond[4]=(((x14701*x14706))+((sj1*sj2))+(((-1.0)*cj1*x14704))+(((-1.0)*r21*sj5*x14707))+(((-1.0)*r22*x14708)));
evalcond[5]=(((x14701*x14702))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14704))+(((-1.0)*r12*x14708))+(((-1.0)*r11*sj5*x14707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14710=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14710.valid){
continue;
}
CheckValue<IkReal> x14711 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14710.value)))+(x14711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14712=IKsin(j4);
IkReal x14713=IKcos(j4);
IkReal x14714=(cj5*r10);
IkReal x14715=(r01*sj5);
IkReal x14716=((1.0)*cj2);
IkReal x14717=(cj5*r00);
IkReal x14718=(cj5*r20);
IkReal x14719=((1.0)*x14713);
IkReal x14720=((1.0)*x14712);
IkReal x14721=(sj5*x14712);
evalcond[0]=(((r21*x14721))+(((-1.0)*x14718*x14720))+(((-1.0)*r22*x14719)));
evalcond[1]=(((r11*x14721))+(((-1.0)*x14714*x14720))+(((-1.0)*r12*x14719)));
evalcond[2]=((((-1.0)*x14715*x14719))+((x14713*x14717))+(((-1.0)*r02*x14720)));
evalcond[3]=((-1.0)+(((-1.0)*x14717*x14720))+(((-1.0)*r02*x14719))+((x14712*x14715)));
evalcond[4]=(((sj1*sj2))+((x14713*x14718))+(((-1.0)*r22*x14720))+(((-1.0)*cj1*x14716))+(((-1.0)*r21*sj5*x14719)));
evalcond[5]=((((-1.0)*sj1*x14716))+(((-1.0)*r12*x14720))+(((-1.0)*r11*sj5*x14719))+(((-1.0)*cj1*sj2))+((x14713*x14714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14722=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14722;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14722);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14723=((1.0)*cj5);
IkReal x14724=((((-1.0)*r11*x14723))+(((-1.0)*r10*sj5)));
j4eval[0]=x14724;
j4eval[1]=((IKabs(((((-1.0)*r20*x14723))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14724);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14725=cj5*cj5;
IkReal x14726=r01*r01;
IkReal x14727=(cj5*r00);
IkReal x14728=(r01*sj5);
IkReal x14729=((((-2.0)*x14727*x14728))+x14726+(r02*r02)+(((-1.0)*x14725*x14726))+((x14725*(r00*r00))));
j4eval[0]=x14729;
j4eval[1]=IKsign(x14729);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14727))+x14728))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14730=cj5*cj5;
IkReal x14731=r01*r01;
IkReal x14732=(r01*sj5);
IkReal x14733=(cj5*r00);
CheckValue<IkReal> x14734 = IKatan2WithCheck(IkReal(((((-1.0)*x14733))+x14732)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14734.valid){
continue;
}
CheckValue<IkReal> x14735=IKPowWithIntegerCheck(IKsign((((x14730*(r00*r00)))+(((-1.0)*x14730*x14731))+x14731+(((-2.0)*x14732*x14733))+(r02*r02))),-1);
if(!x14735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14734.value)+(((1.5707963267949)*(x14735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14736=IKcos(j4);
IkReal x14737=IKsin(j4);
IkReal x14738=(cj5*r00);
IkReal x14739=(cj5*r10);
IkReal x14740=(r21*sj5);
IkReal x14741=((1.0)*cj2);
IkReal x14742=(cj5*r20);
IkReal x14743=((1.0)*x14736);
IkReal x14744=((1.0)*x14737);
IkReal x14745=(sj5*x14737);
IkReal x14746=(sj5*x14736);
evalcond[0]=(((r02*x14737))+(((-1.0)*x14738*x14743))+((r01*x14746)));
evalcond[1]=((((-1.0)*x14742*x14744))+((x14737*x14740))+(((-1.0)*r22*x14743)));
evalcond[2]=(((r11*x14745))+(((-1.0)*x14739*x14744))+(((-1.0)*r12*x14743)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14743))+(((-1.0)*x14738*x14744))+((r01*x14745)));
evalcond[4]=(((x14736*x14740))+(((-1.0)*x14742*x14743))+((sj1*sj2))+((r22*x14737))+(((-1.0)*cj1*x14741)));
evalcond[5]=(((r11*x14746))+(((-1.0)*x14739*x14743))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14741))+((r12*x14737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14747=((1.0)*cj5);
CheckValue<IkReal> x14748 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14747)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14748.valid){
continue;
}
CheckValue<IkReal> x14749=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14747)))),-1);
if(!x14749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14748.value)+(((1.5707963267949)*(x14749.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14750=IKcos(j4);
IkReal x14751=IKsin(j4);
IkReal x14752=(cj5*r00);
IkReal x14753=(cj5*r10);
IkReal x14754=(r21*sj5);
IkReal x14755=((1.0)*cj2);
IkReal x14756=(cj5*r20);
IkReal x14757=((1.0)*x14750);
IkReal x14758=((1.0)*x14751);
IkReal x14759=(sj5*x14751);
IkReal x14760=(sj5*x14750);
evalcond[0]=(((r01*x14760))+((r02*x14751))+(((-1.0)*x14752*x14757)));
evalcond[1]=((((-1.0)*x14756*x14758))+(((-1.0)*r22*x14757))+((x14751*x14754)));
evalcond[2]=((((-1.0)*x14753*x14758))+(((-1.0)*r12*x14757))+((r11*x14759)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14757))+(((-1.0)*x14752*x14758))+((r01*x14759)));
evalcond[4]=((((-1.0)*x14756*x14757))+(((-1.0)*cj1*x14755))+((sj1*sj2))+((r22*x14751))+((x14750*x14754)));
evalcond[5]=((((-1.0)*x14753*x14757))+(((-1.0)*sj1*x14755))+(((-1.0)*cj1*sj2))+((r11*x14760))+((r12*x14751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14761=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14761.valid){
continue;
}
CheckValue<IkReal> x14762 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14761.value)))+(x14762.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14763=IKcos(j4);
IkReal x14764=IKsin(j4);
IkReal x14765=(cj5*r00);
IkReal x14766=(cj5*r10);
IkReal x14767=(r21*sj5);
IkReal x14768=((1.0)*cj2);
IkReal x14769=(cj5*r20);
IkReal x14770=((1.0)*x14763);
IkReal x14771=((1.0)*x14764);
IkReal x14772=(sj5*x14764);
IkReal x14773=(sj5*x14763);
evalcond[0]=((((-1.0)*x14765*x14770))+((r01*x14773))+((r02*x14764)));
evalcond[1]=(((x14764*x14767))+(((-1.0)*r22*x14770))+(((-1.0)*x14769*x14771)));
evalcond[2]=(((r11*x14772))+(((-1.0)*x14766*x14771))+(((-1.0)*r12*x14770)));
evalcond[3]=((-1.0)+(((-1.0)*x14765*x14771))+(((-1.0)*r02*x14770))+((r01*x14772)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x14769*x14770))+(((-1.0)*cj1*x14768))+((r22*x14764))+((x14763*x14767)));
evalcond[5]=((((-1.0)*sj1*x14768))+((r11*x14773))+(((-1.0)*cj1*sj2))+((r12*x14764))+(((-1.0)*x14766*x14770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14775 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14775)==0){
continue;
}
IkReal x14774=pow(x14775,-0.5);
CheckValue<IkReal> x14776 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14776.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14776.value));
IkReal gconst49=((-1.0)*r21*x14774);
IkReal gconst50=(r20*x14774);
CheckValue<IkReal> x14777 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14777.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14777.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14780 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14780.valid){
continue;
}
IkReal x14778=((-1.0)*(x14780.value));
IkReal x14779=x14774;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14778;
IkReal gconst48=x14778;
IkReal gconst49=((-1.0)*r21*x14779);
IkReal gconst50=(r20*x14779);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14783 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14783.valid){
continue;
}
IkReal x14781=((-1.0)*(x14783.value));
IkReal x14782=x14774;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14781;
IkReal gconst48=x14781;
IkReal gconst49=((-1.0)*r21*x14782);
IkReal gconst50=(r20*x14782);
CheckValue<IkReal> x14791=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14791.valid){
continue;
}
IkReal x14784=x14791.value;
IkReal x14785=(sj3*x14784);
IkReal x14786=(r11*x14785);
IkReal x14787=(r00*x14785);
IkReal x14788=(r01*x14785);
IkReal x14789=(r10*x14785);
IkReal x14790=(r20*r21*x14785);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x14786*(r21*r21)))+((r10*x14787*(r20*r20)))+((r00*r20*r21*x14786))+((r10*r20*r21*x14788))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14792=gconst49*gconst49;
IkReal x14793=gconst50*gconst50;
IkReal x14794=((1.0)*cj3);
IkReal x14795=(gconst50*r01);
IkReal x14796=(gconst49*r10);
IkReal x14797=(r12*sj3);
IkReal x14798=(gconst49*r00);
IkReal x14799=(r00*sj3);
IkReal x14800=(r11*x14792);
IkReal x14801=(r10*x14793);
CheckValue<IkReal> x14802 = IKatan2WithCheck(IkReal((((x14797*x14798))+((x14795*x14797)))),IkReal(((((-1.0)*gconst50*x14796*x14799))+((gconst49*r11*sj3*x14795))+(((-1.0)*r01*sj3*x14801))+((x14799*x14800)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14802.valid){
continue;
}
CheckValue<IkReal> x14803=IKPowWithIntegerCheck(IKsign((((cj3*gconst50*r11*x14798))+((cj3*x14795*x14796))+(((-1.0)*r02*r12*x14794))+(((-1.0)*r01*x14794*x14800))+(((-1.0)*r00*x14794*x14801)))),-1);
if(!x14803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14802.value)+(((1.5707963267949)*(x14803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14804=IKsin(j4);
IkReal x14805=IKcos(j4);
IkReal x14806=(sj1*sj2);
IkReal x14807=(gconst50*r20);
IkReal x14808=(gconst50*sj3);
IkReal x14809=(cj3*r01);
IkReal x14810=(gconst50*r10);
IkReal x14811=(gconst49*sj3);
IkReal x14812=((1.0)*cj2);
IkReal x14813=(cj1*sj2);
IkReal x14814=(cj3*r11);
IkReal x14815=(gconst50*r00);
IkReal x14816=(cj3*r21);
IkReal x14817=(cj3*gconst49);
IkReal x14818=(cj1*x14812);
IkReal x14819=((1.0)*x14805);
IkReal x14820=((1.0)*x14804);
IkReal x14821=(gconst49*x14804);
IkReal x14822=(gconst49*x14805);
IkReal x14823=(cj3*x14804);
evalcond[0]=(((r21*x14821))+(((-1.0)*r22*x14819))+(((-1.0)*x14807*x14820)));
evalcond[1]=((((-1.0)*r12*x14819))+(((-1.0)*x14810*x14820))+((r11*x14821)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14819))+(((-1.0)*x14815*x14820))+((r01*x14821)));
evalcond[3]=(((r02*x14823))+((x14809*x14822))+((r01*x14808))+((r00*x14811))+(((-1.0)*cj3*x14815*x14819)));
evalcond[4]=((((-1.0)*r01*x14811*x14819))+(((-1.0)*r02*sj3*x14820))+((r00*x14817))+((r00*x14805*x14808))+((gconst50*x14809)));
evalcond[5]=(((cj2*sj1))+((r21*x14808))+x14813+((r22*x14823))+((x14816*x14822))+(((-1.0)*cj3*x14807*x14819))+((r20*x14811)));
evalcond[6]=(((x14814*x14822))+(((-1.0)*cj3*x14810*x14819))+x14806+((r10*x14811))+(((-1.0)*x14818))+((r12*x14823))+((r11*x14808)));
evalcond[7]=((((-1.0)*r21*x14811*x14819))+x14806+(((-1.0)*x14818))+(((-1.0)*r22*sj3*x14820))+((sj3*x14805*x14807))+((r20*x14817))+((gconst50*x14816)));
evalcond[8]=((((-1.0)*r11*x14811*x14819))+((r10*x14817))+(((-1.0)*r12*sj3*x14820))+((r10*x14805*x14808))+(((-1.0)*x14813))+(((-1.0)*sj1*x14812))+((gconst50*x14814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14824=gconst49*gconst49;
IkReal x14825=gconst50*gconst50;
IkReal x14826=(cj3*r12);
IkReal x14827=(gconst49*r00);
IkReal x14828=(r01*r11);
IkReal x14829=(r00*r11);
IkReal x14830=(cj3*gconst50);
IkReal x14831=((1.0)*r01*r10);
IkReal x14832=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14833=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x14831*x14832))+((r00*r10*sj3*x14825))+(((-1.0)*gconst50*r11*sj3*x14827))+((sj3*x14824*x14828)))),-1);
if(!x14833.valid){
continue;
}
CheckValue<IkReal> x14834 = IKatan2WithCheck(IkReal((((gconst50*r01*x14826))+((x14826*x14827)))),IkReal((((cj3*x14824*x14829))+(((-1.0)*r10*x14827*x14830))+((gconst49*x14828*x14830))+(((-1.0)*cj3*x14825*x14831)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14833.value)))+(x14834.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14835=IKsin(j4);
IkReal x14836=IKcos(j4);
IkReal x14837=(sj1*sj2);
IkReal x14838=(gconst50*r20);
IkReal x14839=(gconst50*sj3);
IkReal x14840=(cj3*r01);
IkReal x14841=(gconst50*r10);
IkReal x14842=(gconst49*sj3);
IkReal x14843=((1.0)*cj2);
IkReal x14844=(cj1*sj2);
IkReal x14845=(cj3*r11);
IkReal x14846=(gconst50*r00);
IkReal x14847=(cj3*r21);
IkReal x14848=(cj3*gconst49);
IkReal x14849=(cj1*x14843);
IkReal x14850=((1.0)*x14836);
IkReal x14851=((1.0)*x14835);
IkReal x14852=(gconst49*x14835);
IkReal x14853=(gconst49*x14836);
IkReal x14854=(cj3*x14835);
evalcond[0]=(((r21*x14852))+(((-1.0)*x14838*x14851))+(((-1.0)*r22*x14850)));
evalcond[1]=(((r11*x14852))+(((-1.0)*r12*x14850))+(((-1.0)*x14841*x14851)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14850))+(((-1.0)*x14846*x14851))+((r01*x14852)));
evalcond[3]=(((x14840*x14853))+((r02*x14854))+((r01*x14839))+((r00*x14842))+(((-1.0)*cj3*x14846*x14850)));
evalcond[4]=((((-1.0)*r02*sj3*x14851))+(((-1.0)*r01*x14842*x14850))+((r00*x14836*x14839))+((gconst50*x14840))+((r00*x14848)));
evalcond[5]=(((r20*x14842))+((cj2*sj1))+x14844+(((-1.0)*cj3*x14838*x14850))+((r21*x14839))+((x14847*x14853))+((r22*x14854)));
evalcond[6]=(((x14845*x14853))+(((-1.0)*cj3*x14841*x14850))+x14837+((r11*x14839))+(((-1.0)*x14849))+((r10*x14842))+((r12*x14854)));
evalcond[7]=(((r20*x14848))+(((-1.0)*r22*sj3*x14851))+x14837+(((-1.0)*x14849))+((gconst50*x14847))+((sj3*x14836*x14838))+(((-1.0)*r21*x14842*x14850)));
evalcond[8]=((((-1.0)*x14844))+(((-1.0)*sj1*x14843))+((gconst50*x14845))+((r10*x14848))+(((-1.0)*r11*x14842*x14850))+(((-1.0)*r12*sj3*x14851))+((r10*x14836*x14839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14855=((1.0)*gconst50);
CheckValue<IkReal> x14856=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14855)))),-1);
if(!x14856.valid){
continue;
}
CheckValue<IkReal> x14857 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14855)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14856.value)))+(x14857.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14858=IKsin(j4);
IkReal x14859=IKcos(j4);
IkReal x14860=(sj1*sj2);
IkReal x14861=(gconst50*r20);
IkReal x14862=(gconst50*sj3);
IkReal x14863=(cj3*r01);
IkReal x14864=(gconst50*r10);
IkReal x14865=(gconst49*sj3);
IkReal x14866=((1.0)*cj2);
IkReal x14867=(cj1*sj2);
IkReal x14868=(cj3*r11);
IkReal x14869=(gconst50*r00);
IkReal x14870=(cj3*r21);
IkReal x14871=(cj3*gconst49);
IkReal x14872=(cj1*x14866);
IkReal x14873=((1.0)*x14859);
IkReal x14874=((1.0)*x14858);
IkReal x14875=(gconst49*x14858);
IkReal x14876=(gconst49*x14859);
IkReal x14877=(cj3*x14858);
evalcond[0]=((((-1.0)*r22*x14873))+((r21*x14875))+(((-1.0)*x14861*x14874)));
evalcond[1]=(((r11*x14875))+(((-1.0)*x14864*x14874))+(((-1.0)*r12*x14873)));
evalcond[2]=((-1.0)+(((-1.0)*x14869*x14874))+(((-1.0)*r02*x14873))+((r01*x14875)));
evalcond[3]=(((x14863*x14876))+(((-1.0)*cj3*x14869*x14873))+((r01*x14862))+((r00*x14865))+((r02*x14877)));
evalcond[4]=((((-1.0)*r01*x14865*x14873))+((r00*x14871))+((r00*x14859*x14862))+((gconst50*x14863))+(((-1.0)*r02*sj3*x14874)));
evalcond[5]=(((cj2*sj1))+((r22*x14877))+((r20*x14865))+((x14870*x14876))+x14867+(((-1.0)*cj3*x14861*x14873))+((r21*x14862)));
evalcond[6]=(((x14868*x14876))+((r12*x14877))+x14860+((r10*x14865))+(((-1.0)*x14872))+((r11*x14862))+(((-1.0)*cj3*x14864*x14873)));
evalcond[7]=((((-1.0)*r22*sj3*x14874))+x14860+((sj3*x14859*x14861))+((gconst50*x14870))+(((-1.0)*x14872))+((r20*x14871))+(((-1.0)*r21*x14865*x14873)));
evalcond[8]=(((r10*x14871))+(((-1.0)*r12*sj3*x14874))+(((-1.0)*sj1*x14866))+((r10*x14859*x14862))+((gconst50*x14868))+(((-1.0)*x14867))+(((-1.0)*r11*x14865*x14873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14879 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14879)==0){
continue;
}
IkReal x14878=pow(x14879,-0.5);
CheckValue<IkReal> x14880 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14880.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14880.value))));
IkReal gconst52=((1.0)*r21*x14878);
IkReal gconst53=((-1.0)*r20*x14878);
CheckValue<IkReal> x14881 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14881.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14881.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14884 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14884.valid){
continue;
}
IkReal x14882=((1.0)*(x14884.value));
IkReal x14883=x14878;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14882)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14882)));
IkReal gconst52=((1.0)*r21*x14883);
IkReal gconst53=((-1.0)*r20*x14883);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14887 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14887.valid){
continue;
}
IkReal x14885=((1.0)*(x14887.value));
IkReal x14886=x14878;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14885)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14885)));
IkReal gconst52=((1.0)*r21*x14886);
IkReal gconst53=((-1.0)*r20*x14886);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14890 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14890.valid){
continue;
}
IkReal x14888=((1.0)*(x14890.value));
IkReal x14889=x14878;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14888)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14888)));
IkReal gconst52=((1.0)*r21*x14889);
IkReal gconst53=((-1.0)*r20*x14889);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14891=gconst52*gconst52;
IkReal x14892=gconst53*gconst53;
IkReal x14893=(gconst53*r01);
IkReal x14894=(cj3*r20);
IkReal x14895=(r22*sj3);
IkReal x14896=((1.0)*cj3);
IkReal x14897=(gconst52*sj3);
IkReal x14898=((1.0)*r00);
IkReal x14899=(gconst52*r00);
IkReal x14900=(r21*x14891);
CheckValue<IkReal> x14901 = IKatan2WithCheck(IkReal((((x14895*x14899))+((x14893*x14895)))),IkReal(((((-1.0)*r01*r20*sj3*x14892))+((r00*sj3*x14900))+(((-1.0)*gconst53*r20*x14897*x14898))+((r21*x14893*x14897)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14901.valid){
continue;
}
CheckValue<IkReal> x14902=IKPowWithIntegerCheck(IKsign((((cj3*gconst53*r21*x14899))+((gconst52*x14893*x14894))+(((-1.0)*x14892*x14894*x14898))+(((-1.0)*r02*r22*x14896))+(((-1.0)*r01*x14896*x14900)))),-1);
if(!x14902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14901.value)+(((1.5707963267949)*(x14902.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14903=IKsin(j4);
IkReal x14904=IKcos(j4);
IkReal x14905=(sj1*sj2);
IkReal x14906=((1.0)*cj1);
IkReal x14907=(cj3*gconst52);
IkReal x14908=(gconst53*sj3);
IkReal x14909=(cj3*gconst53);
IkReal x14910=(cj2*sj1);
IkReal x14911=(gconst52*sj3);
IkReal x14912=(cj2*x14906);
IkReal x14913=((1.0)*x14904);
IkReal x14914=((1.0)*x14903);
IkReal x14915=(gconst52*x14903);
IkReal x14916=(cj3*x14903);
evalcond[0]=(((r21*x14915))+(((-1.0)*r22*x14913))+(((-1.0)*gconst53*r20*x14914)));
evalcond[1]=((((-1.0)*r12*x14913))+((r11*x14915))+(((-1.0)*gconst53*r10*x14914)));
evalcond[2]=((-1.0)+((r01*x14915))+(((-1.0)*r02*x14913))+(((-1.0)*gconst53*r00*x14914)));
evalcond[3]=(((r00*x14911))+((r01*x14908))+((r01*x14904*x14907))+((r02*x14916))+(((-1.0)*r00*x14909*x14913)));
evalcond[4]=(((r00*x14907))+((r01*x14909))+((r00*x14904*x14908))+(((-1.0)*r02*sj3*x14914))+(((-1.0)*r01*x14911*x14913)));
evalcond[5]=(((r22*x14916))+((r21*x14908))+(((-1.0)*r20*x14909*x14913))+x14910+((cj1*sj2))+((r21*x14904*x14907))+((r20*x14911)));
evalcond[6]=(((r10*x14911))+((r11*x14904*x14907))+(((-1.0)*x14912))+((r11*x14908))+x14905+((r12*x14916))+(((-1.0)*r10*x14909*x14913)));
evalcond[7]=((((-1.0)*r21*x14911*x14913))+((r21*x14909))+(((-1.0)*x14912))+x14905+(((-1.0)*r22*sj3*x14914))+((r20*x14907))+((r20*x14904*x14908)));
evalcond[8]=((((-1.0)*r12*sj3*x14914))+((r11*x14909))+((r10*x14904*x14908))+(((-1.0)*x14910))+(((-1.0)*r11*x14911*x14913))+((r10*x14907))+(((-1.0)*sj2*x14906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14917=((1.0)*gconst53);
CheckValue<IkReal> x14918=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14917))+(((-1.0)*gconst52*r10)))),-1);
if(!x14918.valid){
continue;
}
CheckValue<IkReal> x14919 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x14917)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14918.value)))+(x14919.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14920=IKsin(j4);
IkReal x14921=IKcos(j4);
IkReal x14922=(sj1*sj2);
IkReal x14923=((1.0)*cj1);
IkReal x14924=(cj3*gconst52);
IkReal x14925=(gconst53*sj3);
IkReal x14926=(cj3*gconst53);
IkReal x14927=(cj2*sj1);
IkReal x14928=(gconst52*sj3);
IkReal x14929=(cj2*x14923);
IkReal x14930=((1.0)*x14921);
IkReal x14931=((1.0)*x14920);
IkReal x14932=(gconst52*x14920);
IkReal x14933=(cj3*x14920);
evalcond[0]=(((r21*x14932))+(((-1.0)*r22*x14930))+(((-1.0)*gconst53*r20*x14931)));
evalcond[1]=((((-1.0)*r12*x14930))+((r11*x14932))+(((-1.0)*gconst53*r10*x14931)));
evalcond[2]=((-1.0)+((r01*x14932))+(((-1.0)*gconst53*r00*x14931))+(((-1.0)*r02*x14930)));
evalcond[3]=(((r01*x14925))+((r00*x14928))+(((-1.0)*r00*x14926*x14930))+((r01*x14921*x14924))+((r02*x14933)));
evalcond[4]=((((-1.0)*r01*x14928*x14930))+(((-1.0)*r02*sj3*x14931))+((r01*x14926))+((r00*x14921*x14925))+((r00*x14924)));
evalcond[5]=(x14927+((cj1*sj2))+(((-1.0)*r20*x14926*x14930))+((r21*x14925))+((r21*x14921*x14924))+((r22*x14933))+((r20*x14928)));
evalcond[6]=(x14922+((r10*x14928))+(((-1.0)*x14929))+((r11*x14921*x14924))+((r11*x14925))+(((-1.0)*r10*x14926*x14930))+((r12*x14933)));
evalcond[7]=(x14922+(((-1.0)*r22*sj3*x14931))+(((-1.0)*r21*x14928*x14930))+((r21*x14926))+(((-1.0)*x14929))+((r20*x14921*x14925))+((r20*x14924)));
evalcond[8]=((((-1.0)*x14927))+(((-1.0)*r12*sj3*x14931))+((r10*x14924))+(((-1.0)*sj2*x14923))+(((-1.0)*r11*x14928*x14930))+((r11*x14926))+((r10*x14921*x14925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14934 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14934.valid){
continue;
}
CheckValue<IkReal> x14935=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14934.value)+(((1.5707963267949)*(x14935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14936=IKsin(j4);
IkReal x14937=IKcos(j4);
IkReal x14938=(sj1*sj2);
IkReal x14939=((1.0)*cj1);
IkReal x14940=(cj3*gconst52);
IkReal x14941=(gconst53*sj3);
IkReal x14942=(cj3*gconst53);
IkReal x14943=(cj2*sj1);
IkReal x14944=(gconst52*sj3);
IkReal x14945=(cj2*x14939);
IkReal x14946=((1.0)*x14937);
IkReal x14947=((1.0)*x14936);
IkReal x14948=(gconst52*x14936);
IkReal x14949=(cj3*x14936);
evalcond[0]=((((-1.0)*gconst53*r20*x14947))+((r21*x14948))+(((-1.0)*r22*x14946)));
evalcond[1]=((((-1.0)*r12*x14946))+(((-1.0)*gconst53*r10*x14947))+((r11*x14948)));
evalcond[2]=((-1.0)+((r01*x14948))+(((-1.0)*r02*x14946))+(((-1.0)*gconst53*r00*x14947)));
evalcond[3]=(((r00*x14944))+((r01*x14941))+((r01*x14937*x14940))+((r02*x14949))+(((-1.0)*r00*x14942*x14946)));
evalcond[4]=((((-1.0)*r01*x14944*x14946))+(((-1.0)*r02*sj3*x14947))+((r00*x14940))+((r01*x14942))+((r00*x14937*x14941)));
evalcond[5]=(x14943+((r22*x14949))+((cj1*sj2))+((r21*x14937*x14940))+((r21*x14941))+(((-1.0)*r20*x14942*x14946))+((r20*x14944)));
evalcond[6]=(((r12*x14949))+x14938+((r10*x14944))+(((-1.0)*r10*x14942*x14946))+(((-1.0)*x14945))+((r11*x14937*x14940))+((r11*x14941)));
evalcond[7]=(x14938+(((-1.0)*r21*x14944*x14946))+(((-1.0)*x14945))+((r20*x14937*x14941))+(((-1.0)*r22*sj3*x14947))+((r21*x14942))+((r20*x14940)));
evalcond[8]=(((r10*x14940))+(((-1.0)*r12*sj3*x14947))+(((-1.0)*x14943))+((r10*x14937*x14941))+(((-1.0)*sj2*x14939))+(((-1.0)*r11*x14944*x14946))+((r11*x14942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14950=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14950);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14950);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14951=(r01*sj5);
IkReal x14952=((1.0)*cj5*r00);
j4eval[0]=(x14951+(((-1.0)*x14952)));
j4eval[1]=((((-1.0)*cj3*x14952))+((cj3*x14951)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14953=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14953);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14953);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14954=(cj5*r00);
IkReal x14955=(r01*sj5);
j4eval[0]=(x14955+(((-1.0)*x14954)));
j4eval[1]=(((sj3*x14954))+(((-1.0)*sj3*x14955)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14956=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14956);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14956);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14957=((1.0)*r00);
CheckValue<IkReal> x14958=IKPowWithIntegerCheck(cj3,-1);
if(!x14958.valid){
continue;
}
CheckValue<IkReal> x14959=IKPowWithIntegerCheck(r22,-1);
if(!x14959.valid){
continue;
}
CheckValue<IkReal> x14960=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14957))),-1);
if(!x14960.valid){
continue;
}
if( IKabs(((x14958.value)*(x14959.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14960.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14957)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14958.value)*(x14959.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14960.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14957))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14958.value)*(x14959.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14960.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14957))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14961=IKsin(j4);
IkReal x14962=IKcos(j4);
IkReal x14963=(sj1*sj2);
IkReal x14964=(cj5*sj3);
IkReal x14965=(r11*sj5);
IkReal x14966=(cj3*cj5);
IkReal x14967=((1.0)*cj1);
IkReal x14968=(cj3*sj5);
IkReal x14969=(sj3*sj5);
IkReal x14970=(cj2*sj1);
IkReal x14971=(r01*sj5);
IkReal x14972=((1.0)*sj3);
IkReal x14973=(cj2*x14967);
IkReal x14974=(r10*x14962);
IkReal x14975=(r22*x14961);
IkReal x14976=(cj3*x14962);
IkReal x14977=((1.0)*cj5*x14961);
evalcond[0]=((-1.0)*r22*x14962);
evalcond[1]=(x14970+((cj3*x14975))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r10*x14977))+((x14961*x14965)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14977))+((x14961*x14971)));
evalcond[4]=(x14963+(((-1.0)*x14973))+(((-1.0)*x14972*x14975)));
evalcond[5]=(((r01*x14964))+(((-1.0)*r00*x14962*x14966))+((r01*x14962*x14968))+((r00*x14969)));
evalcond[6]=(((r01*x14966))+(((-1.0)*r01*x14962*x14969))+((r00*x14968))+((r00*x14962*x14964)));
evalcond[7]=(x14963+(((-1.0)*x14973))+((r11*x14964))+(((-1.0)*x14966*x14974))+((x14965*x14976))+((r10*x14969)));
evalcond[8]=(((x14964*x14974))+(((-1.0)*sj2*x14967))+(((-1.0)*x14970))+((r11*x14966))+(((-1.0)*x14962*x14965*x14972))+((r10*x14968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14978=((1.0)*cj3);
IkReal x14979=(cj5*r00);
IkReal x14980=(r01*sj5);
CheckValue<IkReal> x14981=IKPowWithIntegerCheck(((((-1.0)*x14979))+x14980),-1);
if(!x14981.valid){
continue;
}
CheckValue<IkReal> x14982=IKPowWithIntegerCheck((((sj3*x14979))+(((-1.0)*sj3*x14980))),-1);
if(!x14982.valid){
continue;
}
if( IKabs(x14981.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14982.value)*(((((-1.0)*cj5*r01*x14978))+(((-1.0)*r00*sj5*x14978)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14981.value)+IKsqr(((x14982.value)*(((((-1.0)*cj5*r01*x14978))+(((-1.0)*r00*sj5*x14978))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14981.value, ((x14982.value)*(((((-1.0)*cj5*r01*x14978))+(((-1.0)*r00*sj5*x14978))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14983=IKsin(j4);
IkReal x14984=IKcos(j4);
IkReal x14985=(sj1*sj2);
IkReal x14986=(cj5*sj3);
IkReal x14987=(r11*sj5);
IkReal x14988=(cj3*cj5);
IkReal x14989=((1.0)*cj1);
IkReal x14990=(cj3*sj5);
IkReal x14991=(sj3*sj5);
IkReal x14992=(cj2*sj1);
IkReal x14993=(r01*sj5);
IkReal x14994=((1.0)*sj3);
IkReal x14995=(cj2*x14989);
IkReal x14996=(r10*x14984);
IkReal x14997=(r22*x14983);
IkReal x14998=(cj3*x14984);
IkReal x14999=((1.0)*cj5*x14983);
evalcond[0]=((-1.0)*r22*x14984);
evalcond[1]=(x14992+((cj1*sj2))+((cj3*x14997)));
evalcond[2]=((((-1.0)*r10*x14999))+((x14983*x14987)));
evalcond[3]=((-1.0)+((x14983*x14993))+(((-1.0)*r00*x14999)));
evalcond[4]=((((-1.0)*x14995))+x14985+(((-1.0)*x14994*x14997)));
evalcond[5]=((((-1.0)*r00*x14984*x14988))+((r01*x14984*x14990))+((r01*x14986))+((r00*x14991)));
evalcond[6]=(((r00*x14984*x14986))+(((-1.0)*r01*x14984*x14991))+((r01*x14988))+((r00*x14990)));
evalcond[7]=((((-1.0)*x14995))+x14985+((r10*x14991))+((r11*x14986))+((x14987*x14998))+(((-1.0)*x14988*x14996)));
evalcond[8]=(((x14986*x14996))+(((-1.0)*sj2*x14989))+((r10*x14990))+((r11*x14988))+(((-1.0)*x14984*x14987*x14994))+(((-1.0)*x14992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15000=((1.0)*sj3);
IkReal x15001=(r01*sj5);
IkReal x15002=((1.0)*cj5*r00);
CheckValue<IkReal> x15003=IKPowWithIntegerCheck((x15001+(((-1.0)*x15002))),-1);
if(!x15003.valid){
continue;
}
CheckValue<IkReal> x15004=IKPowWithIntegerCheck(((((-1.0)*cj3*x15002))+((cj3*x15001))),-1);
if(!x15004.valid){
continue;
}
if( IKabs(x15003.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15004.value)*(((((-1.0)*cj5*r01*x15000))+(((-1.0)*r00*sj5*x15000)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15003.value)+IKsqr(((x15004.value)*(((((-1.0)*cj5*r01*x15000))+(((-1.0)*r00*sj5*x15000))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15003.value, ((x15004.value)*(((((-1.0)*cj5*r01*x15000))+(((-1.0)*r00*sj5*x15000))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15005=IKsin(j4);
IkReal x15006=IKcos(j4);
IkReal x15007=(sj1*sj2);
IkReal x15008=(cj5*sj3);
IkReal x15009=(r11*sj5);
IkReal x15010=(cj3*cj5);
IkReal x15011=((1.0)*cj1);
IkReal x15012=(cj3*sj5);
IkReal x15013=(sj3*sj5);
IkReal x15014=(cj2*sj1);
IkReal x15015=(r01*sj5);
IkReal x15016=((1.0)*sj3);
IkReal x15017=(cj2*x15011);
IkReal x15018=(r10*x15006);
IkReal x15019=(r22*x15005);
IkReal x15020=(cj3*x15006);
IkReal x15021=((1.0)*cj5*x15005);
evalcond[0]=((-1.0)*r22*x15006);
evalcond[1]=(((cj3*x15019))+((cj1*sj2))+x15014);
evalcond[2]=((((-1.0)*r10*x15021))+((x15005*x15009)));
evalcond[3]=((-1.0)+((x15005*x15015))+(((-1.0)*r00*x15021)));
evalcond[4]=((((-1.0)*x15017))+x15007+(((-1.0)*x15016*x15019)));
evalcond[5]=(((r01*x15008))+((r01*x15006*x15012))+((r00*x15013))+(((-1.0)*r00*x15006*x15010)));
evalcond[6]=(((r00*x15006*x15008))+(((-1.0)*r01*x15006*x15013))+((r00*x15012))+((r01*x15010)));
evalcond[7]=((((-1.0)*x15017))+((r10*x15013))+x15007+((r11*x15008))+((x15009*x15020))+(((-1.0)*x15010*x15018)));
evalcond[8]=((((-1.0)*x15014))+((r10*x15012))+((r11*x15010))+((x15008*x15018))+(((-1.0)*sj2*x15011))+(((-1.0)*x15006*x15009*x15016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15022=cj5*cj5;
IkReal x15023=(cj3*r20);
IkReal x15024=(r21*sj3);
IkReal x15025=((1.0)*cj3);
IkReal x15026=(r01*r21);
IkReal x15027=(r01*sj3);
IkReal x15028=(r00*sj5);
IkReal x15029=(cj5*r01*sj5);
IkReal x15030=((1.0)*x15022);
CheckValue<IkReal> x15031 = IKatan2WithCheck(IkReal((((r22*sj3*x15028))+((cj5*r22*x15027)))),IkReal(((((-1.0)*r00*x15024*x15030))+((r00*x15024))+(((-1.0)*cj5*r20*sj3*x15028))+(((-1.0)*r20*x15027*x15030))+((x15024*x15029)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15031.valid){
continue;
}
CheckValue<IkReal> x15032=IKPowWithIntegerCheck(IKsign((((cj3*cj5*r21*x15028))+(((-1.0)*r02*r22*x15025))+(((-1.0)*x15025*x15026))+(((-1.0)*r00*x15023*x15030))+((cj3*x15022*x15026))+((x15023*x15029)))),-1);
if(!x15032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15031.value)+(((1.5707963267949)*(x15032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15033=IKsin(j4);
IkReal x15034=IKcos(j4);
IkReal x15035=(sj1*sj2);
IkReal x15036=(r11*sj5);
IkReal x15037=(cj5*r10);
IkReal x15038=(cj5*r01);
IkReal x15039=(cj5*r00);
IkReal x15040=((1.0)*cj1);
IkReal x15041=(cj3*sj5);
IkReal x15042=(r21*sj5);
IkReal x15043=(cj5*sj3);
IkReal x15044=(sj3*sj5);
IkReal x15045=(cj2*sj1);
IkReal x15046=(r01*sj5);
IkReal x15047=(cj3*cj5);
IkReal x15048=(cj5*r20);
IkReal x15049=(cj2*x15040);
IkReal x15050=((1.0)*x15034);
IkReal x15051=((1.0)*x15033);
IkReal x15052=(cj3*x15034);
IkReal x15053=(sj3*x15034);
IkReal x15054=(cj3*x15033);
evalcond[0]=(((x15033*x15042))+(((-1.0)*x15048*x15051))+(((-1.0)*r22*x15050)));
evalcond[1]=((((-1.0)*x15037*x15051))+(((-1.0)*r12*x15050))+((x15033*x15036)));
evalcond[2]=((-1.0)+((x15033*x15046))+(((-1.0)*r02*x15050))+(((-1.0)*x15039*x15051)));
evalcond[3]=(((sj3*x15038))+((r00*x15044))+((r02*x15054))+(((-1.0)*cj3*x15039*x15050))+((r01*x15034*x15041)));
evalcond[4]=(((r00*x15041))+(((-1.0)*r02*sj3*x15051))+((cj3*x15038))+((x15039*x15053))+(((-1.0)*r01*x15044*x15050)));
evalcond[5]=(((cj1*sj2))+x15045+((r20*x15044))+((r22*x15054))+((r21*x15034*x15041))+(((-1.0)*r20*x15047*x15050))+((r21*x15043)));
evalcond[6]=((((-1.0)*x15049))+((r11*x15043))+((x15036*x15052))+x15035+((r10*x15044))+((r12*x15054))+(((-1.0)*cj3*x15037*x15050)));
evalcond[7]=((((-1.0)*x15049))+x15035+(((-1.0)*sj3*x15042*x15050))+((r20*x15041))+(((-1.0)*r22*sj3*x15051))+((r21*x15047))+((r20*x15034*x15043)));
evalcond[8]=((((-1.0)*sj2*x15040))+((r11*x15047))+(((-1.0)*x15045))+((r10*x15041))+((x15037*x15053))+(((-1.0)*r12*sj3*x15051))+(((-1.0)*sj3*x15036*x15050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15055=((1.0)*cj5);
CheckValue<IkReal> x15056=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15055)))),-1);
if(!x15056.valid){
continue;
}
CheckValue<IkReal> x15057 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15055)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15056.value)))+(x15057.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15058=IKsin(j4);
IkReal x15059=IKcos(j4);
IkReal x15060=(sj1*sj2);
IkReal x15061=(r11*sj5);
IkReal x15062=(cj5*r10);
IkReal x15063=(cj5*r01);
IkReal x15064=(cj5*r00);
IkReal x15065=((1.0)*cj1);
IkReal x15066=(cj3*sj5);
IkReal x15067=(r21*sj5);
IkReal x15068=(cj5*sj3);
IkReal x15069=(sj3*sj5);
IkReal x15070=(cj2*sj1);
IkReal x15071=(r01*sj5);
IkReal x15072=(cj3*cj5);
IkReal x15073=(cj5*r20);
IkReal x15074=(cj2*x15065);
IkReal x15075=((1.0)*x15059);
IkReal x15076=((1.0)*x15058);
IkReal x15077=(cj3*x15059);
IkReal x15078=(sj3*x15059);
IkReal x15079=(cj3*x15058);
evalcond[0]=(((x15058*x15067))+(((-1.0)*r22*x15075))+(((-1.0)*x15073*x15076)));
evalcond[1]=((((-1.0)*r12*x15075))+((x15058*x15061))+(((-1.0)*x15062*x15076)));
evalcond[2]=((-1.0)+((x15058*x15071))+(((-1.0)*r02*x15075))+(((-1.0)*x15064*x15076)));
evalcond[3]=(((r02*x15079))+((sj3*x15063))+((r00*x15069))+(((-1.0)*cj3*x15064*x15075))+((r01*x15059*x15066)));
evalcond[4]=((((-1.0)*r01*x15069*x15075))+((x15064*x15078))+((r00*x15066))+((cj3*x15063))+(((-1.0)*r02*sj3*x15076)));
evalcond[5]=(((r21*x15068))+((r20*x15069))+((r22*x15079))+((cj1*sj2))+x15070+(((-1.0)*r20*x15072*x15075))+((r21*x15059*x15066)));
evalcond[6]=((((-1.0)*x15074))+((x15061*x15077))+((r12*x15079))+(((-1.0)*cj3*x15062*x15075))+x15060+((r11*x15068))+((r10*x15069)));
evalcond[7]=((((-1.0)*sj3*x15067*x15075))+(((-1.0)*x15074))+(((-1.0)*r22*sj3*x15076))+((r20*x15066))+((r20*x15059*x15068))+x15060+((r21*x15072)));
evalcond[8]=((((-1.0)*sj2*x15065))+(((-1.0)*r12*sj3*x15076))+((x15062*x15078))+((r11*x15072))+(((-1.0)*x15070))+((r10*x15066))+(((-1.0)*sj3*x15061*x15075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15080=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15080.valid){
continue;
}
CheckValue<IkReal> x15081 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15080.value)))+(x15081.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15082=IKsin(j4);
IkReal x15083=IKcos(j4);
IkReal x15084=(sj1*sj2);
IkReal x15085=(r11*sj5);
IkReal x15086=(cj5*r10);
IkReal x15087=(cj5*r01);
IkReal x15088=(cj5*r00);
IkReal x15089=((1.0)*cj1);
IkReal x15090=(cj3*sj5);
IkReal x15091=(r21*sj5);
IkReal x15092=(cj5*sj3);
IkReal x15093=(sj3*sj5);
IkReal x15094=(cj2*sj1);
IkReal x15095=(r01*sj5);
IkReal x15096=(cj3*cj5);
IkReal x15097=(cj5*r20);
IkReal x15098=(cj2*x15089);
IkReal x15099=((1.0)*x15083);
IkReal x15100=((1.0)*x15082);
IkReal x15101=(cj3*x15083);
IkReal x15102=(sj3*x15083);
IkReal x15103=(cj3*x15082);
evalcond[0]=((((-1.0)*x15097*x15100))+(((-1.0)*r22*x15099))+((x15082*x15091)));
evalcond[1]=(((x15082*x15085))+(((-1.0)*r12*x15099))+(((-1.0)*x15086*x15100)));
evalcond[2]=((-1.0)+(((-1.0)*x15088*x15100))+(((-1.0)*r02*x15099))+((x15082*x15095)));
evalcond[3]=(((r00*x15093))+(((-1.0)*cj3*x15088*x15099))+((sj3*x15087))+((r02*x15103))+((r01*x15083*x15090)));
evalcond[4]=(((x15088*x15102))+((r00*x15090))+(((-1.0)*r02*sj3*x15100))+(((-1.0)*r01*x15093*x15099))+((cj3*x15087)));
evalcond[5]=(((r21*x15092))+((r22*x15103))+((r20*x15093))+((cj1*sj2))+x15094+(((-1.0)*r20*x15096*x15099))+((r21*x15083*x15090)));
evalcond[6]=((((-1.0)*cj3*x15086*x15099))+((r12*x15103))+((x15085*x15101))+x15084+((r11*x15092))+((r10*x15093))+(((-1.0)*x15098)));
evalcond[7]=(((r20*x15083*x15092))+((r21*x15096))+((r20*x15090))+(((-1.0)*sj3*x15091*x15099))+x15084+(((-1.0)*r22*sj3*x15100))+(((-1.0)*x15098)));
evalcond[8]=((((-1.0)*sj2*x15089))+(((-1.0)*x15094))+((r11*x15096))+((r10*x15090))+(((-1.0)*r12*sj3*x15100))+((x15086*x15102))+(((-1.0)*sj3*x15085*x15099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15104=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15104;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15104);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15105=((1.0)*cj5);
IkReal x15106=((((-1.0)*r21*x15105))+(((-1.0)*r20*sj5)));
j4eval[0]=x15106;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15105))+((r11*sj5))))));
j4eval[2]=IKsign(x15106);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15107=cj5*cj5;
IkReal x15108=(cj3*r01);
IkReal x15109=(cj5*sj5);
IkReal x15110=((1.0)*cj3);
IkReal x15111=(((r20*x15108*x15109))+((r21*x15107*x15108))+(((-1.0)*r00*r20*x15107*x15110))+(((-1.0)*r21*x15108))+((cj3*r00*r21*x15109))+(((-1.0)*r02*r22*x15110)));
j4eval[0]=x15111;
j4eval[1]=IKsign(x15111);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15112=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15112;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15112);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15113=((1.0)*cj5);
IkReal x15114=((((-1.0)*r21*x15113))+(((-1.0)*r20*sj5)));
j4eval[0]=x15114;
j4eval[1]=((IKabs(((((-1.0)*r10*x15113))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15114);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15115=cj5*cj5;
IkReal x15116=r01*r01;
IkReal x15117=(cj5*r00);
IkReal x15118=(r01*sj5);
IkReal x15119=((((-2.0)*x15117*x15118))+x15116+((x15115*(r00*r00)))+(((-1.0)*x15115*x15116))+(r02*r02));
j4eval[0]=x15119;
j4eval[1]=((IKabs(((((-1.0)*x15118))+x15117)))+(IKabs(r02)));
j4eval[2]=IKsign(x15119);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15120=cj5*cj5;
IkReal x15121=r01*r01;
IkReal x15122=(r01*sj5);
IkReal x15123=(cj5*r00);
CheckValue<IkReal> x15124=IKPowWithIntegerCheck(IKsign((x15121+((x15120*(r00*r00)))+(((-2.0)*x15122*x15123))+(((-1.0)*x15120*x15121))+(r02*r02))),-1);
if(!x15124.valid){
continue;
}
CheckValue<IkReal> x15125 = IKatan2WithCheck(IkReal((x15123+(((-1.0)*x15122)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15124.value)))+(x15125.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15126=IKsin(j4);
IkReal x15127=IKcos(j4);
IkReal x15128=(cj5*r10);
IkReal x15129=(r01*sj5);
IkReal x15130=(cj5*r00);
IkReal x15131=(cj5*r20);
IkReal x15132=((1.0)*x15127);
IkReal x15133=((1.0)*x15126);
IkReal x15134=(sj5*x15126);
evalcond[0]=(((r21*x15134))+(((-1.0)*r22*x15132))+(((-1.0)*x15131*x15133)));
evalcond[1]=((((-1.0)*x15128*x15133))+(((-1.0)*r12*x15132))+((r11*x15134)));
evalcond[2]=((((-1.0)*r02*x15133))+((x15127*x15130))+(((-1.0)*x15129*x15132)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15132))+((x15126*x15129))+(((-1.0)*x15130*x15133)));
evalcond[4]=(((cj2*sj1))+((x15127*x15128))+((cj1*sj2))+(((-1.0)*r12*x15133))+(((-1.0)*r11*sj5*x15132)));
evalcond[5]=((((-1.0)*r21*sj5*x15132))+((x15127*x15131))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15135=((1.0)*cj5);
CheckValue<IkReal> x15136=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15135))+(((-1.0)*r20*sj5)))),-1);
if(!x15136.valid){
continue;
}
CheckValue<IkReal> x15137 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15135))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15136.value)))+(x15137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15138=IKsin(j4);
IkReal x15139=IKcos(j4);
IkReal x15140=(cj5*r10);
IkReal x15141=(r01*sj5);
IkReal x15142=(cj5*r00);
IkReal x15143=(cj5*r20);
IkReal x15144=((1.0)*x15139);
IkReal x15145=((1.0)*x15138);
IkReal x15146=(sj5*x15138);
evalcond[0]=(((r21*x15146))+(((-1.0)*x15143*x15145))+(((-1.0)*r22*x15144)));
evalcond[1]=(((r11*x15146))+(((-1.0)*x15140*x15145))+(((-1.0)*r12*x15144)));
evalcond[2]=(((x15139*x15142))+(((-1.0)*x15141*x15144))+(((-1.0)*r02*x15145)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15144))+(((-1.0)*x15142*x15145))+((x15138*x15141)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x15139*x15140))+(((-1.0)*r11*sj5*x15144))+(((-1.0)*r12*x15145)));
evalcond[5]=((((-1.0)*r21*sj5*x15144))+((x15139*x15143))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15147 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15147.valid){
continue;
}
CheckValue<IkReal> x15148=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15147.value)+(((1.5707963267949)*(x15148.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15149=IKsin(j4);
IkReal x15150=IKcos(j4);
IkReal x15151=(cj5*r10);
IkReal x15152=(r01*sj5);
IkReal x15153=(cj5*r00);
IkReal x15154=(cj5*r20);
IkReal x15155=((1.0)*x15150);
IkReal x15156=((1.0)*x15149);
IkReal x15157=(sj5*x15149);
evalcond[0]=(((r21*x15157))+(((-1.0)*r22*x15155))+(((-1.0)*x15154*x15156)));
evalcond[1]=((((-1.0)*r12*x15155))+((r11*x15157))+(((-1.0)*x15151*x15156)));
evalcond[2]=((((-1.0)*r02*x15156))+((x15150*x15153))+(((-1.0)*x15152*x15155)));
evalcond[3]=((1.0)+((x15149*x15152))+(((-1.0)*r02*x15155))+(((-1.0)*x15153*x15156)));
evalcond[4]=(((cj2*sj1))+((x15150*x15151))+((cj1*sj2))+(((-1.0)*r12*x15156))+(((-1.0)*r11*sj5*x15155)));
evalcond[5]=(((x15150*x15154))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15156))+(((-1.0)*r21*sj5*x15155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15158=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15158;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15158);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15159=((1.0)*cj5);
IkReal x15160=((((-1.0)*r21*x15159))+(((-1.0)*r20*sj5)));
j4eval[0]=x15160;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15159))+((r11*sj5))))));
j4eval[2]=IKsign(x15160);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15161=cj5*cj5;
IkReal x15162=r01*r01;
IkReal x15163=(r01*sj5);
IkReal x15164=(cj5*r00);
IkReal x15165=(((x15161*x15162))+(((-1.0)*(r02*r02)))+(((2.0)*x15163*x15164))+(((-1.0)*x15162))+(((-1.0)*x15161*(r00*r00))));
j4eval[0]=x15165;
j4eval[1]=IKsign(x15165);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x15164))+x15163))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15166=cj5*cj5;
IkReal x15167=r01*r01;
IkReal x15168=(r01*sj5);
IkReal x15169=(cj5*r00);
CheckValue<IkReal> x15170 = IKatan2WithCheck(IkReal(((((-1.0)*x15169))+x15168)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15170.valid){
continue;
}
CheckValue<IkReal> x15171=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x15168*x15169))+(((-1.0)*x15167))+(((-1.0)*x15166*(r00*r00)))+((x15166*x15167)))),-1);
if(!x15171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15170.value)+(((1.5707963267949)*(x15171.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15172=IKcos(j4);
IkReal x15173=IKsin(j4);
IkReal x15174=(cj5*r00);
IkReal x15175=(cj5*r10);
IkReal x15176=(r21*sj5);
IkReal x15177=(cj5*r20);
IkReal x15178=((1.0)*x15172);
IkReal x15179=((1.0)*x15173);
IkReal x15180=(sj5*x15173);
IkReal x15181=(sj5*x15172);
evalcond[0]=(((r02*x15173))+((r01*x15181))+(((-1.0)*x15174*x15178)));
evalcond[1]=(((x15173*x15176))+(((-1.0)*x15177*x15179))+(((-1.0)*r22*x15178)));
evalcond[2]=((((-1.0)*x15175*x15179))+((r11*x15180))+(((-1.0)*r12*x15178)));
evalcond[3]=((1.0)+((r01*x15180))+(((-1.0)*x15174*x15179))+(((-1.0)*r02*x15178)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x15173))+(((-1.0)*x15175*x15178))+((r11*x15181)));
evalcond[5]=((((-1.0)*x15177*x15178))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15172*x15176))+((r22*x15173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15182=((1.0)*cj5);
CheckValue<IkReal> x15183=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15182))+(((-1.0)*r20*sj5)))),-1);
if(!x15183.valid){
continue;
}
CheckValue<IkReal> x15184 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15183.value)))+(x15184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15185=IKcos(j4);
IkReal x15186=IKsin(j4);
IkReal x15187=(cj5*r00);
IkReal x15188=(cj5*r10);
IkReal x15189=(r21*sj5);
IkReal x15190=(cj5*r20);
IkReal x15191=((1.0)*x15185);
IkReal x15192=((1.0)*x15186);
IkReal x15193=(sj5*x15186);
IkReal x15194=(sj5*x15185);
evalcond[0]=(((r02*x15186))+(((-1.0)*x15187*x15191))+((r01*x15194)));
evalcond[1]=((((-1.0)*x15190*x15192))+((x15186*x15189))+(((-1.0)*r22*x15191)));
evalcond[2]=(((r11*x15193))+(((-1.0)*r12*x15191))+(((-1.0)*x15188*x15192)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15191))+(((-1.0)*x15187*x15192))+((r01*x15193)));
evalcond[4]=(((cj2*sj1))+((r11*x15194))+((cj1*sj2))+((r12*x15186))+(((-1.0)*x15188*x15191)));
evalcond[5]=((((-1.0)*x15190*x15191))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15185*x15189))+((r22*x15186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15195 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15195.valid){
continue;
}
CheckValue<IkReal> x15196=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15195.value)+(((1.5707963267949)*(x15196.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15197=IKcos(j4);
IkReal x15198=IKsin(j4);
IkReal x15199=(cj5*r00);
IkReal x15200=(cj5*r10);
IkReal x15201=(r21*sj5);
IkReal x15202=(cj5*r20);
IkReal x15203=((1.0)*x15197);
IkReal x15204=((1.0)*x15198);
IkReal x15205=(sj5*x15198);
IkReal x15206=(sj5*x15197);
evalcond[0]=((((-1.0)*x15199*x15203))+((r01*x15206))+((r02*x15198)));
evalcond[1]=((((-1.0)*r22*x15203))+(((-1.0)*x15202*x15204))+((x15198*x15201)));
evalcond[2]=(((r11*x15205))+(((-1.0)*r12*x15203))+(((-1.0)*x15200*x15204)));
evalcond[3]=((1.0)+(((-1.0)*x15199*x15204))+((r01*x15205))+(((-1.0)*r02*x15203)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x15206))+((r12*x15198))+(((-1.0)*x15200*x15203)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15198))+(((-1.0)*x15202*x15203))+((x15197*x15201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15208 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15208)==0){
continue;
}
IkReal x15207=pow(x15208,-0.5);
CheckValue<IkReal> x15209 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15209.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15209.value));
IkReal gconst61=((-1.0)*r11*x15207);
IkReal gconst62=(r10*x15207);
CheckValue<IkReal> x15210 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15210.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15210.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15213 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15213.valid){
continue;
}
IkReal x15211=((-1.0)*(x15213.value));
IkReal x15212=x15207;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15211;
IkReal gconst60=x15211;
IkReal gconst61=((-1.0)*r11*x15212);
IkReal gconst62=(r10*x15212);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15216 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15216.valid){
continue;
}
IkReal x15214=((-1.0)*(x15216.value));
IkReal x15215=x15207;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15214;
IkReal gconst60=x15214;
IkReal gconst61=((-1.0)*r11*x15215);
IkReal gconst62=(r10*x15215);
CheckValue<IkReal> x15224=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15224.valid){
continue;
}
IkReal x15217=x15224.value;
IkReal x15218=(sj3*x15217);
IkReal x15219=(r20*x15218);
IkReal x15220=(r00*x15218);
IkReal x15221=(r01*x15218);
IkReal x15222=(r21*x15218);
IkReal x15223=(r10*r11*x15218);
j4eval[0]=IKsign((((r10*r11*r21*x15220))+((r21*x15221*(r11*r11)))+((r01*r10*r11*x15219))+((r02*r22*sj3))+((r00*x15219*(r10*r10)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15225=gconst61*gconst61;
IkReal x15226=gconst62*gconst62;
IkReal x15227=(cj3*r01);
IkReal x15228=(r22*sj3);
IkReal x15229=(gconst61*r00);
IkReal x15230=((1.0)*cj3);
IkReal x15231=(gconst62*r01);
IkReal x15232=((1.0)*sj3);
IkReal x15233=(gconst61*gconst62*r20);
IkReal x15234=(r21*x15225);
IkReal x15235=(r20*x15226);
CheckValue<IkReal> x15236 = IKatan2WithCheck(IkReal((((x15228*x15229))+((x15228*x15231)))),IkReal((((gconst61*r21*sj3*x15231))+((r00*sj3*x15234))+(((-1.0)*r01*x15232*x15235))+(((-1.0)*gconst62*r20*x15229*x15232)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15236.valid){
continue;
}
CheckValue<IkReal> x15237=IKPowWithIntegerCheck(IKsign((((cj3*gconst62*r21*x15229))+(((-1.0)*r00*x15230*x15235))+(((-1.0)*r02*r22*x15230))+((x15227*x15233))+(((-1.0)*x15227*x15234)))),-1);
if(!x15237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15236.value)+(((1.5707963267949)*(x15237.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15238=IKsin(j4);
IkReal x15239=IKcos(j4);
IkReal x15240=(cj2*sj1);
IkReal x15241=(cj1*sj2);
IkReal x15242=(gconst61*sj3);
IkReal x15243=(cj3*gconst61);
IkReal x15244=(cj3*gconst62);
IkReal x15245=(sj1*sj2);
IkReal x15246=(gconst62*sj3);
IkReal x15247=(cj1*cj2);
IkReal x15248=((1.0)*x15239);
IkReal x15249=((1.0)*x15238);
IkReal x15250=(gconst61*x15238);
IkReal x15251=(cj3*x15238);
IkReal x15252=(x15241+x15240);
evalcond[0]=((((-1.0)*gconst62*r20*x15249))+(((-1.0)*r22*x15248))+((r21*x15250)));
evalcond[1]=((((-1.0)*gconst62*r10*x15249))+(((-1.0)*r12*x15248))+((r11*x15250)));
evalcond[2]=((1.0)+((r01*x15250))+(((-1.0)*r02*x15248))+(((-1.0)*gconst62*r00*x15249)));
evalcond[3]=(((r01*x15246))+((r00*x15242))+((r01*x15239*x15243))+(((-1.0)*r00*x15244*x15248))+((r02*x15251)));
evalcond[4]=((((-1.0)*r01*x15242*x15248))+((r01*x15244))+((r00*x15243))+((r00*x15239*x15246))+(((-1.0)*r02*sj3*x15249)));
evalcond[5]=(x15252+((r22*x15251))+((r21*x15246))+(((-1.0)*r20*x15244*x15248))+((r21*x15239*x15243))+((r20*x15242)));
evalcond[6]=((((-1.0)*x15245))+(((-1.0)*r10*x15244*x15248))+x15247+((r11*x15239*x15243))+((r10*x15242))+((r11*x15246))+((r12*x15251)));
evalcond[7]=((((-1.0)*r12*sj3*x15249))+x15252+((r10*x15243))+((r11*x15244))+(((-1.0)*r11*x15242*x15248))+((r10*x15239*x15246)));
evalcond[8]=(((r20*x15239*x15246))+(((-1.0)*x15247))+x15245+((r21*x15244))+(((-1.0)*r22*sj3*x15249))+(((-1.0)*r21*x15242*x15248))+((r20*x15243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15253=gconst61*gconst61;
IkReal x15254=gconst62*gconst62;
IkReal x15255=(cj3*r22);
IkReal x15256=(gconst62*r01);
IkReal x15257=(gconst61*r00);
IkReal x15258=((1.0)*r20);
IkReal x15259=(cj3*r21);
IkReal x15260=(r21*sj3);
CheckValue<IkReal> x15261 = IKatan2WithCheck(IkReal((((x15255*x15256))+((x15255*x15257)))),IkReal((((r00*x15253*x15259))+(((-1.0)*cj3*gconst62*x15257*x15258))+(((-1.0)*cj3*r01*x15254*x15258))+((gconst61*x15256*x15259)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15261.valid){
continue;
}
CheckValue<IkReal> x15262=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*sj3*x15256*x15258))+((r00*r20*sj3*x15254))+((r01*x15253*x15260))+((r02*r22*sj3))+(((-1.0)*gconst62*x15257*x15260)))),-1);
if(!x15262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15261.value)+(((1.5707963267949)*(x15262.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15263=IKsin(j4);
IkReal x15264=IKcos(j4);
IkReal x15265=(cj2*sj1);
IkReal x15266=(cj1*sj2);
IkReal x15267=(gconst61*sj3);
IkReal x15268=(cj3*gconst61);
IkReal x15269=(cj3*gconst62);
IkReal x15270=(sj1*sj2);
IkReal x15271=(gconst62*sj3);
IkReal x15272=(cj1*cj2);
IkReal x15273=((1.0)*x15264);
IkReal x15274=((1.0)*x15263);
IkReal x15275=(gconst61*x15263);
IkReal x15276=(cj3*x15263);
IkReal x15277=(x15265+x15266);
evalcond[0]=((((-1.0)*gconst62*r20*x15274))+(((-1.0)*r22*x15273))+((r21*x15275)));
evalcond[1]=(((r11*x15275))+(((-1.0)*r12*x15273))+(((-1.0)*gconst62*r10*x15274)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15274))+(((-1.0)*r02*x15273))+((r01*x15275)));
evalcond[3]=(((r01*x15264*x15268))+((r02*x15276))+((r00*x15267))+(((-1.0)*r00*x15269*x15273))+((r01*x15271)));
evalcond[4]=((((-1.0)*r02*sj3*x15274))+((r00*x15264*x15271))+((r01*x15269))+((r00*x15268))+(((-1.0)*r01*x15267*x15273)));
evalcond[5]=(((r20*x15267))+((r21*x15264*x15268))+(((-1.0)*r20*x15269*x15273))+((r22*x15276))+x15277+((r21*x15271)));
evalcond[6]=(((r12*x15276))+((r11*x15271))+x15272+((r11*x15264*x15268))+(((-1.0)*r10*x15269*x15273))+((r10*x15267))+(((-1.0)*x15270)));
evalcond[7]=(x15277+(((-1.0)*r12*sj3*x15274))+((r10*x15264*x15271))+(((-1.0)*r11*x15267*x15273))+((r10*x15268))+((r11*x15269)));
evalcond[8]=(((r20*x15268))+x15270+(((-1.0)*r22*sj3*x15274))+(((-1.0)*x15272))+(((-1.0)*r21*x15267*x15273))+((r21*x15269))+((r20*x15264*x15271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15278=((1.0)*gconst62);
CheckValue<IkReal> x15279=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15278))+(((-1.0)*gconst61*r20)))),-1);
if(!x15279.valid){
continue;
}
CheckValue<IkReal> x15280 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15278))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15279.value)))+(x15280.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15281=IKsin(j4);
IkReal x15282=IKcos(j4);
IkReal x15283=(cj2*sj1);
IkReal x15284=(cj1*sj2);
IkReal x15285=(gconst61*sj3);
IkReal x15286=(cj3*gconst61);
IkReal x15287=(cj3*gconst62);
IkReal x15288=(sj1*sj2);
IkReal x15289=(gconst62*sj3);
IkReal x15290=(cj1*cj2);
IkReal x15291=((1.0)*x15282);
IkReal x15292=((1.0)*x15281);
IkReal x15293=(gconst61*x15281);
IkReal x15294=(cj3*x15281);
IkReal x15295=(x15284+x15283);
evalcond[0]=((((-1.0)*r22*x15291))+((r21*x15293))+(((-1.0)*gconst62*r20*x15292)));
evalcond[1]=(((r11*x15293))+(((-1.0)*gconst62*r10*x15292))+(((-1.0)*r12*x15291)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15292))+((r01*x15293))+(((-1.0)*r02*x15291)));
evalcond[3]=(((r01*x15289))+((r00*x15285))+(((-1.0)*r00*x15287*x15291))+((r02*x15294))+((r01*x15282*x15286)));
evalcond[4]=(((r01*x15287))+((r00*x15286))+(((-1.0)*r02*sj3*x15292))+(((-1.0)*r01*x15285*x15291))+((r00*x15282*x15289)));
evalcond[5]=(((r21*x15282*x15286))+x15295+(((-1.0)*r20*x15287*x15291))+((r22*x15294))+((r20*x15285))+((r21*x15289)));
evalcond[6]=(((r11*x15282*x15286))+(((-1.0)*r10*x15287*x15291))+x15290+((r12*x15294))+((r10*x15285))+((r11*x15289))+(((-1.0)*x15288)));
evalcond[7]=((((-1.0)*r11*x15285*x15291))+x15295+((r10*x15286))+((r10*x15282*x15289))+((r11*x15287))+(((-1.0)*r12*sj3*x15292)));
evalcond[8]=((((-1.0)*x15290))+x15288+(((-1.0)*r21*x15285*x15291))+(((-1.0)*r22*sj3*x15292))+((r20*x15286))+((r20*x15282*x15289))+((r21*x15287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15297 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15297)==0){
continue;
}
IkReal x15296=pow(x15297,-0.5);
CheckValue<IkReal> x15298 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15298.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15298.value))));
IkReal gconst64=((1.0)*r11*x15296);
IkReal gconst65=((-1.0)*r10*x15296);
CheckValue<IkReal> x15299 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15299.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15299.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15302 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15302.valid){
continue;
}
IkReal x15300=((1.0)*(x15302.value));
IkReal x15301=x15296;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15300)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15300)));
IkReal gconst64=((1.0)*r11*x15301);
IkReal gconst65=((-1.0)*r10*x15301);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15303=gconst64*gconst64;
IkReal x15304=gconst65*gconst65;
IkReal x15305=(gconst65*r01);
IkReal x15306=(cj3*r22);
IkReal x15307=(gconst64*r00);
IkReal x15308=(cj3*r21);
IkReal x15309=((1.0)*gconst64*sj3);
IkReal x15310=((1.0)*cj3*r20);
CheckValue<IkReal> x15311 = IKatan2WithCheck(IkReal((((x15306*x15307))+((x15305*x15306)))),IkReal((((r00*x15303*x15308))+((gconst64*x15305*x15308))+(((-1.0)*r01*x15304*x15310))+(((-1.0)*gconst65*x15307*x15310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15311.valid){
continue;
}
CheckValue<IkReal> x15312=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x15304))+(((-1.0)*r20*x15305*x15309))+((r01*r21*sj3*x15303))+(((-1.0)*gconst65*r21*sj3*x15307))+((r02*r22*sj3)))),-1);
if(!x15312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15311.value)+(((1.5707963267949)*(x15312.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15313=IKsin(j4);
IkReal x15314=IKcos(j4);
IkReal x15315=(cj2*sj1);
IkReal x15316=(cj1*sj2);
IkReal x15317=(cj3*gconst64);
IkReal x15318=(gconst65*r21);
IkReal x15319=(sj1*sj2);
IkReal x15320=(gconst65*sj3);
IkReal x15321=(gconst64*sj3);
IkReal x15322=(cj3*gconst65);
IkReal x15323=(cj1*cj2);
IkReal x15324=((1.0)*x15314);
IkReal x15325=((1.0)*x15313);
IkReal x15326=(cj3*x15313);
IkReal x15327=(gconst64*x15313);
IkReal x15328=(x15315+x15316);
evalcond[0]=((((-1.0)*gconst65*r20*x15325))+((r21*x15327))+(((-1.0)*r22*x15324)));
evalcond[1]=(((r11*x15327))+(((-1.0)*gconst65*r10*x15325))+(((-1.0)*r12*x15324)));
evalcond[2]=((1.0)+((r01*x15327))+(((-1.0)*gconst65*r00*x15325))+(((-1.0)*r02*x15324)));
evalcond[3]=((((-1.0)*r00*x15322*x15324))+((r00*x15321))+((r01*x15320))+((r01*x15314*x15317))+((r02*x15326)));
evalcond[4]=((((-1.0)*r01*x15321*x15324))+((r00*x15317))+((r01*x15322))+((r00*x15314*x15320))+(((-1.0)*r02*sj3*x15325)));
evalcond[5]=(((sj3*x15318))+((r22*x15326))+x15328+(((-1.0)*r20*x15322*x15324))+((r21*x15314*x15317))+((r20*x15321)));
evalcond[6]=(((r11*x15320))+(((-1.0)*x15319))+((r12*x15326))+x15323+((r10*x15321))+((r11*x15314*x15317))+(((-1.0)*r10*x15322*x15324)));
evalcond[7]=((((-1.0)*r11*x15321*x15324))+((r11*x15322))+x15328+(((-1.0)*r12*sj3*x15325))+((r10*x15317))+((r10*x15314*x15320)));
evalcond[8]=(((r20*x15314*x15320))+(((-1.0)*x15323))+x15319+(((-1.0)*r22*sj3*x15325))+(((-1.0)*r21*x15321*x15324))+((r20*x15317))+((cj3*x15318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15329=((1.0)*gconst65);
CheckValue<IkReal> x15330 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst64*r11))+(((-1.0)*r10*x15329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15330.valid){
continue;
}
CheckValue<IkReal> x15331=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15329))+(((-1.0)*gconst64*r20)))),-1);
if(!x15331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15330.value)+(((1.5707963267949)*(x15331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15332=IKsin(j4);
IkReal x15333=IKcos(j4);
IkReal x15334=(cj2*sj1);
IkReal x15335=(cj1*sj2);
IkReal x15336=(cj3*gconst64);
IkReal x15337=(gconst65*r21);
IkReal x15338=(sj1*sj2);
IkReal x15339=(gconst65*sj3);
IkReal x15340=(gconst64*sj3);
IkReal x15341=(cj3*gconst65);
IkReal x15342=(cj1*cj2);
IkReal x15343=((1.0)*x15333);
IkReal x15344=((1.0)*x15332);
IkReal x15345=(cj3*x15332);
IkReal x15346=(gconst64*x15332);
IkReal x15347=(x15335+x15334);
evalcond[0]=(((r21*x15346))+(((-1.0)*r22*x15343))+(((-1.0)*gconst65*r20*x15344)));
evalcond[1]=((((-1.0)*r12*x15343))+((r11*x15346))+(((-1.0)*gconst65*r10*x15344)));
evalcond[2]=((1.0)+((r01*x15346))+(((-1.0)*gconst65*r00*x15344))+(((-1.0)*r02*x15343)));
evalcond[3]=(((r00*x15340))+((r01*x15339))+((r02*x15345))+((r01*x15333*x15336))+(((-1.0)*r00*x15341*x15343)));
evalcond[4]=(((r01*x15341))+((r00*x15336))+((r00*x15333*x15339))+(((-1.0)*r01*x15340*x15343))+(((-1.0)*r02*sj3*x15344)));
evalcond[5]=(((r22*x15345))+((sj3*x15337))+x15347+(((-1.0)*r20*x15341*x15343))+((r20*x15340))+((r21*x15333*x15336)));
evalcond[6]=(((r11*x15333*x15336))+(((-1.0)*x15338))+((r11*x15339))+((r10*x15340))+x15342+(((-1.0)*r10*x15341*x15343))+((r12*x15345)));
evalcond[7]=((((-1.0)*r12*sj3*x15344))+((r11*x15341))+((r10*x15333*x15339))+x15347+((r10*x15336))+(((-1.0)*r11*x15340*x15343)));
evalcond[8]=(((r20*x15336))+((cj3*x15337))+(((-1.0)*r21*x15340*x15343))+(((-1.0)*r22*sj3*x15344))+x15338+((r20*x15333*x15339))+(((-1.0)*x15342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15348=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15348);
rxp0_2=(py*r00);
rxp1_0=(r21*x15348);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15349=(r01*sj5);
IkReal x15350=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x15350))+x15349);
j4eval[1]=(((cj3*x15349))+(((-1.0)*cj3*x15350)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15351=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15351);
rxp0_2=(py*r00);
rxp1_0=(r21*x15351);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15352=(cj5*r00);
IkReal x15353=(r01*sj5);
j4eval[0]=(x15353+(((-1.0)*x15352)));
j4eval[1]=((((-1.0)*sj3*x15353))+((sj3*x15352)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15354=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15354);
rxp0_2=(py*r00);
rxp1_0=(r21*x15354);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15355=((1.0)*r00);
CheckValue<IkReal> x15356=IKPowWithIntegerCheck(cj3,-1);
if(!x15356.valid){
continue;
}
CheckValue<IkReal> x15357=IKPowWithIntegerCheck(r12,-1);
if(!x15357.valid){
continue;
}
CheckValue<IkReal> x15358=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15355))),-1);
if(!x15358.valid){
continue;
}
if( IKabs(((x15356.value)*(x15357.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15358.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15355)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15356.value)*(x15357.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15358.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15355))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15356.value)*(x15357.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15358.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15355))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15359=IKsin(j4);
IkReal x15360=IKcos(j4);
IkReal x15361=(cj2*sj1);
IkReal x15362=(cj1*sj2);
IkReal x15363=(sj1*sj2);
IkReal x15364=(cj5*sj3);
IkReal x15365=(cj3*cj5);
IkReal x15366=(r21*sj5);
IkReal x15367=(cj1*cj2);
IkReal x15368=(r00*sj5);
IkReal x15369=(r01*sj5);
IkReal x15370=(r20*sj5);
IkReal x15371=((1.0)*x15359);
IkReal x15372=(r20*x15360);
IkReal x15373=(r00*x15360);
IkReal x15374=(cj3*x15360);
IkReal x15375=(x15361+x15362);
IkReal x15376=((1.0)*sj3*x15360);
evalcond[0]=((-1.0)*r12*x15360);
evalcond[1]=(((x15359*x15366))+(((-1.0)*cj5*r20*x15371)));
evalcond[2]=(x15367+(((-1.0)*x15363))+((cj3*r12*x15359)));
evalcond[3]=((((-1.0)*r12*sj3*x15371))+x15375);
evalcond[4]=((1.0)+((x15359*x15369))+(((-1.0)*cj5*r00*x15371)));
evalcond[5]=(((x15369*x15374))+(((-1.0)*x15365*x15373))+((sj3*x15368))+((r01*x15364)));
evalcond[6]=((((-1.0)*x15369*x15376))+((cj3*x15368))+((x15364*x15373))+((r01*x15365)));
evalcond[7]=(((sj3*x15370))+x15375+((x15366*x15374))+(((-1.0)*x15365*x15372))+((r21*x15364)));
evalcond[8]=((((-1.0)*x15366*x15376))+((x15364*x15372))+x15363+(((-1.0)*x15367))+((cj3*x15370))+((r21*x15365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15377=((1.0)*r01);
IkReal x15378=(cj5*r00);
CheckValue<IkReal> x15379=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x15378))),-1);
if(!x15379.valid){
continue;
}
CheckValue<IkReal> x15380=IKPowWithIntegerCheck((((sj3*x15378))+(((-1.0)*sj3*sj5*x15377))),-1);
if(!x15380.valid){
continue;
}
if( IKabs(((-1.0)*(x15379.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15380.value)*(((((-1.0)*cj3*cj5*x15377))+(((-1.0)*cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15379.value)))+IKsqr(((x15380.value)*(((((-1.0)*cj3*cj5*x15377))+(((-1.0)*cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15379.value)), ((x15380.value)*(((((-1.0)*cj3*cj5*x15377))+(((-1.0)*cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15381=IKsin(j4);
IkReal x15382=IKcos(j4);
IkReal x15383=(cj2*sj1);
IkReal x15384=(cj1*sj2);
IkReal x15385=(sj1*sj2);
IkReal x15386=(cj5*sj3);
IkReal x15387=(cj3*cj5);
IkReal x15388=(r21*sj5);
IkReal x15389=(cj1*cj2);
IkReal x15390=(r00*sj5);
IkReal x15391=(r01*sj5);
IkReal x15392=(r20*sj5);
IkReal x15393=((1.0)*x15381);
IkReal x15394=(r20*x15382);
IkReal x15395=(r00*x15382);
IkReal x15396=(cj3*x15382);
IkReal x15397=(x15384+x15383);
IkReal x15398=((1.0)*sj3*x15382);
evalcond[0]=((-1.0)*r12*x15382);
evalcond[1]=((((-1.0)*cj5*r20*x15393))+((x15381*x15388)));
evalcond[2]=(x15389+(((-1.0)*x15385))+((cj3*r12*x15381)));
evalcond[3]=(x15397+(((-1.0)*r12*sj3*x15393)));
evalcond[4]=((1.0)+((x15381*x15391))+(((-1.0)*cj5*r00*x15393)));
evalcond[5]=(((r01*x15386))+(((-1.0)*x15387*x15395))+((sj3*x15390))+((x15391*x15396)));
evalcond[6]=(((r01*x15387))+((x15386*x15395))+((cj3*x15390))+(((-1.0)*x15391*x15398)));
evalcond[7]=(((r21*x15386))+x15397+(((-1.0)*x15387*x15394))+((sj3*x15392))+((x15388*x15396)));
evalcond[8]=(((r21*x15387))+((x15386*x15394))+(((-1.0)*x15388*x15398))+((cj3*x15392))+x15385+(((-1.0)*x15389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15399=((1.0)*r00);
IkReal x15400=(r01*sj5);
CheckValue<IkReal> x15401=IKPowWithIntegerCheck(((((-1.0)*cj5*x15399))+x15400),-1);
if(!x15401.valid){
continue;
}
CheckValue<IkReal> x15402=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x15399))+((cj3*x15400))),-1);
if(!x15402.valid){
continue;
}
if( IKabs(((-1.0)*(x15401.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15402.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15399)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15401.value)))+IKsqr(((x15402.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15399))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15401.value)), ((x15402.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15399))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15403=IKsin(j4);
IkReal x15404=IKcos(j4);
IkReal x15405=(cj2*sj1);
IkReal x15406=(cj1*sj2);
IkReal x15407=(sj1*sj2);
IkReal x15408=(cj5*sj3);
IkReal x15409=(cj3*cj5);
IkReal x15410=(r21*sj5);
IkReal x15411=(cj1*cj2);
IkReal x15412=(r00*sj5);
IkReal x15413=(r01*sj5);
IkReal x15414=(r20*sj5);
IkReal x15415=((1.0)*x15403);
IkReal x15416=(r20*x15404);
IkReal x15417=(r00*x15404);
IkReal x15418=(cj3*x15404);
IkReal x15419=(x15405+x15406);
IkReal x15420=((1.0)*sj3*x15404);
evalcond[0]=((-1.0)*r12*x15404);
evalcond[1]=(((x15403*x15410))+(((-1.0)*cj5*r20*x15415)));
evalcond[2]=((((-1.0)*x15407))+x15411+((cj3*r12*x15403)));
evalcond[3]=(x15419+(((-1.0)*r12*sj3*x15415)));
evalcond[4]=((1.0)+((x15403*x15413))+(((-1.0)*cj5*r00*x15415)));
evalcond[5]=((((-1.0)*x15409*x15417))+((r01*x15408))+((sj3*x15412))+((x15413*x15418)));
evalcond[6]=(((cj3*x15412))+(((-1.0)*x15413*x15420))+((r01*x15409))+((x15408*x15417)));
evalcond[7]=((((-1.0)*x15409*x15416))+((sj3*x15414))+((x15410*x15418))+x15419+((r21*x15408)));
evalcond[8]=(((cj3*x15414))+(((-1.0)*x15410*x15420))+(((-1.0)*x15411))+((x15408*x15416))+x15407+((r21*x15409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15421=cj5*cj5;
IkReal x15422=(cj3*r20);
IkReal x15423=(r21*sj3);
IkReal x15424=((1.0)*cj3);
IkReal x15425=(r01*r21);
IkReal x15426=(r01*sj3);
IkReal x15427=(r00*sj5);
IkReal x15428=(cj5*r01*sj5);
IkReal x15429=((1.0)*x15421);
CheckValue<IkReal> x15430=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x15424))+(((-1.0)*x15424*x15425))+((x15422*x15428))+((cj3*x15421*x15425))+(((-1.0)*r00*x15422*x15429))+((cj3*cj5*r21*x15427)))),-1);
if(!x15430.valid){
continue;
}
CheckValue<IkReal> x15431 = IKatan2WithCheck(IkReal((((cj5*r22*x15426))+((r22*sj3*x15427)))),IkReal((((x15423*x15428))+((r00*x15423))+(((-1.0)*r20*x15426*x15429))+(((-1.0)*r00*x15423*x15429))+(((-1.0)*cj5*r20*sj3*x15427)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15430.value)))+(x15431.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15432=IKsin(j4);
IkReal x15433=IKcos(j4);
IkReal x15434=(cj2*sj1);
IkReal x15435=(cj1*sj2);
IkReal x15436=(r11*sj5);
IkReal x15437=(cj5*r10);
IkReal x15438=(sj1*sj2);
IkReal x15439=(cj5*r01);
IkReal x15440=(cj5*r00);
IkReal x15441=(cj3*sj5);
IkReal x15442=(r21*sj5);
IkReal x15443=(cj1*cj2);
IkReal x15444=(cj5*sj3);
IkReal x15445=(sj3*sj5);
IkReal x15446=(r01*sj5);
IkReal x15447=(cj3*cj5);
IkReal x15448=(cj5*r20);
IkReal x15449=((1.0)*x15433);
IkReal x15450=((1.0)*x15432);
IkReal x15451=(cj3*x15433);
IkReal x15452=(sj3*x15433);
IkReal x15453=(cj3*x15432);
IkReal x15454=(x15434+x15435);
evalcond[0]=(((x15432*x15442))+(((-1.0)*r22*x15449))+(((-1.0)*x15448*x15450)));
evalcond[1]=((((-1.0)*r12*x15449))+((x15432*x15436))+(((-1.0)*x15437*x15450)));
evalcond[2]=((1.0)+((x15432*x15446))+(((-1.0)*x15440*x15450))+(((-1.0)*r02*x15449)));
evalcond[3]=(((r00*x15445))+((sj3*x15439))+((r02*x15453))+((r01*x15433*x15441))+(((-1.0)*cj3*x15440*x15449)));
evalcond[4]=(((r00*x15441))+(((-1.0)*r02*sj3*x15450))+(((-1.0)*r01*x15445*x15449))+((cj3*x15439))+((x15440*x15452)));
evalcond[5]=((((-1.0)*r20*x15447*x15449))+((r20*x15445))+((r21*x15433*x15441))+((r22*x15453))+x15454+((r21*x15444)));
evalcond[6]=(((r11*x15444))+((x15436*x15451))+((r10*x15445))+((r12*x15453))+(((-1.0)*x15438))+(((-1.0)*cj3*x15437*x15449))+x15443);
evalcond[7]=(((x15437*x15452))+((r11*x15447))+((r10*x15441))+x15454+(((-1.0)*r12*sj3*x15450))+(((-1.0)*sj3*x15436*x15449)));
evalcond[8]=(((r20*x15441))+(((-1.0)*r22*sj3*x15450))+((r20*x15433*x15444))+x15438+(((-1.0)*sj3*x15442*x15449))+(((-1.0)*x15443))+((r21*x15447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15455=((1.0)*cj5);
CheckValue<IkReal> x15456=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15455))+(((-1.0)*r20*sj5)))),-1);
if(!x15456.valid){
continue;
}
CheckValue<IkReal> x15457 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15455)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15456.value)))+(x15457.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15458=IKsin(j4);
IkReal x15459=IKcos(j4);
IkReal x15460=(cj2*sj1);
IkReal x15461=(cj1*sj2);
IkReal x15462=(r11*sj5);
IkReal x15463=(cj5*r10);
IkReal x15464=(sj1*sj2);
IkReal x15465=(cj5*r01);
IkReal x15466=(cj5*r00);
IkReal x15467=(cj3*sj5);
IkReal x15468=(r21*sj5);
IkReal x15469=(cj1*cj2);
IkReal x15470=(cj5*sj3);
IkReal x15471=(sj3*sj5);
IkReal x15472=(r01*sj5);
IkReal x15473=(cj3*cj5);
IkReal x15474=(cj5*r20);
IkReal x15475=((1.0)*x15459);
IkReal x15476=((1.0)*x15458);
IkReal x15477=(cj3*x15459);
IkReal x15478=(sj3*x15459);
IkReal x15479=(cj3*x15458);
IkReal x15480=(x15461+x15460);
evalcond[0]=(((x15458*x15468))+(((-1.0)*r22*x15475))+(((-1.0)*x15474*x15476)));
evalcond[1]=(((x15458*x15462))+(((-1.0)*x15463*x15476))+(((-1.0)*r12*x15475)));
evalcond[2]=((1.0)+((x15458*x15472))+(((-1.0)*x15466*x15476))+(((-1.0)*r02*x15475)));
evalcond[3]=(((r02*x15479))+((r01*x15459*x15467))+(((-1.0)*cj3*x15466*x15475))+((r00*x15471))+((sj3*x15465)));
evalcond[4]=(((r00*x15467))+((cj3*x15465))+((x15466*x15478))+(((-1.0)*r01*x15471*x15475))+(((-1.0)*r02*sj3*x15476)));
evalcond[5]=(((r22*x15479))+((r21*x15470))+((r21*x15459*x15467))+x15480+(((-1.0)*r20*x15473*x15475))+((r20*x15471)));
evalcond[6]=((((-1.0)*x15464))+((x15462*x15477))+((r12*x15479))+x15469+((r11*x15470))+(((-1.0)*cj3*x15463*x15475))+((r10*x15471)));
evalcond[7]=((((-1.0)*r12*sj3*x15476))+((x15463*x15478))+x15480+(((-1.0)*sj3*x15462*x15475))+((r10*x15467))+((r11*x15473)));
evalcond[8]=(((r20*x15459*x15470))+(((-1.0)*x15469))+((r21*x15473))+x15464+((r20*x15467))+(((-1.0)*r22*sj3*x15476))+(((-1.0)*sj3*x15468*x15475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15481 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15481.valid){
continue;
}
CheckValue<IkReal> x15482=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15481.value)+(((1.5707963267949)*(x15482.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15483=IKsin(j4);
IkReal x15484=IKcos(j4);
IkReal x15485=(cj2*sj1);
IkReal x15486=(cj1*sj2);
IkReal x15487=(r11*sj5);
IkReal x15488=(cj5*r10);
IkReal x15489=(sj1*sj2);
IkReal x15490=(cj5*r01);
IkReal x15491=(cj5*r00);
IkReal x15492=(cj3*sj5);
IkReal x15493=(r21*sj5);
IkReal x15494=(cj1*cj2);
IkReal x15495=(cj5*sj3);
IkReal x15496=(sj3*sj5);
IkReal x15497=(r01*sj5);
IkReal x15498=(cj3*cj5);
IkReal x15499=(cj5*r20);
IkReal x15500=((1.0)*x15484);
IkReal x15501=((1.0)*x15483);
IkReal x15502=(cj3*x15484);
IkReal x15503=(sj3*x15484);
IkReal x15504=(cj3*x15483);
IkReal x15505=(x15485+x15486);
evalcond[0]=((((-1.0)*r22*x15500))+(((-1.0)*x15499*x15501))+((x15483*x15493)));
evalcond[1]=(((x15483*x15487))+(((-1.0)*x15488*x15501))+(((-1.0)*r12*x15500)));
evalcond[2]=((1.0)+(((-1.0)*x15491*x15501))+(((-1.0)*r02*x15500))+((x15483*x15497)));
evalcond[3]=(((r00*x15496))+(((-1.0)*cj3*x15491*x15500))+((sj3*x15490))+((r02*x15504))+((r01*x15484*x15492)));
evalcond[4]=(((r00*x15492))+(((-1.0)*r02*sj3*x15501))+(((-1.0)*r01*x15496*x15500))+((x15491*x15503))+((cj3*x15490)));
evalcond[5]=(((r22*x15504))+((r20*x15496))+((r21*x15484*x15492))+(((-1.0)*r20*x15498*x15500))+x15505+((r21*x15495)));
evalcond[6]=(((x15487*x15502))+(((-1.0)*cj3*x15488*x15500))+((r10*x15496))+((r11*x15495))+((r12*x15504))+x15494+(((-1.0)*x15489)));
evalcond[7]=(((x15488*x15503))+((r10*x15492))+((r11*x15498))+(((-1.0)*sj3*x15487*x15500))+(((-1.0)*r12*sj3*x15501))+x15505);
evalcond[8]=((((-1.0)*r22*sj3*x15501))+((r20*x15492))+x15489+(((-1.0)*sj3*x15493*x15500))+((r20*x15484*x15495))+((r21*x15498))+(((-1.0)*x15494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15506=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15506);
rxp1_1=(px*r21);
rxp1_2=(r11*x15506);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15507=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15507);
rxp1_1=(px*r21);
rxp1_2=(r11*x15507);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15508=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15508)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15508)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15509=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15509);
rxp1_1=(px*r21);
rxp1_2=(r11*x15509);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15510=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15510);
rxp1_1=(px*r21);
rxp1_2=(r11*x15510);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15511=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15511);
rxp1_1=(px*r21);
rxp1_2=(r11*x15511);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15512=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15512);
rxp1_1=(px*r21);
rxp1_2=(r11*x15512);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15515=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15515.valid){
continue;
}
IkReal x15513=x15515.value;
IkReal x15514=(sj0*x15513);
cj4array[0]=(((cj1*sj2*x15514))+((cj2*sj1*x15514)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15516=IKsin(j4);
IkReal x15517=IKcos(j4);
IkReal x15518=(cj5*r20);
IkReal x15519=(r21*sj5);
IkReal x15520=((1.0)*x15516);
IkReal x15521=((1.0)*x15517);
evalcond[0]=((-1.0)*r02*x15516);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15521)));
evalcond[2]=((((-1.0)*x15518*x15520))+((x15516*x15519)));
evalcond[3]=(((r11*sj5*x15516))+(((-1.0)*cj5*r10*x15520)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x15517*x15518))+(((-1.0)*x15519*x15521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15523=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15523.valid){
continue;
}
IkReal x15522=x15523.value;
cj4array[0]=(((cj1*cj2*x15522))+(((-1.0)*sj1*sj2*x15522)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15524=IKsin(j4);
IkReal x15525=IKcos(j4);
IkReal x15526=(r11*sj5);
IkReal x15527=((1.0)*sj0);
IkReal x15528=((1.0)*x15525);
IkReal x15529=((1.0)*cj5*x15524);
evalcond[0]=((-1.0)*r02*x15524);
evalcond[1]=((((-1.0)*x15527))+(((-1.0)*r02*x15528)));
evalcond[2]=((((-1.0)*r20*x15529))+((r21*sj5*x15524)));
evalcond[3]=(((x15524*x15526))+(((-1.0)*r10*x15529)));
evalcond[4]=((((-1.0)*cj2*sj1*x15527))+((cj5*r10*x15525))+(((-1.0)*x15526*x15528))+(((-1.0)*cj1*sj2*x15527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15530=IKPowWithIntegerCheck(r02,-1);
if(!x15530.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15530.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15531=IKsin(j4);
IkReal x15532=IKcos(j4);
IkReal x15533=((1.0)*sj0);
IkReal x15534=(cj5*x15532);
IkReal x15535=(sj5*x15531);
IkReal x15536=((1.0)*sj5*x15532);
IkReal x15537=((1.0)*cj5*x15531);
evalcond[0]=((-1.0)*r02*x15531);
evalcond[1]=(((r21*x15535))+(((-1.0)*r20*x15537)));
evalcond[2]=(((r11*x15535))+(((-1.0)*r10*x15537)));
evalcond[3]=((((-1.0)*r21*x15536))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15534)));
evalcond[4]=(((r10*x15534))+(((-1.0)*cj2*sj1*x15533))+(((-1.0)*r11*x15536))+(((-1.0)*cj1*sj2*x15533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15538=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15538);
rxp1_1=(px*r21);
rxp1_2=(r11*x15538);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15539=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15539);
rxp1_1=(px*r21);
rxp1_2=(r11*x15539);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15540=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15540);
rxp1_1=(px*r21);
rxp1_2=(r11*x15540);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15543=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15543.valid){
continue;
}
IkReal x15541=x15543.value;
IkReal x15542=(sj0*x15541);
cj4array[0]=(((cj2*sj1*x15542))+((cj1*sj2*x15542)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15544=IKsin(j4);
IkReal x15545=IKcos(j4);
IkReal x15546=(r21*sj5);
IkReal x15547=((1.0)*cj5*r20);
evalcond[0]=(r02*x15544);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15545)));
evalcond[2]=((((-1.0)*x15544*x15547))+((x15544*x15546)));
evalcond[3]=(((r11*sj5*x15544))+(((-1.0)*cj5*r10*x15544)));
evalcond[4]=(((x15545*x15546))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15545*x15547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15549=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15549.valid){
continue;
}
IkReal x15548=x15549.value;
cj4array[0]=(((cj1*cj2*x15548))+(((-1.0)*sj1*sj2*x15548)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15550=IKsin(j4);
IkReal x15551=IKcos(j4);
IkReal x15552=((1.0)*sj0);
IkReal x15553=((1.0)*cj5);
IkReal x15554=(sj5*x15550);
evalcond[0]=(r02*x15550);
evalcond[1]=((((-1.0)*r02*x15551))+(((-1.0)*x15552)));
evalcond[2]=(((r21*x15554))+(((-1.0)*r20*x15550*x15553)));
evalcond[3]=(((r11*x15554))+(((-1.0)*r10*x15550*x15553)));
evalcond[4]=(((r11*sj5*x15551))+(((-1.0)*r10*x15551*x15553))+(((-1.0)*cj1*sj2*x15552))+(((-1.0)*cj2*sj1*x15552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15555=IKPowWithIntegerCheck(r02,-1);
if(!x15555.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15555.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15556=IKsin(j4);
IkReal x15557=IKcos(j4);
IkReal x15558=((1.0)*cj1);
IkReal x15559=(r21*sj5);
IkReal x15560=((1.0)*cj5);
IkReal x15561=(r11*sj5);
evalcond[0]=(r02*x15556);
evalcond[1]=(((x15556*x15559))+(((-1.0)*r20*x15556*x15560)));
evalcond[2]=(((x15556*x15561))+(((-1.0)*r10*x15556*x15560)));
evalcond[3]=((((-1.0)*cj2*x15558))+((sj1*sj2))+(((-1.0)*r20*x15557*x15560))+((x15557*x15559)));
evalcond[4]=((((-1.0)*r10*x15557*x15560))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x15558))+((x15557*x15561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15562 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15562.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15562.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15563 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15563.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15563.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15564=((-1.0)*r10);
CheckValue<IkReal> x15566 = IKatan2WithCheck(IkReal(x15564),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15566.valid){
continue;
}
IkReal x15565=((-1.0)*(x15566.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15564);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15565;
IkReal gconst66=x15565;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15567=((-1.0)*r10);
CheckValue<IkReal> x15569 = IKatan2WithCheck(IkReal(x15567),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15569.valid){
continue;
}
IkReal x15568=((-1.0)*(x15569.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15567);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15568;
IkReal gconst66=x15568;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15570=((-1.0)*r10);
CheckValue<IkReal> x15572 = IKatan2WithCheck(IkReal(x15570),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15572.valid){
continue;
}
IkReal x15571=((-1.0)*(x15572.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15570);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15571;
IkReal gconst66=x15571;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15573=((1.0)*gconst67);
IkReal x15574=(cj1*cj2);
IkReal x15575=((1.0)*sj1*sj2);
CheckValue<IkReal> x15576=IKPowWithIntegerCheck(cj3,-1);
if(!x15576.valid){
continue;
}
CheckValue<IkReal> x15577=IKPowWithIntegerCheck(r02,-1);
if(!x15577.valid){
continue;
}
CheckValue<IkReal> x15578=IKPowWithIntegerCheck((((gconst68*r20*sj3))+(((-1.0)*r21*sj3*x15573))),-1);
if(!x15578.valid){
continue;
}
if( IKabs(((x15576.value)*(x15577.value)*((((cj0*x15574))+(((-1.0)*cj0*x15575)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15578.value)*(((((-1.0)*cj3*r20*x15573))+x15574+(((-1.0)*x15575))+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15576.value)*(x15577.value)*((((cj0*x15574))+(((-1.0)*cj0*x15575))))))+IKsqr(((x15578.value)*(((((-1.0)*cj3*r20*x15573))+x15574+(((-1.0)*x15575))+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15576.value)*(x15577.value)*((((cj0*x15574))+(((-1.0)*cj0*x15575))))), ((x15578.value)*(((((-1.0)*cj3*r20*x15573))+x15574+(((-1.0)*x15575))+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15579=IKsin(j4);
IkReal x15580=IKcos(j4);
IkReal x15581=(sj1*sj2);
IkReal x15582=(gconst68*sj3);
IkReal x15583=(gconst67*r11);
IkReal x15584=(gconst67*sj3);
IkReal x15585=((1.0)*gconst68);
IkReal x15586=(cj2*sj1);
IkReal x15587=((1.0)*cj0);
IkReal x15588=((1.0)*sj0);
IkReal x15589=(cj3*gconst67);
IkReal x15590=(cj3*gconst68);
IkReal x15591=(cj1*sj2);
IkReal x15592=(gconst67*r21);
IkReal x15593=((1.0)*cj1*cj2);
IkReal x15594=(cj3*x15580);
IkReal x15595=((1.0)*x15580);
IkReal x15596=(r02*x15579);
evalcond[0]=((((-1.0)*x15588))+(((-1.0)*r02*x15595)));
evalcond[1]=((((-1.0)*r20*x15579*x15585))+((x15579*x15592)));
evalcond[2]=(cj0+(((-1.0)*r10*x15579*x15585))+((x15579*x15583)));
evalcond[3]=(((cj0*x15581))+(((-1.0)*cj1*cj2*x15587))+((cj3*x15596)));
evalcond[4]=((((-1.0)*x15586*x15587))+(((-1.0)*x15587*x15591))+(((-1.0)*sj3*x15596)));
evalcond[5]=(((r21*x15580*x15589))+(((-1.0)*r20*x15585*x15594))+x15591+x15586+((r20*x15584))+((r21*x15582)));
evalcond[6]=((((-1.0)*r21*x15584*x15595))+((r21*x15590))+(((-1.0)*x15593))+((r20*x15580*x15582))+x15581+((r20*x15589)));
evalcond[7]=((((-1.0)*r10*x15585*x15594))+((r11*x15582))+(((-1.0)*cj1*cj2*x15588))+((r10*x15584))+((x15583*x15594))+((sj0*x15581)));
evalcond[8]=((((-1.0)*sj3*x15583*x15595))+(((-1.0)*x15586*x15588))+((r10*x15580*x15582))+((r11*x15590))+((r10*x15589))+(((-1.0)*x15588*x15591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15599=IKPowWithIntegerCheck(r02,-1);
if(!x15599.valid){
continue;
}
IkReal x15597=x15599.value;
IkReal x15598=((1.0)*cj0);
CheckValue<IkReal> x15600=IKPowWithIntegerCheck(sj3,-1);
if(!x15600.valid){
continue;
}
if( IKabs((x15597*(x15600.value)*(((((-1.0)*cj1*sj2*x15598))+(((-1.0)*cj2*sj1*x15598)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15597)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15597*(x15600.value)*(((((-1.0)*cj1*sj2*x15598))+(((-1.0)*cj2*sj1*x15598))))))+IKsqr(((-1.0)*sj0*x15597))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15597*(x15600.value)*(((((-1.0)*cj1*sj2*x15598))+(((-1.0)*cj2*sj1*x15598))))), ((-1.0)*sj0*x15597));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15601=IKsin(j4);
IkReal x15602=IKcos(j4);
IkReal x15603=(sj1*sj2);
IkReal x15604=(gconst68*sj3);
IkReal x15605=(gconst67*r11);
IkReal x15606=(gconst67*sj3);
IkReal x15607=((1.0)*gconst68);
IkReal x15608=(cj2*sj1);
IkReal x15609=((1.0)*cj0);
IkReal x15610=((1.0)*sj0);
IkReal x15611=(cj3*gconst67);
IkReal x15612=(cj3*gconst68);
IkReal x15613=(cj1*sj2);
IkReal x15614=(gconst67*r21);
IkReal x15615=((1.0)*cj1*cj2);
IkReal x15616=(cj3*x15602);
IkReal x15617=((1.0)*x15602);
IkReal x15618=(r02*x15601);
evalcond[0]=((((-1.0)*x15610))+(((-1.0)*r02*x15617)));
evalcond[1]=((((-1.0)*r20*x15601*x15607))+((x15601*x15614)));
evalcond[2]=(cj0+(((-1.0)*r10*x15601*x15607))+((x15601*x15605)));
evalcond[3]=(((cj0*x15603))+((cj3*x15618))+(((-1.0)*cj1*cj2*x15609)));
evalcond[4]=((((-1.0)*x15609*x15613))+(((-1.0)*sj3*x15618))+(((-1.0)*x15608*x15609)));
evalcond[5]=(((r21*x15602*x15611))+x15608+x15613+(((-1.0)*r20*x15607*x15616))+((r20*x15606))+((r21*x15604)));
evalcond[6]=(((r21*x15612))+(((-1.0)*x15615))+(((-1.0)*r21*x15606*x15617))+x15603+((r20*x15611))+((r20*x15602*x15604)));
evalcond[7]=((((-1.0)*r10*x15607*x15616))+((x15605*x15616))+((r10*x15606))+(((-1.0)*cj1*cj2*x15610))+((r11*x15604))+((sj0*x15603)));
evalcond[8]=((((-1.0)*sj3*x15605*x15617))+(((-1.0)*x15610*x15613))+((r11*x15612))+((r10*x15611))+((r10*x15602*x15604))+(((-1.0)*x15608*x15610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15620=IKPowWithIntegerCheck(r02,-1);
if(!x15620.valid){
continue;
}
IkReal x15619=x15620.value;
CheckValue<IkReal> x15621=IKPowWithIntegerCheck(cj3,-1);
if(!x15621.valid){
continue;
}
if( IKabs((x15619*(x15621.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15619)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15619*(x15621.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15619))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15619*(x15621.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15619));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15622=IKsin(j4);
IkReal x15623=IKcos(j4);
IkReal x15624=(sj1*sj2);
IkReal x15625=(gconst68*sj3);
IkReal x15626=(gconst67*r11);
IkReal x15627=(gconst67*sj3);
IkReal x15628=((1.0)*gconst68);
IkReal x15629=(cj2*sj1);
IkReal x15630=((1.0)*cj0);
IkReal x15631=((1.0)*sj0);
IkReal x15632=(cj3*gconst67);
IkReal x15633=(cj3*gconst68);
IkReal x15634=(cj1*sj2);
IkReal x15635=(gconst67*r21);
IkReal x15636=((1.0)*cj1*cj2);
IkReal x15637=(cj3*x15623);
IkReal x15638=((1.0)*x15623);
IkReal x15639=(r02*x15622);
evalcond[0]=((((-1.0)*r02*x15638))+(((-1.0)*x15631)));
evalcond[1]=((((-1.0)*r20*x15622*x15628))+((x15622*x15635)));
evalcond[2]=(cj0+(((-1.0)*r10*x15622*x15628))+((x15622*x15626)));
evalcond[3]=((((-1.0)*cj1*cj2*x15630))+((cj3*x15639))+((cj0*x15624)));
evalcond[4]=((((-1.0)*x15630*x15634))+(((-1.0)*sj3*x15639))+(((-1.0)*x15629*x15630)));
evalcond[5]=(((r21*x15625))+((r21*x15623*x15632))+x15629+x15634+((r20*x15627))+(((-1.0)*r20*x15628*x15637)));
evalcond[6]=((((-1.0)*r21*x15627*x15638))+((r20*x15632))+x15624+((r21*x15633))+((r20*x15623*x15625))+(((-1.0)*x15636)));
evalcond[7]=((((-1.0)*cj1*cj2*x15631))+((sj0*x15624))+((x15626*x15637))+(((-1.0)*r10*x15628*x15637))+((r11*x15625))+((r10*x15627)));
evalcond[8]=(((r10*x15623*x15625))+(((-1.0)*x15631*x15634))+(((-1.0)*sj3*x15626*x15638))+(((-1.0)*x15629*x15631))+((r11*x15633))+((r10*x15632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15640=((-1.0)*r10);
CheckValue<IkReal> x15641 = IKatan2WithCheck(IkReal(x15640),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15641.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15641.value))));
IkReal gconst70=x15640;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15642 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15642.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15642.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15643=((-1.0)*r10);
IkReal x15644=((-1.0)*r11);
CheckValue<IkReal> x15646 = IKatan2WithCheck(IkReal(x15643),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15646.valid){
continue;
}
IkReal x15645=((1.0)*(x15646.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15643);
rxp1_1=(px*r21);
rxp1_2=(px*x15644);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15645)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15645)));
IkReal gconst70=x15643;
IkReal gconst71=x15644;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15647=((-1.0)*r10);
IkReal x15648=((-1.0)*r11);
CheckValue<IkReal> x15650 = IKatan2WithCheck(IkReal(x15647),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15650.valid){
continue;
}
IkReal x15649=((1.0)*(x15650.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15647);
rxp1_1=(px*r21);
rxp1_2=(px*x15648);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15649)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15649)));
IkReal gconst70=x15647;
IkReal gconst71=x15648;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15651=((-1.0)*r10);
IkReal x15652=((-1.0)*r11);
CheckValue<IkReal> x15654 = IKatan2WithCheck(IkReal(x15651),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15654.valid){
continue;
}
IkReal x15653=((1.0)*(x15654.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15651);
rxp1_1=(px*r21);
rxp1_2=(px*x15652);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15653)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15653)));
IkReal gconst70=x15651;
IkReal gconst71=x15652;
IkReal x15655=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r10*r21*x15655))+(((-1.0)*r11*r20*x15655)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15656=((1.0)*r21);
IkReal x15657=(cj1*cj2);
IkReal x15658=((1.0)*sj1*sj2);
CheckValue<IkReal> x15659=IKPowWithIntegerCheck(cj3,-1);
if(!x15659.valid){
continue;
}
CheckValue<IkReal> x15660=IKPowWithIntegerCheck(r02,-1);
if(!x15660.valid){
continue;
}
CheckValue<IkReal> x15661=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15656))+((gconst71*r20*sj3))),-1);
if(!x15661.valid){
continue;
}
if( IKabs(((x15659.value)*(x15660.value)*(((((-1.0)*cj0*x15658))+((cj0*x15657)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15661.value)*((x15657+(((-1.0)*x15658))+(((-1.0)*cj3*gconst71*x15656))+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15659.value)*(x15660.value)*(((((-1.0)*cj0*x15658))+((cj0*x15657))))))+IKsqr(((x15661.value)*((x15657+(((-1.0)*x15658))+(((-1.0)*cj3*gconst71*x15656))+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15659.value)*(x15660.value)*(((((-1.0)*cj0*x15658))+((cj0*x15657))))), ((x15661.value)*((x15657+(((-1.0)*x15658))+(((-1.0)*cj3*gconst71*x15656))+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15662=IKsin(j4);
IkReal x15663=IKcos(j4);
IkReal x15664=(cj3*gconst70);
IkReal x15665=(sj1*sj2);
IkReal x15666=((1.0)*gconst71);
IkReal x15667=(gconst71*sj3);
IkReal x15668=(cj2*sj1);
IkReal x15669=((1.0)*sj0);
IkReal x15670=(gconst70*r11);
IkReal x15671=(gconst70*sj3);
IkReal x15672=((1.0)*cj0);
IkReal x15673=(cj3*gconst71);
IkReal x15674=(cj1*sj2);
IkReal x15675=((1.0)*cj1*cj2);
IkReal x15676=(r21*x15663);
IkReal x15677=(r10*x15663);
IkReal x15678=((1.0)*x15663);
IkReal x15679=(r02*x15662);
IkReal x15680=(r20*x15663);
evalcond[0]=((((-1.0)*x15669))+(((-1.0)*r02*x15678)));
evalcond[1]=(((gconst70*r21*x15662))+(((-1.0)*r20*x15662*x15666)));
evalcond[2]=(cj0+((x15662*x15670))+(((-1.0)*r10*x15662*x15666)));
evalcond[3]=(((cj3*x15679))+(((-1.0)*cj1*cj2*x15672))+((cj0*x15665)));
evalcond[4]=((((-1.0)*x15672*x15674))+(((-1.0)*sj3*x15679))+(((-1.0)*x15668*x15672)));
evalcond[5]=(((r20*x15671))+x15668+x15674+(((-1.0)*cj3*x15666*x15680))+((r21*x15667))+((x15664*x15676)));
evalcond[6]=(((x15667*x15680))+(((-1.0)*x15675))+((r20*x15664))+x15665+((r21*x15673))+(((-1.0)*x15671*x15676)));
evalcond[7]=((((-1.0)*cj3*x15666*x15677))+((r11*x15663*x15664))+((r10*x15671))+((r11*x15667))+((sj0*x15665))+(((-1.0)*cj1*cj2*x15669)));
evalcond[8]=(((r10*x15664))+((r11*x15673))+(((-1.0)*sj3*x15670*x15678))+(((-1.0)*x15669*x15674))+(((-1.0)*x15668*x15669))+((x15667*x15677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15683=IKPowWithIntegerCheck(r02,-1);
if(!x15683.valid){
continue;
}
IkReal x15681=x15683.value;
IkReal x15682=((1.0)*cj0);
CheckValue<IkReal> x15684=IKPowWithIntegerCheck(sj3,-1);
if(!x15684.valid){
continue;
}
if( IKabs((x15681*(x15684.value)*(((((-1.0)*cj1*sj2*x15682))+(((-1.0)*cj2*sj1*x15682)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15681)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15681*(x15684.value)*(((((-1.0)*cj1*sj2*x15682))+(((-1.0)*cj2*sj1*x15682))))))+IKsqr(((-1.0)*sj0*x15681))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15681*(x15684.value)*(((((-1.0)*cj1*sj2*x15682))+(((-1.0)*cj2*sj1*x15682))))), ((-1.0)*sj0*x15681));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15685=IKsin(j4);
IkReal x15686=IKcos(j4);
IkReal x15687=(cj3*gconst70);
IkReal x15688=(sj1*sj2);
IkReal x15689=((1.0)*gconst71);
IkReal x15690=(gconst71*sj3);
IkReal x15691=(cj2*sj1);
IkReal x15692=((1.0)*sj0);
IkReal x15693=(gconst70*r11);
IkReal x15694=(gconst70*sj3);
IkReal x15695=((1.0)*cj0);
IkReal x15696=(cj3*gconst71);
IkReal x15697=(cj1*sj2);
IkReal x15698=((1.0)*cj1*cj2);
IkReal x15699=(r21*x15686);
IkReal x15700=(r10*x15686);
IkReal x15701=((1.0)*x15686);
IkReal x15702=(r02*x15685);
IkReal x15703=(r20*x15686);
evalcond[0]=((((-1.0)*x15692))+(((-1.0)*r02*x15701)));
evalcond[1]=((((-1.0)*r20*x15685*x15689))+((gconst70*r21*x15685)));
evalcond[2]=(cj0+(((-1.0)*r10*x15685*x15689))+((x15685*x15693)));
evalcond[3]=(((cj3*x15702))+((cj0*x15688))+(((-1.0)*cj1*cj2*x15695)));
evalcond[4]=((((-1.0)*x15695*x15697))+(((-1.0)*sj3*x15702))+(((-1.0)*x15691*x15695)));
evalcond[5]=((((-1.0)*cj3*x15689*x15703))+((r20*x15694))+((r21*x15690))+x15691+x15697+((x15687*x15699)));
evalcond[6]=(((r20*x15687))+(((-1.0)*x15698))+(((-1.0)*x15694*x15699))+((r21*x15696))+x15688+((x15690*x15703)));
evalcond[7]=(((r10*x15694))+(((-1.0)*cj3*x15689*x15700))+((r11*x15690))+((r11*x15686*x15687))+(((-1.0)*cj1*cj2*x15692))+((sj0*x15688)));
evalcond[8]=(((r10*x15687))+((r11*x15696))+((x15690*x15700))+(((-1.0)*x15691*x15692))+(((-1.0)*x15692*x15697))+(((-1.0)*sj3*x15693*x15701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15705=IKPowWithIntegerCheck(r02,-1);
if(!x15705.valid){
continue;
}
IkReal x15704=x15705.value;
CheckValue<IkReal> x15706=IKPowWithIntegerCheck(cj3,-1);
if(!x15706.valid){
continue;
}
if( IKabs((x15704*(x15706.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15704)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15704*(x15706.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15704))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15704*(x15706.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15704));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15707=IKsin(j4);
IkReal x15708=IKcos(j4);
IkReal x15709=(cj3*gconst70);
IkReal x15710=(sj1*sj2);
IkReal x15711=((1.0)*gconst71);
IkReal x15712=(gconst71*sj3);
IkReal x15713=(cj2*sj1);
IkReal x15714=((1.0)*sj0);
IkReal x15715=(gconst70*r11);
IkReal x15716=(gconst70*sj3);
IkReal x15717=((1.0)*cj0);
IkReal x15718=(cj3*gconst71);
IkReal x15719=(cj1*sj2);
IkReal x15720=((1.0)*cj1*cj2);
IkReal x15721=(r21*x15708);
IkReal x15722=(r10*x15708);
IkReal x15723=((1.0)*x15708);
IkReal x15724=(r02*x15707);
IkReal x15725=(r20*x15708);
evalcond[0]=((((-1.0)*x15714))+(((-1.0)*r02*x15723)));
evalcond[1]=((((-1.0)*r20*x15707*x15711))+((gconst70*r21*x15707)));
evalcond[2]=(cj0+(((-1.0)*r10*x15707*x15711))+((x15707*x15715)));
evalcond[3]=((((-1.0)*cj1*cj2*x15717))+((cj0*x15710))+((cj3*x15724)));
evalcond[4]=((((-1.0)*sj3*x15724))+(((-1.0)*x15713*x15717))+(((-1.0)*x15717*x15719)));
evalcond[5]=(((r20*x15716))+((x15709*x15721))+(((-1.0)*cj3*x15711*x15725))+((r21*x15712))+x15719+x15713);
evalcond[6]=((((-1.0)*x15720))+(((-1.0)*x15716*x15721))+((r20*x15709))+((r21*x15718))+x15710+((x15712*x15725)));
evalcond[7]=((((-1.0)*cj3*x15711*x15722))+(((-1.0)*cj1*cj2*x15714))+((sj0*x15710))+((r11*x15708*x15709))+((r11*x15712))+((r10*x15716)));
evalcond[8]=((((-1.0)*x15713*x15714))+(((-1.0)*x15714*x15719))+(((-1.0)*sj3*x15715*x15723))+((r10*x15709))+((x15712*x15722))+((r11*x15718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15727=IKPowWithIntegerCheck(r02,-1);
if(!x15727.valid){
continue;
}
IkReal x15726=x15727.value;
CheckValue<IkReal> x15728=IKPowWithIntegerCheck(cj3,-1);
if(!x15728.valid){
continue;
}
if( IKabs((x15726*(x15728.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15726)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15726*(x15728.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15726))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15726*(x15728.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15726));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15729=IKsin(j4);
IkReal x15730=IKcos(j4);
IkReal x15731=(cj5*r10);
IkReal x15732=(sj1*sj2);
IkReal x15733=(cj5*sj3);
IkReal x15734=(r11*sj5);
IkReal x15735=(cj3*cj5);
IkReal x15736=(cj3*sj5);
IkReal x15737=(r21*sj5);
IkReal x15738=(cj2*sj1);
IkReal x15739=((1.0)*sj0);
IkReal x15740=((1.0)*cj0);
IkReal x15741=(sj3*sj5);
IkReal x15742=(cj1*sj2);
IkReal x15743=((1.0)*cj1*cj2);
IkReal x15744=((1.0)*x15729);
IkReal x15745=(r20*x15730);
IkReal x15746=(cj3*x15730);
IkReal x15747=(sj3*x15730);
evalcond[0]=((((-1.0)*x15739))+(((-1.0)*r02*x15730)));
evalcond[1]=(((x15729*x15737))+(((-1.0)*cj5*r20*x15744)));
evalcond[2]=((((-1.0)*x15731*x15744))+cj0+((x15729*x15734)));
evalcond[3]=(((cj3*r02*x15729))+((cj0*x15732))+(((-1.0)*cj1*cj2*x15740)));
evalcond[4]=((((-1.0)*r02*sj3*x15744))+(((-1.0)*x15738*x15740))+(((-1.0)*x15740*x15742)));
evalcond[5]=(((r21*x15733))+(((-1.0)*x15735*x15745))+x15742+x15738+((r20*x15741))+((r21*x15730*x15736)));
evalcond[6]=(((r20*x15736))+(((-1.0)*x15743))+((r21*x15735))+(((-1.0)*x15737*x15747))+x15732+((x15733*x15745)));
evalcond[7]=(((r11*x15733))+((x15734*x15746))+(((-1.0)*cj1*cj2*x15739))+((sj0*x15732))+(((-1.0)*x15731*x15746))+((r10*x15741)));
evalcond[8]=(((r11*x15735))+(((-1.0)*x15734*x15747))+(((-1.0)*x15739*x15742))+(((-1.0)*x15738*x15739))+((x15731*x15747))+((r10*x15736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15748=((1.0)*sj3);
IkReal x15749=((1.0)*cj5);
CheckValue<IkReal> x15750=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15749))),-1);
if(!x15750.valid){
continue;
}
CheckValue<IkReal> x15751=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x15749))+((cj3*r21*sj5))),-1);
if(!x15751.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15750.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15751.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15748))+(((-1.0)*cj5*r21*x15748)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15750.value)))+IKsqr(((x15751.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15748))+(((-1.0)*cj5*r21*x15748))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15750.value)), ((x15751.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15748))+(((-1.0)*cj5*r21*x15748))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15752=IKsin(j4);
IkReal x15753=IKcos(j4);
IkReal x15754=(cj5*r10);
IkReal x15755=(sj1*sj2);
IkReal x15756=(cj5*sj3);
IkReal x15757=(r11*sj5);
IkReal x15758=(cj3*cj5);
IkReal x15759=(cj3*sj5);
IkReal x15760=(r21*sj5);
IkReal x15761=(cj2*sj1);
IkReal x15762=((1.0)*sj0);
IkReal x15763=((1.0)*cj0);
IkReal x15764=(sj3*sj5);
IkReal x15765=(cj1*sj2);
IkReal x15766=((1.0)*cj1*cj2);
IkReal x15767=((1.0)*x15752);
IkReal x15768=(r20*x15753);
IkReal x15769=(cj3*x15753);
IkReal x15770=(sj3*x15753);
evalcond[0]=((((-1.0)*r02*x15753))+(((-1.0)*x15762)));
evalcond[1]=(((x15752*x15760))+(((-1.0)*cj5*r20*x15767)));
evalcond[2]=(cj0+((x15752*x15757))+(((-1.0)*x15754*x15767)));
evalcond[3]=(((cj3*r02*x15752))+(((-1.0)*cj1*cj2*x15763))+((cj0*x15755)));
evalcond[4]=((((-1.0)*r02*sj3*x15767))+(((-1.0)*x15763*x15765))+(((-1.0)*x15761*x15763)));
evalcond[5]=(((r21*x15753*x15759))+((r21*x15756))+(((-1.0)*x15758*x15768))+((r20*x15764))+x15765+x15761);
evalcond[6]=(((r21*x15758))+(((-1.0)*x15760*x15770))+(((-1.0)*x15766))+((r20*x15759))+((x15756*x15768))+x15755);
evalcond[7]=(((r10*x15764))+((sj0*x15755))+(((-1.0)*cj1*cj2*x15762))+((x15757*x15769))+(((-1.0)*x15754*x15769))+((r11*x15756)));
evalcond[8]=(((x15754*x15770))+((r10*x15759))+((r11*x15758))+(((-1.0)*x15757*x15770))+(((-1.0)*x15762*x15765))+(((-1.0)*x15761*x15762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15771=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15771.valid){
continue;
}
CheckValue<IkReal> x15772=IKPowWithIntegerCheck(r02,-1);
if(!x15772.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15771.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15772.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15771.value)))+IKsqr(((-1.0)*sj0*(x15772.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15771.value)), ((-1.0)*sj0*(x15772.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15773=IKsin(j4);
IkReal x15774=IKcos(j4);
IkReal x15775=(cj5*r10);
IkReal x15776=(sj1*sj2);
IkReal x15777=(cj5*sj3);
IkReal x15778=(r11*sj5);
IkReal x15779=(cj3*cj5);
IkReal x15780=(cj3*sj5);
IkReal x15781=(r21*sj5);
IkReal x15782=(cj2*sj1);
IkReal x15783=((1.0)*sj0);
IkReal x15784=((1.0)*cj0);
IkReal x15785=(sj3*sj5);
IkReal x15786=(cj1*sj2);
IkReal x15787=((1.0)*cj1*cj2);
IkReal x15788=((1.0)*x15773);
IkReal x15789=(r20*x15774);
IkReal x15790=(cj3*x15774);
IkReal x15791=(sj3*x15774);
evalcond[0]=((((-1.0)*r02*x15774))+(((-1.0)*x15783)));
evalcond[1]=((((-1.0)*cj5*r20*x15788))+((x15773*x15781)));
evalcond[2]=(cj0+(((-1.0)*x15775*x15788))+((x15773*x15778)));
evalcond[3]=((((-1.0)*cj1*cj2*x15784))+((cj0*x15776))+((cj3*r02*x15773)));
evalcond[4]=((((-1.0)*x15782*x15784))+(((-1.0)*r02*sj3*x15788))+(((-1.0)*x15784*x15786)));
evalcond[5]=(((r21*x15777))+((r21*x15774*x15780))+x15782+x15786+(((-1.0)*x15779*x15789))+((r20*x15785)));
evalcond[6]=(((x15777*x15789))+((r21*x15779))+x15776+(((-1.0)*x15781*x15791))+(((-1.0)*x15787))+((r20*x15780)));
evalcond[7]=((((-1.0)*cj1*cj2*x15783))+((r10*x15785))+((x15778*x15790))+((sj0*x15776))+(((-1.0)*x15775*x15790))+((r11*x15777)));
evalcond[8]=(((r10*x15780))+(((-1.0)*x15778*x15791))+(((-1.0)*x15782*x15783))+(((-1.0)*x15783*x15786))+((r11*x15779))+((x15775*x15791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15792=((1.0)*sj0);
IkReal x15793=((1.0)*cj0);
CheckValue<IkReal> x15794 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15793))+(((-1.0)*r12*x15792)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x15793))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x15792)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15794.valid){
continue;
}
CheckValue<IkReal> x15795=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15794.value)+(((1.5707963267949)*(x15795.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15796=IKsin(j4);
IkReal x15797=IKcos(j4);
IkReal x15798=(r11*sj5);
IkReal x15799=(cj5*r10);
IkReal x15800=(sj1*sj2);
IkReal x15801=(cj5*sj3);
IkReal x15802=((1.0)*sj0);
IkReal x15803=(cj3*cj5);
IkReal x15804=(cj3*sj5);
IkReal x15805=(r21*sj5);
IkReal x15806=(cj2*sj1);
IkReal x15807=(sj3*sj5);
IkReal x15808=(r01*sj5);
IkReal x15809=((1.0)*cj0);
IkReal x15810=(cj1*sj2);
IkReal x15811=((1.0)*x15797);
IkReal x15812=((1.0)*x15796);
IkReal x15813=(cj3*x15797);
IkReal x15814=((1.0)*cj1*cj2);
IkReal x15815=(cj3*x15796);
evalcond[0]=(((x15796*x15805))+(((-1.0)*cj5*r20*x15812))+(((-1.0)*r22*x15811)));
evalcond[1]=(cj0+(((-1.0)*x15799*x15812))+((x15796*x15798))+(((-1.0)*r12*x15811)));
evalcond[2]=((((-1.0)*x15802))+((x15796*x15808))+(((-1.0)*cj5*r00*x15812))+(((-1.0)*r02*x15811)));
evalcond[3]=(((r22*x15815))+((r21*x15801))+(((-1.0)*r20*x15803*x15811))+((r21*x15797*x15804))+x15806+x15810+((r20*x15807)));
evalcond[4]=((((-1.0)*x15814))+(((-1.0)*sj3*x15805*x15811))+((r21*x15803))+x15800+(((-1.0)*r22*sj3*x15812))+((r20*x15804))+((r20*x15797*x15801)));
evalcond[5]=(((cj0*x15800))+((r02*x15815))+((r01*x15801))+(((-1.0)*r00*x15803*x15811))+((r00*x15807))+((r01*x15797*x15804))+(((-1.0)*cj1*cj2*x15809)));
evalcond[6]=(((r10*x15807))+((x15798*x15813))+((r12*x15815))+((r11*x15801))+((sj0*x15800))+(((-1.0)*cj1*cj2*x15802))+(((-1.0)*cj3*x15799*x15811)));
evalcond[7]=(((r00*x15797*x15801))+(((-1.0)*r02*sj3*x15812))+(((-1.0)*x15809*x15810))+((r01*x15803))+(((-1.0)*x15806*x15809))+((r00*x15804))+(((-1.0)*r01*x15807*x15811)));
evalcond[8]=((((-1.0)*r12*sj3*x15812))+((sj3*x15797*x15799))+((r10*x15804))+((r11*x15803))+(((-1.0)*sj3*x15798*x15811))+(((-1.0)*x15802*x15806))+(((-1.0)*x15802*x15810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15816=((1.0)*cj5);
CheckValue<IkReal> x15817 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x15816))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15817.valid){
continue;
}
CheckValue<IkReal> x15818=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15816)))),-1);
if(!x15818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15817.value)+(((1.5707963267949)*(x15818.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15819=IKsin(j4);
IkReal x15820=IKcos(j4);
IkReal x15821=(r11*sj5);
IkReal x15822=(cj5*r10);
IkReal x15823=(sj1*sj2);
IkReal x15824=(cj5*sj3);
IkReal x15825=((1.0)*sj0);
IkReal x15826=(cj3*cj5);
IkReal x15827=(cj3*sj5);
IkReal x15828=(r21*sj5);
IkReal x15829=(cj2*sj1);
IkReal x15830=(sj3*sj5);
IkReal x15831=(r01*sj5);
IkReal x15832=((1.0)*cj0);
IkReal x15833=(cj1*sj2);
IkReal x15834=((1.0)*x15820);
IkReal x15835=((1.0)*x15819);
IkReal x15836=(cj3*x15820);
IkReal x15837=((1.0)*cj1*cj2);
IkReal x15838=(cj3*x15819);
evalcond[0]=(((x15819*x15828))+(((-1.0)*r22*x15834))+(((-1.0)*cj5*r20*x15835)));
evalcond[1]=(cj0+((x15819*x15821))+(((-1.0)*r12*x15834))+(((-1.0)*x15822*x15835)));
evalcond[2]=(((x15819*x15831))+(((-1.0)*r02*x15834))+(((-1.0)*x15825))+(((-1.0)*cj5*r00*x15835)));
evalcond[3]=(((r22*x15838))+((r20*x15830))+((r21*x15824))+((r21*x15820*x15827))+(((-1.0)*r20*x15826*x15834))+x15833+x15829);
evalcond[4]=(((r20*x15827))+(((-1.0)*sj3*x15828*x15834))+((r20*x15820*x15824))+(((-1.0)*r22*sj3*x15835))+((r21*x15826))+(((-1.0)*x15837))+x15823);
evalcond[5]=(((r02*x15838))+((r01*x15824))+((r01*x15820*x15827))+((r00*x15830))+(((-1.0)*cj1*cj2*x15832))+(((-1.0)*r00*x15826*x15834))+((cj0*x15823)));
evalcond[6]=(((r10*x15830))+(((-1.0)*cj3*x15822*x15834))+((x15821*x15836))+((r12*x15838))+(((-1.0)*cj1*cj2*x15825))+((r11*x15824))+((sj0*x15823)));
evalcond[7]=((((-1.0)*r02*sj3*x15835))+((r01*x15826))+(((-1.0)*r01*x15830*x15834))+((r00*x15827))+(((-1.0)*x15829*x15832))+((r00*x15820*x15824))+(((-1.0)*x15832*x15833)));
evalcond[8]=((((-1.0)*x15825*x15833))+(((-1.0)*sj3*x15821*x15834))+(((-1.0)*x15825*x15829))+((r10*x15827))+(((-1.0)*r12*sj3*x15835))+((sj3*x15820*x15822))+((r11*x15826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15839=((1.0)*cj5);
CheckValue<IkReal> x15840=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15839)))),-1);
if(!x15840.valid){
continue;
}
CheckValue<IkReal> x15841 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15839)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15840.value)))+(x15841.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15842=IKsin(j4);
IkReal x15843=IKcos(j4);
IkReal x15844=(r11*sj5);
IkReal x15845=(cj5*r10);
IkReal x15846=(sj1*sj2);
IkReal x15847=(cj5*sj3);
IkReal x15848=((1.0)*sj0);
IkReal x15849=(cj3*cj5);
IkReal x15850=(cj3*sj5);
IkReal x15851=(r21*sj5);
IkReal x15852=(cj2*sj1);
IkReal x15853=(sj3*sj5);
IkReal x15854=(r01*sj5);
IkReal x15855=((1.0)*cj0);
IkReal x15856=(cj1*sj2);
IkReal x15857=((1.0)*x15843);
IkReal x15858=((1.0)*x15842);
IkReal x15859=(cj3*x15843);
IkReal x15860=((1.0)*cj1*cj2);
IkReal x15861=(cj3*x15842);
evalcond[0]=((((-1.0)*cj5*r20*x15858))+(((-1.0)*r22*x15857))+((x15842*x15851)));
evalcond[1]=(cj0+(((-1.0)*r12*x15857))+(((-1.0)*x15845*x15858))+((x15842*x15844)));
evalcond[2]=((((-1.0)*r02*x15857))+(((-1.0)*x15848))+((x15842*x15854))+(((-1.0)*cj5*r00*x15858)));
evalcond[3]=((((-1.0)*r20*x15849*x15857))+((r22*x15861))+((r20*x15853))+((r21*x15847))+((r21*x15843*x15850))+x15856+x15852);
evalcond[4]=((((-1.0)*x15860))+((r20*x15843*x15847))+((r20*x15850))+(((-1.0)*sj3*x15851*x15857))+((r21*x15849))+(((-1.0)*r22*sj3*x15858))+x15846);
evalcond[5]=(((r01*x15847))+((r02*x15861))+((r00*x15853))+(((-1.0)*r00*x15849*x15857))+(((-1.0)*cj1*cj2*x15855))+((cj0*x15846))+((r01*x15843*x15850)));
evalcond[6]=(((r11*x15847))+((r12*x15861))+(((-1.0)*cj3*x15845*x15857))+(((-1.0)*cj1*cj2*x15848))+((r10*x15853))+((x15844*x15859))+((sj0*x15846)));
evalcond[7]=(((r01*x15849))+(((-1.0)*x15855*x15856))+(((-1.0)*r01*x15853*x15857))+((r00*x15850))+(((-1.0)*r02*sj3*x15858))+(((-1.0)*x15852*x15855))+((r00*x15843*x15847)));
evalcond[8]=(((r11*x15849))+(((-1.0)*sj3*x15844*x15857))+((r10*x15850))+(((-1.0)*r12*sj3*x15858))+((sj3*x15843*x15845))+(((-1.0)*x15848*x15852))+(((-1.0)*x15848*x15856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15862=cj5*cj5;
IkReal x15863=r21*r21;
IkReal x15864=r20*r20;
IkReal x15865=(r20*r21);
IkReal x15866=((1.0)*cj3);
IkReal x15867=((1.0)*cj5);
IkReal x15868=(cj1*sj2);
IkReal x15869=(cj5*sj5);
IkReal x15870=(sj3*sj5);
IkReal x15871=(cj2*sj1);
IkReal x15872=(r21*sj5);
CheckValue<IkReal> x15873=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15863*x15866))+((cj3*x15862*x15863))+(((-1.0)*x15866*(r22*r22)))+(((-1.0)*x15862*x15864*x15866))+(((2.0)*cj3*x15865*x15869)))),-1);
if(!x15873.valid){
continue;
}
CheckValue<IkReal> x15874 = IKatan2WithCheck(IkReal((((r22*x15868))+((cj5*r21*r22*sj3))+((r22*x15871))+((r20*r22*x15870)))),IkReal((((sj3*x15865))+(((-1.0)*r20*x15867*x15871))+((x15871*x15872))+((x15868*x15872))+((sj3*x15863*x15869))+(((-1.0)*x15864*x15867*x15870))+(((-1.0)*r20*x15867*x15868))+(((-2.0)*sj3*x15862*x15865)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15873.value)))+(x15874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15875=IKsin(j4);
IkReal x15876=IKcos(j4);
IkReal x15877=(cj3*r21);
IkReal x15878=(r21*sj5);
IkReal x15879=(r20*sj5);
IkReal x15880=(cj5*r20);
IkReal x15881=((1.0)*x15876);
IkReal x15882=((1.0)*x15875);
evalcond[0]=(((x15875*x15878))+(((-1.0)*x15880*x15882))+(((-1.0)*r22*x15881)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*cj3*x15880*x15881))+((cj5*r21*sj3))+((cj1*sj2))+((sj5*x15876*x15877))+((sj3*x15879))+((cj3*r22*x15875)));
evalcond[2]=((((-1.0)*sj3*x15878*x15881))+((sj3*x15876*x15880))+((cj3*x15879))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj5*x15877))+(((-1.0)*r22*sj3*x15882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15883=(cj5*sj4);
IkReal x15884=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15884))+(((-1.0)*r00*x15883)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15883))+(((-1.0)*r11*x15884))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15884))+(((-1.0)*r00*x15883))))+IKsqr((((r10*x15883))+(((-1.0)*r11*x15884))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15884))+(((-1.0)*r00*x15883))), (((r10*x15883))+(((-1.0)*r11*x15884))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15885=IKcos(j0);
IkReal x15886=IKsin(j0);
IkReal x15887=(r02*sj4);
IkReal x15888=((0.1)*sj5);
IkReal x15889=(cj5*r11);
IkReal x15890=((1.0)*sj3);
IkReal x15891=(r12*sj4);
IkReal x15892=((1.0)*cj3);
IkReal x15893=(r11*sj5);
IkReal x15894=(cj3*cj4);
IkReal x15895=((1.0)*sj2);
IkReal x15896=(cj5*r01);
IkReal x15897=(r01*sj5);
IkReal x15898=(sj1*sj2);
IkReal x15899=(cj1*cj2);
IkReal x15900=(r00*sj5);
IkReal x15901=((1.0)*cj2);
IkReal x15902=(r10*sj5);
IkReal x15903=((1.0)*cj4);
IkReal x15904=(cj4*cj5*r00);
IkReal x15905=(cj1*x15885);
IkReal x15906=(cj4*cj5*r10);
IkReal x15907=((0.392)*x15886);
IkReal x15908=((1.0)*x15886);
IkReal x15909=(cj1*x15886);
IkReal x15910=((1.0)*cj5*sj4);
evalcond[0]=(((sj4*x15893))+(((-1.0)*r12*x15903))+(((-1.0)*r10*x15910))+x15885);
evalcond[1]=(((sj4*x15897))+(((-1.0)*r02*x15903))+(((-1.0)*x15908))+(((-1.0)*r00*x15910)));
evalcond[2]=((((-0.134)*x15886))+(((0.392)*x15885*x15899))+(((-1.0)*px))+(((-0.1)*x15896))+(((-1.0)*r00*x15888))+(((0.425)*x15905))+(((-0.392)*x15885*x15898)));
evalcond[3]=((((-1.0)*x15898*x15907))+(((0.134)*x15885))+(((-0.1)*x15889))+(((-1.0)*py))+(((-1.0)*r10*x15888))+((x15899*x15907))+(((0.425)*x15909)));
evalcond[4]=(((sj3*x15900))+(((-1.0)*x15885*x15899))+((cj3*x15887))+(((-1.0)*x15892*x15904))+((sj3*x15896))+((x15885*x15898))+((x15894*x15897)));
evalcond[5]=(((x15893*x15894))+((sj3*x15902))+(((-1.0)*x15892*x15906))+((cj3*x15891))+((x15886*x15898))+((sj3*x15889))+(((-1.0)*x15899*x15908)));
evalcond[6]=((((-1.0)*x15895*x15905))+((sj3*x15904))+(((-1.0)*cj4*x15890*x15897))+((cj3*x15896))+(((-1.0)*sj1*x15885*x15901))+(((-1.0)*x15887*x15890))+((cj3*x15900)));
evalcond[7]=((((-1.0)*x15895*x15909))+((sj3*x15906))+(((-1.0)*cj4*x15890*x15893))+((cj3*x15889))+(((-1.0)*sj1*x15886*x15901))+((cj3*x15902))+(((-1.0)*x15890*x15891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15911=cj5*cj5;
IkReal x15912=r21*r21;
IkReal x15913=r20*r20;
IkReal x15914=(r20*r21);
IkReal x15915=(sj1*sj2);
IkReal x15916=(r21*sj5);
IkReal x15917=(cj1*cj2);
IkReal x15918=(cj5*r20);
IkReal x15919=(cj5*sj5);
IkReal x15920=(cj3*r22);
IkReal x15921=(sj3*x15912);
CheckValue<IkReal> x15922 = IKatan2WithCheck(IkReal((((r22*x15915))+(((-1.0)*r22*x15917))+((cj5*r21*x15920))+((r20*sj5*x15920)))),IkReal(((((-1.0)*cj3*x15913*x15919))+((cj3*x15912*x15919))+(((-1.0)*x15916*x15917))+((x15915*x15916))+(((-1.0)*x15915*x15918))+((x15917*x15918))+((cj3*x15914))+(((-2.0)*cj3*x15911*x15914)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15922.valid){
continue;
}
CheckValue<IkReal> x15923=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-1.0)*x15911*x15921))+(((-2.0)*sj3*x15914*x15919))+((sj3*x15911*x15913))+x15921)),-1);
if(!x15923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15922.value)+(((1.5707963267949)*(x15923.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15924=IKsin(j4);
IkReal x15925=IKcos(j4);
IkReal x15926=(cj3*r21);
IkReal x15927=(r21*sj5);
IkReal x15928=(r20*sj5);
IkReal x15929=(cj5*r20);
IkReal x15930=((1.0)*x15925);
IkReal x15931=((1.0)*x15924);
evalcond[0]=(((x15924*x15927))+(((-1.0)*x15929*x15931))+(((-1.0)*r22*x15930)));
evalcond[1]=(((cj3*r22*x15924))+((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+(((-1.0)*cj3*x15929*x15930))+((sj3*x15928))+((sj5*x15925*x15926)));
evalcond[2]=(((sj3*x15925*x15929))+(((-1.0)*cj1*cj2))+((cj3*x15928))+((sj1*sj2))+(((-1.0)*sj3*x15927*x15930))+(((-1.0)*r22*sj3*x15931))+((cj5*x15926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15932=(cj5*sj4);
IkReal x15933=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15933))+(((-1.0)*r00*x15932)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15933))+((cj4*r12))+((r10*x15932)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15933))+(((-1.0)*r00*x15932))))+IKsqr(((((-1.0)*r11*x15933))+((cj4*r12))+((r10*x15932))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15933))+(((-1.0)*r00*x15932))), ((((-1.0)*r11*x15933))+((cj4*r12))+((r10*x15932))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15934=IKcos(j0);
IkReal x15935=IKsin(j0);
IkReal x15936=(r02*sj4);
IkReal x15937=((0.1)*sj5);
IkReal x15938=(cj5*r11);
IkReal x15939=((1.0)*sj3);
IkReal x15940=(r12*sj4);
IkReal x15941=((1.0)*cj3);
IkReal x15942=(r11*sj5);
IkReal x15943=(cj3*cj4);
IkReal x15944=((1.0)*sj2);
IkReal x15945=(cj5*r01);
IkReal x15946=(r01*sj5);
IkReal x15947=(sj1*sj2);
IkReal x15948=(cj1*cj2);
IkReal x15949=(r00*sj5);
IkReal x15950=((1.0)*cj2);
IkReal x15951=(r10*sj5);
IkReal x15952=((1.0)*cj4);
IkReal x15953=(cj4*cj5*r00);
IkReal x15954=(cj1*x15934);
IkReal x15955=(cj4*cj5*r10);
IkReal x15956=((0.392)*x15935);
IkReal x15957=((1.0)*x15935);
IkReal x15958=(cj1*x15935);
IkReal x15959=((1.0)*cj5*sj4);
evalcond[0]=(((sj4*x15942))+(((-1.0)*r10*x15959))+(((-1.0)*r12*x15952))+x15934);
evalcond[1]=((((-1.0)*r02*x15952))+(((-1.0)*r00*x15959))+((sj4*x15946))+(((-1.0)*x15957)));
evalcond[2]=((((-1.0)*r00*x15937))+(((0.392)*x15934*x15948))+(((-0.392)*x15934*x15947))+(((-0.1)*x15945))+(((-1.0)*px))+(((0.425)*x15954))+(((-0.134)*x15935)));
evalcond[3]=((((-0.1)*x15938))+(((0.134)*x15934))+(((-1.0)*py))+(((-1.0)*r10*x15937))+(((-1.0)*x15947*x15956))+(((0.425)*x15958))+((x15948*x15956)));
evalcond[4]=(((x15934*x15947))+((x15943*x15946))+((cj3*x15936))+(((-1.0)*x15941*x15953))+((sj3*x15949))+((sj3*x15945))+(((-1.0)*x15934*x15948)));
evalcond[5]=(((cj3*x15940))+((x15942*x15943))+((x15935*x15947))+(((-1.0)*x15941*x15955))+((sj3*x15951))+(((-1.0)*x15948*x15957))+((sj3*x15938)));
evalcond[6]=(((cj3*x15949))+((cj3*x15945))+(((-1.0)*x15936*x15939))+(((-1.0)*x15944*x15954))+(((-1.0)*sj1*x15934*x15950))+(((-1.0)*cj4*x15939*x15946))+((sj3*x15953)));
evalcond[7]=((((-1.0)*sj1*x15935*x15950))+(((-1.0)*x15944*x15958))+((cj3*x15938))+(((-1.0)*cj4*x15939*x15942))+(((-1.0)*x15939*x15940))+((sj3*x15955))+((cj3*x15951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5e_d435_millibar_r85 (d4529aad7fa5ac97c6b35f19b43e4ccf)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
