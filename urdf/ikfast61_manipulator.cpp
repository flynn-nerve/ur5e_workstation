/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-02-27 12:42:45.615192
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[0]);
x6=IKcos(j[4]);
x7=IKcos(j[3]);
x8=IKsin(j[3]);
x9=IKsin(j[5]);
x10=IKcos(j[5]);
x11=IKsin(j[4]);
x12=((0.00016349)*x7);
x13=((0.000799998681243261)*x9);
x14=((0.00162999731303314)*x9);
x15=((0.999998671552647)*x10);
x16=((0.00162999783463081)*x9);
x17=((1.30399611813402e-6)*x11);
x18=((2.6e-7)*x7);
x19=((2.6e-7)*x8);
x20=((0.392)*x3);
x21=((2.6e-7)*x6);
x22=((0.298846934963077)*x7);
x23=((1.0)*x7);
x24=((0.00162999783463081)*x10);
x25=((0.999998351554076)*x10);
x26=((0.1)*x2);
x27=((0.00162999731303314)*x10);
x28=((1.0)*x2);
x29=((0.999998351554076)*x9);
x30=((0.00016349)*x8);
x31=((0.999998671552647)*x9);
x32=((0.1)*x3);
x33=((0.000799998681243261)*x10);
x34=((0.000799997618487131)*x11);
x35=((0.999999680001004)*x11);
x36=(x11*x5);
x37=((-1.0)*x6);
x38=(x5*x6);
x39=((-0.00016349)*x6);
x40=(x0*x1);
x41=(x0*x6);
x42=(x3*x4);
x43=(x0*x11);
x44=(x1*x5);
x45=(x1*x2);
x46=(x4*x5);
x47=((-1.0)*x7);
x48=((1.0)*x36);
x49=((1.0)*x1*x3);
x50=(x32*x4);
x51=(x0*x2*x4);
x52=((1.0)*x3*x40);
x53=((1.0)*x3*x44);
x54=(x45+x42);
x55=(x49+(((-1.0)*x28*x4)));
x56=((((-1.0)*x42))+(((-1.0)*x1*x28)));
x57=(x54*x7);
x58=(x55*x8);
x59=(x51+(((-1.0)*x52)));
x60=(((x2*x46))+(((-1.0)*x53)));
x61=(x56*x8);
x62=(x52+(((-1.0)*x0*x28*x4)));
x63=(x53+(((-1.0)*x28*x46)));
x64=(((x28*x40))+(((1.0)*x0*x42)));
x65=(((x28*x44))+(((1.0)*x42*x5)));
x66=(x59*x7);
x67=(x60*x7);
x68=(x63*x8);
x69=(x64*x8);
x70=(x65*x8);
x71=(x58+x57);
x72=(x61+((x55*x7)));
x73=(x6*x71);
x74=(((x47*x54))+(((-1.0)*x58)));
x75=(x6*x74);
x76=(x66+x69);
x77=(x70+x67);
x78=(((x62*x8))+((x64*x7)));
x79=(x68+((x65*x7)));
x80=(x6*x76);
x81=((((-1.0)*x23*x59))+(((-1.0)*x69)));
x82=((((-1.0)*x23*x60))+(((-1.0)*x70)));
x83=(x43+((x6*x77)));
x84=(x48+((x37*x76)));
x85=((((-1.0)*x43))+((x37*x77)));
eerot[0]=((((1.30399611813402e-6)*x38))+(((-1.0)*x17*x81))+((x14*x84))+(((-1.0)*x15*(((((-1.0)*x36))+x80))))+((x27*x78))+(((-1.0)*x31*x78)));
IkReal x86=((1.0)*x78);
eerot[1]=((((-1.0)*x16*x86))+(((-1.0)*x24*(((((-1.0)*x48))+x80))))+(((-1.0)*x29*x84))+(((-0.000799997618487131)*x38))+((x34*((((x47*x59))+(((-1.0)*x69))))))+(((-1.0)*x25*x86)));
eerot[2]=((((-0.999999680001004)*x38))+((x13*x84))+((x35*x81))+((x33*x78)));
IkReal x87=((1.0)*x40);
eetrans[0]=(((x20*x40))+((x8*((((x0*x26*x4))+(((-1.0)*x32*x87))))))+(((-0.298846934963077)*x38))+((x7*(((((-1.0)*x0*x50))+(((-1.0)*x26*x87))))))+(((0.425)*x40))+((x9*((((x18*x64))+((x19*x62))))))+((x11*(((((-0.298846934963077)*x69))+(((-1.0)*x22*x59))))))+(((-0.134)*x5))+((x10*((((x12*x64))+((x30*x62))))))+((x10*((((x21*x76))+(((-2.6e-7)*x36))))))+(((-0.392)*x51))+((x9*(((((0.00016349)*x36))+((x39*x76)))))));
eerot[3]=((((-1.0)*x15*x83))+(((-1.0)*x17*x82))+((x14*x85))+(((-1.30399611813402e-6)*x41))+((x27*x79))+(((-1.0)*x31*x79)));
IkReal x88=((1.0)*x79);
eerot[4]=((((-1.0)*x16*x88))+(((-1.0)*x24*x83))+(((0.000799997618487131)*x41))+(((-1.0)*x29*x85))+((x34*(((((-1.0)*x70))+((x47*x60))))))+(((-1.0)*x25*x88)));
eerot[5]=(((x13*x85))+((x35*x82))+((x33*x79))+(((0.999999680001004)*x41)));
IkReal x89=((1.0)*x44);
eetrans[1]=(((x8*((((x26*x46))+(((-1.0)*x32*x89))))))+((x20*x44))+((x9*((((x39*x77))+(((-0.00016349)*x43))))))+(((0.425)*x44))+((x10*((((x21*x77))+(((2.6e-7)*x43))))))+(((0.298846934963077)*x41))+((x10*((((x12*x65))+((x30*x63))))))+((x9*((((x18*x65))+((x19*x63))))))+((x7*(((((-1.0)*x26*x89))+(((-1.0)*x32*x46))))))+(((0.134)*x0))+(((-0.392)*x2*x46))+((x11*(((((-0.298846934963077)*x70))+(((-1.0)*x22*x60)))))));
eerot[6]=(((x11*(((((1.30399611813402e-6)*x57))+(((1.30399611813402e-6)*x58))))))+((x27*x72))+(((-1.0)*x15*x73))+(((-1.0)*x31*x72))+((x14*x6*(((((-1.0)*x23*x54))+(((-1.0)*x58)))))));
IkReal x90=((1.0)*x72);
eerot[7]=(((x11*(((((-0.000799997618487131)*x57))+(((-0.000799997618487131)*x58))))))+(((-1.0)*x29*x75))+(((-1.0)*x25*x90))+(((-1.0)*x16*x90))+(((-1.0)*x24*x73)));
eerot[8]=(((x11*(((((-0.999999680001004)*x58))+(((-0.999999680001004)*x57))))))+((x13*x75))+((x33*x72)));
eetrans[2]=((0.163)+((x7*(((((-1.0)*x1*x32))+((x26*x4))))))+((x11*(((((-0.298846934963077)*x57))+(((-0.298846934963077)*x58))))))+((x6*x9*(((((-0.00016349)*x57))+(((-0.00016349)*x58))))))+((x10*x6*((((x18*x54))+((x19*x55))))))+(((-0.425)*x4))+(((-0.392)*x45))+((x8*((((x1*x26))+x50))))+((x10*((((x12*x55))+((x30*x56))))))+(((-1.0)*x20*x4))+((x9*((((x18*x55))+((x19*x56)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-0.999998671552647)*r00))+(((-0.00162999783463081)*r01)));
new_r01=((((0.000799998681243261)*r02))+(((-0.999998351554076)*r01))+(((0.00162999731303314)*r00)));
new_r02=((((-1.30399611813402e-6)*r00))+(((0.999999680001004)*r02))+(((0.000799997618487131)*r01)));
new_px=((((-0.298846970124142)*r02))+px+(((3.83206637004003e-7)*r00))+(((-7.55866819676272e-5)*r01)));
new_r10=((((-0.999998671552647)*r10))+(((-0.00162999783463081)*r11)));
new_r11=((((0.000799998681243261)*r12))+(((-0.999998351554076)*r11))+(((0.00162999731303314)*r10)));
new_r12=((((0.000799997618487131)*r11))+(((-1.30399611813402e-6)*r10))+(((0.999999680001004)*r12)));
new_py=((((-0.298846970124142)*r12))+py+(((3.83206637004003e-7)*r10))+(((-7.55866819676272e-5)*r11)));
new_r20=((((-0.00162999783463081)*r21))+(((-0.999998671552647)*r20)));
new_r21=((((0.000799998681243261)*r22))+(((0.00162999731303314)*r20))+(((-0.999998351554076)*r21)));
new_r22=((((0.000799997618487131)*r21))+(((0.999999680001004)*r22))+(((-1.30399611813402e-6)*r20)));
new_pz=((-0.163)+(((3.83206637004003e-7)*r20))+(((-0.298846970124142)*r22))+pz+(((-7.55866819676272e-5)*r21)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x91=((1.0)*px);
IkReal x92=((1.0)*pz);
IkReal x93=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x93))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x92)));
rxp0_2=((((-1.0)*r10*x91))+((py*r00)));
rxp1_0=((((-1.0)*r21*x93))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x92)));
rxp1_2=((((-1.0)*r11*x91))+((py*r01)));
rxp2_0=((((-1.0)*r22*x93))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x92)));
rxp2_2=((((-1.0)*r12*x91))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x94=((0.2)*npx);
IkReal x95=((0.2)*npy);
IkReal x96=((0.1)*r22);
IkReal x97=((0.1)*r21);
IkReal x98=((-0.1)*r20);
IkReal x99=((-1.0)*r20);
IkReal x100=((-1.0)*rxp0_2);
IkReal x101=((-0.1)*r21);
IkReal x102=((-1.0)*r21);
IkReal x103=((-1.0)*rxp1_2);
IkReal x104=((-1.0)*npx);
IkReal x105=((-1.0)*r22);
IkReal x106=((-1.0)*npz);
matrixinvcoeffs[0]=x98;
matrixinvcoeffs[1]=x94;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x99;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x100;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x98;
matrixinvcoeffs[19]=x94;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x99;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x100;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x101;
matrixinvcoeffs[33]=x95;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x102;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x103;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x101;
matrixinvcoeffs[51]=x95;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x102;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x103;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x105;
matrixinvcoeffs[76]=x96;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x106;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x96;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x103;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x101;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x103;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x97;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x99;
matrixinvcoeffs[133]=x104;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.1)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x99;
matrixinvcoeffs[151]=x104;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x98;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x105;
matrixinvcoeffs[165]=x106;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x96;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x105;
matrixinvcoeffs[183]=x106;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.1)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x102;
matrixinvcoeffs[204]=x97;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x103;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x97;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x104;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x98;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x99;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x98;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x100;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x107=pz*pz;
IkReal x108=pp*pp;
IkReal x109=((0.2)*pz);
IkReal x110=(pp*r21);
IkReal x111=(gclwh13_10*rxp1_2);
IkReal x112=((0.00134)*r22);
IkReal x113=(npx*pz);
IkReal x114=((0.001)*r21);
IkReal x115=(pp*r20);
IkReal x116=(npy*pz);
IkReal x117=((4.0)*gclwh12_11);
IkReal x118=(gclwh10_11*r22);
IkReal x119=((0.00784)*r21);
IkReal x120=(pp*r22);
IkReal x121=(gclwh15_9*r20);
IkReal x122=(gclwh15_1*r20);
IkReal x123=(gclwh12_8*r21);
IkReal x124=((0.01)*r22);
IkReal x125=((0.2)*rxp2_2);
IkReal x126=(gclwh4_3*pp);
IkReal x127=(npz*pz);
IkReal x128=((2.0)*gclwh11_10);
IkReal x129=((0.01)*r21);
IkReal x130=(gclwh2_0*pz);
IkReal x131=(gclwh14_2*pz);
IkReal x132=(gclwh14_11*rxp0_2);
IkReal x133=((0.4)*rxp2_2);
IkReal x134=((0.00784)*r22);
IkReal x135=((1.0)*pz);
IkReal x136=((2.0)*gclwh4_11);
IkReal x137=((0.02)*r21);
IkReal x138=((0.1568)*rxp0_2);
IkReal x139=((0.0066)*rxp1_2);
IkReal x140=(gclwh8_2*r20);
IkReal x141=((0.0066)*rxp2_2);
IkReal x142=((0.01634)*r20);
IkReal x143=((9.045e-5)*r20);
IkReal x144=(gclwh14_8*r20);
IkReal x145=((0.02)*r22);
IkReal x146=((2.0)*gclwh9_10);
IkReal x147=(gclwh12_3*rxp1_2);
IkReal x148=(gclwh13_1*r21);
IkReal x149=((4.0)*gclwh14_11);
IkReal x150=((0.00268)*r20);
IkReal x151=(gclwh10_12*r22);
IkReal x152=((2.0)*gclwh13_10);
IkReal x153=((0.268)*gclwh14_14);
IkReal x154=(gclwh14_3*rxp0_2);
IkReal x155=((0.02)*rxp0_2);
IkReal x156=(gclwh12_14*r21);
IkReal x157=((2.0)*pp);
IkReal x158=((4.0)*gclwh11_10);
IkReal x159=(gclwh8_11*r20);
IkReal x160=((0.0132)*rxp2_2);
IkReal x161=((0.0132)*rxp0_2);
IkReal x162=((0.00817)*r22);
IkReal x163=(gclwh5_1*rxp2_2);
IkReal x164=((0.0268)*rxp2_2);
IkReal x165=(gclwh9_10*r20);
IkReal x166=(gclwh4_2*pz);
IkReal x167=(gclwh14_11*r20);
IkReal x168=((0.2)*rxp1_2);
IkReal x169=(gclwh5_0*rxp2_2);
IkReal x170=((0.1634)*rxp1_2);
IkReal x171=(gclwh13_15*r21);
IkReal x172=((4.0)*gclwh8_11);
IkReal x173=((0.00134)*r20);
IkReal x174=(gclwh3_3*r21);
IkReal x175=(gclwh5_1*r22);
IkReal x176=((0.0268)*rxp1_2);
IkReal x177=(gclwh7_13*r21);
IkReal x178=((2.0)*gclwh7_10);
IkReal x179=((0.0066)*rxp0_2);
IkReal x180=(gclwh13_9*rxp1_2);
IkReal x181=((0.00033)*r21);
IkReal x182=(gclwh2_1*r21);
IkReal x183=(gclwh7_0*pz);
IkReal x184=((0.536)*gclwh14_14);
IkReal x185=(gclwh6_11*rxp1_2);
IkReal x186=((0.17)*rxp2_2);
IkReal x187=((0.0536)*rxp1_2);
IkReal x188=(gclwh10_12*rxp2_2);
IkReal x189=((0.3268)*rxp1_2);
IkReal x190=((4.0)*gclwh9_10);
IkReal x191=((0.8)*rxp2_2);
IkReal x192=((0.04)*r22);
IkReal x193=((0.01634)*r21);
IkReal x194=((0.01)*r20);
IkReal x195=((4.0)*gclwh7_10);
IkReal x196=((0.1568)*rxp1_2);
IkReal x197=((0.2)*rxp0_2);
IkReal x198=((4.0)*gclwh4_11);
IkReal x199=((0.04)*r21);
IkReal x200=(gclwh10_2*r22);
IkReal x201=((0.2)*pp);
IkReal x202=(gclwh13_9*r21);
IkReal x203=((0.17)*rxp0_2);
IkReal x204=((0.268)*gclwh4_14);
IkReal x205=(gclwh12_8*rxp1_2);
IkReal x206=((0.8)*rxp0_2);
IkReal x207=((2.0)*gclwh6_11);
IkReal x208=(gclwh6_12*r21);
IkReal x209=(gclwh1_3*r20);
IkReal x210=((0.02)*rxp2_2);
IkReal x211=((0.0268)*rxp0_2);
IkReal x212=(gclwh8_2*rxp0_2);
IkReal x213=((0.1634)*rxp0_2);
IkReal x214=((2.0)*gclwh12_11);
IkReal x215=(gclwh10_2*rxp2_2);
IkReal x216=((0.1072)*rxp1_2);
IkReal x217=((2.0)*gclwh5_10);
IkReal x218=(gclwh11_0*r22);
IkReal x219=((0.268)*gclwh13_15);
IkReal x220=(gclwh10_2*pz);
IkReal x221=((0.268)*gclwh15_15);
IkReal x222=(gclwh9_0*pz);
IkReal x223=(gclwh4_3*r22);
IkReal x224=((2.0)*gclwh8_11);
IkReal x225=((2.0)*gclwh15_10);
IkReal x226=((0.268)*gclwh5_15);
IkReal x227=(gclwh4_14*rxp2_2);
IkReal x228=(gclwh4_8*r22);
IkReal x229=((0.00268)*r22);
IkReal x230=(gclwh4_3*rxp2_2);
IkReal x231=(gclwh12_3*r21);
IkReal x232=(gclwh9_0*r20);
IkReal x233=((0.00817)*r20);
IkReal x234=((0.3268)*rxp0_2);
IkReal x235=((4.0)*gclwh6_11);
IkReal x236=(gclwh12_11*rxp1_2);
IkReal x237=(gclwh11_0*pz);
IkReal x238=(gclwh5_9*r22);
IkReal x239=(gclwh5_0*pz);
IkReal x240=((0.4)*rxp0_2);
IkReal x241=((0.0132)*rxp1_2);
IkReal x242=((0.00784)*r20);
IkReal x243=((0.1568)*rxp2_2);
IkReal x244=((0.1634)*rxp2_2);
IkReal x245=((0.00675445)*r20);
IkReal x246=((0.536)*gclwh12_14);
IkReal x247=(gclwh15_1*rxp0_2);
IkReal x248=(gclwh13_0*pz);
IkReal x249=(gclwh9_13*r20);
IkReal x250=(gclwh11_13*r22);
IkReal x251=((0.1072)*rxp0_2);
IkReal x252=((0.00066)*r21);
IkReal x253=((0.536)*gclwh4_14);
IkReal x254=(gclwh5_15*rxp2_2);
IkReal x255=((0.00134)*r21);
IkReal x256=(gclwh8_12*r20);
IkReal x257=(gclwh13_1*rxp1_2);
IkReal x258=(gclwh6_2*pz);
IkReal x259=((2.0)*gclwh14_11);
IkReal x260=((0.0536)*rxp0_2);
IkReal x261=((0.268)*gclwh12_14);
IkReal x262=(gclwh12_2*pz);
IkReal x263=(gclwh14_14*x211);
IkReal x264=(gclwh6_5*x255);
IkReal x265=(gclwh4_14*x164);
IkReal x266=(gclwh10_5*x112);
IkReal x267=(gclwh8_5*x173);
IkReal x268=(gclwh12_14*x176);
IkReal x269=((0.02)*x205);
IkReal x270=(gclwh12_11*x168);
IkReal x271=(gclwh4_8*x210);
IkReal x272=(gclwh4_11*x125);
IkReal x273=(gclwh6_11*x129);
IkReal x274=((0.01)*x159);
IkReal x275=((0.01)*x118);
IkReal x276=((0.2)*x132);
IkReal x277=(gclwh14_8*x155);
IkReal x278=((0.02)*x180);
IkReal x279=(gclwh11_10*x124);
IkReal x280=(gclwh15_10*x197);
IkReal x281=((0.01)*x165);
IkReal x282=(gclwh5_9*x210);
IkReal x283=(gclwh7_10*x129);
IkReal x284=(gclwh5_10*x125);
IkReal x285=(gclwh15_9*x155);
IkReal x286=((0.2)*x111);
IkReal x287=(gclwh15_15*x211);
IkReal x288=(gclwh7_7*x255);
IkReal x289=(gclwh13_15*x176);
IkReal x290=(gclwh9_7*x173);
IkReal x291=(gclwh11_7*x112);
IkReal x292=(gclwh5_15*x164);
IkReal x293=(gclwh8_5*x211);
IkReal x294=(gclwh10_5*x164);
IkReal x295=(gclwh14_14*x173);
IkReal x296=((0.00134)*x156);
IkReal x297=(gclwh4_14*x112);
IkReal x298=(gclwh6_5*x176);
IkReal x299=(gclwh12_11*x129);
IkReal x300=(gclwh10_11*x125);
IkReal x301=((0.001)*x228);
IkReal x302=(gclwh4_11*x124);
IkReal x303=(gclwh8_11*x197);
IkReal x304=(gclwh12_8*x114);
IkReal x305=((0.001)*x144);
IkReal x306=(gclwh6_11*x168);
IkReal x307=((0.01)*x167);
IkReal x308=((0.001)*x121);
IkReal x309=(gclwh11_10*x125);
IkReal x310=(gclwh13_10*x129);
IkReal x311=(gclwh5_10*x124);
IkReal x312=(gclwh9_10*x197);
IkReal x313=((0.001)*x238);
IkReal x314=(gclwh13_9*x114);
IkReal x315=(gclwh7_10*x168);
IkReal x316=(gclwh15_10*x194);
IkReal x317=(gclwh5_15*x112);
IkReal x318=((0.00134)*x171);
IkReal x319=(gclwh7_7*x176);
IkReal x320=(gclwh11_7*x164);
IkReal x321=(gclwh9_7*x211);
IkReal x322=(gclwh15_15*x173);
IkReal x323=((0.4)*x132);
IkReal x324=((0.02)*x118);
IkReal x325=((0.02)*x159);
IkReal x326=(gclwh14_14*x260);
IkReal x327=(gclwh12_14*x187);
IkReal x328=((0.0536)*x227);
IkReal x329=(gclwh4_11*x133);
IkReal x330=(gclwh6_11*x137);
IkReal x331=((0.4)*x236);
IkReal x332=(gclwh13_15*x187);
IkReal x333=((0.0536)*x254);
IkReal x334=(gclwh15_15*x260);
IkReal x335=(gclwh11_10*x145);
IkReal x336=(gclwh15_10*x240);
IkReal x337=((0.02)*x165);
IkReal x338=((0.4)*x111);
IkReal x339=(gclwh7_10*x137);
IkReal x340=(gclwh5_10*x133);
IkReal x341=((0.02)*x167);
IkReal x342=((0.4)*x185);
IkReal x343=(gclwh14_14*x150);
IkReal x344=((0.00268)*x156);
IkReal x345=(gclwh4_14*x229);
IkReal x346=(gclwh4_11*x145);
IkReal x347=(gclwh12_11*x137);
IkReal x348=(gclwh10_11*x133);
IkReal x349=(gclwh8_11*x240);
IkReal x350=(gclwh15_9*x113);
IkReal x351=((2.0)*x107);
IkReal x352=((1.0)*x108);
IkReal x353=((0.134)*gclwh6_5*x110);
IkReal x354=((0.268)*gclwh10_5*x127);
IkReal x355=((0.268)*gclwh8_5*x113);
IkReal x356=((0.268)*gclwh6_5*x116);
IkReal x357=((0.134)*gclwh8_5*x115);
IkReal x358=((0.134)*gclwh10_5*x120);
IkReal x359=(gclwh14_2*rxp0_2*x109);
IkReal x360=((2.0)*gclwh10_11*x127);
IkReal x361=(x113*x224);
IkReal x362=(x120*x220);
IkReal x363=(x124*x220);
IkReal x364=(x147*x201);
IkReal x365=(gclwh8_2*pz*x115);
IkReal x366=(x125*x126);
IkReal x367=((0.01)*pz*x140);
IkReal x368=(gclwh12_2*rxp1_2*x109);
IkReal x369=(x154*x201);
IkReal x370=(gclwh4_2*rxp2_2*x109);
IkReal x371=(x116*x207);
IkReal x372=(x129*x258);
IkReal x373=(gclwh13_1*pp*x168);
IkReal x374=(x120*x237);
IkReal x375=(gclwh5_1*pp*x125);
IkReal x376=(x116*x178);
IkReal x377=(gclwh15_0*rxp0_2*x109);
IkReal x378=(x124*x237);
IkReal x379=(x194*x222);
IkReal x380=(x115*x222);
IkReal x381=(gclwh15_1*pp*x197);
IkReal x382=(x127*x128);
IkReal x383=(x113*x146);
IkReal x384=(x109*x169);
IkReal x385=(gclwh13_0*rxp1_2*x109);
IkReal x386=(x129*x183);
IkReal x387=((0.268)*gclwh9_7*x113);
IkReal x388=((0.134)*gclwh7_7*x110);
IkReal x389=((0.268)*gclwh11_7*x127);
IkReal x390=((0.134)*gclwh11_7*x120);
IkReal x391=((0.268)*gclwh7_7*x116);
IkReal x392=((0.134)*gclwh9_7*x115);
IkReal x393=(x116*x261);
IkReal x394=((0.134)*gclwh14_14*x115);
IkReal x395=(x127*x204);
IkReal x396=((0.134)*gclwh12_14*x110);
IkReal x397=(x113*x153);
IkReal x398=((0.134)*gclwh4_14*x120);
IkReal x399=(x115*x131);
IkReal x400=(x131*x194);
IkReal x401=((0.1)*gclwh4_8*x120);
IkReal x402=(x108*x231);
IkReal x403=(gclwh1_2*pz*x194);
IkReal x404=(gclwh3_2*pz*x129);
IkReal x405=((0.1)*gclwh12_8*x110);
IkReal x406=(x108*x174);
IkReal x407=(x108*x209);
IkReal x408=(gclwh6_2*rxp1_2*x109);
IkReal x409=(x113*x259);
IkReal x410=(x108*x223);
IkReal x411=(gclwh14_8*npx*x109);
IkReal x412=(x127*x136);
IkReal x413=(gclwh4_8*npz*x109);
IkReal x414=(gclwh12_8*npy*x109);
IkReal x415=(x109*x215);
IkReal x416=(x124*x166);
IkReal x417=(x116*x214);
IkReal x418=(x109*x212);
IkReal x419=((0.1)*gclwh14_8*x115);
IkReal x420=(x129*x262);
IkReal x421=(x129*x248);
IkReal x422=(gclwh0_0*pz*x194);
IkReal x423=(gclwh11_0*rxp2_2*x109);
IkReal x424=(x129*x130);
IkReal x425=(gclwh13_9*npy*x109);
IkReal x426=(x108*x122);
IkReal x427=(x120*x239);
IkReal x428=(x124*x239);
IkReal x429=(x110*x248);
IkReal x430=(gclwh9_0*rxp0_2*x109);
IkReal x431=((0.1)*gclwh15_9*x115);
IkReal x432=(x113*x225);
IkReal x433=(x108*x182);
IkReal x434=(gclwh5_9*npz*x109);
IkReal x435=(gclwh0_1*r20*x108);
IkReal x436=(gclwh7_0*rxp1_2*x109);
IkReal x437=((0.1)*gclwh5_9*x120);
IkReal x438=(gclwh15_9*npx*x109);
IkReal x439=((0.1)*gclwh13_9*x110);
IkReal x440=(x127*x217);
IkReal x441=(gclwh15_0*pz*x194);
IkReal x442=(x116*x152);
IkReal x443=((0.134)*gclwh13_15*x110);
IkReal x444=(x113*x221);
IkReal x445=((0.134)*gclwh5_15*x120);
IkReal x446=(x127*x226);
IkReal x447=((0.134)*gclwh15_15*x115);
IkReal x448=(x116*x219);
IkReal x449=(x115*x224);
IkReal x450=(x118*x157);
IkReal x451=(x116*x235);
IkReal x452=(x113*x172);
IkReal x453=(x110*x207);
IkReal x454=((4.0)*gclwh10_11*x127);
IkReal x455=(x120*x128);
IkReal x456=(x116*x195);
IkReal x457=(x115*x146);
IkReal x458=(x110*x178);
IkReal x459=(x113*x190);
IkReal x460=(x127*x158);
IkReal x461=(x115*x259);
IkReal x462=(x116*x117);
IkReal x463=(x127*x198);
IkReal x464=(x127*x253);
IkReal x465=(x115*x153);
IkReal x466=(x116*x246);
IkReal x467=(x110*x261);
IkReal x468=(x113*x184);
IkReal x469=(x120*x204);
IkReal x470=(x120*x136);
IkReal x471=(x110*x214);
IkReal x472=(x113*x149);
IkReal x473=(gclwh6_2*npy*x351);
IkReal x474=(gclwh6_2*x110*x135);
IkReal x475=(gclwh10_2*npz*x351);
IkReal x476=(gclwh8_2*npx*x351);
IkReal x477=(gclwh7_0*npy*x351);
IkReal x478=(gclwh9_0*npx*x351);
IkReal x479=(gclwh11_0*npz*x351);
IkReal x480=(gclwh7_0*x110*x135);
IkReal x481=(gclwh12_2*npy*x351);
IkReal x482=(gclwh3_2*npy*x351);
IkReal x483=(gclwh1_2*npx*x351);
IkReal x484=(gclwh14_3*x113*x157);
IkReal x485=(gclwh4_2*npz*x351);
IkReal x486=((2.0)*x126*x127);
IkReal x487=(gclwh12_2*x110*x135);
IkReal x488=(gclwh1_2*x115*x135);
IkReal x489=(gclwh3_3*x116*x157);
IkReal x490=(gclwh4_2*x120*x135);
IkReal x491=(gclwh1_3*x113*x157);
IkReal x492=(gclwh3_2*x110*x135);
IkReal x493=(gclwh12_3*x116*x157);
IkReal x494=(gclwh14_2*npx*x351);
IkReal x495=(gclwh14_3*r20*x352);
IkReal x496=(gclwh0_0*npx*x351);
IkReal x497=(gclwh2_0*npy*x351);
IkReal x498=(gclwh5_1*x127*x157);
IkReal x499=(gclwh13_1*x116*x157);
IkReal x500=(gclwh15_0*npx*x351);
IkReal x501=(gclwh2_1*x116*x157);
IkReal x502=(gclwh0_1*x113*x157);
IkReal x503=(gclwh5_0*npz*x351);
IkReal x504=(gclwh13_0*npy*x351);
IkReal x505=(gclwh0_0*x115*x135);
IkReal x506=(gclwh15_0*x115*x135);
IkReal x507=((1.0)*x110*x130);
IkReal x508=(x148*x352);
IkReal x509=(x175*x352);
IkReal x510=(gclwh15_1*x113*x157);
IkReal x511=(x265+x268);
IkReal x512=(x327+x328);
IkReal x513=(x292+x289);
IkReal x514=(x320+x321);
IkReal x515=(x293+x294);
IkReal x516=(x333+x332);
IkReal x517=(x371+x276+x274+x275);
IkReal x518=(x376+x279+x281+x280);
IkReal x519=(x306+x307+x412+x417);
IkReal x520=(x315+x316+x440+x442);
IkReal x521=(x322+x448+x447+x446);
IkReal x522=(x353+x355+x354+x264);
IkReal x523=(x387+x388+x389+x288);
IkReal x524=(x343+x466+x465+x464);
IkReal x525=(x395+x394+x393+x295);
IkReal x526=(x302+x303+x300+x299+x409);
IkReal x527=(x309+x311+x310+x312+x432);
IkReal x528=(x382+x383+x286+x284+x283);
IkReal x529=(x360+x361+x272+x273+x270);
IkReal x530=(x357+x356+x358+x267+x266);
IkReal x531=(x342+x341+x463+x462+x461);
IkReal x532=(x318+x317+x445+x444+x443);
IkReal x533=(x397+x396+x398+x296+x297);
IkReal x534=(x344+x345+x469+x468+x467);
IkReal x535=(x391+x390+x392+x290+x291);
IkReal x536=(x331+x330+x329+x454+x452+x453);
IkReal x537=(x339+x338+x340+x458+x459+x460);
IkReal x538=(x324+x325+x323+x449+x450+x451);
IkReal x539=(x337+x336+x335+x456+x457+x455);
IkReal x540=(x346+x347+x348+x349+x470+x471+x472);
IkReal x541=(x386+x384+x385+x381+x285+x480+x478+x479);
IkReal x542=(x372+x370+x368+x369+x277+x474+x475+x476);
IkReal x543=(x359+x362+x363+x364+x365+x366+x367+x269+x271+x473);
IkReal x544=(x380+x379+x378+x377+x375+x374+x373+x278+x282+x477);
IkReal x545=(x314+x313+x438+x439+x436+x437+x441+x508+x509+x501+x502+x503+x504+x505+x506+x507+x510);
IkReal x546=(x109+x304+x301+x399+x481+x483+x482+x485+x484+x401+x400+x403+x402+x405+x404+x407+x406+x408+x410+x411);
IkReal x547=(x305+x489+x488+x487+x486+x492+x493+x490+x491+x494+x495+x413+x416+x414+x415+x418+x419+x420);
IkReal x548=(x109+x308+x498+x499+x496+x497+x429+x428+x427+x426+x425+x424+x423+x422+x421+x430+x431+x433+x434+x435+x500);
op[0]=(((gclwh14_8*x213))+(((-0.817)*gclwh10_12*x120))+(((-1.0)*gclwh4_8*x244))+(((1.634)*gclwh10_12*x127))+(((-1.0)*x530))+(((-0.00817)*x151))+(((-1.0)*gclwh8_12*x233))+(((-1.634)*gclwh6_12*x116))+(((1.634)*gclwh8_12*x113))+x522+x511+(((-1.0)*gclwh12_8*x170))+(((-0.817)*gclwh8_12*x115))+(((0.00817)*x208))+(((-1.0)*x263))+(((0.817)*gclwh6_12*x110)));
op[1]=((((-1.0)*gclwh6_11*x110))+(((0.135089)*x154))+(((-0.135089)*x147))+(((-1.0)*x529))+(((-1.0)*x542))+((pp*x118))+x543+x517+(((-0.135089)*x230))+((gclwh8_11*x115)));
op[2]=((-0.210112)+(((-1.0)*x536))+x538);
op[3]=(((gclwh10_2*x134))+(((-1.0)*gclwh6_2*x119))+(((-1.0)*gclwh12_2*x196))+(((-1.568)*gclwh10_2*x127))+(((0.00784)*x140))+(((0.17)*x205))+(((-1.568)*gclwh8_2*x113))+(((0.784)*gclwh10_2*x120))+(((-1.0)*gclwh4_2*x243))+x326+((gclwh14_2*x138))+((gclwh4_8*x186))+(((1.568)*gclwh6_2*x116))+(((-0.784)*gclwh6_2*x110))+(((-1.0)*gclwh14_8*x203))+(((-1.0)*x512))+(((0.784)*gclwh8_2*x115)));
op[4]=(((gclwh6_12*x181))+(((-0.00033)*x256))+(((-0.033)*gclwh8_12*x115))+(((0.066)*gclwh10_12*x127))+(((0.033)*gclwh6_12*x110))+((gclwh12_8*x139))+(((-1.0)*gclwh14_8*x179))+(((-1.0)*x530))+((gclwh4_8*x141))+x263+x522+(((0.066)*gclwh8_12*x113))+(((-0.033)*gclwh10_12*x120))+(((-1.0)*x511))+(((-0.00033)*x151))+(((-0.066)*gclwh6_12*x116)));
op[5]=((((-1.0)*gclwh8_11*x115))+((gclwh6_11*x110))+(((0.001809)*x154))+(((-1.0)*x542))+(((-0.001809)*x147))+x543+x529+(((-0.001809)*x230))+(((-1.0)*x517))+(((-1.0)*pp*x118)));
op[6]=((((-1.0)*gclwh11_10*x120))+((gclwh7_10*x110))+(((-0.135089)*x163))+(((-1.0)*gclwh9_10*x115))+(((-0.135089)*x257))+(((-1.0)*x541))+x544+x528+(((-1.0)*x518))+(((0.135089)*x247)));
op[7]=((((-1.634)*gclwh7_13*x116))+(((0.817)*gclwh7_13*x110))+(((1.634)*gclwh11_13*x127))+(((0.00817)*x177))+(((-1.0)*gclwh13_9*x170))+(((-1.0)*x535))+(((-1.0)*gclwh5_9*x244))+(((-1.0)*gclwh9_13*x233))+((gclwh15_9*x213))+x523+x513+(((-1.0)*x287))+(((-0.817)*gclwh9_13*x115))+(((-1.0)*gclwh11_13*x162))+(((1.634)*gclwh9_13*x113))+(((-0.817)*gclwh11_13*x120)));
op[8]=(((gclwh15_9*x203))+(((0.784)*gclwh9_0*x115))+((gclwh11_0*x134))+((gclwh15_0*x138))+(((-1.0)*gclwh7_0*x119))+(((-0.1568)*x169))+(((-1.568)*gclwh11_0*x127))+(((-1.0)*gclwh13_0*x196))+(((-1.568)*gclwh9_0*x113))+(((1.568)*gclwh7_0*x116))+x516+(((-0.784)*gclwh7_0*x110))+(((0.784)*gclwh11_0*x120))+(((-1.0)*x334))+(((-1.0)*gclwh5_9*x186))+(((-0.17)*x180))+(((0.00784)*x232)));
op[9]=((-0.210112)+(((-1.0)*x537))+x539);
op[10]=(((gclwh11_10*x120))+(((-1.0)*x528))+(((-1.0)*x541))+x544+x518+((gclwh9_10*x115))+(((0.001809)*x247))+(((-0.001809)*x163))+(((-0.001809)*x257))+(((-1.0)*gclwh7_10*x110)));
op[11]=(((gclwh5_9*x141))+(((-0.00033)*x250))+(((0.00033)*x177))+(((-1.0)*x535))+(((0.066)*gclwh9_13*x113))+(((0.066)*gclwh11_13*x127))+x287+(((-1.0)*gclwh15_9*x179))+x523+(((0.033)*gclwh7_13*x110))+(((-0.033)*gclwh11_13*x120))+(((-0.00033)*x249))+(((-0.066)*gclwh7_13*x116))+(((-1.0)*x513))+((gclwh13_9*x139))+(((-0.033)*gclwh9_13*x115)));
op[12]=((((0.817)*gclwh14_8*x115))+(((-1.0)*gclwh6_12*x170))+(((-0.817)*gclwh12_8*x110))+(((0.00817)*x144))+(((1.634)*gclwh12_8*x116))+(((-1.0)*gclwh4_8*x162))+(((-1.0)*x298))+(((-1.0)*x525))+(((0.1634)*x188))+x533+x515+(((-0.817)*gclwh4_8*x120))+(((1.634)*gclwh4_8*x127))+(((-1.634)*gclwh14_8*x113))+(((-0.00817)*x123))+((gclwh8_12*x213)));
op[13]=((-0.685445)+(((0.665445)*gclwh14_3*x115))+(((-0.685445)*gclwh1_3*x115))+(((-0.00675445)*x231))+(((-1.35089)*gclwh14_3*x113))+(((1.35089)*gclwh4_3*x127))+(((1.35089)*gclwh12_3*x116))+(((0.00675445)*x209))+((gclwh14_3*x245))+(((-1.0)*x526))+(((-1.0)*gclwh4_11*x120))+(((-1.0)*x547))+(((-0.00675445)*x223))+(((1.35089)*gclwh1_3*x113))+x546+x519+(((1.35089)*gclwh3_3*x116))+(((-0.665445)*gclwh4_3*x120))+(((-0.685445)*gclwh3_3*x110))+(((-1.0)*gclwh12_11*x110))+((gclwh14_11*x115))+(((-0.665445)*gclwh12_3*x110))+(((0.00675445)*x174)));
op[14]=((-0.089834)+(((-1.0)*x540))+x531);
op[15]=(((gclwh3_2*x119))+(((-1.0)*gclwh4_2*x134))+(((-0.0085)*x144))+((gclwh6_2*x196))+(((1.7)*gclwh14_8*x113))+(((-0.85)*gclwh14_8*x115))+(((1.568)*gclwh4_2*x127))+(((-1.568)*gclwh14_2*x113))+(((-1.7)*gclwh4_8*x127))+(((0.0085)*x228))+((gclwh14_2*x242))+(((-1.0)*gclwh8_2*x138))+(((-0.784)*gclwh12_2*x110))+(((-1.0)*x534))+(((-1.0)*gclwh12_2*x119))+(((0.0085)*x123))+(((1.568)*gclwh3_2*x116))+((gclwh1_2*x242))+(((-0.784)*gclwh1_2*x115))+(((0.85)*gclwh4_8*x120))+(((0.85)*gclwh12_8*x110))+(((-0.1568)*x215))+(((0.784)*gclwh14_2*x115))+x524+(((1.568)*gclwh1_2*x113))+(((-1.7)*gclwh12_8*x116))+(((-0.784)*gclwh4_2*x120))+(((-0.784)*gclwh3_2*x110))+(((1.568)*gclwh12_2*x116)));
op[16]=((((-0.066)*gclwh12_8*x116))+(((0.066)*gclwh14_8*x113))+(((0.00033)*x123))+(((-0.066)*gclwh4_8*x127))+(((0.033)*gclwh4_8*x120))+(((-1.0)*x298))+(((-1.0)*gclwh6_12*x139))+(((-1.0)*x533))+((gclwh10_12*x141))+(((-0.033)*gclwh14_8*x115))+x525+x515+(((0.033)*gclwh12_8*x110))+(((0.00033)*x228))+((gclwh8_12*x179))+(((-0.00033)*x144)));
op[17]=((0.019045)+(((0.01809)*gclwh3_3*x116))+(((-0.019045)*gclwh1_3*x115))+(((0.01809)*gclwh4_3*x127))+(((-1.0)*gclwh14_11*x115))+((gclwh12_11*x110))+(((-0.000955)*gclwh14_3*x115))+(((0.000955)*gclwh4_3*x120))+(((0.01809)*gclwh1_3*x113))+(((-9.045e-5)*x231))+(((0.000955)*gclwh12_3*x110))+((gclwh4_11*x120))+(((-9.045e-5)*x223))+(((-1.0)*x547))+(((0.01809)*gclwh12_3*x116))+x546+x526+((gclwh14_3*x143))+(((-0.01809)*gclwh14_3*x113))+(((9.045e-5)*x174))+(((-1.0)*x519))+(((-0.019045)*gclwh3_3*x110))+((gclwh1_3*x143)));
op[18]=((0.685445)+(((-1.35089)*gclwh13_1*x116))+(((-1.0)*gclwh5_10*x120))+(((0.00675445)*x148))+(((-1.0)*gclwh13_10*x110))+(((-1.35089)*gclwh5_1*x127))+(((1.35089)*gclwh15_1*x113))+(((-1.0)*x527))+((gclwh0_1*x245))+(((-1.0)*x545))+((gclwh15_10*x115))+(((1.35089)*gclwh2_1*x116))+x548+x520+(((-0.665445)*gclwh15_1*x115))+(((-0.00675445)*x122))+(((0.665445)*gclwh5_1*x120))+(((0.665445)*gclwh13_1*x110))+(((-0.685445)*gclwh2_1*x110))+(((0.00675445)*x175))+(((-0.685445)*gclwh0_1*x115))+(((0.00675445)*x182))+(((1.35089)*gclwh0_1*x113)));
op[19]=((((-0.817)*gclwh15_9*x115))+(((-1.634)*gclwh13_9*x116))+(((-1.634)*gclwh5_9*x127))+(((-1.0)*x532))+(((0.817)*gclwh5_9*x120))+x319+((gclwh7_13*x170))+x521+(((-1.0)*gclwh9_13*x213))+(((0.00817)*x202))+(((-1.0)*x514))+((gclwh5_9*x162))+(((-1.0)*gclwh11_13*x244))+(((-0.00817)*x121))+(((0.817)*gclwh13_9*x110))+(((1.634)*x350)));
op[20]=((((-1.7)*gclwh13_9*x116))+((gclwh2_0*x119))+((gclwh5_0*x134))+(((1.568)*gclwh15_0*x113))+(((-0.85)*gclwh15_9*x115))+(((-1.7)*gclwh5_9*x127))+(((1.568)*gclwh2_0*x116))+((gclwh13_0*x119))+(((0.784)*gclwh13_0*x110))+(((1.7)*x350))+(((-1.0)*gclwh5_15*x229))+(((-1.0)*gclwh7_0*x196))+(((0.85)*gclwh5_9*x120))+(((-0.536)*gclwh15_15*x113))+(((-1.568)*gclwh5_0*x127))+(((-1.0)*gclwh15_0*x242))+(((-0.784)*gclwh15_0*x115))+(((-0.784)*gclwh2_0*x110))+(((-0.00268)*x171))+(((0.85)*gclwh13_9*x110))+(((-0.0085)*x121))+(((1.568)*gclwh0_0*x113))+(((0.0085)*x202))+((gclwh9_0*x138))+(((0.536)*gclwh5_15*x127))+((gclwh15_15*x150))+(((-0.784)*gclwh0_0*x115))+(((0.0085)*x238))+((gclwh0_0*x242))+(((-1.568)*gclwh13_0*x116))+((x115*x221))+(((-1.0)*x110*x219))+(((0.784)*gclwh5_0*x120))+((gclwh11_0*x243))+(((0.536)*gclwh13_15*x116))+(((-1.0)*x120*x226)));
op[21]=((-0.089834)+(((-4.0)*gclwh13_10*x116))+(((-1.0)*x115*x225))+(((-0.4)*gclwh7_10*rxp1_2))+((x110*x152))+((gclwh11_10*x133))+((x120*x217))+((gclwh5_10*x145))+((gclwh13_10*x137))+(((-0.02)*gclwh15_10*r20))+(((-4.0)*gclwh5_10*x127))+(((4.0)*gclwh15_10*x113))+((gclwh9_10*x240)));
op[22]=((-0.019045)+((gclwh5_10*x120))+(((0.000955)*gclwh15_1*x115))+(((-1.0)*gclwh15_10*x115))+(((-0.019045)*gclwh2_1*x110))+(((0.01809)*gclwh0_1*x113))+(((-0.000955)*gclwh5_1*x120))+(((-0.000955)*gclwh13_1*x110))+(((-0.01809)*gclwh5_1*x127))+(((-1.0)*x520))+(((-1.0)*x545))+((gclwh13_10*x110))+(((9.045e-5)*x148))+x548+x527+(((-0.01809)*gclwh13_1*x116))+(((9.045e-5)*x182))+(((-0.019045)*gclwh0_1*x115))+(((9.045e-5)*x175))+(((0.01809)*gclwh15_1*x113))+((gclwh0_1*x143))+(((0.01809)*gclwh2_1*x116))+(((-9.045e-5)*x122)));
op[23]=((((0.066)*gclwh13_9*x116))+(((-0.00033)*x238))+(((-1.0)*gclwh13_9*x181))+(((0.00033)*x121))+((gclwh7_13*x139))+(((-0.033)*gclwh13_9*x110))+(((0.033)*gclwh15_9*x115))+(((-1.0)*gclwh9_13*x179))+(((-1.0)*x521))+x319+(((0.066)*gclwh5_9*x127))+(((-0.066)*x350))+x532+(((-1.0)*x514))+(((-0.033)*gclwh5_9*x120))+(((-1.0)*gclwh11_13*x141)));
op[24]=((-0.437912)+(((-1.0)*x536))+x538);
op[25]=((((-1.0)*gclwh6_2*x193))+(((-3.268)*gclwh8_2*x113))+(((1.634)*gclwh10_2*x120))+(((1.634)*gclwh8_2*x115))+(((-1.0)*gclwh12_2*x189))+(((3.268)*gclwh6_2*x116))+(((-0.3268)*gclwh4_2*rxp2_2))+(((-1.634)*gclwh6_2*x110))+(((0.01634)*x200))+x326+(((0.01634)*x140))+(((-3.268)*gclwh10_2*x127))+((gclwh14_2*x234))+(((-1.0)*x512)));
op[26]=((((-1.0)*gclwh12_14*x216))+(((-1.568)*gclwh6_12*x110))+((gclwh14_14*x251))+(((-3.136)*gclwh8_12*x113))+(((-0.1072)*x227))+(((0.01568)*x256))+(((-0.01568)*x208))+(((1.568)*gclwh10_12*x120))+(((1.568)*gclwh8_12*x115))+(((0.01568)*x151))+(((-3.136)*gclwh10_12*x127))+(((3.136)*gclwh6_12*x116)));
op[27]=((((8.0)*gclwh8_11*x113))+(((-4.0)*pp*x118))+(((-0.04)*x159))+(((-0.8)*x132))+(((-0.04)*x118))+(((8.0)*gclwh10_11*x127))+(((0.8)*x236))+((gclwh4_11*x191))+((x110*x235))+((gclwh6_11*x199))+(((-8.0)*gclwh6_11*x116))+(((-1.0)*x115*x172)));
op[28]=((-0.017688)+(((-1.0)*x538))+x536);
op[29]=((((-0.132)*gclwh10_2*x127))+(((0.00066)*x200))+(((-1.0)*gclwh4_2*x160))+(((0.00066)*x140))+(((-1.0)*x326))+(((-0.066)*gclwh6_2*x110))+(((0.066)*gclwh10_2*x120))+(((-1.0)*gclwh6_2*x252))+(((0.132)*gclwh6_2*x116))+x512+(((-1.0)*gclwh12_2*x241))+((gclwh14_2*x161))+(((0.066)*gclwh8_2*x115))+(((-0.132)*gclwh8_2*x113)));
op[30]=((((1.634)*gclwh9_0*x115))+(((-1.0)*gclwh7_0*x193))+(((3.268)*gclwh7_0*x116))+(((-1.634)*gclwh7_0*x110))+(((-0.3268)*x169))+((gclwh15_0*x234))+x516+(((-1.0)*gclwh13_0*x189))+(((-1.0)*x334))+(((1.634)*gclwh11_0*x120))+(((-3.268)*gclwh9_0*x113))+((gclwh9_0*x142))+(((-3.268)*gclwh11_0*x127))+(((0.01634)*x218)));
op[31]=((-0.437912)+(((-1.0)*x537))+x539);
op[32]=(((gclwh11_10*x192))+((x120*x158))+(((-8.0)*gclwh9_10*x113))+(((-1.0)*x110*x195))+(((-1.0)*gclwh5_10*x191))+(((-0.8)*x111))+((x115*x190))+(((-8.0)*gclwh11_10*x127))+(((-1.0)*gclwh7_10*x199))+(((8.0)*gclwh7_10*x116))+(((0.04)*x165))+((gclwh15_10*x206)));
op[33]=((((-3.136)*gclwh9_13*x113))+(((0.01568)*x249))+(((-1.0)*gclwh13_15*x216))+(((3.136)*gclwh7_13*x116))+(((-0.01568)*x177))+(((0.01568)*x250))+(((-0.1072)*x254))+((gclwh15_15*x251))+(((1.568)*gclwh11_13*x120))+(((1.568)*gclwh9_13*x115))+(((-3.136)*gclwh11_13*x127))+(((-1.568)*gclwh7_13*x110)));
op[34]=((((-1.0)*gclwh13_0*x241))+(((0.00066)*x232))+(((-1.0)*gclwh7_0*x252))+(((0.132)*gclwh7_0*x116))+(((0.066)*gclwh11_0*x120))+x334+(((0.066)*gclwh9_0*x115))+(((-0.066)*gclwh7_0*x110))+((gclwh15_0*x161))+(((-1.0)*gclwh5_0*x160))+(((-1.0)*x516))+(((0.00066)*x218))+(((-0.132)*gclwh9_0*x113))+(((-0.132)*gclwh11_0*x127)));
op[35]=((-0.017688)+(((-1.0)*x539))+x537);
op[36]=((1.299066)+(((-1.0)*x540))+x531);
op[37]=((((3.268)*gclwh4_2*x127))+((gclwh6_2*x189))+(((-1.0)*gclwh12_2*x193))+(((-0.3268)*x212))+(((-0.3268)*x215))+(((3.268)*gclwh12_2*x116))+(((-1.634)*gclwh1_2*x115))+(((3.268)*gclwh1_2*x113))+(((-3.268)*gclwh14_2*x113))+(((-1.0)*x534))+(((-1.634)*gclwh12_2*x110))+(((1.634)*gclwh14_2*x115))+((gclwh14_2*x142))+(((-0.01634)*gclwh4_2*r22))+x524+(((3.268)*gclwh3_2*x116))+((gclwh3_2*x193))+(((-1.634)*gclwh3_2*x110))+((gclwh1_2*x142))+(((-1.634)*gclwh4_2*x120)));
op[38]=((((-1.0)*x120*x253))+(((-0.00536)*x156))+(((0.3136)*gclwh6_12*rxp1_2))+(((-0.00536)*gclwh4_14*r22))+((x115*x184))+(((-0.3136)*gclwh8_12*rxp0_2))+(((-1.072)*gclwh14_14*x113))+(((0.00536)*gclwh14_14*r20))+(((-1.0)*x110*x246))+(((1.072)*gclwh4_14*x127))+(((-0.3136)*x188))+(((1.072)*gclwh12_14*x116)));
op[39]=((-0.03602)+(((-0.8)*x185))+((x110*x117))+(((8.0)*gclwh14_11*x113))+((gclwh10_11*x191))+(((-1.0)*x115*x149))+((x120*x198))+(((-8.0)*gclwh12_11*x116))+((gclwh8_11*x206))+((gclwh4_11*x192))+((gclwh12_11*x199))+(((-8.0)*gclwh4_11*x127))+(((-0.04)*x167)));
op[40]=((0.033734)+(((-1.0)*x531))+x540);
IkReal x549=pz*pz;
IkReal x550=pp*pp;
IkReal x551=((0.2)*pz);
IkReal x552=(pp*r21);
IkReal x553=((0.2)*rxp1_2);
IkReal x554=((0.00134)*r22);
IkReal x555=((0.066)*pz);
IkReal x556=(gclwh14_8*npx);
IkReal x557=((0.001)*r21);
IkReal x558=(pp*r20);
IkReal x559=(gclwh13_10*r21);
IkReal x560=(gclwh5_0*r22);
IkReal x561=((0.0132)*rxp2_2);
IkReal x562=((2.0)*pz);
IkReal x563=(gclwh7_10*npy);
IkReal x564=((0.02)*r22);
IkReal x565=((0.00784)*r21);
IkReal x566=(gclwh15_9*r20);
IkReal x567=(gclwh15_1*r20);
IkReal x568=(gclwh12_8*r21);
IkReal x569=((0.01)*r22);
IkReal x570=(gclwh6_12*npy);
IkReal x571=((0.2)*rxp2_2);
IkReal x572=(gclwh4_3*pp);
IkReal x573=(npz*pz);
IkReal x574=(gclwh2_0*pz);
IkReal x575=((0.01)*r21);
IkReal x576=(gclwh14_2*pz);
IkReal x577=((0.2)*rxp0_2);
IkReal x578=(gclwh8_2*pz);
IkReal x579=((0.00784)*r22);
IkReal x580=((1.0)*pz);
IkReal x581=(gclwh9_13*rxp0_2);
IkReal x582=(npx*pz);
IkReal x583=((0.1568)*rxp0_2);
IkReal x584=(npy*pz);
IkReal x585=((0.784)*pp);
IkReal x586=((0.0066)*rxp1_2);
IkReal x587=((0.536)*gclwh15_15);
IkReal x588=(pp*r22);
IkReal x589=((0.0066)*rxp2_2);
IkReal x590=((0.536)*gclwh5_15);
IkReal x591=(gclwh12_8*npy);
IkReal x592=((9.045e-5)*r20);
IkReal x593=(gclwh14_8*r20);
IkReal x594=(gclwh4_2*pz);
IkReal x595=(gclwh12_3*rxp1_2);
IkReal x596=(gclwh13_1*r21);
IkReal x597=((0.0132)*rxp1_2);
IkReal x598=(gclwh15_15*r20);
IkReal x599=((0.268)*gclwh14_14);
IkReal x600=((0.135089)*rxp0_2);
IkReal x601=((0.02)*rxp0_2);
IkReal x602=(gclwh12_14*r21);
IkReal x603=((0.00066)*r21);
IkReal x604=(gclwh5_1*pp);
IkReal x605=(gclwh8_11*r20);
IkReal x606=((0.02)*r21);
IkReal x607=((0.00817)*r22);
IkReal x608=(gclwh7_0*rxp1_2);
IkReal x609=((0.001809)*rxp2_2);
IkReal x610=(gclwh4_14*rxp2_2);
IkReal x611=((4.0)*gclwh15_10);
IkReal x612=((0.00066)*r20);
IkReal x613=(gclwh9_10*rxp0_2);
IkReal x614=(gclwh14_11*r20);
IkReal x615=((0.00033)*r22);
IkReal x616=((0.1634)*rxp1_2);
IkReal x617=(gclwh13_15*r21);
IkReal x618=((0.00134)*r20);
IkReal x619=(gclwh3_3*r21);
IkReal x620=(gclwh5_1*r22);
IkReal x621=(gclwh7_13*r21);
IkReal x622=(gclwh13_9*rxp1_2);
IkReal x623=((0.00033)*r21);
IkReal x624=(gclwh7_0*pz);
IkReal x625=(gclwh14_8*rxp0_2);
IkReal x626=((0.17)*rxp2_2);
IkReal x627=((0.0536)*rxp1_2);
IkReal x628=((0.1634)*rxp2_2);
IkReal x629=((0.1568)*rxp2_2);
IkReal x630=((0.01)*r20);
IkReal x631=((0.01634)*r21);
IkReal x632=(gclwh7_10*rxp1_2);
IkReal x633=(gclwh12_3*pp);
IkReal x634=(gclwh13_9*r21);
IkReal x635=((0.268)*gclwh4_14);
IkReal x636=(gclwh12_8*rxp1_2);
IkReal x637=((0.4)*rxp2_2);
IkReal x638=((0.0132)*rxp0_2);
IkReal x639=((0.00784)*r20);
IkReal x640=(gclwh1_3*r20);
IkReal x641=(gclwh14_3*pp);
IkReal x642=((0.02)*rxp2_2);
IkReal x643=((0.0268)*rxp0_2);
IkReal x644=(gclwh15_9*rxp0_2);
IkReal x645=((0.1568)*rxp1_2);
IkReal x646=((0.0268)*rxp1_2);
IkReal x647=((0.536)*gclwh13_15);
IkReal x648=(gclwh2_1*r21);
IkReal x649=((0.02)*r20);
IkReal x650=((0.4)*rxp1_2);
IkReal x651=((0.01634)*r20);
IkReal x652=((0.268)*gclwh13_15);
IkReal x653=(gclwh10_2*pz);
IkReal x654=(gclwh15_0*pz);
IkReal x655=((0.268)*gclwh15_15);
IkReal x656=(gclwh5_15*r22);
IkReal x657=(gclwh8_12*rxp0_2);
IkReal x658=(gclwh9_0*pz);
IkReal x659=(gclwh4_3*r22);
IkReal x660=((0.268)*gclwh5_15);
IkReal x661=((0.0268)*rxp2_2);
IkReal x662=(gclwh4_8*r22);
IkReal x663=((1.634)*pz);
IkReal x664=((4.0)*gclwh5_10);
IkReal x665=(npx*pp);
IkReal x666=((4.0)*gclwh13_10);
IkReal x667=(gclwh12_3*r21);
IkReal x668=(gclwh4_2*r22);
IkReal x669=((0.00817)*r20);
IkReal x670=((1.568)*npx);
IkReal x671=(gclwh0_1*r20);
IkReal x672=(npy*pp);
IkReal x673=(gclwh13_9*npy);
IkReal x674=(gclwh11_0*pz);
IkReal x675=(gclwh5_9*r22);
IkReal x676=((0.4)*rxp0_2);
IkReal x677=((0.135089)*rxp2_2);
IkReal x678=(gclwh13_0*pz);
IkReal x679=(gclwh14_3*r20);
IkReal x680=((0.00033)*r20);
IkReal x681=((0.00134)*r21);
IkReal x682=(gclwh13_1*rxp1_2);
IkReal x683=(gclwh6_2*pz);
IkReal x684=((0.0536)*rxp0_2);
IkReal x685=((0.001809)*rxp0_2);
IkReal x686=((0.268)*gclwh12_14);
IkReal x687=(gclwh12_2*pz);
IkReal x688=((0.00268)*x656);
IkReal x689=((0.00268)*x617);
IkReal x690=((0.00268)*x598);
IkReal x691=((0.4)*x632);
IkReal x692=(gclwh15_10*x649);
IkReal x693=((0.4)*x613);
IkReal x694=(gclwh5_10*x564);
IkReal x695=(gclwh11_10*x637);
IkReal x696=((0.02)*x559);
IkReal x697=((0.0268)*x610);
IkReal x698=(gclwh6_5*x681);
IkReal x699=(gclwh12_14*x646);
IkReal x700=(gclwh14_14*x643);
IkReal x701=(gclwh10_5*x554);
IkReal x702=(gclwh8_5*x618);
IkReal x703=((0.01)*x605);
IkReal x704=((0.02)*x636);
IkReal x705=(gclwh10_11*x569);
IkReal x706=(gclwh14_11*x577);
IkReal x707=(gclwh4_8*x642);
IkReal x708=(gclwh14_8*x601);
IkReal x709=(gclwh12_11*x553);
IkReal x710=(gclwh4_11*x571);
IkReal x711=(gclwh6_11*x575);
IkReal x712=((0.02)*x622);
IkReal x713=(gclwh7_10*x575);
IkReal x714=(gclwh5_10*x571);
IkReal x715=(gclwh5_9*x642);
IkReal x716=(gclwh13_10*x553);
IkReal x717=(gclwh11_10*x569);
IkReal x718=(gclwh15_10*x577);
IkReal x719=(gclwh9_10*x630);
IkReal x720=(gclwh15_9*x601);
IkReal x721=(gclwh13_15*x646);
IkReal x722=(gclwh5_15*x661);
IkReal x723=(gclwh7_7*x681);
IkReal x724=(gclwh15_15*x643);
IkReal x725=(gclwh9_7*x618);
IkReal x726=(gclwh11_7*x554);
IkReal x727=((0.00268)*x602);
IkReal x728=((0.00268)*gclwh4_14*r22);
IkReal x729=((0.00268)*gclwh14_14*r20);
IkReal x730=((0.00134)*x602);
IkReal x731=(gclwh8_5*x643);
IkReal x732=(gclwh10_5*x661);
IkReal x733=(gclwh4_14*x554);
IkReal x734=(gclwh6_5*x646);
IkReal x735=(gclwh14_14*x618);
IkReal x736=((0.001)*x662);
IkReal x737=(gclwh6_11*x553);
IkReal x738=((0.01)*x614);
IkReal x739=(gclwh12_8*x557);
IkReal x740=(gclwh12_11*x575);
IkReal x741=(gclwh10_11*x571);
IkReal x742=((0.001)*x593);
IkReal x743=(gclwh4_11*x569);
IkReal x744=(gclwh8_11*x577);
IkReal x745=((0.001)*x566);
IkReal x746=(gclwh7_10*x553);
IkReal x747=(gclwh15_10*x630);
IkReal x748=((0.001)*x675);
IkReal x749=(gclwh11_10*x571);
IkReal x750=(gclwh13_9*x557);
IkReal x751=((0.01)*x559);
IkReal x752=(gclwh5_10*x569);
IkReal x753=(gclwh9_10*x577);
IkReal x754=((0.00134)*x598);
IkReal x755=(gclwh7_7*x646);
IkReal x756=(gclwh11_7*x661);
IkReal x757=(gclwh5_15*x554);
IkReal x758=((0.00134)*x617);
IkReal x759=(gclwh9_7*x643);
IkReal x760=(gclwh15_9*x582);
IkReal x761=((2.0)*x549);
IkReal x762=((1.0)*x550);
IkReal x763=(x552*x652);
IkReal x764=(x588*x660);
IkReal x765=(x582*x587);
IkReal x766=(x558*x655);
IkReal x767=(x573*x590);
IkReal x768=(x584*x647);
IkReal x769=((2.0)*gclwh15_10*x558);
IkReal x770=(x573*x664);
IkReal x771=(x584*x666);
IkReal x772=((2.0)*gclwh13_10*x552);
IkReal x773=(x582*x611);
IkReal x774=((2.0)*gclwh5_10*x588);
IkReal x775=((0.134)*gclwh6_5*x552);
IkReal x776=((0.268)*gclwh10_5*x573);
IkReal x777=((0.268)*gclwh8_5*x582);
IkReal x778=((0.268)*gclwh6_5*x584);
IkReal x779=((0.134)*gclwh8_5*x558);
IkReal x780=((0.134)*gclwh10_5*x588);
IkReal x781=(gclwh14_2*rxp0_2*x551);
IkReal x782=(gclwh6_11*npy*x562);
IkReal x783=(x588*x653);
IkReal x784=(x569*x653);
IkReal x785=(x553*x633);
IkReal x786=(x558*x578);
IkReal x787=(x571*x572);
IkReal x788=(x578*x630);
IkReal x789=(gclwh12_2*rxp1_2*x551);
IkReal x790=(x577*x641);
IkReal x791=(gclwh4_2*rxp2_2*x551);
IkReal x792=(gclwh10_11*npz*x562);
IkReal x793=(x575*x683);
IkReal x794=(gclwh8_11*npx*x562);
IkReal x795=(gclwh11_10*npz*x562);
IkReal x796=(gclwh9_10*npx*x562);
IkReal x797=(gclwh13_1*pp*x553);
IkReal x798=(x588*x674);
IkReal x799=(x571*x604);
IkReal x800=(gclwh15_0*rxp0_2*x551);
IkReal x801=(x569*x674);
IkReal x802=(x630*x658);
IkReal x803=(x558*x658);
IkReal x804=(gclwh15_1*pp*x577);
IkReal x805=(gclwh5_0*rxp2_2*x551);
IkReal x806=(gclwh13_0*rxp1_2*x551);
IkReal x807=(x575*x624);
IkReal x808=(x562*x563);
IkReal x809=((0.268)*gclwh9_7*x582);
IkReal x810=((0.134)*gclwh7_7*x552);
IkReal x811=((0.268)*gclwh11_7*x573);
IkReal x812=((0.134)*gclwh11_7*x588);
IkReal x813=((0.268)*gclwh7_7*x584);
IkReal x814=((0.134)*gclwh9_7*x558);
IkReal x815=(x552*x686);
IkReal x816=((0.536)*gclwh14_14*x582);
IkReal x817=(x588*x635);
IkReal x818=((0.536)*gclwh4_14*x573);
IkReal x819=(x558*x599);
IkReal x820=((0.536)*gclwh12_14*x584);
IkReal x821=((0.134)*gclwh12_14*x552);
IkReal x822=(x582*x599);
IkReal x823=((0.134)*gclwh4_14*x588);
IkReal x824=(x584*x686);
IkReal x825=((0.134)*gclwh14_14*x558);
IkReal x826=(x573*x635);
IkReal x827=(x558*x576);
IkReal x828=(x576*x630);
IkReal x829=((0.1)*gclwh4_8*x588);
IkReal x830=(x550*x667);
IkReal x831=(gclwh1_2*pz*x630);
IkReal x832=(gclwh3_2*pz*x575);
IkReal x833=(gclwh4_11*npz*x562);
IkReal x834=((0.1)*gclwh12_8*x552);
IkReal x835=(x550*x619);
IkReal x836=(x550*x640);
IkReal x837=(gclwh6_2*rxp1_2*x551);
IkReal x838=(x550*x659);
IkReal x839=(gclwh12_11*npy*x562);
IkReal x840=(x551*x556);
IkReal x841=(gclwh4_8*npz*x551);
IkReal x842=(gclwh14_11*npx*x562);
IkReal x843=(x551*x591);
IkReal x844=(gclwh10_2*rxp2_2*x551);
IkReal x845=(x569*x594);
IkReal x846=(gclwh8_2*rxp0_2*x551);
IkReal x847=((0.1)*gclwh14_8*x558);
IkReal x848=(x575*x687);
IkReal x849=(x575*x678);
IkReal x850=(gclwh0_0*pz*x630);
IkReal x851=(gclwh11_0*rxp2_2*x551);
IkReal x852=(x574*x575);
IkReal x853=(x551*x673);
IkReal x854=(x550*x567);
IkReal x855=(pp*pz*x560);
IkReal x856=((0.01)*pz*x560);
IkReal x857=(x552*x678);
IkReal x858=(gclwh9_0*rxp0_2*x551);
IkReal x859=((0.1)*gclwh15_9*x558);
IkReal x860=(x550*x648);
IkReal x861=(gclwh5_10*npz*x562);
IkReal x862=(gclwh13_10*npy*x562);
IkReal x863=(gclwh5_9*npz*x551);
IkReal x864=(x550*x671);
IkReal x865=(x551*x608);
IkReal x866=((0.1)*gclwh5_9*x588);
IkReal x867=(gclwh15_9*npx*x551);
IkReal x868=((0.1)*gclwh13_9*x552);
IkReal x869=(gclwh15_10*npx*x562);
IkReal x870=(x630*x654);
IkReal x871=(x573*x660);
IkReal x872=((0.134)*gclwh15_15*x558);
IkReal x873=(x584*x652);
IkReal x874=((0.134)*gclwh13_15*x552);
IkReal x875=(x582*x655);
IkReal x876=((0.134)*gclwh5_15*x588);
IkReal x877=(gclwh6_2*npy*x761);
IkReal x878=(gclwh6_2*x552*x580);
IkReal x879=(gclwh10_2*npz*x761);
IkReal x880=(gclwh8_2*npx*x761);
IkReal x881=(gclwh7_0*npy*x761);
IkReal x882=(gclwh9_0*npx*x761);
IkReal x883=(gclwh11_0*npz*x761);
IkReal x884=(gclwh7_0*x552*x580);
IkReal x885=(gclwh12_2*npy*x761);
IkReal x886=(gclwh3_2*npy*x761);
IkReal x887=(gclwh1_2*npx*x761);
IkReal x888=(npx*x562*x641);
IkReal x889=(gclwh4_2*npz*x761);
IkReal x890=(npz*x562*x572);
IkReal x891=(gclwh12_2*x552*x580);
IkReal x892=(gclwh1_2*x558*x580);
IkReal x893=(gclwh3_3*x562*x672);
IkReal x894=(gclwh4_2*x580*x588);
IkReal x895=(gclwh1_3*x562*x665);
IkReal x896=(gclwh3_2*x552*x580);
IkReal x897=(npy*x562*x633);
IkReal x898=(gclwh14_2*npx*x761);
IkReal x899=(x679*x762);
IkReal x900=(gclwh0_0*npx*x761);
IkReal x901=(gclwh2_0*npy*x761);
IkReal x902=(npz*x562*x604);
IkReal x903=(gclwh13_1*x562*x672);
IkReal x904=(gclwh15_0*npx*x761);
IkReal x905=(gclwh2_1*x562*x672);
IkReal x906=(gclwh0_1*x562*x665);
IkReal x907=(gclwh5_0*npz*x761);
IkReal x908=(gclwh13_0*npy*x761);
IkReal x909=(gclwh0_0*x558*x580);
IkReal x910=(gclwh15_0*x558*x580);
IkReal x911=((1.0)*x552*x574);
IkReal x912=(x596*x762);
IkReal x913=(x620*x762);
IkReal x914=(gclwh15_1*x562*x665);
IkReal x915=(x732+x731);
IkReal x916=(x721+x722);
IkReal x917=(x756+x759);
IkReal x918=(x697+x699);
IkReal x919=(x703+x706+x705+x782);
IkReal x920=(x719+x718+x717+x808);
IkReal x921=(x746+x747+x862+x861);
IkReal x922=(x737+x738+x833+x839);
IkReal x923=(x690+x768+x766+x767);
IkReal x924=(x754+x871+x872+x873);
IkReal x925=(x698+x777+x776+x775);
IkReal x926=(x729+x818+x819+x820);
IkReal x927=(x735+x826+x825+x824);
IkReal x928=(x723+x810+x811+x809);
IkReal x929=(x744+x743+x740+x741+x842);
IkReal x930=(x751+x753+x752+x749+x869);
IkReal x931=(x713+x714+x716+x795+x796);
IkReal x932=(x711+x710+x709+x792+x794);
IkReal x933=(x691+x692+x771+x770+x769);
IkReal x934=(x727+x728+x816+x817+x815);
IkReal x935=(x702+x701+x779+x778+x780);
IkReal x936=(x757+x758+x874+x875+x876);
IkReal x937=(x725+x726+x814+x812+x813);
IkReal x938=(x733+x730+x823+x822+x821);
IkReal x939=(x689+x688+x764+x765+x763);
IkReal x940=(x694+x695+x696+x693+x773+x772+x774);
IkReal x941=(x720+x884+x883+x882+x805+x804+x807+x806);
IkReal x942=(x708+x791+x790+x793+x789+x878+x879+x880);
IkReal x943=(x712+x715+x797+x799+x798+x881+x801+x800+x803+x802);
IkReal x944=(x707+x704+x783+x781+x786+x787+x784+x785+x788+x877);
IkReal x945=(x750+x748+x868+x867+x866+x865+x870+x913+x912+x911+x910+x914+x905+x906+x907+x908+x909);
IkReal x946=(x551+x736+x739+x885+x887+x886+x889+x888+x829+x828+x827+x834+x835+x836+x837+x830+x831+x832+x838+x840);
IkReal x947=(x742+x896+x897+x894+x895+x892+x893+x890+x891+x898+x899+x841+x843+x845+x844+x847+x846+x848);
IkReal x948=(x551+x745+x852+x853+x850+x851+x856+x857+x854+x855+x858+x859+x864+x863+x860+x849+x904+x900+x901+x902+x903);
op[41]=((((-1.0)*x926))+(((0.132)*gclwh3_2*x584))+(((0.132)*gclwh1_2*x582))+(((0.132)*gclwh12_2*x584))+(((-1.0)*gclwh8_2*x638))+((gclwh14_2*x612))+(((-0.066)*gclwh3_2*x552))+(((-1.0)*gclwh12_2*x603))+((gclwh6_2*x597))+(((0.066)*gclwh14_2*x558))+((gclwh1_2*x612))+(((-0.00066)*x668))+(((-0.132)*npx*x576))+(((-0.066)*gclwh4_2*x588))+(((-0.066)*gclwh12_2*x552))+(((-0.066)*gclwh1_2*x558))+(((-1.0)*gclwh10_2*x561))+x934+(((0.132)*gclwh4_2*x573))+((gclwh3_2*x603)));
op[42]=((((-1.634)*gclwh2_0*x552))+(((0.3268)*gclwh11_0*rxp2_2))+(((0.01634)*x560))+(((-3.268)*gclwh5_0*x573))+(((0.3268)*gclwh9_0*rxp0_2))+((gclwh13_0*x631))+(((-1.634)*gclwh0_0*x558))+(((1.634)*pp*x560))+(((-3.268)*gclwh13_0*x584))+(((-0.3268)*x608))+(((3.268)*npy*x574))+(((1.634)*gclwh13_0*x552))+(((-1.634)*gclwh15_0*x558))+((gclwh0_0*x651))+(((3.268)*gclwh0_0*x582))+(((3.268)*gclwh15_0*x582))+((gclwh2_0*x631))+x923+(((-1.0)*gclwh15_0*x651))+(((-1.0)*x939)));
op[43]=((1.299066)+x940+(((-1.0)*x933)));
op[44]=((0.03602)+(((0.04)*gclwh5_10*r22))+(((-8.0)*gclwh13_10*x584))+(((0.8)*gclwh11_10*rxp2_2))+(((0.04)*x559))+((x588*x664))+(((-0.8)*x632))+(((-8.0)*gclwh5_10*x573))+(((-1.0)*x558*x611))+(((8.0)*gclwh15_10*x582))+((x552*x666))+(((0.8)*x613))+(((-0.04)*gclwh15_10*r20)));
op[45]=((((0.3136)*x581))+(((-1.072)*gclwh13_15*x584))+(((-1.072)*gclwh5_15*x573))+(((1.072)*gclwh15_15*x582))+(((0.00536)*x617))+(((-0.00536)*x598))+(((-1.0)*x558*x587))+(((0.00536)*x656))+(((0.3136)*gclwh11_13*rxp2_2))+((x588*x590))+(((-0.3136)*gclwh7_13*rxp1_2))+((x552*x647)));
op[46]=((((0.132)*npy*x574))+(((-1.0)*gclwh7_0*x597))+(((-1.0)*x923))+(((-0.066)*gclwh2_0*x552))+((gclwh2_0*x603))+((gclwh9_0*x638))+((gclwh11_0*x561))+(((0.066)*gclwh13_0*x552))+(((-0.132)*gclwh5_0*x573))+(((-1.0)*gclwh15_0*x612))+(((0.132)*gclwh0_0*x582))+((gclwh13_0*x603))+(((0.066)*pp*x560))+(((0.00066)*x560))+(((0.132)*gclwh15_0*x582))+((gclwh0_0*x612))+(((-0.066)*gclwh0_0*x558))+(((-0.066)*gclwh15_0*x558))+x939+(((-0.132)*gclwh13_0*x584)));
op[47]=((0.033734)+(((-1.0)*x940))+x933);
op[48]=(((gclwh8_12*x669))+(((0.1634)*x625))+((gclwh10_12*x607))+(((-0.817)*gclwh6_12*x552))+(((-1.634)*gclwh10_12*x573))+(((0.817)*gclwh8_12*x558))+(((-1.0)*x918))+(((-0.00817)*gclwh6_12*r21))+((x570*x663))+(((-1.634)*gclwh8_12*x582))+(((-1.0)*gclwh12_8*x616))+x700+x925+(((-1.0)*gclwh4_8*x628))+(((0.817)*gclwh10_12*x588))+(((-1.0)*x935)));
op[49]=((((-0.135089)*x595))+(((-1.0)*x942))+(((-1.0)*gclwh10_11*x588))+((gclwh14_3*x600))+(((-1.0)*x919))+(((-1.0)*gclwh4_3*x677))+(((-1.0)*gclwh8_11*x558))+x932+x944+((gclwh6_11*x552)));
op[50]=((0.210112)+(((4.0)*gclwh8_11*x582))+(((-1.0)*gclwh14_11*x676))+((gclwh4_11*x637))+(((-1.0)*gclwh10_11*x564))+((gclwh6_11*x606))+(((2.0)*gclwh6_11*x552))+(((-0.02)*x605))+((gclwh12_11*x650))+(((4.0)*gclwh10_11*x573))+(((-4.0)*gclwh6_11*x584))+(((-2.0)*gclwh10_11*x588))+(((-2.0)*gclwh8_11*x558)));
op[51]=((((0.0536)*x610))+(((-1.0)*gclwh10_2*x579))+(((-0.17)*x625))+((gclwh12_14*x627))+((gclwh6_2*x565))+(((-1.0)*gclwh8_2*x639))+(((-1.0)*gclwh10_2*r22*x585))+(((0.17)*x636))+((x578*x670))+((gclwh12_2*x645))+(((-1.0)*gclwh14_2*x583))+(((-0.784)*gclwh8_2*x558))+(((-1.0)*gclwh14_14*x684))+(((1.568)*gclwh10_2*x573))+(((0.784)*gclwh6_2*x552))+((gclwh4_8*x626))+(((-1.568)*gclwh6_2*x584))+((gclwh4_2*x629)));
op[52]=((((-1.0)*gclwh8_12*npx*x555))+((gclwh4_8*x589))+((x555*x570))+(((0.033)*gclwh10_12*x588))+(((-0.033)*gclwh6_12*x552))+((gclwh8_12*x680))+(((-1.0)*x700))+(((0.033)*gclwh8_12*x558))+(((-0.0066)*x625))+((gclwh12_8*x586))+x925+x918+(((-1.0)*gclwh6_12*x623))+(((-1.0)*gclwh10_12*npz*x555))+(((-1.0)*x935))+((gclwh10_12*x615)));
op[53]=((((-1.0)*x942))+(((-0.001809)*x595))+((gclwh8_11*x558))+((gclwh10_11*x588))+((gclwh14_3*x685))+(((-1.0)*gclwh4_3*x609))+(((-1.0)*gclwh6_11*x552))+x919+x944+(((-1.0)*x932)));
op[54]=((((-1.0)*x941))+((gclwh11_10*x588))+(((-0.135089)*x682))+(((-1.0)*gclwh5_1*x677))+(((-1.0)*gclwh7_10*x552))+((gclwh15_1*x600))+x920+x943+((gclwh9_10*x558))+(((-1.0)*x931)));
op[55]=(((gclwh11_13*x607))+(((-1.0)*gclwh5_9*x628))+(((-1.634)*gclwh9_13*x582))+(((-1.0)*gclwh13_9*x616))+(((1.634)*gclwh7_13*x584))+(((-1.0)*x916))+(((0.817)*gclwh9_13*x558))+(((0.817)*gclwh11_13*x588))+(((0.1634)*x644))+(((-0.817)*gclwh7_13*x552))+((gclwh9_13*x669))+(((-1.634)*gclwh11_13*x573))+x724+(((-0.00817)*x621))+x928+(((-1.0)*x937)));
op[56]=((((-1.0)*gclwh5_9*x626))+((gclwh15_15*x684))+(((1.568)*gclwh9_0*x582))+(((-0.17)*x622))+(((-1.568)*gclwh7_0*x584))+(((0.784)*gclwh7_0*x552))+((gclwh13_0*x645))+(((-0.0536)*gclwh5_15*rxp2_2))+(((-1.0)*gclwh13_15*x627))+(((1.568)*gclwh11_0*x573))+(((-1.0)*gclwh15_0*x583))+(((-0.784)*gclwh9_0*x558))+(((0.17)*x644))+((gclwh5_0*x629))+(((-1.0)*gclwh11_0*r22*x585))+(((-1.0)*gclwh11_0*x579))+((gclwh7_0*x565))+(((-1.0)*gclwh9_0*x639)));
op[57]=((0.210112)+(((2.0)*gclwh7_10*x552))+((gclwh7_10*x606))+(((-4.0)*pz*x563))+(((-1.0)*gclwh9_10*x649))+(((4.0)*gclwh11_10*x573))+(((-1.0)*gclwh15_10*x676))+((gclwh13_10*x650))+(((-2.0)*gclwh11_10*x588))+(((-1.0)*gclwh11_10*x564))+(((-2.0)*gclwh9_10*x558))+((gclwh5_10*x637))+(((4.0)*gclwh9_10*x582)));
op[58]=((((-1.0)*x920))+(((-1.0)*x941))+((gclwh15_1*x685))+(((-1.0)*gclwh9_10*x558))+((gclwh7_10*x552))+(((-1.0)*gclwh11_10*x588))+(((-0.001809)*x682))+x931+x943+(((-1.0)*gclwh5_1*x609)));
op[59]=((((0.033)*gclwh11_13*x588))+((gclwh11_13*x615))+((gclwh9_13*x680))+(((-1.0)*gclwh11_13*npz*x555))+(((0.033)*gclwh9_13*x558))+(((-1.0)*x724))+((gclwh7_13*npy*x555))+(((-0.033)*gclwh7_13*x552))+(((-1.0)*gclwh9_13*npx*x555))+(((-0.00033)*x621))+((gclwh13_9*x586))+(((-0.0066)*x644))+x928+x916+((gclwh5_9*x589))+(((-1.0)*x937)));
op[60]=((((0.817)*gclwh14_8*x558))+(((-1.0)*gclwh10_12*x628))+(((-0.817)*gclwh12_8*x552))+(((-1.0)*x556*x663))+(((1.634)*gclwh12_8*x584))+((gclwh6_12*x616))+(((-1.0)*gclwh4_8*x607))+(((-1.0)*x734))+(((1.634)*gclwh4_8*x573))+(((-0.817)*gclwh4_8*x588))+x927+x915+(((0.00817)*x593))+(((-0.1634)*x657))+(((-0.00817)*x568))+(((-1.0)*x938)));
op[61]=((0.685445)+(((-1.0)*x922))+((gclwh12_11*x552))+(((-1.35089)*gclwh14_3*x582))+(((-1.0)*x947))+(((0.00675445)*x619))+(((-0.685445)*gclwh3_3*x552))+(((-0.00675445)*x659))+(((0.00675445)*x679))+(((-0.00675445)*x667))+(((0.665445)*gclwh14_3*x558))+(((-0.665445)*r22*x572))+(((1.35089)*gclwh4_3*x573))+(((-0.685445)*gclwh1_3*x558))+(((-1.0)*gclwh14_11*x558))+(((1.35089)*gclwh12_3*x584))+(((1.35089)*gclwh3_3*x584))+(((0.00675445)*x640))+(((1.35089)*gclwh1_3*x582))+(((-0.665445)*gclwh12_3*x552))+x929+x946+((gclwh4_11*x588)));
op[62]=((0.089834)+(((4.0)*gclwh14_11*x582))+((gclwh12_11*x606))+(((-4.0)*gclwh4_11*x573))+((gclwh4_11*x564))+((gclwh10_11*x637))+((gclwh8_11*x676))+(((-4.0)*gclwh12_11*x584))+(((-1.0)*gclwh6_11*x650))+(((-2.0)*gclwh14_11*x558))+(((2.0)*gclwh12_11*x552))+(((2.0)*gclwh4_11*x588))+(((-0.02)*x614)));
op[63]=((((-1.7)*gclwh12_8*x584))+(((-0.784)*gclwh14_2*x558))+(((-1.568)*gclwh4_2*x573))+(((-1.0)*x926))+(((0.85)*gclwh4_8*x588))+(((0.85)*gclwh12_8*x552))+(((-1.0)*gclwh1_2*x639))+((gclwh12_2*x565))+(((0.784)*gclwh1_2*x558))+(((-1.568)*gclwh12_2*x584))+(((0.0085)*x662))+(((-0.85)*gclwh14_8*x558))+(((0.784)*gclwh3_2*x552))+(((-0.0085)*x593))+(((-1.0)*gclwh6_2*x645))+(((-1.568)*gclwh3_2*x584))+((gclwh10_2*x629))+((gclwh4_2*x579))+((x585*x668))+(((1.7)*pz*x556))+(((-1.0)*gclwh3_2*x565))+(((0.784)*gclwh12_2*x552))+((x576*x670))+((gclwh8_2*x583))+x934+(((-1.7)*gclwh4_8*x573))+(((-1.568)*gclwh1_2*x582))+(((-1.0)*gclwh14_2*x639))+(((0.0085)*x568)));
op[64]=((((-1.0)*x927))+(((-1.0)*gclwh10_12*x589))+(((-0.00033)*x593))+(((0.033)*gclwh4_8*x588))+((gclwh4_8*x615))+((x555*x556))+(((-1.0)*x734))+((gclwh6_12*x586))+(((-0.0066)*x657))+(((0.033)*gclwh12_8*x552))+(((0.00033)*x568))+x938+x915+(((-1.0)*gclwh4_8*npz*x555))+(((-1.0)*x555*x591))+(((-0.033)*gclwh14_8*x558)));
op[65]=((-0.019045)+(((-1.0)*x929))+(((-0.01809)*gclwh14_3*x582))+(((-1.0)*x947))+(((-9.045e-5)*x659))+(((0.01809)*gclwh3_3*x584))+(((9.045e-5)*x619))+(((0.000955)*gclwh12_3*x552))+(((0.000955)*r22*x572))+(((-0.000955)*gclwh14_3*x558))+((gclwh14_3*x592))+(((-0.019045)*gclwh3_3*x552))+(((-9.045e-5)*x667))+(((0.01809)*gclwh4_3*x573))+(((-1.0)*gclwh4_11*x588))+(((0.01809)*gclwh12_3*x584))+((gclwh1_3*x592))+(((-0.019045)*gclwh1_3*x558))+(((-1.0)*gclwh12_11*x552))+x922+x946+(((0.01809)*gclwh1_3*x582))+((gclwh14_11*x558)));
op[66]=((-0.685445)+(((-1.0)*x921))+(((-1.0)*gclwh15_10*x558))+((gclwh5_10*x588))+(((-1.0)*x945))+((gclwh13_10*x552))+(((1.35089)*gclwh2_1*x584))+(((1.35089)*gclwh0_1*x582))+(((0.00675445)*x671))+(((0.00675445)*x620))+(((-0.00675445)*x567))+(((-0.685445)*gclwh2_1*x552))+(((-0.665445)*gclwh15_1*x558))+(((0.00675445)*x596))+(((-1.35089)*gclwh13_1*x584))+(((0.665445)*gclwh5_1*x588))+(((1.35089)*gclwh15_1*x582))+(((-0.685445)*gclwh0_1*x558))+(((-1.35089)*gclwh5_1*x573))+(((0.665445)*gclwh13_1*x552))+(((0.00675445)*x648))+x930+x948);
op[67]=((((-1.0)*x924))+(((-1.634)*gclwh13_9*x584))+(((0.817)*gclwh5_9*x588))+(((-0.817)*gclwh15_9*x558))+(((0.1634)*x581))+(((0.817)*gclwh13_9*x552))+(((-1.634)*gclwh5_9*x573))+((gclwh11_13*x628))+(((-1.0)*x917))+(((-1.0)*gclwh7_13*x616))+((gclwh5_9*x607))+x755+(((1.634)*x760))+x936+(((-0.00817)*x566))+(((0.00817)*x634)));
op[68]=((((-1.0)*x923))+(((-1.0)*gclwh2_0*x565))+(((1.568)*gclwh5_0*x573))+(((0.1568)*x608))+(((-1.0)*gclwh11_0*x629))+(((-1.0)*gclwh0_0*x639))+(((-1.0)*x560*x585))+(((0.784)*gclwh0_0*x558))+(((0.85)*gclwh13_9*x552))+(((-1.0)*gclwh13_0*x565))+(((-1.568)*npy*x574))+(((0.784)*gclwh2_0*x552))+(((-0.0085)*x566))+((gclwh15_0*x639))+(((1.7)*x760))+(((-1.7)*gclwh13_9*x584))+(((0.85)*gclwh5_9*x588))+(((0.0085)*x675))+(((-0.85)*gclwh15_9*x558))+(((-0.00784)*x560))+(((-1.568)*gclwh15_0*x582))+(((-1.0)*gclwh9_0*x583))+(((0.784)*gclwh15_0*x558))+(((-1.568)*gclwh0_0*x582))+(((-0.784)*gclwh13_0*x552))+(((1.568)*gclwh13_0*x584))+(((-1.7)*gclwh5_9*x573))+x939+(((0.0085)*x634)));
op[69]=((0.089834)+(((-1.0)*x940))+x933);
op[70]=((0.019045)+(((-0.01809)*gclwh13_1*x584))+(((-1.0)*gclwh13_10*x552))+(((-1.0)*x945))+(((-9.045e-5)*x567))+((gclwh15_10*x558))+(((0.000955)*gclwh15_1*x558))+(((-0.01809)*gclwh5_1*x573))+(((-0.019045)*gclwh0_1*x558))+(((9.045e-5)*x596))+(((-0.019045)*gclwh2_1*x552))+(((0.01809)*gclwh0_1*x582))+(((9.045e-5)*x648))+(((0.01809)*gclwh15_1*x582))+(((-0.000955)*gclwh13_1*x552))+(((9.045e-5)*x620))+(((-1.0)*gclwh5_10*x588))+((gclwh0_1*x592))+x921+x948+(((0.01809)*gclwh2_1*x584))+(((-0.000955)*gclwh5_1*x588))+(((-1.0)*x930)));
op[71]=((((-0.033)*gclwh5_9*x588))+((x555*x673))+(((-1.0)*gclwh7_13*x586))+(((-1.0)*x917))+((gclwh11_13*x589))+(((0.0066)*x581))+(((-1.0)*gclwh15_9*npx*x555))+(((-1.0)*gclwh13_9*x623))+(((0.033)*gclwh15_9*x558))+(((-1.0)*gclwh5_9*x615))+((gclwh5_9*npz*x555))+x755+(((0.00033)*x566))+x924+(((-0.033)*gclwh13_9*x552))+(((-1.0)*x936)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x949=htj1*htj1;
CheckValue<IkReal> x950=IKPowWithIntegerCheck(((1.0)+x949),-1);
if(!x950.valid){
continue;
}
cj1array[numsolutions]=((x950.value)*(((1.0)+(((-1.0)*x949)))));
CheckValue<IkReal> x951=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x951.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x951.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x952=htj2*htj2;
CheckValue<IkReal> x953=IKPowWithIntegerCheck(((1.0)+x952),-1);
if(!x953.valid){
continue;
}
cj2array[numsolutions]=((x953.value)*(((1.0)+(((-1.0)*x952)))));
CheckValue<IkReal> x954=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x954.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x954.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x955=htj3*htj3;
CheckValue<IkReal> x956=IKPowWithIntegerCheck(((1.0)+x955),-1);
if(!x956.valid){
continue;
}
cj3array[numsolutions]=((x956.value)*(((1.0)+(((-1.0)*x955)))));
CheckValue<IkReal> x957=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x957.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x957.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x958=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x958);
rxp1_0=(pz*r11);
rxp1_1=(r01*x958);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x959=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x959);
rxp1_0=(pz*r11);
rxp1_1=(r01*x959);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x960=IKPowWithIntegerCheck(r22,-1);
if(!x960.valid){
continue;
}
CheckValue<IkReal> x961=IKPowWithIntegerCheck(sj3,-1);
if(!x961.valid){
continue;
}
sj4array[0]=((x960.value)*(x961.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x962=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x962);
rxp1_0=(pz*r11);
rxp1_1=(r01*x962);
IkReal x963=((16.0)*sj4);
IkReal x964=(cj1*cj2);
IkReal x965=((4.0)*sj3);
IkReal x966=((8.0)*sj4);
IkReal x967=((4.0)*cj4);
IkReal x968=(sj1*sj2);
IkReal x969=((4.0)*sj4);
IkReal x970=(cj3*r02);
IkReal x971=((16.0)*sj3);
IkReal x972=((8.0)*sj3);
IkReal x973=((12.0)*cj4);
IkReal x974=((12.0)*sj4);
IkReal x975=(cj3*r12);
IkReal x976=(r11*x965);
IkReal x977=(r01*x965);
IkReal x978=(r01*x968);
IkReal x979=(cj3*cj4*r01);
IkReal x980=(cj3*cj4*r11);
IkReal x981=(cj3*r10*x967);
IkReal x982=(x974*x975);
IkReal x983=(cj3*r00*x967);
IkReal x984=(x970*x974);
IkReal x985=(r00*x968*x969);
IkReal x986=(r02*x968*x973);
IkReal x987=(r00*x964*x969);
IkReal x988=(r02*x964*x973);
IkReal x989=(r10*x968*x969);
IkReal x990=(r12*x964*x973);
IkReal x991=(r12*x968*x973);
IkReal x992=(r10*x964*x969);
IkReal x993=(x987+x976);
IkReal x994=(x989+x977);
IkReal x995=(x985+x981);
IkReal x996=(x988+x982);
IkReal x997=(x992+x983);
IkReal x998=(x991+x984);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*r11*x963*x964))+(((-1.0)*r00*x971))+(((-16.0)*x979))+((r11*x963*x968)))))))+(((0.5)*(IKabs(((((-1.0)*x969*x970))+(((-1.0)*r12*x967*x968))+((r12*x964*x967))+(((-1.0)*x997))+x994)))))+(((0.5)*(IKabs(((((-1.0)*x995))+(((-1.0)*x996))+x993+x986)))))+(((0.5)*(IKabs(((((-1.0)*x994))+(((-1.0)*x998))+x990+x997)))))+(((0.5)*(IKabs(((((-1.0)*x993))+(((-1.0)*x996))+x995+x986)))))+(((0.5)*(IKabs(((((-1.0)*x963*x978))+(((-16.0)*x980))+((r01*x963*x964))+(((-1.0)*r10*x971)))))))+(((0.5)*(IKabs(((((-1.0)*x997))+(((-1.0)*x998))+x990+x994)))))+(((0.5)*(IKabs((((r02*x967*x968))+(((-1.0)*x969*x975))+(((-1.0)*x995))+(((-1.0)*r02*x964*x967))+x993)))))+(IKabs((((r11*x966*x968))+(((-1.0)*r00*x972))+(((-8.0)*x979))+(((-1.0)*r11*x964*x966)))))+(IKabs((((r01*x964*x966))+(((-1.0)*x966*x978))+(((-8.0)*x980))+(((-1.0)*r10*x972))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x999=(r10*sj3);
IkReal x1000=(r01*sj4);
IkReal x1001=(cj1*cj2);
IkReal x1002=(cj3*cj4);
IkReal x1003=(sj1*sj2);
IkReal x1004=(cj4*r02);
IkReal x1005=((4.0)*r11*sj3);
IkReal x1006=(cj3*r12*sj4);
IkReal x1007=((4.0)*r00*sj4);
IkReal x1008=((4.0)*r10*x1002);
IkReal x1009=((12.0)*x1006);
IkReal x1010=((4.0)*x1006);
IkReal x1011=(x1001*x1007);
IkReal x1012=(x1003*x1007);
IkReal x1013=((12.0)*x1003*x1004);
IkReal x1014=((12.0)*x1001*x1004);
IkReal x1015=((4.0)*x1003*x1004);
IkReal x1016=((4.0)*x1001*x1004);
IkReal x1017=(x1011+x1005);
IkReal x1018=(x1012+x1008);
IkReal x1019=(x1016+x1010);
IkReal x1020=(x1014+x1009);
IkReal x1021=((((8.0)*x1000*x1001))+(((-8.0)*x1000*x1003))+(((-8.0)*r11*x1002))+(((-8.0)*x999)));
op[0]=(x1015+x1017+(((-1.0)*x1019))+(((-1.0)*x1018)));
op[1]=x1021;
op[2]=(x1017+x1013+(((-1.0)*x1018))+(((-1.0)*x1020)));
op[3]=((((-16.0)*x999))+(((-16.0)*r11*x1002))+(((-16.0)*x1000*x1003))+(((16.0)*x1000*x1001)));
op[4]=(x1018+x1013+(((-1.0)*x1017))+(((-1.0)*x1020)));
op[5]=x1021;
op[6]=(x1018+x1015+(((-1.0)*x1019))+(((-1.0)*x1017)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1022=(cj1*cj2);
IkReal x1023=((4.0)*cj4);
IkReal x1024=(sj1*sj2);
IkReal x1025=((4.0)*sj4);
IkReal x1026=(r00*sj3);
IkReal x1027=(cj3*r02);
IkReal x1028=((4.0)*r01*sj3);
IkReal x1029=((16.0)*r11*sj4);
IkReal x1030=(cj3*cj4*r01);
IkReal x1031=((12.0)*cj4*r12);
IkReal x1032=((8.0)*r11*sj4);
IkReal x1033=(cj3*r00*x1023);
IkReal x1034=((12.0)*sj4*x1027);
IkReal x1035=(x1025*x1027);
IkReal x1036=(r10*x1022*x1025);
IkReal x1037=(r10*x1024*x1025);
IkReal x1038=(x1022*x1031);
IkReal x1039=(x1024*x1031);
IkReal x1040=(r12*x1022*x1023);
IkReal x1041=(r12*x1023*x1024);
IkReal x1042=(x1037+x1028);
IkReal x1043=(x1033+x1036);
IkReal x1044=(x1041+x1035);
IkReal x1045=(x1039+x1034);
IkReal x1046=((((-8.0)*x1030))+(((-1.0)*x1022*x1032))+((x1024*x1032))+(((-8.0)*x1026)));
j5evalpoly[0]=(x1043+x1040+(((htj5*htj5)*((x1043+x1038+(((-1.0)*x1045))+(((-1.0)*x1042))))))+(((htj5*htj5*htj5)*(((((-16.0)*x1030))+(((-1.0)*x1022*x1029))+(((-16.0)*x1026))+((x1024*x1029))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1042+x1040+(((-1.0)*x1044))+(((-1.0)*x1043))))))+((x1046*(htj5*htj5*htj5*htj5*htj5)))+((htj5*x1046))+(((htj5*htj5*htj5*htj5)*((x1042+x1038+(((-1.0)*x1045))+(((-1.0)*x1043))))))+(((-1.0)*x1044))+(((-1.0)*x1042)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1047=(cj5*sj4);
IkReal x1048=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1048))+(((-1.0)*r00*x1047)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1048))+((r10*x1047))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1048))+(((-1.0)*r00*x1047))))+IKsqr(((((-1.0)*r11*x1048))+((r10*x1047))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1048))+(((-1.0)*r00*x1047))), ((((-1.0)*r11*x1048))+((r10*x1047))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1049=IKcos(j0);
IkReal x1050=IKsin(j0);
IkReal x1051=(r02*sj4);
IkReal x1052=((0.1)*sj5);
IkReal x1053=(cj5*r11);
IkReal x1054=((1.0)*sj3);
IkReal x1055=(r12*sj4);
IkReal x1056=((1.0)*cj3);
IkReal x1057=(r11*sj5);
IkReal x1058=(cj3*cj4);
IkReal x1059=((1.0)*sj2);
IkReal x1060=(cj5*r01);
IkReal x1061=(r01*sj5);
IkReal x1062=(sj1*sj2);
IkReal x1063=(cj1*cj2);
IkReal x1064=(r00*sj5);
IkReal x1065=((1.0)*cj2);
IkReal x1066=(r10*sj5);
IkReal x1067=((1.0)*cj4);
IkReal x1068=(cj4*cj5*r00);
IkReal x1069=(cj1*x1049);
IkReal x1070=(cj4*cj5*r10);
IkReal x1071=((0.392)*x1050);
IkReal x1072=((1.0)*x1050);
IkReal x1073=(cj1*x1050);
IkReal x1074=((1.0)*cj5*sj4);
evalcond[0]=(x1049+(((-1.0)*r12*x1067))+(((-1.0)*r10*x1074))+((sj4*x1057)));
evalcond[1]=((((-1.0)*r00*x1074))+(((-1.0)*r02*x1067))+((sj4*x1061))+(((-1.0)*x1072)));
evalcond[2]=((((-1.0)*r00*x1052))+(((-0.392)*x1049*x1062))+(((-0.1)*x1060))+(((-0.134)*x1050))+(((-1.0)*px))+(((0.392)*x1049*x1063))+(((0.425)*x1069)));
evalcond[3]=((((-0.1)*x1053))+(((-1.0)*r10*x1052))+(((-1.0)*x1062*x1071))+(((-1.0)*py))+((x1063*x1071))+(((0.134)*x1049))+(((0.425)*x1073)));
evalcond[4]=((((-1.0)*x1049*x1063))+((sj3*x1060))+((sj3*x1064))+((cj3*x1051))+(((-1.0)*x1056*x1068))+((x1049*x1062))+((x1058*x1061)));
evalcond[5]=((((-1.0)*x1063*x1072))+((sj3*x1066))+((sj3*x1053))+((x1057*x1058))+((x1050*x1062))+((cj3*x1055))+(((-1.0)*x1056*x1070)));
evalcond[6]=((((-1.0)*x1059*x1069))+((sj3*x1068))+(((-1.0)*sj1*x1049*x1065))+((cj3*x1060))+((cj3*x1064))+(((-1.0)*cj4*x1054*x1061))+(((-1.0)*x1051*x1054)));
evalcond[7]=(((sj3*x1070))+(((-1.0)*x1059*x1073))+((cj3*x1066))+((cj3*x1053))+(((-1.0)*x1054*x1055))+(((-1.0)*sj1*x1050*x1065))+(((-1.0)*cj4*x1054*x1057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1075=IKPowWithIntegerCheck(cj3,-1);
if(!x1075.valid){
continue;
}
CheckValue<IkReal> x1076=IKPowWithIntegerCheck(r22,-1);
if(!x1076.valid){
continue;
}
sj4array[0]=((-1.0)*(x1075.value)*(x1076.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1077=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1077);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1077);
IkReal x1078=((16.0)*sj4);
IkReal x1079=(cj1*cj2);
IkReal x1080=((4.0)*sj3);
IkReal x1081=((8.0)*sj4);
IkReal x1082=((4.0)*cj4);
IkReal x1083=(sj1*sj2);
IkReal x1084=((4.0)*sj4);
IkReal x1085=(cj3*r02);
IkReal x1086=((16.0)*sj3);
IkReal x1087=((8.0)*sj3);
IkReal x1088=((12.0)*cj4);
IkReal x1089=((12.0)*sj4);
IkReal x1090=(cj3*r12);
IkReal x1091=(r11*x1080);
IkReal x1092=(r01*x1080);
IkReal x1093=(r01*x1083);
IkReal x1094=(cj3*cj4*r01);
IkReal x1095=(cj3*cj4*r11);
IkReal x1096=(cj3*r10*x1082);
IkReal x1097=(x1089*x1090);
IkReal x1098=(cj3*r00*x1082);
IkReal x1099=(x1085*x1089);
IkReal x1100=(r00*x1083*x1084);
IkReal x1101=(r02*x1083*x1088);
IkReal x1102=(r00*x1079*x1084);
IkReal x1103=(r02*x1079*x1088);
IkReal x1104=(r10*x1083*x1084);
IkReal x1105=(r12*x1079*x1088);
IkReal x1106=(r12*x1083*x1088);
IkReal x1107=(r10*x1079*x1084);
IkReal x1108=(x1102+x1091);
IkReal x1109=(x1104+x1092);
IkReal x1110=(x1100+x1096);
IkReal x1111=(x1103+x1097);
IkReal x1112=(x1107+x1098);
IkReal x1113=(x1106+x1099);
j5eval[0]=((((0.5)*(IKabs((x1101+x1108+(((-1.0)*x1110))+(((-1.0)*x1111)))))))+(((0.5)*(IKabs((x1109+(((-1.0)*r12*x1082*x1083))+((r12*x1079*x1082))+(((-1.0)*x1084*x1085))+(((-1.0)*x1112)))))))+(IKabs(((((-1.0)*r10*x1087))+(((-1.0)*x1081*x1093))+(((-8.0)*x1095))+((r01*x1079*x1081)))))+(((0.5)*(IKabs(((((-1.0)*r11*x1078*x1079))+(((-16.0)*x1094))+(((-1.0)*r00*x1086))+((r11*x1078*x1083)))))))+(((0.5)*(IKabs((x1101+x1110+(((-1.0)*x1108))+(((-1.0)*x1111)))))))+(((0.5)*(IKabs((x1105+x1109+(((-1.0)*x1112))+(((-1.0)*x1113)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x1086))+((r01*x1078*x1079))+(((-16.0)*x1095))+(((-1.0)*x1078*x1093)))))))+(((0.5)*(IKabs((x1108+((r02*x1082*x1083))+(((-1.0)*x1084*x1090))+(((-1.0)*x1110))+(((-1.0)*r02*x1079*x1082)))))))+(((0.5)*(IKabs((x1105+x1112+(((-1.0)*x1109))+(((-1.0)*x1113)))))))+(IKabs((((r11*x1081*x1083))+(((-8.0)*x1094))+(((-1.0)*r00*x1087))+(((-1.0)*r11*x1079*x1081))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1114=(r10*sj3);
IkReal x1115=(r01*sj4);
IkReal x1116=(cj1*cj2);
IkReal x1117=(cj3*cj4);
IkReal x1118=(sj1*sj2);
IkReal x1119=(cj4*r02);
IkReal x1120=((4.0)*r11*sj3);
IkReal x1121=(cj3*r12*sj4);
IkReal x1122=((4.0)*r00*sj4);
IkReal x1123=((4.0)*r10*x1117);
IkReal x1124=((12.0)*x1121);
IkReal x1125=((4.0)*x1121);
IkReal x1126=(x1116*x1122);
IkReal x1127=(x1118*x1122);
IkReal x1128=((12.0)*x1118*x1119);
IkReal x1129=((12.0)*x1116*x1119);
IkReal x1130=((4.0)*x1118*x1119);
IkReal x1131=((4.0)*x1116*x1119);
IkReal x1132=(x1120+x1126);
IkReal x1133=(x1123+x1127);
IkReal x1134=(x1125+x1131);
IkReal x1135=(x1129+x1124);
IkReal x1136=((((8.0)*x1115*x1116))+(((-8.0)*r11*x1117))+(((-8.0)*x1115*x1118))+(((-8.0)*x1114)));
op[0]=(x1132+x1130+(((-1.0)*x1133))+(((-1.0)*x1134)));
op[1]=x1136;
op[2]=(x1128+x1132+(((-1.0)*x1133))+(((-1.0)*x1135)));
op[3]=((((-16.0)*x1115*x1118))+(((-16.0)*x1114))+(((16.0)*x1115*x1116))+(((-16.0)*r11*x1117)));
op[4]=(x1128+x1133+(((-1.0)*x1135))+(((-1.0)*x1132)));
op[5]=x1136;
op[6]=(x1133+x1130+(((-1.0)*x1134))+(((-1.0)*x1132)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1137=(cj1*cj2);
IkReal x1138=((4.0)*cj4);
IkReal x1139=(sj1*sj2);
IkReal x1140=((4.0)*sj4);
IkReal x1141=(r00*sj3);
IkReal x1142=(cj3*r02);
IkReal x1143=((4.0)*r01*sj3);
IkReal x1144=((16.0)*r11*sj4);
IkReal x1145=(cj3*cj4*r01);
IkReal x1146=((12.0)*cj4*r12);
IkReal x1147=((8.0)*r11*sj4);
IkReal x1148=(cj3*r00*x1138);
IkReal x1149=((12.0)*sj4*x1142);
IkReal x1150=(x1140*x1142);
IkReal x1151=(r10*x1137*x1140);
IkReal x1152=(r10*x1139*x1140);
IkReal x1153=(x1137*x1146);
IkReal x1154=(x1139*x1146);
IkReal x1155=(r12*x1137*x1138);
IkReal x1156=(r12*x1138*x1139);
IkReal x1157=(x1143+x1152);
IkReal x1158=(x1148+x1151);
IkReal x1159=(x1156+x1150);
IkReal x1160=(x1149+x1154);
IkReal x1161=((((-1.0)*x1137*x1147))+((x1139*x1147))+(((-8.0)*x1145))+(((-8.0)*x1141)));
j5evalpoly[0]=(x1158+x1155+(((htj5*htj5)*((x1158+x1153+(((-1.0)*x1157))+(((-1.0)*x1160))))))+(((-1.0)*x1159))+(((-1.0)*x1157))+((htj5*x1161))+(((htj5*htj5*htj5)*(((((-1.0)*x1137*x1144))+(((-16.0)*x1145))+(((-16.0)*x1141))+((x1139*x1144))))))+((x1161*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1155+x1157+(((-1.0)*x1159))+(((-1.0)*x1158))))))+(((htj5*htj5*htj5*htj5)*((x1157+x1153+(((-1.0)*x1158))+(((-1.0)*x1160)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1162=(cj5*sj4);
IkReal x1163=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1163))+(((-1.0)*r00*x1162)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1162))+(((-1.0)*r11*x1163))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1163))+(((-1.0)*r00*x1162))))+IKsqr((((r10*x1162))+(((-1.0)*r11*x1163))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1163))+(((-1.0)*r00*x1162))), (((r10*x1162))+(((-1.0)*r11*x1163))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1164=IKcos(j0);
IkReal x1165=IKsin(j0);
IkReal x1166=(r02*sj4);
IkReal x1167=((0.1)*sj5);
IkReal x1168=(cj5*r11);
IkReal x1169=((1.0)*sj3);
IkReal x1170=(r12*sj4);
IkReal x1171=((1.0)*cj3);
IkReal x1172=(r11*sj5);
IkReal x1173=(cj3*cj4);
IkReal x1174=((1.0)*sj2);
IkReal x1175=(cj5*r01);
IkReal x1176=(r01*sj5);
IkReal x1177=(sj1*sj2);
IkReal x1178=(cj1*cj2);
IkReal x1179=(r00*sj5);
IkReal x1180=((1.0)*cj2);
IkReal x1181=(r10*sj5);
IkReal x1182=((1.0)*cj4);
IkReal x1183=(cj4*cj5*r00);
IkReal x1184=(cj1*x1164);
IkReal x1185=(cj4*cj5*r10);
IkReal x1186=((0.392)*x1165);
IkReal x1187=((1.0)*x1165);
IkReal x1188=(cj1*x1165);
IkReal x1189=((1.0)*cj5*sj4);
evalcond[0]=(x1164+(((-1.0)*r10*x1189))+((sj4*x1172))+(((-1.0)*r12*x1182)));
evalcond[1]=(((sj4*x1176))+(((-1.0)*x1187))+(((-1.0)*r00*x1189))+(((-1.0)*r02*x1182)));
evalcond[2]=((((-0.392)*x1164*x1177))+(((0.392)*x1164*x1178))+(((0.425)*x1184))+(((-1.0)*px))+(((-1.0)*r00*x1167))+(((-0.134)*x1165))+(((-0.1)*x1175)));
evalcond[3]=((((-1.0)*r10*x1167))+((x1178*x1186))+(((0.425)*x1188))+(((-1.0)*py))+(((-0.1)*x1168))+(((0.134)*x1164))+(((-1.0)*x1177*x1186)));
evalcond[4]=(((x1164*x1177))+(((-1.0)*x1171*x1183))+((sj3*x1175))+((sj3*x1179))+((x1173*x1176))+((cj3*x1166))+(((-1.0)*x1164*x1178)));
evalcond[5]=((((-1.0)*x1171*x1185))+((x1165*x1177))+(((-1.0)*x1178*x1187))+((sj3*x1181))+((x1172*x1173))+((cj3*x1170))+((sj3*x1168)));
evalcond[6]=((((-1.0)*x1166*x1169))+((sj3*x1183))+(((-1.0)*cj4*x1169*x1176))+(((-1.0)*sj1*x1164*x1180))+((cj3*x1175))+((cj3*x1179))+(((-1.0)*x1174*x1184)));
evalcond[7]=(((sj3*x1185))+(((-1.0)*sj1*x1165*x1180))+((cj3*x1168))+(((-1.0)*x1169*x1170))+(((-1.0)*cj4*x1169*x1172))+((cj3*x1181))+(((-1.0)*x1174*x1188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1190=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1190);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1190);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1191=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1191);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1191);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1192=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1192);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1192);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1193=IKPowWithIntegerCheck(r22,-1);
if(!x1193.valid){
continue;
}
sj4array[0]=((-1.0)*(x1193.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1194=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1194);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1194);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1196 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1196.valid){
continue;
}
IkReal x1195=x1196.value;
j5array[0]=((-1.0)*x1195);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1195)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1197=(cj5*sj4);
IkReal x1198=(sj4*sj5);
if( IKabs((((r01*x1198))+(((-1.0)*r00*x1197)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1197))+(((-1.0)*r11*x1198)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1198))+(((-1.0)*r00*x1197))))+IKsqr((((r10*x1197))+(((-1.0)*r11*x1198))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1198))+(((-1.0)*r00*x1197))), (((r10*x1197))+(((-1.0)*r11*x1198))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1199=IKcos(j0);
IkReal x1200=IKsin(j0);
IkReal x1201=((0.1)*sj5);
IkReal x1202=(cj5*r11);
IkReal x1203=(cj5*r01);
IkReal x1204=(sj4*sj5);
IkReal x1205=((0.425)*cj1);
IkReal x1206=((1.0)*cj1*sj2);
IkReal x1207=((1.0)*cj2*sj1);
IkReal x1208=((1.0)*cj5*sj4);
evalcond[0]=(x1199+(((-1.0)*r10*x1208))+((r11*x1204)));
evalcond[1]=((((-1.0)*r00*x1208))+(((-1.0)*x1200))+((r01*x1204)));
evalcond[2]=(((r00*sj5))+(((-1.0)*x1199*x1207))+(((-1.0)*x1199*x1206))+x1203);
evalcond[3]=(x1202+((r10*sj5))+(((-1.0)*x1200*x1206))+(((-1.0)*x1200*x1207)));
evalcond[4]=((((-0.1)*x1203))+((x1199*x1205))+(((-1.0)*px))+(((-1.0)*r00*x1201))+(((-0.134)*x1200)));
evalcond[5]=((((0.134)*x1199))+(((-0.1)*x1202))+(((-1.0)*r10*x1201))+(((-1.0)*py))+((x1200*x1205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1209=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1209);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1209);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1210=IKPowWithIntegerCheck(r22,-1);
if(!x1210.valid){
continue;
}
sj4array[0]=((x1210.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1211=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1211);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1211);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1213 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1213.valid){
continue;
}
IkReal x1212=x1213.value;
j5array[0]=((-1.0)*x1212);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1212)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1214=(cj5*sj4);
IkReal x1215=(sj4*sj5);
if( IKabs((((r01*x1215))+(((-1.0)*r00*x1214)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1214))+(((-1.0)*r11*x1215)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1215))+(((-1.0)*r00*x1214))))+IKsqr((((r10*x1214))+(((-1.0)*r11*x1215))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1215))+(((-1.0)*r00*x1214))), (((r10*x1214))+(((-1.0)*r11*x1215))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1216=IKcos(j0);
IkReal x1217=IKsin(j0);
IkReal x1218=(r00*sj5);
IkReal x1219=(cj5*r11);
IkReal x1220=(sj4*sj5);
IkReal x1221=(r10*sj5);
IkReal x1222=((0.425)*cj1);
IkReal x1223=((1.0)*cj5);
IkReal x1224=((1.0)*cj1*sj2);
IkReal x1225=((1.0)*cj2*sj1);
evalcond[0]=(x1216+(((-1.0)*r10*sj4*x1223))+((r11*x1220)));
evalcond[1]=(((r01*x1220))+(((-1.0)*r00*sj4*x1223))+(((-1.0)*x1217)));
evalcond[2]=((((-0.1)*x1218))+((x1216*x1222))+(((-0.1)*cj5*r01))+(((-1.0)*px))+(((-0.134)*x1217)));
evalcond[3]=(((x1217*x1222))+(((-0.1)*x1219))+(((-1.0)*py))+(((-0.1)*x1221))+(((0.134)*x1216)));
evalcond[4]=((((-1.0)*r01*x1223))+(((-1.0)*x1216*x1224))+(((-1.0)*x1216*x1225))+(((-1.0)*x1218)));
evalcond[5]=((((-1.0)*x1221))+(((-1.0)*x1217*x1224))+(((-1.0)*x1217*x1225))+(((-1.0)*x1219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1226=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1226);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1226);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1227=IKPowWithIntegerCheck(r22,-1);
if(!x1227.valid){
continue;
}
sj4array[0]=((x1227.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1228=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1228);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1228);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1230 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1230.valid){
continue;
}
IkReal x1229=x1230.value;
j5array[0]=((-1.0)*x1229);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1229)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1231=(cj5*sj4);
IkReal x1232=(sj4*sj5);
if( IKabs((((r01*x1232))+(((-1.0)*r00*x1231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1232))+((r10*x1231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1232))+(((-1.0)*r00*x1231))))+IKsqr(((((-1.0)*r11*x1232))+((r10*x1231))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1232))+(((-1.0)*r00*x1231))), ((((-1.0)*r11*x1232))+((r10*x1231))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1233=IKcos(j0);
IkReal x1234=IKsin(j0);
IkReal x1235=((0.1)*sj5);
IkReal x1236=(sj1*sj2);
IkReal x1237=(cj5*r11);
IkReal x1238=(cj5*r01);
IkReal x1239=(sj4*sj5);
IkReal x1240=(cj1*cj2);
IkReal x1241=((0.392)*x1234);
IkReal x1242=(cj1*x1233);
IkReal x1243=((1.0)*x1234);
IkReal x1244=((1.0)*cj5*sj4);
evalcond[0]=(x1233+(((-1.0)*r10*x1244))+((r11*x1239)));
evalcond[1]=(((r01*x1239))+(((-1.0)*x1243))+(((-1.0)*r00*x1244)));
evalcond[2]=(((r00*sj5))+x1238+(((-1.0)*x1233*x1240))+((x1233*x1236)));
evalcond[3]=(x1237+((x1234*x1236))+((r10*sj5))+(((-1.0)*x1240*x1243)));
evalcond[4]=((((-1.0)*r00*x1235))+(((-0.392)*x1233*x1236))+(((-0.134)*x1234))+(((-1.0)*px))+(((-0.1)*x1238))+(((0.392)*x1233*x1240))+(((0.425)*x1242)));
evalcond[5]=((((0.134)*x1233))+(((0.425)*cj1*x1234))+((x1240*x1241))+(((-1.0)*x1236*x1241))+(((-1.0)*py))+(((-0.1)*x1237))+(((-1.0)*r10*x1235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1245=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1245);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1245);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1246=IKPowWithIntegerCheck(r22,-1);
if(!x1246.valid){
continue;
}
sj4array[0]=((-1.0)*(x1246.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1247=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1247);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1247);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1249 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1249.valid){
continue;
}
IkReal x1248=x1249.value;
j5array[0]=((-1.0)*x1248);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1248)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1250=(cj5*sj4);
IkReal x1251=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1250))+((r01*x1251)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1250))+(((-1.0)*r11*x1251)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1250))+((r01*x1251))))+IKsqr((((r10*x1250))+(((-1.0)*r11*x1251))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1250))+((r01*x1251))), (((r10*x1250))+(((-1.0)*r11*x1251))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1252=IKcos(j0);
IkReal x1253=IKsin(j0);
IkReal x1254=((0.1)*sj5);
IkReal x1255=(sj1*sj2);
IkReal x1256=(cj5*r11);
IkReal x1257=(sj4*sj5);
IkReal x1258=(cj1*cj2);
IkReal x1259=((1.0)*sj5);
IkReal x1260=((1.0)*cj5);
IkReal x1261=((0.425)*cj1);
IkReal x1262=((0.392)*x1253);
IkReal x1263=((0.392)*x1252);
IkReal x1264=((1.0)*x1253);
evalcond[0]=(((r11*x1257))+x1252+(((-1.0)*r10*sj4*x1260)));
evalcond[1]=((((-1.0)*r00*sj4*x1260))+((r01*x1257))+(((-1.0)*x1264)));
evalcond[2]=((((-1.0)*x1252*x1258))+(((-1.0)*r00*x1259))+(((-1.0)*r01*x1260))+((x1252*x1255)));
evalcond[3]=((((-1.0)*x1258*x1264))+((x1253*x1255))+(((-1.0)*x1256))+(((-1.0)*r10*x1259)));
evalcond[4]=((((-0.134)*x1253))+((x1258*x1263))+(((-1.0)*r00*x1254))+(((-0.1)*cj5*r01))+(((-1.0)*x1255*x1263))+(((-1.0)*px))+((x1252*x1261)));
evalcond[5]=(((x1258*x1262))+(((0.134)*x1252))+(((-1.0)*x1255*x1262))+((x1253*x1261))+(((-1.0)*py))+(((-0.1)*x1256))+(((-1.0)*r10*x1254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1265=IKPowWithIntegerCheck(r22,-1);
if(!x1265.valid){
continue;
}
CheckValue<IkReal> x1266=IKPowWithIntegerCheck(sj3,-1);
if(!x1266.valid){
continue;
}
sj4array[0]=((x1265.value)*(x1266.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1267=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1267);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1267);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1268=((4.0)*r01);
IkReal x1269=((16.0)*r00);
IkReal x1270=(cj3*sj2);
IkReal x1271=((8.0)*r00);
IkReal x1272=(cj2*cj3);
IkReal x1273=(cj4*r01);
IkReal x1274=((16.0)*cj1);
IkReal x1275=((8.0)*sj1);
IkReal x1276=((16.0)*sj1);
IkReal x1277=((8.0)*cj1);
IkReal x1278=(sj2*sj3);
IkReal x1279=(cj2*sj3);
IkReal x1280=(sj1*x1279);
IkReal x1281=((4.0)*cj4*r00);
IkReal x1282=(((cj1*x1268*x1278))+((x1268*x1280))+((sj1*x1278*x1281))+((sj1*x1268*x1270)));
IkReal x1283=(((cj1*x1268*x1272))+((cj1*x1279*x1281))+((sj1*x1272*x1281))+((cj1*x1270*x1281)));
IkReal x1284=(x1283+(((-1.0)*x1282)));
IkReal x1285=((((-1.0)*x1273*x1275*x1278))+((sj1*x1270*x1271))+((x1270*x1273*x1277))+((x1273*x1277*x1279))+(((-1.0)*cj1*x1271*x1272))+((x1272*x1273*x1275))+((cj1*x1271*x1278))+((x1271*x1280)));
IkReal x1286=(x1282+(((-1.0)*x1283)));
op[0]=x1284;
op[1]=x1285;
op[2]=x1284;
op[3]=((((-1.0)*x1273*x1276*x1278))+((x1270*x1273*x1274))+((sj1*x1269*x1270))+((x1273*x1274*x1279))+(((-1.0)*cj1*x1269*x1272))+((x1272*x1273*x1276))+((cj1*x1269*x1278))+((x1269*x1280)));
op[4]=x1286;
op[5]=x1285;
op[6]=x1286;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1287=(cj5*sj4);
IkReal x1288=(sj4*sj5);
if( IKabs((((r01*x1288))+(((-1.0)*r00*x1287)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1287))+(((-1.0)*r11*x1288)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1288))+(((-1.0)*r00*x1287))))+IKsqr((((r10*x1287))+(((-1.0)*r11*x1288))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1288))+(((-1.0)*r00*x1287))), (((r10*x1287))+(((-1.0)*r11*x1288))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1289=IKcos(j0);
IkReal x1290=IKsin(j0);
IkReal x1291=((0.1)*sj5);
IkReal x1292=((0.392)*sj1);
IkReal x1293=(cj5*r11);
IkReal x1294=((1.0)*cj3);
IkReal x1295=((0.425)*cj1);
IkReal x1296=((1.0)*cj1);
IkReal x1297=(r11*sj5);
IkReal x1298=(cj5*r01);
IkReal x1299=(r01*sj5);
IkReal x1300=(cj3*cj4);
IkReal x1301=(r00*sj5);
IkReal x1302=((1.0)*sj1);
IkReal x1303=(r10*sj5);
IkReal x1304=(sj2*x1290);
IkReal x1305=(cj4*cj5*r00);
IkReal x1306=(sj2*x1289);
IkReal x1307=(cj4*cj5*r10);
IkReal x1308=((1.0)*cj4*sj3);
IkReal x1309=((0.392)*cj1*cj2);
IkReal x1310=(cj2*x1289);
IkReal x1311=((1.0)*cj5*sj4);
IkReal x1312=(cj2*x1290);
evalcond[0]=(x1289+((sj4*x1297))+(((-1.0)*r10*x1311)));
evalcond[1]=((((-1.0)*r00*x1311))+(((-1.0)*x1290))+((sj4*x1299)));
evalcond[2]=(((x1299*x1300))+((sj3*x1298))+((sj3*x1301))+(((-1.0)*x1294*x1305))+(((-1.0)*x1296*x1310))+((sj1*x1306)));
evalcond[3]=(((sj3*x1293))+((sj3*x1303))+(((-1.0)*x1294*x1307))+(((-1.0)*x1296*x1312))+((x1297*x1300))+((sj1*x1304)));
evalcond[4]=(((cj3*x1298))+((sj3*x1305))+(((-1.0)*x1299*x1308))+(((-1.0)*x1296*x1306))+((cj3*x1301))+(((-1.0)*x1302*x1310)));
evalcond[5]=(((cj3*x1293))+((sj3*x1307))+(((-1.0)*x1297*x1308))+(((-1.0)*x1296*x1304))+((cj3*x1303))+(((-1.0)*x1302*x1312)));
evalcond[6]=((((-1.0)*r00*x1291))+(((-0.134)*x1290))+((x1289*x1309))+(((-1.0)*px))+(((-1.0)*x1292*x1306))+(((-0.1)*x1298))+((x1289*x1295)));
evalcond[7]=(((x1290*x1295))+((x1290*x1309))+(((-1.0)*py))+(((0.134)*x1289))+(((-1.0)*x1292*x1304))+(((-0.1)*x1293))+(((-1.0)*r10*x1291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1313=IKPowWithIntegerCheck(cj3,-1);
if(!x1313.valid){
continue;
}
CheckValue<IkReal> x1314=IKPowWithIntegerCheck(r22,-1);
if(!x1314.valid){
continue;
}
sj4array[0]=((-1.0)*(x1313.value)*(x1314.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1315=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1315);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1315);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1316=((4.0)*r01);
IkReal x1317=((16.0)*r00);
IkReal x1318=(cj3*sj2);
IkReal x1319=((8.0)*r00);
IkReal x1320=(cj2*cj3);
IkReal x1321=(cj4*r01);
IkReal x1322=((16.0)*cj1);
IkReal x1323=((8.0)*sj1);
IkReal x1324=((16.0)*sj1);
IkReal x1325=((8.0)*cj1);
IkReal x1326=(sj2*sj3);
IkReal x1327=(cj2*sj3);
IkReal x1328=(sj1*x1327);
IkReal x1329=((4.0)*cj4*r00);
IkReal x1330=(((x1316*x1328))+((cj1*x1316*x1326))+((sj1*x1326*x1329))+((sj1*x1316*x1318)));
IkReal x1331=(((sj1*x1320*x1329))+((cj1*x1327*x1329))+((cj1*x1316*x1320))+((cj1*x1318*x1329)));
IkReal x1332=(x1331+(((-1.0)*x1330)));
IkReal x1333=(((x1318*x1321*x1325))+(((-1.0)*x1321*x1323*x1326))+((x1319*x1328))+((x1321*x1325*x1327))+((sj1*x1318*x1319))+((x1320*x1321*x1323))+((cj1*x1319*x1326))+(((-1.0)*cj1*x1319*x1320)));
IkReal x1334=(x1330+(((-1.0)*x1331)));
op[0]=x1332;
op[1]=x1333;
op[2]=x1332;
op[3]=(((cj1*x1317*x1326))+((x1318*x1321*x1322))+(((-1.0)*x1321*x1324*x1326))+((sj1*x1317*x1318))+((x1320*x1321*x1324))+((x1321*x1322*x1327))+(((-1.0)*cj1*x1317*x1320))+((x1317*x1328)));
op[4]=x1334;
op[5]=x1333;
op[6]=x1334;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1335=(cj5*sj4);
IkReal x1336=(sj4*sj5);
if( IKabs((((r01*x1336))+(((-1.0)*r00*x1335)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1336))+((r10*x1335)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1336))+(((-1.0)*r00*x1335))))+IKsqr(((((-1.0)*r11*x1336))+((r10*x1335))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1336))+(((-1.0)*r00*x1335))), ((((-1.0)*r11*x1336))+((r10*x1335))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1337=IKcos(j0);
IkReal x1338=IKsin(j0);
IkReal x1339=((0.1)*sj5);
IkReal x1340=((0.392)*sj1);
IkReal x1341=(cj5*r11);
IkReal x1342=((1.0)*cj3);
IkReal x1343=((0.425)*cj1);
IkReal x1344=((1.0)*cj1);
IkReal x1345=(r11*sj5);
IkReal x1346=(cj5*r01);
IkReal x1347=(r01*sj5);
IkReal x1348=(cj3*cj4);
IkReal x1349=(r00*sj5);
IkReal x1350=((1.0)*sj1);
IkReal x1351=(r10*sj5);
IkReal x1352=(sj2*x1338);
IkReal x1353=(cj4*cj5*r00);
IkReal x1354=(sj2*x1337);
IkReal x1355=(cj4*cj5*r10);
IkReal x1356=((1.0)*cj4*sj3);
IkReal x1357=((0.392)*cj1*cj2);
IkReal x1358=(cj2*x1337);
IkReal x1359=((1.0)*cj5*sj4);
IkReal x1360=(cj2*x1338);
evalcond[0]=(x1337+(((-1.0)*r10*x1359))+((sj4*x1345)));
evalcond[1]=((((-1.0)*x1338))+((sj4*x1347))+(((-1.0)*r00*x1359)));
evalcond[2]=(((sj1*x1354))+((x1347*x1348))+(((-1.0)*x1344*x1358))+(((-1.0)*x1342*x1353))+((sj3*x1349))+((sj3*x1346)));
evalcond[3]=(((sj1*x1352))+((x1345*x1348))+(((-1.0)*x1344*x1360))+((sj3*x1351))+(((-1.0)*x1342*x1355))+((sj3*x1341)));
evalcond[4]=((((-1.0)*x1350*x1358))+(((-1.0)*x1347*x1356))+(((-1.0)*x1344*x1354))+((sj3*x1353))+((cj3*x1349))+((cj3*x1346)));
evalcond[5]=((((-1.0)*x1345*x1356))+(((-1.0)*x1350*x1360))+(((-1.0)*x1344*x1352))+((cj3*x1351))+((sj3*x1355))+((cj3*x1341)));
evalcond[6]=((((-0.134)*x1338))+(((-1.0)*px))+((x1337*x1343))+(((-1.0)*r00*x1339))+((x1337*x1357))+(((-0.1)*x1346))+(((-1.0)*x1340*x1354)));
evalcond[7]=((((-1.0)*py))+((x1338*x1343))+((x1338*x1357))+(((-1.0)*r10*x1339))+(((-0.1)*x1341))+(((0.134)*x1337))+(((-1.0)*x1340*x1352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1363 = IKatan2WithCheck(IkReal(((-0.1)*r21)),IkReal(((-0.1)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1363.valid){
continue;
}
IkReal x1361=((1.0)*(x1363.value));
if((((((0.01)*(r20*r20)))+(((0.01)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1364=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01)*(r20*r20)))+(((0.01)*(r21*r21)))))),-1);
if(!x1364.valid){
continue;
}
if( (((-1.0)*(x1364.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1364.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1362=((-1.0)*(IKasin(((-1.0)*(x1364.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))))))));
j5array[0]=((((-1.0)*x1361))+(((-1.0)*x1362)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((1.0)*x1362))+(((-1.0)*x1361)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1365=cj5*cj5;
IkReal x1366=r21*r21;
IkReal x1367=(sj3*x1365);
IkReal x1368=(((sj3*(r22*r22)))+((x1367*(r20*r20)))+(((-2.0)*cj5*r20*r21*sj3*sj5))+(((-1.0)*x1366*x1367))+((sj3*x1366)));
j4eval[0]=x1368;
j4eval[1]=IKsign(x1368);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1369=cj5*cj5;
IkReal x1370=r21*r21;
IkReal x1371=((1.0)*cj3);
IkReal x1372=(cj3*x1369);
IkReal x1373=((((-1.0)*x1370*x1371))+(((-1.0)*x1371*(r22*r22)))+(((-1.0)*x1369*x1371*(r20*r20)))+((x1370*x1372))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1373;
j4eval[1]=IKsign(x1373);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1374=cj1*cj1;
IkReal x1375=cj2*cj2;
IkReal x1376=(cj2*x1374);
IkReal x1377=(cj1*sj1*sj2);
IkReal x1378=(x1374*x1375);
j0eval[0]=((6.36549089425466)+x1374+(((12.3585920403546)*x1376))+(((-12.3585920403546)*x1377))+(((-5.69949185861059)*x1375))+(((-11.3989837172212)*cj2*x1377))+(((11.3989837172212)*x1378)));
j0eval[1]=IKsign(((42905.0)+(((-38416.0)*x1375))+(((83300.0)*x1376))+(((-76832.0)*cj2*x1377))+(((6740.25)*x1374))+(((76832.0)*x1378))+(((-83300.0)*x1377))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1379=((1.0)*cj5);
IkReal x1380=((1.0)*sj5);
IkReal x1381=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1381;
j0eval[1]=((IKabs(((((-1.0)*r01*x1379))+(((-1.0)*r00*x1380)))))+(IKabs(((((-1.0)*r10*x1380))+(((-1.0)*r11*x1379))))));
j0eval[2]=IKsign(x1381);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1382=cj5*cj5;
IkReal x1383=r21*r21;
IkReal x1384=(sj1*sj2);
IkReal x1385=(r21*sj5);
IkReal x1386=(cj5*r20);
IkReal x1387=(cj1*cj2);
IkReal x1388=(x1383+(r22*r22)+(((-1.0)*x1382*x1383))+((x1382*(r20*r20)))+(((-2.0)*x1385*x1386)));
j4eval[0]=x1388;
j4eval[1]=IKsign(x1388);
j4eval[2]=((IKabs(((((-1.0)*x1385*x1387))+(((-1.0)*x1384*x1386))+((x1386*x1387))+((x1384*x1385)))))+(IKabs(((((-1.0)*r22*x1387))+((r22*x1384))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1389=IKcos(j0);
IkReal x1390=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.425)*x1389))+(((-0.134)*x1390)));
evalcond[1]=((((0.134)*x1389))+(((-1.0)*py))+(((0.425)*x1390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1391=((1.0)*cj5);
IkReal x1392=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1391)));
j4eval[0]=x1392;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1391))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1392);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1393=((1.0)*cj5);
IkReal x1394=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1393)));
j4eval[0]=x1394;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1393))))));
j4eval[2]=IKsign(x1394);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1395=cj5*cj5;
IkReal x1396=((1.0)*sj5);
IkReal x1397=(cj5*r20);
IkReal x1398=(r11*r21);
IkReal x1399=(x1398+(((-1.0)*r11*x1396*x1397))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1396))+((r10*r20*x1395))+(((-1.0)*x1395*x1398)));
j4eval[0]=x1399;
j4eval[1]=IKsign(x1399);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1396))+((cj0*x1397)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1400=cj5*cj5;
IkReal x1401=((1.0)*sj5);
IkReal x1402=(cj5*r20);
IkReal x1403=(r11*r21);
CheckValue<IkReal> x1404 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1401))+((cj0*x1402)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1404.valid){
continue;
}
CheckValue<IkReal> x1405=IKPowWithIntegerCheck(IKsign((((r10*r20*x1400))+((r12*r22))+(((-1.0)*x1400*x1403))+(((-1.0)*r11*x1401*x1402))+(((-1.0)*cj5*r10*r21*x1401))+x1403)),-1);
if(!x1405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1404.value)+(((1.5707963267949)*(x1405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1406=IKsin(j4);
IkReal x1407=IKcos(j4);
IkReal x1408=((1.0)*sj0);
IkReal x1409=(cj5*r00);
IkReal x1410=(r11*sj5);
IkReal x1411=(cj5*r10);
IkReal x1412=(r21*sj5);
IkReal x1413=(cj5*r20);
IkReal x1414=(r01*sj5);
IkReal x1415=((1.0)*x1407);
IkReal x1416=((1.0)*x1406);
evalcond[0]=((((-1.0)*x1413*x1416))+(((-1.0)*r22*x1415))+((x1406*x1412)));
evalcond[1]=(((x1407*x1413))+(((-1.0)*x1412*x1415))+(((-1.0)*r22*x1416)));
evalcond[2]=(cj0+(((-1.0)*x1411*x1416))+((x1406*x1410))+(((-1.0)*r12*x1415)));
evalcond[3]=((((-1.0)*r02*x1415))+(((-1.0)*x1408))+((x1406*x1414))+(((-1.0)*x1409*x1416)));
evalcond[4]=((((-1.0)*x1414*x1415))+(((-1.0)*r02*x1416))+(((-1.0)*cj0))+((x1407*x1409)));
evalcond[5]=(((x1407*x1411))+(((-1.0)*x1408))+(((-1.0)*x1410*x1415))+(((-1.0)*r12*x1416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1417=((1.0)*cj5);
CheckValue<IkReal> x1418=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1417)))),-1);
if(!x1418.valid){
continue;
}
CheckValue<IkReal> x1419 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1417))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1418.value)))+(x1419.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1420=IKsin(j4);
IkReal x1421=IKcos(j4);
IkReal x1422=((1.0)*sj0);
IkReal x1423=(cj5*r00);
IkReal x1424=(r11*sj5);
IkReal x1425=(cj5*r10);
IkReal x1426=(r21*sj5);
IkReal x1427=(cj5*r20);
IkReal x1428=(r01*sj5);
IkReal x1429=((1.0)*x1421);
IkReal x1430=((1.0)*x1420);
evalcond[0]=(((x1420*x1426))+(((-1.0)*r22*x1429))+(((-1.0)*x1427*x1430)));
evalcond[1]=((((-1.0)*x1426*x1429))+(((-1.0)*r22*x1430))+((x1421*x1427)));
evalcond[2]=(((x1420*x1424))+cj0+(((-1.0)*r12*x1429))+(((-1.0)*x1425*x1430)));
evalcond[3]=(((x1420*x1428))+(((-1.0)*r02*x1429))+(((-1.0)*x1422))+(((-1.0)*x1423*x1430)));
evalcond[4]=((((-1.0)*r02*x1430))+(((-1.0)*cj0))+((x1421*x1423))+(((-1.0)*x1428*x1429)));
evalcond[5]=((((-1.0)*r12*x1430))+(((-1.0)*x1424*x1429))+((x1421*x1425))+(((-1.0)*x1422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1431=((1.0)*cj5);
CheckValue<IkReal> x1432=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1431)))),-1);
if(!x1432.valid){
continue;
}
CheckValue<IkReal> x1433 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1431)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1432.value)))+(x1433.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1434=IKsin(j4);
IkReal x1435=IKcos(j4);
IkReal x1436=((1.0)*sj0);
IkReal x1437=(cj5*r00);
IkReal x1438=(r11*sj5);
IkReal x1439=(cj5*r10);
IkReal x1440=(r21*sj5);
IkReal x1441=(cj5*r20);
IkReal x1442=(r01*sj5);
IkReal x1443=((1.0)*x1435);
IkReal x1444=((1.0)*x1434);
evalcond[0]=(((x1434*x1440))+(((-1.0)*r22*x1443))+(((-1.0)*x1441*x1444)));
evalcond[1]=((((-1.0)*r22*x1444))+((x1435*x1441))+(((-1.0)*x1440*x1443)));
evalcond[2]=(cj0+(((-1.0)*r12*x1443))+(((-1.0)*x1439*x1444))+((x1434*x1438)));
evalcond[3]=(((x1434*x1442))+(((-1.0)*x1437*x1444))+(((-1.0)*x1436))+(((-1.0)*r02*x1443)));
evalcond[4]=(((x1435*x1437))+(((-1.0)*r02*x1444))+(((-1.0)*x1442*x1443))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1438*x1443))+(((-1.0)*r12*x1444))+((x1435*x1439))+(((-1.0)*x1436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1445=IKcos(j0);
IkReal x1446=IKsin(j0);
evalcond[0]=((((0.425)*x1445))+(((-0.134)*x1446))+(((-1.0)*px)));
evalcond[1]=((((0.425)*x1446))+(((-1.0)*py))+(((0.134)*x1445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1447=((1.0)*cj5);
IkReal x1448=((((-1.0)*r01*x1447))+(((-1.0)*r00*sj5)));
j4eval[0]=x1448;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1447)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1448);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1449=cj5*cj5;
IkReal x1450=((1.0)*r21);
IkReal x1451=(cj5*sj5);
IkReal x1452=((1.0)*r20);
IkReal x1453=(((r00*r20*x1449))+(((-1.0)*r01*x1451*x1452))+((r01*r21))+(((-1.0)*r01*x1449*x1450))+(((-1.0)*r00*x1450*x1451))+((r02*r22)));
j4eval[0]=x1453;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1452)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1453);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1454=cj5*cj5;
IkReal x1455=(r21*sj5);
IkReal x1456=(r11*r21);
IkReal x1457=((1.0)*cj5*r20);
IkReal x1458=(((r10*r20*x1454))+(((-1.0)*r11*sj5*x1457))+(((-1.0)*cj5*r10*x1455))+((r12*r22))+(((-1.0)*x1454*x1456))+x1456);
j4eval[0]=x1458;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1457))+((sj0*x1455))))));
j4eval[2]=IKsign(x1458);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1459=cj5*cj5;
IkReal x1460=(r21*sj5);
IkReal x1461=(r11*r21);
IkReal x1462=((1.0)*cj5*r20);
CheckValue<IkReal> x1463 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1462))+((sj0*x1460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1463.valid){
continue;
}
CheckValue<IkReal> x1464=IKPowWithIntegerCheck(IKsign((((r10*r20*x1459))+(((-1.0)*cj5*r10*x1460))+((r12*r22))+x1461+(((-1.0)*r11*sj5*x1462))+(((-1.0)*x1459*x1461)))),-1);
if(!x1464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1463.value)+(((1.5707963267949)*(x1464.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1465=IKsin(j4);
IkReal x1466=IKcos(j4);
IkReal x1467=(r11*sj5);
IkReal x1468=(cj5*r00);
IkReal x1469=(cj5*r10);
IkReal x1470=(r21*sj5);
IkReal x1471=(cj5*r20);
IkReal x1472=(r01*sj5);
IkReal x1473=((1.0)*x1466);
IkReal x1474=((1.0)*x1465);
evalcond[0]=((((-1.0)*r22*x1473))+(((-1.0)*x1471*x1474))+((x1465*x1470)));
evalcond[1]=((((-1.0)*r22*x1474))+((x1466*x1471))+(((-1.0)*x1470*x1473)));
evalcond[2]=(cj0+((x1465*x1467))+(((-1.0)*r12*x1473))+(((-1.0)*x1469*x1474)));
evalcond[3]=(cj0+((x1466*x1468))+(((-1.0)*r02*x1474))+(((-1.0)*x1472*x1473)));
evalcond[4]=(sj0+(((-1.0)*r12*x1474))+((x1466*x1469))+(((-1.0)*x1467*x1473)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1468*x1474))+((x1465*x1472))+(((-1.0)*r02*x1473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1475=cj5*cj5;
IkReal x1476=((1.0)*r21);
IkReal x1477=(cj5*sj5);
IkReal x1478=((1.0)*r20);
CheckValue<IkReal> x1479=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x1475*x1476))+(((-1.0)*r01*x1477*x1478))+(((-1.0)*r00*x1476*x1477))+((r02*r22))+((r00*r20*x1475)))),-1);
if(!x1479.valid){
continue;
}
CheckValue<IkReal> x1480 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1478)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1479.value)))+(x1480.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1481=IKsin(j4);
IkReal x1482=IKcos(j4);
IkReal x1483=(r11*sj5);
IkReal x1484=(cj5*r00);
IkReal x1485=(cj5*r10);
IkReal x1486=(r21*sj5);
IkReal x1487=(cj5*r20);
IkReal x1488=(r01*sj5);
IkReal x1489=((1.0)*x1482);
IkReal x1490=((1.0)*x1481);
evalcond[0]=((((-1.0)*x1487*x1490))+((x1481*x1486))+(((-1.0)*r22*x1489)));
evalcond[1]=(((x1482*x1487))+(((-1.0)*x1486*x1489))+(((-1.0)*r22*x1490)));
evalcond[2]=(cj0+(((-1.0)*r12*x1489))+((x1481*x1483))+(((-1.0)*x1485*x1490)));
evalcond[3]=(cj0+((x1482*x1484))+(((-1.0)*r02*x1490))+(((-1.0)*x1488*x1489)));
evalcond[4]=((((-1.0)*r12*x1490))+sj0+((x1482*x1485))+(((-1.0)*x1483*x1489)));
evalcond[5]=((((-1.0)*sj0))+((x1481*x1488))+(((-1.0)*x1484*x1490))+(((-1.0)*r02*x1489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1491=((1.0)*cj5);
CheckValue<IkReal> x1492 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1491)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1492.valid){
continue;
}
CheckValue<IkReal> x1493=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1491))+(((-1.0)*r00*sj5)))),-1);
if(!x1493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1492.value)+(((1.5707963267949)*(x1493.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1494=IKsin(j4);
IkReal x1495=IKcos(j4);
IkReal x1496=(r11*sj5);
IkReal x1497=(cj5*r00);
IkReal x1498=(cj5*r10);
IkReal x1499=(r21*sj5);
IkReal x1500=(cj5*r20);
IkReal x1501=(r01*sj5);
IkReal x1502=((1.0)*x1495);
IkReal x1503=((1.0)*x1494);
evalcond[0]=((((-1.0)*r22*x1502))+((x1494*x1499))+(((-1.0)*x1500*x1503)));
evalcond[1]=((((-1.0)*x1499*x1502))+(((-1.0)*r22*x1503))+((x1495*x1500)));
evalcond[2]=((((-1.0)*x1498*x1503))+cj0+((x1494*x1496))+(((-1.0)*r12*x1502)));
evalcond[3]=(cj0+((x1495*x1497))+(((-1.0)*x1501*x1502))+(((-1.0)*r02*x1503)));
evalcond[4]=(sj0+((x1495*x1498))+(((-1.0)*x1496*x1502))+(((-1.0)*r12*x1503)));
evalcond[5]=((((-1.0)*sj0))+((x1494*x1501))+(((-1.0)*r02*x1502))+(((-1.0)*x1497*x1503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1504=((1.0)*cj5);
IkReal x1505=((((-1.0)*r01*x1504))+(((-1.0)*r00*sj5)));
j4eval[0]=x1505;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1504))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1505);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1506=((1.0)*cj5);
IkReal x1507=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1506)));
j4eval[0]=x1507;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1506))))));
j4eval[2]=IKsign(x1507);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1508=cj5*cj5;
IkReal x1509=((1.0)*sj5);
IkReal x1510=(cj5*r20);
IkReal x1511=(r11*r21);
IkReal x1512=(((r12*r22))+x1511+(((-1.0)*x1508*x1511))+((r10*r20*x1508))+(((-1.0)*cj5*r10*r21*x1509))+(((-1.0)*r11*x1509*x1510)));
j4eval[0]=x1512;
j4eval[1]=IKsign(x1512);
j4eval[2]=((IKabs((((cj0*x1510))+(((-1.0)*cj0*r21*x1509)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1513=cj5*cj5;
IkReal x1514=((1.0)*sj5);
IkReal x1515=(cj5*r20);
IkReal x1516=(r11*r21);
CheckValue<IkReal> x1517 = IKatan2WithCheck(IkReal((((cj0*x1515))+(((-1.0)*cj0*r21*x1514)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1517.valid){
continue;
}
CheckValue<IkReal> x1518=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1513*x1516))+((r12*r22))+x1516+(((-1.0)*r11*x1514*x1515))+(((-1.0)*cj5*r10*r21*x1514))+((r10*r20*x1513)))),-1);
if(!x1518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1517.value)+(((1.5707963267949)*(x1518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1519=IKsin(j4);
IkReal x1520=IKcos(j4);
IkReal x1521=((1.0)*sj0);
IkReal x1522=(cj5*r00);
IkReal x1523=(r11*sj5);
IkReal x1524=(cj5*r10);
IkReal x1525=(r21*sj5);
IkReal x1526=(cj5*r20);
IkReal x1527=(r01*sj5);
IkReal x1528=((1.0)*x1520);
IkReal x1529=((1.0)*x1519);
evalcond[0]=(((x1519*x1525))+(((-1.0)*r22*x1528))+(((-1.0)*x1526*x1529)));
evalcond[1]=((((-1.0)*x1525*x1528))+(((-1.0)*r22*x1529))+((x1520*x1526)));
evalcond[2]=((((-1.0)*r12*x1528))+(((-1.0)*x1524*x1529))+cj0+((x1519*x1523)));
evalcond[3]=(((x1519*x1527))+(((-1.0)*x1521))+(((-1.0)*r02*x1528))+(((-1.0)*x1522*x1529)));
evalcond[4]=((((-1.0)*r02*x1529))+((x1520*x1522))+(((-1.0)*x1527*x1528))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1529))+(((-1.0)*x1521))+((x1520*x1524))+(((-1.0)*x1523*x1528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1530=((1.0)*cj5);
CheckValue<IkReal> x1531 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1531.valid){
continue;
}
CheckValue<IkReal> x1532=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1530))+(((-1.0)*r10*sj5)))),-1);
if(!x1532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1531.value)+(((1.5707963267949)*(x1532.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1533=IKsin(j4);
IkReal x1534=IKcos(j4);
IkReal x1535=((1.0)*sj0);
IkReal x1536=(cj5*r00);
IkReal x1537=(r11*sj5);
IkReal x1538=(cj5*r10);
IkReal x1539=(r21*sj5);
IkReal x1540=(cj5*r20);
IkReal x1541=(r01*sj5);
IkReal x1542=((1.0)*x1534);
IkReal x1543=((1.0)*x1533);
evalcond[0]=((((-1.0)*x1540*x1543))+(((-1.0)*r22*x1542))+((x1533*x1539)));
evalcond[1]=((((-1.0)*r22*x1543))+((x1534*x1540))+(((-1.0)*x1539*x1542)));
evalcond[2]=(cj0+((x1533*x1537))+(((-1.0)*r12*x1542))+(((-1.0)*x1538*x1543)));
evalcond[3]=((((-1.0)*r02*x1542))+(((-1.0)*x1535))+((x1533*x1541))+(((-1.0)*x1536*x1543)));
evalcond[4]=((((-1.0)*r02*x1543))+((x1534*x1536))+(((-1.0)*x1541*x1542))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1535))+(((-1.0)*x1537*x1542))+((x1534*x1538))+(((-1.0)*r12*x1543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1544=((1.0)*cj5);
CheckValue<IkReal> x1545=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1544)))),-1);
if(!x1545.valid){
continue;
}
CheckValue<IkReal> x1546 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1545.value)))+(x1546.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1547=IKsin(j4);
IkReal x1548=IKcos(j4);
IkReal x1549=((1.0)*sj0);
IkReal x1550=(cj5*r00);
IkReal x1551=(r11*sj5);
IkReal x1552=(cj5*r10);
IkReal x1553=(r21*sj5);
IkReal x1554=(cj5*r20);
IkReal x1555=(r01*sj5);
IkReal x1556=((1.0)*x1548);
IkReal x1557=((1.0)*x1547);
evalcond[0]=(((x1547*x1553))+(((-1.0)*r22*x1556))+(((-1.0)*x1554*x1557)));
evalcond[1]=((((-1.0)*r22*x1557))+(((-1.0)*x1553*x1556))+((x1548*x1554)));
evalcond[2]=(((x1547*x1551))+cj0+(((-1.0)*x1552*x1557))+(((-1.0)*r12*x1556)));
evalcond[3]=(((x1547*x1555))+(((-1.0)*r02*x1556))+(((-1.0)*x1550*x1557))+(((-1.0)*x1549)));
evalcond[4]=((((-1.0)*r02*x1557))+(((-1.0)*x1555*x1556))+((x1548*x1550))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1557))+((x1548*x1552))+(((-1.0)*x1551*x1556))+(((-1.0)*x1549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1558=((1.0)*cj5);
IkReal x1559=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1558)));
j4eval[0]=x1559;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1558)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1559);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1560=cj5*cj5;
IkReal x1561=((1.0)*r21);
IkReal x1562=(cj5*sj5);
IkReal x1563=((1.0)*r20);
IkReal x1564=((((-1.0)*r01*x1562*x1563))+((r01*r21))+((r00*r20*x1560))+(((-1.0)*r00*x1561*x1562))+((r02*r22))+(((-1.0)*r01*x1560*x1561)));
j4eval[0]=x1564;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1563))))));
j4eval[2]=IKsign(x1564);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1565=cj5*cj5;
IkReal x1566=(r21*sj5);
IkReal x1567=(r11*r21);
IkReal x1568=((1.0)*cj5*r20);
IkReal x1569=((((-1.0)*cj5*r10*x1566))+(((-1.0)*r11*sj5*x1568))+((r12*r22))+x1567+(((-1.0)*x1565*x1567))+((r10*r20*x1565)));
j4eval[0]=x1569;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1566))+(((-1.0)*sj0*x1568))))));
j4eval[2]=IKsign(x1569);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1570=cj5*cj5;
IkReal x1571=(r21*sj5);
IkReal x1572=(r11*r21);
IkReal x1573=((1.0)*cj5*r20);
CheckValue<IkReal> x1574 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1571))+(((-1.0)*sj0*x1573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1574.valid){
continue;
}
CheckValue<IkReal> x1575=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1571))+(((-1.0)*x1570*x1572))+(((-1.0)*r11*sj5*x1573))+((r12*r22))+x1572+((r10*r20*x1570)))),-1);
if(!x1575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1574.value)+(((1.5707963267949)*(x1575.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1576=IKsin(j4);
IkReal x1577=IKcos(j4);
IkReal x1578=(r11*sj5);
IkReal x1579=(cj5*r00);
IkReal x1580=(cj5*r10);
IkReal x1581=(r21*sj5);
IkReal x1582=(cj5*r20);
IkReal x1583=(r01*sj5);
IkReal x1584=((1.0)*x1577);
IkReal x1585=((1.0)*x1576);
evalcond[0]=(((x1576*x1581))+(((-1.0)*r22*x1584))+(((-1.0)*x1582*x1585)));
evalcond[1]=((((-1.0)*r22*x1585))+((x1577*x1582))+(((-1.0)*x1581*x1584)));
evalcond[2]=(((x1576*x1578))+(((-1.0)*x1580*x1585))+cj0+(((-1.0)*r12*x1584)));
evalcond[3]=(cj0+(((-1.0)*r02*x1585))+((x1577*x1579))+(((-1.0)*x1583*x1584)));
evalcond[4]=((((-1.0)*x1578*x1584))+sj0+((x1577*x1580))+(((-1.0)*r12*x1585)));
evalcond[5]=((((-1.0)*sj0))+((x1576*x1583))+(((-1.0)*r02*x1584))+(((-1.0)*x1579*x1585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1586=cj5*cj5;
IkReal x1587=((1.0)*r21);
IkReal x1588=(cj5*sj5);
IkReal x1589=((1.0)*r20);
CheckValue<IkReal> x1590=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r00*x1587*x1588))+(((-1.0)*r01*x1586*x1587))+((r00*r20*x1586))+((r02*r22))+(((-1.0)*r01*x1588*x1589)))),-1);
if(!x1590.valid){
continue;
}
CheckValue<IkReal> x1591 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x1589))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1590.value)))+(x1591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1592=IKsin(j4);
IkReal x1593=IKcos(j4);
IkReal x1594=(r11*sj5);
IkReal x1595=(cj5*r00);
IkReal x1596=(cj5*r10);
IkReal x1597=(r21*sj5);
IkReal x1598=(cj5*r20);
IkReal x1599=(r01*sj5);
IkReal x1600=((1.0)*x1593);
IkReal x1601=((1.0)*x1592);
evalcond[0]=(((x1592*x1597))+(((-1.0)*r22*x1600))+(((-1.0)*x1598*x1601)));
evalcond[1]=(((x1593*x1598))+(((-1.0)*r22*x1601))+(((-1.0)*x1597*x1600)));
evalcond[2]=(cj0+((x1592*x1594))+(((-1.0)*x1596*x1601))+(((-1.0)*r12*x1600)));
evalcond[3]=(cj0+((x1593*x1595))+(((-1.0)*x1599*x1600))+(((-1.0)*r02*x1601)));
evalcond[4]=(sj0+(((-1.0)*x1594*x1600))+((x1593*x1596))+(((-1.0)*r12*x1601)));
evalcond[5]=((((-1.0)*sj0))+((x1592*x1599))+(((-1.0)*x1595*x1601))+(((-1.0)*r02*x1600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1602=((1.0)*cj5);
CheckValue<IkReal> x1603=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1602)))),-1);
if(!x1603.valid){
continue;
}
CheckValue<IkReal> x1604 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1602))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1603.value)))+(x1604.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1605=IKsin(j4);
IkReal x1606=IKcos(j4);
IkReal x1607=(r11*sj5);
IkReal x1608=(cj5*r00);
IkReal x1609=(cj5*r10);
IkReal x1610=(r21*sj5);
IkReal x1611=(cj5*r20);
IkReal x1612=(r01*sj5);
IkReal x1613=((1.0)*x1606);
IkReal x1614=((1.0)*x1605);
evalcond[0]=((((-1.0)*x1611*x1614))+(((-1.0)*r22*x1613))+((x1605*x1610)));
evalcond[1]=((((-1.0)*x1610*x1613))+(((-1.0)*r22*x1614))+((x1606*x1611)));
evalcond[2]=((((-1.0)*r12*x1613))+cj0+(((-1.0)*x1609*x1614))+((x1605*x1607)));
evalcond[3]=(cj0+(((-1.0)*r02*x1614))+((x1606*x1608))+(((-1.0)*x1612*x1613)));
evalcond[4]=((((-1.0)*r12*x1614))+sj0+(((-1.0)*x1607*x1613))+((x1606*x1609)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1613))+(((-1.0)*x1608*x1614))+((x1605*x1612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1615=IKcos(j0);
IkReal x1616=IKsin(j0);
evalcond[0]=((((-0.134)*x1616))+(((-1.0)*px))+(((-0.425)*x1615)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x1615))+(((-0.425)*x1616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1617=((1.0)*cj5);
IkReal x1618=((((-1.0)*r01*x1617))+(((-1.0)*r00*sj5)));
j4eval[0]=x1618;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1617)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1618);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1619=cj5*cj5;
IkReal x1620=((1.0)*r21);
IkReal x1621=(cj5*sj5);
IkReal x1622=((1.0)*r20);
IkReal x1623=((((-1.0)*r00*x1620*x1621))+(((-1.0)*r01*x1621*x1622))+(((-1.0)*r01*x1619*x1620))+((r00*r20*x1619))+((r01*r21))+((r02*r22)));
j4eval[0]=x1623;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x1622))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1623);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1624=cj5*cj5;
IkReal x1625=(r21*sj5);
IkReal x1626=(r11*r21);
IkReal x1627=((1.0)*cj5*r20);
IkReal x1628=(x1626+((r10*r20*x1624))+(((-1.0)*r11*sj5*x1627))+(((-1.0)*x1624*x1626))+((r12*r22))+(((-1.0)*cj5*r10*x1625)));
j4eval[0]=x1628;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1627))+((sj0*x1625)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1628);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1629=cj5*cj5;
IkReal x1630=(r21*sj5);
IkReal x1631=(r11*r21);
IkReal x1632=((1.0)*cj5*r20);
CheckValue<IkReal> x1633 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1630))+(((-1.0)*sj0*x1632)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1633.valid){
continue;
}
CheckValue<IkReal> x1634=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x1632))+x1631+((r10*r20*x1629))+((r12*r22))+(((-1.0)*x1629*x1631))+(((-1.0)*cj5*r10*x1630)))),-1);
if(!x1634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1633.value)+(((1.5707963267949)*(x1634.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1635=IKsin(j4);
IkReal x1636=IKcos(j4);
IkReal x1637=(r11*sj5);
IkReal x1638=(cj5*r00);
IkReal x1639=(cj5*r10);
IkReal x1640=(r21*sj5);
IkReal x1641=(cj5*r20);
IkReal x1642=(r01*sj5);
IkReal x1643=((1.0)*x1636);
IkReal x1644=((1.0)*x1635);
evalcond[0]=((((-1.0)*x1641*x1644))+(((-1.0)*r22*x1643))+((x1635*x1640)));
evalcond[1]=(((x1636*x1641))+(((-1.0)*r22*x1644))+(((-1.0)*x1640*x1643)));
evalcond[2]=(cj0+(((-1.0)*r12*x1643))+(((-1.0)*x1639*x1644))+((x1635*x1637)));
evalcond[3]=(((x1636*x1638))+cj0+(((-1.0)*x1642*x1643))+(((-1.0)*r02*x1644)));
evalcond[4]=(sj0+((x1636*x1639))+(((-1.0)*r12*x1644))+(((-1.0)*x1637*x1643)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1638*x1644))+((x1635*x1642))+(((-1.0)*r02*x1643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1645=cj5*cj5;
IkReal x1646=((1.0)*r21);
IkReal x1647=(cj5*sj5);
IkReal x1648=((1.0)*r20);
CheckValue<IkReal> x1649=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1647*x1648))+((r01*r21))+((r00*r20*x1645))+(((-1.0)*r01*x1645*x1646))+(((-1.0)*r00*x1646*x1647))+((r02*r22)))),-1);
if(!x1649.valid){
continue;
}
CheckValue<IkReal> x1650 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1649.value)))+(x1650.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1651=IKsin(j4);
IkReal x1652=IKcos(j4);
IkReal x1653=(r11*sj5);
IkReal x1654=(cj5*r00);
IkReal x1655=(cj5*r10);
IkReal x1656=(r21*sj5);
IkReal x1657=(cj5*r20);
IkReal x1658=(r01*sj5);
IkReal x1659=((1.0)*x1652);
IkReal x1660=((1.0)*x1651);
evalcond[0]=((((-1.0)*r22*x1659))+(((-1.0)*x1657*x1660))+((x1651*x1656)));
evalcond[1]=((((-1.0)*x1656*x1659))+(((-1.0)*r22*x1660))+((x1652*x1657)));
evalcond[2]=(cj0+(((-1.0)*r12*x1659))+(((-1.0)*x1655*x1660))+((x1651*x1653)));
evalcond[3]=(cj0+(((-1.0)*x1658*x1659))+(((-1.0)*r02*x1660))+((x1652*x1654)));
evalcond[4]=(sj0+(((-1.0)*r12*x1660))+(((-1.0)*x1653*x1659))+((x1652*x1655)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1654*x1660))+(((-1.0)*r02*x1659))+((x1651*x1658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1661=((1.0)*cj5);
CheckValue<IkReal> x1662 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1661)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1662.valid){
continue;
}
CheckValue<IkReal> x1663=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1661))+(((-1.0)*r00*sj5)))),-1);
if(!x1663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1662.value)+(((1.5707963267949)*(x1663.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1664=IKsin(j4);
IkReal x1665=IKcos(j4);
IkReal x1666=(r11*sj5);
IkReal x1667=(cj5*r00);
IkReal x1668=(cj5*r10);
IkReal x1669=(r21*sj5);
IkReal x1670=(cj5*r20);
IkReal x1671=(r01*sj5);
IkReal x1672=((1.0)*x1665);
IkReal x1673=((1.0)*x1664);
evalcond[0]=((((-1.0)*x1670*x1673))+((x1664*x1669))+(((-1.0)*r22*x1672)));
evalcond[1]=(((x1665*x1670))+(((-1.0)*x1669*x1672))+(((-1.0)*r22*x1673)));
evalcond[2]=(cj0+(((-1.0)*x1668*x1673))+(((-1.0)*r12*x1672))+((x1664*x1666)));
evalcond[3]=(cj0+(((-1.0)*r02*x1673))+(((-1.0)*x1671*x1672))+((x1665*x1667)));
evalcond[4]=(sj0+(((-1.0)*r12*x1673))+(((-1.0)*x1666*x1672))+((x1665*x1668)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1667*x1673))+(((-1.0)*r02*x1672))+((x1664*x1671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1674=IKcos(j0);
IkReal x1675=IKsin(j0);
evalcond[0]=((((-0.425)*x1674))+(((-1.0)*px))+(((-0.134)*x1675)));
evalcond[1]=((((0.134)*x1674))+(((-0.425)*x1675))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1676=((1.0)*cj5);
IkReal x1677=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1676)));
j4eval[0]=x1677;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1676)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1677);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1678=((1.0)*cj5);
IkReal x1679=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1678)));
j4eval[0]=x1679;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1678))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1679);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1680=cj5*cj5;
IkReal x1681=((1.0)*sj5);
IkReal x1682=(cj5*r20);
IkReal x1683=(r11*r21);
IkReal x1684=((((-1.0)*cj5*r10*r21*x1681))+(((-1.0)*r11*x1681*x1682))+x1683+((r12*r22))+(((-1.0)*x1680*x1683))+((r10*r20*x1680)));
j4eval[0]=x1684;
j4eval[1]=IKsign(x1684);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1681))+((cj0*x1682)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1685=cj5*cj5;
IkReal x1686=((1.0)*sj5);
IkReal x1687=(cj5*r20);
IkReal x1688=(r11*r21);
CheckValue<IkReal> x1689=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1686))+x1688+((r12*r22))+(((-1.0)*r11*x1686*x1687))+((r10*r20*x1685))+(((-1.0)*x1685*x1688)))),-1);
if(!x1689.valid){
continue;
}
CheckValue<IkReal> x1690 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1686))+((cj0*x1687)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1689.value)))+(x1690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1691=IKsin(j4);
IkReal x1692=IKcos(j4);
IkReal x1693=((1.0)*sj0);
IkReal x1694=(cj5*r00);
IkReal x1695=(r11*sj5);
IkReal x1696=(cj5*r10);
IkReal x1697=(r21*sj5);
IkReal x1698=(cj5*r20);
IkReal x1699=(r01*sj5);
IkReal x1700=((1.0)*x1692);
IkReal x1701=((1.0)*x1691);
evalcond[0]=((((-1.0)*x1698*x1701))+((x1691*x1697))+(((-1.0)*r22*x1700)));
evalcond[1]=(((x1692*x1698))+(((-1.0)*r22*x1701))+(((-1.0)*x1697*x1700)));
evalcond[2]=(cj0+((x1691*x1695))+(((-1.0)*x1696*x1701))+(((-1.0)*r12*x1700)));
evalcond[3]=((((-1.0)*x1693))+((x1691*x1699))+(((-1.0)*r02*x1700))+(((-1.0)*x1694*x1701)));
evalcond[4]=((((-1.0)*x1699*x1700))+((x1692*x1694))+(((-1.0)*r02*x1701))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1693))+((x1692*x1696))+(((-1.0)*x1695*x1700))+(((-1.0)*r12*x1701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1702=((1.0)*cj5);
CheckValue<IkReal> x1703 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1702)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1703.valid){
continue;
}
CheckValue<IkReal> x1704=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1702)))),-1);
if(!x1704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1703.value)+(((1.5707963267949)*(x1704.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1705=IKsin(j4);
IkReal x1706=IKcos(j4);
IkReal x1707=((1.0)*sj0);
IkReal x1708=(cj5*r00);
IkReal x1709=(r11*sj5);
IkReal x1710=(cj5*r10);
IkReal x1711=(r21*sj5);
IkReal x1712=(cj5*r20);
IkReal x1713=(r01*sj5);
IkReal x1714=((1.0)*x1706);
IkReal x1715=((1.0)*x1705);
evalcond[0]=((((-1.0)*x1712*x1715))+(((-1.0)*r22*x1714))+((x1705*x1711)));
evalcond[1]=((((-1.0)*x1711*x1714))+(((-1.0)*r22*x1715))+((x1706*x1712)));
evalcond[2]=((((-1.0)*x1710*x1715))+cj0+((x1705*x1709))+(((-1.0)*r12*x1714)));
evalcond[3]=((((-1.0)*x1708*x1715))+(((-1.0)*x1707))+(((-1.0)*r02*x1714))+((x1705*x1713)));
evalcond[4]=((((-1.0)*x1713*x1714))+((x1706*x1708))+(((-1.0)*r02*x1715))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1709*x1714))+(((-1.0)*x1707))+((x1706*x1710))+(((-1.0)*r12*x1715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1716=((1.0)*cj5);
CheckValue<IkReal> x1717=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1716)))),-1);
if(!x1717.valid){
continue;
}
CheckValue<IkReal> x1718 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1716)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1717.value)))+(x1718.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1719=IKsin(j4);
IkReal x1720=IKcos(j4);
IkReal x1721=((1.0)*sj0);
IkReal x1722=(cj5*r00);
IkReal x1723=(r11*sj5);
IkReal x1724=(cj5*r10);
IkReal x1725=(r21*sj5);
IkReal x1726=(cj5*r20);
IkReal x1727=(r01*sj5);
IkReal x1728=((1.0)*x1720);
IkReal x1729=((1.0)*x1719);
evalcond[0]=((((-1.0)*r22*x1728))+(((-1.0)*x1726*x1729))+((x1719*x1725)));
evalcond[1]=((((-1.0)*r22*x1729))+((x1720*x1726))+(((-1.0)*x1725*x1728)));
evalcond[2]=(cj0+(((-1.0)*r12*x1728))+(((-1.0)*x1724*x1729))+((x1719*x1723)));
evalcond[3]=((((-1.0)*x1722*x1729))+(((-1.0)*x1721))+((x1719*x1727))+(((-1.0)*r02*x1728)));
evalcond[4]=(((x1720*x1722))+(((-1.0)*x1727*x1728))+(((-1.0)*cj0))+(((-1.0)*r02*x1729)));
evalcond[5]=((((-1.0)*r12*x1729))+(((-1.0)*x1723*x1728))+((x1720*x1724))+(((-1.0)*x1721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1730=((1.0)*cj5);
IkReal x1731=((((-1.0)*r01*x1730))+(((-1.0)*r00*sj5)));
j4eval[0]=x1731;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1730))))));
j4eval[2]=IKsign(x1731);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1732=cj5*cj5;
IkReal x1733=((1.0)*r21);
IkReal x1734=(cj5*sj5);
IkReal x1735=((1.0)*r20);
IkReal x1736=((((-1.0)*r01*x1732*x1733))+((r01*r21))+((r02*r22))+((r00*r20*x1732))+(((-1.0)*r00*x1733*x1734))+(((-1.0)*r01*x1734*x1735)));
j4eval[0]=x1736;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1735)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1736);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1737=cj5*cj5;
IkReal x1738=(r21*sj5);
IkReal x1739=(r11*r21);
IkReal x1740=((1.0)*cj5*r20);
IkReal x1741=(x1739+(((-1.0)*cj5*r10*x1738))+((r12*r22))+(((-1.0)*x1737*x1739))+(((-1.0)*r11*sj5*x1740))+((r10*r20*x1737)));
j4eval[0]=x1741;
j4eval[1]=((IKabs((((sj0*x1738))+(((-1.0)*sj0*x1740)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1741);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1742=cj5*cj5;
IkReal x1743=(r21*sj5);
IkReal x1744=(r11*r21);
IkReal x1745=((1.0)*cj5*r20);
CheckValue<IkReal> x1746=IKPowWithIntegerCheck(IKsign((((r10*r20*x1742))+x1744+((r12*r22))+(((-1.0)*x1742*x1744))+(((-1.0)*cj5*r10*x1743))+(((-1.0)*r11*sj5*x1745)))),-1);
if(!x1746.valid){
continue;
}
CheckValue<IkReal> x1747 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1745))+((sj0*x1743)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1746.value)))+(x1747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1748=IKsin(j4);
IkReal x1749=IKcos(j4);
IkReal x1750=(r11*sj5);
IkReal x1751=(cj5*r00);
IkReal x1752=(cj5*r10);
IkReal x1753=(r21*sj5);
IkReal x1754=(cj5*r20);
IkReal x1755=(r01*sj5);
IkReal x1756=((1.0)*x1749);
IkReal x1757=((1.0)*x1748);
evalcond[0]=((((-1.0)*r22*x1756))+((x1748*x1753))+(((-1.0)*x1754*x1757)));
evalcond[1]=(((x1749*x1754))+(((-1.0)*r22*x1757))+(((-1.0)*x1753*x1756)));
evalcond[2]=((((-1.0)*r12*x1756))+cj0+((x1748*x1750))+(((-1.0)*x1752*x1757)));
evalcond[3]=(((x1749*x1751))+cj0+(((-1.0)*r02*x1757))+(((-1.0)*x1755*x1756)));
evalcond[4]=(sj0+(((-1.0)*r12*x1757))+((x1749*x1752))+(((-1.0)*x1750*x1756)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1751*x1757))+((x1748*x1755))+(((-1.0)*r02*x1756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1758=cj5*cj5;
IkReal x1759=((1.0)*r21);
IkReal x1760=(cj5*sj5);
IkReal x1761=((1.0)*r20);
CheckValue<IkReal> x1762 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1762.valid){
continue;
}
CheckValue<IkReal> x1763=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x1758*x1759))+(((-1.0)*r00*x1759*x1760))+((r00*r20*x1758))+((r02*r22))+(((-1.0)*r01*x1760*x1761)))),-1);
if(!x1763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1762.value)+(((1.5707963267949)*(x1763.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1764=IKsin(j4);
IkReal x1765=IKcos(j4);
IkReal x1766=(r11*sj5);
IkReal x1767=(cj5*r00);
IkReal x1768=(cj5*r10);
IkReal x1769=(r21*sj5);
IkReal x1770=(cj5*r20);
IkReal x1771=(r01*sj5);
IkReal x1772=((1.0)*x1765);
IkReal x1773=((1.0)*x1764);
evalcond[0]=(((x1764*x1769))+(((-1.0)*x1770*x1773))+(((-1.0)*r22*x1772)));
evalcond[1]=(((x1765*x1770))+(((-1.0)*r22*x1773))+(((-1.0)*x1769*x1772)));
evalcond[2]=(cj0+((x1764*x1766))+(((-1.0)*x1768*x1773))+(((-1.0)*r12*x1772)));
evalcond[3]=(cj0+((x1765*x1767))+(((-1.0)*r02*x1773))+(((-1.0)*x1771*x1772)));
evalcond[4]=(sj0+((x1765*x1768))+(((-1.0)*x1766*x1772))+(((-1.0)*r12*x1773)));
evalcond[5]=((((-1.0)*sj0))+((x1764*x1771))+(((-1.0)*x1767*x1773))+(((-1.0)*r02*x1772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1774=((1.0)*cj5);
CheckValue<IkReal> x1775=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1774)))),-1);
if(!x1775.valid){
continue;
}
CheckValue<IkReal> x1776 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1774)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1775.value)))+(x1776.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1777=IKsin(j4);
IkReal x1778=IKcos(j4);
IkReal x1779=(r11*sj5);
IkReal x1780=(cj5*r00);
IkReal x1781=(cj5*r10);
IkReal x1782=(r21*sj5);
IkReal x1783=(cj5*r20);
IkReal x1784=(r01*sj5);
IkReal x1785=((1.0)*x1778);
IkReal x1786=((1.0)*x1777);
evalcond[0]=((((-1.0)*x1783*x1786))+(((-1.0)*r22*x1785))+((x1777*x1782)));
evalcond[1]=((((-1.0)*r22*x1786))+((x1778*x1783))+(((-1.0)*x1782*x1785)));
evalcond[2]=(cj0+(((-1.0)*r12*x1785))+(((-1.0)*x1781*x1786))+((x1777*x1779)));
evalcond[3]=(cj0+((x1778*x1780))+(((-1.0)*x1784*x1785))+(((-1.0)*r02*x1786)));
evalcond[4]=(sj0+(((-1.0)*r12*x1786))+((x1778*x1781))+(((-1.0)*x1779*x1785)));
evalcond[5]=((((-1.0)*sj0))+((x1777*x1784))+(((-1.0)*x1780*x1786))+(((-1.0)*r02*x1785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1787=((1.0)*cj5);
IkReal x1788=((((-1.0)*r01*x1787))+(((-1.0)*r00*sj5)));
j4eval[0]=x1788;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1787))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1788);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1789=((1.0)*cj5);
IkReal x1790=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1789)));
j4eval[0]=x1790;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1789))))));
j4eval[2]=IKsign(x1790);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1791=cj5*cj5;
IkReal x1792=((1.0)*sj5);
IkReal x1793=(cj5*r20);
IkReal x1794=(r11*r21);
IkReal x1795=((((-1.0)*cj5*r10*r21*x1792))+((r10*r20*x1791))+x1794+((r12*r22))+(((-1.0)*x1791*x1794))+(((-1.0)*r11*x1792*x1793)));
j4eval[0]=x1795;
j4eval[1]=IKsign(x1795);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1792))+((cj0*x1793)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1796=cj5*cj5;
IkReal x1797=((1.0)*sj5);
IkReal x1798=(cj5*r20);
IkReal x1799=(r11*r21);
CheckValue<IkReal> x1800=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1797))+((r10*r20*x1796))+x1799+((r12*r22))+(((-1.0)*r11*x1797*x1798))+(((-1.0)*x1796*x1799)))),-1);
if(!x1800.valid){
continue;
}
CheckValue<IkReal> x1801 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1797))+((cj0*x1798)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1800.value)))+(x1801.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1802=IKsin(j4);
IkReal x1803=IKcos(j4);
IkReal x1804=((1.0)*sj0);
IkReal x1805=(cj5*r00);
IkReal x1806=(r11*sj5);
IkReal x1807=(cj5*r10);
IkReal x1808=(r21*sj5);
IkReal x1809=(cj5*r20);
IkReal x1810=(r01*sj5);
IkReal x1811=((1.0)*x1803);
IkReal x1812=((1.0)*x1802);
evalcond[0]=(((x1802*x1808))+(((-1.0)*x1809*x1812))+(((-1.0)*r22*x1811)));
evalcond[1]=((((-1.0)*x1808*x1811))+((x1803*x1809))+(((-1.0)*r22*x1812)));
evalcond[2]=(((x1802*x1806))+cj0+(((-1.0)*x1807*x1812))+(((-1.0)*r12*x1811)));
evalcond[3]=(((x1802*x1810))+(((-1.0)*x1805*x1812))+(((-1.0)*r02*x1811))+(((-1.0)*x1804)));
evalcond[4]=((((-1.0)*r02*x1812))+(((-1.0)*x1810*x1811))+((x1803*x1805))+(((-1.0)*cj0)));
evalcond[5]=(((x1803*x1807))+(((-1.0)*x1804))+(((-1.0)*r12*x1812))+(((-1.0)*x1806*x1811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1813=((1.0)*cj5);
CheckValue<IkReal> x1814 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1813))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1814.valid){
continue;
}
CheckValue<IkReal> x1815=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1813)))),-1);
if(!x1815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1814.value)+(((1.5707963267949)*(x1815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1816=IKsin(j4);
IkReal x1817=IKcos(j4);
IkReal x1818=((1.0)*sj0);
IkReal x1819=(cj5*r00);
IkReal x1820=(r11*sj5);
IkReal x1821=(cj5*r10);
IkReal x1822=(r21*sj5);
IkReal x1823=(cj5*r20);
IkReal x1824=(r01*sj5);
IkReal x1825=((1.0)*x1817);
IkReal x1826=((1.0)*x1816);
evalcond[0]=((((-1.0)*r22*x1825))+(((-1.0)*x1823*x1826))+((x1816*x1822)));
evalcond[1]=((((-1.0)*r22*x1826))+(((-1.0)*x1822*x1825))+((x1817*x1823)));
evalcond[2]=((((-1.0)*x1821*x1826))+cj0+(((-1.0)*r12*x1825))+((x1816*x1820)));
evalcond[3]=((((-1.0)*x1818))+(((-1.0)*x1819*x1826))+(((-1.0)*r02*x1825))+((x1816*x1824)));
evalcond[4]=(((x1817*x1819))+(((-1.0)*r02*x1826))+(((-1.0)*x1824*x1825))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1818))+(((-1.0)*r12*x1826))+(((-1.0)*x1820*x1825))+((x1817*x1821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1827=((1.0)*cj5);
CheckValue<IkReal> x1828=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1827)))),-1);
if(!x1828.valid){
continue;
}
CheckValue<IkReal> x1829 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1827))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1828.value)))+(x1829.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1830=IKsin(j4);
IkReal x1831=IKcos(j4);
IkReal x1832=((1.0)*sj0);
IkReal x1833=(cj5*r00);
IkReal x1834=(r11*sj5);
IkReal x1835=(cj5*r10);
IkReal x1836=(r21*sj5);
IkReal x1837=(cj5*r20);
IkReal x1838=(r01*sj5);
IkReal x1839=((1.0)*x1831);
IkReal x1840=((1.0)*x1830);
evalcond[0]=(((x1830*x1836))+(((-1.0)*x1837*x1840))+(((-1.0)*r22*x1839)));
evalcond[1]=((((-1.0)*r22*x1840))+(((-1.0)*x1836*x1839))+((x1831*x1837)));
evalcond[2]=(cj0+((x1830*x1834))+(((-1.0)*x1835*x1840))+(((-1.0)*r12*x1839)));
evalcond[3]=((((-1.0)*x1832))+((x1830*x1838))+(((-1.0)*r02*x1839))+(((-1.0)*x1833*x1840)));
evalcond[4]=((((-1.0)*r02*x1840))+(((-1.0)*x1838*x1839))+((x1831*x1833))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1834*x1839))+(((-1.0)*x1832))+((x1831*x1835))+(((-1.0)*r12*x1840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1841=(sj1*sj2);
IkReal x1842=(r00*sj5);
IkReal x1843=(cj1*cj2);
IkReal x1844=(cj5*r01);
IkReal x1845=((212.5)*cj1);
IkReal x1846=((500.0)*px);
CheckValue<IkReal> x1847=IKPowWithIntegerCheck(((((-67.0)*x1843))+(((67.0)*x1841))),-1);
if(!x1847.valid){
continue;
}
CheckValue<IkReal> x1848=IKPowWithIntegerCheck((x1841+(((-1.0)*x1843))),-1);
if(!x1848.valid){
continue;
}
if( IKabs(((x1847.value)*(((((-1.0)*x1842*x1845))+(((146.0)*x1841*x1842))+(((146.0)*x1841*x1844))+(((-1.0)*x1841*x1846))+(((-146.0)*x1843*x1844))+(((-146.0)*x1842*x1843))+((x1843*x1846))+(((-1.0)*x1844*x1845)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1848.value)*(((((-1.0)*x1844))+(((-1.0)*x1842)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1847.value)*(((((-1.0)*x1842*x1845))+(((146.0)*x1841*x1842))+(((146.0)*x1841*x1844))+(((-1.0)*x1841*x1846))+(((-146.0)*x1843*x1844))+(((-146.0)*x1842*x1843))+((x1843*x1846))+(((-1.0)*x1844*x1845))))))+IKsqr(((x1848.value)*(((((-1.0)*x1844))+(((-1.0)*x1842))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1847.value)*(((((-1.0)*x1842*x1845))+(((146.0)*x1841*x1842))+(((146.0)*x1841*x1844))+(((-1.0)*x1841*x1846))+(((-146.0)*x1843*x1844))+(((-146.0)*x1842*x1843))+((x1843*x1846))+(((-1.0)*x1844*x1845))))), ((x1848.value)*(((((-1.0)*x1844))+(((-1.0)*x1842))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1849=IKcos(j0);
IkReal x1850=IKsin(j0);
IkReal x1851=((0.1)*sj5);
IkReal x1852=(cj5*r11);
IkReal x1853=(cj5*r01);
IkReal x1854=(sj1*sj2);
IkReal x1855=(cj1*cj2);
IkReal x1856=((0.392)*x1850);
IkReal x1857=(cj1*x1849);
evalcond[0]=(((r00*sj5))+(((-1.0)*x1849*x1855))+((x1849*x1854))+x1853);
evalcond[1]=(((r10*sj5))+((x1850*x1854))+(((-1.0)*x1850*x1855))+x1852);
evalcond[2]=((((-0.134)*x1850))+(((0.392)*x1849*x1855))+(((-1.0)*px))+(((-1.0)*r00*x1851))+(((-0.392)*x1849*x1854))+(((-0.1)*x1853))+(((0.425)*x1857)));
evalcond[3]=((((0.134)*x1849))+(((0.425)*cj1*x1850))+((x1855*x1856))+(((-1.0)*py))+(((-0.1)*x1852))+(((-1.0)*x1854*x1856))+(((-1.0)*r10*x1851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1858=((1.0)*cj5);
IkReal x1859=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1858)));
j4eval[0]=x1859;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1858)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1859);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1860=((1.0)*cj5);
IkReal x1861=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1860)));
j4eval[0]=x1861;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1860))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1861);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1862=((1.0)*sj0);
IkReal x1863=((1.0)*cj0);
IkReal x1864=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1864;
j4eval[1]=((IKabs(((((-1.0)*r02*x1863))+(((-1.0)*r12*x1862)))))+(IKabs(((((-1.0)*r01*sj5*x1863))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1862))))));
j4eval[2]=IKsign(x1864);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1865=((-1.0)*r20);
IkReal x1867 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1867)==0){
continue;
}
IkReal x1866=pow(x1867,-0.5);
CheckValue<IkReal> x1868 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1865),IKFAST_ATAN2_MAGTHRESH);
if(!x1868.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1868.value));
IkReal gconst79=(r21*x1866);
IkReal gconst80=(x1865*x1866);
CheckValue<IkReal> x1869 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1869.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1869.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1870=((-1.0)*r20);
IkReal x1871=x1866;
CheckValue<IkReal> x1873 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1870),IKFAST_ATAN2_MAGTHRESH);
if(!x1873.valid){
continue;
}
IkReal x1872=((-1.0)*(x1873.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1872;
IkReal gconst78=x1872;
IkReal gconst79=(r21*x1871);
IkReal gconst80=(x1870*x1871);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1874=((-1.0)*r20);
IkReal x1875=x1866;
CheckValue<IkReal> x1877 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1874),IKFAST_ATAN2_MAGTHRESH);
if(!x1877.valid){
continue;
}
IkReal x1876=((-1.0)*(x1877.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1876;
IkReal gconst78=x1876;
IkReal gconst79=(r21*x1875);
IkReal gconst80=(x1874*x1875);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1878=((-1.0)*r20);
IkReal x1879=x1866;
CheckValue<IkReal> x1881 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1878),IKFAST_ATAN2_MAGTHRESH);
if(!x1881.valid){
continue;
}
IkReal x1880=((-1.0)*(x1881.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1880;
IkReal gconst78=x1880;
IkReal gconst79=(r21*x1879);
IkReal gconst80=(x1878*x1879);
IkReal x1882=r22*r22;
CheckValue<IkReal> x1885=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1882))),-1);
if(!x1885.valid){
continue;
}
IkReal x1883=x1885.value;
IkReal x1884=(x1882+((x1883*(r20*r20*r20*r20)))+(((2.0)*x1883*(r20*r20)*(r21*r21)))+((x1883*(r21*r21*r21*r21))));
j4eval[0]=x1884;
j4eval[1]=IKsign(x1884);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1886=(sj1*sj2);
IkReal x1887=(gconst80*r20);
IkReal x1888=(gconst79*r21);
IkReal x1889=(cj1*cj2);
CheckValue<IkReal> x1890=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x1887*x1887)+(((-2.0)*x1887*x1888))+(x1888*x1888))),-1);
if(!x1890.valid){
continue;
}
CheckValue<IkReal> x1891 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1889))+((r22*x1886)))),IkReal(((((-1.0)*x1886*x1887))+((x1887*x1889))+(((-1.0)*x1888*x1889))+((x1886*x1888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1890.value)))+(x1891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1892=IKsin(j4);
IkReal x1893=IKcos(j4);
IkReal x1894=(gconst79*r01);
IkReal x1895=(gconst79*r21);
IkReal x1896=((1.0)*cj2);
IkReal x1897=(gconst79*r11);
IkReal x1898=((1.0)*sj0);
IkReal x1899=(cj1*sj2);
IkReal x1900=((1.0)*x1893);
IkReal x1901=(gconst80*x1893);
IkReal x1902=((1.0)*x1892);
IkReal x1903=(gconst80*x1902);
evalcond[0]=(((x1892*x1895))+(((-1.0)*r22*x1900))+(((-1.0)*r20*x1903)));
evalcond[1]=(cj0+((x1892*x1897))+(((-1.0)*r10*x1903))+(((-1.0)*r12*x1900)));
evalcond[2]=(((x1892*x1894))+(((-1.0)*x1898))+(((-1.0)*r02*x1900))+(((-1.0)*r00*x1903)));
evalcond[3]=((((-1.0)*cj1*x1896))+(((-1.0)*r22*x1902))+((sj1*sj2))+((r20*x1901))+(((-1.0)*x1895*x1900)));
evalcond[4]=(((r00*x1901))+(((-1.0)*cj0*sj1*x1896))+(((-1.0)*x1894*x1900))+(((-1.0)*cj0*x1899))+(((-1.0)*r02*x1902)));
evalcond[5]=((((-1.0)*sj0*sj1*x1896))+(((-1.0)*x1898*x1899))+(((-1.0)*r12*x1902))+(((-1.0)*x1897*x1900))+((r10*x1901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1904=((1.0)*gconst80);
CheckValue<IkReal> x1905 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1904))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1905.valid){
continue;
}
CheckValue<IkReal> x1906=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1904))+(((-1.0)*gconst79*r10)))),-1);
if(!x1906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1905.value)+(((1.5707963267949)*(x1906.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1907=IKsin(j4);
IkReal x1908=IKcos(j4);
IkReal x1909=(gconst79*r01);
IkReal x1910=(gconst79*r21);
IkReal x1911=((1.0)*cj2);
IkReal x1912=(gconst79*r11);
IkReal x1913=((1.0)*sj0);
IkReal x1914=(cj1*sj2);
IkReal x1915=((1.0)*x1908);
IkReal x1916=(gconst80*x1908);
IkReal x1917=((1.0)*x1907);
IkReal x1918=(gconst80*x1917);
evalcond[0]=(((x1907*x1910))+(((-1.0)*r22*x1915))+(((-1.0)*r20*x1918)));
evalcond[1]=(cj0+((x1907*x1912))+(((-1.0)*r12*x1915))+(((-1.0)*r10*x1918)));
evalcond[2]=((((-1.0)*r00*x1918))+(((-1.0)*r02*x1915))+(((-1.0)*x1913))+((x1907*x1909)));
evalcond[3]=((((-1.0)*x1910*x1915))+(((-1.0)*r22*x1917))+((sj1*sj2))+(((-1.0)*cj1*x1911))+((r20*x1916)));
evalcond[4]=((((-1.0)*r02*x1917))+((r00*x1916))+(((-1.0)*cj0*sj1*x1911))+(((-1.0)*x1909*x1915))+(((-1.0)*cj0*x1914)));
evalcond[5]=(((r10*x1916))+(((-1.0)*r12*x1917))+(((-1.0)*sj0*sj1*x1911))+(((-1.0)*x1913*x1914))+(((-1.0)*x1912*x1915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1919=((1.0)*gconst80);
CheckValue<IkReal> x1920=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1919))+(((-1.0)*gconst79*r00)))),-1);
if(!x1920.valid){
continue;
}
CheckValue<IkReal> x1921 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x1919)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1920.value)))+(x1921.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1922=IKsin(j4);
IkReal x1923=IKcos(j4);
IkReal x1924=(gconst79*r01);
IkReal x1925=(gconst79*r21);
IkReal x1926=((1.0)*cj2);
IkReal x1927=(gconst79*r11);
IkReal x1928=((1.0)*sj0);
IkReal x1929=(cj1*sj2);
IkReal x1930=((1.0)*x1923);
IkReal x1931=(gconst80*x1923);
IkReal x1932=((1.0)*x1922);
IkReal x1933=(gconst80*x1932);
evalcond[0]=((((-1.0)*r22*x1930))+(((-1.0)*r20*x1933))+((x1922*x1925)));
evalcond[1]=(cj0+(((-1.0)*r12*x1930))+(((-1.0)*r10*x1933))+((x1922*x1927)));
evalcond[2]=((((-1.0)*x1928))+((x1922*x1924))+(((-1.0)*r00*x1933))+(((-1.0)*r02*x1930)));
evalcond[3]=((((-1.0)*cj1*x1926))+((sj1*sj2))+(((-1.0)*r22*x1932))+(((-1.0)*x1925*x1930))+((r20*x1931)));
evalcond[4]=(((r00*x1931))+(((-1.0)*cj0*x1929))+(((-1.0)*cj0*sj1*x1926))+(((-1.0)*x1924*x1930))+(((-1.0)*r02*x1932)));
evalcond[5]=((((-1.0)*sj0*sj1*x1926))+(((-1.0)*r12*x1932))+(((-1.0)*x1928*x1929))+((r10*x1931))+(((-1.0)*x1927*x1930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1934=((-1.0)*r21);
IkReal x1936 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1936)==0){
continue;
}
IkReal x1935=pow(x1936,-0.5);
CheckValue<IkReal> x1937 = IKatan2WithCheck(IkReal(x1934),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1937.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1937.value))));
IkReal gconst82=(x1934*x1935);
IkReal gconst83=((1.0)*r20*x1935);
CheckValue<IkReal> x1938 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1938.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1938.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1939=((-1.0)*r21);
CheckValue<IkReal> x1942 = IKatan2WithCheck(IkReal(x1939),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1942.valid){
continue;
}
IkReal x1940=((1.0)*(x1942.value));
IkReal x1941=x1935;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1940)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1940)));
IkReal gconst82=(x1939*x1941);
IkReal gconst83=((1.0)*r20*x1941);
IkReal x1943=r22*r22;
IkReal x1944=((1.0)*x1943);
CheckValue<IkReal> x1948=IKPowWithIntegerCheck(((-1.0)+x1943),-1);
if(!x1948.valid){
continue;
}
IkReal x1945=x1948.value;
if((((1.0)+(((-1.0)*x1944)))) < -0.00001)
continue;
IkReal x1946=IKsqrt(((1.0)+(((-1.0)*x1944))));
IkReal x1947=(cj0*x1945*x1946);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x1944*x1947))+x1947))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1949=((-1.0)*r21);
CheckValue<IkReal> x1952 = IKatan2WithCheck(IkReal(x1949),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1952.valid){
continue;
}
IkReal x1950=((1.0)*(x1952.value));
IkReal x1951=x1935;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1950)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1950)));
IkReal gconst82=(x1949*x1951);
IkReal gconst83=((1.0)*r20*x1951);
IkReal x1953=r22*r22;
IkReal x1954=((1.0)*x1953);
CheckValue<IkReal> x1958=IKPowWithIntegerCheck(((-1.0)+x1953),-1);
if(!x1958.valid){
continue;
}
IkReal x1955=x1958.value;
if((((1.0)+(((-1.0)*x1954)))) < -0.00001)
continue;
IkReal x1956=IKsqrt(((1.0)+(((-1.0)*x1954))));
IkReal x1957=(sj0*x1955*x1956);
j4eval[0]=((IKabs(((((-1.0)*x1954*x1957))+x1957)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1959=((-1.0)*r21);
CheckValue<IkReal> x1962 = IKatan2WithCheck(IkReal(x1959),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1962.valid){
continue;
}
IkReal x1960=((1.0)*(x1962.value));
IkReal x1961=x1935;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1960)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1960)));
IkReal gconst82=(x1959*x1961);
IkReal gconst83=((1.0)*r20*x1961);
IkReal x1963=r22*r22;
IkReal x1964=(r12*sj0);
IkReal x1965=(cj0*r02);
CheckValue<IkReal> x1969=IKPowWithIntegerCheck(((-1.0)+x1963),-1);
if(!x1969.valid){
continue;
}
IkReal x1966=x1969.value;
if((((1.0)+(((-1.0)*x1963)))) < -0.00001)
continue;
IkReal x1967=IKsqrt(((1.0)+(((-1.0)*x1963))));
IkReal x1968=(r22*x1966*x1967);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x1964*x1968))+((x1965*x1968)))))+(IKabs(((((-1.0)*x1965))+(((-1.0)*x1964))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1970=((1.0)*sj0);
IkReal x1971=((1.0)*cj0);
CheckValue<IkReal> x1972=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1972.valid){
continue;
}
CheckValue<IkReal> x1973 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1971))+(((-1.0)*r12*x1970)))),IkReal(((((-1.0)*gconst82*r11*x1970))+(((-1.0)*gconst82*r01*x1971))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1972.value)))+(x1973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1974=IKsin(j4);
IkReal x1975=IKcos(j4);
IkReal x1976=(gconst82*r11);
IkReal x1977=((1.0)*cj2);
IkReal x1978=((1.0)*sj0);
IkReal x1979=(cj1*sj2);
IkReal x1980=((1.0)*x1975);
IkReal x1981=(gconst83*x1975);
IkReal x1982=(gconst82*x1974);
IkReal x1983=((1.0)*x1974);
evalcond[0]=(((r21*x1982))+(((-1.0)*gconst83*r20*x1983))+(((-1.0)*r22*x1980)));
evalcond[1]=(cj0+(((-1.0)*r12*x1980))+((x1974*x1976))+(((-1.0)*gconst83*r10*x1983)));
evalcond[2]=((((-1.0)*r02*x1980))+(((-1.0)*gconst83*r00*x1983))+(((-1.0)*x1978))+((r01*x1982)));
evalcond[3]=((((-1.0)*gconst82*r21*x1980))+((sj1*sj2))+(((-1.0)*cj1*x1977))+(((-1.0)*r22*x1983))+((r20*x1981)));
evalcond[4]=((((-1.0)*cj0*x1979))+(((-1.0)*cj0*sj1*x1977))+(((-1.0)*r02*x1983))+(((-1.0)*gconst82*r01*x1980))+((r00*x1981)));
evalcond[5]=((((-1.0)*x1976*x1980))+(((-1.0)*sj0*sj1*x1977))+((r10*x1981))+(((-1.0)*x1978*x1979))+(((-1.0)*r12*x1983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1984=((1.0)*gconst83);
CheckValue<IkReal> x1985=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1984))+(((-1.0)*gconst82*r10)))),-1);
if(!x1985.valid){
continue;
}
CheckValue<IkReal> x1986 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1984))+((gconst82*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1985.value)))+(x1986.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1987=IKsin(j4);
IkReal x1988=IKcos(j4);
IkReal x1989=(gconst82*r11);
IkReal x1990=((1.0)*cj2);
IkReal x1991=((1.0)*sj0);
IkReal x1992=(cj1*sj2);
IkReal x1993=((1.0)*x1988);
IkReal x1994=(gconst83*x1988);
IkReal x1995=(gconst82*x1987);
IkReal x1996=((1.0)*x1987);
evalcond[0]=(((r21*x1995))+(((-1.0)*gconst83*r20*x1996))+(((-1.0)*r22*x1993)));
evalcond[1]=((((-1.0)*gconst83*r10*x1996))+((x1987*x1989))+cj0+(((-1.0)*r12*x1993)));
evalcond[2]=((((-1.0)*r02*x1993))+(((-1.0)*x1991))+(((-1.0)*gconst83*r00*x1996))+((r01*x1995)));
evalcond[3]=(((sj1*sj2))+((r20*x1994))+(((-1.0)*r22*x1996))+(((-1.0)*cj1*x1990))+(((-1.0)*gconst82*r21*x1993)));
evalcond[4]=((((-1.0)*gconst82*r01*x1993))+(((-1.0)*cj0*x1992))+(((-1.0)*cj0*sj1*x1990))+(((-1.0)*r02*x1996))+((r00*x1994)));
evalcond[5]=((((-1.0)*sj0*sj1*x1990))+((r10*x1994))+(((-1.0)*x1989*x1993))+(((-1.0)*x1991*x1992))+(((-1.0)*r12*x1996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1997=((1.0)*gconst83);
CheckValue<IkReal> x1998 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1997))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1998.valid){
continue;
}
CheckValue<IkReal> x1999=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1997))+(((-1.0)*gconst82*r00)))),-1);
if(!x1999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1998.value)+(((1.5707963267949)*(x1999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2000=IKsin(j4);
IkReal x2001=IKcos(j4);
IkReal x2002=(gconst82*r11);
IkReal x2003=((1.0)*cj2);
IkReal x2004=((1.0)*sj0);
IkReal x2005=(cj1*sj2);
IkReal x2006=((1.0)*x2001);
IkReal x2007=(gconst83*x2001);
IkReal x2008=(gconst82*x2000);
IkReal x2009=((1.0)*x2000);
evalcond[0]=(((r21*x2008))+(((-1.0)*r22*x2006))+(((-1.0)*gconst83*r20*x2009)));
evalcond[1]=(cj0+(((-1.0)*r12*x2006))+((x2000*x2002))+(((-1.0)*gconst83*r10*x2009)));
evalcond[2]=(((r01*x2008))+(((-1.0)*gconst83*r00*x2009))+(((-1.0)*r02*x2006))+(((-1.0)*x2004)));
evalcond[3]=((((-1.0)*r22*x2009))+((sj1*sj2))+(((-1.0)*cj1*x2003))+((r20*x2007))+(((-1.0)*gconst82*r21*x2006)));
evalcond[4]=((((-1.0)*gconst82*r01*x2006))+((r00*x2007))+(((-1.0)*r02*x2009))+(((-1.0)*cj0*x2005))+(((-1.0)*cj0*sj1*x2003)));
evalcond[5]=((((-1.0)*x2004*x2005))+((r10*x2007))+(((-1.0)*r12*x2009))+(((-1.0)*x2002*x2006))+(((-1.0)*sj0*sj1*x2003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2010=((-1.0)*r10);
IkReal x2012 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2012)==0){
continue;
}
IkReal x2011=pow(x2012,-0.5);
CheckValue<IkReal> x2013 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2010),IKFAST_ATAN2_MAGTHRESH);
if(!x2013.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2013.value));
IkReal gconst85=(r11*x2011);
IkReal gconst86=(x2010*x2011);
CheckValue<IkReal> x2014 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2014.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2014.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2015=((-1.0)*r10);
IkReal x2016=x2011;
CheckValue<IkReal> x2018 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2015),IKFAST_ATAN2_MAGTHRESH);
if(!x2018.valid){
continue;
}
IkReal x2017=((-1.0)*(x2018.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2017;
IkReal gconst84=x2017;
IkReal gconst85=(r11*x2016);
IkReal gconst86=(x2015*x2016);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2019=((1.0)*sj0);
IkReal x2020=((1.0)*gconst85);
CheckValue<IkReal> x2021 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2019)))),IkReal(((((-1.0)*gconst85*r11*x2019))+((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2020))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2021.valid){
continue;
}
CheckValue<IkReal> x2022=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2020)))),-1);
if(!x2022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2021.value)+(((1.5707963267949)*(x2022.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2023=IKsin(j4);
IkReal x2024=IKcos(j4);
IkReal x2025=(gconst85*r21);
IkReal x2026=(gconst86*r00);
IkReal x2027=(gconst86*r10);
IkReal x2028=((1.0)*cj2);
IkReal x2029=(gconst85*r11);
IkReal x2030=(gconst85*r01);
IkReal x2031=((1.0)*sj0);
IkReal x2032=(gconst86*r20);
IkReal x2033=(cj1*sj2);
IkReal x2034=((1.0)*x2024);
IkReal x2035=((1.0)*x2023);
evalcond[0]=((((-1.0)*r22*x2034))+((x2023*x2025))+(((-1.0)*x2032*x2035)));
evalcond[1]=(cj0+(((-1.0)*r12*x2034))+((x2023*x2029))+(((-1.0)*x2027*x2035)));
evalcond[2]=((((-1.0)*x2026*x2035))+(((-1.0)*r02*x2034))+((x2023*x2030))+(((-1.0)*x2031)));
evalcond[3]=((((-1.0)*r22*x2035))+((x2024*x2032))+(((-1.0)*cj1*x2028))+((sj1*sj2))+(((-1.0)*x2025*x2034)));
evalcond[4]=((((-1.0)*cj0*sj1*x2028))+((x2024*x2026))+(((-1.0)*r02*x2035))+(((-1.0)*x2030*x2034))+(((-1.0)*cj0*x2033)));
evalcond[5]=(((x2024*x2027))+(((-1.0)*r12*x2035))+(((-1.0)*x2029*x2034))+(((-1.0)*sj0*sj1*x2028))+(((-1.0)*x2031*x2033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2036=((1.0)*gconst86);
CheckValue<IkReal> x2037 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x2036)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2037.valid){
continue;
}
CheckValue<IkReal> x2038=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2036))+(((-1.0)*gconst85*r00)))),-1);
if(!x2038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2037.value)+(((1.5707963267949)*(x2038.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2039=IKsin(j4);
IkReal x2040=IKcos(j4);
IkReal x2041=(gconst85*r21);
IkReal x2042=(gconst86*r00);
IkReal x2043=(gconst86*r10);
IkReal x2044=((1.0)*cj2);
IkReal x2045=(gconst85*r11);
IkReal x2046=(gconst85*r01);
IkReal x2047=((1.0)*sj0);
IkReal x2048=(gconst86*r20);
IkReal x2049=(cj1*sj2);
IkReal x2050=((1.0)*x2040);
IkReal x2051=((1.0)*x2039);
evalcond[0]=((((-1.0)*r22*x2050))+((x2039*x2041))+(((-1.0)*x2048*x2051)));
evalcond[1]=(cj0+(((-1.0)*r12*x2050))+((x2039*x2045))+(((-1.0)*x2043*x2051)));
evalcond[2]=((((-1.0)*x2047))+((x2039*x2046))+(((-1.0)*r02*x2050))+(((-1.0)*x2042*x2051)));
evalcond[3]=(((x2040*x2048))+(((-1.0)*r22*x2051))+((sj1*sj2))+(((-1.0)*x2041*x2050))+(((-1.0)*cj1*x2044)));
evalcond[4]=(((x2040*x2042))+(((-1.0)*cj0*x2049))+(((-1.0)*r02*x2051))+(((-1.0)*x2046*x2050))+(((-1.0)*cj0*sj1*x2044)));
evalcond[5]=((((-1.0)*sj0*sj1*x2044))+((x2040*x2043))+(((-1.0)*x2045*x2050))+(((-1.0)*r12*x2051))+(((-1.0)*x2047*x2049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2052=((-1.0)*r11);
IkReal x2054 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2054)==0){
continue;
}
IkReal x2053=pow(x2054,-0.5);
CheckValue<IkReal> x2055 = IKatan2WithCheck(IkReal(x2052),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2055.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2055.value))));
IkReal gconst88=(x2052*x2053);
IkReal gconst89=((1.0)*r10*x2053);
CheckValue<IkReal> x2056 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2056.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2056.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2057=((-1.0)*r11);
CheckValue<IkReal> x2060 = IKatan2WithCheck(IkReal(x2057),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2060.valid){
continue;
}
IkReal x2058=((1.0)*(x2060.value));
IkReal x2059=x2053;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2058)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2058)));
IkReal gconst88=(x2057*x2059);
IkReal gconst89=((1.0)*r10*x2059);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2061=((-1.0)*r11);
CheckValue<IkReal> x2064 = IKatan2WithCheck(IkReal(x2061),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2064.valid){
continue;
}
IkReal x2062=((1.0)*(x2064.value));
IkReal x2063=x2053;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2062)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2062)));
IkReal gconst88=(x2061*x2063);
IkReal gconst89=((1.0)*r10*x2063);
IkReal x2065=r12*r12;
IkReal x2066=((1.0)*sj0);
IkReal x2067=(cj0*r02);
IkReal x2068=x2053;
j4eval[0]=((IKabs((((sj0*x2065*x2068))+((r12*x2067*x2068))+(((-1.0)*x2066*x2068)))))+(IKabs(((((-1.0)*r12*x2066))+(((-1.0)*x2067))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2069=((-1.0)*r11);
CheckValue<IkReal> x2072 = IKatan2WithCheck(IkReal(x2069),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2072.valid){
continue;
}
IkReal x2070=((1.0)*(x2072.value));
IkReal x2071=x2053;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2070)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2070)));
IkReal gconst88=(x2069*x2071);
IkReal gconst89=((1.0)*r10*x2071);
IkReal x2073=r12*r12;
IkReal x2074=(cj1*cj2*r22);
IkReal x2075=(r22*sj1*sj2);
CheckValue<IkReal> x2079=IKPowWithIntegerCheck(((-1.0)+x2073),-1);
if(!x2079.valid){
continue;
}
IkReal x2076=x2079.value;
if((((1.0)+(((-1.0)*x2073)))) < -0.00001)
continue;
IkReal x2077=IKsqrt(((1.0)+(((-1.0)*x2073))));
IkReal x2078=(r12*x2076*x2077);
j4eval[0]=((IKabs(((((-1.0)*x2075*x2078))+((x2074*x2078)))))+(IKabs((x2075+(((-1.0)*x2074))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2080=(cj1*cj2);
IkReal x2081=(gconst89*r20);
IkReal x2082=(gconst88*r21);
IkReal x2083=(sj1*sj2);
CheckValue<IkReal> x2084 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2080))+((r22*x2083)))),IkReal(((((-1.0)*x2081*x2083))+((x2082*x2083))+((x2080*x2081))+(((-1.0)*x2080*x2082)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2084.valid){
continue;
}
CheckValue<IkReal> x2085=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2082*x2082)+(x2081*x2081)+(((-2.0)*x2081*x2082)))),-1);
if(!x2085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2084.value)+(((1.5707963267949)*(x2085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2086=IKsin(j4);
IkReal x2087=IKcos(j4);
IkReal x2088=((1.0)*sj0);
IkReal x2089=((1.0)*cj2);
IkReal x2090=(gconst89*r20);
IkReal x2091=(gconst89*r10);
IkReal x2092=(gconst89*r00);
IkReal x2093=(cj1*sj2);
IkReal x2094=((1.0)*x2087);
IkReal x2095=((1.0)*x2086);
IkReal x2096=(gconst88*x2086);
evalcond[0]=((((-1.0)*x2090*x2095))+((r21*x2096))+(((-1.0)*r22*x2094)));
evalcond[1]=(cj0+(((-1.0)*x2091*x2095))+(((-1.0)*r12*x2094))+((r11*x2096)));
evalcond[2]=((((-1.0)*x2088))+((r01*x2096))+(((-1.0)*x2092*x2095))+(((-1.0)*r02*x2094)));
evalcond[3]=((((-1.0)*cj1*x2089))+(((-1.0)*gconst88*r21*x2094))+((x2087*x2090))+((sj1*sj2))+(((-1.0)*r22*x2095)));
evalcond[4]=((((-1.0)*cj0*sj1*x2089))+(((-1.0)*gconst88*r01*x2094))+((x2087*x2092))+(((-1.0)*r02*x2095))+(((-1.0)*cj0*x2093)));
evalcond[5]=((((-1.0)*gconst88*r11*x2094))+((x2087*x2091))+(((-1.0)*cj2*sj1*x2088))+(((-1.0)*x2088*x2093))+(((-1.0)*r12*x2095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2097=((1.0)*sj0);
IkReal x2098=((1.0)*cj0);
CheckValue<IkReal> x2099 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2097))+(((-1.0)*r02*x2098)))),IkReal(((((-1.0)*gconst88*r11*x2097))+(((-1.0)*gconst88*r01*x2098))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2099.valid){
continue;
}
CheckValue<IkReal> x2100=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2099.value)+(((1.5707963267949)*(x2100.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2101=IKsin(j4);
IkReal x2102=IKcos(j4);
IkReal x2103=((1.0)*sj0);
IkReal x2104=((1.0)*cj2);
IkReal x2105=(gconst89*r20);
IkReal x2106=(gconst89*r10);
IkReal x2107=(gconst89*r00);
IkReal x2108=(cj1*sj2);
IkReal x2109=((1.0)*x2102);
IkReal x2110=((1.0)*x2101);
IkReal x2111=(gconst88*x2101);
evalcond[0]=((((-1.0)*r22*x2109))+((r21*x2111))+(((-1.0)*x2105*x2110)));
evalcond[1]=((((-1.0)*r12*x2109))+cj0+(((-1.0)*x2106*x2110))+((r11*x2111)));
evalcond[2]=((((-1.0)*x2107*x2110))+(((-1.0)*r02*x2109))+((r01*x2111))+(((-1.0)*x2103)));
evalcond[3]=((((-1.0)*cj1*x2104))+((sj1*sj2))+((x2102*x2105))+(((-1.0)*gconst88*r21*x2109))+(((-1.0)*r22*x2110)));
evalcond[4]=((((-1.0)*gconst88*r01*x2109))+(((-1.0)*cj0*x2108))+((x2102*x2107))+(((-1.0)*r02*x2110))+(((-1.0)*cj0*sj1*x2104)));
evalcond[5]=((((-1.0)*x2103*x2108))+(((-1.0)*gconst88*r11*x2109))+((x2102*x2106))+(((-1.0)*r12*x2110))+(((-1.0)*cj2*sj1*x2103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2112=((1.0)*gconst89);
CheckValue<IkReal> x2113=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2112))+(((-1.0)*gconst88*r00)))),-1);
if(!x2113.valid){
continue;
}
CheckValue<IkReal> x2114 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2112))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2113.value)))+(x2114.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2115=IKsin(j4);
IkReal x2116=IKcos(j4);
IkReal x2117=((1.0)*sj0);
IkReal x2118=((1.0)*cj2);
IkReal x2119=(gconst89*r20);
IkReal x2120=(gconst89*r10);
IkReal x2121=(gconst89*r00);
IkReal x2122=(cj1*sj2);
IkReal x2123=((1.0)*x2116);
IkReal x2124=((1.0)*x2115);
IkReal x2125=(gconst88*x2115);
evalcond[0]=((((-1.0)*x2119*x2124))+(((-1.0)*r22*x2123))+((r21*x2125)));
evalcond[1]=(cj0+(((-1.0)*x2120*x2124))+((r11*x2125))+(((-1.0)*r12*x2123)));
evalcond[2]=((((-1.0)*r02*x2123))+(((-1.0)*x2121*x2124))+(((-1.0)*x2117))+((r01*x2125)));
evalcond[3]=(((x2116*x2119))+(((-1.0)*r22*x2124))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2123))+(((-1.0)*cj1*x2118)));
evalcond[4]=((((-1.0)*r02*x2124))+(((-1.0)*cj0*x2122))+(((-1.0)*cj0*sj1*x2118))+(((-1.0)*gconst88*r01*x2123))+((x2116*x2121)));
evalcond[5]=((((-1.0)*x2117*x2122))+(((-1.0)*cj2*sj1*x2117))+(((-1.0)*r12*x2124))+(((-1.0)*gconst88*r11*x2123))+((x2116*x2120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2126=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2126;
j4eval[1]=IKsign(x2126);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2127=((1.0)*cj5);
IkReal x2128=((((-1.0)*r01*x2127))+(((-1.0)*r00*sj5)));
j4eval[0]=x2128;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2127))))));
j4eval[2]=IKsign(x2128);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2129=cj5*cj5;
IkReal x2130=r11*r11;
IkReal x2131=(r11*sj5);
IkReal x2132=(cj5*r10);
IkReal x2133=((r12*r12)+x2130+(((-1.0)*x2129*x2130))+(((-2.0)*x2131*x2132))+((x2129*(r10*r10))));
j4eval[0]=x2133;
j4eval[1]=IKsign(x2133);
j4eval[2]=((IKabs(r12))+(IKabs((x2132+(((-1.0)*x2131))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2134=cj5*cj5;
IkReal x2135=r11*r11;
IkReal x2136=(cj5*r10);
IkReal x2137=(r11*sj5);
CheckValue<IkReal> x2138=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x2134*(r10*r10)))+x2135+(((-2.0)*x2136*x2137))+(((-1.0)*x2134*x2135)))),-1);
if(!x2138.valid){
continue;
}
CheckValue<IkReal> x2139 = IKatan2WithCheck(IkReal((x2136+(((-1.0)*x2137)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2138.value)))+(x2139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2140=IKsin(j4);
IkReal x2141=IKcos(j4);
IkReal x2142=(cj5*r10);
IkReal x2143=(r01*sj5);
IkReal x2144=((1.0)*cj2);
IkReal x2145=(cj5*r00);
IkReal x2146=(cj5*r20);
IkReal x2147=((1.0)*x2141);
IkReal x2148=((1.0)*x2140);
IkReal x2149=(sj5*x2140);
evalcond[0]=((((-1.0)*r22*x2147))+((r21*x2149))+(((-1.0)*x2146*x2148)));
evalcond[1]=((((-1.0)*r02*x2147))+((x2140*x2143))+(((-1.0)*x2145*x2148)));
evalcond[2]=((((-1.0)*r11*sj5*x2147))+(((-1.0)*r12*x2148))+((x2141*x2142)));
evalcond[3]=((1.0)+((r11*x2149))+(((-1.0)*x2142*x2148))+(((-1.0)*r12*x2147)));
evalcond[4]=(((sj1*sj2))+((x2141*x2146))+(((-1.0)*r22*x2148))+(((-1.0)*cj1*x2144))+(((-1.0)*r21*sj5*x2147)));
evalcond[5]=((((-1.0)*x2143*x2147))+(((-1.0)*r02*x2148))+(((-1.0)*sj1*x2144))+(((-1.0)*cj1*sj2))+((x2141*x2145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2150=((1.0)*cj5);
CheckValue<IkReal> x2151 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2151.valid){
continue;
}
CheckValue<IkReal> x2152=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2150))+(((-1.0)*r00*sj5)))),-1);
if(!x2152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2151.value)+(((1.5707963267949)*(x2152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2153=IKsin(j4);
IkReal x2154=IKcos(j4);
IkReal x2155=(cj5*r10);
IkReal x2156=(r01*sj5);
IkReal x2157=((1.0)*cj2);
IkReal x2158=(cj5*r00);
IkReal x2159=(cj5*r20);
IkReal x2160=((1.0)*x2154);
IkReal x2161=((1.0)*x2153);
IkReal x2162=(sj5*x2153);
evalcond[0]=(((r21*x2162))+(((-1.0)*x2159*x2161))+(((-1.0)*r22*x2160)));
evalcond[1]=((((-1.0)*x2158*x2161))+((x2153*x2156))+(((-1.0)*r02*x2160)));
evalcond[2]=((((-1.0)*r11*sj5*x2160))+((x2154*x2155))+(((-1.0)*r12*x2161)));
evalcond[3]=((1.0)+(((-1.0)*x2155*x2161))+(((-1.0)*r12*x2160))+((r11*x2162)));
evalcond[4]=((((-1.0)*r21*sj5*x2160))+((x2154*x2159))+((sj1*sj2))+(((-1.0)*cj1*x2157))+(((-1.0)*r22*x2161)));
evalcond[5]=(((x2154*x2158))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2157))+(((-1.0)*x2156*x2160))+(((-1.0)*r02*x2161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2163=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2163.valid){
continue;
}
CheckValue<IkReal> x2164 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2163.value)))+(x2164.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2165=IKsin(j4);
IkReal x2166=IKcos(j4);
IkReal x2167=(cj5*r10);
IkReal x2168=(r01*sj5);
IkReal x2169=((1.0)*cj2);
IkReal x2170=(cj5*r00);
IkReal x2171=(cj5*r20);
IkReal x2172=((1.0)*x2166);
IkReal x2173=((1.0)*x2165);
IkReal x2174=(sj5*x2165);
evalcond[0]=((((-1.0)*x2171*x2173))+((r21*x2174))+(((-1.0)*r22*x2172)));
evalcond[1]=((((-1.0)*x2170*x2173))+((x2165*x2168))+(((-1.0)*r02*x2172)));
evalcond[2]=(((x2166*x2167))+(((-1.0)*r11*sj5*x2172))+(((-1.0)*r12*x2173)));
evalcond[3]=((1.0)+((r11*x2174))+(((-1.0)*r12*x2172))+(((-1.0)*x2167*x2173)));
evalcond[4]=((((-1.0)*r21*sj5*x2172))+((sj1*sj2))+((x2166*x2171))+(((-1.0)*cj1*x2169))+(((-1.0)*r22*x2173)));
evalcond[5]=((((-1.0)*x2168*x2172))+(((-1.0)*sj1*x2169))+(((-1.0)*cj1*sj2))+((x2166*x2170))+(((-1.0)*r02*x2173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2175=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2175;
j4eval[1]=IKsign(x2175);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2176=((1.0)*cj5);
IkReal x2177=((((-1.0)*r21*x2176))+(((-1.0)*r20*sj5)));
j4eval[0]=x2177;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2176))))));
j4eval[2]=IKsign(x2177);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2178=cj5*cj5;
IkReal x2179=r11*r11;
IkReal x2180=(cj5*r10);
IkReal x2181=(r11*sj5);
IkReal x2182=((((-1.0)*x2178*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x2179))+((x2178*x2179))+(((2.0)*x2180*x2181)));
j4eval[0]=x2182;
j4eval[1]=((IKabs(r12))+(IKabs((x2180+(((-1.0)*x2181))))));
j4eval[2]=IKsign(x2182);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2183=cj5*cj5;
IkReal x2184=r11*r11;
IkReal x2185=(cj5*r10);
IkReal x2186=(r11*sj5);
CheckValue<IkReal> x2187=IKPowWithIntegerCheck(IKsign(((((2.0)*x2185*x2186))+(((-1.0)*x2184))+((x2183*x2184))+(((-1.0)*(r12*r12)))+(((-1.0)*x2183*(r10*r10))))),-1);
if(!x2187.valid){
continue;
}
CheckValue<IkReal> x2188 = IKatan2WithCheck(IkReal((x2185+(((-1.0)*x2186)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2187.value)))+(x2188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2189=IKsin(j4);
IkReal x2190=IKcos(j4);
IkReal x2191=(cj5*r10);
IkReal x2192=(r01*sj5);
IkReal x2193=(cj5*r00);
IkReal x2194=(cj5*r20);
IkReal x2195=((1.0)*x2190);
IkReal x2196=((1.0)*x2189);
IkReal x2197=(sj5*x2189);
evalcond[0]=((((-1.0)*x2194*x2196))+((r21*x2197))+(((-1.0)*r22*x2195)));
evalcond[1]=((((-1.0)*x2193*x2196))+((x2189*x2192))+(((-1.0)*r02*x2195)));
evalcond[2]=(((x2190*x2191))+(((-1.0)*r12*x2196))+(((-1.0)*r11*sj5*x2195)));
evalcond[3]=((-1.0)+(((-1.0)*x2191*x2196))+((r11*x2197))+(((-1.0)*r12*x2195)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2192*x2195))+((cj1*sj2))+((x2190*x2193))+(((-1.0)*r02*x2196)));
evalcond[5]=((((-1.0)*r21*sj5*x2195))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2190*x2194))+(((-1.0)*r22*x2196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2198=((1.0)*cj5);
CheckValue<IkReal> x2199 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2199.valid){
continue;
}
CheckValue<IkReal> x2200=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2198))+(((-1.0)*r20*sj5)))),-1);
if(!x2200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2199.value)+(((1.5707963267949)*(x2200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2201=IKsin(j4);
IkReal x2202=IKcos(j4);
IkReal x2203=(cj5*r10);
IkReal x2204=(r01*sj5);
IkReal x2205=(cj5*r00);
IkReal x2206=(cj5*r20);
IkReal x2207=((1.0)*x2202);
IkReal x2208=((1.0)*x2201);
IkReal x2209=(sj5*x2201);
evalcond[0]=((((-1.0)*r22*x2207))+(((-1.0)*x2206*x2208))+((r21*x2209)));
evalcond[1]=((((-1.0)*x2205*x2208))+((x2201*x2204))+(((-1.0)*r02*x2207)));
evalcond[2]=(((x2202*x2203))+(((-1.0)*r12*x2208))+(((-1.0)*r11*sj5*x2207)));
evalcond[3]=((-1.0)+(((-1.0)*x2203*x2208))+(((-1.0)*r12*x2207))+((r11*x2209)));
evalcond[4]=(((x2202*x2205))+((cj2*sj1))+(((-1.0)*x2204*x2207))+((cj1*sj2))+(((-1.0)*r02*x2208)));
evalcond[5]=(((x2202*x2206))+(((-1.0)*r22*x2208))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2210 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2210.valid){
continue;
}
CheckValue<IkReal> x2211=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2210.value)+(((1.5707963267949)*(x2211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2212=IKsin(j4);
IkReal x2213=IKcos(j4);
IkReal x2214=(cj5*r10);
IkReal x2215=(r01*sj5);
IkReal x2216=(cj5*r00);
IkReal x2217=(cj5*r20);
IkReal x2218=((1.0)*x2213);
IkReal x2219=((1.0)*x2212);
IkReal x2220=(sj5*x2212);
evalcond[0]=((((-1.0)*r22*x2218))+((r21*x2220))+(((-1.0)*x2217*x2219)));
evalcond[1]=((((-1.0)*x2216*x2219))+((x2212*x2215))+(((-1.0)*r02*x2218)));
evalcond[2]=((((-1.0)*r12*x2219))+(((-1.0)*r11*sj5*x2218))+((x2213*x2214)));
evalcond[3]=((-1.0)+(((-1.0)*x2214*x2219))+(((-1.0)*r12*x2218))+((r11*x2220)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2215*x2218))+((cj1*sj2))+(((-1.0)*r02*x2219))+((x2213*x2216)));
evalcond[5]=((((-1.0)*r22*x2219))+(((-1.0)*r21*sj5*x2218))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2213*x2217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2221=((-1.0)*r00);
IkReal x2223 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2223)==0){
continue;
}
IkReal x2222=pow(x2223,-0.5);
CheckValue<IkReal> x2224 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2221),IKFAST_ATAN2_MAGTHRESH);
if(!x2224.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2224.value));
IkReal gconst91=(r01*x2222);
IkReal gconst92=(x2221*x2222);
CheckValue<IkReal> x2225 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2225.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2225.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2226=((-1.0)*r00);
IkReal x2227=x2222;
CheckValue<IkReal> x2229 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2226),IKFAST_ATAN2_MAGTHRESH);
if(!x2229.valid){
continue;
}
IkReal x2228=((-1.0)*(x2229.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2228;
IkReal gconst90=x2228;
IkReal gconst91=(r01*x2227);
IkReal gconst92=(x2226*x2227);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2230=((1.0)*sj0);
IkReal x2231=((1.0)*cj0);
CheckValue<IkReal> x2232=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2232.valid){
continue;
}
CheckValue<IkReal> x2233 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2231))+(((-1.0)*r12*x2230)))),IkReal((((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2230))+(((-1.0)*gconst91*r01*x2231)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2232.value)))+(x2233.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2234=IKsin(j4);
IkReal x2235=IKcos(j4);
IkReal x2236=((1.0)*cj2);
IkReal x2237=(gconst92*r00);
IkReal x2238=(gconst92*r20);
IkReal x2239=((1.0)*sj0);
IkReal x2240=(gconst92*r10);
IkReal x2241=(cj1*sj2);
IkReal x2242=((1.0)*x2235);
IkReal x2243=(gconst91*x2234);
IkReal x2244=((1.0)*x2234);
evalcond[0]=((((-1.0)*r22*x2242))+((r21*x2243))+(((-1.0)*x2238*x2244)));
evalcond[1]=(cj0+((r11*x2243))+(((-1.0)*x2240*x2244))+(((-1.0)*r12*x2242)));
evalcond[2]=((((-1.0)*x2237*x2244))+(((-1.0)*r02*x2242))+((r01*x2243))+(((-1.0)*x2239)));
evalcond[3]=(((x2235*x2238))+(((-1.0)*cj1*x2236))+(((-1.0)*r22*x2244))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2242)));
evalcond[4]=(((x2235*x2237))+(((-1.0)*r02*x2244))+(((-1.0)*cj0*x2241))+(((-1.0)*cj0*sj1*x2236))+(((-1.0)*gconst91*r01*x2242)));
evalcond[5]=((((-1.0)*sj0*sj1*x2236))+((x2235*x2240))+(((-1.0)*gconst91*r11*x2242))+(((-1.0)*r12*x2244))+(((-1.0)*x2239*x2241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2245=((1.0)*gconst92);
CheckValue<IkReal> x2246=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2245)))),-1);
if(!x2246.valid){
continue;
}
CheckValue<IkReal> x2247 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2245))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2246.value)))+(x2247.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2248=IKsin(j4);
IkReal x2249=IKcos(j4);
IkReal x2250=((1.0)*cj2);
IkReal x2251=(gconst92*r00);
IkReal x2252=(gconst92*r20);
IkReal x2253=((1.0)*sj0);
IkReal x2254=(gconst92*r10);
IkReal x2255=(cj1*sj2);
IkReal x2256=((1.0)*x2249);
IkReal x2257=(gconst91*x2248);
IkReal x2258=((1.0)*x2248);
evalcond[0]=((((-1.0)*r22*x2256))+(((-1.0)*x2252*x2258))+((r21*x2257)));
evalcond[1]=(cj0+(((-1.0)*r12*x2256))+((r11*x2257))+(((-1.0)*x2254*x2258)));
evalcond[2]=((((-1.0)*r02*x2256))+(((-1.0)*x2253))+((r01*x2257))+(((-1.0)*x2251*x2258)));
evalcond[3]=((((-1.0)*r22*x2258))+((x2249*x2252))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2256))+(((-1.0)*cj1*x2250)));
evalcond[4]=((((-1.0)*r02*x2258))+((x2249*x2251))+(((-1.0)*cj0*x2255))+(((-1.0)*gconst91*r01*x2256))+(((-1.0)*cj0*sj1*x2250)));
evalcond[5]=((((-1.0)*sj0*sj1*x2250))+((x2249*x2254))+(((-1.0)*x2253*x2255))+(((-1.0)*r12*x2258))+(((-1.0)*gconst91*r11*x2256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2259=((-1.0)*r01);
IkReal x2261 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2261)==0){
continue;
}
IkReal x2260=pow(x2261,-0.5);
CheckValue<IkReal> x2262 = IKatan2WithCheck(IkReal(x2259),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2262.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2262.value))));
IkReal gconst94=(x2259*x2260);
IkReal gconst95=((1.0)*r00*x2260);
CheckValue<IkReal> x2263 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2263.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2263.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2264=((-1.0)*r01);
CheckValue<IkReal> x2267 = IKatan2WithCheck(IkReal(x2264),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2267.valid){
continue;
}
IkReal x2265=((1.0)*(x2267.value));
IkReal x2266=x2260;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2265)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2265)));
IkReal gconst94=(x2264*x2266);
IkReal gconst95=((1.0)*r00*x2266);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2268=((-1.0)*r01);
CheckValue<IkReal> x2271 = IKatan2WithCheck(IkReal(x2268),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2271.valid){
continue;
}
IkReal x2269=((1.0)*(x2271.value));
IkReal x2270=x2260;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2269)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2269)));
IkReal gconst94=(x2268*x2270);
IkReal gconst95=((1.0)*r00*x2270);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2272=((-1.0)*r01);
CheckValue<IkReal> x2275 = IKatan2WithCheck(IkReal(x2272),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2275.valid){
continue;
}
IkReal x2273=((1.0)*(x2275.value));
IkReal x2274=x2260;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2273)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2273)));
IkReal gconst94=(x2272*x2274);
IkReal gconst95=((1.0)*r00*x2274);
IkReal x2276=r02*r02;
IkReal x2277=(r12*sj0);
IkReal x2278=((1.0)*cj0);
IkReal x2279=x2260;
j4eval[0]=((IKabs(((((-1.0)*x2278*x2279))+((cj0*x2276*x2279))+((r02*x2277*x2279)))))+(IKabs(((((-1.0)*r02*x2278))+(((-1.0)*x2277))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2280=((1.0)*sj0);
IkReal x2281=((1.0)*cj0);
CheckValue<IkReal> x2282=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2282.valid){
continue;
}
CheckValue<IkReal> x2283 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2281))+(((-1.0)*r12*x2280)))),IkReal((((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2281))+(((-1.0)*gconst94*r11*x2280))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2282.value)))+(x2283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2284=IKsin(j4);
IkReal x2285=IKcos(j4);
IkReal x2286=(gconst94*r11);
IkReal x2287=((1.0)*cj2);
IkReal x2288=(gconst94*r21);
IkReal x2289=((1.0)*sj0);
IkReal x2290=(gconst94*r01);
IkReal x2291=(cj1*sj2);
IkReal x2292=((1.0)*x2285);
IkReal x2293=(gconst95*x2285);
IkReal x2294=((1.0)*x2284);
IkReal x2295=(gconst95*x2294);
evalcond[0]=((((-1.0)*r22*x2292))+(((-1.0)*r20*x2295))+((x2284*x2288)));
evalcond[1]=(cj0+(((-1.0)*r12*x2292))+(((-1.0)*r10*x2295))+((x2284*x2286)));
evalcond[2]=((((-1.0)*x2289))+(((-1.0)*r00*x2295))+(((-1.0)*r02*x2292))+((x2284*x2290)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2288*x2292))+(((-1.0)*cj1*x2287))+((r20*x2293))+(((-1.0)*r22*x2294)));
evalcond[4]=((((-1.0)*r02*x2294))+(((-1.0)*cj0*sj1*x2287))+(((-1.0)*cj0*x2291))+((r00*x2293))+(((-1.0)*x2290*x2292)));
evalcond[5]=((((-1.0)*x2289*x2291))+((r10*x2293))+(((-1.0)*x2286*x2292))+(((-1.0)*r12*x2294))+(((-1.0)*sj0*sj1*x2287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2296=((1.0)*gconst95);
CheckValue<IkReal> x2297=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2296)))),-1);
if(!x2297.valid){
continue;
}
CheckValue<IkReal> x2298 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2296)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2297.value)))+(x2298.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2299=IKsin(j4);
IkReal x2300=IKcos(j4);
IkReal x2301=(gconst94*r11);
IkReal x2302=((1.0)*cj2);
IkReal x2303=(gconst94*r21);
IkReal x2304=((1.0)*sj0);
IkReal x2305=(gconst94*r01);
IkReal x2306=(cj1*sj2);
IkReal x2307=((1.0)*x2300);
IkReal x2308=(gconst95*x2300);
IkReal x2309=((1.0)*x2299);
IkReal x2310=(gconst95*x2309);
evalcond[0]=((((-1.0)*r20*x2310))+(((-1.0)*r22*x2307))+((x2299*x2303)));
evalcond[1]=(cj0+(((-1.0)*r10*x2310))+((x2299*x2301))+(((-1.0)*r12*x2307)));
evalcond[2]=((((-1.0)*x2304))+(((-1.0)*r00*x2310))+((x2299*x2305))+(((-1.0)*r02*x2307)));
evalcond[3]=((((-1.0)*r22*x2309))+(((-1.0)*x2303*x2307))+((r20*x2308))+((sj1*sj2))+(((-1.0)*cj1*x2302)));
evalcond[4]=((((-1.0)*cj0*x2306))+(((-1.0)*cj0*sj1*x2302))+((r00*x2308))+(((-1.0)*x2305*x2307))+(((-1.0)*r02*x2309)));
evalcond[5]=((((-1.0)*x2301*x2307))+(((-1.0)*sj0*sj1*x2302))+((r10*x2308))+(((-1.0)*x2304*x2306))+(((-1.0)*r12*x2309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2311=((1.0)*gconst95);
CheckValue<IkReal> x2312 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2311))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2312.valid){
continue;
}
CheckValue<IkReal> x2313=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2311)))),-1);
if(!x2313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2312.value)+(((1.5707963267949)*(x2313.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2314=IKsin(j4);
IkReal x2315=IKcos(j4);
IkReal x2316=(gconst94*r11);
IkReal x2317=((1.0)*cj2);
IkReal x2318=(gconst94*r21);
IkReal x2319=((1.0)*sj0);
IkReal x2320=(gconst94*r01);
IkReal x2321=(cj1*sj2);
IkReal x2322=((1.0)*x2315);
IkReal x2323=(gconst95*x2315);
IkReal x2324=((1.0)*x2314);
IkReal x2325=(gconst95*x2324);
evalcond[0]=((((-1.0)*r22*x2322))+((x2314*x2318))+(((-1.0)*r20*x2325)));
evalcond[1]=(cj0+(((-1.0)*r10*x2325))+(((-1.0)*r12*x2322))+((x2314*x2316)));
evalcond[2]=(((x2314*x2320))+(((-1.0)*r00*x2325))+(((-1.0)*r02*x2322))+(((-1.0)*x2319)));
evalcond[3]=((((-1.0)*x2318*x2322))+(((-1.0)*r22*x2324))+((sj1*sj2))+(((-1.0)*cj1*x2317))+((r20*x2323)));
evalcond[4]=((((-1.0)*cj0*sj1*x2317))+(((-1.0)*cj0*x2321))+(((-1.0)*x2320*x2322))+((r00*x2323))+(((-1.0)*r02*x2324)));
evalcond[5]=(((r10*x2323))+(((-1.0)*x2319*x2321))+(((-1.0)*r12*x2324))+(((-1.0)*sj0*sj1*x2317))+(((-1.0)*x2316*x2322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2326=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2326;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2326);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2327=((1.0)*cj5);
IkReal x2328=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2327)));
j4eval[0]=x2328;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2327))))));
j4eval[2]=IKsign(x2328);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2329=cj5*cj5;
IkReal x2330=r01*r01;
IkReal x2331=(r01*sj5);
IkReal x2332=(cj5*r00);
IkReal x2333=((((-1.0)*x2329*(r00*r00)))+(((-1.0)*(r02*r02)))+((x2329*x2330))+(((2.0)*x2331*x2332))+(((-1.0)*x2330)));
j4eval[0]=x2333;
j4eval[1]=IKsign(x2333);
j4eval[2]=((IKabs(r02))+(IKabs((x2332+(((-1.0)*x2331))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2334=cj5*cj5;
IkReal x2335=r01*r01;
IkReal x2336=(r01*sj5);
IkReal x2337=(cj5*r00);
CheckValue<IkReal> x2338 = IKatan2WithCheck(IkReal((x2337+(((-1.0)*x2336)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2338.valid){
continue;
}
CheckValue<IkReal> x2339=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2334*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x2336*x2337))+((x2334*x2335))+(((-1.0)*x2335)))),-1);
if(!x2339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2338.value)+(((1.5707963267949)*(x2339.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2340=IKsin(j4);
IkReal x2341=IKcos(j4);
IkReal x2342=(cj5*r10);
IkReal x2343=(r01*sj5);
IkReal x2344=((1.0)*cj2);
IkReal x2345=(cj5*r00);
IkReal x2346=(cj5*r20);
IkReal x2347=((1.0)*x2341);
IkReal x2348=((1.0)*x2340);
IkReal x2349=(sj5*x2340);
evalcond[0]=((((-1.0)*x2346*x2348))+(((-1.0)*r22*x2347))+((r21*x2349)));
evalcond[1]=(((r11*x2349))+(((-1.0)*r12*x2347))+(((-1.0)*x2342*x2348)));
evalcond[2]=(((x2341*x2345))+(((-1.0)*r02*x2348))+(((-1.0)*x2343*x2347)));
evalcond[3]=((-1.0)+(((-1.0)*x2345*x2348))+((x2340*x2343))+(((-1.0)*r02*x2347)));
evalcond[4]=(((x2341*x2346))+((sj1*sj2))+(((-1.0)*cj1*x2344))+(((-1.0)*r22*x2348))+(((-1.0)*r21*sj5*x2347)));
evalcond[5]=(((x2341*x2342))+(((-1.0)*r11*sj5*x2347))+(((-1.0)*sj1*x2344))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2350=((1.0)*cj5);
CheckValue<IkReal> x2351 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2350))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2351.valid){
continue;
}
CheckValue<IkReal> x2352=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2350)))),-1);
if(!x2352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2351.value)+(((1.5707963267949)*(x2352.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2353=IKsin(j4);
IkReal x2354=IKcos(j4);
IkReal x2355=(cj5*r10);
IkReal x2356=(r01*sj5);
IkReal x2357=((1.0)*cj2);
IkReal x2358=(cj5*r00);
IkReal x2359=(cj5*r20);
IkReal x2360=((1.0)*x2354);
IkReal x2361=((1.0)*x2353);
IkReal x2362=(sj5*x2353);
evalcond[0]=((((-1.0)*x2359*x2361))+(((-1.0)*r22*x2360))+((r21*x2362)));
evalcond[1]=(((r11*x2362))+(((-1.0)*x2355*x2361))+(((-1.0)*r12*x2360)));
evalcond[2]=(((x2354*x2358))+(((-1.0)*x2356*x2360))+(((-1.0)*r02*x2361)));
evalcond[3]=((-1.0)+((x2353*x2356))+(((-1.0)*x2358*x2361))+(((-1.0)*r02*x2360)));
evalcond[4]=((((-1.0)*r21*sj5*x2360))+((x2354*x2359))+((sj1*sj2))+(((-1.0)*cj1*x2357))+(((-1.0)*r22*x2361)));
evalcond[5]=((((-1.0)*r11*sj5*x2360))+((x2354*x2355))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2357))+(((-1.0)*r12*x2361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2363=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2363.valid){
continue;
}
CheckValue<IkReal> x2364 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2363.value)))+(x2364.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2365=IKsin(j4);
IkReal x2366=IKcos(j4);
IkReal x2367=(cj5*r10);
IkReal x2368=(r01*sj5);
IkReal x2369=((1.0)*cj2);
IkReal x2370=(cj5*r00);
IkReal x2371=(cj5*r20);
IkReal x2372=((1.0)*x2366);
IkReal x2373=((1.0)*x2365);
IkReal x2374=(sj5*x2365);
evalcond[0]=((((-1.0)*x2371*x2373))+(((-1.0)*r22*x2372))+((r21*x2374)));
evalcond[1]=((((-1.0)*x2367*x2373))+(((-1.0)*r12*x2372))+((r11*x2374)));
evalcond[2]=((((-1.0)*r02*x2373))+(((-1.0)*x2368*x2372))+((x2366*x2370)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2372))+((x2365*x2368))+(((-1.0)*x2370*x2373)));
evalcond[4]=((((-1.0)*r21*sj5*x2372))+((x2366*x2371))+((sj1*sj2))+(((-1.0)*r22*x2373))+(((-1.0)*cj1*x2369)));
evalcond[5]=((((-1.0)*r11*sj5*x2372))+((x2366*x2367))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2373))+(((-1.0)*sj1*x2369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2375=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2375;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2375);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2376=((1.0)*cj5);
IkReal x2377=((((-1.0)*r21*x2376))+(((-1.0)*r20*sj5)));
j4eval[0]=x2377;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2376))+((r11*sj5))))));
j4eval[2]=IKsign(x2377);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2378=cj5*cj5;
IkReal x2379=r01*r01;
IkReal x2380=(cj5*r00);
IkReal x2381=(r01*sj5);
IkReal x2382=(x2379+((x2378*(r00*r00)))+(r02*r02)+(((-1.0)*x2378*x2379))+(((-2.0)*x2380*x2381)));
j4eval[0]=x2382;
j4eval[1]=((IKabs(r02))+(IKabs((x2380+(((-1.0)*x2381))))));
j4eval[2]=IKsign(x2382);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2383=cj5*cj5;
IkReal x2384=r01*r01;
IkReal x2385=(r01*sj5);
IkReal x2386=(cj5*r00);
CheckValue<IkReal> x2387=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2383*x2384))+x2384+(((-2.0)*x2385*x2386))+((x2383*(r00*r00)))+(r02*r02))),-1);
if(!x2387.valid){
continue;
}
CheckValue<IkReal> x2388 = IKatan2WithCheck(IkReal((x2386+(((-1.0)*x2385)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2387.value)))+(x2388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2389=IKsin(j4);
IkReal x2390=IKcos(j4);
IkReal x2391=(cj5*r10);
IkReal x2392=(r01*sj5);
IkReal x2393=(cj5*r00);
IkReal x2394=(cj5*r20);
IkReal x2395=((1.0)*x2390);
IkReal x2396=((1.0)*x2389);
IkReal x2397=(sj5*x2389);
evalcond[0]=((((-1.0)*r22*x2395))+(((-1.0)*x2394*x2396))+((r21*x2397)));
evalcond[1]=((((-1.0)*x2391*x2396))+((r11*x2397))+(((-1.0)*r12*x2395)));
evalcond[2]=((((-1.0)*r02*x2396))+((x2390*x2393))+(((-1.0)*x2392*x2395)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2395))+((x2389*x2392))+(((-1.0)*x2393*x2396)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2390*x2391))+(((-1.0)*r11*sj5*x2395))+(((-1.0)*r12*x2396)));
evalcond[5]=((((-1.0)*r21*sj5*x2395))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2390*x2394))+(((-1.0)*r22*x2396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2398=((1.0)*cj5);
CheckValue<IkReal> x2399=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2398))+(((-1.0)*r20*sj5)))),-1);
if(!x2399.valid){
continue;
}
CheckValue<IkReal> x2400 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2398))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2399.value)))+(x2400.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2401=IKsin(j4);
IkReal x2402=IKcos(j4);
IkReal x2403=(cj5*r10);
IkReal x2404=(r01*sj5);
IkReal x2405=(cj5*r00);
IkReal x2406=(cj5*r20);
IkReal x2407=((1.0)*x2402);
IkReal x2408=((1.0)*x2401);
IkReal x2409=(sj5*x2401);
evalcond[0]=((((-1.0)*x2406*x2408))+((r21*x2409))+(((-1.0)*r22*x2407)));
evalcond[1]=(((r11*x2409))+(((-1.0)*x2403*x2408))+(((-1.0)*r12*x2407)));
evalcond[2]=((((-1.0)*x2404*x2407))+(((-1.0)*r02*x2408))+((x2402*x2405)));
evalcond[3]=((1.0)+(((-1.0)*x2405*x2408))+((x2401*x2404))+(((-1.0)*r02*x2407)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2402*x2403))+(((-1.0)*r11*sj5*x2407))+(((-1.0)*r12*x2408)));
evalcond[5]=((((-1.0)*r21*sj5*x2407))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2402*x2406))+(((-1.0)*r22*x2408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2410 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2410.valid){
continue;
}
CheckValue<IkReal> x2411=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2410.value)+(((1.5707963267949)*(x2411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2412=IKsin(j4);
IkReal x2413=IKcos(j4);
IkReal x2414=(cj5*r10);
IkReal x2415=(r01*sj5);
IkReal x2416=(cj5*r00);
IkReal x2417=(cj5*r20);
IkReal x2418=((1.0)*x2413);
IkReal x2419=((1.0)*x2412);
IkReal x2420=(sj5*x2412);
evalcond[0]=(((r21*x2420))+(((-1.0)*x2417*x2419))+(((-1.0)*r22*x2418)));
evalcond[1]=((((-1.0)*x2414*x2419))+(((-1.0)*r12*x2418))+((r11*x2420)));
evalcond[2]=(((x2413*x2416))+(((-1.0)*x2415*x2418))+(((-1.0)*r02*x2419)));
evalcond[3]=((1.0)+(((-1.0)*x2416*x2419))+(((-1.0)*r02*x2418))+((x2412*x2415)));
evalcond[4]=(((cj2*sj1))+((x2413*x2414))+((cj1*sj2))+(((-1.0)*r12*x2419))+(((-1.0)*r11*sj5*x2418)));
evalcond[5]=(((x2413*x2417))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2418))+(((-1.0)*r22*x2419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2421=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2421);
rxp1_1=(px*r21);
rxp1_2=(r11*x2421);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2422=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2422);
rxp1_1=(px*r21);
rxp1_2=(r11*x2422);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2423=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2423);
rxp1_1=(px*r21);
rxp1_2=(r11*x2423);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2426=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2426.valid){
continue;
}
IkReal x2424=x2426.value;
IkReal x2425=(sj0*x2424);
cj4array[0]=(((cj2*sj1*x2425))+((cj1*sj2*x2425)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2427=IKsin(j4);
IkReal x2428=IKcos(j4);
IkReal x2429=(cj5*r20);
IkReal x2430=(r21*sj5);
IkReal x2431=((1.0)*x2427);
IkReal x2432=((1.0)*x2428);
evalcond[0]=((-1.0)*r02*x2427);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2432)));
evalcond[2]=((((-1.0)*x2429*x2431))+((x2427*x2430)));
evalcond[3]=((((-1.0)*cj5*r10*x2431))+((r11*sj5*x2427)));
evalcond[4]=((((-1.0)*x2430*x2432))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2428*x2429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2434=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2434.valid){
continue;
}
IkReal x2433=x2434.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2433))+((cj1*cj2*x2433)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2435=IKsin(j4);
IkReal x2436=IKcos(j4);
IkReal x2437=(r11*sj5);
IkReal x2438=((1.0)*sj0);
IkReal x2439=((1.0)*x2436);
IkReal x2440=((1.0)*cj5*x2435);
evalcond[0]=((-1.0)*r02*x2435);
evalcond[1]=((((-1.0)*x2438))+(((-1.0)*r02*x2439)));
evalcond[2]=((((-1.0)*r20*x2440))+((r21*sj5*x2435)));
evalcond[3]=((((-1.0)*r10*x2440))+((x2435*x2437)));
evalcond[4]=((((-1.0)*cj1*sj2*x2438))+((cj5*r10*x2436))+(((-1.0)*x2437*x2439))+(((-1.0)*cj2*sj1*x2438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2441=IKPowWithIntegerCheck(r02,-1);
if(!x2441.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2441.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2442=IKsin(j4);
IkReal x2443=IKcos(j4);
IkReal x2444=((1.0)*sj0);
IkReal x2445=(cj5*x2443);
IkReal x2446=(sj5*x2442);
IkReal x2447=((1.0)*sj5*x2443);
IkReal x2448=((1.0)*cj5*x2442);
evalcond[0]=((-1.0)*r02*x2442);
evalcond[1]=((((-1.0)*r20*x2448))+((r21*x2446)));
evalcond[2]=((((-1.0)*r10*x2448))+((r11*x2446)));
evalcond[3]=((((-1.0)*r21*x2447))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2445)));
evalcond[4]=(((r10*x2445))+(((-1.0)*cj2*sj1*x2444))+(((-1.0)*r11*x2447))+(((-1.0)*cj1*sj2*x2444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2449=((1.0)*sj0);
IkReal x2450=((1.0)*cj0);
CheckValue<IkReal> x2451 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2449))+(((-1.0)*r02*x2450)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x2449))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2451.valid){
continue;
}
CheckValue<IkReal> x2452=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2451.value)+(((1.5707963267949)*(x2452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2453=IKsin(j4);
IkReal x2454=IKcos(j4);
IkReal x2455=(cj5*r10);
IkReal x2456=(r01*sj5);
IkReal x2457=((1.0)*cj2);
IkReal x2458=(cj5*r00);
IkReal x2459=((1.0)*sj0);
IkReal x2460=(cj5*r20);
IkReal x2461=(cj1*sj2);
IkReal x2462=((1.0)*x2454);
IkReal x2463=((1.0)*x2453);
IkReal x2464=(sj5*x2453);
evalcond[0]=((((-1.0)*r22*x2462))+((r21*x2464))+(((-1.0)*x2460*x2463)));
evalcond[1]=(cj0+(((-1.0)*r12*x2462))+((r11*x2464))+(((-1.0)*x2455*x2463)));
evalcond[2]=(((x2453*x2456))+(((-1.0)*r02*x2462))+(((-1.0)*x2459))+(((-1.0)*x2458*x2463)));
evalcond[3]=((((-1.0)*r22*x2463))+((sj1*sj2))+((x2454*x2460))+(((-1.0)*r21*sj5*x2462))+(((-1.0)*cj1*x2457)));
evalcond[4]=((((-1.0)*x2456*x2462))+((x2454*x2458))+(((-1.0)*cj0*x2461))+(((-1.0)*cj0*sj1*x2457))+(((-1.0)*r02*x2463)));
evalcond[5]=((((-1.0)*r11*sj5*x2462))+(((-1.0)*r12*x2463))+((x2454*x2455))+(((-1.0)*sj0*sj1*x2457))+(((-1.0)*x2459*x2461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2465=((1.0)*cj5);
CheckValue<IkReal> x2466=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2465)))),-1);
if(!x2466.valid){
continue;
}
CheckValue<IkReal> x2467 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2465))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2466.value)))+(x2467.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2468=IKsin(j4);
IkReal x2469=IKcos(j4);
IkReal x2470=(cj5*r10);
IkReal x2471=(r01*sj5);
IkReal x2472=((1.0)*cj2);
IkReal x2473=(cj5*r00);
IkReal x2474=((1.0)*sj0);
IkReal x2475=(cj5*r20);
IkReal x2476=(cj1*sj2);
IkReal x2477=((1.0)*x2469);
IkReal x2478=((1.0)*x2468);
IkReal x2479=(sj5*x2468);
evalcond[0]=(((r21*x2479))+(((-1.0)*x2475*x2478))+(((-1.0)*r22*x2477)));
evalcond[1]=((((-1.0)*r12*x2477))+cj0+(((-1.0)*x2470*x2478))+((r11*x2479)));
evalcond[2]=(((x2468*x2471))+(((-1.0)*x2473*x2478))+(((-1.0)*x2474))+(((-1.0)*r02*x2477)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r21*sj5*x2477))+(((-1.0)*r22*x2478))+(((-1.0)*cj1*x2472))+((x2469*x2475)));
evalcond[4]=((((-1.0)*cj0*sj1*x2472))+(((-1.0)*cj0*x2476))+(((-1.0)*x2471*x2477))+(((-1.0)*r02*x2478))+((x2469*x2473)));
evalcond[5]=((((-1.0)*r12*x2478))+(((-1.0)*sj0*sj1*x2472))+(((-1.0)*r11*sj5*x2477))+(((-1.0)*x2474*x2476))+((x2469*x2470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2480=((1.0)*cj5);
CheckValue<IkReal> x2481 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2480))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2481.valid){
continue;
}
CheckValue<IkReal> x2482=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2480)))),-1);
if(!x2482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2481.value)+(((1.5707963267949)*(x2482.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2483=IKsin(j4);
IkReal x2484=IKcos(j4);
IkReal x2485=(cj5*r10);
IkReal x2486=(r01*sj5);
IkReal x2487=((1.0)*cj2);
IkReal x2488=(cj5*r00);
IkReal x2489=((1.0)*sj0);
IkReal x2490=(cj5*r20);
IkReal x2491=(cj1*sj2);
IkReal x2492=((1.0)*x2484);
IkReal x2493=((1.0)*x2483);
IkReal x2494=(sj5*x2483);
evalcond[0]=((((-1.0)*x2490*x2493))+((r21*x2494))+(((-1.0)*r22*x2492)));
evalcond[1]=(cj0+((r11*x2494))+(((-1.0)*x2485*x2493))+(((-1.0)*r12*x2492)));
evalcond[2]=(((x2483*x2486))+(((-1.0)*x2489))+(((-1.0)*r02*x2492))+(((-1.0)*x2488*x2493)));
evalcond[3]=((((-1.0)*r21*sj5*x2492))+((x2484*x2490))+((sj1*sj2))+(((-1.0)*cj1*x2487))+(((-1.0)*r22*x2493)));
evalcond[4]=(((x2484*x2488))+(((-1.0)*cj0*x2491))+(((-1.0)*x2486*x2492))+(((-1.0)*r02*x2493))+(((-1.0)*cj0*sj1*x2487)));
evalcond[5]=((((-1.0)*r11*sj5*x2492))+((x2484*x2485))+(((-1.0)*sj0*sj1*x2487))+(((-1.0)*x2489*x2491))+(((-1.0)*r12*x2493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2495=cj5*cj5;
IkReal x2496=r21*r21;
IkReal x2497=(sj1*sj2);
IkReal x2498=(r21*sj5);
IkReal x2499=(cj1*cj2);
IkReal x2500=(cj5*r20);
CheckValue<IkReal> x2501 = IKatan2WithCheck(IkReal((((r22*x2497))+(((-1.0)*r22*x2499)))),IkReal((((x2497*x2498))+(((-1.0)*x2497*x2500))+((x2499*x2500))+(((-1.0)*x2498*x2499)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2501.valid){
continue;
}
CheckValue<IkReal> x2502=IKPowWithIntegerCheck(IKsign((x2496+(((-1.0)*x2495*x2496))+(r22*r22)+((x2495*(r20*r20)))+(((-2.0)*x2498*x2500)))),-1);
if(!x2502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2501.value)+(((1.5707963267949)*(x2502.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2503=IKsin(j4);
IkReal x2504=IKcos(j4);
IkReal x2505=(r21*sj5);
IkReal x2506=(cj5*r20);
IkReal x2507=((1.0)*x2504);
IkReal x2508=((1.0)*x2503);
evalcond[0]=((((-1.0)*r22*x2507))+(((-1.0)*x2506*x2508))+((x2503*x2505)));
evalcond[1]=(((x2504*x2506))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2508))+(((-1.0)*x2505*x2507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2509=(cj5*sj4);
IkReal x2510=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x2509))+((r01*x2510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2510))+((r10*x2509))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x2509))+((r01*x2510))))+IKsqr(((((-1.0)*r11*x2510))+((r10*x2509))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x2509))+((r01*x2510))), ((((-1.0)*r11*x2510))+((r10*x2509))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2511=IKcos(j0);
IkReal x2512=IKsin(j0);
IkReal x2513=(cj4*cj5);
IkReal x2514=((0.1)*sj5);
IkReal x2515=((0.392)*sj1);
IkReal x2516=(cj5*r11);
IkReal x2517=(cj5*r01);
IkReal x2518=((1.0)*cj1);
IkReal x2519=(r11*sj5);
IkReal x2520=((1.0)*sj4);
IkReal x2521=((0.392)*cj2);
IkReal x2522=((1.0)*sj1);
IkReal x2523=((1.0)*cj4);
IkReal x2524=(r01*sj5);
IkReal x2525=(sj2*x2512);
IkReal x2526=(sj2*x2511);
IkReal x2527=(cj1*x2511);
IkReal x2528=(cj2*x2511);
IkReal x2529=(cj1*x2512);
IkReal x2530=(cj2*x2512);
evalcond[0]=(x2511+(((-1.0)*r12*x2523))+((sj4*x2519))+(((-1.0)*cj5*r10*x2520)));
evalcond[1]=(((sj4*x2524))+(((-1.0)*cj5*r00*x2520))+(((-1.0)*x2512))+(((-1.0)*r02*x2523)));
evalcond[2]=(((r00*sj5))+x2517+((sj1*x2526))+(((-1.0)*x2518*x2528)));
evalcond[3]=(x2516+((r10*sj5))+(((-1.0)*x2518*x2530))+((sj1*x2525)));
evalcond[4]=((((-1.0)*x2523*x2524))+(((-1.0)*x2522*x2528))+(((-1.0)*r02*x2520))+((r00*x2513))+(((-1.0)*x2518*x2526)));
evalcond[5]=((((-1.0)*x2522*x2530))+(((-1.0)*r12*x2520))+((r10*x2513))+(((-1.0)*x2519*x2523))+(((-1.0)*x2518*x2525)));
evalcond[6]=((((0.425)*x2527))+(((-0.134)*x2512))+(((-1.0)*x2515*x2526))+(((-1.0)*r00*x2514))+(((-1.0)*px))+((x2521*x2527))+(((-0.1)*x2517)));
evalcond[7]=((((0.134)*x2511))+(((0.425)*x2529))+(((-1.0)*x2515*x2525))+(((-1.0)*py))+(((-1.0)*r10*x2514))+((x2521*x2529))+(((-0.1)*x2516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2531=((1.0)*cj5);
IkReal x2532=((1.0)*sj5);
CheckValue<IkReal> x2533 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2532))+(((-1.0)*r11*x2531)))),IkReal(((((-1.0)*r00*x2532))+(((-1.0)*r01*x2531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2533.valid){
continue;
}
CheckValue<IkReal> x2534=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2534.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2533.value)+(((1.5707963267949)*(x2534.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2535=IKcos(j0);
IkReal x2536=IKsin(j0);
IkReal x2537=((0.1)*sj5);
IkReal x2538=(cj5*r11);
IkReal x2539=(cj5*r01);
IkReal x2540=(sj1*sj2);
IkReal x2541=(cj1*cj2);
IkReal x2542=((0.392)*x2536);
IkReal x2543=(cj1*x2535);
evalcond[0]=(((r00*sj5))+x2539+((x2535*x2540))+(((-1.0)*x2535*x2541)));
evalcond[1]=(x2538+((r10*sj5))+(((-1.0)*x2536*x2541))+((x2536*x2540)));
evalcond[2]=((((-1.0)*r00*x2537))+(((-0.134)*x2536))+(((-1.0)*px))+(((0.392)*x2535*x2541))+(((-0.1)*x2539))+(((-0.392)*x2535*x2540))+(((0.425)*x2543)));
evalcond[3]=((((-1.0)*r10*x2537))+(((-1.0)*py))+(((-0.1)*x2538))+(((0.134)*x2535))+(((-1.0)*x2540*x2542))+(((0.425)*cj1*x2536))+((x2541*x2542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2544=((1.0)*cj5);
IkReal x2545=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2544)));
j4eval[0]=x2545;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x2544))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2545);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2546=((1.0)*cj5);
IkReal x2547=((((-1.0)*r11*x2546))+(((-1.0)*r10*sj5)));
j4eval[0]=x2547;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2546)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x2547);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2548=((1.0)*sj0);
IkReal x2549=((1.0)*cj0);
IkReal x2550=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2550;
j4eval[1]=((IKabs(((((-1.0)*r12*x2548))+(((-1.0)*r02*x2549)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2549))+(((-1.0)*r11*sj5*x2548))))));
j4eval[2]=IKsign(x2550);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2551=((-1.0)*r20);
IkReal x2553 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2553)==0){
continue;
}
IkReal x2552=pow(x2553,-0.5);
CheckValue<IkReal> x2554 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2551),IKFAST_ATAN2_MAGTHRESH);
if(!x2554.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2554.value));
IkReal gconst79=(r21*x2552);
IkReal gconst80=(x2551*x2552);
CheckValue<IkReal> x2555 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2555.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2555.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2556=((-1.0)*r20);
IkReal x2557=x2552;
CheckValue<IkReal> x2559 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2556),IKFAST_ATAN2_MAGTHRESH);
if(!x2559.valid){
continue;
}
IkReal x2558=((-1.0)*(x2559.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2558;
IkReal gconst78=x2558;
IkReal gconst79=(r21*x2557);
IkReal gconst80=(x2556*x2557);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2560=((-1.0)*r20);
IkReal x2561=x2552;
CheckValue<IkReal> x2563 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2560),IKFAST_ATAN2_MAGTHRESH);
if(!x2563.valid){
continue;
}
IkReal x2562=((-1.0)*(x2563.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2562;
IkReal gconst78=x2562;
IkReal gconst79=(r21*x2561);
IkReal gconst80=(x2560*x2561);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2564=((-1.0)*r20);
IkReal x2565=x2552;
CheckValue<IkReal> x2567 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2564),IKFAST_ATAN2_MAGTHRESH);
if(!x2567.valid){
continue;
}
IkReal x2566=((-1.0)*(x2567.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2566;
IkReal gconst78=x2566;
IkReal gconst79=(r21*x2565);
IkReal gconst80=(x2564*x2565);
IkReal x2568=r22*r22;
CheckValue<IkReal> x2571=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2568))),-1);
if(!x2571.valid){
continue;
}
IkReal x2569=x2571.value;
IkReal x2570=(x2568+(((2.0)*x2569*(r20*r20)*(r21*r21)))+((x2569*(r20*r20*r20*r20)))+((x2569*(r21*r21*r21*r21))));
j4eval[0]=x2570;
j4eval[1]=IKsign(x2570);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2572=(sj1*sj2);
IkReal x2573=(gconst80*r20);
IkReal x2574=(gconst79*r21);
IkReal x2575=(cj1*cj2);
CheckValue<IkReal> x2576 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2575))+((r22*x2572)))),IkReal((((x2573*x2575))+(((-1.0)*x2572*x2573))+(((-1.0)*x2574*x2575))+((x2572*x2574)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2576.valid){
continue;
}
CheckValue<IkReal> x2577=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2573*x2574))+(x2573*x2573)+(r22*r22)+(x2574*x2574))),-1);
if(!x2577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2576.value)+(((1.5707963267949)*(x2577.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2578=IKsin(j4);
IkReal x2579=IKcos(j4);
IkReal x2580=(gconst79*r01);
IkReal x2581=(gconst79*r21);
IkReal x2582=((1.0)*cj2);
IkReal x2583=(gconst79*r11);
IkReal x2584=((1.0)*sj0);
IkReal x2585=(cj1*sj2);
IkReal x2586=((1.0)*x2579);
IkReal x2587=(gconst80*x2579);
IkReal x2588=((1.0)*x2578);
IkReal x2589=(gconst80*x2588);
evalcond[0]=((((-1.0)*r20*x2589))+((x2578*x2581))+(((-1.0)*r22*x2586)));
evalcond[1]=(cj0+((x2578*x2583))+(((-1.0)*r10*x2589))+(((-1.0)*r12*x2586)));
evalcond[2]=((((-1.0)*r00*x2589))+(((-1.0)*r02*x2586))+(((-1.0)*x2584))+((x2578*x2580)));
evalcond[3]=((((-1.0)*cj1*x2582))+((r20*x2587))+((sj1*sj2))+(((-1.0)*x2581*x2586))+(((-1.0)*r22*x2588)));
evalcond[4]=((((-1.0)*cj0*x2585))+((r00*x2587))+(((-1.0)*r02*x2588))+(((-1.0)*cj0*sj1*x2582))+(((-1.0)*x2580*x2586)));
evalcond[5]=((((-1.0)*sj0*sj1*x2582))+((r10*x2587))+(((-1.0)*x2584*x2585))+(((-1.0)*x2583*x2586))+(((-1.0)*r12*x2588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2590=((1.0)*gconst80);
CheckValue<IkReal> x2591 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2590))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2591.valid){
continue;
}
CheckValue<IkReal> x2592=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x2590)))),-1);
if(!x2592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2591.value)+(((1.5707963267949)*(x2592.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2593=IKsin(j4);
IkReal x2594=IKcos(j4);
IkReal x2595=(gconst79*r01);
IkReal x2596=(gconst79*r21);
IkReal x2597=((1.0)*cj2);
IkReal x2598=(gconst79*r11);
IkReal x2599=((1.0)*sj0);
IkReal x2600=(cj1*sj2);
IkReal x2601=((1.0)*x2594);
IkReal x2602=(gconst80*x2594);
IkReal x2603=((1.0)*x2593);
IkReal x2604=(gconst80*x2603);
evalcond[0]=(((x2593*x2596))+(((-1.0)*r22*x2601))+(((-1.0)*r20*x2604)));
evalcond[1]=(cj0+(((-1.0)*r10*x2604))+((x2593*x2598))+(((-1.0)*r12*x2601)));
evalcond[2]=((((-1.0)*x2599))+((x2593*x2595))+(((-1.0)*r02*x2601))+(((-1.0)*r00*x2604)));
evalcond[3]=((((-1.0)*x2596*x2601))+(((-1.0)*cj1*x2597))+((r20*x2602))+((sj1*sj2))+(((-1.0)*r22*x2603)));
evalcond[4]=((((-1.0)*x2595*x2601))+(((-1.0)*cj0*x2600))+(((-1.0)*r02*x2603))+(((-1.0)*cj0*sj1*x2597))+((r00*x2602)));
evalcond[5]=((((-1.0)*r12*x2603))+(((-1.0)*sj0*sj1*x2597))+((r10*x2602))+(((-1.0)*x2598*x2601))+(((-1.0)*x2599*x2600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2605=((1.0)*gconst80);
CheckValue<IkReal> x2606 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2606.valid){
continue;
}
CheckValue<IkReal> x2607=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x2605)))),-1);
if(!x2607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2606.value)+(((1.5707963267949)*(x2607.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2608=IKsin(j4);
IkReal x2609=IKcos(j4);
IkReal x2610=(gconst79*r01);
IkReal x2611=(gconst79*r21);
IkReal x2612=((1.0)*cj2);
IkReal x2613=(gconst79*r11);
IkReal x2614=((1.0)*sj0);
IkReal x2615=(cj1*sj2);
IkReal x2616=((1.0)*x2609);
IkReal x2617=(gconst80*x2609);
IkReal x2618=((1.0)*x2608);
IkReal x2619=(gconst80*x2618);
evalcond[0]=((((-1.0)*r22*x2616))+((x2608*x2611))+(((-1.0)*r20*x2619)));
evalcond[1]=(cj0+(((-1.0)*r12*x2616))+((x2608*x2613))+(((-1.0)*r10*x2619)));
evalcond[2]=((((-1.0)*r00*x2619))+((x2608*x2610))+(((-1.0)*r02*x2616))+(((-1.0)*x2614)));
evalcond[3]=((((-1.0)*x2611*x2616))+((r20*x2617))+((sj1*sj2))+(((-1.0)*r22*x2618))+(((-1.0)*cj1*x2612)));
evalcond[4]=(((r00*x2617))+(((-1.0)*x2610*x2616))+(((-1.0)*cj0*x2615))+(((-1.0)*cj0*sj1*x2612))+(((-1.0)*r02*x2618)));
evalcond[5]=((((-1.0)*r12*x2618))+(((-1.0)*x2613*x2616))+(((-1.0)*sj0*sj1*x2612))+((r10*x2617))+(((-1.0)*x2614*x2615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2620=((-1.0)*r21);
IkReal x2622 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2622)==0){
continue;
}
IkReal x2621=pow(x2622,-0.5);
CheckValue<IkReal> x2623 = IKatan2WithCheck(IkReal(x2620),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2623.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2623.value))));
IkReal gconst82=(x2620*x2621);
IkReal gconst83=((1.0)*r20*x2621);
CheckValue<IkReal> x2624 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2624.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2624.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2625=((-1.0)*r21);
CheckValue<IkReal> x2628 = IKatan2WithCheck(IkReal(x2625),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2628.valid){
continue;
}
IkReal x2626=((1.0)*(x2628.value));
IkReal x2627=x2621;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2626)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2626)));
IkReal gconst82=(x2625*x2627);
IkReal gconst83=((1.0)*r20*x2627);
IkReal x2629=r22*r22;
IkReal x2630=((1.0)*x2629);
CheckValue<IkReal> x2634=IKPowWithIntegerCheck(((-1.0)+x2629),-1);
if(!x2634.valid){
continue;
}
IkReal x2631=x2634.value;
if((((1.0)+(((-1.0)*x2630)))) < -0.00001)
continue;
IkReal x2632=IKsqrt(((1.0)+(((-1.0)*x2630))));
IkReal x2633=(cj0*x2631*x2632);
j4eval[0]=((IKabs(((((-1.0)*x2630*x2633))+x2633)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2635=((-1.0)*r21);
CheckValue<IkReal> x2638 = IKatan2WithCheck(IkReal(x2635),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2638.valid){
continue;
}
IkReal x2636=((1.0)*(x2638.value));
IkReal x2637=x2621;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2636)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2636)));
IkReal gconst82=(x2635*x2637);
IkReal gconst83=((1.0)*r20*x2637);
IkReal x2639=r22*r22;
IkReal x2640=((1.0)*x2639);
CheckValue<IkReal> x2644=IKPowWithIntegerCheck(((-1.0)+x2639),-1);
if(!x2644.valid){
continue;
}
IkReal x2641=x2644.value;
if((((1.0)+(((-1.0)*x2640)))) < -0.00001)
continue;
IkReal x2642=IKsqrt(((1.0)+(((-1.0)*x2640))));
IkReal x2643=(sj0*x2641*x2642);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x2640*x2643))+x2643))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2645=((-1.0)*r21);
CheckValue<IkReal> x2648 = IKatan2WithCheck(IkReal(x2645),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2648.valid){
continue;
}
IkReal x2646=((1.0)*(x2648.value));
IkReal x2647=x2621;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2646)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2646)));
IkReal gconst82=(x2645*x2647);
IkReal gconst83=((1.0)*r20*x2647);
IkReal x2649=r22*r22;
IkReal x2650=(r12*sj0);
IkReal x2651=(cj0*r02);
CheckValue<IkReal> x2655=IKPowWithIntegerCheck(((-1.0)+x2649),-1);
if(!x2655.valid){
continue;
}
IkReal x2652=x2655.value;
if((((1.0)+(((-1.0)*x2649)))) < -0.00001)
continue;
IkReal x2653=IKsqrt(((1.0)+(((-1.0)*x2649))));
IkReal x2654=(r22*x2652*x2653);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2651))+(((-1.0)*x2650)))))+(IKabs((((x2651*x2654))+((x2650*x2654))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2656=((1.0)*sj0);
IkReal x2657=((1.0)*cj0);
CheckValue<IkReal> x2658=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2658.valid){
continue;
}
CheckValue<IkReal> x2659 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2656))+(((-1.0)*r02*x2657)))),IkReal(((((-1.0)*gconst82*r11*x2656))+(((-1.0)*gconst82*r01*x2657))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2658.value)))+(x2659.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2660=IKsin(j4);
IkReal x2661=IKcos(j4);
IkReal x2662=(gconst82*r11);
IkReal x2663=((1.0)*cj2);
IkReal x2664=((1.0)*sj0);
IkReal x2665=(cj1*sj2);
IkReal x2666=((1.0)*x2661);
IkReal x2667=(gconst83*x2661);
IkReal x2668=(gconst82*x2660);
IkReal x2669=((1.0)*x2660);
evalcond[0]=(((r21*x2668))+(((-1.0)*gconst83*r20*x2669))+(((-1.0)*r22*x2666)));
evalcond[1]=((((-1.0)*r12*x2666))+cj0+(((-1.0)*gconst83*r10*x2669))+((x2660*x2662)));
evalcond[2]=((((-1.0)*r02*x2666))+(((-1.0)*x2664))+((r01*x2668))+(((-1.0)*gconst83*r00*x2669)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2663))+(((-1.0)*gconst82*r21*x2666))+(((-1.0)*r22*x2669))+((r20*x2667)));
evalcond[4]=((((-1.0)*cj0*x2665))+(((-1.0)*cj0*sj1*x2663))+(((-1.0)*gconst82*r01*x2666))+(((-1.0)*r02*x2669))+((r00*x2667)));
evalcond[5]=((((-1.0)*r12*x2669))+(((-1.0)*sj0*sj1*x2663))+(((-1.0)*x2662*x2666))+((r10*x2667))+(((-1.0)*x2664*x2665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2670=((1.0)*gconst83);
CheckValue<IkReal> x2671=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2670))+(((-1.0)*gconst82*r10)))),-1);
if(!x2671.valid){
continue;
}
CheckValue<IkReal> x2672 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2670)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2671.value)))+(x2672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2673=IKsin(j4);
IkReal x2674=IKcos(j4);
IkReal x2675=(gconst82*r11);
IkReal x2676=((1.0)*cj2);
IkReal x2677=((1.0)*sj0);
IkReal x2678=(cj1*sj2);
IkReal x2679=((1.0)*x2674);
IkReal x2680=(gconst83*x2674);
IkReal x2681=(gconst82*x2673);
IkReal x2682=((1.0)*x2673);
evalcond[0]=((((-1.0)*gconst83*r20*x2682))+((r21*x2681))+(((-1.0)*r22*x2679)));
evalcond[1]=((((-1.0)*r12*x2679))+((x2673*x2675))+cj0+(((-1.0)*gconst83*r10*x2682)));
evalcond[2]=(((r01*x2681))+(((-1.0)*gconst83*r00*x2682))+(((-1.0)*r02*x2679))+(((-1.0)*x2677)));
evalcond[3]=((((-1.0)*cj1*x2676))+((sj1*sj2))+(((-1.0)*r22*x2682))+(((-1.0)*gconst82*r21*x2679))+((r20*x2680)));
evalcond[4]=((((-1.0)*cj0*x2678))+(((-1.0)*r02*x2682))+(((-1.0)*cj0*sj1*x2676))+(((-1.0)*gconst82*r01*x2679))+((r00*x2680)));
evalcond[5]=((((-1.0)*r12*x2682))+((r10*x2680))+(((-1.0)*x2675*x2679))+(((-1.0)*sj0*sj1*x2676))+(((-1.0)*x2677*x2678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2683=((1.0)*gconst83);
CheckValue<IkReal> x2684 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2683)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2684.valid){
continue;
}
CheckValue<IkReal> x2685=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2683))+(((-1.0)*gconst82*r00)))),-1);
if(!x2685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2684.value)+(((1.5707963267949)*(x2685.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2686=IKsin(j4);
IkReal x2687=IKcos(j4);
IkReal x2688=(gconst82*r11);
IkReal x2689=((1.0)*cj2);
IkReal x2690=((1.0)*sj0);
IkReal x2691=(cj1*sj2);
IkReal x2692=((1.0)*x2687);
IkReal x2693=(gconst83*x2687);
IkReal x2694=(gconst82*x2686);
IkReal x2695=((1.0)*x2686);
evalcond[0]=((((-1.0)*gconst83*r20*x2695))+(((-1.0)*r22*x2692))+((r21*x2694)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x2695))+((x2686*x2688))+(((-1.0)*r12*x2692)));
evalcond[2]=((((-1.0)*r02*x2692))+(((-1.0)*x2690))+((r01*x2694))+(((-1.0)*gconst83*r00*x2695)));
evalcond[3]=((((-1.0)*cj1*x2689))+((sj1*sj2))+(((-1.0)*r22*x2695))+(((-1.0)*gconst82*r21*x2692))+((r20*x2693)));
evalcond[4]=((((-1.0)*gconst82*r01*x2692))+(((-1.0)*cj0*x2691))+(((-1.0)*r02*x2695))+((r00*x2693))+(((-1.0)*cj0*sj1*x2689)));
evalcond[5]=(((r10*x2693))+(((-1.0)*x2688*x2692))+(((-1.0)*r12*x2695))+(((-1.0)*x2690*x2691))+(((-1.0)*sj0*sj1*x2689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2696=((-1.0)*r10);
IkReal x2698 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2698)==0){
continue;
}
IkReal x2697=pow(x2698,-0.5);
CheckValue<IkReal> x2699 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2696),IKFAST_ATAN2_MAGTHRESH);
if(!x2699.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2699.value));
IkReal gconst85=(r11*x2697);
IkReal gconst86=(x2696*x2697);
CheckValue<IkReal> x2700 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2700.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2700.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2701=((-1.0)*r10);
IkReal x2702=x2697;
CheckValue<IkReal> x2704 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2701),IKFAST_ATAN2_MAGTHRESH);
if(!x2704.valid){
continue;
}
IkReal x2703=((-1.0)*(x2704.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2703;
IkReal gconst84=x2703;
IkReal gconst85=(r11*x2702);
IkReal gconst86=(x2701*x2702);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2705=((1.0)*sj0);
IkReal x2706=((1.0)*gconst85);
CheckValue<IkReal> x2707=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2706)))),-1);
if(!x2707.valid){
continue;
}
CheckValue<IkReal> x2708 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2705))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x2706))+((cj0*gconst86*r00))+((gconst86*r10*sj0))+(((-1.0)*gconst85*r11*x2705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2707.value)))+(x2708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2709=IKsin(j4);
IkReal x2710=IKcos(j4);
IkReal x2711=(gconst85*r21);
IkReal x2712=(gconst86*r00);
IkReal x2713=(gconst86*r10);
IkReal x2714=((1.0)*cj2);
IkReal x2715=(gconst85*r11);
IkReal x2716=(gconst85*r01);
IkReal x2717=((1.0)*sj0);
IkReal x2718=(gconst86*r20);
IkReal x2719=(cj1*sj2);
IkReal x2720=((1.0)*x2710);
IkReal x2721=((1.0)*x2709);
evalcond[0]=((((-1.0)*x2718*x2721))+((x2709*x2711))+(((-1.0)*r22*x2720)));
evalcond[1]=(cj0+((x2709*x2715))+(((-1.0)*x2713*x2721))+(((-1.0)*r12*x2720)));
evalcond[2]=((((-1.0)*x2717))+((x2709*x2716))+(((-1.0)*r02*x2720))+(((-1.0)*x2712*x2721)));
evalcond[3]=(((sj1*sj2))+((x2710*x2718))+(((-1.0)*r22*x2721))+(((-1.0)*x2711*x2720))+(((-1.0)*cj1*x2714)));
evalcond[4]=((((-1.0)*cj0*sj1*x2714))+((x2710*x2712))+(((-1.0)*x2716*x2720))+(((-1.0)*r02*x2721))+(((-1.0)*cj0*x2719)));
evalcond[5]=((((-1.0)*sj0*sj1*x2714))+((x2710*x2713))+(((-1.0)*r12*x2721))+(((-1.0)*x2715*x2720))+(((-1.0)*x2717*x2719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2722=((1.0)*gconst86);
CheckValue<IkReal> x2723=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2722))+(((-1.0)*gconst85*r00)))),-1);
if(!x2723.valid){
continue;
}
CheckValue<IkReal> x2724 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2722))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2723.value)))+(x2724.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2725=IKsin(j4);
IkReal x2726=IKcos(j4);
IkReal x2727=(gconst85*r21);
IkReal x2728=(gconst86*r00);
IkReal x2729=(gconst86*r10);
IkReal x2730=((1.0)*cj2);
IkReal x2731=(gconst85*r11);
IkReal x2732=(gconst85*r01);
IkReal x2733=((1.0)*sj0);
IkReal x2734=(gconst86*r20);
IkReal x2735=(cj1*sj2);
IkReal x2736=((1.0)*x2726);
IkReal x2737=((1.0)*x2725);
evalcond[0]=((((-1.0)*x2734*x2737))+((x2725*x2727))+(((-1.0)*r22*x2736)));
evalcond[1]=(cj0+((x2725*x2731))+(((-1.0)*r12*x2736))+(((-1.0)*x2729*x2737)));
evalcond[2]=((((-1.0)*x2728*x2737))+((x2725*x2732))+(((-1.0)*r02*x2736))+(((-1.0)*x2733)));
evalcond[3]=((((-1.0)*x2727*x2736))+((x2726*x2734))+((sj1*sj2))+(((-1.0)*r22*x2737))+(((-1.0)*cj1*x2730)));
evalcond[4]=((((-1.0)*cj0*sj1*x2730))+((x2726*x2728))+(((-1.0)*cj0*x2735))+(((-1.0)*r02*x2737))+(((-1.0)*x2732*x2736)));
evalcond[5]=((((-1.0)*x2733*x2735))+(((-1.0)*x2731*x2736))+((x2726*x2729))+(((-1.0)*r12*x2737))+(((-1.0)*sj0*sj1*x2730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2738=((-1.0)*r11);
IkReal x2740 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2740)==0){
continue;
}
IkReal x2739=pow(x2740,-0.5);
CheckValue<IkReal> x2741 = IKatan2WithCheck(IkReal(x2738),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2741.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2741.value))));
IkReal gconst88=(x2738*x2739);
IkReal gconst89=((1.0)*r10*x2739);
CheckValue<IkReal> x2742 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2742.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2742.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2743=((-1.0)*r11);
CheckValue<IkReal> x2746 = IKatan2WithCheck(IkReal(x2743),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2746.valid){
continue;
}
IkReal x2744=((1.0)*(x2746.value));
IkReal x2745=x2739;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2744)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2744)));
IkReal gconst88=(x2743*x2745);
IkReal gconst89=((1.0)*r10*x2745);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2747=((-1.0)*r11);
CheckValue<IkReal> x2750 = IKatan2WithCheck(IkReal(x2747),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2750.valid){
continue;
}
IkReal x2748=((1.0)*(x2750.value));
IkReal x2749=x2739;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2748)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2748)));
IkReal gconst88=(x2747*x2749);
IkReal gconst89=((1.0)*r10*x2749);
IkReal x2751=r12*r12;
IkReal x2752=((1.0)*sj0);
IkReal x2753=(cj0*r02);
IkReal x2754=x2739;
j4eval[0]=((IKabs(((((-1.0)*x2752*x2754))+((sj0*x2751*x2754))+((r12*x2753*x2754)))))+(IKabs(((((-1.0)*r12*x2752))+(((-1.0)*x2753))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2755=((-1.0)*r11);
CheckValue<IkReal> x2758 = IKatan2WithCheck(IkReal(x2755),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2758.valid){
continue;
}
IkReal x2756=((1.0)*(x2758.value));
IkReal x2757=x2739;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2756)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2756)));
IkReal gconst88=(x2755*x2757);
IkReal gconst89=((1.0)*r10*x2757);
IkReal x2759=r12*r12;
IkReal x2760=(cj1*cj2*r22);
IkReal x2761=(r22*sj1*sj2);
CheckValue<IkReal> x2765=IKPowWithIntegerCheck(((-1.0)+x2759),-1);
if(!x2765.valid){
continue;
}
IkReal x2762=x2765.value;
if((((1.0)+(((-1.0)*x2759)))) < -0.00001)
continue;
IkReal x2763=IKsqrt(((1.0)+(((-1.0)*x2759))));
IkReal x2764=(r12*x2762*x2763);
j4eval[0]=((IKabs(((((-1.0)*x2761*x2764))+((x2760*x2764)))))+(IKabs((x2761+(((-1.0)*x2760))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2766=(cj1*cj2);
IkReal x2767=(gconst89*r20);
IkReal x2768=(gconst88*r21);
IkReal x2769=(sj1*sj2);
CheckValue<IkReal> x2770 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2766))+((r22*x2769)))),IkReal((((x2768*x2769))+(((-1.0)*x2766*x2768))+(((-1.0)*x2767*x2769))+((x2766*x2767)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2770.valid){
continue;
}
CheckValue<IkReal> x2771=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x2767*x2768))+(x2767*x2767)+(x2768*x2768))),-1);
if(!x2771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2770.value)+(((1.5707963267949)*(x2771.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2772=IKsin(j4);
IkReal x2773=IKcos(j4);
IkReal x2774=((1.0)*sj0);
IkReal x2775=((1.0)*cj2);
IkReal x2776=(gconst89*r20);
IkReal x2777=(gconst89*r10);
IkReal x2778=(gconst89*r00);
IkReal x2779=(cj1*sj2);
IkReal x2780=((1.0)*x2773);
IkReal x2781=((1.0)*x2772);
IkReal x2782=(gconst88*x2772);
evalcond[0]=(((r21*x2782))+(((-1.0)*r22*x2780))+(((-1.0)*x2776*x2781)));
evalcond[1]=((((-1.0)*r12*x2780))+cj0+((r11*x2782))+(((-1.0)*x2777*x2781)));
evalcond[2]=((((-1.0)*x2778*x2781))+(((-1.0)*x2774))+((r01*x2782))+(((-1.0)*r02*x2780)));
evalcond[3]=((((-1.0)*gconst88*r21*x2780))+((sj1*sj2))+(((-1.0)*r22*x2781))+(((-1.0)*cj1*x2775))+((x2773*x2776)));
evalcond[4]=((((-1.0)*cj0*x2779))+(((-1.0)*cj0*sj1*x2775))+(((-1.0)*gconst88*r01*x2780))+((x2773*x2778))+(((-1.0)*r02*x2781)));
evalcond[5]=((((-1.0)*r12*x2781))+(((-1.0)*cj2*sj1*x2774))+(((-1.0)*gconst88*r11*x2780))+(((-1.0)*x2774*x2779))+((x2773*x2777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2783=((1.0)*sj0);
IkReal x2784=((1.0)*cj0);
CheckValue<IkReal> x2785 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2783))+(((-1.0)*r02*x2784)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r11*x2783))+(((-1.0)*gconst88*r01*x2784))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2785.valid){
continue;
}
CheckValue<IkReal> x2786=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2785.value)+(((1.5707963267949)*(x2786.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2787=IKsin(j4);
IkReal x2788=IKcos(j4);
IkReal x2789=((1.0)*sj0);
IkReal x2790=((1.0)*cj2);
IkReal x2791=(gconst89*r20);
IkReal x2792=(gconst89*r10);
IkReal x2793=(gconst89*r00);
IkReal x2794=(cj1*sj2);
IkReal x2795=((1.0)*x2788);
IkReal x2796=((1.0)*x2787);
IkReal x2797=(gconst88*x2787);
evalcond[0]=(((r21*x2797))+(((-1.0)*x2791*x2796))+(((-1.0)*r22*x2795)));
evalcond[1]=(cj0+((r11*x2797))+(((-1.0)*x2792*x2796))+(((-1.0)*r12*x2795)));
evalcond[2]=((((-1.0)*x2789))+((r01*x2797))+(((-1.0)*x2793*x2796))+(((-1.0)*r02*x2795)));
evalcond[3]=((((-1.0)*gconst88*r21*x2795))+((sj1*sj2))+(((-1.0)*r22*x2796))+(((-1.0)*cj1*x2790))+((x2788*x2791)));
evalcond[4]=((((-1.0)*cj0*sj1*x2790))+(((-1.0)*cj0*x2794))+((x2788*x2793))+(((-1.0)*gconst88*r01*x2795))+(((-1.0)*r02*x2796)));
evalcond[5]=((((-1.0)*cj2*sj1*x2789))+(((-1.0)*x2789*x2794))+(((-1.0)*gconst88*r11*x2795))+(((-1.0)*r12*x2796))+((x2788*x2792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2798=((1.0)*gconst89);
CheckValue<IkReal> x2799 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2798))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2799.valid){
continue;
}
CheckValue<IkReal> x2800=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2798))+(((-1.0)*gconst88*r00)))),-1);
if(!x2800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2799.value)+(((1.5707963267949)*(x2800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2801=IKsin(j4);
IkReal x2802=IKcos(j4);
IkReal x2803=((1.0)*sj0);
IkReal x2804=((1.0)*cj2);
IkReal x2805=(gconst89*r20);
IkReal x2806=(gconst89*r10);
IkReal x2807=(gconst89*r00);
IkReal x2808=(cj1*sj2);
IkReal x2809=((1.0)*x2802);
IkReal x2810=((1.0)*x2801);
IkReal x2811=(gconst88*x2801);
evalcond[0]=(((r21*x2811))+(((-1.0)*x2805*x2810))+(((-1.0)*r22*x2809)));
evalcond[1]=(cj0+(((-1.0)*r12*x2809))+(((-1.0)*x2806*x2810))+((r11*x2811)));
evalcond[2]=(((r01*x2811))+(((-1.0)*x2803))+(((-1.0)*x2807*x2810))+(((-1.0)*r02*x2809)));
evalcond[3]=((((-1.0)*cj1*x2804))+((sj1*sj2))+(((-1.0)*r22*x2810))+((x2802*x2805))+(((-1.0)*gconst88*r21*x2809)));
evalcond[4]=((((-1.0)*r02*x2810))+(((-1.0)*gconst88*r01*x2809))+((x2802*x2807))+(((-1.0)*cj0*x2808))+(((-1.0)*cj0*sj1*x2804)));
evalcond[5]=((((-1.0)*r12*x2810))+(((-1.0)*cj2*sj1*x2803))+(((-1.0)*gconst88*r11*x2809))+(((-1.0)*x2803*x2808))+((x2802*x2806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2812=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2812;
j4eval[1]=IKsign(x2812);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2813=((1.0)*cj5);
IkReal x2814=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2813)));
j4eval[0]=x2814;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2813))))));
j4eval[2]=IKsign(x2814);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2815=cj5*cj5;
IkReal x2816=r11*r11;
IkReal x2817=(r11*sj5);
IkReal x2818=(cj5*r10);
IkReal x2819=((r12*r12)+(((-1.0)*x2815*x2816))+((x2815*(r10*r10)))+(((-2.0)*x2817*x2818))+x2816);
j4eval[0]=x2819;
j4eval[1]=IKsign(x2819);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2817))+x2818))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2820=cj5*cj5;
IkReal x2821=r11*r11;
IkReal x2822=(cj5*r10);
IkReal x2823=(r11*sj5);
CheckValue<IkReal> x2824 = IKatan2WithCheck(IkReal(((((-1.0)*x2823))+x2822)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2824.valid){
continue;
}
CheckValue<IkReal> x2825=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x2820*(r10*r10)))+(((-2.0)*x2822*x2823))+(((-1.0)*x2820*x2821))+x2821)),-1);
if(!x2825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2824.value)+(((1.5707963267949)*(x2825.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2826=IKsin(j4);
IkReal x2827=IKcos(j4);
IkReal x2828=(cj5*r10);
IkReal x2829=(r01*sj5);
IkReal x2830=((1.0)*cj2);
IkReal x2831=(cj5*r00);
IkReal x2832=(cj5*r20);
IkReal x2833=((1.0)*x2827);
IkReal x2834=((1.0)*x2826);
IkReal x2835=(sj5*x2826);
evalcond[0]=((((-1.0)*r22*x2833))+(((-1.0)*x2832*x2834))+((r21*x2835)));
evalcond[1]=((((-1.0)*x2831*x2834))+(((-1.0)*r02*x2833))+((x2826*x2829)));
evalcond[2]=((((-1.0)*r12*x2834))+(((-1.0)*r11*sj5*x2833))+((x2827*x2828)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2833))+(((-1.0)*x2828*x2834))+((r11*x2835)));
evalcond[4]=((((-1.0)*cj1*x2830))+(((-1.0)*r21*sj5*x2833))+((sj1*sj2))+((x2827*x2832))+(((-1.0)*r22*x2834)));
evalcond[5]=((((-1.0)*sj1*x2830))+(((-1.0)*cj1*sj2))+((x2827*x2831))+(((-1.0)*x2829*x2833))+(((-1.0)*r02*x2834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2836=((1.0)*cj5);
CheckValue<IkReal> x2837=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2836))+(((-1.0)*r00*sj5)))),-1);
if(!x2837.valid){
continue;
}
CheckValue<IkReal> x2838 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2836)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2837.value)))+(x2838.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2839=IKsin(j4);
IkReal x2840=IKcos(j4);
IkReal x2841=(cj5*r10);
IkReal x2842=(r01*sj5);
IkReal x2843=((1.0)*cj2);
IkReal x2844=(cj5*r00);
IkReal x2845=(cj5*r20);
IkReal x2846=((1.0)*x2840);
IkReal x2847=((1.0)*x2839);
IkReal x2848=(sj5*x2839);
evalcond[0]=(((r21*x2848))+(((-1.0)*x2845*x2847))+(((-1.0)*r22*x2846)));
evalcond[1]=((((-1.0)*r02*x2846))+(((-1.0)*x2844*x2847))+((x2839*x2842)));
evalcond[2]=((((-1.0)*r12*x2847))+((x2840*x2841))+(((-1.0)*r11*sj5*x2846)));
evalcond[3]=((1.0)+((r11*x2848))+(((-1.0)*r12*x2846))+(((-1.0)*x2841*x2847)));
evalcond[4]=(((sj1*sj2))+((x2840*x2845))+(((-1.0)*r22*x2847))+(((-1.0)*r21*sj5*x2846))+(((-1.0)*cj1*x2843)));
evalcond[5]=((((-1.0)*sj1*x2843))+(((-1.0)*x2842*x2846))+(((-1.0)*cj1*sj2))+((x2840*x2844))+(((-1.0)*r02*x2847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2849=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2849.valid){
continue;
}
CheckValue<IkReal> x2850 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2849.value)))+(x2850.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2851=IKsin(j4);
IkReal x2852=IKcos(j4);
IkReal x2853=(cj5*r10);
IkReal x2854=(r01*sj5);
IkReal x2855=((1.0)*cj2);
IkReal x2856=(cj5*r00);
IkReal x2857=(cj5*r20);
IkReal x2858=((1.0)*x2852);
IkReal x2859=((1.0)*x2851);
IkReal x2860=(sj5*x2851);
evalcond[0]=(((r21*x2860))+(((-1.0)*x2857*x2859))+(((-1.0)*r22*x2858)));
evalcond[1]=((((-1.0)*r02*x2858))+((x2851*x2854))+(((-1.0)*x2856*x2859)));
evalcond[2]=((((-1.0)*r11*sj5*x2858))+(((-1.0)*r12*x2859))+((x2852*x2853)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2858))+((r11*x2860))+(((-1.0)*x2853*x2859)));
evalcond[4]=((((-1.0)*cj1*x2855))+((sj1*sj2))+((x2852*x2857))+(((-1.0)*r22*x2859))+(((-1.0)*r21*sj5*x2858)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x2852*x2856))+(((-1.0)*r02*x2859))+(((-1.0)*x2854*x2858))+(((-1.0)*sj1*x2855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2861=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2861;
j4eval[1]=IKsign(x2861);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2862=((1.0)*cj5);
IkReal x2863=((((-1.0)*r21*x2862))+(((-1.0)*r20*sj5)));
j4eval[0]=x2863;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2862))))));
j4eval[2]=IKsign(x2863);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2864=cj5*cj5;
IkReal x2865=r11*r11;
IkReal x2866=(cj5*r10);
IkReal x2867=(r11*sj5);
IkReal x2868=((((-1.0)*x2865))+(((-1.0)*(r12*r12)))+(((-1.0)*x2864*(r10*r10)))+(((2.0)*x2866*x2867))+((x2864*x2865)));
j4eval[0]=x2868;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2867))+x2866))));
j4eval[2]=IKsign(x2868);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2869=cj5*cj5;
IkReal x2870=r11*r11;
IkReal x2871=(cj5*r10);
IkReal x2872=(r11*sj5);
CheckValue<IkReal> x2873 = IKatan2WithCheck(IkReal(((((-1.0)*x2872))+x2871)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2873.valid){
continue;
}
CheckValue<IkReal> x2874=IKPowWithIntegerCheck(IKsign(((((2.0)*x2871*x2872))+((x2869*x2870))+(((-1.0)*x2870))+(((-1.0)*x2869*(r10*r10)))+(((-1.0)*(r12*r12))))),-1);
if(!x2874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2873.value)+(((1.5707963267949)*(x2874.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2875=IKsin(j4);
IkReal x2876=IKcos(j4);
IkReal x2877=(cj5*r10);
IkReal x2878=(r01*sj5);
IkReal x2879=(cj5*r00);
IkReal x2880=(cj5*r20);
IkReal x2881=((1.0)*x2876);
IkReal x2882=((1.0)*x2875);
IkReal x2883=(sj5*x2875);
evalcond[0]=((((-1.0)*r22*x2881))+((r21*x2883))+(((-1.0)*x2880*x2882)));
evalcond[1]=((((-1.0)*r02*x2881))+((x2875*x2878))+(((-1.0)*x2879*x2882)));
evalcond[2]=(((x2876*x2877))+(((-1.0)*r11*sj5*x2881))+(((-1.0)*r12*x2882)));
evalcond[3]=((-1.0)+((r11*x2883))+(((-1.0)*x2877*x2882))+(((-1.0)*r12*x2881)));
evalcond[4]=(((cj2*sj1))+((x2876*x2879))+(((-1.0)*r02*x2882))+((cj1*sj2))+(((-1.0)*x2878*x2881)));
evalcond[5]=((((-1.0)*r22*x2882))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2876*x2880))+(((-1.0)*r21*sj5*x2881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2884=((1.0)*cj5);
CheckValue<IkReal> x2885=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2884))+(((-1.0)*r20*sj5)))),-1);
if(!x2885.valid){
continue;
}
CheckValue<IkReal> x2886 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2885.value)))+(x2886.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2887=IKsin(j4);
IkReal x2888=IKcos(j4);
IkReal x2889=(cj5*r10);
IkReal x2890=(r01*sj5);
IkReal x2891=(cj5*r00);
IkReal x2892=(cj5*r20);
IkReal x2893=((1.0)*x2888);
IkReal x2894=((1.0)*x2887);
IkReal x2895=(sj5*x2887);
evalcond[0]=((((-1.0)*r22*x2893))+((r21*x2895))+(((-1.0)*x2892*x2894)));
evalcond[1]=((((-1.0)*x2891*x2894))+(((-1.0)*r02*x2893))+((x2887*x2890)));
evalcond[2]=((((-1.0)*r11*sj5*x2893))+((x2888*x2889))+(((-1.0)*r12*x2894)));
evalcond[3]=((-1.0)+(((-1.0)*x2889*x2894))+((r11*x2895))+(((-1.0)*r12*x2893)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2890*x2893))+(((-1.0)*r02*x2894))+((cj1*sj2))+((x2888*x2891)));
evalcond[5]=((((-1.0)*r22*x2894))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2888*x2892))+(((-1.0)*r21*sj5*x2893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2896 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2896.valid){
continue;
}
CheckValue<IkReal> x2897=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2896.value)+(((1.5707963267949)*(x2897.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2898=IKsin(j4);
IkReal x2899=IKcos(j4);
IkReal x2900=(cj5*r10);
IkReal x2901=(r01*sj5);
IkReal x2902=(cj5*r00);
IkReal x2903=(cj5*r20);
IkReal x2904=((1.0)*x2899);
IkReal x2905=((1.0)*x2898);
IkReal x2906=(sj5*x2898);
evalcond[0]=(((r21*x2906))+(((-1.0)*x2903*x2905))+(((-1.0)*r22*x2904)));
evalcond[1]=((((-1.0)*x2902*x2905))+(((-1.0)*r02*x2904))+((x2898*x2901)));
evalcond[2]=(((x2899*x2900))+(((-1.0)*r11*sj5*x2904))+(((-1.0)*r12*x2905)));
evalcond[3]=((-1.0)+(((-1.0)*x2900*x2905))+(((-1.0)*r12*x2904))+((r11*x2906)));
evalcond[4]=((((-1.0)*r02*x2905))+((cj2*sj1))+((x2899*x2902))+(((-1.0)*x2901*x2904))+((cj1*sj2)));
evalcond[5]=(((x2899*x2903))+(((-1.0)*r21*sj5*x2904))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2907=((-1.0)*r00);
IkReal x2909 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2909)==0){
continue;
}
IkReal x2908=pow(x2909,-0.5);
CheckValue<IkReal> x2910 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2907),IKFAST_ATAN2_MAGTHRESH);
if(!x2910.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2910.value));
IkReal gconst91=(r01*x2908);
IkReal gconst92=(x2907*x2908);
CheckValue<IkReal> x2911 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2911.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2911.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2912=((-1.0)*r00);
IkReal x2913=x2908;
CheckValue<IkReal> x2915 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2912),IKFAST_ATAN2_MAGTHRESH);
if(!x2915.valid){
continue;
}
IkReal x2914=((-1.0)*(x2915.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2914;
IkReal gconst90=x2914;
IkReal gconst91=(r01*x2913);
IkReal gconst92=(x2912*x2913);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2916=((1.0)*sj0);
IkReal x2917=((1.0)*cj0);
CheckValue<IkReal> x2918=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2918.valid){
continue;
}
CheckValue<IkReal> x2919 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2916))+(((-1.0)*r02*x2917)))),IkReal(((((-1.0)*gconst91*r11*x2916))+(((-1.0)*gconst91*r01*x2917))+((cj0*gconst92*r00))+((gconst92*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2918.value)))+(x2919.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2920=IKsin(j4);
IkReal x2921=IKcos(j4);
IkReal x2922=((1.0)*cj2);
IkReal x2923=(gconst92*r00);
IkReal x2924=(gconst92*r20);
IkReal x2925=((1.0)*sj0);
IkReal x2926=(gconst92*r10);
IkReal x2927=(cj1*sj2);
IkReal x2928=((1.0)*x2921);
IkReal x2929=(gconst91*x2920);
IkReal x2930=((1.0)*x2920);
evalcond[0]=(((r21*x2929))+(((-1.0)*x2924*x2930))+(((-1.0)*r22*x2928)));
evalcond[1]=(cj0+(((-1.0)*r12*x2928))+((r11*x2929))+(((-1.0)*x2926*x2930)));
evalcond[2]=((((-1.0)*r02*x2928))+(((-1.0)*x2923*x2930))+(((-1.0)*x2925))+((r01*x2929)));
evalcond[3]=(((x2921*x2924))+(((-1.0)*gconst91*r21*x2928))+((sj1*sj2))+(((-1.0)*cj1*x2922))+(((-1.0)*r22*x2930)));
evalcond[4]=(((x2921*x2923))+(((-1.0)*cj0*sj1*x2922))+(((-1.0)*cj0*x2927))+(((-1.0)*gconst91*r01*x2928))+(((-1.0)*r02*x2930)));
evalcond[5]=(((x2921*x2926))+(((-1.0)*sj0*sj1*x2922))+(((-1.0)*x2925*x2927))+(((-1.0)*gconst91*r11*x2928))+(((-1.0)*r12*x2930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2931=((1.0)*gconst92);
CheckValue<IkReal> x2932 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2931)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2932.valid){
continue;
}
CheckValue<IkReal> x2933=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2931)))),-1);
if(!x2933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2932.value)+(((1.5707963267949)*(x2933.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2934=IKsin(j4);
IkReal x2935=IKcos(j4);
IkReal x2936=((1.0)*cj2);
IkReal x2937=(gconst92*r00);
IkReal x2938=(gconst92*r20);
IkReal x2939=((1.0)*sj0);
IkReal x2940=(gconst92*r10);
IkReal x2941=(cj1*sj2);
IkReal x2942=((1.0)*x2935);
IkReal x2943=(gconst91*x2934);
IkReal x2944=((1.0)*x2934);
evalcond[0]=(((r21*x2943))+(((-1.0)*r22*x2942))+(((-1.0)*x2938*x2944)));
evalcond[1]=((((-1.0)*x2940*x2944))+(((-1.0)*r12*x2942))+cj0+((r11*x2943)));
evalcond[2]=((((-1.0)*r02*x2942))+(((-1.0)*x2939))+((r01*x2943))+(((-1.0)*x2937*x2944)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2936))+((x2935*x2938))+(((-1.0)*r22*x2944))+(((-1.0)*gconst91*r21*x2942)));
evalcond[4]=((((-1.0)*r02*x2944))+(((-1.0)*cj0*x2941))+(((-1.0)*cj0*sj1*x2936))+((x2935*x2937))+(((-1.0)*gconst91*r01*x2942)));
evalcond[5]=(((x2935*x2940))+(((-1.0)*r12*x2944))+(((-1.0)*x2939*x2941))+(((-1.0)*gconst91*r11*x2942))+(((-1.0)*sj0*sj1*x2936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2945=((-1.0)*r01);
IkReal x2947 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2947)==0){
continue;
}
IkReal x2946=pow(x2947,-0.5);
CheckValue<IkReal> x2948 = IKatan2WithCheck(IkReal(x2945),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2948.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2948.value))));
IkReal gconst94=(x2945*x2946);
IkReal gconst95=((1.0)*r00*x2946);
CheckValue<IkReal> x2949 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2949.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2949.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2950=((-1.0)*r01);
CheckValue<IkReal> x2953 = IKatan2WithCheck(IkReal(x2950),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2953.valid){
continue;
}
IkReal x2951=((1.0)*(x2953.value));
IkReal x2952=x2946;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2951)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2951)));
IkReal gconst94=(x2950*x2952);
IkReal gconst95=((1.0)*r00*x2952);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2954=((-1.0)*r01);
CheckValue<IkReal> x2957 = IKatan2WithCheck(IkReal(x2954),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2957.valid){
continue;
}
IkReal x2955=((1.0)*(x2957.value));
IkReal x2956=x2946;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2955)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2955)));
IkReal gconst94=(x2954*x2956);
IkReal gconst95=((1.0)*r00*x2956);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2958=((-1.0)*r01);
CheckValue<IkReal> x2961 = IKatan2WithCheck(IkReal(x2958),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2961.valid){
continue;
}
IkReal x2959=((1.0)*(x2961.value));
IkReal x2960=x2946;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2959)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2959)));
IkReal gconst94=(x2958*x2960);
IkReal gconst95=((1.0)*r00*x2960);
IkReal x2962=r02*r02;
IkReal x2963=(r12*sj0);
IkReal x2964=((1.0)*cj0);
IkReal x2965=x2946;
j4eval[0]=((IKabs(((((-1.0)*x2963))+(((-1.0)*r02*x2964)))))+(IKabs((((r02*x2963*x2965))+((cj0*x2962*x2965))+(((-1.0)*x2964*x2965))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2966=((1.0)*sj0);
IkReal x2967=((1.0)*cj0);
CheckValue<IkReal> x2968=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2968.valid){
continue;
}
CheckValue<IkReal> x2969 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2967))+(((-1.0)*r12*x2966)))),IkReal(((((-1.0)*gconst94*r01*x2967))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r11*x2966))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2968.value)))+(x2969.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2970=IKsin(j4);
IkReal x2971=IKcos(j4);
IkReal x2972=(gconst94*r11);
IkReal x2973=((1.0)*cj2);
IkReal x2974=(gconst94*r21);
IkReal x2975=((1.0)*sj0);
IkReal x2976=(gconst94*r01);
IkReal x2977=(cj1*sj2);
IkReal x2978=((1.0)*x2971);
IkReal x2979=(gconst95*x2971);
IkReal x2980=((1.0)*x2970);
IkReal x2981=(gconst95*x2980);
evalcond[0]=(((x2970*x2974))+(((-1.0)*r20*x2981))+(((-1.0)*r22*x2978)));
evalcond[1]=(((x2970*x2972))+cj0+(((-1.0)*r10*x2981))+(((-1.0)*r12*x2978)));
evalcond[2]=(((x2970*x2976))+(((-1.0)*r00*x2981))+(((-1.0)*r02*x2978))+(((-1.0)*x2975)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2974*x2978))+(((-1.0)*r22*x2980))+(((-1.0)*cj1*x2973))+((r20*x2979)));
evalcond[4]=((((-1.0)*cj0*x2977))+(((-1.0)*x2976*x2978))+((r00*x2979))+(((-1.0)*r02*x2980))+(((-1.0)*cj0*sj1*x2973)));
evalcond[5]=((((-1.0)*x2972*x2978))+(((-1.0)*x2975*x2977))+(((-1.0)*r12*x2980))+((r10*x2979))+(((-1.0)*sj0*sj1*x2973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2982=((1.0)*gconst95);
CheckValue<IkReal> x2983=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2982)))),-1);
if(!x2983.valid){
continue;
}
CheckValue<IkReal> x2984 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2983.value)))+(x2984.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2985=IKsin(j4);
IkReal x2986=IKcos(j4);
IkReal x2987=(gconst94*r11);
IkReal x2988=((1.0)*cj2);
IkReal x2989=(gconst94*r21);
IkReal x2990=((1.0)*sj0);
IkReal x2991=(gconst94*r01);
IkReal x2992=(cj1*sj2);
IkReal x2993=((1.0)*x2986);
IkReal x2994=(gconst95*x2986);
IkReal x2995=((1.0)*x2985);
IkReal x2996=(gconst95*x2995);
evalcond[0]=((((-1.0)*r22*x2993))+(((-1.0)*r20*x2996))+((x2985*x2989)));
evalcond[1]=(cj0+(((-1.0)*r12*x2993))+(((-1.0)*r10*x2996))+((x2985*x2987)));
evalcond[2]=((((-1.0)*x2990))+((x2985*x2991))+(((-1.0)*r02*x2993))+(((-1.0)*r00*x2996)));
evalcond[3]=((((-1.0)*r22*x2995))+(((-1.0)*cj1*x2988))+((r20*x2994))+((sj1*sj2))+(((-1.0)*x2989*x2993)));
evalcond[4]=((((-1.0)*cj0*x2992))+((r00*x2994))+(((-1.0)*cj0*sj1*x2988))+(((-1.0)*x2991*x2993))+(((-1.0)*r02*x2995)));
evalcond[5]=((((-1.0)*x2987*x2993))+(((-1.0)*r12*x2995))+(((-1.0)*sj0*sj1*x2988))+(((-1.0)*x2990*x2992))+((r10*x2994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2997=((1.0)*gconst95);
CheckValue<IkReal> x2998 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x2997)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2998.valid){
continue;
}
CheckValue<IkReal> x2999=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2997)))),-1);
if(!x2999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2998.value)+(((1.5707963267949)*(x2999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3000=IKsin(j4);
IkReal x3001=IKcos(j4);
IkReal x3002=(gconst94*r11);
IkReal x3003=((1.0)*cj2);
IkReal x3004=(gconst94*r21);
IkReal x3005=((1.0)*sj0);
IkReal x3006=(gconst94*r01);
IkReal x3007=(cj1*sj2);
IkReal x3008=((1.0)*x3001);
IkReal x3009=(gconst95*x3001);
IkReal x3010=((1.0)*x3000);
IkReal x3011=(gconst95*x3010);
evalcond[0]=((((-1.0)*r22*x3008))+((x3000*x3004))+(((-1.0)*r20*x3011)));
evalcond[1]=((((-1.0)*r10*x3011))+cj0+((x3000*x3002))+(((-1.0)*r12*x3008)));
evalcond[2]=((((-1.0)*r02*x3008))+(((-1.0)*r00*x3011))+((x3000*x3006))+(((-1.0)*x3005)));
evalcond[3]=((((-1.0)*r22*x3010))+((sj1*sj2))+(((-1.0)*cj1*x3003))+((r20*x3009))+(((-1.0)*x3004*x3008)));
evalcond[4]=(((r00*x3009))+(((-1.0)*r02*x3010))+(((-1.0)*x3006*x3008))+(((-1.0)*cj0*x3007))+(((-1.0)*cj0*sj1*x3003)));
evalcond[5]=((((-1.0)*x3002*x3008))+(((-1.0)*sj0*sj1*x3003))+((r10*x3009))+(((-1.0)*r12*x3010))+(((-1.0)*x3005*x3007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3012=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3012;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3012);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3013=((1.0)*cj5);
IkReal x3014=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3013)));
j4eval[0]=x3014;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3013)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3014);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3015=cj5*cj5;
IkReal x3016=r01*r01;
IkReal x3017=(r01*sj5);
IkReal x3018=(cj5*r00);
IkReal x3019=(((x3015*x3016))+(((-1.0)*(r02*r02)))+(((-1.0)*x3015*(r00*r00)))+(((2.0)*x3017*x3018))+(((-1.0)*x3016)));
j4eval[0]=x3019;
j4eval[1]=IKsign(x3019);
j4eval[2]=((IKabs(r02))+(IKabs((x3018+(((-1.0)*x3017))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3020=cj5*cj5;
IkReal x3021=r01*r01;
IkReal x3022=(r01*sj5);
IkReal x3023=(cj5*r00);
CheckValue<IkReal> x3024=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3021))+(((-1.0)*(r02*r02)))+((x3020*x3021))+(((2.0)*x3022*x3023))+(((-1.0)*x3020*(r00*r00))))),-1);
if(!x3024.valid){
continue;
}
CheckValue<IkReal> x3025 = IKatan2WithCheck(IkReal((x3023+(((-1.0)*x3022)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3024.value)))+(x3025.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3026=IKsin(j4);
IkReal x3027=IKcos(j4);
IkReal x3028=(cj5*r10);
IkReal x3029=(r01*sj5);
IkReal x3030=((1.0)*cj2);
IkReal x3031=(cj5*r00);
IkReal x3032=(cj5*r20);
IkReal x3033=((1.0)*x3027);
IkReal x3034=((1.0)*x3026);
IkReal x3035=(sj5*x3026);
evalcond[0]=(((r21*x3035))+(((-1.0)*r22*x3033))+(((-1.0)*x3032*x3034)));
evalcond[1]=(((r11*x3035))+(((-1.0)*x3028*x3034))+(((-1.0)*r12*x3033)));
evalcond[2]=((((-1.0)*x3029*x3033))+(((-1.0)*r02*x3034))+((x3027*x3031)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3033))+(((-1.0)*x3031*x3034))+((x3026*x3029)));
evalcond[4]=((((-1.0)*cj1*x3030))+(((-1.0)*r21*sj5*x3033))+((sj1*sj2))+(((-1.0)*r22*x3034))+((x3027*x3032)));
evalcond[5]=(((x3027*x3028))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3034))+(((-1.0)*r11*sj5*x3033))+(((-1.0)*sj1*x3030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3036=((1.0)*cj5);
CheckValue<IkReal> x3037 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3036))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3037.valid){
continue;
}
CheckValue<IkReal> x3038=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3036)))),-1);
if(!x3038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3037.value)+(((1.5707963267949)*(x3038.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3039=IKsin(j4);
IkReal x3040=IKcos(j4);
IkReal x3041=(cj5*r10);
IkReal x3042=(r01*sj5);
IkReal x3043=((1.0)*cj2);
IkReal x3044=(cj5*r00);
IkReal x3045=(cj5*r20);
IkReal x3046=((1.0)*x3040);
IkReal x3047=((1.0)*x3039);
IkReal x3048=(sj5*x3039);
evalcond[0]=(((r21*x3048))+(((-1.0)*x3045*x3047))+(((-1.0)*r22*x3046)));
evalcond[1]=((((-1.0)*r12*x3046))+(((-1.0)*x3041*x3047))+((r11*x3048)));
evalcond[2]=((((-1.0)*x3042*x3046))+((x3040*x3044))+(((-1.0)*r02*x3047)));
evalcond[3]=((-1.0)+((x3039*x3042))+(((-1.0)*x3044*x3047))+(((-1.0)*r02*x3046)));
evalcond[4]=((((-1.0)*r22*x3047))+((sj1*sj2))+(((-1.0)*cj1*x3043))+((x3040*x3045))+(((-1.0)*r21*sj5*x3046)));
evalcond[5]=((((-1.0)*r12*x3047))+(((-1.0)*cj1*sj2))+((x3040*x3041))+(((-1.0)*r11*sj5*x3046))+(((-1.0)*sj1*x3043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3049=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3049.valid){
continue;
}
CheckValue<IkReal> x3050 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3049.value)))+(x3050.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3051=IKsin(j4);
IkReal x3052=IKcos(j4);
IkReal x3053=(cj5*r10);
IkReal x3054=(r01*sj5);
IkReal x3055=((1.0)*cj2);
IkReal x3056=(cj5*r00);
IkReal x3057=(cj5*r20);
IkReal x3058=((1.0)*x3052);
IkReal x3059=((1.0)*x3051);
IkReal x3060=(sj5*x3051);
evalcond[0]=((((-1.0)*x3057*x3059))+(((-1.0)*r22*x3058))+((r21*x3060)));
evalcond[1]=((((-1.0)*x3053*x3059))+((r11*x3060))+(((-1.0)*r12*x3058)));
evalcond[2]=((((-1.0)*r02*x3059))+((x3052*x3056))+(((-1.0)*x3054*x3058)));
evalcond[3]=((-1.0)+(((-1.0)*x3056*x3059))+((x3051*x3054))+(((-1.0)*r02*x3058)));
evalcond[4]=(((sj1*sj2))+((x3052*x3057))+(((-1.0)*r21*sj5*x3058))+(((-1.0)*cj1*x3055))+(((-1.0)*r22*x3059)));
evalcond[5]=((((-1.0)*sj1*x3055))+(((-1.0)*cj1*sj2))+((x3052*x3053))+(((-1.0)*r12*x3059))+(((-1.0)*r11*sj5*x3058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3061=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3061;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3061);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3062=((1.0)*cj5);
IkReal x3063=((((-1.0)*r21*x3062))+(((-1.0)*r20*sj5)));
j4eval[0]=x3063;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3062))+((r11*sj5))))));
j4eval[2]=IKsign(x3063);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3064=cj5*cj5;
IkReal x3065=r01*r01;
IkReal x3066=(cj5*r00);
IkReal x3067=(r01*sj5);
IkReal x3068=(x3065+((x3064*(r00*r00)))+(((-1.0)*x3064*x3065))+(r02*r02)+(((-2.0)*x3066*x3067)));
j4eval[0]=x3068;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x3067))+x3066))));
j4eval[2]=IKsign(x3068);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3069=cj5*cj5;
IkReal x3070=r01*r01;
IkReal x3071=(r01*sj5);
IkReal x3072=(cj5*r00);
CheckValue<IkReal> x3073=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3071*x3072))+((x3069*(r00*r00)))+x3070+(((-1.0)*x3069*x3070))+(r02*r02))),-1);
if(!x3073.valid){
continue;
}
CheckValue<IkReal> x3074 = IKatan2WithCheck(IkReal(((((-1.0)*x3071))+x3072)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3073.value)))+(x3074.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3075=IKsin(j4);
IkReal x3076=IKcos(j4);
IkReal x3077=(cj5*r10);
IkReal x3078=(r01*sj5);
IkReal x3079=(cj5*r00);
IkReal x3080=(cj5*r20);
IkReal x3081=((1.0)*x3076);
IkReal x3082=((1.0)*x3075);
IkReal x3083=(sj5*x3075);
evalcond[0]=((((-1.0)*x3080*x3082))+((r21*x3083))+(((-1.0)*r22*x3081)));
evalcond[1]=(((r11*x3083))+(((-1.0)*x3077*x3082))+(((-1.0)*r12*x3081)));
evalcond[2]=(((x3076*x3079))+(((-1.0)*x3078*x3081))+(((-1.0)*r02*x3082)));
evalcond[3]=((1.0)+(((-1.0)*x3079*x3082))+((x3075*x3078))+(((-1.0)*r02*x3081)));
evalcond[4]=(((cj2*sj1))+((x3076*x3077))+((cj1*sj2))+(((-1.0)*r12*x3082))+(((-1.0)*r11*sj5*x3081)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3081))+(((-1.0)*r22*x3082))+((x3076*x3080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3084=((1.0)*cj5);
CheckValue<IkReal> x3085=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3084))+(((-1.0)*r20*sj5)))),-1);
if(!x3085.valid){
continue;
}
CheckValue<IkReal> x3086 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x3084)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3085.value)))+(x3086.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3087=IKsin(j4);
IkReal x3088=IKcos(j4);
IkReal x3089=(cj5*r10);
IkReal x3090=(r01*sj5);
IkReal x3091=(cj5*r00);
IkReal x3092=(cj5*r20);
IkReal x3093=((1.0)*x3088);
IkReal x3094=((1.0)*x3087);
IkReal x3095=(sj5*x3087);
evalcond[0]=((((-1.0)*r22*x3093))+((r21*x3095))+(((-1.0)*x3092*x3094)));
evalcond[1]=((((-1.0)*r12*x3093))+(((-1.0)*x3089*x3094))+((r11*x3095)));
evalcond[2]=((((-1.0)*r02*x3094))+((x3088*x3091))+(((-1.0)*x3090*x3093)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3093))+((x3087*x3090))+(((-1.0)*x3091*x3094)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x3094))+((cj1*sj2))+(((-1.0)*r11*sj5*x3093))+((x3088*x3089)));
evalcond[5]=((((-1.0)*r22*x3094))+((x3088*x3092))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3096 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3096.valid){
continue;
}
CheckValue<IkReal> x3097=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3096.value)+(((1.5707963267949)*(x3097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3098=IKsin(j4);
IkReal x3099=IKcos(j4);
IkReal x3100=(cj5*r10);
IkReal x3101=(r01*sj5);
IkReal x3102=(cj5*r00);
IkReal x3103=(cj5*r20);
IkReal x3104=((1.0)*x3099);
IkReal x3105=((1.0)*x3098);
IkReal x3106=(sj5*x3098);
evalcond[0]=((((-1.0)*x3103*x3105))+((r21*x3106))+(((-1.0)*r22*x3104)));
evalcond[1]=(((r11*x3106))+(((-1.0)*r12*x3104))+(((-1.0)*x3100*x3105)));
evalcond[2]=(((x3099*x3102))+(((-1.0)*x3101*x3104))+(((-1.0)*r02*x3105)));
evalcond[3]=((1.0)+((x3098*x3101))+(((-1.0)*x3102*x3105))+(((-1.0)*r02*x3104)));
evalcond[4]=(((cj2*sj1))+((x3099*x3100))+((cj1*sj2))+(((-1.0)*r12*x3105))+(((-1.0)*r11*sj5*x3104)));
evalcond[5]=(((x3099*x3103))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x3105))+(((-1.0)*r21*sj5*x3104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3107=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3107);
rxp1_1=(px*r21);
rxp1_2=(r11*x3107);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3108=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3108);
rxp1_1=(px*r21);
rxp1_2=(r11*x3108);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3109=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3109);
rxp1_1=(px*r21);
rxp1_2=(r11*x3109);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3112=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3112.valid){
continue;
}
IkReal x3110=x3112.value;
IkReal x3111=(sj0*x3110);
cj4array[0]=(((cj1*sj2*x3111))+((cj2*sj1*x3111)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3113=IKsin(j4);
IkReal x3114=IKcos(j4);
IkReal x3115=(cj5*r20);
IkReal x3116=(r21*sj5);
IkReal x3117=((1.0)*x3113);
IkReal x3118=((1.0)*x3114);
evalcond[0]=((-1.0)*r02*x3113);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3118)));
evalcond[2]=((((-1.0)*x3115*x3117))+((x3113*x3116)));
evalcond[3]=((((-1.0)*cj5*r10*x3117))+((r11*sj5*x3113)));
evalcond[4]=((((-1.0)*cj1*cj2))+((x3114*x3115))+((sj1*sj2))+(((-1.0)*x3116*x3118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3120=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3120.valid){
continue;
}
IkReal x3119=x3120.value;
cj4array[0]=(((cj1*cj2*x3119))+(((-1.0)*sj1*sj2*x3119)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3121=IKsin(j4);
IkReal x3122=IKcos(j4);
IkReal x3123=(r11*sj5);
IkReal x3124=((1.0)*sj0);
IkReal x3125=((1.0)*x3122);
IkReal x3126=((1.0)*cj5*x3121);
evalcond[0]=((-1.0)*r02*x3121);
evalcond[1]=((((-1.0)*r02*x3125))+(((-1.0)*x3124)));
evalcond[2]=(((r21*sj5*x3121))+(((-1.0)*r20*x3126)));
evalcond[3]=((((-1.0)*r10*x3126))+((x3121*x3123)));
evalcond[4]=((((-1.0)*cj2*sj1*x3124))+(((-1.0)*cj1*sj2*x3124))+(((-1.0)*x3123*x3125))+((cj5*r10*x3122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3127=IKPowWithIntegerCheck(r02,-1);
if(!x3127.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3127.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3128=IKsin(j4);
IkReal x3129=IKcos(j4);
IkReal x3130=((1.0)*sj0);
IkReal x3131=(cj5*x3129);
IkReal x3132=(sj5*x3128);
IkReal x3133=((1.0)*sj5*x3129);
IkReal x3134=((1.0)*cj5*x3128);
evalcond[0]=((-1.0)*r02*x3128);
evalcond[1]=((((-1.0)*r20*x3134))+((r21*x3132)));
evalcond[2]=((((-1.0)*r10*x3134))+((r11*x3132)));
evalcond[3]=(((r20*x3131))+(((-1.0)*r21*x3133))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj1*sj2*x3130))+(((-1.0)*cj2*sj1*x3130))+((r10*x3131))+(((-1.0)*r11*x3133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3135=((1.0)*sj0);
IkReal x3136=((1.0)*cj0);
CheckValue<IkReal> x3137=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3137.valid){
continue;
}
CheckValue<IkReal> x3138 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3136))+(((-1.0)*r12*x3135)))),IkReal(((((-1.0)*r01*sj5*x3136))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3135)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3137.value)))+(x3138.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3139=IKsin(j4);
IkReal x3140=IKcos(j4);
IkReal x3141=(cj5*r10);
IkReal x3142=(r01*sj5);
IkReal x3143=((1.0)*cj2);
IkReal x3144=(cj5*r00);
IkReal x3145=((1.0)*sj0);
IkReal x3146=(cj5*r20);
IkReal x3147=(cj1*sj2);
IkReal x3148=((1.0)*x3140);
IkReal x3149=((1.0)*x3139);
IkReal x3150=(sj5*x3139);
evalcond[0]=((((-1.0)*x3146*x3149))+(((-1.0)*r22*x3148))+((r21*x3150)));
evalcond[1]=((((-1.0)*r12*x3148))+cj0+((r11*x3150))+(((-1.0)*x3141*x3149)));
evalcond[2]=((((-1.0)*x3145))+(((-1.0)*x3144*x3149))+(((-1.0)*r02*x3148))+((x3139*x3142)));
evalcond[3]=((((-1.0)*cj1*x3143))+(((-1.0)*r22*x3149))+((sj1*sj2))+(((-1.0)*r21*sj5*x3148))+((x3140*x3146)));
evalcond[4]=((((-1.0)*x3142*x3148))+(((-1.0)*r02*x3149))+(((-1.0)*cj0*x3147))+(((-1.0)*cj0*sj1*x3143))+((x3140*x3144)));
evalcond[5]=((((-1.0)*r12*x3149))+(((-1.0)*sj0*sj1*x3143))+(((-1.0)*x3145*x3147))+((x3140*x3141))+(((-1.0)*r11*sj5*x3148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3151=((1.0)*cj5);
CheckValue<IkReal> x3152=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3151))+(((-1.0)*r10*sj5)))),-1);
if(!x3152.valid){
continue;
}
CheckValue<IkReal> x3153 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3152.value)))+(x3153.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3154=IKsin(j4);
IkReal x3155=IKcos(j4);
IkReal x3156=(cj5*r10);
IkReal x3157=(r01*sj5);
IkReal x3158=((1.0)*cj2);
IkReal x3159=(cj5*r00);
IkReal x3160=((1.0)*sj0);
IkReal x3161=(cj5*r20);
IkReal x3162=(cj1*sj2);
IkReal x3163=((1.0)*x3155);
IkReal x3164=((1.0)*x3154);
IkReal x3165=(sj5*x3154);
evalcond[0]=((((-1.0)*x3161*x3164))+((r21*x3165))+(((-1.0)*r22*x3163)));
evalcond[1]=((((-1.0)*r12*x3163))+cj0+((r11*x3165))+(((-1.0)*x3156*x3164)));
evalcond[2]=(((x3154*x3157))+(((-1.0)*r02*x3163))+(((-1.0)*x3159*x3164))+(((-1.0)*x3160)));
evalcond[3]=(((x3155*x3161))+(((-1.0)*cj1*x3158))+((sj1*sj2))+(((-1.0)*r21*sj5*x3163))+(((-1.0)*r22*x3164)));
evalcond[4]=((((-1.0)*x3157*x3163))+((x3155*x3159))+(((-1.0)*cj0*sj1*x3158))+(((-1.0)*r02*x3164))+(((-1.0)*cj0*x3162)));
evalcond[5]=((((-1.0)*r12*x3164))+((x3155*x3156))+(((-1.0)*x3160*x3162))+(((-1.0)*sj0*sj1*x3158))+(((-1.0)*r11*sj5*x3163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3166=((1.0)*cj5);
CheckValue<IkReal> x3167 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3167.valid){
continue;
}
CheckValue<IkReal> x3168=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3166)))),-1);
if(!x3168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3167.value)+(((1.5707963267949)*(x3168.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3169=IKsin(j4);
IkReal x3170=IKcos(j4);
IkReal x3171=(cj5*r10);
IkReal x3172=(r01*sj5);
IkReal x3173=((1.0)*cj2);
IkReal x3174=(cj5*r00);
IkReal x3175=((1.0)*sj0);
IkReal x3176=(cj5*r20);
IkReal x3177=(cj1*sj2);
IkReal x3178=((1.0)*x3170);
IkReal x3179=((1.0)*x3169);
IkReal x3180=(sj5*x3169);
evalcond[0]=((((-1.0)*x3176*x3179))+(((-1.0)*r22*x3178))+((r21*x3180)));
evalcond[1]=(cj0+(((-1.0)*r12*x3178))+((r11*x3180))+(((-1.0)*x3171*x3179)));
evalcond[2]=((((-1.0)*x3174*x3179))+(((-1.0)*x3175))+((x3169*x3172))+(((-1.0)*r02*x3178)));
evalcond[3]=((((-1.0)*cj1*x3173))+((sj1*sj2))+((x3170*x3176))+(((-1.0)*r22*x3179))+(((-1.0)*r21*sj5*x3178)));
evalcond[4]=(((x3170*x3174))+(((-1.0)*x3172*x3178))+(((-1.0)*cj0*sj1*x3173))+(((-1.0)*r02*x3179))+(((-1.0)*cj0*x3177)));
evalcond[5]=((((-1.0)*r12*x3179))+((x3170*x3171))+(((-1.0)*sj0*sj1*x3173))+(((-1.0)*r11*sj5*x3178))+(((-1.0)*x3175*x3177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3181=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3181;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3181);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3182=r21*r21;
IkReal x3183=cj5*cj5;
IkReal x3184=(sj1*sj2);
IkReal x3185=(r21*sj5);
IkReal x3186=(cj5*r20);
IkReal x3187=(cj1*cj2);
IkReal x3188=(((x3182*x3183))+(((-1.0)*(r22*r22)))+(((-1.0)*x3183*(r20*r20)))+(((-1.0)*x3182))+(((2.0)*x3185*x3186)));
j4eval[0]=x3188;
j4eval[1]=((IKabs((((x3184*x3185))+(((-1.0)*x3184*x3186))+(((-1.0)*x3185*x3187))+((x3186*x3187)))))+(IKabs((((r22*x3184))+(((-1.0)*r22*x3187))))));
j4eval[2]=IKsign(x3188);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3189=IKcos(j0);
IkReal x3190=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x3190))+(((0.425)*x3189)));
evalcond[1]=((((0.134)*x3189))+(((-1.0)*py))+(((0.425)*x3190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3191=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3191;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3191);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3192=((1.0)*cj5);
IkReal x3193=((((-1.0)*r01*x3192))+(((-1.0)*r00*sj5)));
j4eval[0]=x3193;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3192)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3193);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3194=((1.0)*cj5);
IkReal x3195=((((-1.0)*r01*x3194))+(((-1.0)*r00*sj5)));
j4eval[0]=x3195;
j4eval[1]=IKsign(x3195);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3194))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3196=((1.0)*cj5);
CheckValue<IkReal> x3197 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3196)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3197.valid){
continue;
}
CheckValue<IkReal> x3198=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3196))+(((-1.0)*r00*sj5)))),-1);
if(!x3198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3197.value)+(((1.5707963267949)*(x3198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3199=IKcos(j4);
IkReal x3200=IKsin(j4);
IkReal x3201=((1.0)*sj0);
IkReal x3202=(cj5*r00);
IkReal x3203=(cj5*r10);
IkReal x3204=(cj5*r20);
IkReal x3205=((1.0)*x3199);
IkReal x3206=((1.0)*x3200);
IkReal x3207=(sj5*x3199);
IkReal x3208=(sj5*x3200);
evalcond[0]=(((r22*x3200))+(((-1.0)*x3204*x3205))+((r21*x3207)));
evalcond[1]=((((-1.0)*x3204*x3206))+(((-1.0)*r22*x3205))+((r21*x3208)));
evalcond[2]=(cj0+((r11*x3208))+(((-1.0)*r12*x3205))+(((-1.0)*x3203*x3206)));
evalcond[3]=(((r01*x3207))+(((-1.0)*x3202*x3205))+((r02*x3200))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3207))+((r12*x3200))+(((-1.0)*x3203*x3205))+(((-1.0)*x3201)));
evalcond[5]=((((-1.0)*r02*x3205))+((r01*x3208))+(((-1.0)*x3202*x3206))+(((-1.0)*x3201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3209=((1.0)*cj5);
CheckValue<IkReal> x3210=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3209)))),-1);
if(!x3210.valid){
continue;
}
CheckValue<IkReal> x3211 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3210.value)))+(x3211.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3212=IKcos(j4);
IkReal x3213=IKsin(j4);
IkReal x3214=((1.0)*sj0);
IkReal x3215=(cj5*r00);
IkReal x3216=(cj5*r10);
IkReal x3217=(cj5*r20);
IkReal x3218=((1.0)*x3212);
IkReal x3219=((1.0)*x3213);
IkReal x3220=(sj5*x3212);
IkReal x3221=(sj5*x3213);
evalcond[0]=(((r22*x3213))+(((-1.0)*x3217*x3218))+((r21*x3220)));
evalcond[1]=((((-1.0)*x3217*x3219))+((r21*x3221))+(((-1.0)*r22*x3218)));
evalcond[2]=(cj0+((r11*x3221))+(((-1.0)*x3216*x3219))+(((-1.0)*r12*x3218)));
evalcond[3]=((((-1.0)*x3215*x3218))+((r01*x3220))+(((-1.0)*cj0))+((r02*x3213)));
evalcond[4]=(((r11*x3220))+((r12*x3213))+(((-1.0)*x3216*x3218))+(((-1.0)*x3214)));
evalcond[5]=((((-1.0)*x3215*x3219))+((r01*x3221))+(((-1.0)*x3214))+(((-1.0)*r02*x3218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3222 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3222.valid){
continue;
}
CheckValue<IkReal> x3223=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3222.value)+(((1.5707963267949)*(x3223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3224=IKcos(j4);
IkReal x3225=IKsin(j4);
IkReal x3226=((1.0)*sj0);
IkReal x3227=(cj5*r00);
IkReal x3228=(cj5*r10);
IkReal x3229=(cj5*r20);
IkReal x3230=((1.0)*x3224);
IkReal x3231=((1.0)*x3225);
IkReal x3232=(sj5*x3224);
IkReal x3233=(sj5*x3225);
evalcond[0]=((((-1.0)*x3229*x3230))+((r22*x3225))+((r21*x3232)));
evalcond[1]=((((-1.0)*x3229*x3231))+(((-1.0)*r22*x3230))+((r21*x3233)));
evalcond[2]=(cj0+(((-1.0)*x3228*x3231))+((r11*x3233))+(((-1.0)*r12*x3230)));
evalcond[3]=(((r02*x3225))+((r01*x3232))+(((-1.0)*x3227*x3230))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3225))+(((-1.0)*x3228*x3230))+((r11*x3232))+(((-1.0)*x3226)));
evalcond[5]=((((-1.0)*r02*x3230))+((r01*x3233))+(((-1.0)*x3227*x3231))+(((-1.0)*x3226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3234=IKcos(j0);
IkReal x3235=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x3235))+(((0.425)*x3234)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x3234))+(((0.425)*x3235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3236=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3236;
j4eval[1]=IKsign(x3236);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3237=((1.0)*cj5);
IkReal x3238=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3237)));
j4eval[0]=x3238;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3237)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3238);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3239=cj5*cj5;
IkReal x3240=((1.0)*r20);
IkReal x3241=(r01*r21);
IkReal x3242=(r21*sj5);
IkReal x3243=(((cj5*r01*r20*sj5))+(((-1.0)*x3241))+(((-1.0)*r00*x3239*x3240))+(((-1.0)*r02*r22))+((x3239*x3241))+((cj5*r00*x3242)));
j4eval[0]=x3243;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x3240))+((cj0*x3242))))));
j4eval[2]=IKsign(x3243);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3244=cj5*cj5;
IkReal x3245=((1.0)*r20);
IkReal x3246=(r01*r21);
IkReal x3247=(r21*sj5);
CheckValue<IkReal> x3248 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3245))+((cj0*x3247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3248.valid){
continue;
}
CheckValue<IkReal> x3249=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x3246))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3244*x3245))+((x3244*x3246))+((cj5*r00*x3247)))),-1);
if(!x3249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3248.value)+(((1.5707963267949)*(x3249.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3250=IKcos(j4);
IkReal x3251=IKsin(j4);
IkReal x3252=(cj5*r00);
IkReal x3253=(cj5*r10);
IkReal x3254=(cj5*r20);
IkReal x3255=((1.0)*x3250);
IkReal x3256=((1.0)*x3251);
IkReal x3257=(sj5*x3250);
IkReal x3258=(sj5*x3251);
evalcond[0]=((((-1.0)*x3254*x3255))+((r21*x3257))+((r22*x3251)));
evalcond[1]=((((-1.0)*x3254*x3256))+((r21*x3258))+(((-1.0)*r22*x3255)));
evalcond[2]=(cj0+((r02*x3251))+((r01*x3257))+(((-1.0)*x3252*x3255)));
evalcond[3]=(((r12*x3251))+sj0+((r11*x3257))+(((-1.0)*x3253*x3255)));
evalcond[4]=(cj0+((r11*x3258))+(((-1.0)*x3253*x3256))+(((-1.0)*r12*x3255)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3255))+((r01*x3258))+(((-1.0)*x3252*x3256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3259=((1.0)*cj5);
CheckValue<IkReal> x3260 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3259)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3260.valid){
continue;
}
CheckValue<IkReal> x3261=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3259)))),-1);
if(!x3261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3260.value)+(((1.5707963267949)*(x3261.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3262=IKcos(j4);
IkReal x3263=IKsin(j4);
IkReal x3264=(cj5*r00);
IkReal x3265=(cj5*r10);
IkReal x3266=(cj5*r20);
IkReal x3267=((1.0)*x3262);
IkReal x3268=((1.0)*x3263);
IkReal x3269=(sj5*x3262);
IkReal x3270=(sj5*x3263);
evalcond[0]=(((r21*x3269))+(((-1.0)*x3266*x3267))+((r22*x3263)));
evalcond[1]=(((r21*x3270))+(((-1.0)*x3266*x3268))+(((-1.0)*r22*x3267)));
evalcond[2]=(((r01*x3269))+cj0+(((-1.0)*x3264*x3267))+((r02*x3263)));
evalcond[3]=(sj0+(((-1.0)*x3265*x3267))+((r11*x3269))+((r12*x3263)));
evalcond[4]=(cj0+(((-1.0)*r12*x3267))+(((-1.0)*x3265*x3268))+((r11*x3270)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3270))+(((-1.0)*x3264*x3268))+(((-1.0)*r02*x3267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3271 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3271.valid){
continue;
}
CheckValue<IkReal> x3272=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3271.value)+(((1.5707963267949)*(x3272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3273=IKcos(j4);
IkReal x3274=IKsin(j4);
IkReal x3275=(cj5*r00);
IkReal x3276=(cj5*r10);
IkReal x3277=(cj5*r20);
IkReal x3278=((1.0)*x3273);
IkReal x3279=((1.0)*x3274);
IkReal x3280=(sj5*x3273);
IkReal x3281=(sj5*x3274);
evalcond[0]=(((r21*x3280))+(((-1.0)*x3277*x3278))+((r22*x3274)));
evalcond[1]=(((r21*x3281))+(((-1.0)*x3277*x3279))+(((-1.0)*r22*x3278)));
evalcond[2]=(cj0+(((-1.0)*x3275*x3278))+((r02*x3274))+((r01*x3280)));
evalcond[3]=((((-1.0)*x3276*x3278))+sj0+((r12*x3274))+((r11*x3280)));
evalcond[4]=((((-1.0)*x3276*x3279))+(((-1.0)*r12*x3278))+cj0+((r11*x3281)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3275*x3279))+(((-1.0)*r02*x3278))+((r01*x3281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3282=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3282;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3282);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3283=((1.0)*cj5);
IkReal x3284=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3283)));
j4eval[0]=x3284;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x3283))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x3284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3285=((1.0)*cj5);
IkReal x3286=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3285)));
j4eval[0]=x3286;
j4eval[1]=IKsign(x3286);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x3285))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3287=((1.0)*cj5);
CheckValue<IkReal> x3288 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3287))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3288.valid){
continue;
}
CheckValue<IkReal> x3289=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3287)))),-1);
if(!x3289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3288.value)+(((1.5707963267949)*(x3289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3290=IKcos(j4);
IkReal x3291=IKsin(j4);
IkReal x3292=((1.0)*sj0);
IkReal x3293=(cj5*r00);
IkReal x3294=(cj5*r10);
IkReal x3295=(cj5*r20);
IkReal x3296=((1.0)*x3290);
IkReal x3297=((1.0)*x3291);
IkReal x3298=(sj5*x3290);
IkReal x3299=(sj5*x3291);
evalcond[0]=(((r21*x3298))+((r22*x3291))+(((-1.0)*x3295*x3296)));
evalcond[1]=((((-1.0)*r22*x3296))+((r21*x3299))+(((-1.0)*x3295*x3297)));
evalcond[2]=((((-1.0)*r12*x3296))+cj0+(((-1.0)*x3294*x3297))+((r11*x3299)));
evalcond[3]=(((r01*x3298))+((r02*x3291))+(((-1.0)*x3293*x3296))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3292))+(((-1.0)*x3294*x3296))+((r11*x3298))+((r12*x3291)));
evalcond[5]=(((r01*x3299))+(((-1.0)*x3292))+(((-1.0)*x3293*x3297))+(((-1.0)*r02*x3296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3300=((1.0)*cj5);
CheckValue<IkReal> x3301=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3300)))),-1);
if(!x3301.valid){
continue;
}
CheckValue<IkReal> x3302 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3300)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3301.value)))+(x3302.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3303=IKcos(j4);
IkReal x3304=IKsin(j4);
IkReal x3305=((1.0)*sj0);
IkReal x3306=(cj5*r00);
IkReal x3307=(cj5*r10);
IkReal x3308=(cj5*r20);
IkReal x3309=((1.0)*x3303);
IkReal x3310=((1.0)*x3304);
IkReal x3311=(sj5*x3303);
IkReal x3312=(sj5*x3304);
evalcond[0]=(((r21*x3311))+((r22*x3304))+(((-1.0)*x3308*x3309)));
evalcond[1]=(((r21*x3312))+(((-1.0)*r22*x3309))+(((-1.0)*x3308*x3310)));
evalcond[2]=(cj0+((r11*x3312))+(((-1.0)*r12*x3309))+(((-1.0)*x3307*x3310)));
evalcond[3]=(((r02*x3304))+(((-1.0)*x3306*x3309))+((r01*x3311))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3305))+((r11*x3311))+((r12*x3304))+(((-1.0)*x3307*x3309)));
evalcond[5]=((((-1.0)*x3305))+(((-1.0)*x3306*x3310))+(((-1.0)*r02*x3309))+((r01*x3312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3313 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3313.valid){
continue;
}
CheckValue<IkReal> x3314=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3313.value)+(((1.5707963267949)*(x3314.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3315=IKcos(j4);
IkReal x3316=IKsin(j4);
IkReal x3317=((1.0)*sj0);
IkReal x3318=(cj5*r00);
IkReal x3319=(cj5*r10);
IkReal x3320=(cj5*r20);
IkReal x3321=((1.0)*x3315);
IkReal x3322=((1.0)*x3316);
IkReal x3323=(sj5*x3315);
IkReal x3324=(sj5*x3316);
evalcond[0]=(((r22*x3316))+(((-1.0)*x3320*x3321))+((r21*x3323)));
evalcond[1]=((((-1.0)*x3320*x3322))+((r21*x3324))+(((-1.0)*r22*x3321)));
evalcond[2]=(cj0+((r11*x3324))+(((-1.0)*x3319*x3322))+(((-1.0)*r12*x3321)));
evalcond[3]=(((r01*x3323))+((r02*x3316))+(((-1.0)*x3318*x3321))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3323))+(((-1.0)*x3317))+(((-1.0)*x3319*x3321))+((r12*x3316)));
evalcond[5]=((((-1.0)*r02*x3321))+((r01*x3324))+(((-1.0)*x3317))+(((-1.0)*x3318*x3322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3325=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3325;
j4eval[1]=IKsign(x3325);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3326=((1.0)*cj5);
IkReal x3327=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3326)));
j4eval[0]=x3327;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3326)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3327);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3328=cj5*cj5;
IkReal x3329=((1.0)*r20);
IkReal x3330=(r01*r21);
IkReal x3331=(r21*sj5);
IkReal x3332=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3331))+((x3328*x3330))+(((-1.0)*x3330))+(((-1.0)*r00*x3328*x3329)));
j4eval[0]=x3332;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3329))+((cj0*x3331)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3332);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3333=cj5*cj5;
IkReal x3334=((1.0)*r20);
IkReal x3335=(r01*r21);
IkReal x3336=(r21*sj5);
CheckValue<IkReal> x3337=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3333*x3335))+((cj5*r00*x3336))+(((-1.0)*x3335))+(((-1.0)*r00*x3333*x3334)))),-1);
if(!x3337.valid){
continue;
}
CheckValue<IkReal> x3338 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3336))+(((-1.0)*cj0*cj5*x3334)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3337.value)))+(x3338.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3339=IKcos(j4);
IkReal x3340=IKsin(j4);
IkReal x3341=(cj5*r00);
IkReal x3342=(cj5*r10);
IkReal x3343=(cj5*r20);
IkReal x3344=((1.0)*x3339);
IkReal x3345=((1.0)*x3340);
IkReal x3346=(sj5*x3339);
IkReal x3347=(sj5*x3340);
evalcond[0]=((((-1.0)*x3343*x3344))+((r22*x3340))+((r21*x3346)));
evalcond[1]=((((-1.0)*x3343*x3345))+((r21*x3347))+(((-1.0)*r22*x3344)));
evalcond[2]=(cj0+((r02*x3340))+(((-1.0)*x3341*x3344))+((r01*x3346)));
evalcond[3]=(sj0+(((-1.0)*x3342*x3344))+((r11*x3346))+((r12*x3340)));
evalcond[4]=(cj0+(((-1.0)*r12*x3344))+(((-1.0)*x3342*x3345))+((r11*x3347)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3341*x3345))+(((-1.0)*r02*x3344))+((r01*x3347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3348=((1.0)*cj5);
CheckValue<IkReal> x3349=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3348)))),-1);
if(!x3349.valid){
continue;
}
CheckValue<IkReal> x3350 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3348)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3349.value)))+(x3350.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3351=IKcos(j4);
IkReal x3352=IKsin(j4);
IkReal x3353=(cj5*r00);
IkReal x3354=(cj5*r10);
IkReal x3355=(cj5*r20);
IkReal x3356=((1.0)*x3351);
IkReal x3357=((1.0)*x3352);
IkReal x3358=(sj5*x3351);
IkReal x3359=(sj5*x3352);
evalcond[0]=((((-1.0)*x3355*x3356))+((r21*x3358))+((r22*x3352)));
evalcond[1]=((((-1.0)*x3355*x3357))+((r21*x3359))+(((-1.0)*r22*x3356)));
evalcond[2]=(cj0+((r01*x3358))+(((-1.0)*x3353*x3356))+((r02*x3352)));
evalcond[3]=(((r12*x3352))+sj0+((r11*x3358))+(((-1.0)*x3354*x3356)));
evalcond[4]=(cj0+((r11*x3359))+(((-1.0)*x3354*x3357))+(((-1.0)*r12*x3356)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3356))+((r01*x3359))+(((-1.0)*x3353*x3357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3360 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3360.valid){
continue;
}
CheckValue<IkReal> x3361=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3360.value)+(((1.5707963267949)*(x3361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3362=IKcos(j4);
IkReal x3363=IKsin(j4);
IkReal x3364=(cj5*r00);
IkReal x3365=(cj5*r10);
IkReal x3366=(cj5*r20);
IkReal x3367=((1.0)*x3362);
IkReal x3368=((1.0)*x3363);
IkReal x3369=(sj5*x3362);
IkReal x3370=(sj5*x3363);
evalcond[0]=(((r22*x3363))+((r21*x3369))+(((-1.0)*x3366*x3367)));
evalcond[1]=((((-1.0)*r22*x3367))+((r21*x3370))+(((-1.0)*x3366*x3368)));
evalcond[2]=(((r02*x3363))+cj0+((r01*x3369))+(((-1.0)*x3364*x3367)));
evalcond[3]=(sj0+(((-1.0)*x3365*x3367))+((r12*x3363))+((r11*x3369)));
evalcond[4]=((((-1.0)*r12*x3367))+cj0+(((-1.0)*x3365*x3368))+((r11*x3370)));
evalcond[5]=(((r01*x3370))+(((-1.0)*sj0))+(((-1.0)*r02*x3367))+(((-1.0)*x3364*x3368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3371=IKcos(j0);
IkReal x3372=IKsin(j0);
evalcond[0]=((((-0.134)*x3372))+(((-1.0)*px))+(((-0.425)*x3371)));
evalcond[1]=((((0.134)*x3371))+(((-1.0)*py))+(((-0.425)*x3372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3373=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3373;
j4eval[1]=IKsign(x3373);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3374=((1.0)*cj5);
IkReal x3375=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3374)));
j4eval[0]=x3375;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3374))))));
j4eval[2]=IKsign(x3375);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3376=cj5*cj5;
IkReal x3377=((1.0)*r20);
IkReal x3378=(r01*r21);
IkReal x3379=(r21*sj5);
IkReal x3380=(((cj5*r01*r20*sj5))+(((-1.0)*x3378))+(((-1.0)*r00*x3376*x3377))+((cj5*r00*x3379))+(((-1.0)*r02*r22))+((x3376*x3378)));
j4eval[0]=x3380;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x3377))+((cj0*x3379))))));
j4eval[2]=IKsign(x3380);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3381=cj5*cj5;
IkReal x3382=((1.0)*r20);
IkReal x3383=(r01*r21);
IkReal x3384=(r21*sj5);
CheckValue<IkReal> x3385=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3383))+((x3381*x3383))+(((-1.0)*r00*x3381*x3382))+((cj5*r00*x3384)))),-1);
if(!x3385.valid){
continue;
}
CheckValue<IkReal> x3386 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3382))+((cj0*x3384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3385.value)))+(x3386.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3387=IKcos(j4);
IkReal x3388=IKsin(j4);
IkReal x3389=(cj5*r00);
IkReal x3390=(cj5*r10);
IkReal x3391=(cj5*r20);
IkReal x3392=((1.0)*x3387);
IkReal x3393=((1.0)*x3388);
IkReal x3394=(sj5*x3387);
IkReal x3395=(sj5*x3388);
evalcond[0]=(((r21*x3394))+((r22*x3388))+(((-1.0)*x3391*x3392)));
evalcond[1]=((((-1.0)*r22*x3392))+((r21*x3395))+(((-1.0)*x3391*x3393)));
evalcond[2]=(cj0+((r01*x3394))+(((-1.0)*x3389*x3392))+((r02*x3388)));
evalcond[3]=(sj0+((r11*x3394))+((r12*x3388))+(((-1.0)*x3390*x3392)));
evalcond[4]=(cj0+((r11*x3395))+(((-1.0)*r12*x3392))+(((-1.0)*x3390*x3393)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3395))+(((-1.0)*x3389*x3393))+(((-1.0)*r02*x3392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3396=((1.0)*cj5);
CheckValue<IkReal> x3397 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3396)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3397.valid){
continue;
}
CheckValue<IkReal> x3398=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3396)))),-1);
if(!x3398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3397.value)+(((1.5707963267949)*(x3398.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3399=IKcos(j4);
IkReal x3400=IKsin(j4);
IkReal x3401=(cj5*r00);
IkReal x3402=(cj5*r10);
IkReal x3403=(cj5*r20);
IkReal x3404=((1.0)*x3399);
IkReal x3405=((1.0)*x3400);
IkReal x3406=(sj5*x3399);
IkReal x3407=(sj5*x3400);
evalcond[0]=(((r22*x3400))+((r21*x3406))+(((-1.0)*x3403*x3404)));
evalcond[1]=(((r21*x3407))+(((-1.0)*x3403*x3405))+(((-1.0)*r22*x3404)));
evalcond[2]=(((r02*x3400))+cj0+(((-1.0)*x3401*x3404))+((r01*x3406)));
evalcond[3]=(sj0+((r11*x3406))+(((-1.0)*x3402*x3404))+((r12*x3400)));
evalcond[4]=(cj0+((r11*x3407))+(((-1.0)*x3402*x3405))+(((-1.0)*r12*x3404)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3401*x3405))+(((-1.0)*r02*x3404))+((r01*x3407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3408 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3408.valid){
continue;
}
CheckValue<IkReal> x3409=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3408.value)+(((1.5707963267949)*(x3409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3410=IKcos(j4);
IkReal x3411=IKsin(j4);
IkReal x3412=(cj5*r00);
IkReal x3413=(cj5*r10);
IkReal x3414=(cj5*r20);
IkReal x3415=((1.0)*x3410);
IkReal x3416=((1.0)*x3411);
IkReal x3417=(sj5*x3410);
IkReal x3418=(sj5*x3411);
evalcond[0]=(((r22*x3411))+((r21*x3417))+(((-1.0)*x3414*x3415)));
evalcond[1]=((((-1.0)*r22*x3415))+((r21*x3418))+(((-1.0)*x3414*x3416)));
evalcond[2]=((((-1.0)*x3412*x3415))+cj0+((r02*x3411))+((r01*x3417)));
evalcond[3]=(sj0+((r12*x3411))+((r11*x3417))+(((-1.0)*x3413*x3415)));
evalcond[4]=(cj0+((r11*x3418))+(((-1.0)*r12*x3415))+(((-1.0)*x3413*x3416)));
evalcond[5]=((((-1.0)*x3412*x3416))+(((-1.0)*sj0))+(((-1.0)*r02*x3415))+((r01*x3418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3419=IKcos(j0);
IkReal x3420=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x3420))+(((-0.425)*x3419)));
evalcond[1]=((((-0.425)*x3420))+(((0.134)*x3419))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3421=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3421;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3421);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3422=((1.0)*cj5);
IkReal x3423=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3422)));
j4eval[0]=x3423;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3422)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3423);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3424=((1.0)*cj5);
IkReal x3425=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3424)));
j4eval[0]=x3425;
j4eval[1]=IKsign(x3425);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x3424))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3426=((1.0)*cj5);
CheckValue<IkReal> x3427=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3426)))),-1);
if(!x3427.valid){
continue;
}
CheckValue<IkReal> x3428 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3426))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3427.value)))+(x3428.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3429=IKcos(j4);
IkReal x3430=IKsin(j4);
IkReal x3431=((1.0)*sj0);
IkReal x3432=(cj5*r00);
IkReal x3433=(cj5*r10);
IkReal x3434=(cj5*r20);
IkReal x3435=((1.0)*x3429);
IkReal x3436=((1.0)*x3430);
IkReal x3437=(sj5*x3429);
IkReal x3438=(sj5*x3430);
evalcond[0]=((((-1.0)*x3434*x3435))+((r21*x3437))+((r22*x3430)));
evalcond[1]=((((-1.0)*x3434*x3436))+(((-1.0)*r22*x3435))+((r21*x3438)));
evalcond[2]=((((-1.0)*r12*x3435))+cj0+(((-1.0)*x3433*x3436))+((r11*x3438)));
evalcond[3]=(((r01*x3437))+(((-1.0)*x3432*x3435))+((r02*x3430))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3433*x3435))+(((-1.0)*x3431))+((r12*x3430))+((r11*x3437)));
evalcond[5]=(((r01*x3438))+(((-1.0)*x3432*x3436))+(((-1.0)*x3431))+(((-1.0)*r02*x3435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3439=((1.0)*cj5);
CheckValue<IkReal> x3440 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3439)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3440.valid){
continue;
}
CheckValue<IkReal> x3441=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3439)))),-1);
if(!x3441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3440.value)+(((1.5707963267949)*(x3441.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3442=IKcos(j4);
IkReal x3443=IKsin(j4);
IkReal x3444=((1.0)*sj0);
IkReal x3445=(cj5*r00);
IkReal x3446=(cj5*r10);
IkReal x3447=(cj5*r20);
IkReal x3448=((1.0)*x3442);
IkReal x3449=((1.0)*x3443);
IkReal x3450=(sj5*x3442);
IkReal x3451=(sj5*x3443);
evalcond[0]=((((-1.0)*x3447*x3448))+((r21*x3450))+((r22*x3443)));
evalcond[1]=((((-1.0)*x3447*x3449))+((r21*x3451))+(((-1.0)*r22*x3448)));
evalcond[2]=(cj0+(((-1.0)*x3446*x3449))+(((-1.0)*r12*x3448))+((r11*x3451)));
evalcond[3]=(((r02*x3443))+(((-1.0)*x3445*x3448))+((r01*x3450))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3443))+(((-1.0)*x3446*x3448))+(((-1.0)*x3444))+((r11*x3450)));
evalcond[5]=((((-1.0)*r02*x3448))+(((-1.0)*x3445*x3449))+((r01*x3451))+(((-1.0)*x3444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3452 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3452.valid){
continue;
}
CheckValue<IkReal> x3453=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3452.value)+(((1.5707963267949)*(x3453.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3454=IKcos(j4);
IkReal x3455=IKsin(j4);
IkReal x3456=((1.0)*sj0);
IkReal x3457=(cj5*r00);
IkReal x3458=(cj5*r10);
IkReal x3459=(cj5*r20);
IkReal x3460=((1.0)*x3454);
IkReal x3461=((1.0)*x3455);
IkReal x3462=(sj5*x3454);
IkReal x3463=(sj5*x3455);
evalcond[0]=(((r22*x3455))+(((-1.0)*x3459*x3460))+((r21*x3462)));
evalcond[1]=((((-1.0)*r22*x3460))+(((-1.0)*x3459*x3461))+((r21*x3463)));
evalcond[2]=(cj0+(((-1.0)*x3458*x3461))+(((-1.0)*r12*x3460))+((r11*x3463)));
evalcond[3]=(((r01*x3462))+((r02*x3455))+(((-1.0)*cj0))+(((-1.0)*x3457*x3460)));
evalcond[4]=((((-1.0)*x3456))+((r12*x3455))+(((-1.0)*x3458*x3460))+((r11*x3462)));
evalcond[5]=((((-1.0)*x3456))+(((-1.0)*r02*x3460))+((r01*x3463))+(((-1.0)*x3457*x3461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3464=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3464;
j4eval[1]=IKsign(x3464);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3465=((1.0)*cj5);
IkReal x3466=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3465)));
j4eval[0]=x3466;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3465))))));
j4eval[2]=IKsign(x3466);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3467=cj5*cj5;
IkReal x3468=((1.0)*r20);
IkReal x3469=(r01*r21);
IkReal x3470=(r21*sj5);
IkReal x3471=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x3467*x3468))+(((-1.0)*r02*r22))+((x3467*x3469))+(((-1.0)*x3469))+((cj5*r00*x3470)));
j4eval[0]=x3471;
j4eval[1]=((IKabs((((cj0*x3470))+(((-1.0)*cj0*cj5*x3468)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3471);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3472=cj5*cj5;
IkReal x3473=((1.0)*r20);
IkReal x3474=(r01*r21);
IkReal x3475=(r21*sj5);
CheckValue<IkReal> x3476 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3475))+(((-1.0)*cj0*cj5*x3473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3476.valid){
continue;
}
CheckValue<IkReal> x3477=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3472*x3473))+(((-1.0)*x3474))+((cj5*r00*x3475))+((x3472*x3474)))),-1);
if(!x3477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3476.value)+(((1.5707963267949)*(x3477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3478=IKcos(j4);
IkReal x3479=IKsin(j4);
IkReal x3480=(cj5*r00);
IkReal x3481=(cj5*r10);
IkReal x3482=(cj5*r20);
IkReal x3483=((1.0)*x3478);
IkReal x3484=((1.0)*x3479);
IkReal x3485=(sj5*x3478);
IkReal x3486=(sj5*x3479);
evalcond[0]=((((-1.0)*x3482*x3483))+((r21*x3485))+((r22*x3479)));
evalcond[1]=((((-1.0)*x3482*x3484))+(((-1.0)*r22*x3483))+((r21*x3486)));
evalcond[2]=(cj0+((r01*x3485))+((r02*x3479))+(((-1.0)*x3480*x3483)));
evalcond[3]=(sj0+(((-1.0)*x3481*x3483))+((r12*x3479))+((r11*x3485)));
evalcond[4]=(cj0+(((-1.0)*x3481*x3484))+(((-1.0)*r12*x3483))+((r11*x3486)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3483))+((r01*x3486))+(((-1.0)*x3480*x3484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3487=((1.0)*cj5);
CheckValue<IkReal> x3488 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3487)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3488.valid){
continue;
}
CheckValue<IkReal> x3489=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3487)))),-1);
if(!x3489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3488.value)+(((1.5707963267949)*(x3489.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3490=IKcos(j4);
IkReal x3491=IKsin(j4);
IkReal x3492=(cj5*r00);
IkReal x3493=(cj5*r10);
IkReal x3494=(cj5*r20);
IkReal x3495=((1.0)*x3490);
IkReal x3496=((1.0)*x3491);
IkReal x3497=(sj5*x3490);
IkReal x3498=(sj5*x3491);
evalcond[0]=((((-1.0)*x3494*x3495))+((r22*x3491))+((r21*x3497)));
evalcond[1]=((((-1.0)*x3494*x3496))+(((-1.0)*r22*x3495))+((r21*x3498)));
evalcond[2]=(((r01*x3497))+cj0+(((-1.0)*x3492*x3495))+((r02*x3491)));
evalcond[3]=(sj0+(((-1.0)*x3493*x3495))+((r11*x3497))+((r12*x3491)));
evalcond[4]=((((-1.0)*r12*x3495))+cj0+(((-1.0)*x3493*x3496))+((r11*x3498)));
evalcond[5]=((((-1.0)*r02*x3495))+(((-1.0)*sj0))+((r01*x3498))+(((-1.0)*x3492*x3496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3499 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3499.valid){
continue;
}
CheckValue<IkReal> x3500=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3499.value)+(((1.5707963267949)*(x3500.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3501=IKcos(j4);
IkReal x3502=IKsin(j4);
IkReal x3503=(cj5*r00);
IkReal x3504=(cj5*r10);
IkReal x3505=(cj5*r20);
IkReal x3506=((1.0)*x3501);
IkReal x3507=((1.0)*x3502);
IkReal x3508=(sj5*x3501);
IkReal x3509=(sj5*x3502);
evalcond[0]=(((r22*x3502))+(((-1.0)*x3505*x3506))+((r21*x3508)));
evalcond[1]=((((-1.0)*r22*x3506))+(((-1.0)*x3505*x3507))+((r21*x3509)));
evalcond[2]=(((r01*x3508))+cj0+((r02*x3502))+(((-1.0)*x3503*x3506)));
evalcond[3]=(sj0+((r12*x3502))+((r11*x3508))+(((-1.0)*x3504*x3506)));
evalcond[4]=((((-1.0)*r12*x3506))+cj0+((r11*x3509))+(((-1.0)*x3504*x3507)));
evalcond[5]=(((r01*x3509))+(((-1.0)*sj0))+(((-1.0)*r02*x3506))+(((-1.0)*x3503*x3507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3510=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3510;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3510);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3511=((1.0)*cj5);
IkReal x3512=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3511)));
j4eval[0]=x3512;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3511)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3512);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3513=((1.0)*cj5);
IkReal x3514=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3513)));
j4eval[0]=x3514;
j4eval[1]=IKsign(x3514);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3513))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3515=((1.0)*cj5);
CheckValue<IkReal> x3516 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3515)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3516.valid){
continue;
}
CheckValue<IkReal> x3517=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3515)))),-1);
if(!x3517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3516.value)+(((1.5707963267949)*(x3517.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3518=IKcos(j4);
IkReal x3519=IKsin(j4);
IkReal x3520=((1.0)*sj0);
IkReal x3521=(cj5*r00);
IkReal x3522=(cj5*r10);
IkReal x3523=(cj5*r20);
IkReal x3524=((1.0)*x3518);
IkReal x3525=((1.0)*x3519);
IkReal x3526=(sj5*x3518);
IkReal x3527=(sj5*x3519);
evalcond[0]=(((r21*x3526))+((r22*x3519))+(((-1.0)*x3523*x3524)));
evalcond[1]=(((r21*x3527))+(((-1.0)*r22*x3524))+(((-1.0)*x3523*x3525)));
evalcond[2]=((((-1.0)*x3522*x3525))+cj0+((r11*x3527))+(((-1.0)*r12*x3524)));
evalcond[3]=(((r01*x3526))+((r02*x3519))+(((-1.0)*x3521*x3524))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3522*x3524))+(((-1.0)*x3520))+((r11*x3526))+((r12*x3519)));
evalcond[5]=((((-1.0)*r02*x3524))+((r01*x3527))+(((-1.0)*x3520))+(((-1.0)*x3521*x3525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3528=((1.0)*cj5);
CheckValue<IkReal> x3529 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3528)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3529.valid){
continue;
}
CheckValue<IkReal> x3530=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3528)))),-1);
if(!x3530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3529.value)+(((1.5707963267949)*(x3530.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3531=IKcos(j4);
IkReal x3532=IKsin(j4);
IkReal x3533=((1.0)*sj0);
IkReal x3534=(cj5*r00);
IkReal x3535=(cj5*r10);
IkReal x3536=(cj5*r20);
IkReal x3537=((1.0)*x3531);
IkReal x3538=((1.0)*x3532);
IkReal x3539=(sj5*x3531);
IkReal x3540=(sj5*x3532);
evalcond[0]=(((r22*x3532))+((r21*x3539))+(((-1.0)*x3536*x3537)));
evalcond[1]=(((r21*x3540))+(((-1.0)*r22*x3537))+(((-1.0)*x3536*x3538)));
evalcond[2]=((((-1.0)*x3535*x3538))+cj0+(((-1.0)*r12*x3537))+((r11*x3540)));
evalcond[3]=(((r02*x3532))+((r01*x3539))+(((-1.0)*cj0))+(((-1.0)*x3534*x3537)));
evalcond[4]=((((-1.0)*x3535*x3537))+((r11*x3539))+((r12*x3532))+(((-1.0)*x3533)));
evalcond[5]=(((r01*x3540))+(((-1.0)*r02*x3537))+(((-1.0)*x3533))+(((-1.0)*x3534*x3538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3541 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3541.valid){
continue;
}
CheckValue<IkReal> x3542=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3541.value)+(((1.5707963267949)*(x3542.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3543=IKcos(j4);
IkReal x3544=IKsin(j4);
IkReal x3545=((1.0)*sj0);
IkReal x3546=(cj5*r00);
IkReal x3547=(cj5*r10);
IkReal x3548=(cj5*r20);
IkReal x3549=((1.0)*x3543);
IkReal x3550=((1.0)*x3544);
IkReal x3551=(sj5*x3543);
IkReal x3552=(sj5*x3544);
evalcond[0]=(((r21*x3551))+(((-1.0)*x3548*x3549))+((r22*x3544)));
evalcond[1]=(((r21*x3552))+(((-1.0)*x3548*x3550))+(((-1.0)*r22*x3549)));
evalcond[2]=(cj0+(((-1.0)*r12*x3549))+((r11*x3552))+(((-1.0)*x3547*x3550)));
evalcond[3]=(((r02*x3544))+((r01*x3551))+(((-1.0)*x3546*x3549))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3544))+((r11*x3551))+(((-1.0)*x3545))+(((-1.0)*x3547*x3549)));
evalcond[5]=((((-1.0)*r02*x3549))+((r01*x3552))+(((-1.0)*x3546*x3550))+(((-1.0)*x3545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3553=(sj1*sj2);
IkReal x3554=(r00*sj5);
IkReal x3555=(cj5*r01);
IkReal x3556=((212.5)*cj1);
IkReal x3557=(cj1*cj2);
IkReal x3558=((500.0)*px);
IkReal x3559=((246.0)*x3557);
CheckValue<IkReal> x3560=IKPowWithIntegerCheck(((((-67.0)*x3557))+(((67.0)*x3553))),-1);
if(!x3560.valid){
continue;
}
CheckValue<IkReal> x3561=IKPowWithIntegerCheck((x3553+(((-1.0)*x3557))),-1);
if(!x3561.valid){
continue;
}
if( IKabs(((x3560.value)*(((((-1.0)*x3553*x3558))+(((-246.0)*x3553*x3554))+(((-246.0)*x3553*x3555))+((x3557*x3558))+((x3554*x3559))+((x3554*x3556))+((x3555*x3556))+((x3555*x3559)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3561.value)*((x3555+x3554)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3560.value)*(((((-1.0)*x3553*x3558))+(((-246.0)*x3553*x3554))+(((-246.0)*x3553*x3555))+((x3557*x3558))+((x3554*x3559))+((x3554*x3556))+((x3555*x3556))+((x3555*x3559))))))+IKsqr(((x3561.value)*((x3555+x3554))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3560.value)*(((((-1.0)*x3553*x3558))+(((-246.0)*x3553*x3554))+(((-246.0)*x3553*x3555))+((x3557*x3558))+((x3554*x3559))+((x3554*x3556))+((x3555*x3556))+((x3555*x3559))))), ((x3561.value)*((x3555+x3554))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3562=IKcos(j0);
IkReal x3563=IKsin(j0);
IkReal x3564=((0.1)*sj5);
IkReal x3565=(cj5*r11);
IkReal x3566=(sj1*sj2);
IkReal x3567=(cj1*cj2);
IkReal x3568=((1.0)*sj5);
IkReal x3569=(cj5*r01);
IkReal x3570=((0.425)*cj1);
IkReal x3571=((0.392)*x3563);
IkReal x3572=((0.392)*x3562);
evalcond[0]=(((x3562*x3566))+(((-1.0)*x3562*x3567))+(((-1.0)*r00*x3568))+(((-1.0)*x3569)));
evalcond[1]=(((x3563*x3566))+(((-1.0)*x3563*x3567))+(((-1.0)*r10*x3568))+(((-1.0)*x3565)));
evalcond[2]=(((x3562*x3570))+(((-1.0)*x3566*x3572))+(((-0.1)*x3569))+(((-0.134)*x3563))+((x3567*x3572))+(((-1.0)*px))+(((-1.0)*r00*x3564)));
evalcond[3]=(((x3563*x3570))+(((-1.0)*x3566*x3571))+(((-0.1)*x3565))+((x3567*x3571))+(((-1.0)*r10*x3564))+(((-1.0)*py))+(((0.134)*x3562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3573=((1.0)*cj5);
IkReal x3574=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3573)));
j4eval[0]=x3574;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3573)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3575=((1.0)*cj5);
IkReal x3576=((((-1.0)*r11*x3575))+(((-1.0)*r10*sj5)));
j4eval[0]=x3576;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3575))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x3576);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3577=((1.0)*sj0);
IkReal x3578=((1.0)*cj0);
IkReal x3579=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3579;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x3577))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3578)))))+(IKabs(((((-1.0)*r12*x3577))+(((-1.0)*r02*x3578))))));
j4eval[2]=IKsign(x3579);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3580=((-1.0)*r20);
IkReal x3582 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3582)==0){
continue;
}
IkReal x3581=pow(x3582,-0.5);
CheckValue<IkReal> x3583 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3580),IKFAST_ATAN2_MAGTHRESH);
if(!x3583.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3583.value));
IkReal gconst97=(r21*x3581);
IkReal gconst98=(x3580*x3581);
CheckValue<IkReal> x3584 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3584.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3584.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3585=((-1.0)*r20);
IkReal x3586=x3581;
CheckValue<IkReal> x3588 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3585),IKFAST_ATAN2_MAGTHRESH);
if(!x3588.valid){
continue;
}
IkReal x3587=((-1.0)*(x3588.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3587;
IkReal gconst96=x3587;
IkReal gconst97=(r21*x3586);
IkReal gconst98=(x3585*x3586);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3589=((-1.0)*r20);
IkReal x3590=x3581;
CheckValue<IkReal> x3592 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3589),IKFAST_ATAN2_MAGTHRESH);
if(!x3592.valid){
continue;
}
IkReal x3591=((-1.0)*(x3592.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3591;
IkReal gconst96=x3591;
IkReal gconst97=(r21*x3590);
IkReal gconst98=(x3589*x3590);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3593=((-1.0)*r20);
IkReal x3594=x3581;
CheckValue<IkReal> x3596 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3593),IKFAST_ATAN2_MAGTHRESH);
if(!x3596.valid){
continue;
}
IkReal x3595=((-1.0)*(x3596.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3595;
IkReal gconst96=x3595;
IkReal gconst97=(r21*x3594);
IkReal gconst98=(x3593*x3594);
IkReal x3597=((1.0)*(r22*r22));
CheckValue<IkReal> x3601=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3597))),-1);
if(!x3601.valid){
continue;
}
IkReal x3598=x3601.value;
IkReal x3599=((1.0)*x3598);
IkReal x3600=((((-1.0)*x3599*(r21*r21*r21*r21)))+(((-2.0)*x3598*(r20*r20)*(r21*r21)))+(((-1.0)*x3599*(r20*r20*r20*r20)))+(((-1.0)*x3597)));
j4eval[0]=x3600;
j4eval[1]=IKsign(x3600);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3602=(cj1*cj2);
IkReal x3603=(gconst98*r20);
IkReal x3604=(sj1*sj2);
IkReal x3605=(gconst97*r21);
CheckValue<IkReal> x3606 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3602))+((r22*x3604)))),IkReal((((x3604*x3605))+(((-1.0)*x3602*x3605))+((x3602*x3603))+(((-1.0)*x3603*x3604)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3606.valid){
continue;
}
CheckValue<IkReal> x3607=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3605*x3605)))+(((2.0)*x3603*x3605))+(((-1.0)*(x3603*x3603)))+(((-1.0)*(r22*r22))))),-1);
if(!x3607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3606.value)+(((1.5707963267949)*(x3607.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3608=IKsin(j4);
IkReal x3609=IKcos(j4);
IkReal x3610=(gconst98*r10);
IkReal x3611=(gconst97*r21);
IkReal x3612=(gconst98*r20);
IkReal x3613=((1.0)*cj2);
IkReal x3614=((1.0)*sj0);
IkReal x3615=(gconst98*r00);
IkReal x3616=(cj1*sj2);
IkReal x3617=((1.0)*x3609);
IkReal x3618=((1.0)*x3608);
IkReal x3619=(gconst97*x3608);
IkReal x3620=(gconst97*x3609);
evalcond[0]=(((x3608*x3611))+(((-1.0)*x3612*x3618))+(((-1.0)*r22*x3617)));
evalcond[1]=(((r11*x3619))+cj0+(((-1.0)*r12*x3617))+(((-1.0)*x3610*x3618)));
evalcond[2]=((((-1.0)*r02*x3617))+(((-1.0)*x3615*x3618))+((r01*x3619))+(((-1.0)*x3614)));
evalcond[3]=(((x3609*x3611))+(((-1.0)*x3612*x3617))+((r22*x3608))+((sj1*sj2))+(((-1.0)*cj1*x3613)));
evalcond[4]=(((r02*x3608))+((r01*x3620))+(((-1.0)*x3615*x3617))+(((-1.0)*cj0*sj1*x3613))+(((-1.0)*cj0*x3616)));
evalcond[5]=((((-1.0)*x3614*x3616))+((r11*x3620))+(((-1.0)*x3610*x3617))+(((-1.0)*sj0*sj1*x3613))+((r12*x3608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3621=((1.0)*gconst98);
CheckValue<IkReal> x3622=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3621))+(((-1.0)*gconst97*r10)))),-1);
if(!x3622.valid){
continue;
}
CheckValue<IkReal> x3623 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3621)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3622.value)))+(x3623.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3624=IKsin(j4);
IkReal x3625=IKcos(j4);
IkReal x3626=(gconst98*r10);
IkReal x3627=(gconst97*r21);
IkReal x3628=(gconst98*r20);
IkReal x3629=((1.0)*cj2);
IkReal x3630=((1.0)*sj0);
IkReal x3631=(gconst98*r00);
IkReal x3632=(cj1*sj2);
IkReal x3633=((1.0)*x3625);
IkReal x3634=((1.0)*x3624);
IkReal x3635=(gconst97*x3624);
IkReal x3636=(gconst97*x3625);
evalcond[0]=((((-1.0)*x3628*x3634))+(((-1.0)*r22*x3633))+((x3624*x3627)));
evalcond[1]=(((r11*x3635))+cj0+(((-1.0)*r12*x3633))+(((-1.0)*x3626*x3634)));
evalcond[2]=((((-1.0)*x3631*x3634))+(((-1.0)*x3630))+(((-1.0)*r02*x3633))+((r01*x3635)));
evalcond[3]=((((-1.0)*x3628*x3633))+((sj1*sj2))+((x3625*x3627))+(((-1.0)*cj1*x3629))+((r22*x3624)));
evalcond[4]=((((-1.0)*x3631*x3633))+((r02*x3624))+((r01*x3636))+(((-1.0)*cj0*x3632))+(((-1.0)*cj0*sj1*x3629)));
evalcond[5]=(((r11*x3636))+(((-1.0)*x3630*x3632))+((r12*x3624))+(((-1.0)*x3626*x3633))+(((-1.0)*sj0*sj1*x3629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3637=((1.0)*gconst98);
CheckValue<IkReal> x3638=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3637))+(((-1.0)*gconst97*r00)))),-1);
if(!x3638.valid){
continue;
}
CheckValue<IkReal> x3639 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3637))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3638.value)))+(x3639.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3640=IKsin(j4);
IkReal x3641=IKcos(j4);
IkReal x3642=(gconst98*r10);
IkReal x3643=(gconst97*r21);
IkReal x3644=(gconst98*r20);
IkReal x3645=((1.0)*cj2);
IkReal x3646=((1.0)*sj0);
IkReal x3647=(gconst98*r00);
IkReal x3648=(cj1*sj2);
IkReal x3649=((1.0)*x3641);
IkReal x3650=((1.0)*x3640);
IkReal x3651=(gconst97*x3640);
IkReal x3652=(gconst97*x3641);
evalcond[0]=((((-1.0)*x3644*x3650))+(((-1.0)*r22*x3649))+((x3640*x3643)));
evalcond[1]=((((-1.0)*x3642*x3650))+cj0+((r11*x3651))+(((-1.0)*r12*x3649)));
evalcond[2]=((((-1.0)*x3647*x3650))+(((-1.0)*r02*x3649))+(((-1.0)*x3646))+((r01*x3651)));
evalcond[3]=(((x3641*x3643))+((sj1*sj2))+(((-1.0)*x3644*x3649))+(((-1.0)*cj1*x3645))+((r22*x3640)));
evalcond[4]=((((-1.0)*cj0*x3648))+((r02*x3640))+(((-1.0)*x3647*x3649))+(((-1.0)*cj0*sj1*x3645))+((r01*x3652)));
evalcond[5]=((((-1.0)*x3646*x3648))+((r12*x3640))+((r11*x3652))+(((-1.0)*x3642*x3649))+(((-1.0)*sj0*sj1*x3645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3653=((-1.0)*r21);
IkReal x3655 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3655)==0){
continue;
}
IkReal x3654=pow(x3655,-0.5);
CheckValue<IkReal> x3656 = IKatan2WithCheck(IkReal(x3653),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3656.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3656.value))));
IkReal gconst100=(x3653*x3654);
IkReal gconst101=((1.0)*r20*x3654);
CheckValue<IkReal> x3657 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3657.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3657.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3658=((-1.0)*r21);
CheckValue<IkReal> x3661 = IKatan2WithCheck(IkReal(x3658),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3661.valid){
continue;
}
IkReal x3659=((1.0)*(x3661.value));
IkReal x3660=x3654;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3659)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3659)));
IkReal gconst100=(x3658*x3660);
IkReal gconst101=((1.0)*r20*x3660);
IkReal x3662=r22*r22;
IkReal x3663=((1.0)*x3662);
CheckValue<IkReal> x3667=IKPowWithIntegerCheck(((-1.0)+x3662),-1);
if(!x3667.valid){
continue;
}
IkReal x3664=x3667.value;
if((((1.0)+(((-1.0)*x3663)))) < -0.00001)
continue;
IkReal x3665=IKsqrt(((1.0)+(((-1.0)*x3663))));
IkReal x3666=(cj0*x3664*x3665);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x3663*x3666))+x3666))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3668=((-1.0)*r21);
CheckValue<IkReal> x3671 = IKatan2WithCheck(IkReal(x3668),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3671.valid){
continue;
}
IkReal x3669=((1.0)*(x3671.value));
IkReal x3670=x3654;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3669)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3669)));
IkReal gconst100=(x3668*x3670);
IkReal gconst101=((1.0)*r20*x3670);
IkReal x3672=r22*r22;
IkReal x3673=((1.0)*x3672);
CheckValue<IkReal> x3677=IKPowWithIntegerCheck(((-1.0)+x3672),-1);
if(!x3677.valid){
continue;
}
IkReal x3674=x3677.value;
if((((1.0)+(((-1.0)*x3673)))) < -0.00001)
continue;
IkReal x3675=IKsqrt(((1.0)+(((-1.0)*x3673))));
IkReal x3676=(sj0*x3674*x3675);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3673*x3676))+x3676))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3678=((-1.0)*r21);
CheckValue<IkReal> x3681 = IKatan2WithCheck(IkReal(x3678),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3681.valid){
continue;
}
IkReal x3679=((1.0)*(x3681.value));
IkReal x3680=x3654;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3679)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3679)));
IkReal gconst100=(x3678*x3680);
IkReal gconst101=((1.0)*r20*x3680);
IkReal x3682=r22*r22;
IkReal x3683=(r12*sj0);
IkReal x3684=(cj0*r02);
CheckValue<IkReal> x3688=IKPowWithIntegerCheck(((-1.0)+x3682),-1);
if(!x3688.valid){
continue;
}
IkReal x3685=x3688.value;
if((((1.0)+(((-1.0)*x3682)))) < -0.00001)
continue;
IkReal x3686=IKsqrt(((1.0)+(((-1.0)*x3682))));
IkReal x3687=(r22*x3685*x3686);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3684*x3687))+((x3683*x3687)))))+(IKabs(((((-1.0)*x3684))+(((-1.0)*x3683))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3689=((1.0)*sj0);
IkReal x3690=((1.0)*gconst100);
CheckValue<IkReal> x3691 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3689)))),IkReal(((((-1.0)*cj0*r01*x3690))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*gconst100*r11*x3689)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3691.valid){
continue;
}
CheckValue<IkReal> x3692=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3690))+(((-1.0)*gconst101*r21)))),-1);
if(!x3692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3691.value)+(((1.5707963267949)*(x3692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3693=IKsin(j4);
IkReal x3694=IKcos(j4);
IkReal x3695=(gconst101*r20);
IkReal x3696=(gconst101*r10);
IkReal x3697=((1.0)*cj2);
IkReal x3698=(gconst101*r00);
IkReal x3699=((1.0)*sj0);
IkReal x3700=(cj1*sj2);
IkReal x3701=((1.0)*x3694);
IkReal x3702=((1.0)*x3693);
IkReal x3703=(gconst100*x3693);
IkReal x3704=(gconst100*x3694);
evalcond[0]=(((r21*x3703))+(((-1.0)*x3695*x3702))+(((-1.0)*r22*x3701)));
evalcond[1]=(cj0+((r11*x3703))+(((-1.0)*r12*x3701))+(((-1.0)*x3696*x3702)));
evalcond[2]=((((-1.0)*x3698*x3702))+(((-1.0)*r02*x3701))+((r01*x3703))+(((-1.0)*x3699)));
evalcond[3]=((((-1.0)*cj1*x3697))+((sj1*sj2))+((r21*x3704))+((r22*x3693))+(((-1.0)*x3695*x3701)));
evalcond[4]=((((-1.0)*x3698*x3701))+(((-1.0)*cj0*x3700))+((r01*x3704))+((r02*x3693))+(((-1.0)*cj0*sj1*x3697)));
evalcond[5]=((((-1.0)*x3699*x3700))+((r11*x3704))+(((-1.0)*sj0*sj1*x3697))+(((-1.0)*x3696*x3701))+((r12*x3693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3705=((1.0)*gconst101);
CheckValue<IkReal> x3706=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3705)))),-1);
if(!x3706.valid){
continue;
}
CheckValue<IkReal> x3707 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3705))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3706.value)))+(x3707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3708=IKsin(j4);
IkReal x3709=IKcos(j4);
IkReal x3710=(gconst101*r20);
IkReal x3711=(gconst101*r10);
IkReal x3712=((1.0)*cj2);
IkReal x3713=(gconst101*r00);
IkReal x3714=((1.0)*sj0);
IkReal x3715=(cj1*sj2);
IkReal x3716=((1.0)*x3709);
IkReal x3717=((1.0)*x3708);
IkReal x3718=(gconst100*x3708);
IkReal x3719=(gconst100*x3709);
evalcond[0]=((((-1.0)*x3710*x3717))+((r21*x3718))+(((-1.0)*r22*x3716)));
evalcond[1]=(((r11*x3718))+cj0+(((-1.0)*x3711*x3717))+(((-1.0)*r12*x3716)));
evalcond[2]=((((-1.0)*x3713*x3717))+(((-1.0)*r02*x3716))+(((-1.0)*x3714))+((r01*x3718)));
evalcond[3]=((((-1.0)*cj1*x3712))+(((-1.0)*x3710*x3716))+((sj1*sj2))+((r21*x3719))+((r22*x3708)));
evalcond[4]=((((-1.0)*x3713*x3716))+(((-1.0)*cj0*x3715))+((r01*x3719))+((r02*x3708))+(((-1.0)*cj0*sj1*x3712)));
evalcond[5]=(((r11*x3719))+((r12*x3708))+(((-1.0)*x3714*x3715))+(((-1.0)*x3711*x3716))+(((-1.0)*sj0*sj1*x3712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3720=((1.0)*gconst101);
CheckValue<IkReal> x3721=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3720)))),-1);
if(!x3721.valid){
continue;
}
CheckValue<IkReal> x3722 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3720)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3721.value)))+(x3722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3723=IKsin(j4);
IkReal x3724=IKcos(j4);
IkReal x3725=(gconst101*r20);
IkReal x3726=(gconst101*r10);
IkReal x3727=((1.0)*cj2);
IkReal x3728=(gconst101*r00);
IkReal x3729=((1.0)*sj0);
IkReal x3730=(cj1*sj2);
IkReal x3731=((1.0)*x3724);
IkReal x3732=((1.0)*x3723);
IkReal x3733=(gconst100*x3723);
IkReal x3734=(gconst100*x3724);
evalcond[0]=((((-1.0)*x3725*x3732))+(((-1.0)*r22*x3731))+((r21*x3733)));
evalcond[1]=(cj0+(((-1.0)*r12*x3731))+((r11*x3733))+(((-1.0)*x3726*x3732)));
evalcond[2]=(((r01*x3733))+(((-1.0)*x3729))+(((-1.0)*x3728*x3732))+(((-1.0)*r02*x3731)));
evalcond[3]=((((-1.0)*cj1*x3727))+(((-1.0)*x3725*x3731))+((r22*x3723))+((sj1*sj2))+((r21*x3734)));
evalcond[4]=(((r01*x3734))+(((-1.0)*cj0*x3730))+((r02*x3723))+(((-1.0)*cj0*sj1*x3727))+(((-1.0)*x3728*x3731)));
evalcond[5]=((((-1.0)*sj0*sj1*x3727))+((r11*x3734))+(((-1.0)*x3726*x3731))+((r12*x3723))+(((-1.0)*x3729*x3730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3735=((-1.0)*r10);
IkReal x3737 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3737)==0){
continue;
}
IkReal x3736=pow(x3737,-0.5);
CheckValue<IkReal> x3738 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3735),IKFAST_ATAN2_MAGTHRESH);
if(!x3738.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3738.value));
IkReal gconst103=(r11*x3736);
IkReal gconst104=(x3735*x3736);
CheckValue<IkReal> x3739 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3739.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3739.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3740=((-1.0)*r10);
IkReal x3741=x3736;
CheckValue<IkReal> x3743 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3740),IKFAST_ATAN2_MAGTHRESH);
if(!x3743.valid){
continue;
}
IkReal x3742=((-1.0)*(x3743.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3742;
IkReal gconst102=x3742;
IkReal gconst103=(r11*x3741);
IkReal gconst104=(x3740*x3741);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3744=((1.0)*sj0);
IkReal x3745=((1.0)*gconst103);
CheckValue<IkReal> x3746 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3744))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst103*r11*x3744))+(((-1.0)*cj0*r01*x3745))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3746.valid){
continue;
}
CheckValue<IkReal> x3747=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3745))+(((-1.0)*gconst104*r21)))),-1);
if(!x3747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3746.value)+(((1.5707963267949)*(x3747.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3748=IKsin(j4);
IkReal x3749=IKcos(j4);
IkReal x3750=(gconst103*r11);
IkReal x3751=((1.0)*cj2);
IkReal x3752=((1.0)*sj0);
IkReal x3753=(cj1*sj2);
IkReal x3754=((1.0)*x3749);
IkReal x3755=(gconst103*x3749);
IkReal x3756=(gconst103*x3748);
IkReal x3757=((1.0)*gconst104*x3748);
evalcond[0]=((((-1.0)*r22*x3754))+(((-1.0)*r20*x3757))+((r21*x3756)));
evalcond[1]=(cj0+(((-1.0)*r12*x3754))+((x3748*x3750))+(((-1.0)*r10*x3757)));
evalcond[2]=(((r01*x3756))+(((-1.0)*r00*x3757))+(((-1.0)*x3752))+(((-1.0)*r02*x3754)));
evalcond[3]=((((-1.0)*cj1*x3751))+(((-1.0)*gconst104*r20*x3754))+((sj1*sj2))+((r22*x3748))+((r21*x3755)));
evalcond[4]=((((-1.0)*gconst104*r00*x3754))+((r01*x3755))+(((-1.0)*cj0*x3753))+((r02*x3748))+(((-1.0)*cj0*sj1*x3751)));
evalcond[5]=((((-1.0)*x3752*x3753))+(((-1.0)*sj0*sj1*x3751))+((r12*x3748))+((x3749*x3750))+(((-1.0)*gconst104*r10*x3754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3758=((1.0)*gconst104);
CheckValue<IkReal> x3759=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3758)))),-1);
if(!x3759.valid){
continue;
}
CheckValue<IkReal> x3760 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3758))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3759.value)))+(x3760.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3761=IKsin(j4);
IkReal x3762=IKcos(j4);
IkReal x3763=(gconst103*r11);
IkReal x3764=((1.0)*cj2);
IkReal x3765=((1.0)*sj0);
IkReal x3766=(cj1*sj2);
IkReal x3767=((1.0)*x3762);
IkReal x3768=(gconst103*x3762);
IkReal x3769=(gconst103*x3761);
IkReal x3770=((1.0)*gconst104*x3761);
evalcond[0]=((((-1.0)*r20*x3770))+((r21*x3769))+(((-1.0)*r22*x3767)));
evalcond[1]=(cj0+((x3761*x3763))+(((-1.0)*r12*x3767))+(((-1.0)*r10*x3770)));
evalcond[2]=((((-1.0)*r00*x3770))+(((-1.0)*r02*x3767))+(((-1.0)*x3765))+((r01*x3769)));
evalcond[3]=(((r22*x3761))+((r21*x3768))+((sj1*sj2))+(((-1.0)*gconst104*r20*x3767))+(((-1.0)*cj1*x3764)));
evalcond[4]=(((r02*x3761))+(((-1.0)*cj0*sj1*x3764))+(((-1.0)*cj0*x3766))+(((-1.0)*gconst104*r00*x3767))+((r01*x3768)));
evalcond[5]=((((-1.0)*gconst104*r10*x3767))+(((-1.0)*x3765*x3766))+((x3762*x3763))+((r12*x3761))+(((-1.0)*sj0*sj1*x3764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3771=((-1.0)*r11);
IkReal x3773 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3773)==0){
continue;
}
IkReal x3772=pow(x3773,-0.5);
CheckValue<IkReal> x3774 = IKatan2WithCheck(IkReal(x3771),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3774.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3774.value))));
IkReal gconst106=(x3771*x3772);
IkReal gconst107=((1.0)*r10*x3772);
CheckValue<IkReal> x3775 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3775.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3775.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3776=((-1.0)*r11);
CheckValue<IkReal> x3779 = IKatan2WithCheck(IkReal(x3776),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3779.valid){
continue;
}
IkReal x3777=((1.0)*(x3779.value));
IkReal x3778=x3772;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3777)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3777)));
IkReal gconst106=(x3776*x3778);
IkReal gconst107=((1.0)*r10*x3778);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3780=((-1.0)*r11);
CheckValue<IkReal> x3783 = IKatan2WithCheck(IkReal(x3780),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3783.valid){
continue;
}
IkReal x3781=((1.0)*(x3783.value));
IkReal x3782=x3772;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3781)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3781)));
IkReal gconst106=(x3780*x3782);
IkReal gconst107=((1.0)*r10*x3782);
IkReal x3784=r12*r12;
IkReal x3785=((1.0)*sj0);
IkReal x3786=(cj0*r02);
IkReal x3787=x3772;
j4eval[0]=((IKabs((((r12*x3786*x3787))+((sj0*x3784*x3787))+(((-1.0)*x3785*x3787)))))+(IKabs(((((-1.0)*x3786))+(((-1.0)*r12*x3785))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3788=((-1.0)*r11);
CheckValue<IkReal> x3791 = IKatan2WithCheck(IkReal(x3788),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3791.valid){
continue;
}
IkReal x3789=((1.0)*(x3791.value));
IkReal x3790=x3772;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3789)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3789)));
IkReal gconst106=(x3788*x3790);
IkReal gconst107=((1.0)*r10*x3790);
IkReal x3792=r12*r12;
IkReal x3793=((1.0)+(((-1.0)*x3792)));
IkReal x3794=(r22*sj1*sj2);
IkReal x3795=(cj1*cj2*r22);
CheckValue<IkReal> x3802=IKPowWithIntegerCheck(x3793,-1);
if(!x3802.valid){
continue;
}
IkReal x3796=x3802.value;
CheckValue<IkReal> x3803=IKPowWithIntegerCheck(((-1.0)+x3792),-1);
if(!x3803.valid){
continue;
}
IkReal x3797=x3803.value;
IkReal x3798=((1.0)*x3796);
if((x3793) < -0.00001)
continue;
IkReal x3799=IKsqrt(x3793);
IkReal x3800=(r12*x3797*x3799);
IkReal x3801=((((-1.0)*x3798*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x3796))+(((-1.0)*x3798*(r11*r11)*(r21*r21))));
j4eval[0]=x3801;
j4eval[1]=((IKabs(((((-1.0)*x3795))+x3794)))+(IKabs((((x3795*x3800))+(((-1.0)*x3794*x3800))))));
j4eval[2]=IKsign(x3801);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3804=(sj1*sj2);
IkReal x3805=(gconst106*r21);
IkReal x3806=(gconst107*r20);
IkReal x3807=(cj1*cj2);
CheckValue<IkReal> x3808=IKPowWithIntegerCheck(IKsign(((((2.0)*x3805*x3806))+(((-1.0)*(x3806*x3806)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3805*x3805))))),-1);
if(!x3808.valid){
continue;
}
CheckValue<IkReal> x3809 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3807))+((r22*x3804)))),IkReal(((((-1.0)*x3804*x3806))+((x3804*x3805))+((x3806*x3807))+(((-1.0)*x3805*x3807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3808.value)))+(x3809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3810=IKsin(j4);
IkReal x3811=IKcos(j4);
IkReal x3812=(gconst107*r10);
IkReal x3813=(gconst107*r00);
IkReal x3814=((1.0)*cj2);
IkReal x3815=(gconst107*r20);
IkReal x3816=((1.0)*sj0);
IkReal x3817=(cj1*sj2);
IkReal x3818=((1.0)*x3811);
IkReal x3819=(gconst106*x3811);
IkReal x3820=(gconst106*x3810);
IkReal x3821=((1.0)*x3810);
evalcond[0]=((((-1.0)*r22*x3818))+(((-1.0)*x3815*x3821))+((r21*x3820)));
evalcond[1]=((((-1.0)*r12*x3818))+cj0+((r11*x3820))+(((-1.0)*x3812*x3821)));
evalcond[2]=((((-1.0)*r02*x3818))+(((-1.0)*x3816))+(((-1.0)*x3813*x3821))+((r01*x3820)));
evalcond[3]=(((r21*x3819))+(((-1.0)*x3815*x3818))+(((-1.0)*cj1*x3814))+((sj1*sj2))+((r22*x3810)));
evalcond[4]=((((-1.0)*cj0*x3817))+(((-1.0)*x3813*x3818))+((r02*x3810))+(((-1.0)*cj0*sj1*x3814))+((r01*x3819)));
evalcond[5]=(((r12*x3810))+(((-1.0)*sj0*sj1*x3814))+((r11*x3819))+(((-1.0)*x3812*x3818))+(((-1.0)*x3816*x3817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3822=((1.0)*sj0);
IkReal x3823=((1.0)*gconst106);
CheckValue<IkReal> x3824=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3823)))),-1);
if(!x3824.valid){
continue;
}
CheckValue<IkReal> x3825 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3822))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3823))+((gconst107*r10*sj0))+((cj0*gconst107*r00))+(((-1.0)*gconst106*r11*x3822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3824.value)))+(x3825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3826=IKsin(j4);
IkReal x3827=IKcos(j4);
IkReal x3828=(gconst107*r10);
IkReal x3829=(gconst107*r00);
IkReal x3830=((1.0)*cj2);
IkReal x3831=(gconst107*r20);
IkReal x3832=((1.0)*sj0);
IkReal x3833=(cj1*sj2);
IkReal x3834=((1.0)*x3827);
IkReal x3835=(gconst106*x3827);
IkReal x3836=(gconst106*x3826);
IkReal x3837=((1.0)*x3826);
evalcond[0]=((((-1.0)*x3831*x3837))+((r21*x3836))+(((-1.0)*r22*x3834)));
evalcond[1]=((((-1.0)*x3828*x3837))+cj0+(((-1.0)*r12*x3834))+((r11*x3836)));
evalcond[2]=((((-1.0)*x3829*x3837))+((r01*x3836))+(((-1.0)*r02*x3834))+(((-1.0)*x3832)));
evalcond[3]=((((-1.0)*x3831*x3834))+((sj1*sj2))+((r22*x3826))+((r21*x3835))+(((-1.0)*cj1*x3830)));
evalcond[4]=((((-1.0)*x3829*x3834))+((r01*x3835))+(((-1.0)*cj0*sj1*x3830))+((r02*x3826))+(((-1.0)*cj0*x3833)));
evalcond[5]=(((r12*x3826))+(((-1.0)*x3828*x3834))+(((-1.0)*x3832*x3833))+((r11*x3835))+(((-1.0)*sj0*sj1*x3830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3838=((1.0)*gconst107);
CheckValue<IkReal> x3839 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3838))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3839.valid){
continue;
}
CheckValue<IkReal> x3840=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3838)))),-1);
if(!x3840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3839.value)+(((1.5707963267949)*(x3840.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3841=IKsin(j4);
IkReal x3842=IKcos(j4);
IkReal x3843=(gconst107*r10);
IkReal x3844=(gconst107*r00);
IkReal x3845=((1.0)*cj2);
IkReal x3846=(gconst107*r20);
IkReal x3847=((1.0)*sj0);
IkReal x3848=(cj1*sj2);
IkReal x3849=((1.0)*x3842);
IkReal x3850=(gconst106*x3842);
IkReal x3851=(gconst106*x3841);
IkReal x3852=((1.0)*x3841);
evalcond[0]=(((r21*x3851))+(((-1.0)*r22*x3849))+(((-1.0)*x3846*x3852)));
evalcond[1]=(((r11*x3851))+cj0+(((-1.0)*x3843*x3852))+(((-1.0)*r12*x3849)));
evalcond[2]=((((-1.0)*r02*x3849))+(((-1.0)*x3844*x3852))+((r01*x3851))+(((-1.0)*x3847)));
evalcond[3]=(((r21*x3850))+((sj1*sj2))+(((-1.0)*cj1*x3845))+((r22*x3841))+(((-1.0)*x3846*x3849)));
evalcond[4]=((((-1.0)*x3844*x3849))+(((-1.0)*cj0*sj1*x3845))+((r01*x3850))+(((-1.0)*cj0*x3848))+((r02*x3841)));
evalcond[5]=(((r12*x3841))+((r11*x3850))+(((-1.0)*x3843*x3849))+(((-1.0)*sj0*sj1*x3845))+(((-1.0)*x3847*x3848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3853=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3853;
j4eval[1]=IKsign(x3853);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3854=((1.0)*cj5);
IkReal x3855=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3854)));
j4eval[0]=x3855;
j4eval[1]=((IKabs(((((-1.0)*r20*x3854))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3855);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3856=(sj1*sj2);
IkReal x3857=(cj5*r10);
IkReal x3858=(r11*sj5);
IkReal x3859=(cj1*cj2);
IkReal x3860=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3860;
j4eval[1]=((IKabs(((((-1.0)*r12*x3856))+((r12*x3859)))))+(IKabs((((x3857*x3859))+(((-1.0)*x3858*x3859))+((x3856*x3858))+(((-1.0)*x3856*x3857))))));
j4eval[2]=IKsign(x3860);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3861=(sj1*sj2);
IkReal x3862=(cj5*r10);
IkReal x3863=(r11*sj5);
IkReal x3864=(cj1*cj2);
CheckValue<IkReal> x3865 = IKatan2WithCheck(IkReal((((x3862*x3864))+(((-1.0)*x3863*x3864))+(((-1.0)*x3861*x3862))+((x3861*x3863)))),IkReal(((((-1.0)*r12*x3861))+((r12*x3864)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3865.valid){
continue;
}
CheckValue<IkReal> x3866=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3865.value)+(((1.5707963267949)*(x3866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3867=IKcos(j4);
IkReal x3868=IKsin(j4);
IkReal x3869=(cj5*r00);
IkReal x3870=(cj5*r10);
IkReal x3871=(r21*sj5);
IkReal x3872=((1.0)*cj2);
IkReal x3873=(cj5*r20);
IkReal x3874=((1.0)*x3867);
IkReal x3875=((1.0)*x3868);
IkReal x3876=(sj5*x3868);
IkReal x3877=(sj5*x3867);
evalcond[0]=((((-1.0)*x3870*x3874))+((r11*x3877))+((r12*x3868)));
evalcond[1]=((((-1.0)*x3873*x3875))+((x3868*x3871))+(((-1.0)*r22*x3874)));
evalcond[2]=(((r01*x3876))+(((-1.0)*r02*x3874))+(((-1.0)*x3869*x3875)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3874))+(((-1.0)*x3870*x3875))+((r11*x3876)));
evalcond[4]=((((-1.0)*x3873*x3874))+((x3867*x3871))+((sj1*sj2))+(((-1.0)*cj1*x3872))+((r22*x3868)));
evalcond[5]=(((r02*x3868))+((r01*x3877))+(((-1.0)*cj1*sj2))+(((-1.0)*x3869*x3874))+(((-1.0)*sj1*x3872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3878=((1.0)*cj5);
CheckValue<IkReal> x3879 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3878)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3879.valid){
continue;
}
CheckValue<IkReal> x3880=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3878)))),-1);
if(!x3880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3879.value)+(((1.5707963267949)*(x3880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3881=IKcos(j4);
IkReal x3882=IKsin(j4);
IkReal x3883=(cj5*r00);
IkReal x3884=(cj5*r10);
IkReal x3885=(r21*sj5);
IkReal x3886=((1.0)*cj2);
IkReal x3887=(cj5*r20);
IkReal x3888=((1.0)*x3881);
IkReal x3889=((1.0)*x3882);
IkReal x3890=(sj5*x3882);
IkReal x3891=(sj5*x3881);
evalcond[0]=(((r12*x3882))+((r11*x3891))+(((-1.0)*x3884*x3888)));
evalcond[1]=(((x3882*x3885))+(((-1.0)*r22*x3888))+(((-1.0)*x3887*x3889)));
evalcond[2]=((((-1.0)*r02*x3888))+(((-1.0)*x3883*x3889))+((r01*x3890)));
evalcond[3]=((1.0)+((r11*x3890))+(((-1.0)*x3884*x3889))+(((-1.0)*r12*x3888)));
evalcond[4]=((((-1.0)*cj1*x3886))+((r22*x3882))+((sj1*sj2))+((x3881*x3885))+(((-1.0)*x3887*x3888)));
evalcond[5]=((((-1.0)*sj1*x3886))+(((-1.0)*x3883*x3888))+(((-1.0)*cj1*sj2))+((r01*x3891))+((r02*x3882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3892=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3892.valid){
continue;
}
CheckValue<IkReal> x3893 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3892.value)))+(x3893.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3894=IKcos(j4);
IkReal x3895=IKsin(j4);
IkReal x3896=(cj5*r00);
IkReal x3897=(cj5*r10);
IkReal x3898=(r21*sj5);
IkReal x3899=((1.0)*cj2);
IkReal x3900=(cj5*r20);
IkReal x3901=((1.0)*x3894);
IkReal x3902=((1.0)*x3895);
IkReal x3903=(sj5*x3895);
IkReal x3904=(sj5*x3894);
evalcond[0]=((((-1.0)*x3897*x3901))+((r12*x3895))+((r11*x3904)));
evalcond[1]=((((-1.0)*x3900*x3902))+((x3895*x3898))+(((-1.0)*r22*x3901)));
evalcond[2]=(((r01*x3903))+(((-1.0)*r02*x3901))+(((-1.0)*x3896*x3902)));
evalcond[3]=((1.0)+(((-1.0)*x3897*x3902))+(((-1.0)*r12*x3901))+((r11*x3903)));
evalcond[4]=((((-1.0)*x3900*x3901))+((x3894*x3898))+((sj1*sj2))+((r22*x3895))+(((-1.0)*cj1*x3899)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x3904))+(((-1.0)*sj1*x3899))+(((-1.0)*x3896*x3901))+((r02*x3895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3905=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3905;
j4eval[1]=IKsign(x3905);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3906=((1.0)*cj5);
IkReal x3907=((((-1.0)*r21*x3906))+(((-1.0)*r20*sj5)));
j4eval[0]=x3907;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3906))))));
j4eval[2]=IKsign(x3907);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3908=cj5*cj5;
IkReal x3909=r11*r11;
IkReal x3910=(r11*sj5);
IkReal x3911=(cj5*r10);
IkReal x3912=((r12*r12)+(((-2.0)*x3910*x3911))+((x3908*(r10*r10)))+(((-1.0)*x3908*x3909))+x3909);
j4eval[0]=x3912;
j4eval[1]=IKsign(x3912);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3911))+x3910))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3913=cj5*cj5;
IkReal x3914=r11*r11;
IkReal x3915=(cj5*r10);
IkReal x3916=(r11*sj5);
CheckValue<IkReal> x3917 = IKatan2WithCheck(IkReal(((((-1.0)*x3915))+x3916)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3917.valid){
continue;
}
CheckValue<IkReal> x3918=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x3913*x3914))+(((-2.0)*x3915*x3916))+x3914+((x3913*(r10*r10))))),-1);
if(!x3918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3917.value)+(((1.5707963267949)*(x3918.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3919=IKcos(j4);
IkReal x3920=IKsin(j4);
IkReal x3921=(cj5*r00);
IkReal x3922=(cj5*r10);
IkReal x3923=(r21*sj5);
IkReal x3924=(cj5*r20);
IkReal x3925=((1.0)*x3919);
IkReal x3926=((1.0)*x3920);
IkReal x3927=(sj5*x3920);
IkReal x3928=(sj5*x3919);
evalcond[0]=(((r11*x3928))+((r12*x3920))+(((-1.0)*x3922*x3925)));
evalcond[1]=(((x3920*x3923))+(((-1.0)*x3924*x3926))+(((-1.0)*r22*x3925)));
evalcond[2]=((((-1.0)*r02*x3925))+(((-1.0)*x3921*x3926))+((r01*x3927)));
evalcond[3]=((-1.0)+((r11*x3927))+(((-1.0)*x3922*x3926))+(((-1.0)*r12*x3925)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x3920))+(((-1.0)*x3921*x3925))+((r01*x3928)));
evalcond[5]=(((x3919*x3923))+(((-1.0)*x3924*x3925))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3929=((1.0)*cj5);
CheckValue<IkReal> x3930=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3929))+(((-1.0)*r20*sj5)))),-1);
if(!x3930.valid){
continue;
}
CheckValue<IkReal> x3931 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3929)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3930.value)))+(x3931.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3932=IKcos(j4);
IkReal x3933=IKsin(j4);
IkReal x3934=(cj5*r00);
IkReal x3935=(cj5*r10);
IkReal x3936=(r21*sj5);
IkReal x3937=(cj5*r20);
IkReal x3938=((1.0)*x3932);
IkReal x3939=((1.0)*x3933);
IkReal x3940=(sj5*x3933);
IkReal x3941=(sj5*x3932);
evalcond[0]=((((-1.0)*x3935*x3938))+((r12*x3933))+((r11*x3941)));
evalcond[1]=(((x3933*x3936))+(((-1.0)*x3937*x3939))+(((-1.0)*r22*x3938)));
evalcond[2]=(((r01*x3940))+(((-1.0)*x3934*x3939))+(((-1.0)*r02*x3938)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3938))+(((-1.0)*x3935*x3939))+((r11*x3940)));
evalcond[4]=(((cj2*sj1))+((r01*x3941))+((cj1*sj2))+(((-1.0)*x3934*x3938))+((r02*x3933)));
evalcond[5]=(((r22*x3933))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3937*x3938))+((x3932*x3936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3942 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3942.valid){
continue;
}
CheckValue<IkReal> x3943=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3942.value)+(((1.5707963267949)*(x3943.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3944=IKcos(j4);
IkReal x3945=IKsin(j4);
IkReal x3946=(cj5*r00);
IkReal x3947=(cj5*r10);
IkReal x3948=(r21*sj5);
IkReal x3949=(cj5*r20);
IkReal x3950=((1.0)*x3944);
IkReal x3951=((1.0)*x3945);
IkReal x3952=(sj5*x3945);
IkReal x3953=(sj5*x3944);
evalcond[0]=(((r11*x3953))+((r12*x3945))+(((-1.0)*x3947*x3950)));
evalcond[1]=((((-1.0)*x3949*x3951))+(((-1.0)*r22*x3950))+((x3945*x3948)));
evalcond[2]=((((-1.0)*x3946*x3951))+((r01*x3952))+(((-1.0)*r02*x3950)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3950))+((r11*x3952))+(((-1.0)*x3947*x3951)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3946*x3950))+((cj1*sj2))+((r01*x3953))+((r02*x3945)));
evalcond[5]=(((r22*x3945))+(((-1.0)*x3949*x3950))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3944*x3948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3954=((-1.0)*r00);
IkReal x3956 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3956)==0){
continue;
}
IkReal x3955=pow(x3956,-0.5);
CheckValue<IkReal> x3957 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3954),IKFAST_ATAN2_MAGTHRESH);
if(!x3957.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3957.value));
IkReal gconst109=(r01*x3955);
IkReal gconst110=(x3954*x3955);
CheckValue<IkReal> x3958 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3958.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3958.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3959=((-1.0)*r00);
IkReal x3960=x3955;
CheckValue<IkReal> x3962 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3959),IKFAST_ATAN2_MAGTHRESH);
if(!x3962.valid){
continue;
}
IkReal x3961=((-1.0)*(x3962.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3961;
IkReal gconst108=x3961;
IkReal gconst109=(r01*x3960);
IkReal gconst110=(x3959*x3960);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3963=((1.0)*sj0);
IkReal x3964=((1.0)*gconst109);
CheckValue<IkReal> x3965 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3963)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*cj0*r01*x3964))+(((-1.0)*gconst109*r11*x3963)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3965.valid){
continue;
}
CheckValue<IkReal> x3966=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3964))+(((-1.0)*gconst110*r21)))),-1);
if(!x3966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3965.value)+(((1.5707963267949)*(x3966.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3967=IKsin(j4);
IkReal x3968=IKcos(j4);
IkReal x3969=(gconst109*r21);
IkReal x3970=((1.0)*cj2);
IkReal x3971=((1.0)*sj0);
IkReal x3972=(cj1*sj2);
IkReal x3973=((1.0)*x3968);
IkReal x3974=(gconst109*x3967);
IkReal x3975=(gconst109*x3968);
IkReal x3976=((1.0)*gconst110*x3967);
evalcond[0]=((((-1.0)*r20*x3976))+(((-1.0)*r22*x3973))+((x3967*x3969)));
evalcond[1]=((((-1.0)*r12*x3973))+cj0+((r11*x3974))+(((-1.0)*r10*x3976)));
evalcond[2]=((((-1.0)*x3971))+(((-1.0)*r02*x3973))+((r01*x3974))+(((-1.0)*r00*x3976)));
evalcond[3]=((((-1.0)*cj1*x3970))+(((-1.0)*gconst110*r20*x3973))+((r22*x3967))+((sj1*sj2))+((x3968*x3969)));
evalcond[4]=((((-1.0)*gconst110*r00*x3973))+((r02*x3967))+(((-1.0)*cj0*sj1*x3970))+((r01*x3975))+(((-1.0)*cj0*x3972)));
evalcond[5]=((((-1.0)*gconst110*r10*x3973))+((r11*x3975))+((r12*x3967))+(((-1.0)*x3971*x3972))+(((-1.0)*sj0*sj1*x3970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3977=((1.0)*gconst110);
CheckValue<IkReal> x3978 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x3977)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3978.valid){
continue;
}
CheckValue<IkReal> x3979=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x3977)))),-1);
if(!x3979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3978.value)+(((1.5707963267949)*(x3979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3980=IKsin(j4);
IkReal x3981=IKcos(j4);
IkReal x3982=(gconst109*r21);
IkReal x3983=((1.0)*cj2);
IkReal x3984=((1.0)*sj0);
IkReal x3985=(cj1*sj2);
IkReal x3986=((1.0)*x3981);
IkReal x3987=(gconst109*x3980);
IkReal x3988=(gconst109*x3981);
IkReal x3989=((1.0)*gconst110*x3980);
evalcond[0]=((((-1.0)*r22*x3986))+(((-1.0)*r20*x3989))+((x3980*x3982)));
evalcond[1]=((((-1.0)*r12*x3986))+((r11*x3987))+cj0+(((-1.0)*r10*x3989)));
evalcond[2]=(((r01*x3987))+(((-1.0)*r00*x3989))+(((-1.0)*x3984))+(((-1.0)*r02*x3986)));
evalcond[3]=(((sj1*sj2))+((x3981*x3982))+(((-1.0)*gconst110*r20*x3986))+(((-1.0)*cj1*x3983))+((r22*x3980)));
evalcond[4]=((((-1.0)*cj0*sj1*x3983))+((r01*x3988))+(((-1.0)*cj0*x3985))+(((-1.0)*gconst110*r00*x3986))+((r02*x3980)));
evalcond[5]=(((r11*x3988))+(((-1.0)*x3984*x3985))+(((-1.0)*sj0*sj1*x3983))+(((-1.0)*gconst110*r10*x3986))+((r12*x3980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3990=((-1.0)*r01);
IkReal x3992 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3992)==0){
continue;
}
IkReal x3991=pow(x3992,-0.5);
CheckValue<IkReal> x3993 = IKatan2WithCheck(IkReal(x3990),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3993.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3993.value))));
IkReal gconst112=(x3990*x3991);
IkReal gconst113=((1.0)*r00*x3991);
CheckValue<IkReal> x3994 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3994.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3994.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3995=((-1.0)*r01);
CheckValue<IkReal> x3998 = IKatan2WithCheck(IkReal(x3995),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3998.valid){
continue;
}
IkReal x3996=((1.0)*(x3998.value));
IkReal x3997=x3991;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3996)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3996)));
IkReal gconst112=(x3995*x3997);
IkReal gconst113=((1.0)*r00*x3997);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3999=((-1.0)*r01);
CheckValue<IkReal> x4002 = IKatan2WithCheck(IkReal(x3999),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4002.valid){
continue;
}
IkReal x4000=((1.0)*(x4002.value));
IkReal x4001=x3991;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4000)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4000)));
IkReal gconst112=(x3999*x4001);
IkReal gconst113=((1.0)*r00*x4001);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4003=((-1.0)*r01);
CheckValue<IkReal> x4006 = IKatan2WithCheck(IkReal(x4003),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4006.valid){
continue;
}
IkReal x4004=((1.0)*(x4006.value));
IkReal x4005=x3991;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4004)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4004)));
IkReal gconst112=(x4003*x4005);
IkReal gconst113=((1.0)*r00*x4005);
IkReal x4007=r02*r02;
IkReal x4008=(r12*sj0);
IkReal x4009=((1.0)*cj0);
IkReal x4010=x3991;
j4eval[0]=((IKabs((((cj0*x4007*x4010))+(((-1.0)*x4009*x4010))+((r02*x4008*x4010)))))+(IKabs(((((-1.0)*r02*x4009))+(((-1.0)*x4008))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4011=((1.0)*sj0);
IkReal x4012=((1.0)*gconst112);
CheckValue<IkReal> x4013=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x4012)))),-1);
if(!x4013.valid){
continue;
}
CheckValue<IkReal> x4014 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4011))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4012))+(((-1.0)*gconst112*r11*x4011)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4013.value)))+(x4014.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4015=IKsin(j4);
IkReal x4016=IKcos(j4);
IkReal x4017=(gconst113*r20);
IkReal x4018=(gconst112*r21);
IkReal x4019=((1.0)*cj2);
IkReal x4020=(gconst113*r00);
IkReal x4021=(gconst113*r10);
IkReal x4022=((1.0)*sj0);
IkReal x4023=(cj1*sj2);
IkReal x4024=((1.0)*x4016);
IkReal x4025=((1.0)*x4015);
IkReal x4026=(gconst112*x4016);
IkReal x4027=(gconst112*x4015);
evalcond[0]=((((-1.0)*r22*x4024))+((x4015*x4018))+(((-1.0)*x4017*x4025)));
evalcond[1]=((((-1.0)*r12*x4024))+cj0+(((-1.0)*x4021*x4025))+((r11*x4027)));
evalcond[2]=((((-1.0)*r02*x4024))+((r01*x4027))+(((-1.0)*x4022))+(((-1.0)*x4020*x4025)));
evalcond[3]=(((x4016*x4018))+(((-1.0)*cj1*x4019))+((sj1*sj2))+((r22*x4015))+(((-1.0)*x4017*x4024)));
evalcond[4]=(((r02*x4015))+(((-1.0)*cj0*x4023))+(((-1.0)*cj0*sj1*x4019))+((r01*x4026))+(((-1.0)*x4020*x4024)));
evalcond[5]=((((-1.0)*sj0*sj1*x4019))+(((-1.0)*x4022*x4023))+((r12*x4015))+(((-1.0)*x4021*x4024))+((r11*x4026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4028=((1.0)*gconst113);
CheckValue<IkReal> x4029=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4028))+(((-1.0)*gconst112*r10)))),-1);
if(!x4029.valid){
continue;
}
CheckValue<IkReal> x4030 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4029.value)))+(x4030.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4031=IKsin(j4);
IkReal x4032=IKcos(j4);
IkReal x4033=(gconst113*r20);
IkReal x4034=(gconst112*r21);
IkReal x4035=((1.0)*cj2);
IkReal x4036=(gconst113*r00);
IkReal x4037=(gconst113*r10);
IkReal x4038=((1.0)*sj0);
IkReal x4039=(cj1*sj2);
IkReal x4040=((1.0)*x4032);
IkReal x4041=((1.0)*x4031);
IkReal x4042=(gconst112*x4032);
IkReal x4043=(gconst112*x4031);
evalcond[0]=((((-1.0)*x4033*x4041))+((x4031*x4034))+(((-1.0)*r22*x4040)));
evalcond[1]=(cj0+(((-1.0)*r12*x4040))+((r11*x4043))+(((-1.0)*x4037*x4041)));
evalcond[2]=((((-1.0)*x4036*x4041))+(((-1.0)*x4038))+(((-1.0)*r02*x4040))+((r01*x4043)));
evalcond[3]=(((x4032*x4034))+(((-1.0)*cj1*x4035))+((sj1*sj2))+(((-1.0)*x4033*x4040))+((r22*x4031)));
evalcond[4]=((((-1.0)*cj0*x4039))+(((-1.0)*x4036*x4040))+((r02*x4031))+((r01*x4042))+(((-1.0)*cj0*sj1*x4035)));
evalcond[5]=((((-1.0)*x4038*x4039))+((r11*x4042))+(((-1.0)*x4037*x4040))+((r12*x4031))+(((-1.0)*sj0*sj1*x4035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4044=((1.0)*gconst113);
CheckValue<IkReal> x4045=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4044))+(((-1.0)*gconst112*r00)))),-1);
if(!x4045.valid){
continue;
}
CheckValue<IkReal> x4046 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4044)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4045.value)))+(x4046.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4047=IKsin(j4);
IkReal x4048=IKcos(j4);
IkReal x4049=(gconst113*r20);
IkReal x4050=(gconst112*r21);
IkReal x4051=((1.0)*cj2);
IkReal x4052=(gconst113*r00);
IkReal x4053=(gconst113*r10);
IkReal x4054=((1.0)*sj0);
IkReal x4055=(cj1*sj2);
IkReal x4056=((1.0)*x4048);
IkReal x4057=((1.0)*x4047);
IkReal x4058=(gconst112*x4048);
IkReal x4059=(gconst112*x4047);
evalcond[0]=((((-1.0)*x4049*x4057))+((x4047*x4050))+(((-1.0)*r22*x4056)));
evalcond[1]=(cj0+(((-1.0)*r12*x4056))+(((-1.0)*x4053*x4057))+((r11*x4059)));
evalcond[2]=((((-1.0)*x4052*x4057))+(((-1.0)*x4054))+(((-1.0)*r02*x4056))+((r01*x4059)));
evalcond[3]=(((r22*x4047))+((x4048*x4050))+((sj1*sj2))+(((-1.0)*x4049*x4056))+(((-1.0)*cj1*x4051)));
evalcond[4]=(((r02*x4047))+(((-1.0)*x4052*x4056))+(((-1.0)*cj0*sj1*x4051))+(((-1.0)*cj0*x4055))+((r01*x4058)));
evalcond[5]=((((-1.0)*x4053*x4056))+(((-1.0)*sj0*sj1*x4051))+((r11*x4058))+((r12*x4047))+(((-1.0)*x4054*x4055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4060=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4060;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4060);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4061=((1.0)*cj5);
IkReal x4062=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4061)));
j4eval[0]=x4062;
j4eval[1]=((IKabs(((((-1.0)*r20*x4061))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4062);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4063=cj5*cj5;
IkReal x4064=r01*r01;
IkReal x4065=(cj5*r00);
IkReal x4066=(r01*sj5);
IkReal x4067=((((-1.0)*x4063*x4064))+x4064+(((-2.0)*x4065*x4066))+(r02*r02)+((x4063*(r00*r00))));
j4eval[0]=x4067;
j4eval[1]=IKsign(x4067);
j4eval[2]=((IKabs(r02))+(IKabs((x4066+(((-1.0)*x4065))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4068=cj5*cj5;
IkReal x4069=r01*r01;
IkReal x4070=(r01*sj5);
IkReal x4071=(cj5*r00);
CheckValue<IkReal> x4072 = IKatan2WithCheck(IkReal(((((-1.0)*x4071))+x4070)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4072.valid){
continue;
}
CheckValue<IkReal> x4073=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4070*x4071))+((x4068*(r00*r00)))+x4069+(r02*r02)+(((-1.0)*x4068*x4069)))),-1);
if(!x4073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4072.value)+(((1.5707963267949)*(x4073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4074=IKcos(j4);
IkReal x4075=IKsin(j4);
IkReal x4076=(cj5*r00);
IkReal x4077=(cj5*r10);
IkReal x4078=(r21*sj5);
IkReal x4079=((1.0)*cj2);
IkReal x4080=(cj5*r20);
IkReal x4081=((1.0)*x4074);
IkReal x4082=((1.0)*x4075);
IkReal x4083=(sj5*x4075);
IkReal x4084=(sj5*x4074);
evalcond[0]=(((r01*x4084))+((r02*x4075))+(((-1.0)*x4076*x4081)));
evalcond[1]=(((x4075*x4078))+(((-1.0)*r22*x4081))+(((-1.0)*x4080*x4082)));
evalcond[2]=((((-1.0)*r12*x4081))+((r11*x4083))+(((-1.0)*x4077*x4082)));
evalcond[3]=((-1.0)+((r01*x4083))+(((-1.0)*r02*x4081))+(((-1.0)*x4076*x4082)));
evalcond[4]=(((x4074*x4078))+((r22*x4075))+((sj1*sj2))+(((-1.0)*cj1*x4079))+(((-1.0)*x4080*x4081)));
evalcond[5]=(((r12*x4075))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4079))+((r11*x4084))+(((-1.0)*x4077*x4081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4085=((1.0)*cj5);
CheckValue<IkReal> x4086 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4085))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4086.valid){
continue;
}
CheckValue<IkReal> x4087=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4085))+(((-1.0)*r10*sj5)))),-1);
if(!x4087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4086.value)+(((1.5707963267949)*(x4087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4088=IKcos(j4);
IkReal x4089=IKsin(j4);
IkReal x4090=(cj5*r00);
IkReal x4091=(cj5*r10);
IkReal x4092=(r21*sj5);
IkReal x4093=((1.0)*cj2);
IkReal x4094=(cj5*r20);
IkReal x4095=((1.0)*x4088);
IkReal x4096=((1.0)*x4089);
IkReal x4097=(sj5*x4089);
IkReal x4098=(sj5*x4088);
evalcond[0]=(((r01*x4098))+(((-1.0)*x4090*x4095))+((r02*x4089)));
evalcond[1]=((((-1.0)*r22*x4095))+((x4089*x4092))+(((-1.0)*x4094*x4096)));
evalcond[2]=((((-1.0)*r12*x4095))+((r11*x4097))+(((-1.0)*x4091*x4096)));
evalcond[3]=((-1.0)+((r01*x4097))+(((-1.0)*x4090*x4096))+(((-1.0)*r02*x4095)));
evalcond[4]=(((x4088*x4092))+((sj1*sj2))+(((-1.0)*cj1*x4093))+((r22*x4089))+(((-1.0)*x4094*x4095)));
evalcond[5]=((((-1.0)*sj1*x4093))+(((-1.0)*cj1*sj2))+((r11*x4098))+((r12*x4089))+(((-1.0)*x4091*x4095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4099=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4099.valid){
continue;
}
CheckValue<IkReal> x4100 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4099.value)))+(x4100.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4101=IKcos(j4);
IkReal x4102=IKsin(j4);
IkReal x4103=(cj5*r00);
IkReal x4104=(cj5*r10);
IkReal x4105=(r21*sj5);
IkReal x4106=((1.0)*cj2);
IkReal x4107=(cj5*r20);
IkReal x4108=((1.0)*x4101);
IkReal x4109=((1.0)*x4102);
IkReal x4110=(sj5*x4102);
IkReal x4111=(sj5*x4101);
evalcond[0]=(((r02*x4102))+(((-1.0)*x4103*x4108))+((r01*x4111)));
evalcond[1]=((((-1.0)*r22*x4108))+(((-1.0)*x4107*x4109))+((x4102*x4105)));
evalcond[2]=((((-1.0)*x4104*x4109))+(((-1.0)*r12*x4108))+((r11*x4110)));
evalcond[3]=((-1.0)+(((-1.0)*x4103*x4109))+((r01*x4110))+(((-1.0)*r02*x4108)));
evalcond[4]=(((r22*x4102))+(((-1.0)*cj1*x4106))+(((-1.0)*x4107*x4108))+((sj1*sj2))+((x4101*x4105)));
evalcond[5]=((((-1.0)*x4104*x4108))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4106))+((r12*x4102))+((r11*x4111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4112=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4112;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4112);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4113=((1.0)*cj5);
IkReal x4114=((((-1.0)*r21*x4113))+(((-1.0)*r20*sj5)));
j4eval[0]=x4114;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4113))))));
j4eval[2]=IKsign(x4114);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4115=cj5*cj5;
IkReal x4116=r01*r01;
IkReal x4117=(r01*sj5);
IkReal x4118=(cj5*r00);
IkReal x4119=((((-1.0)*x4115*(r00*r00)))+(((-1.0)*(r02*r02)))+((x4115*x4116))+(((2.0)*x4117*x4118))+(((-1.0)*x4116)));
j4eval[0]=x4119;
j4eval[1]=IKsign(x4119);
j4eval[2]=((IKabs(r02))+(IKabs((x4117+(((-1.0)*x4118))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4120=cj5*cj5;
IkReal x4121=r01*r01;
IkReal x4122=(r01*sj5);
IkReal x4123=(cj5*r00);
CheckValue<IkReal> x4124=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4120*(r00*r00)))+((x4120*x4121))+(((-1.0)*(r02*r02)))+(((2.0)*x4122*x4123))+(((-1.0)*x4121)))),-1);
if(!x4124.valid){
continue;
}
CheckValue<IkReal> x4125 = IKatan2WithCheck(IkReal((x4122+(((-1.0)*x4123)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4124.value)))+(x4125.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4126=IKcos(j4);
IkReal x4127=IKsin(j4);
IkReal x4128=(cj5*r00);
IkReal x4129=(cj5*r10);
IkReal x4130=(r21*sj5);
IkReal x4131=(cj5*r20);
IkReal x4132=((1.0)*x4126);
IkReal x4133=((1.0)*x4127);
IkReal x4134=(sj5*x4127);
IkReal x4135=(sj5*x4126);
evalcond[0]=(((r02*x4127))+((r01*x4135))+(((-1.0)*x4128*x4132)));
evalcond[1]=((((-1.0)*x4131*x4133))+((x4127*x4130))+(((-1.0)*r22*x4132)));
evalcond[2]=(((r11*x4134))+(((-1.0)*x4129*x4133))+(((-1.0)*r12*x4132)));
evalcond[3]=((1.0)+((r01*x4134))+(((-1.0)*r02*x4132))+(((-1.0)*x4128*x4133)));
evalcond[4]=(((r12*x4127))+((cj2*sj1))+((cj1*sj2))+((r11*x4135))+(((-1.0)*x4129*x4132)));
evalcond[5]=((((-1.0)*x4131*x4132))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4126*x4130))+((r22*x4127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4136=((1.0)*cj5);
CheckValue<IkReal> x4137=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4136))+(((-1.0)*r20*sj5)))),-1);
if(!x4137.valid){
continue;
}
CheckValue<IkReal> x4138 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4136)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4137.value)))+(x4138.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4139=IKcos(j4);
IkReal x4140=IKsin(j4);
IkReal x4141=(cj5*r00);
IkReal x4142=(cj5*r10);
IkReal x4143=(r21*sj5);
IkReal x4144=(cj5*r20);
IkReal x4145=((1.0)*x4139);
IkReal x4146=((1.0)*x4140);
IkReal x4147=(sj5*x4140);
IkReal x4148=(sj5*x4139);
evalcond[0]=(((r02*x4140))+((r01*x4148))+(((-1.0)*x4141*x4145)));
evalcond[1]=((((-1.0)*x4144*x4146))+(((-1.0)*r22*x4145))+((x4140*x4143)));
evalcond[2]=((((-1.0)*x4142*x4146))+((r11*x4147))+(((-1.0)*r12*x4145)));
evalcond[3]=((1.0)+((r01*x4147))+(((-1.0)*r02*x4145))+(((-1.0)*x4141*x4146)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4140))+(((-1.0)*x4142*x4145))+((r11*x4148)));
evalcond[5]=(((x4139*x4143))+(((-1.0)*x4144*x4145))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4149 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4149.valid){
continue;
}
CheckValue<IkReal> x4150=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4149.value)+(((1.5707963267949)*(x4150.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4151=IKcos(j4);
IkReal x4152=IKsin(j4);
IkReal x4153=(cj5*r00);
IkReal x4154=(cj5*r10);
IkReal x4155=(r21*sj5);
IkReal x4156=(cj5*r20);
IkReal x4157=((1.0)*x4151);
IkReal x4158=((1.0)*x4152);
IkReal x4159=(sj5*x4152);
IkReal x4160=(sj5*x4151);
evalcond[0]=(((r01*x4160))+((r02*x4152))+(((-1.0)*x4153*x4157)));
evalcond[1]=(((x4152*x4155))+(((-1.0)*x4156*x4158))+(((-1.0)*r22*x4157)));
evalcond[2]=(((r11*x4159))+(((-1.0)*x4154*x4158))+(((-1.0)*r12*x4157)));
evalcond[3]=((1.0)+((r01*x4159))+(((-1.0)*r02*x4157))+(((-1.0)*x4153*x4158)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4152))+(((-1.0)*x4154*x4157))+((r11*x4160)));
evalcond[5]=(((r22*x4152))+(((-1.0)*cj1*cj2))+(((-1.0)*x4156*x4157))+((sj1*sj2))+((x4151*x4155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4161=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4161);
rxp1_1=(px*r21);
rxp1_2=(r11*x4161);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4162=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4162);
rxp1_1=(px*r21);
rxp1_2=(r11*x4162);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4163=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4163);
rxp1_1=(px*r21);
rxp1_2=(r11*x4163);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4166=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4166.valid){
continue;
}
IkReal x4164=x4166.value;
IkReal x4165=(sj0*x4164);
cj4array[0]=(((cj1*sj2*x4165))+((cj2*sj1*x4165)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4167=IKsin(j4);
IkReal x4168=IKcos(j4);
IkReal x4169=(r21*sj5);
IkReal x4170=((1.0)*cj5*r20);
evalcond[0]=(r02*x4167);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4168)));
evalcond[2]=(((x4167*x4169))+(((-1.0)*x4167*x4170)));
evalcond[3]=((((-1.0)*cj5*r10*x4167))+((r11*sj5*x4167)));
evalcond[4]=(((x4168*x4169))+(((-1.0)*x4168*x4170))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4172=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4172.valid){
continue;
}
IkReal x4171=x4172.value;
cj4array[0]=(((cj1*cj2*x4171))+(((-1.0)*sj1*sj2*x4171)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4173=IKsin(j4);
IkReal x4174=IKcos(j4);
IkReal x4175=((1.0)*sj0);
IkReal x4176=((1.0)*cj5);
IkReal x4177=(sj5*x4173);
evalcond[0]=(r02*x4173);
evalcond[1]=((((-1.0)*x4175))+(((-1.0)*r02*x4174)));
evalcond[2]=((((-1.0)*r20*x4173*x4176))+((r21*x4177)));
evalcond[3]=(((r11*x4177))+(((-1.0)*r10*x4173*x4176)));
evalcond[4]=((((-1.0)*cj1*sj2*x4175))+(((-1.0)*r10*x4174*x4176))+(((-1.0)*cj2*sj1*x4175))+((r11*sj5*x4174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4178=IKPowWithIntegerCheck(r02,-1);
if(!x4178.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4178.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4179=IKsin(j4);
IkReal x4180=IKcos(j4);
IkReal x4181=((1.0)*cj1);
IkReal x4182=(r21*sj5);
IkReal x4183=((1.0)*cj5);
IkReal x4184=(r11*sj5);
evalcond[0]=(r02*x4179);
evalcond[1]=((((-1.0)*r20*x4179*x4183))+((x4179*x4182)));
evalcond[2]=(((x4179*x4184))+(((-1.0)*r10*x4179*x4183)));
evalcond[3]=((((-1.0)*r20*x4180*x4183))+((x4180*x4182))+((sj1*sj2))+(((-1.0)*cj2*x4181)));
evalcond[4]=(((x4180*x4184))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x4180*x4183))+(((-1.0)*sj0*sj2*x4181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4185=((1.0)*sj0);
IkReal x4186=((1.0)*cj0);
CheckValue<IkReal> x4187 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4185))+(((-1.0)*r02*x4186)))),IkReal(((((-1.0)*r01*sj5*x4186))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4187.valid){
continue;
}
CheckValue<IkReal> x4188=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4187.value)+(((1.5707963267949)*(x4188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4189=IKsin(j4);
IkReal x4190=IKcos(j4);
IkReal x4191=(cj5*r00);
IkReal x4192=(cj5*r10);
IkReal x4193=(r21*sj5);
IkReal x4194=((1.0)*cj2);
IkReal x4195=((1.0)*sj0);
IkReal x4196=(cj1*sj2);
IkReal x4197=(cj5*r20);
IkReal x4198=((1.0)*x4190);
IkReal x4199=((1.0)*x4189);
IkReal x4200=(sj5*x4189);
IkReal x4201=(sj5*x4190);
evalcond[0]=(((x4189*x4193))+(((-1.0)*r22*x4198))+(((-1.0)*x4197*x4199)));
evalcond[1]=((((-1.0)*r12*x4198))+((r11*x4200))+cj0+(((-1.0)*x4192*x4199)));
evalcond[2]=((((-1.0)*x4195))+((r01*x4200))+(((-1.0)*r02*x4198))+(((-1.0)*x4191*x4199)));
evalcond[3]=(((x4190*x4193))+((sj1*sj2))+((r22*x4189))+(((-1.0)*x4197*x4198))+(((-1.0)*cj1*x4194)));
evalcond[4]=(((r02*x4189))+(((-1.0)*cj0*sj1*x4194))+(((-1.0)*cj0*x4196))+((r01*x4201))+(((-1.0)*x4191*x4198)));
evalcond[5]=(((r12*x4189))+((r11*x4201))+(((-1.0)*x4195*x4196))+(((-1.0)*sj0*sj1*x4194))+(((-1.0)*x4192*x4198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4202=((1.0)*cj5);
CheckValue<IkReal> x4203=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4202)))),-1);
if(!x4203.valid){
continue;
}
CheckValue<IkReal> x4204 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4203.value)))+(x4204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4205=IKsin(j4);
IkReal x4206=IKcos(j4);
IkReal x4207=(cj5*r00);
IkReal x4208=(cj5*r10);
IkReal x4209=(r21*sj5);
IkReal x4210=((1.0)*cj2);
IkReal x4211=((1.0)*sj0);
IkReal x4212=(cj1*sj2);
IkReal x4213=(cj5*r20);
IkReal x4214=((1.0)*x4206);
IkReal x4215=((1.0)*x4205);
IkReal x4216=(sj5*x4205);
IkReal x4217=(sj5*x4206);
evalcond[0]=((((-1.0)*x4213*x4215))+((x4205*x4209))+(((-1.0)*r22*x4214)));
evalcond[1]=(cj0+((r11*x4216))+(((-1.0)*r12*x4214))+(((-1.0)*x4208*x4215)));
evalcond[2]=((((-1.0)*r02*x4214))+(((-1.0)*x4207*x4215))+((r01*x4216))+(((-1.0)*x4211)));
evalcond[3]=(((r22*x4205))+(((-1.0)*x4213*x4214))+((sj1*sj2))+((x4206*x4209))+(((-1.0)*cj1*x4210)));
evalcond[4]=((((-1.0)*cj0*sj1*x4210))+(((-1.0)*cj0*x4212))+((r02*x4205))+(((-1.0)*x4207*x4214))+((r01*x4217)));
evalcond[5]=(((r11*x4217))+(((-1.0)*sj0*sj1*x4210))+(((-1.0)*x4208*x4214))+(((-1.0)*x4211*x4212))+((r12*x4205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4218=((1.0)*cj5);
CheckValue<IkReal> x4219=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4218))+(((-1.0)*r00*sj5)))),-1);
if(!x4219.valid){
continue;
}
CheckValue<IkReal> x4220 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4219.value)))+(x4220.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4221=IKsin(j4);
IkReal x4222=IKcos(j4);
IkReal x4223=(cj5*r00);
IkReal x4224=(cj5*r10);
IkReal x4225=(r21*sj5);
IkReal x4226=((1.0)*cj2);
IkReal x4227=((1.0)*sj0);
IkReal x4228=(cj1*sj2);
IkReal x4229=(cj5*r20);
IkReal x4230=((1.0)*x4222);
IkReal x4231=((1.0)*x4221);
IkReal x4232=(sj5*x4221);
IkReal x4233=(sj5*x4222);
evalcond[0]=((((-1.0)*r22*x4230))+(((-1.0)*x4229*x4231))+((x4221*x4225)));
evalcond[1]=((((-1.0)*x4224*x4231))+cj0+(((-1.0)*r12*x4230))+((r11*x4232)));
evalcond[2]=((((-1.0)*x4227))+((r01*x4232))+(((-1.0)*x4223*x4231))+(((-1.0)*r02*x4230)));
evalcond[3]=(((sj1*sj2))+((r22*x4221))+(((-1.0)*x4229*x4230))+((x4222*x4225))+(((-1.0)*cj1*x4226)));
evalcond[4]=(((r01*x4233))+(((-1.0)*x4223*x4230))+((r02*x4221))+(((-1.0)*cj0*x4228))+(((-1.0)*cj0*sj1*x4226)));
evalcond[5]=((((-1.0)*x4224*x4230))+(((-1.0)*x4227*x4228))+(((-1.0)*sj0*sj1*x4226))+((r11*x4233))+((r12*x4221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4234=r21*r21;
IkReal x4235=cj5*cj5;
IkReal x4236=(sj1*sj2);
IkReal x4237=(r21*sj5);
IkReal x4238=(cj1*cj2);
IkReal x4239=(cj5*r20);
CheckValue<IkReal> x4240=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4235*(r20*r20)))+(((-1.0)*x4234))+(((-1.0)*(r22*r22)))+(((2.0)*x4237*x4239))+((x4234*x4235)))),-1);
if(!x4240.valid){
continue;
}
CheckValue<IkReal> x4241 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4238))+((r22*x4236)))),IkReal((((x4236*x4237))+((x4238*x4239))+(((-1.0)*x4236*x4239))+(((-1.0)*x4237*x4238)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4240.value)))+(x4241.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4242=IKsin(j4);
IkReal x4243=IKcos(j4);
IkReal x4244=(r21*sj5);
IkReal x4245=(cj5*r20);
IkReal x4246=((1.0)*x4243);
evalcond[0]=((((-1.0)*x4242*x4245))+(((-1.0)*r22*x4246))+((x4242*x4244)));
evalcond[1]=(((r22*x4242))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4243*x4244))+(((-1.0)*x4245*x4246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4247=(cj5*sj4);
IkReal x4248=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x4248))+(((-1.0)*r00*x4247)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x4247))+(((-1.0)*r11*x4248))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x4248))+(((-1.0)*r00*x4247))))+IKsqr((((r10*x4247))+(((-1.0)*r11*x4248))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x4248))+(((-1.0)*r00*x4247))), (((r10*x4247))+(((-1.0)*r11*x4248))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4249=IKcos(j0);
IkReal x4250=IKsin(j0);
IkReal x4251=((0.1)*sj5);
IkReal x4252=((0.392)*sj1);
IkReal x4253=(cj5*r11);
IkReal x4254=((1.0)*cj1);
IkReal x4255=(r11*sj5);
IkReal x4256=((1.0)*sj5);
IkReal x4257=((1.0)*sj1);
IkReal x4258=((1.0)*cj5);
IkReal x4259=((0.425)*cj1);
IkReal x4260=((1.0)*cj4);
IkReal x4261=(r01*sj5);
IkReal x4262=(sj2*x4250);
IkReal x4263=(sj2*x4249);
IkReal x4264=(cj4*x4258);
IkReal x4265=((0.392)*cj1*cj2);
IkReal x4266=(cj2*x4249);
IkReal x4267=(cj2*x4250);
evalcond[0]=((((-1.0)*r12*x4260))+(((-1.0)*r10*sj4*x4258))+((sj4*x4255))+x4249);
evalcond[1]=((((-1.0)*r02*x4260))+(((-1.0)*x4250))+((sj4*x4261))+(((-1.0)*r00*sj4*x4258)));
evalcond[2]=(((sj1*x4263))+(((-1.0)*x4254*x4266))+(((-1.0)*r01*x4258))+(((-1.0)*r00*x4256)));
evalcond[3]=(((sj1*x4262))+(((-1.0)*x4253))+(((-1.0)*x4254*x4267))+(((-1.0)*r10*x4256)));
evalcond[4]=(((cj4*x4261))+(((-1.0)*r00*x4264))+((r02*sj4))+(((-1.0)*x4254*x4263))+(((-1.0)*x4257*x4266)));
evalcond[5]=((((-1.0)*r10*x4264))+((r12*sj4))+(((-1.0)*x4254*x4262))+((cj4*x4255))+(((-1.0)*x4257*x4267)));
evalcond[6]=(((x4249*x4265))+(((-0.1)*cj5*r01))+((x4249*x4259))+(((-1.0)*px))+(((-1.0)*x4252*x4263))+(((-0.134)*x4250))+(((-1.0)*r00*x4251)));
evalcond[7]=((((0.134)*x4249))+(((-1.0)*py))+(((-1.0)*x4252*x4262))+((x4250*x4259))+((x4250*x4265))+(((-0.1)*x4253))+(((-1.0)*r10*x4251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4268 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4268.valid){
continue;
}
CheckValue<IkReal> x4269=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4269.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4268.value)+(((1.5707963267949)*(x4269.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4270=IKcos(j0);
IkReal x4271=IKsin(j0);
IkReal x4272=((0.1)*sj5);
IkReal x4273=(cj5*r11);
IkReal x4274=(sj1*sj2);
IkReal x4275=(cj1*cj2);
IkReal x4276=((1.0)*sj5);
IkReal x4277=(cj5*r01);
IkReal x4278=((0.425)*cj1);
IkReal x4279=((0.392)*x4271);
IkReal x4280=((0.392)*x4270);
evalcond[0]=(((x4270*x4274))+(((-1.0)*r00*x4276))+(((-1.0)*x4270*x4275))+(((-1.0)*x4277)));
evalcond[1]=((((-1.0)*r10*x4276))+(((-1.0)*x4271*x4275))+((x4271*x4274))+(((-1.0)*x4273)));
evalcond[2]=(((x4270*x4278))+(((-1.0)*r00*x4272))+(((-1.0)*px))+((x4275*x4280))+(((-0.1)*x4277))+(((-1.0)*x4274*x4280))+(((-0.134)*x4271)));
evalcond[3]=((((-1.0)*r10*x4272))+(((0.134)*x4270))+(((-1.0)*py))+((x4275*x4279))+(((-0.1)*x4273))+(((-1.0)*x4274*x4279))+((x4271*x4278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4281=((1.0)*cj5);
IkReal x4282=((((-1.0)*r01*x4281))+(((-1.0)*r00*sj5)));
j4eval[0]=x4282;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4281)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4282);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4283=((1.0)*cj5);
IkReal x4284=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4283)));
j4eval[0]=x4284;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4283))))));
j4eval[2]=IKsign(x4284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4285=((1.0)*sj0);
IkReal x4286=((1.0)*cj0);
IkReal x4287=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4287;
j4eval[1]=((IKabs(((((-1.0)*r12*x4285))+(((-1.0)*r02*x4286)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4286))+(((-1.0)*r11*sj5*x4285))))));
j4eval[2]=IKsign(x4287);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4288=((-1.0)*r20);
IkReal x4290 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4290)==0){
continue;
}
IkReal x4289=pow(x4290,-0.5);
CheckValue<IkReal> x4291 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4288),IKFAST_ATAN2_MAGTHRESH);
if(!x4291.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4291.value));
IkReal gconst97=(r21*x4289);
IkReal gconst98=(x4288*x4289);
CheckValue<IkReal> x4292 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4292.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4292.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4293=((-1.0)*r20);
IkReal x4294=x4289;
CheckValue<IkReal> x4296 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4293),IKFAST_ATAN2_MAGTHRESH);
if(!x4296.valid){
continue;
}
IkReal x4295=((-1.0)*(x4296.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4295;
IkReal gconst96=x4295;
IkReal gconst97=(r21*x4294);
IkReal gconst98=(x4293*x4294);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4297=((-1.0)*r20);
IkReal x4298=x4289;
CheckValue<IkReal> x4300 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4297),IKFAST_ATAN2_MAGTHRESH);
if(!x4300.valid){
continue;
}
IkReal x4299=((-1.0)*(x4300.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4299;
IkReal gconst96=x4299;
IkReal gconst97=(r21*x4298);
IkReal gconst98=(x4297*x4298);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4301=((-1.0)*r20);
IkReal x4302=x4289;
CheckValue<IkReal> x4304 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4301),IKFAST_ATAN2_MAGTHRESH);
if(!x4304.valid){
continue;
}
IkReal x4303=((-1.0)*(x4304.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4303;
IkReal gconst96=x4303;
IkReal gconst97=(r21*x4302);
IkReal gconst98=(x4301*x4302);
IkReal x4305=((1.0)*(r22*r22));
CheckValue<IkReal> x4309=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4305))),-1);
if(!x4309.valid){
continue;
}
IkReal x4306=x4309.value;
IkReal x4307=((1.0)*x4306);
IkReal x4308=((((-1.0)*x4307*(r21*r21*r21*r21)))+(((-2.0)*x4306*(r20*r20)*(r21*r21)))+(((-1.0)*x4307*(r20*r20*r20*r20)))+(((-1.0)*x4305)));
j4eval[0]=x4308;
j4eval[1]=IKsign(x4308);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4310=(cj1*cj2);
IkReal x4311=(gconst98*r20);
IkReal x4312=(sj1*sj2);
IkReal x4313=(gconst97*r21);
CheckValue<IkReal> x4314 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4310))+((r22*x4312)))),IkReal((((x4310*x4311))+(((-1.0)*x4310*x4313))+(((-1.0)*x4311*x4312))+((x4312*x4313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4314.valid){
continue;
}
CheckValue<IkReal> x4315=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4313*x4313)))+(((-1.0)*(x4311*x4311)))+(((-1.0)*(r22*r22)))+(((2.0)*x4311*x4313)))),-1);
if(!x4315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4314.value)+(((1.5707963267949)*(x4315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4316=IKsin(j4);
IkReal x4317=IKcos(j4);
IkReal x4318=(gconst98*r10);
IkReal x4319=(gconst97*r21);
IkReal x4320=(gconst98*r20);
IkReal x4321=((1.0)*cj2);
IkReal x4322=((1.0)*sj0);
IkReal x4323=(gconst98*r00);
IkReal x4324=(cj1*sj2);
IkReal x4325=((1.0)*x4317);
IkReal x4326=((1.0)*x4316);
IkReal x4327=(gconst97*x4316);
IkReal x4328=(gconst97*x4317);
evalcond[0]=(((x4316*x4319))+(((-1.0)*r22*x4325))+(((-1.0)*x4320*x4326)));
evalcond[1]=(cj0+(((-1.0)*r12*x4325))+((r11*x4327))+(((-1.0)*x4318*x4326)));
evalcond[2]=((((-1.0)*r02*x4325))+(((-1.0)*x4322))+(((-1.0)*x4323*x4326))+((r01*x4327)));
evalcond[3]=(((x4317*x4319))+((sj1*sj2))+(((-1.0)*x4320*x4325))+(((-1.0)*cj1*x4321))+((r22*x4316)));
evalcond[4]=((((-1.0)*x4323*x4325))+(((-1.0)*cj0*sj1*x4321))+(((-1.0)*cj0*x4324))+((r02*x4316))+((r01*x4328)));
evalcond[5]=(((r12*x4316))+(((-1.0)*sj0*sj1*x4321))+(((-1.0)*x4322*x4324))+((r11*x4328))+(((-1.0)*x4318*x4325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4329=((1.0)*gconst98);
CheckValue<IkReal> x4330=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4329))+(((-1.0)*gconst97*r10)))),-1);
if(!x4330.valid){
continue;
}
CheckValue<IkReal> x4331 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4330.value)))+(x4331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4332=IKsin(j4);
IkReal x4333=IKcos(j4);
IkReal x4334=(gconst98*r10);
IkReal x4335=(gconst97*r21);
IkReal x4336=(gconst98*r20);
IkReal x4337=((1.0)*cj2);
IkReal x4338=((1.0)*sj0);
IkReal x4339=(gconst98*r00);
IkReal x4340=(cj1*sj2);
IkReal x4341=((1.0)*x4333);
IkReal x4342=((1.0)*x4332);
IkReal x4343=(gconst97*x4332);
IkReal x4344=(gconst97*x4333);
evalcond[0]=(((x4332*x4335))+(((-1.0)*r22*x4341))+(((-1.0)*x4336*x4342)));
evalcond[1]=(cj0+(((-1.0)*r12*x4341))+((r11*x4343))+(((-1.0)*x4334*x4342)));
evalcond[2]=((((-1.0)*r02*x4341))+(((-1.0)*x4339*x4342))+(((-1.0)*x4338))+((r01*x4343)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4337))+((x4333*x4335))+((r22*x4332))+(((-1.0)*x4336*x4341)));
evalcond[4]=((((-1.0)*x4339*x4341))+(((-1.0)*cj0*sj1*x4337))+((r02*x4332))+(((-1.0)*cj0*x4340))+((r01*x4344)));
evalcond[5]=((((-1.0)*sj0*sj1*x4337))+((r12*x4332))+(((-1.0)*x4338*x4340))+((r11*x4344))+(((-1.0)*x4334*x4341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4345=((1.0)*gconst98);
CheckValue<IkReal> x4346 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4345))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4346.valid){
continue;
}
CheckValue<IkReal> x4347=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst97*r00))+(((-1.0)*r01*x4345)))),-1);
if(!x4347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4346.value)+(((1.5707963267949)*(x4347.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4348=IKsin(j4);
IkReal x4349=IKcos(j4);
IkReal x4350=(gconst98*r10);
IkReal x4351=(gconst97*r21);
IkReal x4352=(gconst98*r20);
IkReal x4353=((1.0)*cj2);
IkReal x4354=((1.0)*sj0);
IkReal x4355=(gconst98*r00);
IkReal x4356=(cj1*sj2);
IkReal x4357=((1.0)*x4349);
IkReal x4358=((1.0)*x4348);
IkReal x4359=(gconst97*x4348);
IkReal x4360=(gconst97*x4349);
evalcond[0]=(((x4348*x4351))+(((-1.0)*x4352*x4358))+(((-1.0)*r22*x4357)));
evalcond[1]=(cj0+(((-1.0)*r12*x4357))+(((-1.0)*x4350*x4358))+((r11*x4359)));
evalcond[2]=((((-1.0)*r02*x4357))+(((-1.0)*x4354))+(((-1.0)*x4355*x4358))+((r01*x4359)));
evalcond[3]=(((sj1*sj2))+((r22*x4348))+(((-1.0)*x4352*x4357))+((x4349*x4351))+(((-1.0)*cj1*x4353)));
evalcond[4]=(((r02*x4348))+((r01*x4360))+(((-1.0)*cj0*sj1*x4353))+(((-1.0)*x4355*x4357))+(((-1.0)*cj0*x4356)));
evalcond[5]=(((r11*x4360))+(((-1.0)*sj0*sj1*x4353))+(((-1.0)*x4350*x4357))+((r12*x4348))+(((-1.0)*x4354*x4356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4361=((-1.0)*r21);
IkReal x4363 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4363)==0){
continue;
}
IkReal x4362=pow(x4363,-0.5);
CheckValue<IkReal> x4364 = IKatan2WithCheck(IkReal(x4361),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4364.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4364.value))));
IkReal gconst100=(x4361*x4362);
IkReal gconst101=((1.0)*r20*x4362);
CheckValue<IkReal> x4365 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4365.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4365.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4366=((-1.0)*r21);
CheckValue<IkReal> x4369 = IKatan2WithCheck(IkReal(x4366),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4369.valid){
continue;
}
IkReal x4367=((1.0)*(x4369.value));
IkReal x4368=x4362;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4367)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4367)));
IkReal gconst100=(x4366*x4368);
IkReal gconst101=((1.0)*r20*x4368);
IkReal x4370=r22*r22;
IkReal x4371=((1.0)*x4370);
CheckValue<IkReal> x4375=IKPowWithIntegerCheck(((-1.0)+x4370),-1);
if(!x4375.valid){
continue;
}
IkReal x4372=x4375.value;
if((((1.0)+(((-1.0)*x4371)))) < -0.00001)
continue;
IkReal x4373=IKsqrt(((1.0)+(((-1.0)*x4371))));
IkReal x4374=(cj0*x4372*x4373);
j4eval[0]=((IKabs(((((-1.0)*x4371*x4374))+x4374)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4376=((-1.0)*r21);
CheckValue<IkReal> x4379 = IKatan2WithCheck(IkReal(x4376),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4379.valid){
continue;
}
IkReal x4377=((1.0)*(x4379.value));
IkReal x4378=x4362;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4377)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4377)));
IkReal gconst100=(x4376*x4378);
IkReal gconst101=((1.0)*r20*x4378);
IkReal x4380=r22*r22;
IkReal x4381=((1.0)*x4380);
CheckValue<IkReal> x4385=IKPowWithIntegerCheck(((-1.0)+x4380),-1);
if(!x4385.valid){
continue;
}
IkReal x4382=x4385.value;
if((((1.0)+(((-1.0)*x4381)))) < -0.00001)
continue;
IkReal x4383=IKsqrt(((1.0)+(((-1.0)*x4381))));
IkReal x4384=(sj0*x4382*x4383);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4381*x4384))+x4384))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4386=((-1.0)*r21);
CheckValue<IkReal> x4389 = IKatan2WithCheck(IkReal(x4386),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4389.valid){
continue;
}
IkReal x4387=((1.0)*(x4389.value));
IkReal x4388=x4362;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4387)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4387)));
IkReal gconst100=(x4386*x4388);
IkReal gconst101=((1.0)*r20*x4388);
IkReal x4390=r22*r22;
IkReal x4391=(r12*sj0);
IkReal x4392=(cj0*r02);
CheckValue<IkReal> x4396=IKPowWithIntegerCheck(((-1.0)+x4390),-1);
if(!x4396.valid){
continue;
}
IkReal x4393=x4396.value;
if((((1.0)+(((-1.0)*x4390)))) < -0.00001)
continue;
IkReal x4394=IKsqrt(((1.0)+(((-1.0)*x4390))));
IkReal x4395=(r22*x4393*x4394);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4391))+(((-1.0)*x4392)))))+(IKabs((((x4391*x4395))+((x4392*x4395))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4397=((1.0)*sj0);
IkReal x4398=((1.0)*gconst100);
CheckValue<IkReal> x4399 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4397))+(((-1.0)*cj0*r02)))),IkReal((((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*gconst100*r11*x4397))+(((-1.0)*cj0*r01*x4398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4399.valid){
continue;
}
CheckValue<IkReal> x4400=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst101*r21))+(((-1.0)*r20*x4398)))),-1);
if(!x4400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4399.value)+(((1.5707963267949)*(x4400.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4401=IKsin(j4);
IkReal x4402=IKcos(j4);
IkReal x4403=(gconst101*r20);
IkReal x4404=(gconst101*r10);
IkReal x4405=((1.0)*cj2);
IkReal x4406=(gconst101*r00);
IkReal x4407=((1.0)*sj0);
IkReal x4408=(cj1*sj2);
IkReal x4409=((1.0)*x4402);
IkReal x4410=((1.0)*x4401);
IkReal x4411=(gconst100*x4401);
IkReal x4412=(gconst100*x4402);
evalcond[0]=(((r21*x4411))+(((-1.0)*x4403*x4410))+(((-1.0)*r22*x4409)));
evalcond[1]=(((r11*x4411))+cj0+(((-1.0)*r12*x4409))+(((-1.0)*x4404*x4410)));
evalcond[2]=(((r01*x4411))+(((-1.0)*r02*x4409))+(((-1.0)*x4407))+(((-1.0)*x4406*x4410)));
evalcond[3]=(((r21*x4412))+((r22*x4401))+(((-1.0)*x4403*x4409))+((sj1*sj2))+(((-1.0)*cj1*x4405)));
evalcond[4]=((((-1.0)*cj0*x4408))+((r01*x4412))+(((-1.0)*x4406*x4409))+((r02*x4401))+(((-1.0)*cj0*sj1*x4405)));
evalcond[5]=(((r11*x4412))+((r12*x4401))+(((-1.0)*x4407*x4408))+(((-1.0)*sj0*sj1*x4405))+(((-1.0)*x4404*x4409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4413=((1.0)*gconst101);
CheckValue<IkReal> x4414=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x4413)))),-1);
if(!x4414.valid){
continue;
}
CheckValue<IkReal> x4415 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4413))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4414.value)))+(x4415.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4416=IKsin(j4);
IkReal x4417=IKcos(j4);
IkReal x4418=(gconst101*r20);
IkReal x4419=(gconst101*r10);
IkReal x4420=((1.0)*cj2);
IkReal x4421=(gconst101*r00);
IkReal x4422=((1.0)*sj0);
IkReal x4423=(cj1*sj2);
IkReal x4424=((1.0)*x4417);
IkReal x4425=((1.0)*x4416);
IkReal x4426=(gconst100*x4416);
IkReal x4427=(gconst100*x4417);
evalcond[0]=((((-1.0)*r22*x4424))+((r21*x4426))+(((-1.0)*x4418*x4425)));
evalcond[1]=(cj0+(((-1.0)*x4419*x4425))+(((-1.0)*r12*x4424))+((r11*x4426)));
evalcond[2]=((((-1.0)*x4422))+((r01*x4426))+(((-1.0)*x4421*x4425))+(((-1.0)*r02*x4424)));
evalcond[3]=(((r22*x4416))+((sj1*sj2))+((r21*x4427))+(((-1.0)*cj1*x4420))+(((-1.0)*x4418*x4424)));
evalcond[4]=((((-1.0)*cj0*x4423))+(((-1.0)*cj0*sj1*x4420))+((r01*x4427))+(((-1.0)*x4421*x4424))+((r02*x4416)));
evalcond[5]=((((-1.0)*x4422*x4423))+((r12*x4416))+(((-1.0)*sj0*sj1*x4420))+(((-1.0)*x4419*x4424))+((r11*x4427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4428=((1.0)*gconst101);
CheckValue<IkReal> x4429=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4428))+(((-1.0)*gconst100*r00)))),-1);
if(!x4429.valid){
continue;
}
CheckValue<IkReal> x4430 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4429.value)))+(x4430.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4431=IKsin(j4);
IkReal x4432=IKcos(j4);
IkReal x4433=(gconst101*r20);
IkReal x4434=(gconst101*r10);
IkReal x4435=((1.0)*cj2);
IkReal x4436=(gconst101*r00);
IkReal x4437=((1.0)*sj0);
IkReal x4438=(cj1*sj2);
IkReal x4439=((1.0)*x4432);
IkReal x4440=((1.0)*x4431);
IkReal x4441=(gconst100*x4431);
IkReal x4442=(gconst100*x4432);
evalcond[0]=(((r21*x4441))+(((-1.0)*x4433*x4440))+(((-1.0)*r22*x4439)));
evalcond[1]=(cj0+(((-1.0)*r12*x4439))+((r11*x4441))+(((-1.0)*x4434*x4440)));
evalcond[2]=((((-1.0)*r02*x4439))+((r01*x4441))+(((-1.0)*x4437))+(((-1.0)*x4436*x4440)));
evalcond[3]=(((r22*x4431))+((r21*x4442))+(((-1.0)*x4433*x4439))+((sj1*sj2))+(((-1.0)*cj1*x4435)));
evalcond[4]=(((r01*x4442))+(((-1.0)*cj0*x4438))+(((-1.0)*cj0*sj1*x4435))+(((-1.0)*x4436*x4439))+((r02*x4431)));
evalcond[5]=((((-1.0)*x4434*x4439))+((r12*x4431))+((r11*x4442))+(((-1.0)*x4437*x4438))+(((-1.0)*sj0*sj1*x4435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4443=((-1.0)*r10);
IkReal x4445 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4445)==0){
continue;
}
IkReal x4444=pow(x4445,-0.5);
CheckValue<IkReal> x4446 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4443),IKFAST_ATAN2_MAGTHRESH);
if(!x4446.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4446.value));
IkReal gconst103=(r11*x4444);
IkReal gconst104=(x4443*x4444);
CheckValue<IkReal> x4447 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4447.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4447.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4448=((-1.0)*r10);
IkReal x4449=x4444;
CheckValue<IkReal> x4451 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4448),IKFAST_ATAN2_MAGTHRESH);
if(!x4451.valid){
continue;
}
IkReal x4450=((-1.0)*(x4451.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4450;
IkReal gconst102=x4450;
IkReal gconst103=(r11*x4449);
IkReal gconst104=(x4448*x4449);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4452=((1.0)*sj0);
IkReal x4453=((1.0)*gconst103);
CheckValue<IkReal> x4454 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4452))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst103*r11*x4452))+(((-1.0)*cj0*r01*x4453))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4454.valid){
continue;
}
CheckValue<IkReal> x4455=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4453)))),-1);
if(!x4455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4454.value)+(((1.5707963267949)*(x4455.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4456=IKsin(j4);
IkReal x4457=IKcos(j4);
IkReal x4458=(gconst103*r11);
IkReal x4459=((1.0)*cj2);
IkReal x4460=((1.0)*sj0);
IkReal x4461=(cj1*sj2);
IkReal x4462=((1.0)*x4457);
IkReal x4463=(gconst103*x4457);
IkReal x4464=(gconst103*x4456);
IkReal x4465=((1.0)*gconst104*x4456);
evalcond[0]=((((-1.0)*r22*x4462))+((r21*x4464))+(((-1.0)*r20*x4465)));
evalcond[1]=(cj0+(((-1.0)*r10*x4465))+((x4456*x4458))+(((-1.0)*r12*x4462)));
evalcond[2]=(((r01*x4464))+(((-1.0)*r02*x4462))+(((-1.0)*x4460))+(((-1.0)*r00*x4465)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4459))+((r21*x4463))+((r22*x4456))+(((-1.0)*gconst104*r20*x4462)));
evalcond[4]=((((-1.0)*cj0*sj1*x4459))+((r01*x4463))+((r02*x4456))+(((-1.0)*gconst104*r00*x4462))+(((-1.0)*cj0*x4461)));
evalcond[5]=((((-1.0)*gconst104*r10*x4462))+((x4457*x4458))+((r12*x4456))+(((-1.0)*x4460*x4461))+(((-1.0)*sj0*sj1*x4459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4466=((1.0)*gconst104);
CheckValue<IkReal> x4467 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4466))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4467.valid){
continue;
}
CheckValue<IkReal> x4468=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4466))+(((-1.0)*gconst103*r00)))),-1);
if(!x4468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4467.value)+(((1.5707963267949)*(x4468.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4469=IKsin(j4);
IkReal x4470=IKcos(j4);
IkReal x4471=(gconst103*r11);
IkReal x4472=((1.0)*cj2);
IkReal x4473=((1.0)*sj0);
IkReal x4474=(cj1*sj2);
IkReal x4475=((1.0)*x4470);
IkReal x4476=(gconst103*x4470);
IkReal x4477=(gconst103*x4469);
IkReal x4478=((1.0)*gconst104*x4469);
evalcond[0]=(((r21*x4477))+(((-1.0)*r20*x4478))+(((-1.0)*r22*x4475)));
evalcond[1]=((((-1.0)*r12*x4475))+cj0+(((-1.0)*r10*x4478))+((x4469*x4471)));
evalcond[2]=((((-1.0)*x4473))+(((-1.0)*r00*x4478))+((r01*x4477))+(((-1.0)*r02*x4475)));
evalcond[3]=((((-1.0)*cj1*x4472))+((r22*x4469))+(((-1.0)*gconst104*r20*x4475))+((r21*x4476))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj0*sj1*x4472))+(((-1.0)*cj0*x4474))+(((-1.0)*gconst104*r00*x4475))+((r01*x4476))+((r02*x4469)));
evalcond[5]=(((x4470*x4471))+(((-1.0)*x4473*x4474))+((r12*x4469))+(((-1.0)*sj0*sj1*x4472))+(((-1.0)*gconst104*r10*x4475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4479=((-1.0)*r11);
IkReal x4481 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4481)==0){
continue;
}
IkReal x4480=pow(x4481,-0.5);
CheckValue<IkReal> x4482 = IKatan2WithCheck(IkReal(x4479),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4482.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4482.value))));
IkReal gconst106=(x4479*x4480);
IkReal gconst107=((1.0)*r10*x4480);
CheckValue<IkReal> x4483 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4483.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4483.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4484=((-1.0)*r11);
CheckValue<IkReal> x4487 = IKatan2WithCheck(IkReal(x4484),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4487.valid){
continue;
}
IkReal x4485=((1.0)*(x4487.value));
IkReal x4486=x4480;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4485)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4485)));
IkReal gconst106=(x4484*x4486);
IkReal gconst107=((1.0)*r10*x4486);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4488=((-1.0)*r11);
CheckValue<IkReal> x4491 = IKatan2WithCheck(IkReal(x4488),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4491.valid){
continue;
}
IkReal x4489=((1.0)*(x4491.value));
IkReal x4490=x4480;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4489)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4489)));
IkReal gconst106=(x4488*x4490);
IkReal gconst107=((1.0)*r10*x4490);
IkReal x4492=r12*r12;
IkReal x4493=((1.0)*sj0);
IkReal x4494=(cj0*r02);
IkReal x4495=x4480;
j4eval[0]=((IKabs(((((-1.0)*x4494))+(((-1.0)*r12*x4493)))))+(IKabs((((sj0*x4492*x4495))+((r12*x4494*x4495))+(((-1.0)*x4493*x4495))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4496=((-1.0)*r11);
CheckValue<IkReal> x4499 = IKatan2WithCheck(IkReal(x4496),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4499.valid){
continue;
}
IkReal x4497=((1.0)*(x4499.value));
IkReal x4498=x4480;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4497)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4497)));
IkReal gconst106=(x4496*x4498);
IkReal gconst107=((1.0)*r10*x4498);
IkReal x4500=r12*r12;
IkReal x4501=((1.0)+(((-1.0)*x4500)));
IkReal x4502=(r22*sj1*sj2);
IkReal x4503=(cj1*cj2*r22);
CheckValue<IkReal> x4510=IKPowWithIntegerCheck(x4501,-1);
if(!x4510.valid){
continue;
}
IkReal x4504=x4510.value;
CheckValue<IkReal> x4511=IKPowWithIntegerCheck(((-1.0)+x4500),-1);
if(!x4511.valid){
continue;
}
IkReal x4505=x4511.value;
IkReal x4506=((1.0)*x4504);
if((x4501) < -0.00001)
continue;
IkReal x4507=IKsqrt(x4501);
IkReal x4508=(r12*x4505*x4507);
IkReal x4509=((((-2.0)*r10*r11*r20*r21*x4504))+(((-1.0)*x4506*(r10*r10)*(r20*r20)))+(((-1.0)*x4506*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22))));
j4eval[0]=x4509;
j4eval[1]=((IKabs((x4502+(((-1.0)*x4503)))))+(IKabs((((x4503*x4508))+(((-1.0)*x4502*x4508))))));
j4eval[2]=IKsign(x4509);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4512=(sj1*sj2);
IkReal x4513=(gconst106*r21);
IkReal x4514=(gconst107*r20);
IkReal x4515=(cj1*cj2);
CheckValue<IkReal> x4516=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4514*x4514)))+(((-1.0)*(r22*r22)))+(((2.0)*x4513*x4514))+(((-1.0)*(x4513*x4513))))),-1);
if(!x4516.valid){
continue;
}
CheckValue<IkReal> x4517 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4515))+((r22*x4512)))),IkReal(((((-1.0)*x4513*x4515))+(((-1.0)*x4512*x4514))+((x4512*x4513))+((x4514*x4515)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4516.value)))+(x4517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4518=IKsin(j4);
IkReal x4519=IKcos(j4);
IkReal x4520=(gconst107*r10);
IkReal x4521=(gconst107*r00);
IkReal x4522=((1.0)*cj2);
IkReal x4523=(gconst107*r20);
IkReal x4524=((1.0)*sj0);
IkReal x4525=(cj1*sj2);
IkReal x4526=((1.0)*x4519);
IkReal x4527=(gconst106*x4519);
IkReal x4528=(gconst106*x4518);
IkReal x4529=((1.0)*x4518);
evalcond[0]=(((r21*x4528))+(((-1.0)*r22*x4526))+(((-1.0)*x4523*x4529)));
evalcond[1]=((((-1.0)*r12*x4526))+((r11*x4528))+cj0+(((-1.0)*x4520*x4529)));
evalcond[2]=(((r01*x4528))+(((-1.0)*x4524))+(((-1.0)*x4521*x4529))+(((-1.0)*r02*x4526)));
evalcond[3]=(((r21*x4527))+((sj1*sj2))+(((-1.0)*cj1*x4522))+(((-1.0)*x4523*x4526))+((r22*x4518)));
evalcond[4]=(((r02*x4518))+((r01*x4527))+(((-1.0)*cj0*sj1*x4522))+(((-1.0)*x4521*x4526))+(((-1.0)*cj0*x4525)));
evalcond[5]=(((r11*x4527))+(((-1.0)*x4520*x4526))+((r12*x4518))+(((-1.0)*x4524*x4525))+(((-1.0)*sj0*sj1*x4522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4530=((1.0)*sj0);
IkReal x4531=((1.0)*gconst106);
CheckValue<IkReal> x4532 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4530)))),IkReal(((((-1.0)*gconst106*r11*x4530))+((gconst107*r10*sj0))+((cj0*gconst107*r00))+(((-1.0)*cj0*r01*x4531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4532.valid){
continue;
}
CheckValue<IkReal> x4533=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4531))+(((-1.0)*gconst107*r21)))),-1);
if(!x4533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4532.value)+(((1.5707963267949)*(x4533.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4534=IKsin(j4);
IkReal x4535=IKcos(j4);
IkReal x4536=(gconst107*r10);
IkReal x4537=(gconst107*r00);
IkReal x4538=((1.0)*cj2);
IkReal x4539=(gconst107*r20);
IkReal x4540=((1.0)*sj0);
IkReal x4541=(cj1*sj2);
IkReal x4542=((1.0)*x4535);
IkReal x4543=(gconst106*x4535);
IkReal x4544=(gconst106*x4534);
IkReal x4545=((1.0)*x4534);
evalcond[0]=((((-1.0)*r22*x4542))+((r21*x4544))+(((-1.0)*x4539*x4545)));
evalcond[1]=(cj0+(((-1.0)*x4536*x4545))+(((-1.0)*r12*x4542))+((r11*x4544)));
evalcond[2]=((((-1.0)*r02*x4542))+(((-1.0)*x4537*x4545))+((r01*x4544))+(((-1.0)*x4540)));
evalcond[3]=((((-1.0)*cj1*x4538))+((sj1*sj2))+((r22*x4534))+((r21*x4543))+(((-1.0)*x4539*x4542)));
evalcond[4]=((((-1.0)*cj0*x4541))+(((-1.0)*x4537*x4542))+((r01*x4543))+((r02*x4534))+(((-1.0)*cj0*sj1*x4538)));
evalcond[5]=(((r12*x4534))+(((-1.0)*x4536*x4542))+(((-1.0)*x4540*x4541))+((r11*x4543))+(((-1.0)*sj0*sj1*x4538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4546=((1.0)*gconst107);
CheckValue<IkReal> x4547 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x4546)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4547.valid){
continue;
}
CheckValue<IkReal> x4548=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4546)))),-1);
if(!x4548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4547.value)+(((1.5707963267949)*(x4548.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4549=IKsin(j4);
IkReal x4550=IKcos(j4);
IkReal x4551=(gconst107*r10);
IkReal x4552=(gconst107*r00);
IkReal x4553=((1.0)*cj2);
IkReal x4554=(gconst107*r20);
IkReal x4555=((1.0)*sj0);
IkReal x4556=(cj1*sj2);
IkReal x4557=((1.0)*x4550);
IkReal x4558=(gconst106*x4550);
IkReal x4559=(gconst106*x4549);
IkReal x4560=((1.0)*x4549);
evalcond[0]=(((r21*x4559))+(((-1.0)*r22*x4557))+(((-1.0)*x4554*x4560)));
evalcond[1]=((((-1.0)*r12*x4557))+cj0+((r11*x4559))+(((-1.0)*x4551*x4560)));
evalcond[2]=(((r01*x4559))+(((-1.0)*x4555))+(((-1.0)*x4552*x4560))+(((-1.0)*r02*x4557)));
evalcond[3]=(((r22*x4549))+(((-1.0)*cj1*x4553))+((sj1*sj2))+((r21*x4558))+(((-1.0)*x4554*x4557)));
evalcond[4]=((((-1.0)*cj0*sj1*x4553))+((r01*x4558))+((r02*x4549))+(((-1.0)*x4552*x4557))+(((-1.0)*cj0*x4556)));
evalcond[5]=((((-1.0)*x4555*x4556))+(((-1.0)*x4551*x4557))+((r11*x4558))+((r12*x4549))+(((-1.0)*sj0*sj1*x4553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4561=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4561;
j4eval[1]=IKsign(x4561);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4562=((1.0)*cj5);
IkReal x4563=((((-1.0)*r01*x4562))+(((-1.0)*r00*sj5)));
j4eval[0]=x4563;
j4eval[1]=((IKabs(((((-1.0)*r20*x4562))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4563);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4564=(sj1*sj2);
IkReal x4565=(cj5*r10);
IkReal x4566=(r11*sj5);
IkReal x4567=(cj1*cj2);
IkReal x4568=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4568;
j4eval[1]=((IKabs((((x4565*x4567))+(((-1.0)*x4564*x4565))+((x4564*x4566))+(((-1.0)*x4566*x4567)))))+(IKabs((((r12*x4567))+(((-1.0)*r12*x4564))))));
j4eval[2]=IKsign(x4568);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4569=(sj1*sj2);
IkReal x4570=(cj5*r10);
IkReal x4571=(r11*sj5);
IkReal x4572=(cj1*cj2);
CheckValue<IkReal> x4573=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4573.valid){
continue;
}
CheckValue<IkReal> x4574 = IKatan2WithCheck(IkReal(((((-1.0)*x4569*x4570))+((x4569*x4571))+((x4570*x4572))+(((-1.0)*x4571*x4572)))),IkReal((((r12*x4572))+(((-1.0)*r12*x4569)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4573.value)))+(x4574.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4575=IKcos(j4);
IkReal x4576=IKsin(j4);
IkReal x4577=(cj5*r00);
IkReal x4578=(cj5*r10);
IkReal x4579=(r21*sj5);
IkReal x4580=((1.0)*cj2);
IkReal x4581=(cj5*r20);
IkReal x4582=((1.0)*x4575);
IkReal x4583=((1.0)*x4576);
IkReal x4584=(sj5*x4576);
IkReal x4585=(sj5*x4575);
evalcond[0]=(((r12*x4576))+((r11*x4585))+(((-1.0)*x4578*x4582)));
evalcond[1]=((((-1.0)*r22*x4582))+(((-1.0)*x4581*x4583))+((x4576*x4579)));
evalcond[2]=((((-1.0)*r02*x4582))+(((-1.0)*x4577*x4583))+((r01*x4584)));
evalcond[3]=((1.0)+((r11*x4584))+(((-1.0)*r12*x4582))+(((-1.0)*x4578*x4583)));
evalcond[4]=(((r22*x4576))+((sj1*sj2))+(((-1.0)*x4581*x4582))+((x4575*x4579))+(((-1.0)*cj1*x4580)));
evalcond[5]=(((r02*x4576))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4580))+(((-1.0)*x4577*x4582))+((r01*x4585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4586=((1.0)*cj5);
CheckValue<IkReal> x4587 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4586)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4587.valid){
continue;
}
CheckValue<IkReal> x4588=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4586))+(((-1.0)*r00*sj5)))),-1);
if(!x4588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4587.value)+(((1.5707963267949)*(x4588.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4589=IKcos(j4);
IkReal x4590=IKsin(j4);
IkReal x4591=(cj5*r00);
IkReal x4592=(cj5*r10);
IkReal x4593=(r21*sj5);
IkReal x4594=((1.0)*cj2);
IkReal x4595=(cj5*r20);
IkReal x4596=((1.0)*x4589);
IkReal x4597=((1.0)*x4590);
IkReal x4598=(sj5*x4590);
IkReal x4599=(sj5*x4589);
evalcond[0]=((((-1.0)*x4592*x4596))+((r11*x4599))+((r12*x4590)));
evalcond[1]=((((-1.0)*r22*x4596))+((x4590*x4593))+(((-1.0)*x4595*x4597)));
evalcond[2]=((((-1.0)*x4591*x4597))+(((-1.0)*r02*x4596))+((r01*x4598)));
evalcond[3]=((1.0)+(((-1.0)*x4592*x4597))+((r11*x4598))+(((-1.0)*r12*x4596)));
evalcond[4]=(((r22*x4590))+(((-1.0)*x4595*x4596))+((sj1*sj2))+((x4589*x4593))+(((-1.0)*cj1*x4594)));
evalcond[5]=(((r02*x4590))+(((-1.0)*cj1*sj2))+(((-1.0)*x4591*x4596))+(((-1.0)*sj1*x4594))+((r01*x4599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4600=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4600.valid){
continue;
}
CheckValue<IkReal> x4601 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4600.value)))+(x4601.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4602=IKcos(j4);
IkReal x4603=IKsin(j4);
IkReal x4604=(cj5*r00);
IkReal x4605=(cj5*r10);
IkReal x4606=(r21*sj5);
IkReal x4607=((1.0)*cj2);
IkReal x4608=(cj5*r20);
IkReal x4609=((1.0)*x4602);
IkReal x4610=((1.0)*x4603);
IkReal x4611=(sj5*x4603);
IkReal x4612=(sj5*x4602);
evalcond[0]=(((r12*x4603))+((r11*x4612))+(((-1.0)*x4605*x4609)));
evalcond[1]=(((x4603*x4606))+(((-1.0)*x4608*x4610))+(((-1.0)*r22*x4609)));
evalcond[2]=((((-1.0)*r02*x4609))+(((-1.0)*x4604*x4610))+((r01*x4611)));
evalcond[3]=((1.0)+((r11*x4611))+(((-1.0)*r12*x4609))+(((-1.0)*x4605*x4610)));
evalcond[4]=((((-1.0)*cj1*x4607))+((sj1*sj2))+((r22*x4603))+((x4602*x4606))+(((-1.0)*x4608*x4609)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x4612))+((r02*x4603))+(((-1.0)*sj1*x4607))+(((-1.0)*x4604*x4609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4613=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4613;
j4eval[1]=IKsign(x4613);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4614=((1.0)*cj5);
IkReal x4615=((((-1.0)*r21*x4614))+(((-1.0)*r20*sj5)));
j4eval[0]=x4615;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4614))))));
j4eval[2]=IKsign(x4615);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4616=cj5*cj5;
IkReal x4617=r11*r11;
IkReal x4618=(r11*sj5);
IkReal x4619=(cj5*r10);
IkReal x4620=((r12*r12)+((x4616*(r10*r10)))+x4617+(((-1.0)*x4616*x4617))+(((-2.0)*x4618*x4619)));
j4eval[0]=x4620;
j4eval[1]=IKsign(x4620);
j4eval[2]=((IKabs(((((-1.0)*x4619))+x4618)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4621=cj5*cj5;
IkReal x4622=r11*r11;
IkReal x4623=(cj5*r10);
IkReal x4624=(r11*sj5);
CheckValue<IkReal> x4625=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x4621*(r10*r10)))+x4622+(((-1.0)*x4621*x4622))+(((-2.0)*x4623*x4624)))),-1);
if(!x4625.valid){
continue;
}
CheckValue<IkReal> x4626 = IKatan2WithCheck(IkReal((x4624+(((-1.0)*x4623)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4625.value)))+(x4626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4627=IKcos(j4);
IkReal x4628=IKsin(j4);
IkReal x4629=(cj5*r00);
IkReal x4630=(cj5*r10);
IkReal x4631=(r21*sj5);
IkReal x4632=(cj5*r20);
IkReal x4633=((1.0)*x4627);
IkReal x4634=((1.0)*x4628);
IkReal x4635=(sj5*x4628);
IkReal x4636=(sj5*x4627);
evalcond[0]=(((r12*x4628))+((r11*x4636))+(((-1.0)*x4630*x4633)));
evalcond[1]=((((-1.0)*x4632*x4634))+((x4628*x4631))+(((-1.0)*r22*x4633)));
evalcond[2]=(((r01*x4635))+(((-1.0)*r02*x4633))+(((-1.0)*x4629*x4634)));
evalcond[3]=((-1.0)+((r11*x4635))+(((-1.0)*x4630*x4634))+(((-1.0)*r12*x4633)));
evalcond[4]=(((cj2*sj1))+((r01*x4636))+((cj1*sj2))+((r02*x4628))+(((-1.0)*x4629*x4633)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4632*x4633))+((r22*x4628))+((x4627*x4631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4637=((1.0)*cj5);
CheckValue<IkReal> x4638 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4637)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4638.valid){
continue;
}
CheckValue<IkReal> x4639=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4637))+(((-1.0)*r20*sj5)))),-1);
if(!x4639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4638.value)+(((1.5707963267949)*(x4639.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4640=IKcos(j4);
IkReal x4641=IKsin(j4);
IkReal x4642=(cj5*r00);
IkReal x4643=(cj5*r10);
IkReal x4644=(r21*sj5);
IkReal x4645=(cj5*r20);
IkReal x4646=((1.0)*x4640);
IkReal x4647=((1.0)*x4641);
IkReal x4648=(sj5*x4641);
IkReal x4649=(sj5*x4640);
evalcond[0]=(((r11*x4649))+((r12*x4641))+(((-1.0)*x4643*x4646)));
evalcond[1]=((((-1.0)*x4645*x4647))+((x4641*x4644))+(((-1.0)*r22*x4646)));
evalcond[2]=((((-1.0)*r02*x4646))+((r01*x4648))+(((-1.0)*x4642*x4647)));
evalcond[3]=((-1.0)+((r11*x4648))+(((-1.0)*r12*x4646))+(((-1.0)*x4643*x4647)));
evalcond[4]=(((r02*x4641))+((cj2*sj1))+((cj1*sj2))+((r01*x4649))+(((-1.0)*x4642*x4646)));
evalcond[5]=((((-1.0)*x4645*x4646))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4641))+((x4640*x4644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4650 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4650.valid){
continue;
}
CheckValue<IkReal> x4651=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4650.value)+(((1.5707963267949)*(x4651.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4652=IKcos(j4);
IkReal x4653=IKsin(j4);
IkReal x4654=(cj5*r00);
IkReal x4655=(cj5*r10);
IkReal x4656=(r21*sj5);
IkReal x4657=(cj5*r20);
IkReal x4658=((1.0)*x4652);
IkReal x4659=((1.0)*x4653);
IkReal x4660=(sj5*x4653);
IkReal x4661=(sj5*x4652);
evalcond[0]=(((r12*x4653))+(((-1.0)*x4655*x4658))+((r11*x4661)));
evalcond[1]=(((x4653*x4656))+(((-1.0)*x4657*x4659))+(((-1.0)*r22*x4658)));
evalcond[2]=((((-1.0)*x4654*x4659))+(((-1.0)*r02*x4658))+((r01*x4660)));
evalcond[3]=((-1.0)+(((-1.0)*x4655*x4659))+((r11*x4660))+(((-1.0)*r12*x4658)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4654*x4658))+((cj1*sj2))+((r01*x4661))+((r02*x4653)));
evalcond[5]=((((-1.0)*x4657*x4658))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4652*x4656))+((r22*x4653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4662=((-1.0)*r00);
IkReal x4664 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4664)==0){
continue;
}
IkReal x4663=pow(x4664,-0.5);
CheckValue<IkReal> x4665 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4662),IKFAST_ATAN2_MAGTHRESH);
if(!x4665.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4665.value));
IkReal gconst109=(r01*x4663);
IkReal gconst110=(x4662*x4663);
CheckValue<IkReal> x4666 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4666.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4666.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4667=((-1.0)*r00);
IkReal x4668=x4663;
CheckValue<IkReal> x4670 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4667),IKFAST_ATAN2_MAGTHRESH);
if(!x4670.valid){
continue;
}
IkReal x4669=((-1.0)*(x4670.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4669;
IkReal gconst108=x4669;
IkReal gconst109=(r01*x4668);
IkReal gconst110=(x4667*x4668);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4671=((1.0)*sj0);
IkReal x4672=((1.0)*gconst109);
CheckValue<IkReal> x4673=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4672))+(((-1.0)*gconst110*r21)))),-1);
if(!x4673.valid){
continue;
}
CheckValue<IkReal> x4674 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4671))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4672))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4671)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4674.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4673.value)))+(x4674.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4675=IKsin(j4);
IkReal x4676=IKcos(j4);
IkReal x4677=(gconst109*r21);
IkReal x4678=((1.0)*cj2);
IkReal x4679=((1.0)*sj0);
IkReal x4680=(cj1*sj2);
IkReal x4681=((1.0)*x4676);
IkReal x4682=(gconst109*x4675);
IkReal x4683=(gconst109*x4676);
IkReal x4684=((1.0)*gconst110*x4675);
evalcond[0]=((((-1.0)*r22*x4681))+((x4675*x4677))+(((-1.0)*r20*x4684)));
evalcond[1]=(cj0+((r11*x4682))+(((-1.0)*r10*x4684))+(((-1.0)*r12*x4681)));
evalcond[2]=((((-1.0)*r00*x4684))+(((-1.0)*x4679))+(((-1.0)*r02*x4681))+((r01*x4682)));
evalcond[3]=((((-1.0)*cj1*x4678))+((x4676*x4677))+((sj1*sj2))+((r22*x4675))+(((-1.0)*gconst110*r20*x4681)));
evalcond[4]=(((r02*x4675))+(((-1.0)*gconst110*r00*x4681))+(((-1.0)*cj0*sj1*x4678))+(((-1.0)*cj0*x4680))+((r01*x4683)));
evalcond[5]=((((-1.0)*x4679*x4680))+(((-1.0)*gconst110*r10*x4681))+(((-1.0)*sj0*sj1*x4678))+((r12*x4675))+((r11*x4683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4685=((1.0)*gconst110);
CheckValue<IkReal> x4686 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4685))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4686.valid){
continue;
}
CheckValue<IkReal> x4687=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4685))+(((-1.0)*gconst109*r10)))),-1);
if(!x4687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4686.value)+(((1.5707963267949)*(x4687.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4688=IKsin(j4);
IkReal x4689=IKcos(j4);
IkReal x4690=(gconst109*r21);
IkReal x4691=((1.0)*cj2);
IkReal x4692=((1.0)*sj0);
IkReal x4693=(cj1*sj2);
IkReal x4694=((1.0)*x4689);
IkReal x4695=(gconst109*x4688);
IkReal x4696=(gconst109*x4689);
IkReal x4697=((1.0)*gconst110*x4688);
evalcond[0]=((((-1.0)*r20*x4697))+(((-1.0)*r22*x4694))+((x4688*x4690)));
evalcond[1]=((((-1.0)*r12*x4694))+cj0+((r11*x4695))+(((-1.0)*r10*x4697)));
evalcond[2]=((((-1.0)*r00*x4697))+(((-1.0)*r02*x4694))+((r01*x4695))+(((-1.0)*x4692)));
evalcond[3]=((((-1.0)*cj1*x4691))+((sj1*sj2))+((r22*x4688))+(((-1.0)*gconst110*r20*x4694))+((x4689*x4690)));
evalcond[4]=(((r02*x4688))+(((-1.0)*gconst110*r00*x4694))+(((-1.0)*cj0*sj1*x4691))+(((-1.0)*cj0*x4693))+((r01*x4696)));
evalcond[5]=((((-1.0)*gconst110*r10*x4694))+(((-1.0)*x4692*x4693))+(((-1.0)*sj0*sj1*x4691))+((r12*x4688))+((r11*x4696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4698=((-1.0)*r01);
IkReal x4700 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4700)==0){
continue;
}
IkReal x4699=pow(x4700,-0.5);
CheckValue<IkReal> x4701 = IKatan2WithCheck(IkReal(x4698),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4701.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4701.value))));
IkReal gconst112=(x4698*x4699);
IkReal gconst113=((1.0)*r00*x4699);
CheckValue<IkReal> x4702 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4702.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4702.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4703=((-1.0)*r01);
CheckValue<IkReal> x4706 = IKatan2WithCheck(IkReal(x4703),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4706.valid){
continue;
}
IkReal x4704=((1.0)*(x4706.value));
IkReal x4705=x4699;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4704)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4704)));
IkReal gconst112=(x4703*x4705);
IkReal gconst113=((1.0)*r00*x4705);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4707=((-1.0)*r01);
CheckValue<IkReal> x4710 = IKatan2WithCheck(IkReal(x4707),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4710.valid){
continue;
}
IkReal x4708=((1.0)*(x4710.value));
IkReal x4709=x4699;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4708)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4708)));
IkReal gconst112=(x4707*x4709);
IkReal gconst113=((1.0)*r00*x4709);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4711=((-1.0)*r01);
CheckValue<IkReal> x4714 = IKatan2WithCheck(IkReal(x4711),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4714.valid){
continue;
}
IkReal x4712=((1.0)*(x4714.value));
IkReal x4713=x4699;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4712)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4712)));
IkReal gconst112=(x4711*x4713);
IkReal gconst113=((1.0)*r00*x4713);
IkReal x4715=r02*r02;
IkReal x4716=(r12*sj0);
IkReal x4717=((1.0)*cj0);
IkReal x4718=x4699;
j4eval[0]=((IKabs((((r02*x4716*x4718))+(((-1.0)*x4717*x4718))+((cj0*x4715*x4718)))))+(IKabs(((((-1.0)*r02*x4717))+(((-1.0)*x4716))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4719=((1.0)*sj0);
IkReal x4720=((1.0)*gconst112);
CheckValue<IkReal> x4721=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4720))+(((-1.0)*gconst113*r21)))),-1);
if(!x4721.valid){
continue;
}
CheckValue<IkReal> x4722 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4719)))),IkReal(((((-1.0)*gconst112*r11*x4719))+((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4720)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4721.value)))+(x4722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4723=IKsin(j4);
IkReal x4724=IKcos(j4);
IkReal x4725=(gconst113*r20);
IkReal x4726=(gconst112*r21);
IkReal x4727=((1.0)*cj2);
IkReal x4728=(gconst113*r00);
IkReal x4729=(gconst113*r10);
IkReal x4730=((1.0)*sj0);
IkReal x4731=(cj1*sj2);
IkReal x4732=((1.0)*x4724);
IkReal x4733=((1.0)*x4723);
IkReal x4734=(gconst112*x4724);
IkReal x4735=(gconst112*x4723);
evalcond[0]=(((x4723*x4726))+(((-1.0)*x4725*x4733))+(((-1.0)*r22*x4732)));
evalcond[1]=(((r11*x4735))+cj0+(((-1.0)*r12*x4732))+(((-1.0)*x4729*x4733)));
evalcond[2]=((((-1.0)*x4728*x4733))+(((-1.0)*x4730))+((r01*x4735))+(((-1.0)*r02*x4732)));
evalcond[3]=((((-1.0)*cj1*x4727))+((sj1*sj2))+(((-1.0)*x4725*x4732))+((x4724*x4726))+((r22*x4723)));
evalcond[4]=((((-1.0)*x4728*x4732))+((r02*x4723))+(((-1.0)*cj0*sj1*x4727))+(((-1.0)*cj0*x4731))+((r01*x4734)));
evalcond[5]=(((r11*x4734))+(((-1.0)*x4730*x4731))+(((-1.0)*sj0*sj1*x4727))+(((-1.0)*x4729*x4732))+((r12*x4723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4736=((1.0)*gconst113);
CheckValue<IkReal> x4737 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4736)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4737.valid){
continue;
}
CheckValue<IkReal> x4738=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4736))+(((-1.0)*gconst112*r10)))),-1);
if(!x4738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4737.value)+(((1.5707963267949)*(x4738.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4739=IKsin(j4);
IkReal x4740=IKcos(j4);
IkReal x4741=(gconst113*r20);
IkReal x4742=(gconst112*r21);
IkReal x4743=((1.0)*cj2);
IkReal x4744=(gconst113*r00);
IkReal x4745=(gconst113*r10);
IkReal x4746=((1.0)*sj0);
IkReal x4747=(cj1*sj2);
IkReal x4748=((1.0)*x4740);
IkReal x4749=((1.0)*x4739);
IkReal x4750=(gconst112*x4740);
IkReal x4751=(gconst112*x4739);
evalcond[0]=((((-1.0)*r22*x4748))+(((-1.0)*x4741*x4749))+((x4739*x4742)));
evalcond[1]=((((-1.0)*r12*x4748))+cj0+((r11*x4751))+(((-1.0)*x4745*x4749)));
evalcond[2]=(((r01*x4751))+(((-1.0)*x4744*x4749))+(((-1.0)*x4746))+(((-1.0)*r02*x4748)));
evalcond[3]=(((x4740*x4742))+(((-1.0)*cj1*x4743))+((sj1*sj2))+(((-1.0)*x4741*x4748))+((r22*x4739)));
evalcond[4]=(((r01*x4750))+(((-1.0)*cj0*x4747))+(((-1.0)*x4744*x4748))+((r02*x4739))+(((-1.0)*cj0*sj1*x4743)));
evalcond[5]=(((r11*x4750))+(((-1.0)*x4746*x4747))+(((-1.0)*x4745*x4748))+(((-1.0)*sj0*sj1*x4743))+((r12*x4739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4752=((1.0)*gconst113);
CheckValue<IkReal> x4753=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4752))+(((-1.0)*gconst112*r00)))),-1);
if(!x4753.valid){
continue;
}
CheckValue<IkReal> x4754 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4752)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4753.value)))+(x4754.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4755=IKsin(j4);
IkReal x4756=IKcos(j4);
IkReal x4757=(gconst113*r20);
IkReal x4758=(gconst112*r21);
IkReal x4759=((1.0)*cj2);
IkReal x4760=(gconst113*r00);
IkReal x4761=(gconst113*r10);
IkReal x4762=((1.0)*sj0);
IkReal x4763=(cj1*sj2);
IkReal x4764=((1.0)*x4756);
IkReal x4765=((1.0)*x4755);
IkReal x4766=(gconst112*x4756);
IkReal x4767=(gconst112*x4755);
evalcond[0]=((((-1.0)*r22*x4764))+((x4755*x4758))+(((-1.0)*x4757*x4765)));
evalcond[1]=((((-1.0)*x4761*x4765))+cj0+(((-1.0)*r12*x4764))+((r11*x4767)));
evalcond[2]=((((-1.0)*x4762))+(((-1.0)*x4760*x4765))+(((-1.0)*r02*x4764))+((r01*x4767)));
evalcond[3]=((((-1.0)*cj1*x4759))+((x4756*x4758))+((sj1*sj2))+(((-1.0)*x4757*x4764))+((r22*x4755)));
evalcond[4]=((((-1.0)*x4760*x4764))+(((-1.0)*cj0*sj1*x4759))+(((-1.0)*cj0*x4763))+((r01*x4766))+((r02*x4755)));
evalcond[5]=(((r12*x4755))+(((-1.0)*x4761*x4764))+(((-1.0)*x4762*x4763))+(((-1.0)*sj0*sj1*x4759))+((r11*x4766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4768=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4768;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4768);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4769=((1.0)*cj5);
IkReal x4770=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4769)));
j4eval[0]=x4770;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4769)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4770);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4771=cj5*cj5;
IkReal x4772=r01*r01;
IkReal x4773=(cj5*r00);
IkReal x4774=(r01*sj5);
IkReal x4775=((((-1.0)*x4771*x4772))+x4772+((x4771*(r00*r00)))+(r02*r02)+(((-2.0)*x4773*x4774)));
j4eval[0]=x4775;
j4eval[1]=IKsign(x4775);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4773))+x4774))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4776=cj5*cj5;
IkReal x4777=r01*r01;
IkReal x4778=(r01*sj5);
IkReal x4779=(cj5*r00);
CheckValue<IkReal> x4780=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4776*x4777))+((x4776*(r00*r00)))+x4777+(r02*r02)+(((-2.0)*x4778*x4779)))),-1);
if(!x4780.valid){
continue;
}
CheckValue<IkReal> x4781 = IKatan2WithCheck(IkReal(((((-1.0)*x4779))+x4778)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4780.value)))+(x4781.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4782=IKcos(j4);
IkReal x4783=IKsin(j4);
IkReal x4784=(cj5*r00);
IkReal x4785=(cj5*r10);
IkReal x4786=(r21*sj5);
IkReal x4787=((1.0)*cj2);
IkReal x4788=(cj5*r20);
IkReal x4789=((1.0)*x4782);
IkReal x4790=((1.0)*x4783);
IkReal x4791=(sj5*x4783);
IkReal x4792=(sj5*x4782);
evalcond[0]=(((r02*x4783))+((r01*x4792))+(((-1.0)*x4784*x4789)));
evalcond[1]=((((-1.0)*x4788*x4790))+(((-1.0)*r22*x4789))+((x4783*x4786)));
evalcond[2]=((((-1.0)*x4785*x4790))+((r11*x4791))+(((-1.0)*r12*x4789)));
evalcond[3]=((-1.0)+((r01*x4791))+(((-1.0)*x4784*x4790))+(((-1.0)*r02*x4789)));
evalcond[4]=((((-1.0)*x4788*x4789))+((r22*x4783))+((sj1*sj2))+(((-1.0)*cj1*x4787))+((x4782*x4786)));
evalcond[5]=(((r12*x4783))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4787))+((r11*x4792))+(((-1.0)*x4785*x4789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4793=((1.0)*cj5);
CheckValue<IkReal> x4794=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4793)))),-1);
if(!x4794.valid){
continue;
}
CheckValue<IkReal> x4795 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4793)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4794.value)))+(x4795.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4796=IKcos(j4);
IkReal x4797=IKsin(j4);
IkReal x4798=(cj5*r00);
IkReal x4799=(cj5*r10);
IkReal x4800=(r21*sj5);
IkReal x4801=((1.0)*cj2);
IkReal x4802=(cj5*r20);
IkReal x4803=((1.0)*x4796);
IkReal x4804=((1.0)*x4797);
IkReal x4805=(sj5*x4797);
IkReal x4806=(sj5*x4796);
evalcond[0]=(((r01*x4806))+(((-1.0)*x4798*x4803))+((r02*x4797)));
evalcond[1]=((((-1.0)*r22*x4803))+((x4797*x4800))+(((-1.0)*x4802*x4804)));
evalcond[2]=((((-1.0)*x4799*x4804))+(((-1.0)*r12*x4803))+((r11*x4805)));
evalcond[3]=((-1.0)+((r01*x4805))+(((-1.0)*x4798*x4804))+(((-1.0)*r02*x4803)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x4802*x4803))+((x4796*x4800))+(((-1.0)*cj1*x4801))+((r22*x4797)));
evalcond[5]=((((-1.0)*sj1*x4801))+(((-1.0)*cj1*sj2))+(((-1.0)*x4799*x4803))+((r12*x4797))+((r11*x4806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4807=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4807.valid){
continue;
}
CheckValue<IkReal> x4808 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4807.value)))+(x4808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4809=IKcos(j4);
IkReal x4810=IKsin(j4);
IkReal x4811=(cj5*r00);
IkReal x4812=(cj5*r10);
IkReal x4813=(r21*sj5);
IkReal x4814=((1.0)*cj2);
IkReal x4815=(cj5*r20);
IkReal x4816=((1.0)*x4809);
IkReal x4817=((1.0)*x4810);
IkReal x4818=(sj5*x4810);
IkReal x4819=(sj5*x4809);
evalcond[0]=((((-1.0)*x4811*x4816))+((r02*x4810))+((r01*x4819)));
evalcond[1]=((((-1.0)*x4815*x4817))+(((-1.0)*r22*x4816))+((x4810*x4813)));
evalcond[2]=(((r11*x4818))+(((-1.0)*r12*x4816))+(((-1.0)*x4812*x4817)));
evalcond[3]=((-1.0)+(((-1.0)*x4811*x4817))+(((-1.0)*r02*x4816))+((r01*x4818)));
evalcond[4]=((((-1.0)*x4815*x4816))+((x4809*x4813))+((sj1*sj2))+(((-1.0)*cj1*x4814))+((r22*x4810)));
evalcond[5]=(((r11*x4819))+(((-1.0)*cj1*sj2))+((r12*x4810))+(((-1.0)*sj1*x4814))+(((-1.0)*x4812*x4816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4820=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4820;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4820);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4821=((1.0)*cj5);
IkReal x4822=((((-1.0)*r21*x4821))+(((-1.0)*r20*sj5)));
j4eval[0]=x4822;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4821))+((r11*sj5))))));
j4eval[2]=IKsign(x4822);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4823=cj5*cj5;
IkReal x4824=r01*r01;
IkReal x4825=(r01*sj5);
IkReal x4826=(cj5*r00);
IkReal x4827=((((-1.0)*x4823*(r00*r00)))+(((-1.0)*(r02*r02)))+((x4823*x4824))+(((-1.0)*x4824))+(((2.0)*x4825*x4826)));
j4eval[0]=x4827;
j4eval[1]=IKsign(x4827);
j4eval[2]=((IKabs(((((-1.0)*x4826))+x4825)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4828=cj5*cj5;
IkReal x4829=r01*r01;
IkReal x4830=(r01*sj5);
IkReal x4831=(cj5*r00);
CheckValue<IkReal> x4832 = IKatan2WithCheck(IkReal(((((-1.0)*x4831))+x4830)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4832.valid){
continue;
}
CheckValue<IkReal> x4833=IKPowWithIntegerCheck(IKsign((((x4828*x4829))+(((-1.0)*(r02*r02)))+(((2.0)*x4830*x4831))+(((-1.0)*x4829))+(((-1.0)*x4828*(r00*r00))))),-1);
if(!x4833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4832.value)+(((1.5707963267949)*(x4833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4834=IKcos(j4);
IkReal x4835=IKsin(j4);
IkReal x4836=(cj5*r00);
IkReal x4837=(cj5*r10);
IkReal x4838=(r21*sj5);
IkReal x4839=(cj5*r20);
IkReal x4840=((1.0)*x4834);
IkReal x4841=((1.0)*x4835);
IkReal x4842=(sj5*x4835);
IkReal x4843=(sj5*x4834);
evalcond[0]=((((-1.0)*x4836*x4840))+((r01*x4843))+((r02*x4835)));
evalcond[1]=((((-1.0)*x4839*x4841))+((x4835*x4838))+(((-1.0)*r22*x4840)));
evalcond[2]=((((-1.0)*x4837*x4841))+((r11*x4842))+(((-1.0)*r12*x4840)));
evalcond[3]=((1.0)+(((-1.0)*x4836*x4841))+(((-1.0)*r02*x4840))+((r01*x4842)));
evalcond[4]=((((-1.0)*x4837*x4840))+((r12*x4835))+((cj2*sj1))+((cj1*sj2))+((r11*x4843)));
evalcond[5]=((((-1.0)*x4839*x4840))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4835))+((x4834*x4838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4844=((1.0)*cj5);
CheckValue<IkReal> x4845=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4844))+(((-1.0)*r20*sj5)))),-1);
if(!x4845.valid){
continue;
}
CheckValue<IkReal> x4846 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4845.value)))+(x4846.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4847=IKcos(j4);
IkReal x4848=IKsin(j4);
IkReal x4849=(cj5*r00);
IkReal x4850=(cj5*r10);
IkReal x4851=(r21*sj5);
IkReal x4852=(cj5*r20);
IkReal x4853=((1.0)*x4847);
IkReal x4854=((1.0)*x4848);
IkReal x4855=(sj5*x4848);
IkReal x4856=(sj5*x4847);
evalcond[0]=(((r02*x4848))+((r01*x4856))+(((-1.0)*x4849*x4853)));
evalcond[1]=(((x4848*x4851))+(((-1.0)*r22*x4853))+(((-1.0)*x4852*x4854)));
evalcond[2]=((((-1.0)*r12*x4853))+(((-1.0)*x4850*x4854))+((r11*x4855)));
evalcond[3]=((1.0)+((r01*x4855))+(((-1.0)*r02*x4853))+(((-1.0)*x4849*x4854)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4848))+(((-1.0)*x4850*x4853))+((r11*x4856)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4848))+(((-1.0)*x4852*x4853))+((x4847*x4851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4857 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4857.valid){
continue;
}
CheckValue<IkReal> x4858=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4857.value)+(((1.5707963267949)*(x4858.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4859=IKcos(j4);
IkReal x4860=IKsin(j4);
IkReal x4861=(cj5*r00);
IkReal x4862=(cj5*r10);
IkReal x4863=(r21*sj5);
IkReal x4864=(cj5*r20);
IkReal x4865=((1.0)*x4859);
IkReal x4866=((1.0)*x4860);
IkReal x4867=(sj5*x4860);
IkReal x4868=(sj5*x4859);
evalcond[0]=(((r01*x4868))+((r02*x4860))+(((-1.0)*x4861*x4865)));
evalcond[1]=((((-1.0)*r22*x4865))+((x4860*x4863))+(((-1.0)*x4864*x4866)));
evalcond[2]=((((-1.0)*x4862*x4866))+((r11*x4867))+(((-1.0)*r12*x4865)));
evalcond[3]=((1.0)+((r01*x4867))+(((-1.0)*r02*x4865))+(((-1.0)*x4861*x4866)));
evalcond[4]=((((-1.0)*x4862*x4865))+((r11*x4868))+((cj2*sj1))+((r12*x4860))+((cj1*sj2)));
evalcond[5]=(((x4859*x4863))+((r22*x4860))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4864*x4865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4869=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4869);
rxp1_1=(px*r21);
rxp1_2=(r11*x4869);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4870=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4870);
rxp1_1=(px*r21);
rxp1_2=(r11*x4870);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4871=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4871);
rxp1_1=(px*r21);
rxp1_2=(r11*x4871);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4874=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4874.valid){
continue;
}
IkReal x4872=x4874.value;
IkReal x4873=(sj0*x4872);
cj4array[0]=(((cj2*sj1*x4873))+((cj1*sj2*x4873)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4875=IKsin(j4);
IkReal x4876=IKcos(j4);
IkReal x4877=(r21*sj5);
IkReal x4878=((1.0)*cj5*r20);
evalcond[0]=(r02*x4875);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4876)));
evalcond[2]=((((-1.0)*x4875*x4878))+((x4875*x4877)));
evalcond[3]=(((r11*sj5*x4875))+(((-1.0)*cj5*r10*x4875)));
evalcond[4]=((((-1.0)*x4876*x4878))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4876*x4877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4880=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4880.valid){
continue;
}
IkReal x4879=x4880.value;
cj4array[0]=(((cj1*cj2*x4879))+(((-1.0)*sj1*sj2*x4879)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4881=IKsin(j4);
IkReal x4882=IKcos(j4);
IkReal x4883=((1.0)*sj0);
IkReal x4884=((1.0)*cj5);
IkReal x4885=(sj5*x4881);
evalcond[0]=(r02*x4881);
evalcond[1]=((((-1.0)*r02*x4882))+(((-1.0)*x4883)));
evalcond[2]=((((-1.0)*r20*x4881*x4884))+((r21*x4885)));
evalcond[3]=((((-1.0)*r10*x4881*x4884))+((r11*x4885)));
evalcond[4]=((((-1.0)*cj1*sj2*x4883))+((r11*sj5*x4882))+(((-1.0)*cj2*sj1*x4883))+(((-1.0)*r10*x4882*x4884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4886=IKPowWithIntegerCheck(r02,-1);
if(!x4886.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4886.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4887=IKsin(j4);
IkReal x4888=IKcos(j4);
IkReal x4889=((1.0)*cj1);
IkReal x4890=(r21*sj5);
IkReal x4891=((1.0)*cj5);
IkReal x4892=(r11*sj5);
evalcond[0]=(r02*x4887);
evalcond[1]=(((x4887*x4890))+(((-1.0)*r20*x4887*x4891)));
evalcond[2]=(((x4887*x4892))+(((-1.0)*r10*x4887*x4891)));
evalcond[3]=(((sj1*sj2))+((x4888*x4890))+(((-1.0)*cj2*x4889))+(((-1.0)*r20*x4888*x4891)));
evalcond[4]=((((-1.0)*r10*x4888*x4891))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x4889))+((x4888*x4892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4893=((1.0)*sj0);
IkReal x4894=((1.0)*cj0);
CheckValue<IkReal> x4895 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4893))+(((-1.0)*r02*x4894)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x4893))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4894)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4895.valid){
continue;
}
CheckValue<IkReal> x4896=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4895.value)+(((1.5707963267949)*(x4896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4897=IKsin(j4);
IkReal x4898=IKcos(j4);
IkReal x4899=(cj5*r00);
IkReal x4900=(cj5*r10);
IkReal x4901=(r21*sj5);
IkReal x4902=((1.0)*cj2);
IkReal x4903=((1.0)*sj0);
IkReal x4904=(cj1*sj2);
IkReal x4905=(cj5*r20);
IkReal x4906=((1.0)*x4898);
IkReal x4907=((1.0)*x4897);
IkReal x4908=(sj5*x4897);
IkReal x4909=(sj5*x4898);
evalcond[0]=((((-1.0)*x4905*x4907))+(((-1.0)*r22*x4906))+((x4897*x4901)));
evalcond[1]=((((-1.0)*r12*x4906))+cj0+((r11*x4908))+(((-1.0)*x4900*x4907)));
evalcond[2]=((((-1.0)*x4899*x4907))+(((-1.0)*x4903))+(((-1.0)*r02*x4906))+((r01*x4908)));
evalcond[3]=((((-1.0)*x4905*x4906))+((sj1*sj2))+((r22*x4897))+((x4898*x4901))+(((-1.0)*cj1*x4902)));
evalcond[4]=((((-1.0)*x4899*x4906))+(((-1.0)*cj0*x4904))+((r02*x4897))+(((-1.0)*cj0*sj1*x4902))+((r01*x4909)));
evalcond[5]=(((r12*x4897))+(((-1.0)*sj0*sj1*x4902))+(((-1.0)*x4903*x4904))+((r11*x4909))+(((-1.0)*x4900*x4906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4910=((1.0)*cj5);
CheckValue<IkReal> x4911 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4910)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4911.valid){
continue;
}
CheckValue<IkReal> x4912=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4910))+(((-1.0)*r10*sj5)))),-1);
if(!x4912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4911.value)+(((1.5707963267949)*(x4912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4913=IKsin(j4);
IkReal x4914=IKcos(j4);
IkReal x4915=(cj5*r00);
IkReal x4916=(cj5*r10);
IkReal x4917=(r21*sj5);
IkReal x4918=((1.0)*cj2);
IkReal x4919=((1.0)*sj0);
IkReal x4920=(cj1*sj2);
IkReal x4921=(cj5*r20);
IkReal x4922=((1.0)*x4914);
IkReal x4923=((1.0)*x4913);
IkReal x4924=(sj5*x4913);
IkReal x4925=(sj5*x4914);
evalcond[0]=(((x4913*x4917))+(((-1.0)*r22*x4922))+(((-1.0)*x4921*x4923)));
evalcond[1]=(cj0+(((-1.0)*x4916*x4923))+(((-1.0)*r12*x4922))+((r11*x4924)));
evalcond[2]=((((-1.0)*r02*x4922))+(((-1.0)*x4919))+(((-1.0)*x4915*x4923))+((r01*x4924)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x4921*x4922))+((x4914*x4917))+(((-1.0)*cj1*x4918))+((r22*x4913)));
evalcond[4]=((((-1.0)*cj0*sj1*x4918))+((r02*x4913))+(((-1.0)*x4915*x4922))+((r01*x4925))+(((-1.0)*cj0*x4920)));
evalcond[5]=((((-1.0)*x4916*x4922))+(((-1.0)*sj0*sj1*x4918))+(((-1.0)*x4919*x4920))+((r12*x4913))+((r11*x4925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4926=((1.0)*cj5);
CheckValue<IkReal> x4927=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4926))+(((-1.0)*r00*sj5)))),-1);
if(!x4927.valid){
continue;
}
CheckValue<IkReal> x4928 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4927.value)))+(x4928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4929=IKsin(j4);
IkReal x4930=IKcos(j4);
IkReal x4931=(cj5*r00);
IkReal x4932=(cj5*r10);
IkReal x4933=(r21*sj5);
IkReal x4934=((1.0)*cj2);
IkReal x4935=((1.0)*sj0);
IkReal x4936=(cj1*sj2);
IkReal x4937=(cj5*r20);
IkReal x4938=((1.0)*x4930);
IkReal x4939=((1.0)*x4929);
IkReal x4940=(sj5*x4929);
IkReal x4941=(sj5*x4930);
evalcond[0]=(((x4929*x4933))+(((-1.0)*x4937*x4939))+(((-1.0)*r22*x4938)));
evalcond[1]=(cj0+((r11*x4940))+(((-1.0)*x4932*x4939))+(((-1.0)*r12*x4938)));
evalcond[2]=(((r01*x4940))+(((-1.0)*r02*x4938))+(((-1.0)*x4931*x4939))+(((-1.0)*x4935)));
evalcond[3]=(((sj1*sj2))+((r22*x4929))+(((-1.0)*cj1*x4934))+(((-1.0)*x4937*x4938))+((x4930*x4933)));
evalcond[4]=(((r01*x4941))+(((-1.0)*x4931*x4938))+(((-1.0)*cj0*sj1*x4934))+((r02*x4929))+(((-1.0)*cj0*x4936)));
evalcond[5]=((((-1.0)*x4935*x4936))+((r11*x4941))+(((-1.0)*x4932*x4938))+((r12*x4929))+(((-1.0)*sj0*sj1*x4934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4942=((1.0)*cj5);
IkReal x4943=((1.0)*sj5);
IkReal x4944=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4944;
j0eval[1]=((IKabs(((((-1.0)*r00*x4943))+(((-1.0)*r01*x4942)))))+(IKabs(((((-1.0)*r10*x4943))+(((-1.0)*r11*x4942))))));
j0eval[2]=IKsign(x4944);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4945=r21*r21;
IkReal x4946=cj5*cj5;
IkReal x4947=(cj2*sj1);
IkReal x4948=(cj1*sj2);
IkReal x4949=(r21*sj5);
IkReal x4950=((1.0)*cj5*r20);
IkReal x4951=((((2.0)*cj5*r20*x4949))+(((-1.0)*(r22*r22)))+(((-1.0)*x4945))+(((-1.0)*x4946*(r20*r20)))+((x4945*x4946)));
j4eval[0]=x4951;
j4eval[1]=((IKabs(((((-1.0)*x4947*x4950))+(((-1.0)*x4948*x4950))+((x4947*x4949))+((x4948*x4949)))))+(IKabs((((r22*x4947))+((r22*x4948))))));
j4eval[2]=IKsign(x4951);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4952=cj1*cj1;
IkReal x4953=(cj2*sj2);
IkReal x4954=(cj2*sj1);
IkReal x4955=(cj1*sj1);
j0eval[0]=((((-2.0)*cj1*cj2*x4954))+x4953+x4955+(((-2.0)*x4952*x4953))+(((-1.08418367346939)*sj2*x4952))+(((-1.08418367346939)*cj1*x4954)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x4954)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.19192641276835)*py))+(((-0.195493438569105)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19192641276835)*px))+(((0.195493438569105)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.19192641276835)*py))+(((-0.195493438569105)*px))))+IKsqr(((((1.19192641276835)*px))+(((0.195493438569105)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.19192641276835)*py))+(((-0.195493438569105)*px))), ((((1.19192641276835)*px))+(((0.195493438569105)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4956=IKcos(j0);
IkReal x4957=IKsin(j0);
evalcond[0]=((((0.817)*x4956))+(((-1.0)*px))+(((-0.134)*x4957)));
evalcond[1]=((((0.817)*x4957))+(((-1.0)*py))+(((0.134)*x4956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4958=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4958;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4958);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4959=((1.0)*cj5);
IkReal x4960=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4959)));
j4eval[0]=x4960;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4959))))));
j4eval[2]=IKsign(x4960);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4961=((1.0)*cj5);
IkReal x4962=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4961)));
j4eval[0]=x4962;
j4eval[1]=IKsign(x4962);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4961))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4963=((1.0)*cj5);
CheckValue<IkReal> x4964 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4963))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4964.valid){
continue;
}
CheckValue<IkReal> x4965=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4963)))),-1);
if(!x4965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4964.value)+(((1.5707963267949)*(x4965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4966=IKcos(j4);
IkReal x4967=IKsin(j4);
IkReal x4968=((1.0)*sj0);
IkReal x4969=(cj5*r00);
IkReal x4970=(cj5*r10);
IkReal x4971=(cj5*r20);
IkReal x4972=((1.0)*x4966);
IkReal x4973=((1.0)*x4967);
IkReal x4974=(sj5*x4966);
IkReal x4975=(sj5*x4967);
evalcond[0]=(((r22*x4967))+(((-1.0)*x4971*x4972))+((r21*x4974)));
evalcond[1]=((((-1.0)*x4971*x4973))+(((-1.0)*r22*x4972))+((r21*x4975)));
evalcond[2]=(cj0+((r11*x4975))+(((-1.0)*r12*x4972))+(((-1.0)*x4970*x4973)));
evalcond[3]=(((r02*x4967))+(((-1.0)*cj0))+((r01*x4974))+(((-1.0)*x4969*x4972)));
evalcond[4]=(((r12*x4967))+(((-1.0)*x4968))+((r11*x4974))+(((-1.0)*x4970*x4972)));
evalcond[5]=((((-1.0)*x4968))+(((-1.0)*r02*x4972))+((r01*x4975))+(((-1.0)*x4969*x4973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4976=((1.0)*cj5);
CheckValue<IkReal> x4977=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4976)))),-1);
if(!x4977.valid){
continue;
}
CheckValue<IkReal> x4978 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4976)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4977.value)))+(x4978.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4979=IKcos(j4);
IkReal x4980=IKsin(j4);
IkReal x4981=((1.0)*sj0);
IkReal x4982=(cj5*r00);
IkReal x4983=(cj5*r10);
IkReal x4984=(cj5*r20);
IkReal x4985=((1.0)*x4979);
IkReal x4986=((1.0)*x4980);
IkReal x4987=(sj5*x4979);
IkReal x4988=(sj5*x4980);
evalcond[0]=(((r22*x4980))+((r21*x4987))+(((-1.0)*x4984*x4985)));
evalcond[1]=((((-1.0)*r22*x4985))+((r21*x4988))+(((-1.0)*x4984*x4986)));
evalcond[2]=(cj0+((r11*x4988))+(((-1.0)*r12*x4985))+(((-1.0)*x4983*x4986)));
evalcond[3]=(((r01*x4987))+(((-1.0)*x4982*x4985))+((r02*x4980))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4980))+((r11*x4987))+(((-1.0)*x4981))+(((-1.0)*x4983*x4985)));
evalcond[5]=(((r01*x4988))+(((-1.0)*x4982*x4986))+(((-1.0)*x4981))+(((-1.0)*r02*x4985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4989 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4989.valid){
continue;
}
CheckValue<IkReal> x4990=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4989.value)+(((1.5707963267949)*(x4990.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4991=IKcos(j4);
IkReal x4992=IKsin(j4);
IkReal x4993=((1.0)*sj0);
IkReal x4994=(cj5*r00);
IkReal x4995=(cj5*r10);
IkReal x4996=(cj5*r20);
IkReal x4997=((1.0)*x4991);
IkReal x4998=((1.0)*x4992);
IkReal x4999=(sj5*x4991);
IkReal x5000=(sj5*x4992);
evalcond[0]=(((r22*x4992))+((r21*x4999))+(((-1.0)*x4996*x4997)));
evalcond[1]=((((-1.0)*r22*x4997))+((r21*x5000))+(((-1.0)*x4996*x4998)));
evalcond[2]=(((r11*x5000))+cj0+(((-1.0)*r12*x4997))+(((-1.0)*x4995*x4998)));
evalcond[3]=(((r02*x4992))+(((-1.0)*x4994*x4997))+((r01*x4999))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4993))+((r11*x4999))+((r12*x4992))+(((-1.0)*x4995*x4997)));
evalcond[5]=((((-1.0)*x4993))+(((-1.0)*r02*x4997))+((r01*x5000))+(((-1.0)*x4994*x4998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.73273825150958)*px))+(((7.03596744552376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((1.73273825150958)*px))+(((7.03596744552376)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((1.73273825150958)*px))+(((7.03596744552376)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5001=IKcos(j0);
IkReal x5002=IKsin(j0);
evalcond[0]=((((0.033)*x5001))+(((-1.0)*px))+(((-0.134)*x5002)));
evalcond[1]=((((0.134)*x5001))+(((0.033)*x5002))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5003=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5003;
j4eval[1]=IKsign(x5003);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5004=((1.0)*cj5);
IkReal x5005=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5004)));
j4eval[0]=x5005;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5004)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5005);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5006=cj5*cj5;
IkReal x5007=((1.0)*r20);
IkReal x5008=(r01*r21);
IkReal x5009=(r21*sj5);
IkReal x5010=(((cj5*r01*r20*sj5))+((cj5*r00*x5009))+(((-1.0)*r02*r22))+(((-1.0)*x5008))+(((-1.0)*r00*x5006*x5007))+((x5006*x5008)));
j4eval[0]=x5010;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5007))+((cj0*x5009)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5010);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5011=cj5*cj5;
IkReal x5012=((1.0)*r20);
IkReal x5013=(r01*r21);
IkReal x5014=(r21*sj5);
CheckValue<IkReal> x5015=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5011*x5013))+(((-1.0)*r00*x5011*x5012))+(((-1.0)*x5013))+((cj5*r00*x5014)))),-1);
if(!x5015.valid){
continue;
}
CheckValue<IkReal> x5016 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5014))+(((-1.0)*cj0*cj5*x5012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5015.value)))+(x5016.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5017=IKcos(j4);
IkReal x5018=IKsin(j4);
IkReal x5019=(cj5*r00);
IkReal x5020=(cj5*r10);
IkReal x5021=(cj5*r20);
IkReal x5022=((1.0)*x5017);
IkReal x5023=((1.0)*x5018);
IkReal x5024=(sj5*x5017);
IkReal x5025=(sj5*x5018);
evalcond[0]=((((-1.0)*x5021*x5022))+((r22*x5018))+((r21*x5024)));
evalcond[1]=((((-1.0)*x5021*x5023))+(((-1.0)*r22*x5022))+((r21*x5025)));
evalcond[2]=((((-1.0)*x5019*x5022))+cj0+((r02*x5018))+((r01*x5024)));
evalcond[3]=(((r11*x5024))+sj0+(((-1.0)*x5020*x5022))+((r12*x5018)));
evalcond[4]=(((r11*x5025))+cj0+(((-1.0)*r12*x5022))+(((-1.0)*x5020*x5023)));
evalcond[5]=((((-1.0)*x5019*x5023))+(((-1.0)*r02*x5022))+(((-1.0)*sj0))+((r01*x5025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5026=((1.0)*cj5);
CheckValue<IkReal> x5027=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5026)))),-1);
if(!x5027.valid){
continue;
}
CheckValue<IkReal> x5028 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5026)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5027.value)))+(x5028.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5029=IKcos(j4);
IkReal x5030=IKsin(j4);
IkReal x5031=(cj5*r00);
IkReal x5032=(cj5*r10);
IkReal x5033=(cj5*r20);
IkReal x5034=((1.0)*x5029);
IkReal x5035=((1.0)*x5030);
IkReal x5036=(sj5*x5029);
IkReal x5037=(sj5*x5030);
evalcond[0]=((((-1.0)*x5033*x5034))+((r21*x5036))+((r22*x5030)));
evalcond[1]=((((-1.0)*x5033*x5035))+((r21*x5037))+(((-1.0)*r22*x5034)));
evalcond[2]=(cj0+((r02*x5030))+(((-1.0)*x5031*x5034))+((r01*x5036)));
evalcond[3]=(((r12*x5030))+sj0+((r11*x5036))+(((-1.0)*x5032*x5034)));
evalcond[4]=(cj0+((r11*x5037))+(((-1.0)*x5032*x5035))+(((-1.0)*r12*x5034)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5031*x5035))+((r01*x5037))+(((-1.0)*r02*x5034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5038 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5038.valid){
continue;
}
CheckValue<IkReal> x5039=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5038.value)+(((1.5707963267949)*(x5039.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5040=IKcos(j4);
IkReal x5041=IKsin(j4);
IkReal x5042=(cj5*r00);
IkReal x5043=(cj5*r10);
IkReal x5044=(cj5*r20);
IkReal x5045=((1.0)*x5040);
IkReal x5046=((1.0)*x5041);
IkReal x5047=(sj5*x5040);
IkReal x5048=(sj5*x5041);
evalcond[0]=(((r21*x5047))+(((-1.0)*x5044*x5045))+((r22*x5041)));
evalcond[1]=(((r21*x5048))+(((-1.0)*r22*x5045))+(((-1.0)*x5044*x5046)));
evalcond[2]=(cj0+(((-1.0)*x5042*x5045))+((r02*x5041))+((r01*x5047)));
evalcond[3]=((((-1.0)*x5043*x5045))+sj0+((r12*x5041))+((r11*x5047)));
evalcond[4]=((((-1.0)*x5043*x5046))+cj0+(((-1.0)*r12*x5045))+((r11*x5048)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5045))+(((-1.0)*x5042*x5046))+((r01*x5048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5049=IKsin(j0);
IkReal x5050=IKcos(j0);
IkReal x5051=((0.1)*sj5);
IkReal x5052=(cj5*r11);
IkReal x5053=(cj5*r01);
evalcond[0]=(((r00*sj5))+x5053+(((-1.0)*x5050)));
evalcond[1]=(((r10*sj5))+x5052+(((-1.0)*x5049)));
evalcond[2]=((((-0.1)*x5053))+(((-1.0)*px))+(((-0.134)*x5049))+(((-1.0)*r00*x5051)));
evalcond[3]=((((-0.1)*x5052))+(((-1.0)*r10*x5051))+(((-1.0)*py))+(((0.134)*x5050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5054=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5054;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5054);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5055=((1.0)*cj5);
IkReal x5056=((((-1.0)*r01*x5055))+(((-1.0)*r00*sj5)));
j4eval[0]=x5056;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5055))+((r11*sj5))))));
j4eval[2]=IKsign(x5056);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5057=cj5*cj5;
IkReal x5058=(r01*r11);
IkReal x5059=((1.0)*r00);
IkReal x5060=(r01*sj5);
IkReal x5061=((((-1.0)*r10*x5057*x5059))+(((-1.0)*r02*r12))+((x5057*x5058))+((cj5*r10*x5060))+(((-1.0)*x5058))+((cj5*r00*r11*sj5)));
j4eval[0]=x5061;
j4eval[1]=IKsign(x5061);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5060))+(((-1.0)*cj0*cj5*x5059))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5062=cj5*cj5;
IkReal x5063=(r01*r11);
IkReal x5064=(cj5*r00);
IkReal x5065=(r01*sj5);
CheckValue<IkReal> x5066 = IKatan2WithCheck(IkReal((((cj0*x5065))+(((-1.0)*cj0*x5064)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5066.valid){
continue;
}
CheckValue<IkReal> x5067=IKPowWithIntegerCheck(IKsign((((r11*sj5*x5064))+(((-1.0)*r02*r12))+((x5062*x5063))+((cj5*r10*x5065))+(((-1.0)*x5063))+(((-1.0)*r00*r10*x5062)))),-1);
if(!x5067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5066.value)+(((1.5707963267949)*(x5067.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5068=IKcos(j4);
IkReal x5069=IKsin(j4);
IkReal x5070=(cj5*r00);
IkReal x5071=(r01*sj5);
IkReal x5072=(cj5*r10);
IkReal x5073=(cj5*r20);
IkReal x5074=((1.0)*x5068);
IkReal x5075=((1.0)*x5069);
IkReal x5076=(sj5*x5069);
IkReal x5077=(sj5*x5068);
evalcond[0]=(((x5068*x5071))+((r02*x5069))+(((-1.0)*x5070*x5074)));
evalcond[1]=((((-1.0)*x5072*x5074))+((r12*x5069))+((r11*x5077)));
evalcond[2]=(((r21*x5076))+(((-1.0)*x5073*x5075))+(((-1.0)*r22*x5074)));
evalcond[3]=((1.0)+((r21*x5077))+(((-1.0)*x5073*x5074))+((r22*x5069)));
evalcond[4]=(cj0+(((-1.0)*x5072*x5075))+(((-1.0)*r12*x5074))+((r11*x5076)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5074))+(((-1.0)*x5070*x5075))+((x5069*x5071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5078=((1.0)*cj5);
CheckValue<IkReal> x5079 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5078))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5079.valid){
continue;
}
CheckValue<IkReal> x5080=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5078)))),-1);
if(!x5080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5079.value)+(((1.5707963267949)*(x5080.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5081=IKcos(j4);
IkReal x5082=IKsin(j4);
IkReal x5083=(cj5*r00);
IkReal x5084=(r01*sj5);
IkReal x5085=(cj5*r10);
IkReal x5086=(cj5*r20);
IkReal x5087=((1.0)*x5081);
IkReal x5088=((1.0)*x5082);
IkReal x5089=(sj5*x5082);
IkReal x5090=(sj5*x5081);
evalcond[0]=((((-1.0)*x5083*x5087))+((r02*x5082))+((x5081*x5084)));
evalcond[1]=(((r11*x5090))+(((-1.0)*x5085*x5087))+((r12*x5082)));
evalcond[2]=(((r21*x5089))+(((-1.0)*x5086*x5088))+(((-1.0)*r22*x5087)));
evalcond[3]=((1.0)+((r21*x5090))+((r22*x5082))+(((-1.0)*x5086*x5087)));
evalcond[4]=((((-1.0)*r12*x5087))+cj0+((r11*x5089))+(((-1.0)*x5085*x5088)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5083*x5088))+((x5082*x5084))+(((-1.0)*r02*x5087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5091 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5091.valid){
continue;
}
CheckValue<IkReal> x5092=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5091.value)+(((1.5707963267949)*(x5092.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5093=IKcos(j4);
IkReal x5094=IKsin(j4);
IkReal x5095=(cj5*r00);
IkReal x5096=(r01*sj5);
IkReal x5097=(cj5*r10);
IkReal x5098=(cj5*r20);
IkReal x5099=((1.0)*x5093);
IkReal x5100=((1.0)*x5094);
IkReal x5101=(sj5*x5094);
IkReal x5102=(sj5*x5093);
evalcond[0]=(((x5093*x5096))+((r02*x5094))+(((-1.0)*x5095*x5099)));
evalcond[1]=((((-1.0)*x5097*x5099))+((r12*x5094))+((r11*x5102)));
evalcond[2]=((((-1.0)*r22*x5099))+((r21*x5101))+(((-1.0)*x5098*x5100)));
evalcond[3]=((1.0)+((r22*x5094))+((r21*x5102))+(((-1.0)*x5098*x5099)));
evalcond[4]=((((-1.0)*x5097*x5100))+cj0+((r11*x5101))+(((-1.0)*r12*x5099)));
evalcond[5]=((((-1.0)*sj0))+((x5094*x5096))+(((-1.0)*x5095*x5100))+(((-1.0)*r02*x5099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5103=IKcos(j0);
IkReal x5104=IKsin(j0);
evalcond[0]=((((-0.134)*x5104))+(((-0.392)*x5103))+(((-1.0)*px)));
evalcond[1]=((((-0.392)*x5104))+(((-1.0)*py))+(((0.134)*x5103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5105=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5105;
j4eval[1]=IKsign(x5105);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5106=((1.0)*cj5);
IkReal x5107=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5106)));
j4eval[0]=x5107;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5106))))));
j4eval[2]=IKsign(x5107);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5108=cj5*cj5;
IkReal x5109=((1.0)*r20);
IkReal x5110=(r01*r21);
IkReal x5111=(r21*sj5);
IkReal x5112=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5108*x5110))+(((-1.0)*x5110))+(((-1.0)*r00*x5108*x5109))+((cj5*r00*x5111)));
j4eval[0]=x5112;
j4eval[1]=((IKabs((((cj0*x5111))+(((-1.0)*cj0*cj5*x5109)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5112);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5113=cj5*cj5;
IkReal x5114=((1.0)*r20);
IkReal x5115=(r01*r21);
IkReal x5116=(r21*sj5);
CheckValue<IkReal> x5117 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5116))+(((-1.0)*cj0*cj5*x5114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5117.valid){
continue;
}
CheckValue<IkReal> x5118=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x5113*x5115))+(((-1.0)*r02*r22))+(((-1.0)*x5115))+(((-1.0)*r00*x5113*x5114))+((cj5*r00*x5116)))),-1);
if(!x5118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5117.value)+(((1.5707963267949)*(x5118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5119=IKcos(j4);
IkReal x5120=IKsin(j4);
IkReal x5121=(cj5*r00);
IkReal x5122=(cj5*r10);
IkReal x5123=(cj5*r20);
IkReal x5124=((1.0)*x5119);
IkReal x5125=((1.0)*x5120);
IkReal x5126=(sj5*x5119);
IkReal x5127=(sj5*x5120);
evalcond[0]=(((r22*x5120))+(((-1.0)*x5123*x5124))+((r21*x5126)));
evalcond[1]=((((-1.0)*x5123*x5125))+((r21*x5127))+(((-1.0)*r22*x5124)));
evalcond[2]=(cj0+((r01*x5126))+(((-1.0)*x5121*x5124))+((r02*x5120)));
evalcond[3]=(sj0+((r12*x5120))+((r11*x5126))+(((-1.0)*x5122*x5124)));
evalcond[4]=(cj0+((r11*x5127))+(((-1.0)*x5122*x5125))+(((-1.0)*r12*x5124)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5127))+(((-1.0)*x5121*x5125))+(((-1.0)*r02*x5124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5128=((1.0)*cj5);
CheckValue<IkReal> x5129 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5128))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5129.valid){
continue;
}
CheckValue<IkReal> x5130=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5128)))),-1);
if(!x5130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5129.value)+(((1.5707963267949)*(x5130.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5131=IKcos(j4);
IkReal x5132=IKsin(j4);
IkReal x5133=(cj5*r00);
IkReal x5134=(cj5*r10);
IkReal x5135=(cj5*r20);
IkReal x5136=((1.0)*x5131);
IkReal x5137=((1.0)*x5132);
IkReal x5138=(sj5*x5131);
IkReal x5139=(sj5*x5132);
evalcond[0]=(((r22*x5132))+(((-1.0)*x5135*x5136))+((r21*x5138)));
evalcond[1]=((((-1.0)*x5135*x5137))+((r21*x5139))+(((-1.0)*r22*x5136)));
evalcond[2]=(cj0+((r01*x5138))+((r02*x5132))+(((-1.0)*x5133*x5136)));
evalcond[3]=(sj0+((r12*x5132))+((r11*x5138))+(((-1.0)*x5134*x5136)));
evalcond[4]=(cj0+((r11*x5139))+(((-1.0)*r12*x5136))+(((-1.0)*x5134*x5137)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5139))+(((-1.0)*r02*x5136))+(((-1.0)*x5133*x5137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5140 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5140.valid){
continue;
}
CheckValue<IkReal> x5141=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5140.value)+(((1.5707963267949)*(x5141.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5142=IKcos(j4);
IkReal x5143=IKsin(j4);
IkReal x5144=(cj5*r00);
IkReal x5145=(cj5*r10);
IkReal x5146=(cj5*r20);
IkReal x5147=((1.0)*x5142);
IkReal x5148=((1.0)*x5143);
IkReal x5149=(sj5*x5142);
IkReal x5150=(sj5*x5143);
evalcond[0]=(((r21*x5149))+((r22*x5143))+(((-1.0)*x5146*x5147)));
evalcond[1]=(((r21*x5150))+(((-1.0)*x5146*x5148))+(((-1.0)*r22*x5147)));
evalcond[2]=(((r01*x5149))+cj0+((r02*x5143))+(((-1.0)*x5144*x5147)));
evalcond[3]=(sj0+((r12*x5143))+((r11*x5149))+(((-1.0)*x5145*x5147)));
evalcond[4]=(((r11*x5150))+cj0+(((-1.0)*r12*x5147))+(((-1.0)*x5145*x5148)));
evalcond[5]=(((r01*x5150))+(((-1.0)*sj0))+(((-1.0)*r02*x5147))+(((-1.0)*x5144*x5148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5151=((1.0)*sj5);
IkReal x5152=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5152))+(((-1.0)*r10*x5151)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5151))+(((-1.0)*r01*x5152)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5152))+(((-1.0)*r10*x5151))))+IKsqr(((((-1.0)*r00*x5151))+(((-1.0)*r01*x5152))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5152))+(((-1.0)*r10*x5151))), ((((-1.0)*r00*x5151))+(((-1.0)*r01*x5152))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5153=IKsin(j0);
IkReal x5154=IKcos(j0);
IkReal x5155=(r10*sj5);
IkReal x5156=(r00*sj5);
IkReal x5157=(cj5*r11);
IkReal x5158=(cj5*r01);
evalcond[0]=(x5158+x5154+x5156);
evalcond[1]=(x5153+x5155+x5157);
evalcond[2]=((((-0.134)*x5153))+(((-0.1)*x5158))+(((-0.1)*x5156))+(((-1.0)*px)));
evalcond[3]=((((-0.1)*x5157))+(((-0.1)*x5155))+(((-1.0)*py))+(((0.134)*x5154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5159=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5159;
j4eval[1]=IKsign(x5159);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5160=((1.0)*cj5);
IkReal x5161=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5160)));
j4eval[0]=x5161;
j4eval[1]=IKsign(x5161);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5160))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5162=cj5*cj5;
IkReal x5163=(r01*r11);
IkReal x5164=((1.0)*r00);
IkReal x5165=(r01*sj5);
IkReal x5166=(((x5162*x5163))+(((-1.0)*r02*r12))+(((-1.0)*x5163))+(((-1.0)*r10*x5162*x5164))+((cj5*r10*x5165))+((cj5*r00*r11*sj5)));
j4eval[0]=x5166;
j4eval[1]=IKsign(x5166);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5165))+(((-1.0)*cj0*cj5*x5164))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5167=cj5*cj5;
IkReal x5168=(r01*r11);
IkReal x5169=(cj5*r00);
IkReal x5170=(r01*sj5);
CheckValue<IkReal> x5171 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5169))+((cj0*x5170)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5171.valid){
continue;
}
CheckValue<IkReal> x5172=IKPowWithIntegerCheck(IKsign((((r11*sj5*x5169))+(((-1.0)*r02*r12))+((x5167*x5168))+(((-1.0)*x5168))+(((-1.0)*r00*r10*x5167))+((cj5*r10*x5170)))),-1);
if(!x5172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5171.value)+(((1.5707963267949)*(x5172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5173=IKcos(j4);
IkReal x5174=IKsin(j4);
IkReal x5175=(cj5*r00);
IkReal x5176=(r01*sj5);
IkReal x5177=(cj5*r10);
IkReal x5178=(cj5*r20);
IkReal x5179=((1.0)*x5173);
IkReal x5180=((1.0)*x5174);
IkReal x5181=(sj5*x5174);
IkReal x5182=(sj5*x5173);
evalcond[0]=((((-1.0)*x5175*x5179))+((r02*x5174))+((x5173*x5176)));
evalcond[1]=(((r12*x5174))+(((-1.0)*x5177*x5179))+((r11*x5182)));
evalcond[2]=(((r21*x5181))+(((-1.0)*x5178*x5180))+(((-1.0)*r22*x5179)));
evalcond[3]=((-1.0)+(((-1.0)*x5178*x5179))+((r21*x5182))+((r22*x5174)));
evalcond[4]=(cj0+(((-1.0)*r12*x5179))+(((-1.0)*x5177*x5180))+((r11*x5181)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5175*x5180))+(((-1.0)*r02*x5179))+((x5174*x5176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5183=((1.0)*cj5);
CheckValue<IkReal> x5184=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5183)))),-1);
if(!x5184.valid){
continue;
}
CheckValue<IkReal> x5185 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5183)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5184.value)))+(x5185.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5186=IKcos(j4);
IkReal x5187=IKsin(j4);
IkReal x5188=(cj5*r00);
IkReal x5189=(r01*sj5);
IkReal x5190=(cj5*r10);
IkReal x5191=(cj5*r20);
IkReal x5192=((1.0)*x5186);
IkReal x5193=((1.0)*x5187);
IkReal x5194=(sj5*x5187);
IkReal x5195=(sj5*x5186);
evalcond[0]=(((x5186*x5189))+((r02*x5187))+(((-1.0)*x5188*x5192)));
evalcond[1]=(((r11*x5195))+(((-1.0)*x5190*x5192))+((r12*x5187)));
evalcond[2]=(((r21*x5194))+(((-1.0)*x5191*x5193))+(((-1.0)*r22*x5192)));
evalcond[3]=((-1.0)+((r22*x5187))+((r21*x5195))+(((-1.0)*x5191*x5192)));
evalcond[4]=((((-1.0)*r12*x5192))+cj0+((r11*x5194))+(((-1.0)*x5190*x5193)));
evalcond[5]=((((-1.0)*sj0))+((x5187*x5189))+(((-1.0)*r02*x5192))+(((-1.0)*x5188*x5193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5196=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5196.valid){
continue;
}
CheckValue<IkReal> x5197 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5196.value)))+(x5197.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5198=IKcos(j4);
IkReal x5199=IKsin(j4);
IkReal x5200=(cj5*r00);
IkReal x5201=(r01*sj5);
IkReal x5202=(cj5*r10);
IkReal x5203=(cj5*r20);
IkReal x5204=((1.0)*x5198);
IkReal x5205=((1.0)*x5199);
IkReal x5206=(sj5*x5199);
IkReal x5207=(sj5*x5198);
evalcond[0]=((((-1.0)*x5200*x5204))+((r02*x5199))+((x5198*x5201)));
evalcond[1]=(((r11*x5207))+((r12*x5199))+(((-1.0)*x5202*x5204)));
evalcond[2]=((((-1.0)*x5203*x5205))+(((-1.0)*r22*x5204))+((r21*x5206)));
evalcond[3]=((-1.0)+(((-1.0)*x5203*x5204))+((r22*x5199))+((r21*x5207)));
evalcond[4]=(cj0+((r11*x5206))+(((-1.0)*x5202*x5205))+(((-1.0)*r12*x5204)));
evalcond[5]=((((-1.0)*r02*x5204))+(((-1.0)*sj0))+(((-1.0)*x5200*x5205))+((x5199*x5201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5208=IKsin(j0);
IkReal x5209=IKcos(j0);
evalcond[0]=((((-0.134)*x5208))+(((-1.0)*px))+(((0.392)*x5209)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x5209))+(((0.392)*x5208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5210=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5210;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5210);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5211=((1.0)*cj5);
IkReal x5212=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5211)));
j4eval[0]=x5212;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5211)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5212);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5213=((1.0)*cj5);
IkReal x5214=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5213)));
j4eval[0]=x5214;
j4eval[1]=IKsign(x5214);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5213))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5215=((1.0)*cj5);
CheckValue<IkReal> x5216=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5215)))),-1);
if(!x5216.valid){
continue;
}
CheckValue<IkReal> x5217 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5215))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5216.value)))+(x5217.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5218=IKcos(j4);
IkReal x5219=IKsin(j4);
IkReal x5220=((1.0)*sj0);
IkReal x5221=(cj5*r00);
IkReal x5222=(cj5*r10);
IkReal x5223=(cj5*r20);
IkReal x5224=((1.0)*x5218);
IkReal x5225=((1.0)*x5219);
IkReal x5226=(sj5*x5218);
IkReal x5227=(sj5*x5219);
evalcond[0]=((((-1.0)*x5223*x5224))+((r21*x5226))+((r22*x5219)));
evalcond[1]=((((-1.0)*x5223*x5225))+((r21*x5227))+(((-1.0)*r22*x5224)));
evalcond[2]=(cj0+(((-1.0)*x5222*x5225))+(((-1.0)*r12*x5224))+((r11*x5227)));
evalcond[3]=((((-1.0)*x5221*x5224))+((r02*x5219))+((r01*x5226))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5222*x5224))+((r12*x5219))+(((-1.0)*x5220))+((r11*x5226)));
evalcond[5]=((((-1.0)*x5221*x5225))+(((-1.0)*x5220))+(((-1.0)*r02*x5224))+((r01*x5227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5228=((1.0)*cj5);
CheckValue<IkReal> x5229=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5228)))),-1);
if(!x5229.valid){
continue;
}
CheckValue<IkReal> x5230 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5228)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5229.value)))+(x5230.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5231=IKcos(j4);
IkReal x5232=IKsin(j4);
IkReal x5233=((1.0)*sj0);
IkReal x5234=(cj5*r00);
IkReal x5235=(cj5*r10);
IkReal x5236=(cj5*r20);
IkReal x5237=((1.0)*x5231);
IkReal x5238=((1.0)*x5232);
IkReal x5239=(sj5*x5231);
IkReal x5240=(sj5*x5232);
evalcond[0]=((((-1.0)*x5236*x5237))+((r21*x5239))+((r22*x5232)));
evalcond[1]=((((-1.0)*x5236*x5238))+(((-1.0)*r22*x5237))+((r21*x5240)));
evalcond[2]=(((r11*x5240))+(((-1.0)*x5235*x5238))+cj0+(((-1.0)*r12*x5237)));
evalcond[3]=((((-1.0)*x5234*x5237))+((r01*x5239))+((r02*x5232))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5233))+(((-1.0)*x5235*x5237))+((r11*x5239))+((r12*x5232)));
evalcond[5]=((((-1.0)*x5233))+(((-1.0)*x5234*x5238))+(((-1.0)*r02*x5237))+((r01*x5240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5241 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5241.valid){
continue;
}
CheckValue<IkReal> x5242=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5241.value)+(((1.5707963267949)*(x5242.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5243=IKcos(j4);
IkReal x5244=IKsin(j4);
IkReal x5245=((1.0)*sj0);
IkReal x5246=(cj5*r00);
IkReal x5247=(cj5*r10);
IkReal x5248=(cj5*r20);
IkReal x5249=((1.0)*x5243);
IkReal x5250=((1.0)*x5244);
IkReal x5251=(sj5*x5243);
IkReal x5252=(sj5*x5244);
evalcond[0]=((((-1.0)*x5248*x5249))+((r21*x5251))+((r22*x5244)));
evalcond[1]=((((-1.0)*x5248*x5250))+(((-1.0)*r22*x5249))+((r21*x5252)));
evalcond[2]=((((-1.0)*r12*x5249))+cj0+((r11*x5252))+(((-1.0)*x5247*x5250)));
evalcond[3]=(((r01*x5251))+(((-1.0)*x5246*x5249))+((r02*x5244))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5247*x5249))+(((-1.0)*x5245))+((r12*x5244))+((r11*x5251)));
evalcond[5]=(((r01*x5252))+(((-1.0)*x5245))+(((-1.0)*r02*x5249))+(((-1.0)*x5246*x5250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.195493438569105)*px))+(((-1.19192641276835)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.195493438569105)*py))+(((-1.19192641276835)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))))+IKsqr(((((0.195493438569105)*py))+(((-1.19192641276835)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))), ((((0.195493438569105)*py))+(((-1.19192641276835)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5253=IKcos(j0);
IkReal x5254=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x5254))+(((-0.817)*x5253)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x5253))+(((-0.817)*x5254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5255=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5255;
j4eval[1]=IKsign(x5255);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5256=((1.0)*cj5);
IkReal x5257=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5256)));
j4eval[0]=x5257;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5256))))));
j4eval[2]=IKsign(x5257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5258=cj5*cj5;
IkReal x5259=((1.0)*r20);
IkReal x5260=(r01*r21);
IkReal x5261=(r21*sj5);
IkReal x5262=(((cj5*r01*r20*sj5))+(((-1.0)*x5260))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5258*x5259))+((x5258*x5260))+((cj5*r00*x5261)));
j4eval[0]=x5262;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5259))+((cj0*x5261)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5262);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5263=cj5*cj5;
IkReal x5264=((1.0)*r20);
IkReal x5265=(r01*r21);
IkReal x5266=(r21*sj5);
CheckValue<IkReal> x5267 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5264))+((cj0*x5266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5267.valid){
continue;
}
CheckValue<IkReal> x5268=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x5265))+(((-1.0)*r02*r22))+((x5263*x5265))+(((-1.0)*r00*x5263*x5264))+((cj5*r00*x5266)))),-1);
if(!x5268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5267.value)+(((1.5707963267949)*(x5268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5269=IKcos(j4);
IkReal x5270=IKsin(j4);
IkReal x5271=(cj5*r00);
IkReal x5272=(cj5*r10);
IkReal x5273=(cj5*r20);
IkReal x5274=((1.0)*x5269);
IkReal x5275=((1.0)*x5270);
IkReal x5276=(sj5*x5269);
IkReal x5277=(sj5*x5270);
evalcond[0]=(((r22*x5270))+((r21*x5276))+(((-1.0)*x5273*x5274)));
evalcond[1]=(((r21*x5277))+(((-1.0)*x5273*x5275))+(((-1.0)*r22*x5274)));
evalcond[2]=(((r02*x5270))+cj0+(((-1.0)*x5271*x5274))+((r01*x5276)));
evalcond[3]=((((-1.0)*x5272*x5274))+sj0+((r11*x5276))+((r12*x5270)));
evalcond[4]=((((-1.0)*x5272*x5275))+cj0+(((-1.0)*r12*x5274))+((r11*x5277)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5271*x5275))+((r01*x5277))+(((-1.0)*r02*x5274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5278=((1.0)*cj5);
CheckValue<IkReal> x5279=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5278)))),-1);
if(!x5279.valid){
continue;
}
CheckValue<IkReal> x5280 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5278)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5279.value)))+(x5280.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5281=IKcos(j4);
IkReal x5282=IKsin(j4);
IkReal x5283=(cj5*r00);
IkReal x5284=(cj5*r10);
IkReal x5285=(cj5*r20);
IkReal x5286=((1.0)*x5281);
IkReal x5287=((1.0)*x5282);
IkReal x5288=(sj5*x5281);
IkReal x5289=(sj5*x5282);
evalcond[0]=(((r22*x5282))+((r21*x5288))+(((-1.0)*x5285*x5286)));
evalcond[1]=((((-1.0)*r22*x5286))+((r21*x5289))+(((-1.0)*x5285*x5287)));
evalcond[2]=(((r02*x5282))+cj0+((r01*x5288))+(((-1.0)*x5283*x5286)));
evalcond[3]=(((r12*x5282))+(((-1.0)*x5284*x5286))+sj0+((r11*x5288)));
evalcond[4]=((((-1.0)*x5284*x5287))+cj0+(((-1.0)*r12*x5286))+((r11*x5289)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5289))+(((-1.0)*r02*x5286))+(((-1.0)*x5283*x5287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5290 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5290.valid){
continue;
}
CheckValue<IkReal> x5291=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5290.value)+(((1.5707963267949)*(x5291.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5292=IKcos(j4);
IkReal x5293=IKsin(j4);
IkReal x5294=(cj5*r00);
IkReal x5295=(cj5*r10);
IkReal x5296=(cj5*r20);
IkReal x5297=((1.0)*x5292);
IkReal x5298=((1.0)*x5293);
IkReal x5299=(sj5*x5292);
IkReal x5300=(sj5*x5293);
evalcond[0]=(((r22*x5293))+((r21*x5299))+(((-1.0)*x5296*x5297)));
evalcond[1]=(((r21*x5300))+(((-1.0)*r22*x5297))+(((-1.0)*x5296*x5298)));
evalcond[2]=(cj0+((r02*x5293))+(((-1.0)*x5294*x5297))+((r01*x5299)));
evalcond[3]=(((r12*x5293))+sj0+(((-1.0)*x5295*x5297))+((r11*x5299)));
evalcond[4]=(cj0+(((-1.0)*x5295*x5298))+(((-1.0)*r12*x5297))+((r11*x5300)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5294*x5298))+(((-1.0)*r02*x5297))+((r01*x5300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.03596744552376)*py))+(((-1.73273825150958)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((7.03596744552376)*py))+(((-1.73273825150958)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((7.03596744552376)*py))+(((-1.73273825150958)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5301=IKcos(j0);
IkReal x5302=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x5302))+(((-0.033)*x5301)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x5301))+(((-0.033)*x5302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5303=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5303;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5303);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5304=((1.0)*cj5);
IkReal x5305=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5304)));
j4eval[0]=x5305;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5304)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5305);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5306=((1.0)*cj5);
IkReal x5307=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5306)));
j4eval[0]=x5307;
j4eval[1]=IKsign(x5307);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5306))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5308=((1.0)*cj5);
CheckValue<IkReal> x5309=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5308)))),-1);
if(!x5309.valid){
continue;
}
CheckValue<IkReal> x5310 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5308)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5309.value)))+(x5310.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5311=IKcos(j4);
IkReal x5312=IKsin(j4);
IkReal x5313=((1.0)*sj0);
IkReal x5314=(cj5*r00);
IkReal x5315=(cj5*r10);
IkReal x5316=(cj5*r20);
IkReal x5317=((1.0)*x5311);
IkReal x5318=((1.0)*x5312);
IkReal x5319=(sj5*x5311);
IkReal x5320=(sj5*x5312);
evalcond[0]=(((r22*x5312))+((r21*x5319))+(((-1.0)*x5316*x5317)));
evalcond[1]=((((-1.0)*x5316*x5318))+((r21*x5320))+(((-1.0)*r22*x5317)));
evalcond[2]=((((-1.0)*r12*x5317))+((r11*x5320))+cj0+(((-1.0)*x5315*x5318)));
evalcond[3]=(((r01*x5319))+(((-1.0)*x5314*x5317))+((r02*x5312))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5313))+((r11*x5319))+(((-1.0)*x5315*x5317))+((r12*x5312)));
evalcond[5]=((((-1.0)*x5314*x5318))+(((-1.0)*x5313))+((r01*x5320))+(((-1.0)*r02*x5317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5321=((1.0)*cj5);
CheckValue<IkReal> x5322=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5321)))),-1);
if(!x5322.valid){
continue;
}
CheckValue<IkReal> x5323 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5322.value)))+(x5323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5324=IKcos(j4);
IkReal x5325=IKsin(j4);
IkReal x5326=((1.0)*sj0);
IkReal x5327=(cj5*r00);
IkReal x5328=(cj5*r10);
IkReal x5329=(cj5*r20);
IkReal x5330=((1.0)*x5324);
IkReal x5331=((1.0)*x5325);
IkReal x5332=(sj5*x5324);
IkReal x5333=(sj5*x5325);
evalcond[0]=((((-1.0)*x5329*x5330))+((r22*x5325))+((r21*x5332)));
evalcond[1]=((((-1.0)*r22*x5330))+(((-1.0)*x5329*x5331))+((r21*x5333)));
evalcond[2]=(cj0+((r11*x5333))+(((-1.0)*x5328*x5331))+(((-1.0)*r12*x5330)));
evalcond[3]=(((r01*x5332))+((r02*x5325))+(((-1.0)*x5327*x5330))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5332))+((r12*x5325))+(((-1.0)*x5328*x5330))+(((-1.0)*x5326)));
evalcond[5]=((((-1.0)*r02*x5330))+((r01*x5333))+(((-1.0)*x5326))+(((-1.0)*x5327*x5331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5334 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5334.valid){
continue;
}
CheckValue<IkReal> x5335=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5334.value)+(((1.5707963267949)*(x5335.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5336=IKcos(j4);
IkReal x5337=IKsin(j4);
IkReal x5338=((1.0)*sj0);
IkReal x5339=(cj5*r00);
IkReal x5340=(cj5*r10);
IkReal x5341=(cj5*r20);
IkReal x5342=((1.0)*x5336);
IkReal x5343=((1.0)*x5337);
IkReal x5344=(sj5*x5336);
IkReal x5345=(sj5*x5337);
evalcond[0]=((((-1.0)*x5341*x5342))+((r22*x5337))+((r21*x5344)));
evalcond[1]=((((-1.0)*x5341*x5343))+(((-1.0)*r22*x5342))+((r21*x5345)));
evalcond[2]=(cj0+((r11*x5345))+(((-1.0)*r12*x5342))+(((-1.0)*x5340*x5343)));
evalcond[3]=(((r01*x5344))+(((-1.0)*x5339*x5342))+((r02*x5337))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5337))+((r11*x5344))+(((-1.0)*x5338))+(((-1.0)*x5340*x5342)));
evalcond[5]=((((-1.0)*r02*x5342))+((r01*x5345))+(((-1.0)*x5339*x5343))+(((-1.0)*x5338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5346=((1.0)*sj5);
IkReal x5347=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x5346))+(((-1.0)*r11*x5347)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5347))+(((-1.0)*r00*x5346)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x5346))+(((-1.0)*r11*x5347))))+IKsqr(((((-1.0)*r01*x5347))+(((-1.0)*r00*x5346))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x5346))+(((-1.0)*r11*x5347))), ((((-1.0)*r01*x5347))+(((-1.0)*r00*x5346))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5348=IKsin(j0);
IkReal x5349=IKcos(j0);
IkReal x5350=(r10*sj5);
IkReal x5351=(r00*sj5);
IkReal x5352=(cj5*r11);
IkReal x5353=(cj5*r01);
evalcond[0]=(x5349+x5353+x5351);
evalcond[1]=(x5348+x5352+x5350);
evalcond[2]=((((-1.0)*px))+(((-0.134)*x5348))+(((-0.1)*x5351))+(((-0.1)*x5353)));
evalcond[3]=((((-1.0)*py))+(((0.134)*x5349))+(((-0.1)*x5350))+(((-0.1)*x5352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5354=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5354;
j4eval[1]=IKsign(x5354);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5355=((1.0)*cj5);
IkReal x5356=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5355)));
j4eval[0]=x5356;
j4eval[1]=IKsign(x5356);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5355))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5357=cj5*cj5;
IkReal x5358=(r01*r11);
IkReal x5359=((1.0)*r00);
IkReal x5360=(r01*sj5);
IkReal x5361=((((-1.0)*r10*x5357*x5359))+((x5357*x5358))+(((-1.0)*r02*r12))+((cj5*r10*x5360))+(((-1.0)*x5358))+((cj5*r00*r11*sj5)));
j4eval[0]=x5361;
j4eval[1]=IKsign(x5361);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5359))+((cj0*x5360))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5362=cj5*cj5;
IkReal x5363=(r01*r11);
IkReal x5364=(cj5*r00);
IkReal x5365=(r01*sj5);
CheckValue<IkReal> x5366 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5364))+((cj0*x5365)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5366.valid){
continue;
}
CheckValue<IkReal> x5367=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+(((-1.0)*x5363))+((r11*sj5*x5364))+((x5362*x5363))+((cj5*r10*x5365))+(((-1.0)*r00*r10*x5362)))),-1);
if(!x5367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5366.value)+(((1.5707963267949)*(x5367.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5368=IKcos(j4);
IkReal x5369=IKsin(j4);
IkReal x5370=(cj5*r00);
IkReal x5371=(r01*sj5);
IkReal x5372=(cj5*r10);
IkReal x5373=(cj5*r20);
IkReal x5374=((1.0)*x5368);
IkReal x5375=((1.0)*x5369);
IkReal x5376=(sj5*x5369);
IkReal x5377=(sj5*x5368);
evalcond[0]=(((r02*x5369))+((x5368*x5371))+(((-1.0)*x5370*x5374)));
evalcond[1]=(((r12*x5369))+(((-1.0)*x5372*x5374))+((r11*x5377)));
evalcond[2]=((((-1.0)*r22*x5374))+((r21*x5376))+(((-1.0)*x5373*x5375)));
evalcond[3]=((-1.0)+((r22*x5369))+((r21*x5377))+(((-1.0)*x5373*x5374)));
evalcond[4]=(cj0+(((-1.0)*x5372*x5375))+(((-1.0)*r12*x5374))+((r11*x5376)));
evalcond[5]=((((-1.0)*sj0))+((x5369*x5371))+(((-1.0)*x5370*x5375))+(((-1.0)*r02*x5374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5378=((1.0)*cj5);
CheckValue<IkReal> x5379 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5378)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5379.valid){
continue;
}
CheckValue<IkReal> x5380=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5378)))),-1);
if(!x5380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5379.value)+(((1.5707963267949)*(x5380.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5381=IKcos(j4);
IkReal x5382=IKsin(j4);
IkReal x5383=(cj5*r00);
IkReal x5384=(r01*sj5);
IkReal x5385=(cj5*r10);
IkReal x5386=(cj5*r20);
IkReal x5387=((1.0)*x5381);
IkReal x5388=((1.0)*x5382);
IkReal x5389=(sj5*x5382);
IkReal x5390=(sj5*x5381);
evalcond[0]=(((x5381*x5384))+((r02*x5382))+(((-1.0)*x5383*x5387)));
evalcond[1]=((((-1.0)*x5385*x5387))+((r11*x5390))+((r12*x5382)));
evalcond[2]=((((-1.0)*x5386*x5388))+(((-1.0)*r22*x5387))+((r21*x5389)));
evalcond[3]=((-1.0)+(((-1.0)*x5386*x5387))+((r21*x5390))+((r22*x5382)));
evalcond[4]=(cj0+(((-1.0)*x5385*x5388))+((r11*x5389))+(((-1.0)*r12*x5387)));
evalcond[5]=((((-1.0)*sj0))+((x5382*x5384))+(((-1.0)*r02*x5387))+(((-1.0)*x5383*x5388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5391=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5391.valid){
continue;
}
CheckValue<IkReal> x5392 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5391.value)))+(x5392.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5393=IKcos(j4);
IkReal x5394=IKsin(j4);
IkReal x5395=(cj5*r00);
IkReal x5396=(r01*sj5);
IkReal x5397=(cj5*r10);
IkReal x5398=(cj5*r20);
IkReal x5399=((1.0)*x5393);
IkReal x5400=((1.0)*x5394);
IkReal x5401=(sj5*x5394);
IkReal x5402=(sj5*x5393);
evalcond[0]=(((r02*x5394))+((x5393*x5396))+(((-1.0)*x5395*x5399)));
evalcond[1]=((((-1.0)*x5397*x5399))+((r12*x5394))+((r11*x5402)));
evalcond[2]=(((r21*x5401))+(((-1.0)*x5398*x5400))+(((-1.0)*r22*x5399)));
evalcond[3]=((-1.0)+((r21*x5402))+((r22*x5394))+(((-1.0)*x5398*x5399)));
evalcond[4]=(cj0+(((-1.0)*x5397*x5400))+(((-1.0)*r12*x5399))+((r11*x5401)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5399))+(((-1.0)*x5395*x5400))+((x5394*x5396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5403=IKsin(j0);
IkReal x5404=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x5403))+(((0.392)*x5404)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x5404))+(((0.392)*x5403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5405=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5405;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5405);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5406=((1.0)*cj5);
IkReal x5407=((((-1.0)*r01*x5406))+(((-1.0)*r00*sj5)));
j4eval[0]=x5407;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5406))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5407);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5408=((1.0)*cj5);
IkReal x5409=((((-1.0)*r01*x5408))+(((-1.0)*r00*sj5)));
j4eval[0]=x5409;
j4eval[1]=IKsign(x5409);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5408)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5410=((1.0)*cj5);
CheckValue<IkReal> x5411 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5410)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5411.valid){
continue;
}
CheckValue<IkReal> x5412=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5410)))),-1);
if(!x5412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5411.value)+(((1.5707963267949)*(x5412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5413=IKcos(j4);
IkReal x5414=IKsin(j4);
IkReal x5415=((1.0)*sj0);
IkReal x5416=(cj5*r00);
IkReal x5417=(cj5*r10);
IkReal x5418=(cj5*r20);
IkReal x5419=((1.0)*x5413);
IkReal x5420=((1.0)*x5414);
IkReal x5421=(sj5*x5413);
IkReal x5422=(sj5*x5414);
evalcond[0]=(((r22*x5414))+((r21*x5421))+(((-1.0)*x5418*x5419)));
evalcond[1]=(((r21*x5422))+(((-1.0)*r22*x5419))+(((-1.0)*x5418*x5420)));
evalcond[2]=((((-1.0)*x5417*x5420))+cj0+(((-1.0)*r12*x5419))+((r11*x5422)));
evalcond[3]=((((-1.0)*x5416*x5419))+((r01*x5421))+((r02*x5414))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5417*x5419))+(((-1.0)*x5415))+((r12*x5414))+((r11*x5421)));
evalcond[5]=((((-1.0)*r02*x5419))+((r01*x5422))+(((-1.0)*x5416*x5420))+(((-1.0)*x5415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5423=((1.0)*cj5);
CheckValue<IkReal> x5424 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5423)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5424.valid){
continue;
}
CheckValue<IkReal> x5425=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5423)))),-1);
if(!x5425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5424.value)+(((1.5707963267949)*(x5425.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5426=IKcos(j4);
IkReal x5427=IKsin(j4);
IkReal x5428=((1.0)*sj0);
IkReal x5429=(cj5*r00);
IkReal x5430=(cj5*r10);
IkReal x5431=(cj5*r20);
IkReal x5432=((1.0)*x5426);
IkReal x5433=((1.0)*x5427);
IkReal x5434=(sj5*x5426);
IkReal x5435=(sj5*x5427);
evalcond[0]=((((-1.0)*x5431*x5432))+((r22*x5427))+((r21*x5434)));
evalcond[1]=((((-1.0)*x5431*x5433))+(((-1.0)*r22*x5432))+((r21*x5435)));
evalcond[2]=(cj0+(((-1.0)*r12*x5432))+(((-1.0)*x5430*x5433))+((r11*x5435)));
evalcond[3]=(((r02*x5427))+(((-1.0)*x5429*x5432))+((r01*x5434))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5428))+((r12*x5427))+(((-1.0)*x5430*x5432))+((r11*x5434)));
evalcond[5]=((((-1.0)*x5428))+(((-1.0)*r02*x5432))+(((-1.0)*x5429*x5433))+((r01*x5435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5436 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5436.valid){
continue;
}
CheckValue<IkReal> x5437=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5436.value)+(((1.5707963267949)*(x5437.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5438=IKcos(j4);
IkReal x5439=IKsin(j4);
IkReal x5440=((1.0)*sj0);
IkReal x5441=(cj5*r00);
IkReal x5442=(cj5*r10);
IkReal x5443=(cj5*r20);
IkReal x5444=((1.0)*x5438);
IkReal x5445=((1.0)*x5439);
IkReal x5446=(sj5*x5438);
IkReal x5447=(sj5*x5439);
evalcond[0]=(((r22*x5439))+(((-1.0)*x5443*x5444))+((r21*x5446)));
evalcond[1]=((((-1.0)*x5443*x5445))+(((-1.0)*r22*x5444))+((r21*x5447)));
evalcond[2]=(cj0+(((-1.0)*r12*x5444))+(((-1.0)*x5442*x5445))+((r11*x5447)));
evalcond[3]=(((r02*x5439))+((r01*x5446))+(((-1.0)*x5441*x5444))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5440))+(((-1.0)*x5442*x5444))+((r11*x5446))+((r12*x5439)));
evalcond[5]=((((-1.0)*x5440))+((r01*x5447))+(((-1.0)*x5441*x5445))+(((-1.0)*r02*x5444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5448=IKsin(j0);
IkReal x5449=IKcos(j0);
IkReal x5450=((0.1)*sj5);
IkReal x5451=(cj5*r11);
IkReal x5452=(cj5*r01);
evalcond[0]=((((-1.0)*x5449))+((r00*sj5))+x5452);
evalcond[1]=((((-1.0)*x5448))+x5451+((r10*sj5)));
evalcond[2]=((((-0.1)*x5452))+(((-0.134)*x5448))+(((-1.0)*px))+(((-1.0)*r00*x5450)));
evalcond[3]=((((0.134)*x5449))+(((-0.1)*x5451))+(((-1.0)*py))+(((-1.0)*r10*x5450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5453=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5453;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5453);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5454=((1.0)*cj5);
IkReal x5455=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5454)));
j4eval[0]=x5455;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5454))))));
j4eval[2]=IKsign(x5455);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5456=cj5*cj5;
IkReal x5457=(r01*r11);
IkReal x5458=((1.0)*r00);
IkReal x5459=(r01*sj5);
IkReal x5460=(((x5456*x5457))+(((-1.0)*r02*r12))+((cj5*r10*x5459))+(((-1.0)*r10*x5456*x5458))+(((-1.0)*x5457))+((cj5*r00*r11*sj5)));
j4eval[0]=x5460;
j4eval[1]=IKsign(x5460);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5458))+((cj0*x5459))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5461=cj5*cj5;
IkReal x5462=(r01*r11);
IkReal x5463=(cj5*r00);
IkReal x5464=(r01*sj5);
CheckValue<IkReal> x5465=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((x5461*x5462))+(((-1.0)*r00*r10*x5461))+((r11*sj5*x5463))+(((-1.0)*x5462))+((cj5*r10*x5464)))),-1);
if(!x5465.valid){
continue;
}
CheckValue<IkReal> x5466 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5463))+((cj0*x5464)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5465.value)))+(x5466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5467=IKcos(j4);
IkReal x5468=IKsin(j4);
IkReal x5469=(cj5*r00);
IkReal x5470=(r01*sj5);
IkReal x5471=(cj5*r10);
IkReal x5472=(cj5*r20);
IkReal x5473=((1.0)*x5467);
IkReal x5474=((1.0)*x5468);
IkReal x5475=(sj5*x5468);
IkReal x5476=(sj5*x5467);
evalcond[0]=(((r02*x5468))+((x5467*x5470))+(((-1.0)*x5469*x5473)));
evalcond[1]=(((r12*x5468))+(((-1.0)*x5471*x5473))+((r11*x5476)));
evalcond[2]=((((-1.0)*x5472*x5474))+(((-1.0)*r22*x5473))+((r21*x5475)));
evalcond[3]=((1.0)+((r22*x5468))+(((-1.0)*x5472*x5473))+((r21*x5476)));
evalcond[4]=(cj0+(((-1.0)*r12*x5473))+(((-1.0)*x5471*x5474))+((r11*x5475)));
evalcond[5]=((((-1.0)*sj0))+((x5468*x5470))+(((-1.0)*r02*x5473))+(((-1.0)*x5469*x5474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5477=((1.0)*cj5);
CheckValue<IkReal> x5478 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5477))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5478.valid){
continue;
}
CheckValue<IkReal> x5479=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5477)))),-1);
if(!x5479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5478.value)+(((1.5707963267949)*(x5479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5480=IKcos(j4);
IkReal x5481=IKsin(j4);
IkReal x5482=(cj5*r00);
IkReal x5483=(r01*sj5);
IkReal x5484=(cj5*r10);
IkReal x5485=(cj5*r20);
IkReal x5486=((1.0)*x5480);
IkReal x5487=((1.0)*x5481);
IkReal x5488=(sj5*x5481);
IkReal x5489=(sj5*x5480);
evalcond[0]=(((x5480*x5483))+((r02*x5481))+(((-1.0)*x5482*x5486)));
evalcond[1]=(((r11*x5489))+(((-1.0)*x5484*x5486))+((r12*x5481)));
evalcond[2]=((((-1.0)*r22*x5486))+(((-1.0)*x5485*x5487))+((r21*x5488)));
evalcond[3]=((1.0)+(((-1.0)*x5485*x5486))+((r21*x5489))+((r22*x5481)));
evalcond[4]=((((-1.0)*r12*x5486))+cj0+((r11*x5488))+(((-1.0)*x5484*x5487)));
evalcond[5]=(((x5481*x5483))+(((-1.0)*sj0))+(((-1.0)*r02*x5486))+(((-1.0)*x5482*x5487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5490 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5490.valid){
continue;
}
CheckValue<IkReal> x5491=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5490.value)+(((1.5707963267949)*(x5491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5492=IKcos(j4);
IkReal x5493=IKsin(j4);
IkReal x5494=(cj5*r00);
IkReal x5495=(r01*sj5);
IkReal x5496=(cj5*r10);
IkReal x5497=(cj5*r20);
IkReal x5498=((1.0)*x5492);
IkReal x5499=((1.0)*x5493);
IkReal x5500=(sj5*x5493);
IkReal x5501=(sj5*x5492);
evalcond[0]=((((-1.0)*x5494*x5498))+((x5492*x5495))+((r02*x5493)));
evalcond[1]=(((r12*x5493))+((r11*x5501))+(((-1.0)*x5496*x5498)));
evalcond[2]=((((-1.0)*r22*x5498))+((r21*x5500))+(((-1.0)*x5497*x5499)));
evalcond[3]=((1.0)+((r21*x5501))+(((-1.0)*x5497*x5498))+((r22*x5493)));
evalcond[4]=(cj0+(((-1.0)*r12*x5498))+((r11*x5500))+(((-1.0)*x5496*x5499)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5494*x5499))+((x5493*x5495))+(((-1.0)*r02*x5498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5502=IKcos(j0);
IkReal x5503=IKsin(j0);
evalcond[0]=((((-0.392)*x5502))+(((-1.0)*px))+(((-0.134)*x5503)));
evalcond[1]=((((-0.392)*x5503))+(((-1.0)*py))+(((0.134)*x5502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5504=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5504;
j4eval[1]=IKsign(x5504);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5505=((1.0)*cj5);
IkReal x5506=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5505)));
j4eval[0]=x5506;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5505)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5506);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5507=cj5*cj5;
IkReal x5508=((1.0)*r20);
IkReal x5509=(r01*r21);
IkReal x5510=(r21*sj5);
IkReal x5511=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5509))+(((-1.0)*r00*x5507*x5508))+((x5507*x5509))+((cj5*r00*x5510)));
j4eval[0]=x5511;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5508))+((cj0*x5510)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5511);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5512=cj5*cj5;
IkReal x5513=((1.0)*r20);
IkReal x5514=(r01*r21);
IkReal x5515=(r21*sj5);
CheckValue<IkReal> x5516=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x5512*x5514))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5512*x5513))+(((-1.0)*x5514))+((cj5*r00*x5515)))),-1);
if(!x5516.valid){
continue;
}
CheckValue<IkReal> x5517 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5513))+((cj0*x5515)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5516.value)))+(x5517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5518=IKcos(j4);
IkReal x5519=IKsin(j4);
IkReal x5520=(cj5*r00);
IkReal x5521=(cj5*r10);
IkReal x5522=(cj5*r20);
IkReal x5523=((1.0)*x5518);
IkReal x5524=((1.0)*x5519);
IkReal x5525=(sj5*x5518);
IkReal x5526=(sj5*x5519);
evalcond[0]=(((r21*x5525))+((r22*x5519))+(((-1.0)*x5522*x5523)));
evalcond[1]=((((-1.0)*r22*x5523))+((r21*x5526))+(((-1.0)*x5522*x5524)));
evalcond[2]=(cj0+((r02*x5519))+((r01*x5525))+(((-1.0)*x5520*x5523)));
evalcond[3]=(sj0+((r12*x5519))+((r11*x5525))+(((-1.0)*x5521*x5523)));
evalcond[4]=(cj0+((r11*x5526))+(((-1.0)*x5521*x5524))+(((-1.0)*r12*x5523)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5523))+((r01*x5526))+(((-1.0)*x5520*x5524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5527=((1.0)*cj5);
CheckValue<IkReal> x5528=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5527)))),-1);
if(!x5528.valid){
continue;
}
CheckValue<IkReal> x5529 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5527)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5528.value)))+(x5529.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5530=IKcos(j4);
IkReal x5531=IKsin(j4);
IkReal x5532=(cj5*r00);
IkReal x5533=(cj5*r10);
IkReal x5534=(cj5*r20);
IkReal x5535=((1.0)*x5530);
IkReal x5536=((1.0)*x5531);
IkReal x5537=(sj5*x5530);
IkReal x5538=(sj5*x5531);
evalcond[0]=((((-1.0)*x5534*x5535))+((r22*x5531))+((r21*x5537)));
evalcond[1]=((((-1.0)*r22*x5535))+(((-1.0)*x5534*x5536))+((r21*x5538)));
evalcond[2]=(cj0+((r01*x5537))+(((-1.0)*x5532*x5535))+((r02*x5531)));
evalcond[3]=(sj0+((r11*x5537))+((r12*x5531))+(((-1.0)*x5533*x5535)));
evalcond[4]=(cj0+((r11*x5538))+(((-1.0)*r12*x5535))+(((-1.0)*x5533*x5536)));
evalcond[5]=((((-1.0)*r02*x5535))+(((-1.0)*sj0))+((r01*x5538))+(((-1.0)*x5532*x5536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5539 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5539.valid){
continue;
}
CheckValue<IkReal> x5540=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5539.value)+(((1.5707963267949)*(x5540.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5541=IKcos(j4);
IkReal x5542=IKsin(j4);
IkReal x5543=(cj5*r00);
IkReal x5544=(cj5*r10);
IkReal x5545=(cj5*r20);
IkReal x5546=((1.0)*x5541);
IkReal x5547=((1.0)*x5542);
IkReal x5548=(sj5*x5541);
IkReal x5549=(sj5*x5542);
evalcond[0]=((((-1.0)*x5545*x5546))+((r22*x5542))+((r21*x5548)));
evalcond[1]=((((-1.0)*x5545*x5547))+(((-1.0)*r22*x5546))+((r21*x5549)));
evalcond[2]=((((-1.0)*x5543*x5546))+cj0+((r02*x5542))+((r01*x5548)));
evalcond[3]=(sj0+((r12*x5542))+((r11*x5548))+(((-1.0)*x5544*x5546)));
evalcond[4]=(cj0+((r11*x5549))+(((-1.0)*x5544*x5547))+(((-1.0)*r12*x5546)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5543*x5547))+(((-1.0)*r02*x5546))+((r01*x5549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5550=cj1*cj1;
IkReal x5551=((500.0)*py);
IkReal x5552=(cj1*sj2);
IkReal x5553=(cj2*sj2);
IkReal x5554=(cj5*r01);
IkReal x5555=(cj2*sj1);
IkReal x5556=(cj1*sj1);
IkReal x5557=(r00*sj5);
IkReal x5558=((50.0)*r10*sj5);
IkReal x5559=((50.0)*cj5*r11);
CheckValue<IkReal> x5560=IKPowWithIntegerCheck(((((-392.0)*cj1*cj2*x5555))+(((196.0)*x5556))+(((196.0)*x5553))+(((-212.5)*sj2*x5550))+(((-212.5)*cj1*x5555))+(((-392.0)*x5550*x5553))),-1);
if(!x5560.valid){
continue;
}
CheckValue<IkReal> x5561=IKPowWithIntegerCheck(((((-1.0)*x5555))+(((-1.0)*x5552))),-1);
if(!x5561.valid){
continue;
}
if( IKabs(((x5560.value)*(((((-1.0)*x5555*x5559))+(((-1.0)*x5555*x5558))+(((-1.0)*x5551*x5552))+(((-1.0)*x5551*x5555))+(((-1.0)*x5552*x5558))+(((-1.0)*x5552*x5559))+(((67.0)*x5557))+(((67.0)*x5554)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5561.value)*(((((-1.0)*x5557))+(((-1.0)*x5554)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5560.value)*(((((-1.0)*x5555*x5559))+(((-1.0)*x5555*x5558))+(((-1.0)*x5551*x5552))+(((-1.0)*x5551*x5555))+(((-1.0)*x5552*x5558))+(((-1.0)*x5552*x5559))+(((67.0)*x5557))+(((67.0)*x5554))))))+IKsqr(((x5561.value)*(((((-1.0)*x5557))+(((-1.0)*x5554))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5560.value)*(((((-1.0)*x5555*x5559))+(((-1.0)*x5555*x5558))+(((-1.0)*x5551*x5552))+(((-1.0)*x5551*x5555))+(((-1.0)*x5552*x5558))+(((-1.0)*x5552*x5559))+(((67.0)*x5557))+(((67.0)*x5554))))), ((x5561.value)*(((((-1.0)*x5557))+(((-1.0)*x5554))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5562=IKcos(j0);
IkReal x5563=IKsin(j0);
IkReal x5564=((0.1)*sj5);
IkReal x5565=(cj5*r11);
IkReal x5566=(cj5*r01);
IkReal x5567=((0.392)*cj2);
IkReal x5568=((1.0)*cj2);
IkReal x5569=((0.392)*sj2);
IkReal x5570=((1.0)*cj1*sj2);
IkReal x5571=(cj1*x5562);
IkReal x5572=(cj1*x5563);
IkReal x5573=(sj1*x5562);
IkReal x5574=(sj1*x5563);
evalcond[0]=(((r00*sj5))+x5566+(((-1.0)*x5568*x5573))+(((-1.0)*x5562*x5570)));
evalcond[1]=(x5565+((r10*sj5))+(((-1.0)*x5563*x5570))+(((-1.0)*x5568*x5574)));
evalcond[2]=((((0.425)*x5571))+(((-0.134)*x5563))+(((-1.0)*r00*x5564))+(((-1.0)*x5569*x5573))+(((-1.0)*px))+(((-0.1)*x5566))+((x5567*x5571)));
evalcond[3]=((((0.425)*x5572))+(((-1.0)*r10*x5564))+(((0.134)*x5562))+(((-1.0)*x5569*x5574))+(((-1.0)*py))+(((-0.1)*x5565))+((x5567*x5572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5575=((1.0)*cj5);
IkReal x5576=((((-1.0)*r01*x5575))+(((-1.0)*r00*sj5)));
j4eval[0]=x5576;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5575))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5576);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5577=((1.0)*cj5);
IkReal x5578=((((-1.0)*r11*x5577))+(((-1.0)*r10*sj5)));
j4eval[0]=x5578;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5577))))));
j4eval[2]=IKsign(x5578);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5579=((1.0)*sj0);
IkReal x5580=((1.0)*cj0);
IkReal x5581=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5581;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x5580))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5579)))))+(IKabs(((((-1.0)*r12*x5579))+(((-1.0)*r02*x5580))))));
j4eval[2]=IKsign(x5581);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5582=((-1.0)*r20);
IkReal x5584 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5584)==0){
continue;
}
IkReal x5583=pow(x5584,-0.5);
CheckValue<IkReal> x5585 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5582),IKFAST_ATAN2_MAGTHRESH);
if(!x5585.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5585.value));
IkReal gconst115=(r21*x5583);
IkReal gconst116=(x5582*x5583);
CheckValue<IkReal> x5586 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5586.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5586.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5587=((-1.0)*r20);
IkReal x5588=x5583;
CheckValue<IkReal> x5590 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5587),IKFAST_ATAN2_MAGTHRESH);
if(!x5590.valid){
continue;
}
IkReal x5589=((-1.0)*(x5590.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5589;
IkReal gconst114=x5589;
IkReal gconst115=(r21*x5588);
IkReal gconst116=(x5587*x5588);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5591=((-1.0)*r20);
IkReal x5592=x5583;
CheckValue<IkReal> x5594 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5591),IKFAST_ATAN2_MAGTHRESH);
if(!x5594.valid){
continue;
}
IkReal x5593=((-1.0)*(x5594.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5593;
IkReal gconst114=x5593;
IkReal gconst115=(r21*x5592);
IkReal gconst116=(x5591*x5592);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5595=((-1.0)*r20);
IkReal x5596=x5583;
CheckValue<IkReal> x5598 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5595),IKFAST_ATAN2_MAGTHRESH);
if(!x5598.valid){
continue;
}
IkReal x5597=((-1.0)*(x5598.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5597;
IkReal gconst114=x5597;
IkReal gconst115=(r21*x5596);
IkReal gconst116=(x5595*x5596);
IkReal x5599=((1.0)*(r22*r22));
CheckValue<IkReal> x5603=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5599))),-1);
if(!x5603.valid){
continue;
}
IkReal x5600=x5603.value;
IkReal x5601=((1.0)*x5600);
IkReal x5602=((((-1.0)*x5601*(r20*r20*r20*r20)))+(((-2.0)*x5600*(r20*r20)*(r21*r21)))+(((-1.0)*x5601*(r21*r21*r21*r21)))+(((-1.0)*x5599)));
j4eval[0]=x5602;
j4eval[1]=IKsign(x5602);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5604=(cj2*sj1);
IkReal x5605=(gconst115*r21);
IkReal x5606=(cj1*sj2);
IkReal x5607=((1.0)*gconst116*r20);
CheckValue<IkReal> x5608 = IKatan2WithCheck(IkReal((((r22*x5604))+((r22*x5606)))),IkReal((((x5604*x5605))+((x5605*x5606))+(((-1.0)*x5606*x5607))+(((-1.0)*x5604*x5607)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5608.valid){
continue;
}
CheckValue<IkReal> x5609=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5605))+(((-1.0)*gconst116*r20*x5607))+(((-1.0)*(x5605*x5605)))+(((-1.0)*(r22*r22))))),-1);
if(!x5609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5608.value)+(((1.5707963267949)*(x5609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5610=IKsin(j4);
IkReal x5611=IKcos(j4);
IkReal x5612=(sj1*sj2);
IkReal x5613=((1.0)*x5611);
IkReal x5614=((1.0)*cj1*cj2);
IkReal x5615=(gconst115*x5610);
IkReal x5616=(gconst115*x5611);
IkReal x5617=((1.0)*gconst116*x5610);
evalcond[0]=((((-1.0)*r22*x5613))+((r21*x5615))+(((-1.0)*r20*x5617)));
evalcond[1]=(cj0+(((-1.0)*r10*x5617))+(((-1.0)*r12*x5613))+((r11*x5615)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5617))+((r01*x5615))+(((-1.0)*r02*x5613)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x5613))+((cj1*sj2))+((r21*x5616))+((r22*x5610)));
evalcond[4]=(((cj0*x5612))+(((-1.0)*cj0*x5614))+((r02*x5610))+((r01*x5616))+(((-1.0)*gconst116*r00*x5613)));
evalcond[5]=(((sj0*x5612))+(((-1.0)*gconst116*r10*x5613))+((r12*x5610))+(((-1.0)*sj0*x5614))+((r11*x5616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5618=((1.0)*gconst116);
CheckValue<IkReal> x5619 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5618)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5619.valid){
continue;
}
CheckValue<IkReal> x5620=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5618)))),-1);
if(!x5620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5619.value)+(((1.5707963267949)*(x5620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5621=IKsin(j4);
IkReal x5622=IKcos(j4);
IkReal x5623=(sj1*sj2);
IkReal x5624=((1.0)*x5622);
IkReal x5625=((1.0)*cj1*cj2);
IkReal x5626=(gconst115*x5621);
IkReal x5627=(gconst115*x5622);
IkReal x5628=((1.0)*gconst116*x5621);
evalcond[0]=((((-1.0)*r22*x5624))+((r21*x5626))+(((-1.0)*r20*x5628)));
evalcond[1]=(cj0+(((-1.0)*r10*x5628))+(((-1.0)*r12*x5624))+((r11*x5626)));
evalcond[2]=((((-1.0)*r00*x5628))+(((-1.0)*sj0))+((r01*x5626))+(((-1.0)*r02*x5624)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5624))+((r21*x5627))+((r22*x5621)));
evalcond[4]=(((cj0*x5623))+(((-1.0)*cj0*x5625))+((r02*x5621))+((r01*x5627))+(((-1.0)*gconst116*r00*x5624)));
evalcond[5]=(((sj0*x5623))+(((-1.0)*gconst116*r10*x5624))+((r12*x5621))+((r11*x5627))+(((-1.0)*sj0*x5625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5629=((1.0)*gconst116);
CheckValue<IkReal> x5630=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5629))+(((-1.0)*gconst115*r00)))),-1);
if(!x5630.valid){
continue;
}
CheckValue<IkReal> x5631 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5629))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5630.value)))+(x5631.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5632=IKsin(j4);
IkReal x5633=IKcos(j4);
IkReal x5634=(sj1*sj2);
IkReal x5635=((1.0)*x5633);
IkReal x5636=((1.0)*cj1*cj2);
IkReal x5637=(gconst115*x5632);
IkReal x5638=(gconst115*x5633);
IkReal x5639=((1.0)*gconst116*x5632);
evalcond[0]=((((-1.0)*r20*x5639))+(((-1.0)*r22*x5635))+((r21*x5637)));
evalcond[1]=((((-1.0)*r12*x5635))+((r11*x5637))+cj0+(((-1.0)*r10*x5639)));
evalcond[2]=(((r01*x5637))+(((-1.0)*sj0))+(((-1.0)*r02*x5635))+(((-1.0)*r00*x5639)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5632))+((r21*x5638))+(((-1.0)*gconst116*r20*x5635)));
evalcond[4]=(((r01*x5638))+(((-1.0)*gconst116*r00*x5635))+((cj0*x5634))+((r02*x5632))+(((-1.0)*cj0*x5636)));
evalcond[5]=(((r12*x5632))+(((-1.0)*sj0*x5636))+((r11*x5638))+((sj0*x5634))+(((-1.0)*gconst116*r10*x5635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5640=((-1.0)*r21);
IkReal x5642 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5642)==0){
continue;
}
IkReal x5641=pow(x5642,-0.5);
CheckValue<IkReal> x5643 = IKatan2WithCheck(IkReal(x5640),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5643.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5643.value))));
IkReal gconst118=(x5640*x5641);
IkReal gconst119=((1.0)*r20*x5641);
CheckValue<IkReal> x5644 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5644.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5644.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5645=((-1.0)*r21);
CheckValue<IkReal> x5648 = IKatan2WithCheck(IkReal(x5645),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5648.valid){
continue;
}
IkReal x5646=((1.0)*(x5648.value));
IkReal x5647=x5641;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5646)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5646)));
IkReal gconst118=(x5645*x5647);
IkReal gconst119=((1.0)*r20*x5647);
IkReal x5649=r22*r22;
IkReal x5650=((1.0)*x5649);
CheckValue<IkReal> x5654=IKPowWithIntegerCheck(((-1.0)+x5649),-1);
if(!x5654.valid){
continue;
}
IkReal x5651=x5654.value;
if((((1.0)+(((-1.0)*x5650)))) < -0.00001)
continue;
IkReal x5652=IKsqrt(((1.0)+(((-1.0)*x5650))));
IkReal x5653=(cj0*x5651*x5652);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x5653+(((-1.0)*x5650*x5653))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5655=((-1.0)*r21);
CheckValue<IkReal> x5658 = IKatan2WithCheck(IkReal(x5655),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5658.valid){
continue;
}
IkReal x5656=((1.0)*(x5658.value));
IkReal x5657=x5641;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5656)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5656)));
IkReal gconst118=(x5655*x5657);
IkReal gconst119=((1.0)*r20*x5657);
IkReal x5659=r22*r22;
IkReal x5660=((1.0)*x5659);
CheckValue<IkReal> x5664=IKPowWithIntegerCheck(((-1.0)+x5659),-1);
if(!x5664.valid){
continue;
}
IkReal x5661=x5664.value;
if((((1.0)+(((-1.0)*x5660)))) < -0.00001)
continue;
IkReal x5662=IKsqrt(((1.0)+(((-1.0)*x5660))));
IkReal x5663=(sj0*x5661*x5662);
j4eval[0]=((IKabs((x5663+(((-1.0)*x5660*x5663)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5665=((-1.0)*r21);
CheckValue<IkReal> x5668 = IKatan2WithCheck(IkReal(x5665),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5668.valid){
continue;
}
IkReal x5666=((1.0)*(x5668.value));
IkReal x5667=x5641;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5666)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5666)));
IkReal gconst118=(x5665*x5667);
IkReal gconst119=((1.0)*r20*x5667);
IkReal x5669=r22*r22;
IkReal x5670=(r12*sj0);
IkReal x5671=(cj0*r02);
CheckValue<IkReal> x5675=IKPowWithIntegerCheck(((-1.0)+x5669),-1);
if(!x5675.valid){
continue;
}
IkReal x5672=x5675.value;
if((((1.0)+(((-1.0)*x5669)))) < -0.00001)
continue;
IkReal x5673=IKsqrt(((1.0)+(((-1.0)*x5669))));
IkReal x5674=(r22*x5672*x5673);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x5670*x5674))+((x5671*x5674)))))+(IKabs(((((-1.0)*x5671))+(((-1.0)*x5670))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5676=((1.0)*sj0);
IkReal x5677=((1.0)*gconst118);
CheckValue<IkReal> x5678 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5676))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+((cj0*gconst119*r00))+(((-1.0)*gconst118*r11*x5676))+(((-1.0)*cj0*r01*x5677)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5678.valid){
continue;
}
CheckValue<IkReal> x5679=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5677)))),-1);
if(!x5679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5678.value)+(((1.5707963267949)*(x5679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5680=IKsin(j4);
IkReal x5681=IKcos(j4);
IkReal x5682=(gconst118*r01);
IkReal x5683=(sj1*sj2);
IkReal x5684=(gconst119*r20);
IkReal x5685=(gconst119*r10);
IkReal x5686=(gconst119*r00);
IkReal x5687=(gconst118*r21);
IkReal x5688=(gconst118*r11);
IkReal x5689=((1.0)*x5681);
IkReal x5690=((1.0)*cj1*cj2);
IkReal x5691=((1.0)*x5680);
evalcond[0]=(((x5680*x5687))+(((-1.0)*r22*x5689))+(((-1.0)*x5684*x5691)));
evalcond[1]=(cj0+((x5680*x5688))+(((-1.0)*x5685*x5691))+(((-1.0)*r12*x5689)));
evalcond[2]=((((-1.0)*r02*x5689))+(((-1.0)*sj0))+(((-1.0)*x5686*x5691))+((x5680*x5682)));
evalcond[3]=(((cj2*sj1))+((x5681*x5687))+((r22*x5680))+((cj1*sj2))+(((-1.0)*x5684*x5689)));
evalcond[4]=((((-1.0)*x5686*x5689))+((x5681*x5682))+(((-1.0)*cj0*x5690))+((r02*x5680))+((cj0*x5683)));
evalcond[5]=(((x5681*x5688))+(((-1.0)*x5685*x5689))+(((-1.0)*sj0*x5690))+((sj0*x5683))+((r12*x5680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5692=((1.0)*gconst119);
CheckValue<IkReal> x5693=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5692)))),-1);
if(!x5693.valid){
continue;
}
CheckValue<IkReal> x5694 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5692))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5693.value)))+(x5694.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5695=IKsin(j4);
IkReal x5696=IKcos(j4);
IkReal x5697=(gconst118*r01);
IkReal x5698=(sj1*sj2);
IkReal x5699=(gconst119*r20);
IkReal x5700=(gconst119*r10);
IkReal x5701=(gconst119*r00);
IkReal x5702=(gconst118*r21);
IkReal x5703=(gconst118*r11);
IkReal x5704=((1.0)*x5696);
IkReal x5705=((1.0)*cj1*cj2);
IkReal x5706=((1.0)*x5695);
evalcond[0]=((((-1.0)*r22*x5704))+((x5695*x5702))+(((-1.0)*x5699*x5706)));
evalcond[1]=((((-1.0)*r12*x5704))+cj0+(((-1.0)*x5700*x5706))+((x5695*x5703)));
evalcond[2]=((((-1.0)*sj0))+((x5695*x5697))+(((-1.0)*x5701*x5706))+(((-1.0)*r02*x5704)));
evalcond[3]=(((cj2*sj1))+((r22*x5695))+((x5696*x5702))+((cj1*sj2))+(((-1.0)*x5699*x5704)));
evalcond[4]=(((x5696*x5697))+(((-1.0)*x5701*x5704))+((r02*x5695))+(((-1.0)*cj0*x5705))+((cj0*x5698)));
evalcond[5]=(((x5696*x5703))+(((-1.0)*x5700*x5704))+((sj0*x5698))+(((-1.0)*sj0*x5705))+((r12*x5695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5707=((1.0)*gconst119);
CheckValue<IkReal> x5708 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5707)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5708.valid){
continue;
}
CheckValue<IkReal> x5709=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5707)))),-1);
if(!x5709.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5708.value)+(((1.5707963267949)*(x5709.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5710=IKsin(j4);
IkReal x5711=IKcos(j4);
IkReal x5712=(gconst118*r01);
IkReal x5713=(sj1*sj2);
IkReal x5714=(gconst119*r20);
IkReal x5715=(gconst119*r10);
IkReal x5716=(gconst119*r00);
IkReal x5717=(gconst118*r21);
IkReal x5718=(gconst118*r11);
IkReal x5719=((1.0)*x5711);
IkReal x5720=((1.0)*cj1*cj2);
IkReal x5721=((1.0)*x5710);
evalcond[0]=((((-1.0)*r22*x5719))+((x5710*x5717))+(((-1.0)*x5714*x5721)));
evalcond[1]=(cj0+((x5710*x5718))+(((-1.0)*x5715*x5721))+(((-1.0)*r12*x5719)));
evalcond[2]=((((-1.0)*sj0))+((x5710*x5712))+(((-1.0)*x5716*x5721))+(((-1.0)*r02*x5719)));
evalcond[3]=(((cj2*sj1))+((r22*x5710))+(((-1.0)*x5714*x5719))+((cj1*sj2))+((x5711*x5717)));
evalcond[4]=(((r02*x5710))+((cj0*x5713))+(((-1.0)*x5716*x5719))+((x5711*x5712))+(((-1.0)*cj0*x5720)));
evalcond[5]=((((-1.0)*x5715*x5719))+((x5711*x5718))+(((-1.0)*sj0*x5720))+((sj0*x5713))+((r12*x5710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5722=((-1.0)*r10);
IkReal x5724 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5724)==0){
continue;
}
IkReal x5723=pow(x5724,-0.5);
CheckValue<IkReal> x5725 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5722),IKFAST_ATAN2_MAGTHRESH);
if(!x5725.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5725.value));
IkReal gconst121=(r11*x5723);
IkReal gconst122=(x5722*x5723);
CheckValue<IkReal> x5726 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5726.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5726.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5727=((-1.0)*r10);
IkReal x5728=x5723;
CheckValue<IkReal> x5730 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5727),IKFAST_ATAN2_MAGTHRESH);
if(!x5730.valid){
continue;
}
IkReal x5729=((-1.0)*(x5730.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5729;
IkReal gconst120=x5729;
IkReal gconst121=(r11*x5728);
IkReal gconst122=(x5727*x5728);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5731=((1.0)*sj0);
IkReal x5732=((1.0)*gconst121);
CheckValue<IkReal> x5733=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5732))+(((-1.0)*gconst122*r21)))),-1);
if(!x5733.valid){
continue;
}
CheckValue<IkReal> x5734 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5731))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x5732))+(((-1.0)*gconst121*r11*x5731))+((cj0*gconst122*r00))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5733.value)))+(x5734.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5735=IKsin(j4);
IkReal x5736=IKcos(j4);
IkReal x5737=(gconst121*r11);
IkReal x5738=(sj1*sj2);
IkReal x5739=(gconst122*r00);
IkReal x5740=(gconst122*r10);
IkReal x5741=(gconst122*r20);
IkReal x5742=((1.0)*x5736);
IkReal x5743=((1.0)*cj1*cj2);
IkReal x5744=((1.0)*x5735);
IkReal x5745=(gconst121*x5735);
IkReal x5746=(gconst121*x5736);
evalcond[0]=((((-1.0)*x5741*x5744))+(((-1.0)*r22*x5742))+((r21*x5745)));
evalcond[1]=(cj0+((x5735*x5737))+(((-1.0)*x5740*x5744))+(((-1.0)*r12*x5742)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5745))+(((-1.0)*r02*x5742))+(((-1.0)*x5739*x5744)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5741*x5742))+((r21*x5746))+((r22*x5735)));
evalcond[4]=(((r01*x5746))+(((-1.0)*cj0*x5743))+((cj0*x5738))+((r02*x5735))+(((-1.0)*x5739*x5742)));
evalcond[5]=(((r12*x5735))+(((-1.0)*x5740*x5742))+((x5736*x5737))+((sj0*x5738))+(((-1.0)*sj0*x5743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5747=((1.0)*gconst122);
CheckValue<IkReal> x5748=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5747))+(((-1.0)*gconst121*r00)))),-1);
if(!x5748.valid){
continue;
}
CheckValue<IkReal> x5749 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5747))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5748.value)))+(x5749.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5750=IKsin(j4);
IkReal x5751=IKcos(j4);
IkReal x5752=(gconst121*r11);
IkReal x5753=(sj1*sj2);
IkReal x5754=(gconst122*r00);
IkReal x5755=(gconst122*r10);
IkReal x5756=(gconst122*r20);
IkReal x5757=((1.0)*x5751);
IkReal x5758=((1.0)*cj1*cj2);
IkReal x5759=((1.0)*x5750);
IkReal x5760=(gconst121*x5750);
IkReal x5761=(gconst121*x5751);
evalcond[0]=((((-1.0)*r22*x5757))+((r21*x5760))+(((-1.0)*x5756*x5759)));
evalcond[1]=(((x5750*x5752))+cj0+(((-1.0)*r12*x5757))+(((-1.0)*x5755*x5759)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5760))+(((-1.0)*r02*x5757))+(((-1.0)*x5754*x5759)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5761))+(((-1.0)*x5756*x5757))+((r22*x5750)));
evalcond[4]=(((r01*x5761))+(((-1.0)*cj0*x5758))+((r02*x5750))+(((-1.0)*x5754*x5757))+((cj0*x5753)));
evalcond[5]=((((-1.0)*sj0*x5758))+((x5751*x5752))+((sj0*x5753))+(((-1.0)*x5755*x5757))+((r12*x5750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5762=((-1.0)*r11);
IkReal x5764 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5764)==0){
continue;
}
IkReal x5763=pow(x5764,-0.5);
CheckValue<IkReal> x5765 = IKatan2WithCheck(IkReal(x5762),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5765.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5765.value))));
IkReal gconst124=(x5762*x5763);
IkReal gconst125=((1.0)*r10*x5763);
CheckValue<IkReal> x5766 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5766.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5766.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5767=((-1.0)*r11);
CheckValue<IkReal> x5770 = IKatan2WithCheck(IkReal(x5767),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5770.valid){
continue;
}
IkReal x5768=((1.0)*(x5770.value));
IkReal x5769=x5763;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5768)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5768)));
IkReal gconst124=(x5767*x5769);
IkReal gconst125=((1.0)*r10*x5769);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5771=((-1.0)*r11);
CheckValue<IkReal> x5774 = IKatan2WithCheck(IkReal(x5771),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5774.valid){
continue;
}
IkReal x5772=((1.0)*(x5774.value));
IkReal x5773=x5763;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5772)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5772)));
IkReal gconst124=(x5771*x5773);
IkReal gconst125=((1.0)*r10*x5773);
IkReal x5775=r12*r12;
IkReal x5776=((1.0)*sj0);
IkReal x5777=(cj0*r02);
IkReal x5778=x5763;
j4eval[0]=((IKabs(((((-1.0)*x5776*x5778))+((r12*x5777*x5778))+((sj0*x5775*x5778)))))+(IKabs(((((-1.0)*r12*x5776))+(((-1.0)*x5777))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5779=((-1.0)*r11);
CheckValue<IkReal> x5782 = IKatan2WithCheck(IkReal(x5779),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5782.valid){
continue;
}
IkReal x5780=((1.0)*(x5782.value));
IkReal x5781=x5763;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5780)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5780)));
IkReal gconst124=(x5779*x5781);
IkReal gconst125=((1.0)*r10*x5781);
IkReal x5783=r12*r12;
IkReal x5784=((1.0)+(((-1.0)*x5783)));
IkReal x5785=(cj2*r22*sj1);
IkReal x5786=(cj1*r22*sj2);
CheckValue<IkReal> x5793=IKPowWithIntegerCheck(x5784,-1);
if(!x5793.valid){
continue;
}
IkReal x5787=x5793.value;
CheckValue<IkReal> x5794=IKPowWithIntegerCheck(((-1.0)+x5783),-1);
if(!x5794.valid){
continue;
}
IkReal x5788=x5794.value;
IkReal x5789=((1.0)*x5787);
if((x5784) < -0.00001)
continue;
IkReal x5790=IKsqrt(x5784);
IkReal x5791=((1.0)*r12*x5788*x5790);
IkReal x5792=((((-1.0)*x5789*(r10*r10)*(r20*r20)))+(((-1.0)*x5789*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x5787)));
j4eval[0]=x5792;
j4eval[1]=IKsign(x5792);
j4eval[2]=((IKabs(((((-1.0)*x5785*x5791))+(((-1.0)*x5786*x5791)))))+(IKabs((x5785+x5786))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5795=(gconst124*r21);
IkReal x5796=(cj1*sj2);
IkReal x5797=(cj2*sj1);
IkReal x5798=(gconst125*r20);
CheckValue<IkReal> x5799=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((2.0)*x5795*x5798))+(((-1.0)*(x5795*x5795)))+(((-1.0)*(x5798*x5798))))),-1);
if(!x5799.valid){
continue;
}
CheckValue<IkReal> x5800 = IKatan2WithCheck(IkReal((((r22*x5797))+((r22*x5796)))),IkReal(((((-1.0)*x5796*x5798))+(((-1.0)*x5797*x5798))+((x5795*x5796))+((x5795*x5797)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5799.value)))+(x5800.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5801=IKsin(j4);
IkReal x5802=IKcos(j4);
IkReal x5803=(sj1*sj2);
IkReal x5804=(gconst125*r20);
IkReal x5805=(gconst124*r01);
IkReal x5806=(gconst125*r00);
IkReal x5807=(gconst125*r10);
IkReal x5808=((1.0)*x5802);
IkReal x5809=((1.0)*cj1*cj2);
IkReal x5810=((1.0)*x5801);
IkReal x5811=(gconst124*x5801);
IkReal x5812=(gconst124*x5802);
evalcond[0]=(((r21*x5811))+(((-1.0)*r22*x5808))+(((-1.0)*x5804*x5810)));
evalcond[1]=(cj0+(((-1.0)*r12*x5808))+((r11*x5811))+(((-1.0)*x5807*x5810)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5806*x5810))+((x5801*x5805))+(((-1.0)*r02*x5808)));
evalcond[3]=(((r21*x5812))+((cj2*sj1))+(((-1.0)*x5804*x5808))+((cj1*sj2))+((r22*x5801)));
evalcond[4]=(((cj0*x5803))+(((-1.0)*cj0*x5809))+(((-1.0)*x5806*x5808))+((r02*x5801))+((x5802*x5805)));
evalcond[5]=(((r11*x5812))+(((-1.0)*x5807*x5808))+((r12*x5801))+((sj0*x5803))+(((-1.0)*sj0*x5809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5813=((1.0)*sj0);
IkReal x5814=((1.0)*cj0);
CheckValue<IkReal> x5815=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5815.valid){
continue;
}
CheckValue<IkReal> x5816 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5813))+(((-1.0)*r02*x5814)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r11*x5813))+(((-1.0)*gconst124*r01*x5814))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5815.value)))+(x5816.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5817=IKsin(j4);
IkReal x5818=IKcos(j4);
IkReal x5819=(sj1*sj2);
IkReal x5820=(gconst125*r20);
IkReal x5821=(gconst124*r01);
IkReal x5822=(gconst125*r00);
IkReal x5823=(gconst125*r10);
IkReal x5824=((1.0)*x5818);
IkReal x5825=((1.0)*cj1*cj2);
IkReal x5826=((1.0)*x5817);
IkReal x5827=(gconst124*x5817);
IkReal x5828=(gconst124*x5818);
evalcond[0]=((((-1.0)*r22*x5824))+((r21*x5827))+(((-1.0)*x5820*x5826)));
evalcond[1]=((((-1.0)*x5823*x5826))+cj0+((r11*x5827))+(((-1.0)*r12*x5824)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5824))+(((-1.0)*x5822*x5826))+((x5817*x5821)));
evalcond[3]=(((r21*x5828))+((cj2*sj1))+((r22*x5817))+((cj1*sj2))+(((-1.0)*x5820*x5824)));
evalcond[4]=(((r02*x5817))+((cj0*x5819))+((x5818*x5821))+(((-1.0)*cj0*x5825))+(((-1.0)*x5822*x5824)));
evalcond[5]=((((-1.0)*x5823*x5824))+((sj0*x5819))+((r11*x5828))+((r12*x5817))+(((-1.0)*sj0*x5825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5829=((1.0)*gconst125);
CheckValue<IkReal> x5830 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst124*r21))+(((-1.0)*cj0*r20*x5829)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5830.valid){
continue;
}
CheckValue<IkReal> x5831=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5829)))),-1);
if(!x5831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5830.value)+(((1.5707963267949)*(x5831.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5832=IKsin(j4);
IkReal x5833=IKcos(j4);
IkReal x5834=(sj1*sj2);
IkReal x5835=(gconst125*r20);
IkReal x5836=(gconst124*r01);
IkReal x5837=(gconst125*r00);
IkReal x5838=(gconst125*r10);
IkReal x5839=((1.0)*x5833);
IkReal x5840=((1.0)*cj1*cj2);
IkReal x5841=((1.0)*x5832);
IkReal x5842=(gconst124*x5832);
IkReal x5843=(gconst124*x5833);
evalcond[0]=((((-1.0)*r22*x5839))+((r21*x5842))+(((-1.0)*x5835*x5841)));
evalcond[1]=(cj0+((r11*x5842))+(((-1.0)*x5838*x5841))+(((-1.0)*r12*x5839)));
evalcond[2]=((((-1.0)*x5837*x5841))+(((-1.0)*r02*x5839))+(((-1.0)*sj0))+((x5832*x5836)));
evalcond[3]=(((cj2*sj1))+((r21*x5843))+((cj1*sj2))+((r22*x5832))+(((-1.0)*x5835*x5839)));
evalcond[4]=(((r02*x5832))+((x5833*x5836))+((cj0*x5834))+(((-1.0)*cj0*x5840))+(((-1.0)*x5837*x5839)));
evalcond[5]=(((r11*x5843))+((r12*x5832))+((sj0*x5834))+(((-1.0)*sj0*x5840))+(((-1.0)*x5838*x5839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5844=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5844;
j4eval[1]=IKsign(x5844);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5845=((1.0)*cj5);
IkReal x5846=((((-1.0)*r01*x5845))+(((-1.0)*r00*sj5)));
j4eval[0]=x5846;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5845)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5846);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5847=cj5*cj5;
IkReal x5848=r11*r11;
IkReal x5849=(cj5*r10);
IkReal x5850=(r11*sj5);
IkReal x5851=((((-1.0)*x5847*(r10*r10)))+(((2.0)*x5849*x5850))+(((-1.0)*x5848))+(((-1.0)*(r12*r12)))+((x5847*x5848)));
j4eval[0]=x5851;
j4eval[1]=IKsign(x5851);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5849))+x5850))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5852=cj5*cj5;
IkReal x5853=r11*r11;
IkReal x5854=(cj5*r10);
IkReal x5855=(r11*sj5);
CheckValue<IkReal> x5856=IKPowWithIntegerCheck(IKsign(((((2.0)*x5854*x5855))+((x5852*x5853))+(((-1.0)*x5852*(r10*r10)))+(((-1.0)*x5853))+(((-1.0)*(r12*r12))))),-1);
if(!x5856.valid){
continue;
}
CheckValue<IkReal> x5857 = IKatan2WithCheck(IkReal(((((-1.0)*x5854))+x5855)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5856.value)))+(x5857.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5858=IKcos(j4);
IkReal x5859=IKsin(j4);
IkReal x5860=(cj5*r00);
IkReal x5861=(cj5*r10);
IkReal x5862=(r21*sj5);
IkReal x5863=(cj5*r20);
IkReal x5864=((1.0)*x5858);
IkReal x5865=((1.0)*x5859);
IkReal x5866=(sj5*x5859);
IkReal x5867=(sj5*x5858);
evalcond[0]=((((-1.0)*x5861*x5864))+((r12*x5859))+((r11*x5867)));
evalcond[1]=((((-1.0)*r22*x5864))+(((-1.0)*x5863*x5865))+((x5859*x5862)));
evalcond[2]=((((-1.0)*r02*x5864))+(((-1.0)*x5860*x5865))+((r01*x5866)));
evalcond[3]=((1.0)+(((-1.0)*x5861*x5865))+((r11*x5866))+(((-1.0)*r12*x5864)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5863*x5864))+((r22*x5859))+((x5858*x5862)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5860*x5864))+((r02*x5859))+((r01*x5867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5868=((1.0)*cj5);
CheckValue<IkReal> x5869 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5869.valid){
continue;
}
CheckValue<IkReal> x5870=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5868)))),-1);
if(!x5870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5869.value)+(((1.5707963267949)*(x5870.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5871=IKcos(j4);
IkReal x5872=IKsin(j4);
IkReal x5873=(cj5*r00);
IkReal x5874=(cj5*r10);
IkReal x5875=(r21*sj5);
IkReal x5876=(cj5*r20);
IkReal x5877=((1.0)*x5871);
IkReal x5878=((1.0)*x5872);
IkReal x5879=(sj5*x5872);
IkReal x5880=(sj5*x5871);
evalcond[0]=(((r11*x5880))+(((-1.0)*x5874*x5877))+((r12*x5872)));
evalcond[1]=((((-1.0)*r22*x5877))+((x5872*x5875))+(((-1.0)*x5876*x5878)));
evalcond[2]=((((-1.0)*r02*x5877))+(((-1.0)*x5873*x5878))+((r01*x5879)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5877))+(((-1.0)*x5874*x5878))+((r11*x5879)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5872))+((x5871*x5875))+(((-1.0)*x5876*x5877)));
evalcond[5]=(((r01*x5880))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5873*x5877))+((r02*x5872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5881=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5881.valid){
continue;
}
CheckValue<IkReal> x5882 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5881.value)))+(x5882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5883=IKcos(j4);
IkReal x5884=IKsin(j4);
IkReal x5885=(cj5*r00);
IkReal x5886=(cj5*r10);
IkReal x5887=(r21*sj5);
IkReal x5888=(cj5*r20);
IkReal x5889=((1.0)*x5883);
IkReal x5890=((1.0)*x5884);
IkReal x5891=(sj5*x5884);
IkReal x5892=(sj5*x5883);
evalcond[0]=(((r12*x5884))+(((-1.0)*x5886*x5889))+((r11*x5892)));
evalcond[1]=(((x5884*x5887))+(((-1.0)*x5888*x5890))+(((-1.0)*r22*x5889)));
evalcond[2]=((((-1.0)*x5885*x5890))+(((-1.0)*r02*x5889))+((r01*x5891)));
evalcond[3]=((1.0)+(((-1.0)*x5886*x5890))+(((-1.0)*r12*x5889))+((r11*x5891)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5888*x5889))+((r22*x5884))+((x5883*x5887)));
evalcond[5]=((((-1.0)*x5885*x5889))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5892))+((r02*x5884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5893=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5893;
j4eval[1]=IKsign(x5893);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5894=((1.0)*cj5);
IkReal x5895=((((-1.0)*r21*x5894))+(((-1.0)*r20*sj5)));
j4eval[0]=x5895;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5894))))));
j4eval[2]=IKsign(x5895);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5896=cj5*cj5;
IkReal x5897=r11*r11;
IkReal x5898=(r11*sj5);
IkReal x5899=(cj5*r10);
IkReal x5900=((((-2.0)*x5898*x5899))+(r12*r12)+(((-1.0)*x5896*x5897))+((x5896*(r10*r10)))+x5897);
j4eval[0]=x5900;
j4eval[1]=IKsign(x5900);
j4eval[2]=((IKabs(((((-1.0)*x5899))+x5898)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5901=cj5*cj5;
IkReal x5902=r11*r11;
IkReal x5903=(cj5*r10);
IkReal x5904=(r11*sj5);
CheckValue<IkReal> x5905=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x5901*(r10*r10)))+(((-1.0)*x5901*x5902))+x5902+(((-2.0)*x5903*x5904)))),-1);
if(!x5905.valid){
continue;
}
CheckValue<IkReal> x5906 = IKatan2WithCheck(IkReal((x5904+(((-1.0)*x5903)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5905.value)))+(x5906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5907=IKcos(j4);
IkReal x5908=IKsin(j4);
IkReal x5909=(cj5*r00);
IkReal x5910=(cj5*r10);
IkReal x5911=(r21*sj5);
IkReal x5912=(cj5*r20);
IkReal x5913=((1.0)*x5907);
IkReal x5914=((1.0)*x5908);
IkReal x5915=(sj5*x5908);
IkReal x5916=(sj5*x5907);
evalcond[0]=(((r12*x5908))+(((-1.0)*x5910*x5913))+((r11*x5916)));
evalcond[1]=(((x5908*x5911))+(((-1.0)*x5912*x5914))+(((-1.0)*r22*x5913)));
evalcond[2]=(((r01*x5915))+(((-1.0)*x5909*x5914))+(((-1.0)*r02*x5913)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5913))+(((-1.0)*x5910*x5914))+((r11*x5915)));
evalcond[4]=(((cj2*sj1))+((r22*x5908))+((cj1*sj2))+(((-1.0)*x5912*x5913))+((x5907*x5911)));
evalcond[5]=(((r01*x5916))+(((-1.0)*sj1*sj2))+((r02*x5908))+(((-1.0)*x5909*x5913))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5917=((1.0)*cj5);
CheckValue<IkReal> x5918=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5917))+(((-1.0)*r20*sj5)))),-1);
if(!x5918.valid){
continue;
}
CheckValue<IkReal> x5919 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x5917))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5918.value)))+(x5919.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5920=IKcos(j4);
IkReal x5921=IKsin(j4);
IkReal x5922=(cj5*r00);
IkReal x5923=(cj5*r10);
IkReal x5924=(r21*sj5);
IkReal x5925=(cj5*r20);
IkReal x5926=((1.0)*x5920);
IkReal x5927=((1.0)*x5921);
IkReal x5928=(sj5*x5921);
IkReal x5929=(sj5*x5920);
evalcond[0]=(((r11*x5929))+((r12*x5921))+(((-1.0)*x5923*x5926)));
evalcond[1]=((((-1.0)*r22*x5926))+((x5921*x5924))+(((-1.0)*x5925*x5927)));
evalcond[2]=((((-1.0)*r02*x5926))+((r01*x5928))+(((-1.0)*x5922*x5927)));
evalcond[3]=((-1.0)+((r11*x5928))+(((-1.0)*r12*x5926))+(((-1.0)*x5923*x5927)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5925*x5926))+((cj1*sj2))+((x5920*x5924))+((r22*x5921)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((r01*x5929))+(((-1.0)*x5922*x5926))+((r02*x5921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5930 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5930.valid){
continue;
}
CheckValue<IkReal> x5931=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5930.value)+(((1.5707963267949)*(x5931.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5932=IKcos(j4);
IkReal x5933=IKsin(j4);
IkReal x5934=(cj5*r00);
IkReal x5935=(cj5*r10);
IkReal x5936=(r21*sj5);
IkReal x5937=(cj5*r20);
IkReal x5938=((1.0)*x5932);
IkReal x5939=((1.0)*x5933);
IkReal x5940=(sj5*x5933);
IkReal x5941=(sj5*x5932);
evalcond[0]=(((r12*x5933))+(((-1.0)*x5935*x5938))+((r11*x5941)));
evalcond[1]=(((x5933*x5936))+(((-1.0)*x5937*x5939))+(((-1.0)*r22*x5938)));
evalcond[2]=((((-1.0)*x5934*x5939))+(((-1.0)*r02*x5938))+((r01*x5940)));
evalcond[3]=((-1.0)+(((-1.0)*x5935*x5939))+(((-1.0)*r12*x5938))+((r11*x5940)));
evalcond[4]=(((cj2*sj1))+((x5932*x5936))+((cj1*sj2))+((r22*x5933))+(((-1.0)*x5937*x5938)));
evalcond[5]=((((-1.0)*x5934*x5938))+(((-1.0)*sj1*sj2))+((r01*x5941))+((cj1*cj2))+((r02*x5933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5942=((-1.0)*r00);
IkReal x5944 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5944)==0){
continue;
}
IkReal x5943=pow(x5944,-0.5);
CheckValue<IkReal> x5945 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5942),IKFAST_ATAN2_MAGTHRESH);
if(!x5945.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5945.value));
IkReal gconst127=(r01*x5943);
IkReal gconst128=(x5942*x5943);
CheckValue<IkReal> x5946 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5946.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5946.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5947=((-1.0)*r00);
IkReal x5948=x5943;
CheckValue<IkReal> x5950 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5947),IKFAST_ATAN2_MAGTHRESH);
if(!x5950.valid){
continue;
}
IkReal x5949=((-1.0)*(x5950.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5949;
IkReal gconst126=x5949;
IkReal gconst127=(r01*x5948);
IkReal gconst128=(x5947*x5948);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5951=((1.0)*sj0);
IkReal x5952=((1.0)*gconst127);
CheckValue<IkReal> x5953 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5951)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*gconst127*r11*x5951))+(((-1.0)*cj0*r01*x5952))+((cj0*gconst128*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5953.valid){
continue;
}
CheckValue<IkReal> x5954=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5952)))),-1);
if(!x5954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5953.value)+(((1.5707963267949)*(x5954.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5955=IKsin(j4);
IkReal x5956=IKcos(j4);
IkReal x5957=(gconst127*r01);
IkReal x5958=(sj1*sj2);
IkReal x5959=(gconst128*r10);
IkReal x5960=(gconst128*r00);
IkReal x5961=(gconst128*r20);
IkReal x5962=((1.0)*x5956);
IkReal x5963=((1.0)*cj1*cj2);
IkReal x5964=((1.0)*x5955);
IkReal x5965=(gconst127*x5956);
IkReal x5966=(gconst127*x5955);
evalcond[0]=((((-1.0)*r22*x5962))+((r21*x5966))+(((-1.0)*x5961*x5964)));
evalcond[1]=(cj0+(((-1.0)*r12*x5962))+((r11*x5966))+(((-1.0)*x5959*x5964)));
evalcond[2]=((((-1.0)*sj0))+((x5955*x5957))+(((-1.0)*x5960*x5964))+(((-1.0)*r02*x5962)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5965))+(((-1.0)*x5961*x5962))+((r22*x5955)));
evalcond[4]=(((x5956*x5957))+((r02*x5955))+(((-1.0)*x5960*x5962))+(((-1.0)*cj0*x5963))+((cj0*x5958)));
evalcond[5]=(((sj0*x5958))+(((-1.0)*sj0*x5963))+((r12*x5955))+((r11*x5965))+(((-1.0)*x5959*x5962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5967=((1.0)*gconst128);
CheckValue<IkReal> x5968=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5967))+(((-1.0)*gconst127*r10)))),-1);
if(!x5968.valid){
continue;
}
CheckValue<IkReal> x5969 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5968.value)))+(x5969.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5970=IKsin(j4);
IkReal x5971=IKcos(j4);
IkReal x5972=(gconst127*r01);
IkReal x5973=(sj1*sj2);
IkReal x5974=(gconst128*r10);
IkReal x5975=(gconst128*r00);
IkReal x5976=(gconst128*r20);
IkReal x5977=((1.0)*x5971);
IkReal x5978=((1.0)*cj1*cj2);
IkReal x5979=((1.0)*x5970);
IkReal x5980=(gconst127*x5971);
IkReal x5981=(gconst127*x5970);
evalcond[0]=(((r21*x5981))+(((-1.0)*r22*x5977))+(((-1.0)*x5976*x5979)));
evalcond[1]=(cj0+((r11*x5981))+(((-1.0)*r12*x5977))+(((-1.0)*x5974*x5979)));
evalcond[2]=((((-1.0)*r02*x5977))+((x5970*x5972))+(((-1.0)*sj0))+(((-1.0)*x5975*x5979)));
evalcond[3]=(((cj2*sj1))+((r21*x5980))+((cj1*sj2))+((r22*x5970))+(((-1.0)*x5976*x5977)));
evalcond[4]=(((cj0*x5973))+(((-1.0)*cj0*x5978))+(((-1.0)*x5975*x5977))+((r02*x5970))+((x5971*x5972)));
evalcond[5]=(((r11*x5980))+(((-1.0)*sj0*x5978))+(((-1.0)*x5974*x5977))+((r12*x5970))+((sj0*x5973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5982=((-1.0)*r01);
IkReal x5984 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5984)==0){
continue;
}
IkReal x5983=pow(x5984,-0.5);
CheckValue<IkReal> x5985 = IKatan2WithCheck(IkReal(x5982),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5985.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5985.value))));
IkReal gconst130=(x5982*x5983);
IkReal gconst131=((1.0)*r00*x5983);
CheckValue<IkReal> x5986 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5986.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5986.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5987=((-1.0)*r01);
CheckValue<IkReal> x5990 = IKatan2WithCheck(IkReal(x5987),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5990.valid){
continue;
}
IkReal x5988=((1.0)*(x5990.value));
IkReal x5989=x5983;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5988)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5988)));
IkReal gconst130=(x5987*x5989);
IkReal gconst131=((1.0)*r00*x5989);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5991=((-1.0)*r01);
CheckValue<IkReal> x5994 = IKatan2WithCheck(IkReal(x5991),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5994.valid){
continue;
}
IkReal x5992=((1.0)*(x5994.value));
IkReal x5993=x5983;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5992)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5992)));
IkReal gconst130=(x5991*x5993);
IkReal gconst131=((1.0)*r00*x5993);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5995=((-1.0)*r01);
CheckValue<IkReal> x5998 = IKatan2WithCheck(IkReal(x5995),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5998.valid){
continue;
}
IkReal x5996=((1.0)*(x5998.value));
IkReal x5997=x5983;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5996)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5996)));
IkReal gconst130=(x5995*x5997);
IkReal gconst131=((1.0)*r00*x5997);
IkReal x5999=r02*r02;
IkReal x6000=(r12*sj0);
IkReal x6001=((1.0)*cj0);
IkReal x6002=x5983;
j4eval[0]=((IKabs(((((-1.0)*r02*x6001))+(((-1.0)*x6000)))))+(IKabs((((cj0*x5999*x6002))+((r02*x6000*x6002))+(((-1.0)*x6001*x6002))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6003=((1.0)*sj0);
IkReal x6004=((1.0)*gconst130);
CheckValue<IkReal> x6005=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x6004)))),-1);
if(!x6005.valid){
continue;
}
CheckValue<IkReal> x6006 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6003))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x6004))+((gconst131*r10*sj0))+((cj0*gconst131*r00))+(((-1.0)*gconst130*r11*x6003)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6005.value)))+(x6006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6007=IKsin(j4);
IkReal x6008=IKcos(j4);
IkReal x6009=(gconst131*r10);
IkReal x6010=(sj1*sj2);
IkReal x6011=(gconst131*r20);
IkReal x6012=(gconst131*r00);
IkReal x6013=((1.0)*x6008);
IkReal x6014=((1.0)*cj1*cj2);
IkReal x6015=(gconst130*x6007);
IkReal x6016=((1.0)*x6007);
IkReal x6017=(gconst130*x6008);
evalcond[0]=(((r21*x6015))+(((-1.0)*x6011*x6016))+(((-1.0)*r22*x6013)));
evalcond[1]=(((r11*x6015))+cj0+(((-1.0)*r12*x6013))+(((-1.0)*x6009*x6016)));
evalcond[2]=(((r01*x6015))+(((-1.0)*sj0))+(((-1.0)*r02*x6013))+(((-1.0)*x6012*x6016)));
evalcond[3]=(((cj2*sj1))+((r22*x6007))+((r21*x6017))+((cj1*sj2))+(((-1.0)*x6011*x6013)));
evalcond[4]=(((r01*x6017))+((cj0*x6010))+((r02*x6007))+(((-1.0)*x6012*x6013))+(((-1.0)*cj0*x6014)));
evalcond[5]=(((r12*x6007))+((r11*x6017))+(((-1.0)*sj0*x6014))+(((-1.0)*x6009*x6013))+((sj0*x6010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6018=((1.0)*gconst131);
CheckValue<IkReal> x6019=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6018))+(((-1.0)*gconst130*r10)))),-1);
if(!x6019.valid){
continue;
}
CheckValue<IkReal> x6020 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6018)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6019.value)))+(x6020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6021=IKsin(j4);
IkReal x6022=IKcos(j4);
IkReal x6023=(gconst131*r10);
IkReal x6024=(sj1*sj2);
IkReal x6025=(gconst131*r20);
IkReal x6026=(gconst131*r00);
IkReal x6027=((1.0)*x6022);
IkReal x6028=((1.0)*cj1*cj2);
IkReal x6029=(gconst130*x6021);
IkReal x6030=((1.0)*x6021);
IkReal x6031=(gconst130*x6022);
evalcond[0]=((((-1.0)*r22*x6027))+((r21*x6029))+(((-1.0)*x6025*x6030)));
evalcond[1]=(cj0+((r11*x6029))+(((-1.0)*x6023*x6030))+(((-1.0)*r12*x6027)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6029))+(((-1.0)*r02*x6027))+(((-1.0)*x6026*x6030)));
evalcond[3]=(((cj2*sj1))+((r21*x6031))+(((-1.0)*x6025*x6027))+((cj1*sj2))+((r22*x6021)));
evalcond[4]=((((-1.0)*x6026*x6027))+((r02*x6021))+(((-1.0)*cj0*x6028))+((cj0*x6024))+((r01*x6031)));
evalcond[5]=(((sj0*x6024))+(((-1.0)*x6023*x6027))+((r11*x6031))+(((-1.0)*sj0*x6028))+((r12*x6021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6032=((1.0)*gconst131);
CheckValue<IkReal> x6033 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6032)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6033.valid){
continue;
}
CheckValue<IkReal> x6034=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6032))+(((-1.0)*gconst130*r00)))),-1);
if(!x6034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6033.value)+(((1.5707963267949)*(x6034.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6035=IKsin(j4);
IkReal x6036=IKcos(j4);
IkReal x6037=(gconst131*r10);
IkReal x6038=(sj1*sj2);
IkReal x6039=(gconst131*r20);
IkReal x6040=(gconst131*r00);
IkReal x6041=((1.0)*x6036);
IkReal x6042=((1.0)*cj1*cj2);
IkReal x6043=(gconst130*x6035);
IkReal x6044=((1.0)*x6035);
IkReal x6045=(gconst130*x6036);
evalcond[0]=((((-1.0)*x6039*x6044))+(((-1.0)*r22*x6041))+((r21*x6043)));
evalcond[1]=(((r11*x6043))+cj0+(((-1.0)*x6037*x6044))+(((-1.0)*r12*x6041)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6041))+(((-1.0)*x6040*x6044))+((r01*x6043)));
evalcond[3]=(((r22*x6035))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6039*x6041))+((r21*x6045)));
evalcond[4]=(((cj0*x6038))+((r02*x6035))+(((-1.0)*x6040*x6041))+(((-1.0)*cj0*x6042))+((r01*x6045)));
evalcond[5]=(((r11*x6045))+((r12*x6035))+((sj0*x6038))+(((-1.0)*x6037*x6041))+(((-1.0)*sj0*x6042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6046=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6046;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6046);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6047=((1.0)*cj5);
IkReal x6048=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6047)));
j4eval[0]=x6048;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6047))+((r21*sj5))))));
j4eval[2]=IKsign(x6048);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6049=cj5*cj5;
IkReal x6050=r01*r01;
IkReal x6051=(cj5*r00);
IkReal x6052=(r01*sj5);
IkReal x6053=(x6050+(((-1.0)*x6049*x6050))+((x6049*(r00*r00)))+(((-2.0)*x6051*x6052))+(r02*r02));
j4eval[0]=x6053;
j4eval[1]=IKsign(x6053);
j4eval[2]=((IKabs(r02))+(IKabs((x6052+(((-1.0)*x6051))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6054=cj5*cj5;
IkReal x6055=r01*r01;
IkReal x6056=(r01*sj5);
IkReal x6057=(cj5*r00);
CheckValue<IkReal> x6058 = IKatan2WithCheck(IkReal((x6056+(((-1.0)*x6057)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6058.valid){
continue;
}
CheckValue<IkReal> x6059=IKPowWithIntegerCheck(IKsign((x6055+((x6054*(r00*r00)))+(((-1.0)*x6054*x6055))+(r02*r02)+(((-2.0)*x6056*x6057)))),-1);
if(!x6059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6058.value)+(((1.5707963267949)*(x6059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6060=IKcos(j4);
IkReal x6061=IKsin(j4);
IkReal x6062=(cj5*r00);
IkReal x6063=(cj5*r10);
IkReal x6064=(r21*sj5);
IkReal x6065=(cj5*r20);
IkReal x6066=((1.0)*x6060);
IkReal x6067=((1.0)*x6061);
IkReal x6068=(sj5*x6061);
IkReal x6069=(sj5*x6060);
evalcond[0]=(((r01*x6069))+((r02*x6061))+(((-1.0)*x6062*x6066)));
evalcond[1]=(((x6061*x6064))+(((-1.0)*r22*x6066))+(((-1.0)*x6065*x6067)));
evalcond[2]=(((r11*x6068))+(((-1.0)*x6063*x6067))+(((-1.0)*r12*x6066)));
evalcond[3]=((-1.0)+((r01*x6068))+(((-1.0)*r02*x6066))+(((-1.0)*x6062*x6067)));
evalcond[4]=(((cj2*sj1))+((x6060*x6064))+((cj1*sj2))+((r22*x6061))+(((-1.0)*x6065*x6066)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6069))+((r12*x6061))+(((-1.0)*x6063*x6066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6070=((1.0)*cj5);
CheckValue<IkReal> x6071=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6070)))),-1);
if(!x6071.valid){
continue;
}
CheckValue<IkReal> x6072 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6070))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6071.value)))+(x6072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6073=IKcos(j4);
IkReal x6074=IKsin(j4);
IkReal x6075=(cj5*r00);
IkReal x6076=(cj5*r10);
IkReal x6077=(r21*sj5);
IkReal x6078=(cj5*r20);
IkReal x6079=((1.0)*x6073);
IkReal x6080=((1.0)*x6074);
IkReal x6081=(sj5*x6074);
IkReal x6082=(sj5*x6073);
evalcond[0]=(((r01*x6082))+(((-1.0)*x6075*x6079))+((r02*x6074)));
evalcond[1]=(((x6074*x6077))+(((-1.0)*x6078*x6080))+(((-1.0)*r22*x6079)));
evalcond[2]=((((-1.0)*r12*x6079))+((r11*x6081))+(((-1.0)*x6076*x6080)));
evalcond[3]=((-1.0)+((r01*x6081))+(((-1.0)*r02*x6079))+(((-1.0)*x6075*x6080)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6074))+(((-1.0)*x6078*x6079))+((x6073*x6077)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6076*x6079))+((r11*x6082))+((r12*x6074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6083=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6083.valid){
continue;
}
CheckValue<IkReal> x6084 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6083.value)))+(x6084.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6085=IKcos(j4);
IkReal x6086=IKsin(j4);
IkReal x6087=(cj5*r00);
IkReal x6088=(cj5*r10);
IkReal x6089=(r21*sj5);
IkReal x6090=(cj5*r20);
IkReal x6091=((1.0)*x6085);
IkReal x6092=((1.0)*x6086);
IkReal x6093=(sj5*x6086);
IkReal x6094=(sj5*x6085);
evalcond[0]=((((-1.0)*x6087*x6091))+((r01*x6094))+((r02*x6086)));
evalcond[1]=((((-1.0)*r22*x6091))+((x6086*x6089))+(((-1.0)*x6090*x6092)));
evalcond[2]=(((r11*x6093))+(((-1.0)*r12*x6091))+(((-1.0)*x6088*x6092)));
evalcond[3]=((-1.0)+(((-1.0)*x6087*x6092))+((r01*x6093))+(((-1.0)*r02*x6091)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6090*x6091))+((x6085*x6089))+((r22*x6086)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6086))+((r11*x6094))+(((-1.0)*x6088*x6091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6095=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6095;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6095);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6096=((1.0)*cj5);
IkReal x6097=((((-1.0)*r21*x6096))+(((-1.0)*r20*sj5)));
j4eval[0]=x6097;
j4eval[1]=((IKabs(((((-1.0)*r10*x6096))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6097);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6098=(r01*sj5);
IkReal x6099=(cj1*sj2);
IkReal x6100=(cj2*sj1);
IkReal x6101=((1.0)*r02);
IkReal x6102=((1.0)*cj5*r00);
IkReal x6103=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6103;
j4eval[1]=((IKabs(((((-1.0)*x6099*x6101))+(((-1.0)*x6100*x6101)))))+(IKabs(((((-1.0)*x6099*x6102))+((x6098*x6099))+((x6098*x6100))+(((-1.0)*x6100*x6102))))));
j4eval[2]=IKsign(x6103);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6104=(r01*sj5);
IkReal x6105=(cj1*sj2);
IkReal x6106=(cj2*sj1);
IkReal x6107=((1.0)*r02);
IkReal x6108=((1.0)*cj5*r00);
CheckValue<IkReal> x6109=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6109.valid){
continue;
}
CheckValue<IkReal> x6110 = IKatan2WithCheck(IkReal((((x6104*x6105))+((x6104*x6106))+(((-1.0)*x6105*x6108))+(((-1.0)*x6106*x6108)))),IkReal(((((-1.0)*x6105*x6107))+(((-1.0)*x6106*x6107)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6109.value)))+(x6110.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6111=IKcos(j4);
IkReal x6112=IKsin(j4);
IkReal x6113=(cj5*r00);
IkReal x6114=(cj5*r10);
IkReal x6115=(r21*sj5);
IkReal x6116=(cj5*r20);
IkReal x6117=((1.0)*x6111);
IkReal x6118=((1.0)*x6112);
IkReal x6119=(sj5*x6112);
IkReal x6120=(sj5*x6111);
evalcond[0]=(((r01*x6120))+((r02*x6112))+(((-1.0)*x6113*x6117)));
evalcond[1]=((((-1.0)*r22*x6117))+(((-1.0)*x6116*x6118))+((x6112*x6115)));
evalcond[2]=((((-1.0)*r12*x6117))+((r11*x6119))+(((-1.0)*x6114*x6118)));
evalcond[3]=((1.0)+(((-1.0)*x6113*x6118))+(((-1.0)*r02*x6117))+((r01*x6119)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6116*x6117))+((x6111*x6115))+((r22*x6112)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x6112))+(((-1.0)*x6114*x6117))+((cj1*cj2))+((r11*x6120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6121=((1.0)*cj5);
CheckValue<IkReal> x6122 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6121)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6122.valid){
continue;
}
CheckValue<IkReal> x6123=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6121))+(((-1.0)*r20*sj5)))),-1);
if(!x6123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6122.value)+(((1.5707963267949)*(x6123.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6124=IKcos(j4);
IkReal x6125=IKsin(j4);
IkReal x6126=(cj5*r00);
IkReal x6127=(cj5*r10);
IkReal x6128=(r21*sj5);
IkReal x6129=(cj5*r20);
IkReal x6130=((1.0)*x6124);
IkReal x6131=((1.0)*x6125);
IkReal x6132=(sj5*x6125);
IkReal x6133=(sj5*x6124);
evalcond[0]=((((-1.0)*x6126*x6130))+((r02*x6125))+((r01*x6133)));
evalcond[1]=(((x6125*x6128))+(((-1.0)*x6129*x6131))+(((-1.0)*r22*x6130)));
evalcond[2]=(((r11*x6132))+(((-1.0)*x6127*x6131))+(((-1.0)*r12*x6130)));
evalcond[3]=((1.0)+(((-1.0)*x6126*x6131))+((r01*x6132))+(((-1.0)*r02*x6130)));
evalcond[4]=(((cj2*sj1))+((x6124*x6128))+((cj1*sj2))+(((-1.0)*x6129*x6130))+((r22*x6125)));
evalcond[5]=(((r11*x6133))+((r12*x6125))+(((-1.0)*sj1*sj2))+(((-1.0)*x6127*x6130))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6134 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6134.valid){
continue;
}
CheckValue<IkReal> x6135=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6134.value)+(((1.5707963267949)*(x6135.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6136=IKcos(j4);
IkReal x6137=IKsin(j4);
IkReal x6138=(cj5*r00);
IkReal x6139=(cj5*r10);
IkReal x6140=(r21*sj5);
IkReal x6141=(cj5*r20);
IkReal x6142=((1.0)*x6136);
IkReal x6143=((1.0)*x6137);
IkReal x6144=(sj5*x6137);
IkReal x6145=(sj5*x6136);
evalcond[0]=((((-1.0)*x6138*x6142))+((r01*x6145))+((r02*x6137)));
evalcond[1]=(((x6137*x6140))+(((-1.0)*r22*x6142))+(((-1.0)*x6141*x6143)));
evalcond[2]=((((-1.0)*x6139*x6143))+((r11*x6144))+(((-1.0)*r12*x6142)));
evalcond[3]=((1.0)+(((-1.0)*x6138*x6143))+(((-1.0)*r02*x6142))+((r01*x6144)));
evalcond[4]=(((cj2*sj1))+((r22*x6137))+((cj1*sj2))+((x6136*x6140))+(((-1.0)*x6141*x6142)));
evalcond[5]=((((-1.0)*x6139*x6142))+(((-1.0)*sj1*sj2))+((r11*x6145))+((cj1*cj2))+((r12*x6137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6146=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6146);
rxp1_1=(px*r21);
rxp1_2=(r11*x6146);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6147=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6147);
rxp1_1=(px*r21);
rxp1_2=(r11*x6147);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6148=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6148);
rxp1_1=(px*r21);
rxp1_2=(r11*x6148);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6151=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6151.valid){
continue;
}
IkReal x6149=x6151.value;
IkReal x6150=(sj0*x6149);
cj4array[0]=(((cj1*cj2*x6150))+(((-1.0)*sj1*sj2*x6150)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6152=IKsin(j4);
IkReal x6153=IKcos(j4);
IkReal x6154=(r21*sj5);
IkReal x6155=((1.0)*cj5*r20);
evalcond[0]=(r02*x6152);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6153)));
evalcond[2]=(((x6152*x6154))+(((-1.0)*x6152*x6155)));
evalcond[3]=((((-1.0)*cj5*r10*x6152))+((r11*sj5*x6152)));
evalcond[4]=(((cj2*sj1))+((x6153*x6154))+((cj1*sj2))+(((-1.0)*x6153*x6155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6158=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6158.valid){
continue;
}
IkReal x6156=x6158.value;
IkReal x6157=((1.0)*x6156);
cj4array[0]=((((-1.0)*cj2*sj1*x6157))+(((-1.0)*cj1*sj2*x6157)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6159=IKsin(j4);
IkReal x6160=IKcos(j4);
IkReal x6161=((1.0)*sj0);
IkReal x6162=((1.0)*cj5);
IkReal x6163=(sj5*x6159);
evalcond[0]=(r02*x6159);
evalcond[1]=((((-1.0)*x6161))+(((-1.0)*r02*x6160)));
evalcond[2]=(((r21*x6163))+(((-1.0)*r20*x6159*x6162)));
evalcond[3]=((((-1.0)*r10*x6159*x6162))+((r11*x6163)));
evalcond[4]=((((-1.0)*r10*x6160*x6162))+((r11*sj5*x6160))+(((-1.0)*cj1*cj2*x6161))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6164=IKPowWithIntegerCheck(r02,-1);
if(!x6164.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6164.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6165=IKsin(j4);
IkReal x6166=IKcos(j4);
IkReal x6167=(r21*sj5);
IkReal x6168=((1.0)*cj5);
IkReal x6169=(r11*sj5);
evalcond[0]=(r02*x6165);
evalcond[1]=(((x6165*x6167))+(((-1.0)*r20*x6165*x6168)));
evalcond[2]=((((-1.0)*r10*x6165*x6168))+((x6165*x6169)));
evalcond[3]=(((cj2*sj1))+((x6166*x6167))+(((-1.0)*r20*x6166*x6168))+((cj1*sj2)));
evalcond[4]=(((x6166*x6169))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r10*x6166*x6168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6170=((1.0)*sj0);
IkReal x6171=((1.0)*cj0);
CheckValue<IkReal> x6172 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6170))+(((-1.0)*r02*x6171)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6171))+(((-1.0)*r11*sj5*x6170)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6172.valid){
continue;
}
CheckValue<IkReal> x6173=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6172.value)+(((1.5707963267949)*(x6173.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6174=IKsin(j4);
IkReal x6175=IKcos(j4);
IkReal x6176=(cj5*r00);
IkReal x6177=(cj5*r10);
IkReal x6178=(r21*sj5);
IkReal x6179=(sj1*sj2);
IkReal x6180=(cj5*r20);
IkReal x6181=((1.0)*x6175);
IkReal x6182=((1.0)*cj1*cj2);
IkReal x6183=((1.0)*x6174);
IkReal x6184=(sj5*x6174);
IkReal x6185=(sj5*x6175);
evalcond[0]=(((x6174*x6178))+(((-1.0)*r22*x6181))+(((-1.0)*x6180*x6183)));
evalcond[1]=(cj0+(((-1.0)*r12*x6181))+(((-1.0)*x6177*x6183))+((r11*x6184)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6181))+((r01*x6184))+(((-1.0)*x6176*x6183)));
evalcond[3]=(((cj2*sj1))+((x6175*x6178))+((cj1*sj2))+((r22*x6174))+(((-1.0)*x6180*x6181)));
evalcond[4]=(((r01*x6185))+((r02*x6174))+(((-1.0)*x6176*x6181))+(((-1.0)*cj0*x6182))+((cj0*x6179)));
evalcond[5]=(((r12*x6174))+((sj0*x6179))+(((-1.0)*x6177*x6181))+((r11*x6185))+(((-1.0)*sj0*x6182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6186=((1.0)*cj5);
CheckValue<IkReal> x6187=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6186)))),-1);
if(!x6187.valid){
continue;
}
CheckValue<IkReal> x6188 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6187.value)))+(x6188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6189=IKsin(j4);
IkReal x6190=IKcos(j4);
IkReal x6191=(cj5*r00);
IkReal x6192=(cj5*r10);
IkReal x6193=(r21*sj5);
IkReal x6194=(sj1*sj2);
IkReal x6195=(cj5*r20);
IkReal x6196=((1.0)*x6190);
IkReal x6197=((1.0)*cj1*cj2);
IkReal x6198=((1.0)*x6189);
IkReal x6199=(sj5*x6189);
IkReal x6200=(sj5*x6190);
evalcond[0]=((((-1.0)*x6195*x6198))+(((-1.0)*r22*x6196))+((x6189*x6193)));
evalcond[1]=(cj0+((r11*x6199))+(((-1.0)*r12*x6196))+(((-1.0)*x6192*x6198)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6191*x6198))+((r01*x6199))+(((-1.0)*r02*x6196)));
evalcond[3]=(((x6190*x6193))+((cj2*sj1))+((r22*x6189))+((cj1*sj2))+(((-1.0)*x6195*x6196)));
evalcond[4]=(((r01*x6200))+(((-1.0)*cj0*x6197))+(((-1.0)*x6191*x6196))+((r02*x6189))+((cj0*x6194)));
evalcond[5]=((((-1.0)*x6192*x6196))+(((-1.0)*sj0*x6197))+((sj0*x6194))+((r11*x6200))+((r12*x6189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6201=((1.0)*cj5);
CheckValue<IkReal> x6202 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6202.valid){
continue;
}
CheckValue<IkReal> x6203=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6201)))),-1);
if(!x6203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6202.value)+(((1.5707963267949)*(x6203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6204=IKsin(j4);
IkReal x6205=IKcos(j4);
IkReal x6206=(cj5*r00);
IkReal x6207=(cj5*r10);
IkReal x6208=(r21*sj5);
IkReal x6209=(sj1*sj2);
IkReal x6210=(cj5*r20);
IkReal x6211=((1.0)*x6205);
IkReal x6212=((1.0)*cj1*cj2);
IkReal x6213=((1.0)*x6204);
IkReal x6214=(sj5*x6204);
IkReal x6215=(sj5*x6205);
evalcond[0]=((((-1.0)*x6210*x6213))+((x6204*x6208))+(((-1.0)*r22*x6211)));
evalcond[1]=(((r11*x6214))+cj0+(((-1.0)*r12*x6211))+(((-1.0)*x6207*x6213)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6206*x6213))+((r01*x6214))+(((-1.0)*r02*x6211)));
evalcond[3]=(((cj2*sj1))+((r22*x6204))+(((-1.0)*x6210*x6211))+((cj1*sj2))+((x6205*x6208)));
evalcond[4]=((((-1.0)*cj0*x6212))+(((-1.0)*x6206*x6211))+((r02*x6204))+((r01*x6215))+((cj0*x6209)));
evalcond[5]=(((r11*x6215))+((sj0*x6209))+(((-1.0)*sj0*x6212))+(((-1.0)*x6207*x6211))+((r12*x6204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6216=r21*r21;
IkReal x6217=cj5*cj5;
IkReal x6218=(cj2*sj1);
IkReal x6219=(cj1*sj2);
IkReal x6220=(r21*sj5);
IkReal x6221=((1.0)*cj5*r20);
CheckValue<IkReal> x6222 = IKatan2WithCheck(IkReal((((r22*x6219))+((r22*x6218)))),IkReal((((x6219*x6220))+(((-1.0)*x6219*x6221))+(((-1.0)*x6218*x6221))+((x6218*x6220)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6222.valid){
continue;
}
CheckValue<IkReal> x6223=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6216))+(((-1.0)*(r22*r22)))+((x6216*x6217))+(((-1.0)*x6217*(r20*r20)))+(((2.0)*cj5*r20*x6220)))),-1);
if(!x6223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6222.value)+(((1.5707963267949)*(x6223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6224=IKsin(j4);
IkReal x6225=IKcos(j4);
IkReal x6226=(r21*sj5);
IkReal x6227=(cj5*r20);
IkReal x6228=((1.0)*x6225);
evalcond[0]=((((-1.0)*x6224*x6227))+(((-1.0)*r22*x6228))+((x6224*x6226)));
evalcond[1]=(((x6225*x6226))+((cj2*sj1))+((cj1*sj2))+((r22*x6224))+(((-1.0)*x6227*x6228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6229=(cj5*sj4);
IkReal x6230=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x6230))+(((-1.0)*r00*x6229)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6229))+(((-1.0)*r11*x6230))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x6230))+(((-1.0)*r00*x6229))))+IKsqr((((r10*x6229))+(((-1.0)*r11*x6230))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x6230))+(((-1.0)*r00*x6229))), (((r10*x6229))+(((-1.0)*r11*x6230))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6231=IKcos(j0);
IkReal x6232=IKsin(j0);
IkReal x6233=((0.1)*sj5);
IkReal x6234=((0.392)*sj1);
IkReal x6235=(cj5*r11);
IkReal x6236=(cj5*r01);
IkReal x6237=((1.0)*cj1);
IkReal x6238=(r11*sj5);
IkReal x6239=((0.392)*cj2);
IkReal x6240=((1.0)*sj1);
IkReal x6241=((1.0)*cj4);
IkReal x6242=(r01*sj5);
IkReal x6243=(sj2*x6232);
IkReal x6244=(sj2*x6231);
IkReal x6245=(cj5*x6241);
IkReal x6246=(cj1*x6231);
IkReal x6247=(cj1*x6232);
IkReal x6248=(cj2*x6231);
IkReal x6249=((1.0)*cj5*sj4);
IkReal x6250=(cj2*x6232);
evalcond[0]=(x6231+((sj4*x6238))+(((-1.0)*r10*x6249))+(((-1.0)*r12*x6241)));
evalcond[1]=((((-1.0)*r02*x6241))+(((-1.0)*r00*x6249))+(((-1.0)*x6232))+((sj4*x6242)));
evalcond[2]=(((r00*sj5))+x6236+(((-1.0)*x6237*x6244))+(((-1.0)*x6240*x6248)));
evalcond[3]=(x6235+(((-1.0)*x6237*x6243))+((r10*sj5))+(((-1.0)*x6240*x6250)));
evalcond[4]=((((-1.0)*x6237*x6248))+((cj4*x6242))+(((-1.0)*r00*x6245))+((r02*sj4))+((sj1*x6244)));
evalcond[5]=((((-1.0)*r10*x6245))+((sj1*x6243))+((cj4*x6238))+((r12*sj4))+(((-1.0)*x6237*x6250)));
evalcond[6]=((((-1.0)*x6234*x6244))+(((-0.134)*x6232))+(((0.425)*x6246))+(((-1.0)*r00*x6233))+(((-1.0)*px))+((x6239*x6246))+(((-0.1)*x6236)));
evalcond[7]=((((-1.0)*r10*x6233))+(((-1.0)*x6234*x6243))+(((0.425)*x6247))+(((0.134)*x6231))+(((-1.0)*py))+((x6239*x6247))+(((-0.1)*x6235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6251=((1.0)*cj5);
IkReal x6252=((1.0)*sj5);
CheckValue<IkReal> x6253 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x6252))+(((-1.0)*r11*x6251)))),IkReal(((((-1.0)*r00*x6252))+(((-1.0)*r01*x6251)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6253.valid){
continue;
}
CheckValue<IkReal> x6254=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6254.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6253.value)+(((1.5707963267949)*(x6254.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6255=IKcos(j0);
IkReal x6256=IKsin(j0);
IkReal x6257=((0.1)*sj5);
IkReal x6258=(cj5*r11);
IkReal x6259=(cj5*r01);
IkReal x6260=((0.392)*cj2);
IkReal x6261=((1.0)*cj2);
IkReal x6262=((0.392)*sj2);
IkReal x6263=((1.0)*cj1*sj2);
IkReal x6264=(cj1*x6255);
IkReal x6265=(cj1*x6256);
IkReal x6266=(sj1*x6255);
IkReal x6267=(sj1*x6256);
evalcond[0]=(((r00*sj5))+x6259+(((-1.0)*x6255*x6263))+(((-1.0)*x6261*x6266)));
evalcond[1]=(x6258+((r10*sj5))+(((-1.0)*x6261*x6267))+(((-1.0)*x6256*x6263)));
evalcond[2]=((((-0.1)*x6259))+(((-1.0)*px))+((x6260*x6264))+(((-1.0)*x6262*x6266))+(((0.425)*x6264))+(((-1.0)*r00*x6257))+(((-0.134)*x6256)));
evalcond[3]=((((0.134)*x6255))+(((-0.1)*x6258))+(((-1.0)*py))+((x6260*x6265))+(((-1.0)*x6262*x6267))+(((0.425)*x6265))+(((-1.0)*r10*x6257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6268=((1.0)*cj5);
IkReal x6269=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6268)));
j4eval[0]=x6269;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6268))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6270=((1.0)*cj5);
IkReal x6271=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6270)));
j4eval[0]=x6271;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6270)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6272=((1.0)*sj0);
IkReal x6273=((1.0)*cj0);
IkReal x6274=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6274;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6272))+(((-1.0)*r01*sj5*x6273)))))+(IKabs(((((-1.0)*r02*x6273))+(((-1.0)*r12*x6272))))));
j4eval[2]=IKsign(x6274);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6275=((-1.0)*r20);
IkReal x6277 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6277)==0){
continue;
}
IkReal x6276=pow(x6277,-0.5);
CheckValue<IkReal> x6278 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6275),IKFAST_ATAN2_MAGTHRESH);
if(!x6278.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6278.value));
IkReal gconst115=(r21*x6276);
IkReal gconst116=(x6275*x6276);
CheckValue<IkReal> x6279 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6279.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6279.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6280=((-1.0)*r20);
IkReal x6281=x6276;
CheckValue<IkReal> x6283 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6280),IKFAST_ATAN2_MAGTHRESH);
if(!x6283.valid){
continue;
}
IkReal x6282=((-1.0)*(x6283.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6282;
IkReal gconst114=x6282;
IkReal gconst115=(r21*x6281);
IkReal gconst116=(x6280*x6281);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6284=((-1.0)*r20);
IkReal x6285=x6276;
CheckValue<IkReal> x6287 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6284),IKFAST_ATAN2_MAGTHRESH);
if(!x6287.valid){
continue;
}
IkReal x6286=((-1.0)*(x6287.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6286;
IkReal gconst114=x6286;
IkReal gconst115=(r21*x6285);
IkReal gconst116=(x6284*x6285);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6288=((-1.0)*r20);
IkReal x6289=x6276;
CheckValue<IkReal> x6291 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6288),IKFAST_ATAN2_MAGTHRESH);
if(!x6291.valid){
continue;
}
IkReal x6290=((-1.0)*(x6291.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6290;
IkReal gconst114=x6290;
IkReal gconst115=(r21*x6289);
IkReal gconst116=(x6288*x6289);
IkReal x6292=((1.0)*(r22*r22));
CheckValue<IkReal> x6296=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6292))),-1);
if(!x6296.valid){
continue;
}
IkReal x6293=x6296.value;
IkReal x6294=((1.0)*x6293);
IkReal x6295=((((-1.0)*x6294*(r21*r21*r21*r21)))+(((-2.0)*x6293*(r20*r20)*(r21*r21)))+(((-1.0)*x6292))+(((-1.0)*x6294*(r20*r20*r20*r20))));
j4eval[0]=x6295;
j4eval[1]=IKsign(x6295);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6297=(cj2*sj1);
IkReal x6298=(gconst115*r21);
IkReal x6299=(cj1*sj2);
IkReal x6300=((1.0)*gconst116*r20);
CheckValue<IkReal> x6301 = IKatan2WithCheck(IkReal((((r22*x6299))+((r22*x6297)))),IkReal((((x6298*x6299))+(((-1.0)*x6299*x6300))+(((-1.0)*x6297*x6300))+((x6297*x6298)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6301.valid){
continue;
}
CheckValue<IkReal> x6302=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6298*x6298)))+(((-1.0)*gconst116*r20*x6300))+(((-1.0)*(r22*r22)))+(((2.0)*gconst116*r20*x6298)))),-1);
if(!x6302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6301.value)+(((1.5707963267949)*(x6302.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6303=IKsin(j4);
IkReal x6304=IKcos(j4);
IkReal x6305=(sj1*sj2);
IkReal x6306=((1.0)*x6304);
IkReal x6307=((1.0)*cj1*cj2);
IkReal x6308=(gconst115*x6303);
IkReal x6309=(gconst115*x6304);
IkReal x6310=((1.0)*gconst116*x6303);
evalcond[0]=(((r21*x6308))+(((-1.0)*r20*x6310))+(((-1.0)*r22*x6306)));
evalcond[1]=(cj0+(((-1.0)*r12*x6306))+(((-1.0)*r10*x6310))+((r11*x6308)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6306))+((r01*x6308))+(((-1.0)*r00*x6310)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6303))+((r21*x6309))+(((-1.0)*gconst116*r20*x6306)));
evalcond[4]=(((r01*x6309))+((r02*x6303))+((cj0*x6305))+(((-1.0)*gconst116*r00*x6306))+(((-1.0)*cj0*x6307)));
evalcond[5]=(((r11*x6309))+(((-1.0)*sj0*x6307))+((r12*x6303))+(((-1.0)*gconst116*r10*x6306))+((sj0*x6305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6311=((1.0)*gconst116);
CheckValue<IkReal> x6312=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6311)))),-1);
if(!x6312.valid){
continue;
}
CheckValue<IkReal> x6313 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x6311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6312.value)))+(x6313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6314=IKsin(j4);
IkReal x6315=IKcos(j4);
IkReal x6316=(sj1*sj2);
IkReal x6317=((1.0)*x6315);
IkReal x6318=((1.0)*cj1*cj2);
IkReal x6319=(gconst115*x6314);
IkReal x6320=(gconst115*x6315);
IkReal x6321=((1.0)*gconst116*x6314);
evalcond[0]=((((-1.0)*r22*x6317))+(((-1.0)*r20*x6321))+((r21*x6319)));
evalcond[1]=(cj0+(((-1.0)*r12*x6317))+((r11*x6319))+(((-1.0)*r10*x6321)));
evalcond[2]=((((-1.0)*r00*x6321))+(((-1.0)*sj0))+(((-1.0)*r02*x6317))+((r01*x6319)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6314))+(((-1.0)*gconst116*r20*x6317))+((r21*x6320)));
evalcond[4]=(((r02*x6314))+((cj0*x6316))+((r01*x6320))+(((-1.0)*gconst116*r00*x6317))+(((-1.0)*cj0*x6318)));
evalcond[5]=(((r11*x6320))+(((-1.0)*sj0*x6318))+(((-1.0)*gconst116*r10*x6317))+((r12*x6314))+((sj0*x6316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6322=((1.0)*gconst116);
CheckValue<IkReal> x6323=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6322))+(((-1.0)*gconst115*r00)))),-1);
if(!x6323.valid){
continue;
}
CheckValue<IkReal> x6324 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6322))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6323.value)))+(x6324.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6325=IKsin(j4);
IkReal x6326=IKcos(j4);
IkReal x6327=(sj1*sj2);
IkReal x6328=((1.0)*x6326);
IkReal x6329=((1.0)*cj1*cj2);
IkReal x6330=(gconst115*x6325);
IkReal x6331=(gconst115*x6326);
IkReal x6332=((1.0)*gconst116*x6325);
evalcond[0]=((((-1.0)*r20*x6332))+(((-1.0)*r22*x6328))+((r21*x6330)));
evalcond[1]=(cj0+((r11*x6330))+(((-1.0)*r10*x6332))+(((-1.0)*r12*x6328)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6330))+(((-1.0)*r02*x6328))+(((-1.0)*r00*x6332)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x6328))+((cj1*sj2))+((r21*x6331))+((r22*x6325)));
evalcond[4]=(((r02*x6325))+(((-1.0)*gconst116*r00*x6328))+((cj0*x6327))+(((-1.0)*cj0*x6329))+((r01*x6331)));
evalcond[5]=((((-1.0)*sj0*x6329))+((r12*x6325))+((r11*x6331))+(((-1.0)*gconst116*r10*x6328))+((sj0*x6327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6333=((-1.0)*r21);
IkReal x6335 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6335)==0){
continue;
}
IkReal x6334=pow(x6335,-0.5);
CheckValue<IkReal> x6336 = IKatan2WithCheck(IkReal(x6333),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6336.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6336.value))));
IkReal gconst118=(x6333*x6334);
IkReal gconst119=((1.0)*r20*x6334);
CheckValue<IkReal> x6337 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6337.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6337.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6338=((-1.0)*r21);
CheckValue<IkReal> x6341 = IKatan2WithCheck(IkReal(x6338),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6341.valid){
continue;
}
IkReal x6339=((1.0)*(x6341.value));
IkReal x6340=x6334;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6339)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6339)));
IkReal gconst118=(x6338*x6340);
IkReal gconst119=((1.0)*r20*x6340);
IkReal x6342=r22*r22;
IkReal x6343=((1.0)*x6342);
CheckValue<IkReal> x6347=IKPowWithIntegerCheck(((-1.0)+x6342),-1);
if(!x6347.valid){
continue;
}
IkReal x6344=x6347.value;
if((((1.0)+(((-1.0)*x6343)))) < -0.00001)
continue;
IkReal x6345=IKsqrt(((1.0)+(((-1.0)*x6343))));
IkReal x6346=(cj0*x6344*x6345);
j4eval[0]=((IKabs((x6346+(((-1.0)*x6343*x6346)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6348=((-1.0)*r21);
CheckValue<IkReal> x6351 = IKatan2WithCheck(IkReal(x6348),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6351.valid){
continue;
}
IkReal x6349=((1.0)*(x6351.value));
IkReal x6350=x6334;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6349)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6349)));
IkReal gconst118=(x6348*x6350);
IkReal gconst119=((1.0)*r20*x6350);
IkReal x6352=r22*r22;
IkReal x6353=((1.0)*x6352);
CheckValue<IkReal> x6357=IKPowWithIntegerCheck(((-1.0)+x6352),-1);
if(!x6357.valid){
continue;
}
IkReal x6354=x6357.value;
if((((1.0)+(((-1.0)*x6353)))) < -0.00001)
continue;
IkReal x6355=IKsqrt(((1.0)+(((-1.0)*x6353))));
IkReal x6356=(sj0*x6354*x6355);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6356+(((-1.0)*x6353*x6356))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6358=((-1.0)*r21);
CheckValue<IkReal> x6361 = IKatan2WithCheck(IkReal(x6358),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6361.valid){
continue;
}
IkReal x6359=((1.0)*(x6361.value));
IkReal x6360=x6334;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6359)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6359)));
IkReal gconst118=(x6358*x6360);
IkReal gconst119=((1.0)*r20*x6360);
IkReal x6362=r22*r22;
IkReal x6363=(r12*sj0);
IkReal x6364=(cj0*r02);
CheckValue<IkReal> x6368=IKPowWithIntegerCheck(((-1.0)+x6362),-1);
if(!x6368.valid){
continue;
}
IkReal x6365=x6368.value;
if((((1.0)+(((-1.0)*x6362)))) < -0.00001)
continue;
IkReal x6366=IKsqrt(((1.0)+(((-1.0)*x6362))));
IkReal x6367=(r22*x6365*x6366);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x6364))+(((-1.0)*x6363)))))+(IKabs((((x6363*x6367))+((x6364*x6367))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6369=((1.0)*sj0);
IkReal x6370=((1.0)*gconst118);
CheckValue<IkReal> x6371 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6369)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x6369))+(((-1.0)*cj0*r01*x6370))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6371.valid){
continue;
}
CheckValue<IkReal> x6372=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6370)))),-1);
if(!x6372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6371.value)+(((1.5707963267949)*(x6372.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6373=IKsin(j4);
IkReal x6374=IKcos(j4);
IkReal x6375=(gconst118*r01);
IkReal x6376=(sj1*sj2);
IkReal x6377=(gconst119*r20);
IkReal x6378=(gconst119*r10);
IkReal x6379=(gconst119*r00);
IkReal x6380=(gconst118*r21);
IkReal x6381=(gconst118*r11);
IkReal x6382=((1.0)*x6374);
IkReal x6383=((1.0)*cj1*cj2);
IkReal x6384=((1.0)*x6373);
evalcond[0]=((((-1.0)*x6377*x6384))+(((-1.0)*r22*x6382))+((x6373*x6380)));
evalcond[1]=(cj0+(((-1.0)*x6378*x6384))+(((-1.0)*r12*x6382))+((x6373*x6381)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6379*x6384))+((x6373*x6375))+(((-1.0)*r02*x6382)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6377*x6382))+((r22*x6373))+((x6374*x6380)));
evalcond[4]=((((-1.0)*x6379*x6382))+((x6374*x6375))+(((-1.0)*cj0*x6383))+((cj0*x6376))+((r02*x6373)));
evalcond[5]=((((-1.0)*x6378*x6382))+((r12*x6373))+((sj0*x6376))+(((-1.0)*sj0*x6383))+((x6374*x6381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6385=((1.0)*gconst119);
CheckValue<IkReal> x6386 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6385))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6386.valid){
continue;
}
CheckValue<IkReal> x6387=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x6385)))),-1);
if(!x6387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6386.value)+(((1.5707963267949)*(x6387.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6388=IKsin(j4);
IkReal x6389=IKcos(j4);
IkReal x6390=(gconst118*r01);
IkReal x6391=(sj1*sj2);
IkReal x6392=(gconst119*r20);
IkReal x6393=(gconst119*r10);
IkReal x6394=(gconst119*r00);
IkReal x6395=(gconst118*r21);
IkReal x6396=(gconst118*r11);
IkReal x6397=((1.0)*x6389);
IkReal x6398=((1.0)*cj1*cj2);
IkReal x6399=((1.0)*x6388);
evalcond[0]=(((x6388*x6395))+(((-1.0)*r22*x6397))+(((-1.0)*x6392*x6399)));
evalcond[1]=(cj0+((x6388*x6396))+(((-1.0)*r12*x6397))+(((-1.0)*x6393*x6399)));
evalcond[2]=((((-1.0)*sj0))+((x6388*x6390))+(((-1.0)*r02*x6397))+(((-1.0)*x6394*x6399)));
evalcond[3]=(((cj2*sj1))+((r22*x6388))+((cj1*sj2))+(((-1.0)*x6392*x6397))+((x6389*x6395)));
evalcond[4]=(((cj0*x6391))+(((-1.0)*cj0*x6398))+((r02*x6388))+(((-1.0)*x6394*x6397))+((x6389*x6390)));
evalcond[5]=((((-1.0)*sj0*x6398))+((sj0*x6391))+((r12*x6388))+(((-1.0)*x6393*x6397))+((x6389*x6396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6400=((1.0)*gconst119);
CheckValue<IkReal> x6401=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x6400)))),-1);
if(!x6401.valid){
continue;
}
CheckValue<IkReal> x6402 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6400)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6401.value)))+(x6402.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6403=IKsin(j4);
IkReal x6404=IKcos(j4);
IkReal x6405=(gconst118*r01);
IkReal x6406=(sj1*sj2);
IkReal x6407=(gconst119*r20);
IkReal x6408=(gconst119*r10);
IkReal x6409=(gconst119*r00);
IkReal x6410=(gconst118*r21);
IkReal x6411=(gconst118*r11);
IkReal x6412=((1.0)*x6404);
IkReal x6413=((1.0)*cj1*cj2);
IkReal x6414=((1.0)*x6403);
evalcond[0]=((((-1.0)*x6407*x6414))+(((-1.0)*r22*x6412))+((x6403*x6410)));
evalcond[1]=(cj0+(((-1.0)*x6408*x6414))+(((-1.0)*r12*x6412))+((x6403*x6411)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6412))+(((-1.0)*x6409*x6414))+((x6403*x6405)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6407*x6412))+((cj1*sj2))+((x6404*x6410))+((r22*x6403)));
evalcond[4]=(((r02*x6403))+((x6404*x6405))+((cj0*x6406))+(((-1.0)*x6409*x6412))+(((-1.0)*cj0*x6413)));
evalcond[5]=(((sj0*x6406))+((x6404*x6411))+(((-1.0)*x6408*x6412))+((r12*x6403))+(((-1.0)*sj0*x6413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6415=((-1.0)*r10);
IkReal x6417 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6417)==0){
continue;
}
IkReal x6416=pow(x6417,-0.5);
CheckValue<IkReal> x6418 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6415),IKFAST_ATAN2_MAGTHRESH);
if(!x6418.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6418.value));
IkReal gconst121=(r11*x6416);
IkReal gconst122=(x6415*x6416);
CheckValue<IkReal> x6419 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6419.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6419.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6420=((-1.0)*r10);
IkReal x6421=x6416;
CheckValue<IkReal> x6423 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6420),IKFAST_ATAN2_MAGTHRESH);
if(!x6423.valid){
continue;
}
IkReal x6422=((-1.0)*(x6423.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6422;
IkReal gconst120=x6422;
IkReal gconst121=(r11*x6421);
IkReal gconst122=(x6420*x6421);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6424=((1.0)*sj0);
IkReal x6425=((1.0)*gconst121);
CheckValue<IkReal> x6426=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x6425)))),-1);
if(!x6426.valid){
continue;
}
CheckValue<IkReal> x6427 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6424)))),IkReal((((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x6424))+(((-1.0)*cj0*r01*x6425))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6426.value)))+(x6427.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6428=IKsin(j4);
IkReal x6429=IKcos(j4);
IkReal x6430=(gconst121*r11);
IkReal x6431=(sj1*sj2);
IkReal x6432=(gconst122*r00);
IkReal x6433=(gconst122*r10);
IkReal x6434=(gconst122*r20);
IkReal x6435=((1.0)*x6429);
IkReal x6436=((1.0)*cj1*cj2);
IkReal x6437=((1.0)*x6428);
IkReal x6438=(gconst121*x6428);
IkReal x6439=(gconst121*x6429);
evalcond[0]=((((-1.0)*x6434*x6437))+(((-1.0)*r22*x6435))+((r21*x6438)));
evalcond[1]=(cj0+(((-1.0)*r12*x6435))+(((-1.0)*x6433*x6437))+((x6428*x6430)));
evalcond[2]=(((r01*x6438))+(((-1.0)*sj0))+(((-1.0)*r02*x6435))+(((-1.0)*x6432*x6437)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6434*x6435))+((r21*x6439))+((r22*x6428)));
evalcond[4]=(((r01*x6439))+((cj0*x6431))+((r02*x6428))+(((-1.0)*x6432*x6435))+(((-1.0)*cj0*x6436)));
evalcond[5]=(((x6429*x6430))+(((-1.0)*sj0*x6436))+(((-1.0)*x6433*x6435))+((r12*x6428))+((sj0*x6431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6440=((1.0)*gconst122);
CheckValue<IkReal> x6441 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6440))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6441.valid){
continue;
}
CheckValue<IkReal> x6442=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6440))+(((-1.0)*gconst121*r00)))),-1);
if(!x6442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6441.value)+(((1.5707963267949)*(x6442.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6443=IKsin(j4);
IkReal x6444=IKcos(j4);
IkReal x6445=(gconst121*r11);
IkReal x6446=(sj1*sj2);
IkReal x6447=(gconst122*r00);
IkReal x6448=(gconst122*r10);
IkReal x6449=(gconst122*r20);
IkReal x6450=((1.0)*x6444);
IkReal x6451=((1.0)*cj1*cj2);
IkReal x6452=((1.0)*x6443);
IkReal x6453=(gconst121*x6443);
IkReal x6454=(gconst121*x6444);
evalcond[0]=((((-1.0)*x6449*x6452))+((r21*x6453))+(((-1.0)*r22*x6450)));
evalcond[1]=(cj0+((x6443*x6445))+(((-1.0)*x6448*x6452))+(((-1.0)*r12*x6450)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6453))+(((-1.0)*r02*x6450))+(((-1.0)*x6447*x6452)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6449*x6450))+((cj1*sj2))+((r21*x6454))+((r22*x6443)));
evalcond[4]=(((r01*x6454))+(((-1.0)*x6447*x6450))+((cj0*x6446))+(((-1.0)*cj0*x6451))+((r02*x6443)));
evalcond[5]=(((r12*x6443))+(((-1.0)*sj0*x6451))+((sj0*x6446))+((x6444*x6445))+(((-1.0)*x6448*x6450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6455=((-1.0)*r11);
IkReal x6457 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6457)==0){
continue;
}
IkReal x6456=pow(x6457,-0.5);
CheckValue<IkReal> x6458 = IKatan2WithCheck(IkReal(x6455),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6458.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6458.value))));
IkReal gconst124=(x6455*x6456);
IkReal gconst125=((1.0)*r10*x6456);
CheckValue<IkReal> x6459 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6459.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6459.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6460=((-1.0)*r11);
CheckValue<IkReal> x6463 = IKatan2WithCheck(IkReal(x6460),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6463.valid){
continue;
}
IkReal x6461=((1.0)*(x6463.value));
IkReal x6462=x6456;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6461)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6461)));
IkReal gconst124=(x6460*x6462);
IkReal gconst125=((1.0)*r10*x6462);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6464=((-1.0)*r11);
CheckValue<IkReal> x6467 = IKatan2WithCheck(IkReal(x6464),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6467.valid){
continue;
}
IkReal x6465=((1.0)*(x6467.value));
IkReal x6466=x6456;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6465)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6465)));
IkReal gconst124=(x6464*x6466);
IkReal gconst125=((1.0)*r10*x6466);
IkReal x6468=r12*r12;
IkReal x6469=((1.0)*sj0);
IkReal x6470=(cj0*r02);
IkReal x6471=x6456;
j4eval[0]=((IKabs(((((-1.0)*r12*x6469))+(((-1.0)*x6470)))))+(IKabs((((r12*x6470*x6471))+(((-1.0)*x6469*x6471))+((sj0*x6468*x6471))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6472=((-1.0)*r11);
CheckValue<IkReal> x6475 = IKatan2WithCheck(IkReal(x6472),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6475.valid){
continue;
}
IkReal x6473=((1.0)*(x6475.value));
IkReal x6474=x6456;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6473)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6473)));
IkReal gconst124=(x6472*x6474);
IkReal gconst125=((1.0)*r10*x6474);
IkReal x6476=r12*r12;
IkReal x6477=((1.0)+(((-1.0)*x6476)));
IkReal x6478=(cj2*r22*sj1);
IkReal x6479=(cj1*r22*sj2);
CheckValue<IkReal> x6486=IKPowWithIntegerCheck(x6477,-1);
if(!x6486.valid){
continue;
}
IkReal x6480=x6486.value;
CheckValue<IkReal> x6487=IKPowWithIntegerCheck(((-1.0)+x6476),-1);
if(!x6487.valid){
continue;
}
IkReal x6481=x6487.value;
IkReal x6482=((1.0)*x6480);
if((x6477) < -0.00001)
continue;
IkReal x6483=IKsqrt(x6477);
IkReal x6484=((1.0)*r12*x6481*x6483);
IkReal x6485=((((-1.0)*x6482*(r11*r11)*(r21*r21)))+(((-1.0)*x6482*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x6480))+(((-1.0)*(r22*r22))));
j4eval[0]=x6485;
j4eval[1]=IKsign(x6485);
j4eval[2]=((IKabs(((((-1.0)*x6478*x6484))+(((-1.0)*x6479*x6484)))))+(IKabs((x6479+x6478))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6488=(gconst124*r21);
IkReal x6489=(cj1*sj2);
IkReal x6490=(cj2*sj1);
IkReal x6491=(gconst125*r20);
CheckValue<IkReal> x6492 = IKatan2WithCheck(IkReal((((r22*x6489))+((r22*x6490)))),IkReal((((x6488*x6489))+(((-1.0)*x6489*x6491))+((x6488*x6490))+(((-1.0)*x6490*x6491)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6492.valid){
continue;
}
CheckValue<IkReal> x6493=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6491*x6491)))+(((2.0)*x6488*x6491))+(((-1.0)*(x6488*x6488)))+(((-1.0)*(r22*r22))))),-1);
if(!x6493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6492.value)+(((1.5707963267949)*(x6493.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6494=IKsin(j4);
IkReal x6495=IKcos(j4);
IkReal x6496=(sj1*sj2);
IkReal x6497=(gconst125*r20);
IkReal x6498=(gconst124*r01);
IkReal x6499=(gconst125*r00);
IkReal x6500=(gconst125*r10);
IkReal x6501=((1.0)*x6495);
IkReal x6502=((1.0)*cj1*cj2);
IkReal x6503=((1.0)*x6494);
IkReal x6504=(gconst124*x6494);
IkReal x6505=(gconst124*x6495);
evalcond[0]=(((r21*x6504))+(((-1.0)*x6497*x6503))+(((-1.0)*r22*x6501)));
evalcond[1]=((((-1.0)*r12*x6501))+cj0+(((-1.0)*x6500*x6503))+((r11*x6504)));
evalcond[2]=((((-1.0)*sj0))+((x6494*x6498))+(((-1.0)*r02*x6501))+(((-1.0)*x6499*x6503)));
evalcond[3]=(((cj2*sj1))+((r21*x6505))+((cj1*sj2))+(((-1.0)*x6497*x6501))+((r22*x6494)));
evalcond[4]=(((cj0*x6496))+((r02*x6494))+((x6495*x6498))+(((-1.0)*cj0*x6502))+(((-1.0)*x6499*x6501)));
evalcond[5]=((((-1.0)*x6500*x6501))+((r12*x6494))+(((-1.0)*sj0*x6502))+((sj0*x6496))+((r11*x6505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6506=((1.0)*sj0);
IkReal x6507=((1.0)*cj0);
CheckValue<IkReal> x6508=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6508.valid){
continue;
}
CheckValue<IkReal> x6509 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6506))+(((-1.0)*r02*x6507)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x6507))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r11*x6506)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6508.value)))+(x6509.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6510=IKsin(j4);
IkReal x6511=IKcos(j4);
IkReal x6512=(sj1*sj2);
IkReal x6513=(gconst125*r20);
IkReal x6514=(gconst124*r01);
IkReal x6515=(gconst125*r00);
IkReal x6516=(gconst125*r10);
IkReal x6517=((1.0)*x6511);
IkReal x6518=((1.0)*cj1*cj2);
IkReal x6519=((1.0)*x6510);
IkReal x6520=(gconst124*x6510);
IkReal x6521=(gconst124*x6511);
evalcond[0]=((((-1.0)*r22*x6517))+((r21*x6520))+(((-1.0)*x6513*x6519)));
evalcond[1]=((((-1.0)*x6516*x6519))+cj0+(((-1.0)*r12*x6517))+((r11*x6520)));
evalcond[2]=((((-1.0)*r02*x6517))+(((-1.0)*sj0))+((x6510*x6514))+(((-1.0)*x6515*x6519)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6521))+(((-1.0)*x6513*x6517))+((r22*x6510)));
evalcond[4]=((((-1.0)*cj0*x6518))+((cj0*x6512))+((x6511*x6514))+(((-1.0)*x6515*x6517))+((r02*x6510)));
evalcond[5]=((((-1.0)*x6516*x6517))+((r12*x6510))+((sj0*x6512))+((r11*x6521))+(((-1.0)*sj0*x6518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6522=((1.0)*gconst125);
CheckValue<IkReal> x6523 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6522))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6523.valid){
continue;
}
CheckValue<IkReal> x6524=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6522)))),-1);
if(!x6524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6523.value)+(((1.5707963267949)*(x6524.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6525=IKsin(j4);
IkReal x6526=IKcos(j4);
IkReal x6527=(sj1*sj2);
IkReal x6528=(gconst125*r20);
IkReal x6529=(gconst124*r01);
IkReal x6530=(gconst125*r00);
IkReal x6531=(gconst125*r10);
IkReal x6532=((1.0)*x6526);
IkReal x6533=((1.0)*cj1*cj2);
IkReal x6534=((1.0)*x6525);
IkReal x6535=(gconst124*x6525);
IkReal x6536=(gconst124*x6526);
evalcond[0]=(((r21*x6535))+(((-1.0)*r22*x6532))+(((-1.0)*x6528*x6534)));
evalcond[1]=(cj0+(((-1.0)*r12*x6532))+(((-1.0)*x6531*x6534))+((r11*x6535)));
evalcond[2]=((((-1.0)*sj0))+((x6525*x6529))+(((-1.0)*r02*x6532))+(((-1.0)*x6530*x6534)));
evalcond[3]=(((cj2*sj1))+((r21*x6536))+((cj1*sj2))+(((-1.0)*x6528*x6532))+((r22*x6525)));
evalcond[4]=((((-1.0)*cj0*x6533))+((r02*x6525))+((cj0*x6527))+(((-1.0)*x6530*x6532))+((x6526*x6529)));
evalcond[5]=((((-1.0)*sj0*x6533))+((r12*x6525))+((sj0*x6527))+(((-1.0)*x6531*x6532))+((r11*x6536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6537=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6537;
j4eval[1]=IKsign(x6537);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6538=((1.0)*cj5);
IkReal x6539=((((-1.0)*r01*x6538))+(((-1.0)*r00*sj5)));
j4eval[0]=x6539;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6538)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6539);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6540=cj5*cj5;
IkReal x6541=r11*r11;
IkReal x6542=(cj5*r10);
IkReal x6543=(r11*sj5);
IkReal x6544=((((2.0)*x6542*x6543))+((x6540*x6541))+(((-1.0)*x6540*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x6541)));
j4eval[0]=x6544;
j4eval[1]=IKsign(x6544);
j4eval[2]=((IKabs(r12))+(IKabs((x6543+(((-1.0)*x6542))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6545=cj5*cj5;
IkReal x6546=r11*r11;
IkReal x6547=(cj5*r10);
IkReal x6548=(r11*sj5);
CheckValue<IkReal> x6549 = IKatan2WithCheck(IkReal((x6548+(((-1.0)*x6547)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6549.valid){
continue;
}
CheckValue<IkReal> x6550=IKPowWithIntegerCheck(IKsign((((x6545*x6546))+(((2.0)*x6547*x6548))+(((-1.0)*(r12*r12)))+(((-1.0)*x6545*(r10*r10)))+(((-1.0)*x6546)))),-1);
if(!x6550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6549.value)+(((1.5707963267949)*(x6550.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6551=IKcos(j4);
IkReal x6552=IKsin(j4);
IkReal x6553=(cj5*r00);
IkReal x6554=(cj5*r10);
IkReal x6555=(r21*sj5);
IkReal x6556=(cj5*r20);
IkReal x6557=((1.0)*x6551);
IkReal x6558=((1.0)*x6552);
IkReal x6559=(sj5*x6552);
IkReal x6560=(sj5*x6551);
evalcond[0]=(((r11*x6560))+(((-1.0)*x6554*x6557))+((r12*x6552)));
evalcond[1]=(((x6552*x6555))+(((-1.0)*r22*x6557))+(((-1.0)*x6556*x6558)));
evalcond[2]=((((-1.0)*x6553*x6558))+(((-1.0)*r02*x6557))+((r01*x6559)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6557))+(((-1.0)*x6554*x6558))+((r11*x6559)));
evalcond[4]=(((cj2*sj1))+((x6551*x6555))+((cj1*sj2))+((r22*x6552))+(((-1.0)*x6556*x6557)));
evalcond[5]=((((-1.0)*x6553*x6557))+((r02*x6552))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6561=((1.0)*cj5);
CheckValue<IkReal> x6562=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6561)))),-1);
if(!x6562.valid){
continue;
}
CheckValue<IkReal> x6563 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6562.value)))+(x6563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6564=IKcos(j4);
IkReal x6565=IKsin(j4);
IkReal x6566=(cj5*r00);
IkReal x6567=(cj5*r10);
IkReal x6568=(r21*sj5);
IkReal x6569=(cj5*r20);
IkReal x6570=((1.0)*x6564);
IkReal x6571=((1.0)*x6565);
IkReal x6572=(sj5*x6565);
IkReal x6573=(sj5*x6564);
evalcond[0]=((((-1.0)*x6567*x6570))+((r12*x6565))+((r11*x6573)));
evalcond[1]=((((-1.0)*r22*x6570))+((x6565*x6568))+(((-1.0)*x6569*x6571)));
evalcond[2]=(((r01*x6572))+(((-1.0)*x6566*x6571))+(((-1.0)*r02*x6570)));
evalcond[3]=((1.0)+(((-1.0)*x6567*x6571))+((r11*x6572))+(((-1.0)*r12*x6570)));
evalcond[4]=(((cj2*sj1))+((r22*x6565))+((x6564*x6568))+((cj1*sj2))+(((-1.0)*x6569*x6570)));
evalcond[5]=(((r01*x6573))+(((-1.0)*x6566*x6570))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6574=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6574.valid){
continue;
}
CheckValue<IkReal> x6575 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6574.value)))+(x6575.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6576=IKcos(j4);
IkReal x6577=IKsin(j4);
IkReal x6578=(cj5*r00);
IkReal x6579=(cj5*r10);
IkReal x6580=(r21*sj5);
IkReal x6581=(cj5*r20);
IkReal x6582=((1.0)*x6576);
IkReal x6583=((1.0)*x6577);
IkReal x6584=(sj5*x6577);
IkReal x6585=(sj5*x6576);
evalcond[0]=(((r11*x6585))+((r12*x6577))+(((-1.0)*x6579*x6582)));
evalcond[1]=((((-1.0)*x6581*x6583))+(((-1.0)*r22*x6582))+((x6577*x6580)));
evalcond[2]=((((-1.0)*r02*x6582))+((r01*x6584))+(((-1.0)*x6578*x6583)));
evalcond[3]=((1.0)+((r11*x6584))+(((-1.0)*r12*x6582))+(((-1.0)*x6579*x6583)));
evalcond[4]=(((r22*x6577))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6581*x6582))+((x6576*x6580)));
evalcond[5]=(((r01*x6585))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6578*x6582))+((r02*x6577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6586=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6586;
j4eval[1]=IKsign(x6586);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6587=((1.0)*cj5);
IkReal x6588=((((-1.0)*r21*x6587))+(((-1.0)*r20*sj5)));
j4eval[0]=x6588;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x6587))+((r01*sj5))))));
j4eval[2]=IKsign(x6588);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6589=cj5*cj5;
IkReal x6590=r11*r11;
IkReal x6591=(r11*sj5);
IkReal x6592=(cj5*r10);
IkReal x6593=((r12*r12)+x6590+(((-1.0)*x6589*x6590))+((x6589*(r10*r10)))+(((-2.0)*x6591*x6592)));
j4eval[0]=x6593;
j4eval[1]=IKsign(x6593);
j4eval[2]=((IKabs(r12))+(IKabs((x6591+(((-1.0)*x6592))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6594=cj5*cj5;
IkReal x6595=r11*r11;
IkReal x6596=(cj5*r10);
IkReal x6597=(r11*sj5);
CheckValue<IkReal> x6598=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x6594*(r10*r10)))+(((-1.0)*x6594*x6595))+x6595+(((-2.0)*x6596*x6597)))),-1);
if(!x6598.valid){
continue;
}
CheckValue<IkReal> x6599 = IKatan2WithCheck(IkReal((x6597+(((-1.0)*x6596)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6598.value)))+(x6599.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6600=IKcos(j4);
IkReal x6601=IKsin(j4);
IkReal x6602=(cj5*r00);
IkReal x6603=(cj5*r10);
IkReal x6604=(r21*sj5);
IkReal x6605=(cj5*r20);
IkReal x6606=((1.0)*x6600);
IkReal x6607=((1.0)*x6601);
IkReal x6608=(sj5*x6601);
IkReal x6609=(sj5*x6600);
evalcond[0]=((((-1.0)*x6603*x6606))+((r11*x6609))+((r12*x6601)));
evalcond[1]=((((-1.0)*r22*x6606))+((x6601*x6604))+(((-1.0)*x6605*x6607)));
evalcond[2]=(((r01*x6608))+(((-1.0)*r02*x6606))+(((-1.0)*x6602*x6607)));
evalcond[3]=((-1.0)+(((-1.0)*x6603*x6607))+(((-1.0)*r12*x6606))+((r11*x6608)));
evalcond[4]=(((cj2*sj1))+((r22*x6601))+((cj1*sj2))+((x6600*x6604))+(((-1.0)*x6605*x6606)));
evalcond[5]=(((r01*x6609))+(((-1.0)*sj1*sj2))+(((-1.0)*x6602*x6606))+((r02*x6601))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6610=((1.0)*cj5);
CheckValue<IkReal> x6611 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6611.valid){
continue;
}
CheckValue<IkReal> x6612=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6610))+(((-1.0)*r20*sj5)))),-1);
if(!x6612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6611.value)+(((1.5707963267949)*(x6612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6613=IKcos(j4);
IkReal x6614=IKsin(j4);
IkReal x6615=(cj5*r00);
IkReal x6616=(cj5*r10);
IkReal x6617=(r21*sj5);
IkReal x6618=(cj5*r20);
IkReal x6619=((1.0)*x6613);
IkReal x6620=((1.0)*x6614);
IkReal x6621=(sj5*x6614);
IkReal x6622=(sj5*x6613);
evalcond[0]=(((r12*x6614))+(((-1.0)*x6616*x6619))+((r11*x6622)));
evalcond[1]=((((-1.0)*x6618*x6620))+(((-1.0)*r22*x6619))+((x6614*x6617)));
evalcond[2]=(((r01*x6621))+(((-1.0)*r02*x6619))+(((-1.0)*x6615*x6620)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6619))+(((-1.0)*x6616*x6620))+((r11*x6621)));
evalcond[4]=(((cj2*sj1))+((x6613*x6617))+(((-1.0)*x6618*x6619))+((cj1*sj2))+((r22*x6614)));
evalcond[5]=(((r02*x6614))+((r01*x6622))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x6615*x6619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6623 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6623.valid){
continue;
}
CheckValue<IkReal> x6624=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6623.value)+(((1.5707963267949)*(x6624.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6625=IKcos(j4);
IkReal x6626=IKsin(j4);
IkReal x6627=(cj5*r00);
IkReal x6628=(cj5*r10);
IkReal x6629=(r21*sj5);
IkReal x6630=(cj5*r20);
IkReal x6631=((1.0)*x6625);
IkReal x6632=((1.0)*x6626);
IkReal x6633=(sj5*x6626);
IkReal x6634=(sj5*x6625);
evalcond[0]=((((-1.0)*x6628*x6631))+((r12*x6626))+((r11*x6634)));
evalcond[1]=(((x6626*x6629))+(((-1.0)*r22*x6631))+(((-1.0)*x6630*x6632)));
evalcond[2]=(((r01*x6633))+(((-1.0)*r02*x6631))+(((-1.0)*x6627*x6632)));
evalcond[3]=((-1.0)+(((-1.0)*x6628*x6632))+((r11*x6633))+(((-1.0)*r12*x6631)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6630*x6631))+((r22*x6626))+((x6625*x6629)));
evalcond[5]=(((r02*x6626))+(((-1.0)*sj1*sj2))+((r01*x6634))+((cj1*cj2))+(((-1.0)*x6627*x6631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6635=((-1.0)*r00);
IkReal x6637 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6637)==0){
continue;
}
IkReal x6636=pow(x6637,-0.5);
CheckValue<IkReal> x6638 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6635),IKFAST_ATAN2_MAGTHRESH);
if(!x6638.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6638.value));
IkReal gconst127=(r01*x6636);
IkReal gconst128=(x6635*x6636);
CheckValue<IkReal> x6639 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6639.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6639.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6640=((-1.0)*r00);
IkReal x6641=x6636;
CheckValue<IkReal> x6643 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6640),IKFAST_ATAN2_MAGTHRESH);
if(!x6643.valid){
continue;
}
IkReal x6642=((-1.0)*(x6643.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6642;
IkReal gconst126=x6642;
IkReal gconst127=(r01*x6641);
IkReal gconst128=(x6640*x6641);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6644=((1.0)*sj0);
IkReal x6645=((1.0)*gconst127);
CheckValue<IkReal> x6646=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6645)))),-1);
if(!x6646.valid){
continue;
}
CheckValue<IkReal> x6647 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6644)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*gconst127*r11*x6644))+((cj0*gconst128*r00))+(((-1.0)*cj0*r01*x6645)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6646.value)))+(x6647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6648=IKsin(j4);
IkReal x6649=IKcos(j4);
IkReal x6650=(gconst127*r01);
IkReal x6651=(sj1*sj2);
IkReal x6652=(gconst128*r10);
IkReal x6653=(gconst128*r00);
IkReal x6654=(gconst128*r20);
IkReal x6655=((1.0)*x6649);
IkReal x6656=((1.0)*cj1*cj2);
IkReal x6657=((1.0)*x6648);
IkReal x6658=(gconst127*x6649);
IkReal x6659=(gconst127*x6648);
evalcond[0]=((((-1.0)*r22*x6655))+(((-1.0)*x6654*x6657))+((r21*x6659)));
evalcond[1]=((((-1.0)*x6652*x6657))+cj0+((r11*x6659))+(((-1.0)*r12*x6655)));
evalcond[2]=((((-1.0)*x6653*x6657))+(((-1.0)*sj0))+(((-1.0)*r02*x6655))+((x6648*x6650)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6648))+(((-1.0)*x6654*x6655))+((r21*x6658)));
evalcond[4]=((((-1.0)*x6653*x6655))+(((-1.0)*cj0*x6656))+((x6649*x6650))+((r02*x6648))+((cj0*x6651)));
evalcond[5]=((((-1.0)*x6652*x6655))+((r11*x6658))+(((-1.0)*sj0*x6656))+((sj0*x6651))+((r12*x6648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6660=((1.0)*gconst128);
CheckValue<IkReal> x6661 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6660))+((gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6661.valid){
continue;
}
CheckValue<IkReal> x6662=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6660))+(((-1.0)*gconst127*r10)))),-1);
if(!x6662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6661.value)+(((1.5707963267949)*(x6662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6663=IKsin(j4);
IkReal x6664=IKcos(j4);
IkReal x6665=(gconst127*r01);
IkReal x6666=(sj1*sj2);
IkReal x6667=(gconst128*r10);
IkReal x6668=(gconst128*r00);
IkReal x6669=(gconst128*r20);
IkReal x6670=((1.0)*x6664);
IkReal x6671=((1.0)*cj1*cj2);
IkReal x6672=((1.0)*x6663);
IkReal x6673=(gconst127*x6664);
IkReal x6674=(gconst127*x6663);
evalcond[0]=((((-1.0)*x6669*x6672))+(((-1.0)*r22*x6670))+((r21*x6674)));
evalcond[1]=(((r11*x6674))+cj0+(((-1.0)*r12*x6670))+(((-1.0)*x6667*x6672)));
evalcond[2]=((((-1.0)*r02*x6670))+(((-1.0)*sj0))+(((-1.0)*x6668*x6672))+((x6663*x6665)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6669*x6670))+((cj1*sj2))+((r22*x6663))+((r21*x6673)));
evalcond[4]=(((x6664*x6665))+(((-1.0)*x6668*x6670))+((r02*x6663))+((cj0*x6666))+(((-1.0)*cj0*x6671)));
evalcond[5]=(((r11*x6673))+((r12*x6663))+((sj0*x6666))+(((-1.0)*sj0*x6671))+(((-1.0)*x6667*x6670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6675=((-1.0)*r01);
IkReal x6677 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6677)==0){
continue;
}
IkReal x6676=pow(x6677,-0.5);
CheckValue<IkReal> x6678 = IKatan2WithCheck(IkReal(x6675),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6678.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6678.value))));
IkReal gconst130=(x6675*x6676);
IkReal gconst131=((1.0)*r00*x6676);
CheckValue<IkReal> x6679 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6679.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6679.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6680=((-1.0)*r01);
CheckValue<IkReal> x6683 = IKatan2WithCheck(IkReal(x6680),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6683.valid){
continue;
}
IkReal x6681=((1.0)*(x6683.value));
IkReal x6682=x6676;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6681)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6681)));
IkReal gconst130=(x6680*x6682);
IkReal gconst131=((1.0)*r00*x6682);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6684=((-1.0)*r01);
CheckValue<IkReal> x6687 = IKatan2WithCheck(IkReal(x6684),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6687.valid){
continue;
}
IkReal x6685=((1.0)*(x6687.value));
IkReal x6686=x6676;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6685)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6685)));
IkReal gconst130=(x6684*x6686);
IkReal gconst131=((1.0)*r00*x6686);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6688=((-1.0)*r01);
CheckValue<IkReal> x6691 = IKatan2WithCheck(IkReal(x6688),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6691.valid){
continue;
}
IkReal x6689=((1.0)*(x6691.value));
IkReal x6690=x6676;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6689)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6689)));
IkReal gconst130=(x6688*x6690);
IkReal gconst131=((1.0)*r00*x6690);
IkReal x6692=r02*r02;
IkReal x6693=(r12*sj0);
IkReal x6694=((1.0)*cj0);
IkReal x6695=x6676;
j4eval[0]=((IKabs(((((-1.0)*x6693))+(((-1.0)*r02*x6694)))))+(IKabs(((((-1.0)*x6694*x6695))+((cj0*x6692*x6695))+((r02*x6693*x6695))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6696=((1.0)*sj0);
IkReal x6697=((1.0)*gconst130);
CheckValue<IkReal> x6698 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6696)))),IkReal(((((-1.0)*gconst130*r11*x6696))+((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x6697))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6698.valid){
continue;
}
CheckValue<IkReal> x6699=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6697))+(((-1.0)*gconst131*r21)))),-1);
if(!x6699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6698.value)+(((1.5707963267949)*(x6699.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6700=IKsin(j4);
IkReal x6701=IKcos(j4);
IkReal x6702=(gconst131*r10);
IkReal x6703=(sj1*sj2);
IkReal x6704=(gconst131*r20);
IkReal x6705=(gconst131*r00);
IkReal x6706=((1.0)*x6701);
IkReal x6707=((1.0)*cj1*cj2);
IkReal x6708=(gconst130*x6700);
IkReal x6709=((1.0)*x6700);
IkReal x6710=(gconst130*x6701);
evalcond[0]=(((r21*x6708))+(((-1.0)*r22*x6706))+(((-1.0)*x6704*x6709)));
evalcond[1]=(cj0+(((-1.0)*x6702*x6709))+((r11*x6708))+(((-1.0)*r12*x6706)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6705*x6709))+(((-1.0)*r02*x6706))+((r01*x6708)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6710))+(((-1.0)*x6704*x6706))+((r22*x6700)));
evalcond[4]=((((-1.0)*cj0*x6707))+(((-1.0)*x6705*x6706))+((cj0*x6703))+((r01*x6710))+((r02*x6700)));
evalcond[5]=(((r11*x6710))+(((-1.0)*x6702*x6706))+((sj0*x6703))+((r12*x6700))+(((-1.0)*sj0*x6707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6711=((1.0)*gconst131);
CheckValue<IkReal> x6712=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6711))+(((-1.0)*gconst130*r10)))),-1);
if(!x6712.valid){
continue;
}
CheckValue<IkReal> x6713 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6711))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6712.value)))+(x6713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6714=IKsin(j4);
IkReal x6715=IKcos(j4);
IkReal x6716=(gconst131*r10);
IkReal x6717=(sj1*sj2);
IkReal x6718=(gconst131*r20);
IkReal x6719=(gconst131*r00);
IkReal x6720=((1.0)*x6715);
IkReal x6721=((1.0)*cj1*cj2);
IkReal x6722=(gconst130*x6714);
IkReal x6723=((1.0)*x6714);
IkReal x6724=(gconst130*x6715);
evalcond[0]=((((-1.0)*r22*x6720))+(((-1.0)*x6718*x6723))+((r21*x6722)));
evalcond[1]=(((r11*x6722))+cj0+(((-1.0)*r12*x6720))+(((-1.0)*x6716*x6723)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6719*x6723))+(((-1.0)*r02*x6720))+((r01*x6722)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6718*x6720))+((cj1*sj2))+((r22*x6714))+((r21*x6724)));
evalcond[4]=(((cj0*x6717))+(((-1.0)*x6719*x6720))+((r02*x6714))+(((-1.0)*cj0*x6721))+((r01*x6724)));
evalcond[5]=(((r11*x6724))+(((-1.0)*sj0*x6721))+(((-1.0)*x6716*x6720))+((sj0*x6717))+((r12*x6714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6725=((1.0)*gconst131);
CheckValue<IkReal> x6726 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6725)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6726.valid){
continue;
}
CheckValue<IkReal> x6727=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r00))+(((-1.0)*r01*x6725)))),-1);
if(!x6727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6726.value)+(((1.5707963267949)*(x6727.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6728=IKsin(j4);
IkReal x6729=IKcos(j4);
IkReal x6730=(gconst131*r10);
IkReal x6731=(sj1*sj2);
IkReal x6732=(gconst131*r20);
IkReal x6733=(gconst131*r00);
IkReal x6734=((1.0)*x6729);
IkReal x6735=((1.0)*cj1*cj2);
IkReal x6736=(gconst130*x6728);
IkReal x6737=((1.0)*x6728);
IkReal x6738=(gconst130*x6729);
evalcond[0]=(((r21*x6736))+(((-1.0)*r22*x6734))+(((-1.0)*x6732*x6737)));
evalcond[1]=((((-1.0)*x6730*x6737))+cj0+(((-1.0)*r12*x6734))+((r11*x6736)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6733*x6737))+(((-1.0)*r02*x6734))+((r01*x6736)));
evalcond[3]=(((cj2*sj1))+((r21*x6738))+((cj1*sj2))+((r22*x6728))+(((-1.0)*x6732*x6734)));
evalcond[4]=((((-1.0)*cj0*x6735))+(((-1.0)*x6733*x6734))+((r02*x6728))+((r01*x6738))+((cj0*x6731)));
evalcond[5]=((((-1.0)*x6730*x6734))+((r12*x6728))+((sj0*x6731))+((r11*x6738))+(((-1.0)*sj0*x6735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6739=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6739;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6739);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6740=((1.0)*cj5);
IkReal x6741=((((-1.0)*r11*x6740))+(((-1.0)*r10*sj5)));
j4eval[0]=x6741;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6740)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6741);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6742=cj5*cj5;
IkReal x6743=r01*r01;
IkReal x6744=(cj5*r00);
IkReal x6745=(r01*sj5);
IkReal x6746=((((-1.0)*x6742*x6743))+x6743+((x6742*(r00*r00)))+(r02*r02)+(((-2.0)*x6744*x6745)));
j4eval[0]=x6746;
j4eval[1]=IKsign(x6746);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6744))+x6745))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6747=cj5*cj5;
IkReal x6748=r01*r01;
IkReal x6749=(r01*sj5);
IkReal x6750=(cj5*r00);
CheckValue<IkReal> x6751 = IKatan2WithCheck(IkReal(((((-1.0)*x6750))+x6749)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6751.valid){
continue;
}
CheckValue<IkReal> x6752=IKPowWithIntegerCheck(IKsign((x6748+(((-2.0)*x6749*x6750))+(((-1.0)*x6747*x6748))+(r02*r02)+((x6747*(r00*r00))))),-1);
if(!x6752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6751.value)+(((1.5707963267949)*(x6752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6753=IKcos(j4);
IkReal x6754=IKsin(j4);
IkReal x6755=(cj5*r00);
IkReal x6756=(cj5*r10);
IkReal x6757=(r21*sj5);
IkReal x6758=(cj5*r20);
IkReal x6759=((1.0)*x6753);
IkReal x6760=((1.0)*x6754);
IkReal x6761=(sj5*x6754);
IkReal x6762=(sj5*x6753);
evalcond[0]=((((-1.0)*x6755*x6759))+((r01*x6762))+((r02*x6754)));
evalcond[1]=((((-1.0)*x6758*x6760))+((x6754*x6757))+(((-1.0)*r22*x6759)));
evalcond[2]=(((r11*x6761))+(((-1.0)*x6756*x6760))+(((-1.0)*r12*x6759)));
evalcond[3]=((-1.0)+(((-1.0)*x6755*x6760))+((r01*x6761))+(((-1.0)*r02*x6759)));
evalcond[4]=(((cj2*sj1))+((r22*x6754))+(((-1.0)*x6758*x6759))+((cj1*sj2))+((x6753*x6757)));
evalcond[5]=(((r12*x6754))+(((-1.0)*cj1*cj2))+((r11*x6762))+((sj1*sj2))+(((-1.0)*x6756*x6759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6763=((1.0)*cj5);
CheckValue<IkReal> x6764 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6763))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6764.valid){
continue;
}
CheckValue<IkReal> x6765=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6763)))),-1);
if(!x6765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6764.value)+(((1.5707963267949)*(x6765.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6766=IKcos(j4);
IkReal x6767=IKsin(j4);
IkReal x6768=(cj5*r00);
IkReal x6769=(cj5*r10);
IkReal x6770=(r21*sj5);
IkReal x6771=(cj5*r20);
IkReal x6772=((1.0)*x6766);
IkReal x6773=((1.0)*x6767);
IkReal x6774=(sj5*x6767);
IkReal x6775=(sj5*x6766);
evalcond[0]=((((-1.0)*x6768*x6772))+((r02*x6767))+((r01*x6775)));
evalcond[1]=((((-1.0)*r22*x6772))+(((-1.0)*x6771*x6773))+((x6767*x6770)));
evalcond[2]=(((r11*x6774))+(((-1.0)*x6769*x6773))+(((-1.0)*r12*x6772)));
evalcond[3]=((-1.0)+(((-1.0)*x6768*x6773))+(((-1.0)*r02*x6772))+((r01*x6774)));
evalcond[4]=(((cj2*sj1))+((r22*x6767))+((cj1*sj2))+((x6766*x6770))+(((-1.0)*x6771*x6772)));
evalcond[5]=(((r11*x6775))+((r12*x6767))+(((-1.0)*x6769*x6772))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6776=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6776.valid){
continue;
}
CheckValue<IkReal> x6777 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6776.value)))+(x6777.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6778=IKcos(j4);
IkReal x6779=IKsin(j4);
IkReal x6780=(cj5*r00);
IkReal x6781=(cj5*r10);
IkReal x6782=(r21*sj5);
IkReal x6783=(cj5*r20);
IkReal x6784=((1.0)*x6778);
IkReal x6785=((1.0)*x6779);
IkReal x6786=(sj5*x6779);
IkReal x6787=(sj5*x6778);
evalcond[0]=(((r02*x6779))+((r01*x6787))+(((-1.0)*x6780*x6784)));
evalcond[1]=(((x6779*x6782))+(((-1.0)*r22*x6784))+(((-1.0)*x6783*x6785)));
evalcond[2]=(((r11*x6786))+(((-1.0)*r12*x6784))+(((-1.0)*x6781*x6785)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6784))+((r01*x6786))+(((-1.0)*x6780*x6785)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6779))+((x6778*x6782))+(((-1.0)*x6783*x6784)));
evalcond[5]=(((r12*x6779))+((r11*x6787))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6781*x6784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6788=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6788;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6788);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6789=((1.0)*cj5);
IkReal x6790=((((-1.0)*r21*x6789))+(((-1.0)*r20*sj5)));
j4eval[0]=x6790;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6789))))));
j4eval[2]=IKsign(x6790);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6791=(r01*sj5);
IkReal x6792=(cj1*sj2);
IkReal x6793=(cj2*sj1);
IkReal x6794=((1.0)*r02);
IkReal x6795=((1.0)*cj5*r00);
IkReal x6796=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6796;
j4eval[1]=((IKabs(((((-1.0)*x6793*x6795))+(((-1.0)*x6792*x6795))+((x6791*x6792))+((x6791*x6793)))))+(IKabs(((((-1.0)*x6793*x6794))+(((-1.0)*x6792*x6794))))));
j4eval[2]=IKsign(x6796);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6797=(r01*sj5);
IkReal x6798=(cj1*sj2);
IkReal x6799=(cj2*sj1);
IkReal x6800=((1.0)*r02);
IkReal x6801=((1.0)*cj5*r00);
CheckValue<IkReal> x6802 = IKatan2WithCheck(IkReal(((((-1.0)*x6798*x6801))+(((-1.0)*x6799*x6801))+((x6797*x6799))+((x6797*x6798)))),IkReal(((((-1.0)*x6798*x6800))+(((-1.0)*x6799*x6800)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6802.valid){
continue;
}
CheckValue<IkReal> x6803=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6802.value)+(((1.5707963267949)*(x6803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6804=IKcos(j4);
IkReal x6805=IKsin(j4);
IkReal x6806=(cj5*r00);
IkReal x6807=(cj5*r10);
IkReal x6808=(r21*sj5);
IkReal x6809=(cj5*r20);
IkReal x6810=((1.0)*x6804);
IkReal x6811=((1.0)*x6805);
IkReal x6812=(sj5*x6805);
IkReal x6813=(sj5*x6804);
evalcond[0]=((((-1.0)*x6806*x6810))+((r01*x6813))+((r02*x6805)));
evalcond[1]=(((x6805*x6808))+(((-1.0)*x6809*x6811))+(((-1.0)*r22*x6810)));
evalcond[2]=(((r11*x6812))+(((-1.0)*x6807*x6811))+(((-1.0)*r12*x6810)));
evalcond[3]=((1.0)+(((-1.0)*x6806*x6811))+(((-1.0)*r02*x6810))+((r01*x6812)));
evalcond[4]=(((cj2*sj1))+((r22*x6805))+((cj1*sj2))+(((-1.0)*x6809*x6810))+((x6804*x6808)));
evalcond[5]=(((r11*x6813))+(((-1.0)*sj1*sj2))+(((-1.0)*x6807*x6810))+((r12*x6805))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6814=((1.0)*cj5);
CheckValue<IkReal> x6815=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6814))+(((-1.0)*r20*sj5)))),-1);
if(!x6815.valid){
continue;
}
CheckValue<IkReal> x6816 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6814))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6815.value)))+(x6816.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6817=IKcos(j4);
IkReal x6818=IKsin(j4);
IkReal x6819=(cj5*r00);
IkReal x6820=(cj5*r10);
IkReal x6821=(r21*sj5);
IkReal x6822=(cj5*r20);
IkReal x6823=((1.0)*x6817);
IkReal x6824=((1.0)*x6818);
IkReal x6825=(sj5*x6818);
IkReal x6826=(sj5*x6817);
evalcond[0]=(((r01*x6826))+((r02*x6818))+(((-1.0)*x6819*x6823)));
evalcond[1]=(((x6818*x6821))+(((-1.0)*r22*x6823))+(((-1.0)*x6822*x6824)));
evalcond[2]=((((-1.0)*r12*x6823))+((r11*x6825))+(((-1.0)*x6820*x6824)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6823))+((r01*x6825))+(((-1.0)*x6819*x6824)));
evalcond[4]=(((cj2*sj1))+((x6817*x6821))+((cj1*sj2))+((r22*x6818))+(((-1.0)*x6822*x6823)));
evalcond[5]=(((r12*x6818))+(((-1.0)*sj1*sj2))+((r11*x6826))+(((-1.0)*x6820*x6823))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6827 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6827.valid){
continue;
}
CheckValue<IkReal> x6828=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6827.value)+(((1.5707963267949)*(x6828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6829=IKcos(j4);
IkReal x6830=IKsin(j4);
IkReal x6831=(cj5*r00);
IkReal x6832=(cj5*r10);
IkReal x6833=(r21*sj5);
IkReal x6834=(cj5*r20);
IkReal x6835=((1.0)*x6829);
IkReal x6836=((1.0)*x6830);
IkReal x6837=(sj5*x6830);
IkReal x6838=(sj5*x6829);
evalcond[0]=(((r02*x6830))+((r01*x6838))+(((-1.0)*x6831*x6835)));
evalcond[1]=(((x6830*x6833))+(((-1.0)*r22*x6835))+(((-1.0)*x6834*x6836)));
evalcond[2]=((((-1.0)*r12*x6835))+((r11*x6837))+(((-1.0)*x6832*x6836)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6835))+((r01*x6837))+(((-1.0)*x6831*x6836)));
evalcond[4]=(((cj2*sj1))+((r22*x6830))+((cj1*sj2))+((x6829*x6833))+(((-1.0)*x6834*x6835)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x6838))+(((-1.0)*x6832*x6835))+((r12*x6830))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6839=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6839);
rxp1_1=(px*r21);
rxp1_2=(r11*x6839);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6840=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6840);
rxp1_1=(px*r21);
rxp1_2=(r11*x6840);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6841=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6841);
rxp1_1=(px*r21);
rxp1_2=(r11*x6841);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6844=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6844.valid){
continue;
}
IkReal x6842=x6844.value;
IkReal x6843=(sj0*x6842);
cj4array[0]=((((-1.0)*sj1*sj2*x6843))+((cj1*cj2*x6843)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6845=IKsin(j4);
IkReal x6846=IKcos(j4);
IkReal x6847=(r21*sj5);
IkReal x6848=((1.0)*cj5*r20);
evalcond[0]=(r02*x6845);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6846)));
evalcond[2]=(((x6845*x6847))+(((-1.0)*x6845*x6848)));
evalcond[3]=(((r11*sj5*x6845))+(((-1.0)*cj5*r10*x6845)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6846*x6848))+((x6846*x6847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6851=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6851.valid){
continue;
}
IkReal x6849=x6851.value;
IkReal x6850=((1.0)*x6849);
cj4array[0]=((((-1.0)*cj2*sj1*x6850))+(((-1.0)*cj1*sj2*x6850)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6852=IKsin(j4);
IkReal x6853=IKcos(j4);
IkReal x6854=((1.0)*sj0);
IkReal x6855=((1.0)*cj5);
IkReal x6856=(sj5*x6852);
evalcond[0]=(r02*x6852);
evalcond[1]=((((-1.0)*r02*x6853))+(((-1.0)*x6854)));
evalcond[2]=((((-1.0)*r20*x6852*x6855))+((r21*x6856)));
evalcond[3]=((((-1.0)*r10*x6852*x6855))+((r11*x6856)));
evalcond[4]=((((-1.0)*cj1*cj2*x6854))+(((-1.0)*r10*x6853*x6855))+((sj0*sj1*sj2))+((r11*sj5*x6853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6857=IKPowWithIntegerCheck(r02,-1);
if(!x6857.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6857.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6858=IKsin(j4);
IkReal x6859=IKcos(j4);
IkReal x6860=(r21*sj5);
IkReal x6861=((1.0)*cj5);
IkReal x6862=(r11*sj5);
evalcond[0]=(r02*x6858);
evalcond[1]=((((-1.0)*r20*x6858*x6861))+((x6858*x6860)));
evalcond[2]=((((-1.0)*r10*x6858*x6861))+((x6858*x6862)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6859*x6860))+(((-1.0)*r20*x6859*x6861)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((x6859*x6862))+((sj0*sj1*sj2))+(((-1.0)*r10*x6859*x6861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6863=((1.0)*sj0);
IkReal x6864=((1.0)*cj0);
CheckValue<IkReal> x6865 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6863))+(((-1.0)*r02*x6864)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6864))+(((-1.0)*r11*sj5*x6863)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6865.valid){
continue;
}
CheckValue<IkReal> x6866=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6865.value)+(((1.5707963267949)*(x6866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6867=IKsin(j4);
IkReal x6868=IKcos(j4);
IkReal x6869=(cj5*r00);
IkReal x6870=(cj5*r10);
IkReal x6871=(r21*sj5);
IkReal x6872=(sj1*sj2);
IkReal x6873=(cj5*r20);
IkReal x6874=((1.0)*x6868);
IkReal x6875=((1.0)*cj1*cj2);
IkReal x6876=((1.0)*x6867);
IkReal x6877=(sj5*x6867);
IkReal x6878=(sj5*x6868);
evalcond[0]=((((-1.0)*r22*x6874))+(((-1.0)*x6873*x6876))+((x6867*x6871)));
evalcond[1]=(((r11*x6877))+cj0+(((-1.0)*x6870*x6876))+(((-1.0)*r12*x6874)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6869*x6876))+(((-1.0)*r02*x6874))+((r01*x6877)));
evalcond[3]=(((cj2*sj1))+((r22*x6867))+((cj1*sj2))+((x6868*x6871))+(((-1.0)*x6873*x6874)));
evalcond[4]=(((r02*x6867))+(((-1.0)*x6869*x6874))+((cj0*x6872))+((r01*x6878))+(((-1.0)*cj0*x6875)));
evalcond[5]=(((sj0*x6872))+((r11*x6878))+((r12*x6867))+(((-1.0)*x6870*x6874))+(((-1.0)*sj0*x6875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6879=((1.0)*cj5);
CheckValue<IkReal> x6880=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6879)))),-1);
if(!x6880.valid){
continue;
}
CheckValue<IkReal> x6881 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6879))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6880.value)))+(x6881.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6882=IKsin(j4);
IkReal x6883=IKcos(j4);
IkReal x6884=(cj5*r00);
IkReal x6885=(cj5*r10);
IkReal x6886=(r21*sj5);
IkReal x6887=(sj1*sj2);
IkReal x6888=(cj5*r20);
IkReal x6889=((1.0)*x6883);
IkReal x6890=((1.0)*cj1*cj2);
IkReal x6891=((1.0)*x6882);
IkReal x6892=(sj5*x6882);
IkReal x6893=(sj5*x6883);
evalcond[0]=((((-1.0)*x6888*x6891))+((x6882*x6886))+(((-1.0)*r22*x6889)));
evalcond[1]=(cj0+(((-1.0)*x6885*x6891))+(((-1.0)*r12*x6889))+((r11*x6892)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6889))+(((-1.0)*x6884*x6891))+((r01*x6892)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6888*x6889))+((cj1*sj2))+((r22*x6882))+((x6883*x6886)));
evalcond[4]=((((-1.0)*cj0*x6890))+(((-1.0)*x6884*x6889))+((cj0*x6887))+((r02*x6882))+((r01*x6893)));
evalcond[5]=(((sj0*x6887))+(((-1.0)*x6885*x6889))+(((-1.0)*sj0*x6890))+((r11*x6893))+((r12*x6882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6894=((1.0)*cj5);
CheckValue<IkReal> x6895 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6894)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6895.valid){
continue;
}
CheckValue<IkReal> x6896=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6894))+(((-1.0)*r00*sj5)))),-1);
if(!x6896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6895.value)+(((1.5707963267949)*(x6896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6897=IKsin(j4);
IkReal x6898=IKcos(j4);
IkReal x6899=(cj5*r00);
IkReal x6900=(cj5*r10);
IkReal x6901=(r21*sj5);
IkReal x6902=(sj1*sj2);
IkReal x6903=(cj5*r20);
IkReal x6904=((1.0)*x6898);
IkReal x6905=((1.0)*cj1*cj2);
IkReal x6906=((1.0)*x6897);
IkReal x6907=(sj5*x6897);
IkReal x6908=(sj5*x6898);
evalcond[0]=(((x6897*x6901))+(((-1.0)*r22*x6904))+(((-1.0)*x6903*x6906)));
evalcond[1]=((((-1.0)*x6900*x6906))+cj0+(((-1.0)*r12*x6904))+((r11*x6907)));
evalcond[2]=((((-1.0)*r02*x6904))+(((-1.0)*sj0))+((r01*x6907))+(((-1.0)*x6899*x6906)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6897))+(((-1.0)*x6903*x6904))+((x6898*x6901)));
evalcond[4]=(((r01*x6908))+((r02*x6897))+(((-1.0)*cj0*x6905))+(((-1.0)*x6899*x6904))+((cj0*x6902)));
evalcond[5]=((((-1.0)*x6900*x6904))+((r12*x6897))+((r11*x6908))+(((-1.0)*sj0*x6905))+((sj0*x6902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6909=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6909;
j0eval[1]=IKsign(x6909);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6910=cj5*cj5;
IkReal x6911=r21*r21;
IkReal x6912=(cj2*sj1);
IkReal x6913=(cj1*sj2);
IkReal x6914=(r21*sj5);
IkReal x6915=((1.0)*cj5*r20);
IkReal x6916=((r22*r22)+(((-1.0)*x6910*x6911))+(((-2.0)*cj5*r20*x6914))+x6911+((x6910*(r20*r20))));
j4eval[0]=x6916;
j4eval[1]=IKsign(x6916);
j4eval[2]=((IKabs(((((-1.0)*x6912*x6915))+((x6913*x6914))+((x6912*x6914))+(((-1.0)*x6913*x6915)))))+(IKabs((((r22*x6912))+((r22*x6913))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6917=cj1*cj1;
IkReal x6918=(cj2*sj2);
IkReal x6919=(cj2*sj1);
IkReal x6920=(cj1*sj1);
j0eval[0]=((((-1.08418367346939)*cj1*x6919))+(((-2.0)*cj1*cj2*x6919))+(((-2.0)*x6917*x6918))+x6920+x6918+(((-1.08418367346939)*sj2*x6917)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6919)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.19192641276835)*py))+(((-0.195493438569105)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19192641276835)*px))+(((0.195493438569105)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.19192641276835)*py))+(((-0.195493438569105)*px))))+IKsqr(((((1.19192641276835)*px))+(((0.195493438569105)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.19192641276835)*py))+(((-0.195493438569105)*px))), ((((1.19192641276835)*px))+(((0.195493438569105)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6921=IKcos(j0);
IkReal x6922=IKsin(j0);
evalcond[0]=((((-0.134)*x6922))+(((-1.0)*px))+(((0.817)*x6921)));
evalcond[1]=((((-1.0)*py))+(((0.817)*x6922))+(((0.134)*x6921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6923=((1.0)*cj5);
IkReal x6924=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6923)));
j4eval[0]=x6924;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6923)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6924);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6925=((1.0)*cj5);
IkReal x6926=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6925)));
j4eval[0]=x6926;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6925))))));
j4eval[2]=IKsign(x6926);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6927=cj5*cj5;
IkReal x6928=((1.0)*sj5);
IkReal x6929=(cj5*r20);
IkReal x6930=(r11*r21);
IkReal x6931=((((-1.0)*r11*x6928*x6929))+(((-1.0)*cj5*r10*r21*x6928))+((r12*r22))+(((-1.0)*x6927*x6930))+x6930+((r10*r20*x6927)));
j4eval[0]=x6931;
j4eval[1]=IKsign(x6931);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6928))+((cj0*x6929)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6932=cj5*cj5;
IkReal x6933=((1.0)*sj5);
IkReal x6934=(cj5*r20);
IkReal x6935=(r11*r21);
CheckValue<IkReal> x6936=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x6933))+(((-1.0)*r11*x6933*x6934))+((r12*r22))+(((-1.0)*x6932*x6935))+x6935+((r10*r20*x6932)))),-1);
if(!x6936.valid){
continue;
}
CheckValue<IkReal> x6937 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6933))+((cj0*x6934)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6936.value)))+(x6937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6938=IKsin(j4);
IkReal x6939=IKcos(j4);
IkReal x6940=((1.0)*sj0);
IkReal x6941=(cj5*r00);
IkReal x6942=(r11*sj5);
IkReal x6943=(cj5*r10);
IkReal x6944=(r21*sj5);
IkReal x6945=(cj5*r20);
IkReal x6946=(r01*sj5);
IkReal x6947=((1.0)*x6939);
IkReal x6948=((1.0)*x6938);
evalcond[0]=(((x6938*x6944))+(((-1.0)*x6945*x6948))+(((-1.0)*r22*x6947)));
evalcond[1]=(((x6939*x6945))+(((-1.0)*r22*x6948))+(((-1.0)*x6944*x6947)));
evalcond[2]=((((-1.0)*x6943*x6948))+cj0+(((-1.0)*r12*x6947))+((x6938*x6942)));
evalcond[3]=(((x6938*x6946))+(((-1.0)*x6940))+(((-1.0)*x6941*x6948))+(((-1.0)*r02*x6947)));
evalcond[4]=(((x6939*x6941))+(((-1.0)*r02*x6948))+(((-1.0)*x6946*x6947))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x6948))+(((-1.0)*x6942*x6947))+(((-1.0)*x6940))+((x6939*x6943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6949=((1.0)*cj5);
CheckValue<IkReal> x6950=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6949))+(((-1.0)*r10*sj5)))),-1);
if(!x6950.valid){
continue;
}
CheckValue<IkReal> x6951 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6950.value)))+(x6951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6952=IKsin(j4);
IkReal x6953=IKcos(j4);
IkReal x6954=((1.0)*sj0);
IkReal x6955=(cj5*r00);
IkReal x6956=(r11*sj5);
IkReal x6957=(cj5*r10);
IkReal x6958=(r21*sj5);
IkReal x6959=(cj5*r20);
IkReal x6960=(r01*sj5);
IkReal x6961=((1.0)*x6953);
IkReal x6962=((1.0)*x6952);
evalcond[0]=(((x6952*x6958))+(((-1.0)*x6959*x6962))+(((-1.0)*r22*x6961)));
evalcond[1]=((((-1.0)*x6958*x6961))+(((-1.0)*r22*x6962))+((x6953*x6959)));
evalcond[2]=(((x6952*x6956))+cj0+(((-1.0)*r12*x6961))+(((-1.0)*x6957*x6962)));
evalcond[3]=((((-1.0)*r02*x6961))+(((-1.0)*x6954))+((x6952*x6960))+(((-1.0)*x6955*x6962)));
evalcond[4]=((((-1.0)*r02*x6962))+(((-1.0)*x6960*x6961))+((x6953*x6955))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6954))+(((-1.0)*r12*x6962))+((x6953*x6957))+(((-1.0)*x6956*x6961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6963=((1.0)*cj5);
CheckValue<IkReal> x6964 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6963))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6964.valid){
continue;
}
CheckValue<IkReal> x6965=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6963)))),-1);
if(!x6965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6964.value)+(((1.5707963267949)*(x6965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6966=IKsin(j4);
IkReal x6967=IKcos(j4);
IkReal x6968=((1.0)*sj0);
IkReal x6969=(cj5*r00);
IkReal x6970=(r11*sj5);
IkReal x6971=(cj5*r10);
IkReal x6972=(r21*sj5);
IkReal x6973=(cj5*r20);
IkReal x6974=(r01*sj5);
IkReal x6975=((1.0)*x6967);
IkReal x6976=((1.0)*x6966);
evalcond[0]=(((x6966*x6972))+(((-1.0)*r22*x6975))+(((-1.0)*x6973*x6976)));
evalcond[1]=(((x6967*x6973))+(((-1.0)*r22*x6976))+(((-1.0)*x6972*x6975)));
evalcond[2]=(cj0+(((-1.0)*r12*x6975))+(((-1.0)*x6971*x6976))+((x6966*x6970)));
evalcond[3]=((((-1.0)*r02*x6975))+(((-1.0)*x6969*x6976))+(((-1.0)*x6968))+((x6966*x6974)));
evalcond[4]=((((-1.0)*x6974*x6975))+(((-1.0)*r02*x6976))+((x6967*x6969))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6970*x6975))+((x6967*x6971))+(((-1.0)*r12*x6976))+(((-1.0)*x6968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.73273825150958)*px))+(((7.03596744552376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((1.73273825150958)*px))+(((7.03596744552376)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((1.73273825150958)*px))+(((7.03596744552376)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6977=IKcos(j0);
IkReal x6978=IKsin(j0);
evalcond[0]=((((-0.134)*x6978))+(((-1.0)*px))+(((0.033)*x6977)));
evalcond[1]=((((0.134)*x6977))+(((-1.0)*py))+(((0.033)*x6978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6979=((1.0)*cj5);
IkReal x6980=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6979)));
j4eval[0]=x6980;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x6979))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6980);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6981=cj5*cj5;
IkReal x6982=((1.0)*r21);
IkReal x6983=(cj5*sj5);
IkReal x6984=((1.0)*r20);
IkReal x6985=(((r00*r20*x6981))+(((-1.0)*r01*x6981*x6982))+((r01*r21))+(((-1.0)*r00*x6982*x6983))+(((-1.0)*r01*x6983*x6984))+((r02*r22)));
j4eval[0]=x6985;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x6984))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6985);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6986=cj5*cj5;
IkReal x6987=(r21*sj5);
IkReal x6988=(r11*r21);
IkReal x6989=((1.0)*cj5*r20);
IkReal x6990=(((r12*r22))+(((-1.0)*x6986*x6988))+(((-1.0)*r11*sj5*x6989))+(((-1.0)*cj5*r10*x6987))+x6988+((r10*r20*x6986)));
j4eval[0]=x6990;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x6989))+((sj0*x6987))))));
j4eval[2]=IKsign(x6990);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6991=cj5*cj5;
IkReal x6992=(r21*sj5);
IkReal x6993=(r11*r21);
IkReal x6994=((1.0)*cj5*r20);
CheckValue<IkReal> x6995 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6992))+(((-1.0)*sj0*x6994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6995.valid){
continue;
}
CheckValue<IkReal> x6996=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*x6991*x6993))+x6993+((r10*r20*x6991))+(((-1.0)*cj5*r10*x6992))+(((-1.0)*r11*sj5*x6994)))),-1);
if(!x6996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6995.value)+(((1.5707963267949)*(x6996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6997=IKsin(j4);
IkReal x6998=IKcos(j4);
IkReal x6999=(r11*sj5);
IkReal x7000=(cj5*r00);
IkReal x7001=(cj5*r10);
IkReal x7002=(r21*sj5);
IkReal x7003=(cj5*r20);
IkReal x7004=(r01*sj5);
IkReal x7005=((1.0)*x6998);
IkReal x7006=((1.0)*x6997);
evalcond[0]=((((-1.0)*r22*x7005))+(((-1.0)*x7003*x7006))+((x6997*x7002)));
evalcond[1]=((((-1.0)*r22*x7006))+(((-1.0)*x7002*x7005))+((x6998*x7003)));
evalcond[2]=((((-1.0)*r12*x7005))+cj0+((x6997*x6999))+(((-1.0)*x7001*x7006)));
evalcond[3]=((((-1.0)*r02*x7006))+cj0+((x6998*x7000))+(((-1.0)*x7004*x7005)));
evalcond[4]=((((-1.0)*r12*x7006))+sj0+((x6998*x7001))+(((-1.0)*x6999*x7005)));
evalcond[5]=((((-1.0)*r02*x7005))+(((-1.0)*sj0))+(((-1.0)*x7000*x7006))+((x6997*x7004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7007=cj5*cj5;
IkReal x7008=((1.0)*r21);
IkReal x7009=(cj5*sj5);
IkReal x7010=((1.0)*r20);
CheckValue<IkReal> x7011=IKPowWithIntegerCheck(IKsign((((r00*r20*x7007))+(((-1.0)*r01*x7009*x7010))+((r01*r21))+(((-1.0)*r00*x7008*x7009))+(((-1.0)*r01*x7007*x7008))+((r02*r22)))),-1);
if(!x7011.valid){
continue;
}
CheckValue<IkReal> x7012 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7010)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7011.value)))+(x7012.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7013=IKsin(j4);
IkReal x7014=IKcos(j4);
IkReal x7015=(r11*sj5);
IkReal x7016=(cj5*r00);
IkReal x7017=(cj5*r10);
IkReal x7018=(r21*sj5);
IkReal x7019=(cj5*r20);
IkReal x7020=(r01*sj5);
IkReal x7021=((1.0)*x7014);
IkReal x7022=((1.0)*x7013);
evalcond[0]=((((-1.0)*r22*x7021))+((x7013*x7018))+(((-1.0)*x7019*x7022)));
evalcond[1]=((((-1.0)*r22*x7022))+(((-1.0)*x7018*x7021))+((x7014*x7019)));
evalcond[2]=((((-1.0)*r12*x7021))+((x7013*x7015))+cj0+(((-1.0)*x7017*x7022)));
evalcond[3]=(cj0+((x7014*x7016))+(((-1.0)*r02*x7022))+(((-1.0)*x7020*x7021)));
evalcond[4]=((((-1.0)*r12*x7022))+sj0+(((-1.0)*x7015*x7021))+((x7014*x7017)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7021))+((x7013*x7020))+(((-1.0)*x7016*x7022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7023=((1.0)*cj5);
CheckValue<IkReal> x7024=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7023)))),-1);
if(!x7024.valid){
continue;
}
CheckValue<IkReal> x7025 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7024.value)))+(x7025.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7026=IKsin(j4);
IkReal x7027=IKcos(j4);
IkReal x7028=(r11*sj5);
IkReal x7029=(cj5*r00);
IkReal x7030=(cj5*r10);
IkReal x7031=(r21*sj5);
IkReal x7032=(cj5*r20);
IkReal x7033=(r01*sj5);
IkReal x7034=((1.0)*x7027);
IkReal x7035=((1.0)*x7026);
evalcond[0]=((((-1.0)*r22*x7034))+((x7026*x7031))+(((-1.0)*x7032*x7035)));
evalcond[1]=(((x7027*x7032))+(((-1.0)*x7031*x7034))+(((-1.0)*r22*x7035)));
evalcond[2]=(((x7026*x7028))+cj0+(((-1.0)*r12*x7034))+(((-1.0)*x7030*x7035)));
evalcond[3]=((((-1.0)*r02*x7035))+cj0+((x7027*x7029))+(((-1.0)*x7033*x7034)));
evalcond[4]=(((x7027*x7030))+sj0+(((-1.0)*r12*x7035))+(((-1.0)*x7028*x7034)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7034))+((x7026*x7033))+(((-1.0)*x7029*x7035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7036=((1.0)*sj5);
IkReal x7037=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7037))+(((-1.0)*r10*x7036)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x7037))+(((-1.0)*r00*x7036)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7037))+(((-1.0)*r10*x7036))))+IKsqr(((((-1.0)*r01*x7037))+(((-1.0)*r00*x7036))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7037))+(((-1.0)*r10*x7036))), ((((-1.0)*r01*x7037))+(((-1.0)*r00*x7036))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7038=IKsin(j0);
IkReal x7039=IKcos(j0);
IkReal x7040=((0.1)*sj5);
IkReal x7041=(cj5*r11);
IkReal x7042=(cj5*r01);
IkReal x7043=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7042))+(((-1.0)*x7039))+(((-1.0)*r00*x7043)));
evalcond[1]=((((-1.0)*x7041))+(((-1.0)*x7038))+(((-1.0)*r10*x7043)));
evalcond[2]=((((-1.0)*r00*x7040))+(((-1.0)*px))+(((-0.1)*x7042))+(((-0.134)*x7038)));
evalcond[3]=((((-1.0)*py))+(((-0.1)*x7041))+(((0.134)*x7039))+(((-1.0)*r10*x7040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7044=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7044;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7045=((1.0)*cj5);
IkReal x7046=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7045)));
j4eval[0]=x7046;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7045))))));
j4eval[2]=IKsign(x7046);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7047=cj5*cj5;
IkReal x7048=r21*r21;
IkReal x7049=(r21*sj5);
IkReal x7050=(cj5*r20);
IkReal x7051=(x7048+((x7047*(r20*r20)))+(r22*r22)+(((-2.0)*x7049*x7050))+(((-1.0)*x7047*x7048)));
j4eval[0]=x7051;
j4eval[1]=IKsign(x7051);
j4eval[2]=((IKabs(r22))+(IKabs((x7049+(((-1.0)*x7050))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7052=cj5*cj5;
IkReal x7053=r21*r21;
IkReal x7054=(r21*sj5);
IkReal x7055=(cj5*r20);
CheckValue<IkReal> x7056 = IKatan2WithCheck(IkReal(r22),IkReal((x7054+(((-1.0)*x7055)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7056.valid){
continue;
}
CheckValue<IkReal> x7057=IKPowWithIntegerCheck(IKsign((x7053+(((-1.0)*x7052*x7053))+(r22*r22)+((x7052*(r20*r20)))+(((-2.0)*x7054*x7055)))),-1);
if(!x7057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7056.value)+(((1.5707963267949)*(x7057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7058=IKsin(j4);
IkReal x7059=IKcos(j4);
IkReal x7060=(r11*sj5);
IkReal x7061=(r21*sj5);
IkReal x7062=(cj5*r00);
IkReal x7063=(cj5*r20);
IkReal x7064=(r01*sj5);
IkReal x7065=(cj5*r10);
IkReal x7066=((1.0)*x7059);
IkReal x7067=((1.0)*x7058);
evalcond[0]=((((-1.0)*x7063*x7067))+((x7058*x7061))+(((-1.0)*r22*x7066)));
evalcond[1]=(((x7059*x7062))+(((-1.0)*x7064*x7066))+(((-1.0)*r02*x7067)));
evalcond[2]=(((x7059*x7065))+(((-1.0)*r12*x7067))+(((-1.0)*x7060*x7066)));
evalcond[3]=(cj0+(((-1.0)*x7065*x7067))+(((-1.0)*r12*x7066))+((x7058*x7060)));
evalcond[4]=((1.0)+((x7059*x7063))+(((-1.0)*x7061*x7066))+(((-1.0)*r22*x7067)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7062*x7067))+(((-1.0)*r02*x7066))+((x7058*x7064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7068=((1.0)*cj5);
CheckValue<IkReal> x7069 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7068)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7069.valid){
continue;
}
CheckValue<IkReal> x7070=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7068))+(((-1.0)*r00*sj5)))),-1);
if(!x7070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7069.value)+(((1.5707963267949)*(x7070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7071=IKsin(j4);
IkReal x7072=IKcos(j4);
IkReal x7073=(r11*sj5);
IkReal x7074=(r21*sj5);
IkReal x7075=(cj5*r00);
IkReal x7076=(cj5*r20);
IkReal x7077=(r01*sj5);
IkReal x7078=(cj5*r10);
IkReal x7079=((1.0)*x7072);
IkReal x7080=((1.0)*x7071);
evalcond[0]=((((-1.0)*x7076*x7080))+((x7071*x7074))+(((-1.0)*r22*x7079)));
evalcond[1]=(((x7072*x7075))+(((-1.0)*x7077*x7079))+(((-1.0)*r02*x7080)));
evalcond[2]=(((x7072*x7078))+(((-1.0)*x7073*x7079))+(((-1.0)*r12*x7080)));
evalcond[3]=(cj0+((x7071*x7073))+(((-1.0)*r12*x7079))+(((-1.0)*x7078*x7080)));
evalcond[4]=((1.0)+((x7072*x7076))+(((-1.0)*r22*x7080))+(((-1.0)*x7074*x7079)));
evalcond[5]=((((-1.0)*sj0))+((x7071*x7077))+(((-1.0)*r02*x7079))+(((-1.0)*x7075*x7080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7081 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7081.valid){
continue;
}
CheckValue<IkReal> x7082=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7081.value)+(((1.5707963267949)*(x7082.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7083=IKsin(j4);
IkReal x7084=IKcos(j4);
IkReal x7085=(r11*sj5);
IkReal x7086=(r21*sj5);
IkReal x7087=(cj5*r00);
IkReal x7088=(cj5*r20);
IkReal x7089=(r01*sj5);
IkReal x7090=(cj5*r10);
IkReal x7091=((1.0)*x7084);
IkReal x7092=((1.0)*x7083);
evalcond[0]=((((-1.0)*x7088*x7092))+(((-1.0)*r22*x7091))+((x7083*x7086)));
evalcond[1]=((((-1.0)*x7089*x7091))+(((-1.0)*r02*x7092))+((x7084*x7087)));
evalcond[2]=((((-1.0)*r12*x7092))+((x7084*x7090))+(((-1.0)*x7085*x7091)));
evalcond[3]=(cj0+(((-1.0)*r12*x7091))+(((-1.0)*x7090*x7092))+((x7083*x7085)));
evalcond[4]=((1.0)+(((-1.0)*x7086*x7091))+(((-1.0)*r22*x7092))+((x7084*x7088)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7087*x7092))+((x7083*x7089))+(((-1.0)*r02*x7091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7093=IKcos(j0);
IkReal x7094=IKsin(j0);
evalcond[0]=((((-0.134)*x7094))+(((-1.0)*px))+(((-0.392)*x7093)));
evalcond[1]=((((0.134)*x7093))+(((-1.0)*py))+(((-0.392)*x7094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7095=((1.0)*cj5);
IkReal x7096=((((-1.0)*r01*x7095))+(((-1.0)*r00*sj5)));
j4eval[0]=x7096;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7095)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7096);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7097=cj5*cj5;
IkReal x7098=((1.0)*r21);
IkReal x7099=(cj5*sj5);
IkReal x7100=((1.0)*r20);
IkReal x7101=(((r01*r21))+(((-1.0)*r01*x7097*x7098))+(((-1.0)*r01*x7099*x7100))+((r02*r22))+((r00*r20*x7097))+(((-1.0)*r00*x7098*x7099)));
j4eval[0]=x7101;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7100)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7101);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7102=cj5*cj5;
IkReal x7103=(r21*sj5);
IkReal x7104=(r11*r21);
IkReal x7105=((1.0)*cj5*r20);
IkReal x7106=(x7104+(((-1.0)*x7102*x7104))+((r12*r22))+((r10*r20*x7102))+(((-1.0)*r11*sj5*x7105))+(((-1.0)*cj5*r10*x7103)));
j4eval[0]=x7106;
j4eval[1]=((IKabs((((sj0*x7103))+(((-1.0)*sj0*x7105)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7106);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7107=cj5*cj5;
IkReal x7108=(r21*sj5);
IkReal x7109=(r11*r21);
IkReal x7110=((1.0)*cj5*r20);
CheckValue<IkReal> x7111 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7108))+(((-1.0)*sj0*x7110)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7111.valid){
continue;
}
CheckValue<IkReal> x7112=IKPowWithIntegerCheck(IKsign((x7109+((r12*r22))+((r10*r20*x7107))+(((-1.0)*x7107*x7109))+(((-1.0)*cj5*r10*x7108))+(((-1.0)*r11*sj5*x7110)))),-1);
if(!x7112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7111.value)+(((1.5707963267949)*(x7112.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7113=IKsin(j4);
IkReal x7114=IKcos(j4);
IkReal x7115=(r11*sj5);
IkReal x7116=(cj5*r00);
IkReal x7117=(cj5*r10);
IkReal x7118=(r21*sj5);
IkReal x7119=(cj5*r20);
IkReal x7120=(r01*sj5);
IkReal x7121=((1.0)*x7114);
IkReal x7122=((1.0)*x7113);
evalcond[0]=(((x7113*x7118))+(((-1.0)*x7119*x7122))+(((-1.0)*r22*x7121)));
evalcond[1]=((((-1.0)*x7118*x7121))+(((-1.0)*r22*x7122))+((x7114*x7119)));
evalcond[2]=(((x7113*x7115))+cj0+(((-1.0)*r12*x7121))+(((-1.0)*x7117*x7122)));
evalcond[3]=((((-1.0)*x7120*x7121))+cj0+(((-1.0)*r02*x7122))+((x7114*x7116)));
evalcond[4]=(sj0+(((-1.0)*x7115*x7121))+(((-1.0)*r12*x7122))+((x7114*x7117)));
evalcond[5]=((((-1.0)*x7116*x7122))+(((-1.0)*sj0))+(((-1.0)*r02*x7121))+((x7113*x7120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7123=cj5*cj5;
IkReal x7124=((1.0)*r21);
IkReal x7125=(cj5*sj5);
IkReal x7126=((1.0)*r20);
CheckValue<IkReal> x7127 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7127.valid){
continue;
}
CheckValue<IkReal> x7128=IKPowWithIntegerCheck(IKsign((((r00*r20*x7123))+((r01*r21))+(((-1.0)*r01*x7125*x7126))+(((-1.0)*r00*x7124*x7125))+((r02*r22))+(((-1.0)*r01*x7123*x7124)))),-1);
if(!x7128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7127.value)+(((1.5707963267949)*(x7128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7129=IKsin(j4);
IkReal x7130=IKcos(j4);
IkReal x7131=(r11*sj5);
IkReal x7132=(cj5*r00);
IkReal x7133=(cj5*r10);
IkReal x7134=(r21*sj5);
IkReal x7135=(cj5*r20);
IkReal x7136=(r01*sj5);
IkReal x7137=((1.0)*x7130);
IkReal x7138=((1.0)*x7129);
evalcond[0]=((((-1.0)*r22*x7137))+(((-1.0)*x7135*x7138))+((x7129*x7134)));
evalcond[1]=((((-1.0)*r22*x7138))+((x7130*x7135))+(((-1.0)*x7134*x7137)));
evalcond[2]=((((-1.0)*r12*x7137))+cj0+(((-1.0)*x7133*x7138))+((x7129*x7131)));
evalcond[3]=(cj0+(((-1.0)*x7136*x7137))+((x7130*x7132))+(((-1.0)*r02*x7138)));
evalcond[4]=(sj0+(((-1.0)*r12*x7138))+((x7130*x7133))+(((-1.0)*x7131*x7137)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7132*x7138))+((x7129*x7136))+(((-1.0)*r02*x7137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7139=((1.0)*cj5);
CheckValue<IkReal> x7140 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7139)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7140.valid){
continue;
}
CheckValue<IkReal> x7141=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7139))+(((-1.0)*r00*sj5)))),-1);
if(!x7141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7140.value)+(((1.5707963267949)*(x7141.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7142=IKsin(j4);
IkReal x7143=IKcos(j4);
IkReal x7144=(r11*sj5);
IkReal x7145=(cj5*r00);
IkReal x7146=(cj5*r10);
IkReal x7147=(r21*sj5);
IkReal x7148=(cj5*r20);
IkReal x7149=(r01*sj5);
IkReal x7150=((1.0)*x7143);
IkReal x7151=((1.0)*x7142);
evalcond[0]=((((-1.0)*r22*x7150))+(((-1.0)*x7148*x7151))+((x7142*x7147)));
evalcond[1]=((((-1.0)*r22*x7151))+((x7143*x7148))+(((-1.0)*x7147*x7150)));
evalcond[2]=((((-1.0)*x7146*x7151))+(((-1.0)*r12*x7150))+cj0+((x7142*x7144)));
evalcond[3]=(cj0+(((-1.0)*x7149*x7150))+(((-1.0)*r02*x7151))+((x7143*x7145)));
evalcond[4]=((((-1.0)*r12*x7151))+sj0+(((-1.0)*x7144*x7150))+((x7143*x7146)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7145*x7151))+(((-1.0)*r02*x7150))+((x7142*x7149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7152=IKsin(j0);
IkReal x7153=IKcos(j0);
IkReal x7154=((0.1)*sj5);
IkReal x7155=(cj5*r11);
IkReal x7156=(cj5*r01);
IkReal x7157=((1.0)*sj5);
evalcond[0]=(x7153+(((-1.0)*r00*x7157))+(((-1.0)*x7156)));
evalcond[1]=(x7152+(((-1.0)*r10*x7157))+(((-1.0)*x7155)));
evalcond[2]=((((-1.0)*r00*x7154))+(((-0.1)*x7156))+(((-1.0)*px))+(((-0.134)*x7152)));
evalcond[3]=((((0.134)*x7153))+(((-0.1)*x7155))+(((-1.0)*py))+(((-1.0)*r10*x7154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7158=((1.0)*sj5);
IkReal x7159=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7158)));
j4eval[0]=x7159;
j4eval[1]=IKsign(x7159);
j4eval[2]=((IKabs(((((-1.0)*r01*x7158))+((cj5*r00)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7160=((1.0)*cj5);
IkReal x7161=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7160)));
j4eval[0]=x7161;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7160)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7161);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7162=r21*r21;
IkReal x7163=cj5*cj5;
IkReal x7164=(r21*sj5);
IkReal x7165=(cj5*r20);
IkReal x7166=(((x7162*x7163))+(((2.0)*x7164*x7165))+(((-1.0)*(r22*r22)))+(((-1.0)*x7162))+(((-1.0)*x7163*(r20*r20))));
j4eval[0]=x7166;
j4eval[1]=((IKabs((x7164+(((-1.0)*x7165)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7166);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7167=r21*r21;
IkReal x7168=cj5*cj5;
IkReal x7169=(r21*sj5);
IkReal x7170=(cj5*r20);
CheckValue<IkReal> x7171 = IKatan2WithCheck(IkReal(r22),IkReal((x7169+(((-1.0)*x7170)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7171.valid){
continue;
}
CheckValue<IkReal> x7172=IKPowWithIntegerCheck(IKsign(((((2.0)*x7169*x7170))+(((-1.0)*x7168*(r20*r20)))+((x7167*x7168))+(((-1.0)*(r22*r22)))+(((-1.0)*x7167)))),-1);
if(!x7172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7171.value)+(((1.5707963267949)*(x7172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7173=IKsin(j4);
IkReal x7174=IKcos(j4);
IkReal x7175=(r11*sj5);
IkReal x7176=(r21*sj5);
IkReal x7177=(cj5*r00);
IkReal x7178=(cj5*r20);
IkReal x7179=(r01*sj5);
IkReal x7180=(cj5*r10);
IkReal x7181=((1.0)*x7174);
IkReal x7182=((1.0)*x7173);
evalcond[0]=((((-1.0)*x7178*x7182))+((x7173*x7176))+(((-1.0)*r22*x7181)));
evalcond[1]=((((-1.0)*x7179*x7181))+(((-1.0)*r02*x7182))+((x7174*x7177)));
evalcond[2]=((((-1.0)*x7175*x7181))+((x7174*x7180))+(((-1.0)*r12*x7182)));
evalcond[3]=(cj0+((x7173*x7175))+(((-1.0)*x7180*x7182))+(((-1.0)*r12*x7181)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7182))+((x7174*x7178))+(((-1.0)*x7176*x7181)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7177*x7182))+((x7173*x7179))+(((-1.0)*r02*x7181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7183=((1.0)*cj5);
CheckValue<IkReal> x7184=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7183)))),-1);
if(!x7184.valid){
continue;
}
CheckValue<IkReal> x7185 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7183)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7184.value)))+(x7185.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7186=IKsin(j4);
IkReal x7187=IKcos(j4);
IkReal x7188=(r11*sj5);
IkReal x7189=(r21*sj5);
IkReal x7190=(cj5*r00);
IkReal x7191=(cj5*r20);
IkReal x7192=(r01*sj5);
IkReal x7193=(cj5*r10);
IkReal x7194=((1.0)*x7187);
IkReal x7195=((1.0)*x7186);
evalcond[0]=(((x7186*x7189))+(((-1.0)*x7191*x7195))+(((-1.0)*r22*x7194)));
evalcond[1]=(((x7187*x7190))+(((-1.0)*r02*x7195))+(((-1.0)*x7192*x7194)));
evalcond[2]=((((-1.0)*x7188*x7194))+(((-1.0)*r12*x7195))+((x7187*x7193)));
evalcond[3]=(((x7186*x7188))+cj0+(((-1.0)*x7193*x7195))+(((-1.0)*r12*x7194)));
evalcond[4]=((-1.0)+(((-1.0)*x7189*x7194))+(((-1.0)*r22*x7195))+((x7187*x7191)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7190*x7195))+(((-1.0)*r02*x7194))+((x7186*x7192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7196=((1.0)*sj5);
CheckValue<IkReal> x7197 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7196))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7197.valid){
continue;
}
CheckValue<IkReal> x7198=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7196)))),-1);
if(!x7198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7197.value)+(((1.5707963267949)*(x7198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7199=IKsin(j4);
IkReal x7200=IKcos(j4);
IkReal x7201=(r11*sj5);
IkReal x7202=(r21*sj5);
IkReal x7203=(cj5*r00);
IkReal x7204=(cj5*r20);
IkReal x7205=(r01*sj5);
IkReal x7206=(cj5*r10);
IkReal x7207=((1.0)*x7200);
IkReal x7208=((1.0)*x7199);
evalcond[0]=(((x7199*x7202))+(((-1.0)*x7204*x7208))+(((-1.0)*r22*x7207)));
evalcond[1]=(((x7200*x7203))+(((-1.0)*x7205*x7207))+(((-1.0)*r02*x7208)));
evalcond[2]=(((x7200*x7206))+(((-1.0)*x7201*x7207))+(((-1.0)*r12*x7208)));
evalcond[3]=(cj0+(((-1.0)*x7206*x7208))+((x7199*x7201))+(((-1.0)*r12*x7207)));
evalcond[4]=((-1.0)+((x7200*x7204))+(((-1.0)*x7202*x7207))+(((-1.0)*r22*x7208)));
evalcond[5]=((((-1.0)*sj0))+((x7199*x7205))+(((-1.0)*x7203*x7208))+(((-1.0)*r02*x7207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7209=IKsin(j0);
IkReal x7210=IKcos(j0);
evalcond[0]=((((0.392)*x7210))+(((-1.0)*px))+(((-0.134)*x7209)));
evalcond[1]=((((-1.0)*py))+(((0.392)*x7209))+(((0.134)*x7210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7211=((1.0)*cj5);
IkReal x7212=((((-1.0)*r01*x7211))+(((-1.0)*r00*sj5)));
j4eval[0]=x7212;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7211)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7212);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7213=((1.0)*cj5);
IkReal x7214=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7213)));
j4eval[0]=x7214;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x7213))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7214);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7215=cj5*cj5;
IkReal x7216=((1.0)*sj5);
IkReal x7217=(cj5*r20);
IkReal x7218=(r11*r21);
IkReal x7219=((((-1.0)*x7215*x7218))+x7218+((r10*r20*x7215))+(((-1.0)*cj5*r10*r21*x7216))+((r12*r22))+(((-1.0)*r11*x7216*x7217)));
j4eval[0]=x7219;
j4eval[1]=IKsign(x7219);
j4eval[2]=((IKabs((((cj0*x7217))+(((-1.0)*cj0*r21*x7216)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7220=cj5*cj5;
IkReal x7221=((1.0)*sj5);
IkReal x7222=(cj5*r20);
IkReal x7223=(r11*r21);
CheckValue<IkReal> x7224 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7221))+((cj0*x7222)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7224.valid){
continue;
}
CheckValue<IkReal> x7225=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7220*x7223))+((r10*r20*x7220))+(((-1.0)*r11*x7221*x7222))+x7223+((r12*r22))+(((-1.0)*cj5*r10*r21*x7221)))),-1);
if(!x7225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7224.value)+(((1.5707963267949)*(x7225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7226=IKsin(j4);
IkReal x7227=IKcos(j4);
IkReal x7228=((1.0)*sj0);
IkReal x7229=(cj5*r00);
IkReal x7230=(r11*sj5);
IkReal x7231=(cj5*r10);
IkReal x7232=(r21*sj5);
IkReal x7233=(cj5*r20);
IkReal x7234=(r01*sj5);
IkReal x7235=((1.0)*x7227);
IkReal x7236=((1.0)*x7226);
evalcond[0]=((((-1.0)*x7233*x7236))+(((-1.0)*r22*x7235))+((x7226*x7232)));
evalcond[1]=((((-1.0)*x7232*x7235))+(((-1.0)*r22*x7236))+((x7227*x7233)));
evalcond[2]=((((-1.0)*x7231*x7236))+cj0+((x7226*x7230))+(((-1.0)*r12*x7235)));
evalcond[3]=((((-1.0)*x7229*x7236))+(((-1.0)*x7228))+(((-1.0)*r02*x7235))+((x7226*x7234)));
evalcond[4]=((((-1.0)*x7234*x7235))+(((-1.0)*r02*x7236))+((x7227*x7229))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7230*x7235))+(((-1.0)*x7228))+(((-1.0)*r12*x7236))+((x7227*x7231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7237=((1.0)*cj5);
CheckValue<IkReal> x7238=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7237)))),-1);
if(!x7238.valid){
continue;
}
CheckValue<IkReal> x7239 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7237))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7238.value)))+(x7239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7240=IKsin(j4);
IkReal x7241=IKcos(j4);
IkReal x7242=((1.0)*sj0);
IkReal x7243=(cj5*r00);
IkReal x7244=(r11*sj5);
IkReal x7245=(cj5*r10);
IkReal x7246=(r21*sj5);
IkReal x7247=(cj5*r20);
IkReal x7248=(r01*sj5);
IkReal x7249=((1.0)*x7241);
IkReal x7250=((1.0)*x7240);
evalcond[0]=(((x7240*x7246))+(((-1.0)*x7247*x7250))+(((-1.0)*r22*x7249)));
evalcond[1]=((((-1.0)*x7246*x7249))+(((-1.0)*r22*x7250))+((x7241*x7247)));
evalcond[2]=(((x7240*x7244))+(((-1.0)*r12*x7249))+cj0+(((-1.0)*x7245*x7250)));
evalcond[3]=((((-1.0)*x7243*x7250))+((x7240*x7248))+(((-1.0)*r02*x7249))+(((-1.0)*x7242)));
evalcond[4]=((((-1.0)*x7248*x7249))+(((-1.0)*r02*x7250))+((x7241*x7243))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7244*x7249))+(((-1.0)*r12*x7250))+((x7241*x7245))+(((-1.0)*x7242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7251=((1.0)*cj5);
CheckValue<IkReal> x7252=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7251)))),-1);
if(!x7252.valid){
continue;
}
CheckValue<IkReal> x7253 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7251)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7252.value)))+(x7253.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7254=IKsin(j4);
IkReal x7255=IKcos(j4);
IkReal x7256=((1.0)*sj0);
IkReal x7257=(cj5*r00);
IkReal x7258=(r11*sj5);
IkReal x7259=(cj5*r10);
IkReal x7260=(r21*sj5);
IkReal x7261=(cj5*r20);
IkReal x7262=(r01*sj5);
IkReal x7263=((1.0)*x7255);
IkReal x7264=((1.0)*x7254);
evalcond[0]=((((-1.0)*r22*x7263))+(((-1.0)*x7261*x7264))+((x7254*x7260)));
evalcond[1]=(((x7255*x7261))+(((-1.0)*r22*x7264))+(((-1.0)*x7260*x7263)));
evalcond[2]=(cj0+(((-1.0)*x7259*x7264))+(((-1.0)*r12*x7263))+((x7254*x7258)));
evalcond[3]=((((-1.0)*x7256))+(((-1.0)*x7257*x7264))+(((-1.0)*r02*x7263))+((x7254*x7262)));
evalcond[4]=((((-1.0)*x7262*x7263))+(((-1.0)*r02*x7264))+((x7255*x7257))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7256))+(((-1.0)*x7258*x7263))+(((-1.0)*r12*x7264))+((x7255*x7259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.195493438569105)*px))+(((-1.19192641276835)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.195493438569105)*py))+(((-1.19192641276835)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))))+IKsqr(((((0.195493438569105)*py))+(((-1.19192641276835)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))), ((((0.195493438569105)*py))+(((-1.19192641276835)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7265=IKcos(j0);
IkReal x7266=IKsin(j0);
evalcond[0]=((((-0.134)*x7266))+(((-0.817)*x7265))+(((-1.0)*px)));
evalcond[1]=((((-0.817)*x7266))+(((0.134)*x7265))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7267=((1.0)*cj5);
IkReal x7268=((((-1.0)*r01*x7267))+(((-1.0)*r00*sj5)));
j4eval[0]=x7268;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7267)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7269=cj5*cj5;
IkReal x7270=((1.0)*r21);
IkReal x7271=(cj5*sj5);
IkReal x7272=((1.0)*r20);
IkReal x7273=((((-1.0)*r01*x7269*x7270))+((r00*r20*x7269))+((r01*r21))+(((-1.0)*r01*x7271*x7272))+((r02*r22))+(((-1.0)*r00*x7270*x7271)));
j4eval[0]=x7273;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7272)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7273);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7274=cj5*cj5;
IkReal x7275=(r21*sj5);
IkReal x7276=(r11*r21);
IkReal x7277=((1.0)*cj5*r20);
IkReal x7278=(x7276+(((-1.0)*r11*sj5*x7277))+((r12*r22))+(((-1.0)*cj5*r10*x7275))+((r10*r20*x7274))+(((-1.0)*x7274*x7276)));
j4eval[0]=x7278;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7275))+(((-1.0)*sj0*x7277))))));
j4eval[2]=IKsign(x7278);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7279=cj5*cj5;
IkReal x7280=(r21*sj5);
IkReal x7281=(r11*r21);
IkReal x7282=((1.0)*cj5*r20);
CheckValue<IkReal> x7283 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7280))+(((-1.0)*sj0*x7282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7283.valid){
continue;
}
CheckValue<IkReal> x7284=IKPowWithIntegerCheck(IKsign((x7281+(((-1.0)*cj5*r10*x7280))+((r12*r22))+(((-1.0)*x7279*x7281))+((r10*r20*x7279))+(((-1.0)*r11*sj5*x7282)))),-1);
if(!x7284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7283.value)+(((1.5707963267949)*(x7284.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7285=IKsin(j4);
IkReal x7286=IKcos(j4);
IkReal x7287=(r11*sj5);
IkReal x7288=(cj5*r00);
IkReal x7289=(cj5*r10);
IkReal x7290=(r21*sj5);
IkReal x7291=(cj5*r20);
IkReal x7292=(r01*sj5);
IkReal x7293=((1.0)*x7286);
IkReal x7294=((1.0)*x7285);
evalcond[0]=((((-1.0)*x7291*x7294))+(((-1.0)*r22*x7293))+((x7285*x7290)));
evalcond[1]=((((-1.0)*x7290*x7293))+(((-1.0)*r22*x7294))+((x7286*x7291)));
evalcond[2]=(cj0+(((-1.0)*x7289*x7294))+((x7285*x7287))+(((-1.0)*r12*x7293)));
evalcond[3]=(cj0+((x7286*x7288))+(((-1.0)*r02*x7294))+(((-1.0)*x7292*x7293)));
evalcond[4]=(sj0+((x7286*x7289))+(((-1.0)*r12*x7294))+(((-1.0)*x7287*x7293)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7288*x7294))+((x7285*x7292))+(((-1.0)*r02*x7293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7295=cj5*cj5;
IkReal x7296=((1.0)*r21);
IkReal x7297=(cj5*sj5);
IkReal x7298=((1.0)*r20);
CheckValue<IkReal> x7299=IKPowWithIntegerCheck(IKsign((((r00*r20*x7295))+((r01*r21))+(((-1.0)*r00*x7296*x7297))+((r02*r22))+(((-1.0)*r01*x7297*x7298))+(((-1.0)*r01*x7295*x7296)))),-1);
if(!x7299.valid){
continue;
}
CheckValue<IkReal> x7300 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7298)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7299.value)))+(x7300.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7301=IKsin(j4);
IkReal x7302=IKcos(j4);
IkReal x7303=(r11*sj5);
IkReal x7304=(cj5*r00);
IkReal x7305=(cj5*r10);
IkReal x7306=(r21*sj5);
IkReal x7307=(cj5*r20);
IkReal x7308=(r01*sj5);
IkReal x7309=((1.0)*x7302);
IkReal x7310=((1.0)*x7301);
evalcond[0]=(((x7301*x7306))+(((-1.0)*r22*x7309))+(((-1.0)*x7307*x7310)));
evalcond[1]=(((x7302*x7307))+(((-1.0)*r22*x7310))+(((-1.0)*x7306*x7309)));
evalcond[2]=(((x7301*x7303))+cj0+(((-1.0)*r12*x7309))+(((-1.0)*x7305*x7310)));
evalcond[3]=(cj0+((x7302*x7304))+(((-1.0)*x7308*x7309))+(((-1.0)*r02*x7310)));
evalcond[4]=(sj0+((x7302*x7305))+(((-1.0)*x7303*x7309))+(((-1.0)*r12*x7310)));
evalcond[5]=((((-1.0)*r02*x7309))+(((-1.0)*sj0))+((x7301*x7308))+(((-1.0)*x7304*x7310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7311=((1.0)*cj5);
CheckValue<IkReal> x7312 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7312.valid){
continue;
}
CheckValue<IkReal> x7313=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7311)))),-1);
if(!x7313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7312.value)+(((1.5707963267949)*(x7313.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7314=IKsin(j4);
IkReal x7315=IKcos(j4);
IkReal x7316=(r11*sj5);
IkReal x7317=(cj5*r00);
IkReal x7318=(cj5*r10);
IkReal x7319=(r21*sj5);
IkReal x7320=(cj5*r20);
IkReal x7321=(r01*sj5);
IkReal x7322=((1.0)*x7315);
IkReal x7323=((1.0)*x7314);
evalcond[0]=((((-1.0)*r22*x7322))+((x7314*x7319))+(((-1.0)*x7320*x7323)));
evalcond[1]=((((-1.0)*r22*x7323))+(((-1.0)*x7319*x7322))+((x7315*x7320)));
evalcond[2]=(cj0+(((-1.0)*x7318*x7323))+((x7314*x7316))+(((-1.0)*r12*x7322)));
evalcond[3]=(cj0+((x7315*x7317))+(((-1.0)*x7321*x7322))+(((-1.0)*r02*x7323)));
evalcond[4]=(sj0+(((-1.0)*x7316*x7322))+((x7315*x7318))+(((-1.0)*r12*x7323)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7317*x7323))+((x7314*x7321))+(((-1.0)*r02*x7322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.03596744552376)*py))+(((-1.73273825150958)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((7.03596744552376)*py))+(((-1.73273825150958)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((7.03596744552376)*py))+(((-1.73273825150958)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7324=IKcos(j0);
IkReal x7325=IKsin(j0);
evalcond[0]=((((-0.134)*x7325))+(((-1.0)*px))+(((-0.033)*x7324)));
evalcond[1]=((((-1.0)*py))+(((-0.033)*x7325))+(((0.134)*x7324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7326=((1.0)*cj5);
IkReal x7327=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7326)));
j4eval[0]=x7327;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7326)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7327);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7328=((1.0)*cj5);
IkReal x7329=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7328)));
j4eval[0]=x7329;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x7328))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7329);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7330=cj5*cj5;
IkReal x7331=((1.0)*sj5);
IkReal x7332=(cj5*r20);
IkReal x7333=(r11*r21);
IkReal x7334=(x7333+(((-1.0)*r11*x7331*x7332))+(((-1.0)*x7330*x7333))+((r12*r22))+((r10*r20*x7330))+(((-1.0)*cj5*r10*r21*x7331)));
j4eval[0]=x7334;
j4eval[1]=IKsign(x7334);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7331))+((cj0*x7332))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7335=cj5*cj5;
IkReal x7336=((1.0)*sj5);
IkReal x7337=(cj5*r20);
IkReal x7338=(r11*r21);
CheckValue<IkReal> x7339 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7336))+((cj0*x7337)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7339.valid){
continue;
}
CheckValue<IkReal> x7340=IKPowWithIntegerCheck(IKsign((x7338+(((-1.0)*r11*x7336*x7337))+(((-1.0)*x7335*x7338))+((r12*r22))+((r10*r20*x7335))+(((-1.0)*cj5*r10*r21*x7336)))),-1);
if(!x7340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7339.value)+(((1.5707963267949)*(x7340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7341=IKsin(j4);
IkReal x7342=IKcos(j4);
IkReal x7343=((1.0)*sj0);
IkReal x7344=(cj5*r00);
IkReal x7345=(r11*sj5);
IkReal x7346=(cj5*r10);
IkReal x7347=(r21*sj5);
IkReal x7348=(cj5*r20);
IkReal x7349=(r01*sj5);
IkReal x7350=((1.0)*x7342);
IkReal x7351=((1.0)*x7341);
evalcond[0]=((((-1.0)*r22*x7350))+(((-1.0)*x7348*x7351))+((x7341*x7347)));
evalcond[1]=((((-1.0)*r22*x7351))+((x7342*x7348))+(((-1.0)*x7347*x7350)));
evalcond[2]=(cj0+(((-1.0)*r12*x7350))+(((-1.0)*x7346*x7351))+((x7341*x7345)));
evalcond[3]=((((-1.0)*x7344*x7351))+(((-1.0)*x7343))+(((-1.0)*r02*x7350))+((x7341*x7349)));
evalcond[4]=(((x7342*x7344))+(((-1.0)*x7349*x7350))+(((-1.0)*r02*x7351))+(((-1.0)*cj0)));
evalcond[5]=(((x7342*x7346))+(((-1.0)*r12*x7351))+(((-1.0)*x7343))+(((-1.0)*x7345*x7350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7352=((1.0)*cj5);
CheckValue<IkReal> x7353 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7352)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7353.valid){
continue;
}
CheckValue<IkReal> x7354=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7352)))),-1);
if(!x7354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7353.value)+(((1.5707963267949)*(x7354.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7355=IKsin(j4);
IkReal x7356=IKcos(j4);
IkReal x7357=((1.0)*sj0);
IkReal x7358=(cj5*r00);
IkReal x7359=(r11*sj5);
IkReal x7360=(cj5*r10);
IkReal x7361=(r21*sj5);
IkReal x7362=(cj5*r20);
IkReal x7363=(r01*sj5);
IkReal x7364=((1.0)*x7356);
IkReal x7365=((1.0)*x7355);
evalcond[0]=(((x7355*x7361))+(((-1.0)*r22*x7364))+(((-1.0)*x7362*x7365)));
evalcond[1]=((((-1.0)*r22*x7365))+((x7356*x7362))+(((-1.0)*x7361*x7364)));
evalcond[2]=(cj0+(((-1.0)*r12*x7364))+((x7355*x7359))+(((-1.0)*x7360*x7365)));
evalcond[3]=(((x7355*x7363))+(((-1.0)*x7357))+(((-1.0)*r02*x7364))+(((-1.0)*x7358*x7365)));
evalcond[4]=((((-1.0)*x7363*x7364))+((x7356*x7358))+(((-1.0)*r02*x7365))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7357))+(((-1.0)*r12*x7365))+((x7356*x7360))+(((-1.0)*x7359*x7364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7366=((1.0)*cj5);
CheckValue<IkReal> x7367 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7366))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7367.valid){
continue;
}
CheckValue<IkReal> x7368=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7366)))),-1);
if(!x7368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7367.value)+(((1.5707963267949)*(x7368.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7369=IKsin(j4);
IkReal x7370=IKcos(j4);
IkReal x7371=((1.0)*sj0);
IkReal x7372=(cj5*r00);
IkReal x7373=(r11*sj5);
IkReal x7374=(cj5*r10);
IkReal x7375=(r21*sj5);
IkReal x7376=(cj5*r20);
IkReal x7377=(r01*sj5);
IkReal x7378=((1.0)*x7370);
IkReal x7379=((1.0)*x7369);
evalcond[0]=((((-1.0)*r22*x7378))+(((-1.0)*x7376*x7379))+((x7369*x7375)));
evalcond[1]=((((-1.0)*r22*x7379))+((x7370*x7376))+(((-1.0)*x7375*x7378)));
evalcond[2]=((((-1.0)*x7374*x7379))+cj0+(((-1.0)*r12*x7378))+((x7369*x7373)));
evalcond[3]=(((x7369*x7377))+(((-1.0)*r02*x7378))+(((-1.0)*x7371))+(((-1.0)*x7372*x7379)));
evalcond[4]=(((x7370*x7372))+(((-1.0)*x7377*x7378))+(((-1.0)*r02*x7379))+(((-1.0)*cj0)));
evalcond[5]=(((x7370*x7374))+(((-1.0)*r12*x7379))+(((-1.0)*x7373*x7378))+(((-1.0)*x7371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7380=IKsin(j0);
IkReal x7381=IKcos(j0);
IkReal x7382=((0.1)*sj5);
IkReal x7383=(cj5*r11);
IkReal x7384=(cj5*r01);
IkReal x7385=((1.0)*sj5);
evalcond[0]=(x7381+(((-1.0)*x7384))+(((-1.0)*r00*x7385)));
evalcond[1]=(x7380+(((-1.0)*x7383))+(((-1.0)*r10*x7385)));
evalcond[2]=((((-1.0)*px))+(((-0.1)*x7384))+(((-1.0)*r00*x7382))+(((-0.134)*x7380)));
evalcond[3]=((((-1.0)*py))+(((-0.1)*x7383))+(((0.134)*x7381))+(((-1.0)*r10*x7382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7386=((1.0)*sj5);
IkReal x7387=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7386)));
j4eval[0]=x7387;
j4eval[1]=IKsign(x7387);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7386))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7388=((1.0)*cj5);
IkReal x7389=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7388)));
j4eval[0]=x7389;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7388)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7389);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7390=r21*r21;
IkReal x7391=cj5*cj5;
IkReal x7392=(r21*sj5);
IkReal x7393=(cj5*r20);
IkReal x7394=((((-1.0)*x7391*(r20*r20)))+(((-1.0)*x7390))+(((-1.0)*(r22*r22)))+((x7390*x7391))+(((2.0)*x7392*x7393)));
j4eval[0]=x7394;
j4eval[1]=((IKabs(r22))+(IKabs((x7392+(((-1.0)*x7393))))));
j4eval[2]=IKsign(x7394);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7395=r21*r21;
IkReal x7396=cj5*cj5;
IkReal x7397=(r21*sj5);
IkReal x7398=(cj5*r20);
CheckValue<IkReal> x7399=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7396*(r20*r20)))+(((2.0)*x7397*x7398))+((x7395*x7396))+(((-1.0)*x7395))+(((-1.0)*(r22*r22))))),-1);
if(!x7399.valid){
continue;
}
CheckValue<IkReal> x7400 = IKatan2WithCheck(IkReal(r22),IkReal((x7397+(((-1.0)*x7398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7399.value)))+(x7400.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7401=IKsin(j4);
IkReal x7402=IKcos(j4);
IkReal x7403=(r11*sj5);
IkReal x7404=(r21*sj5);
IkReal x7405=(cj5*r00);
IkReal x7406=(cj5*r20);
IkReal x7407=(r01*sj5);
IkReal x7408=(cj5*r10);
IkReal x7409=((1.0)*x7402);
IkReal x7410=((1.0)*x7401);
evalcond[0]=(((x7401*x7404))+(((-1.0)*r22*x7409))+(((-1.0)*x7406*x7410)));
evalcond[1]=(((x7402*x7405))+(((-1.0)*x7407*x7409))+(((-1.0)*r02*x7410)));
evalcond[2]=((((-1.0)*x7403*x7409))+(((-1.0)*r12*x7410))+((x7402*x7408)));
evalcond[3]=((((-1.0)*r12*x7409))+cj0+((x7401*x7403))+(((-1.0)*x7408*x7410)));
evalcond[4]=((-1.0)+((x7402*x7406))+(((-1.0)*x7404*x7409))+(((-1.0)*r22*x7410)));
evalcond[5]=((((-1.0)*sj0))+((x7401*x7407))+(((-1.0)*x7405*x7410))+(((-1.0)*r02*x7409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7411=((1.0)*cj5);
CheckValue<IkReal> x7412 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7411)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7412.valid){
continue;
}
CheckValue<IkReal> x7413=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7411))+(((-1.0)*r00*sj5)))),-1);
if(!x7413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7412.value)+(((1.5707963267949)*(x7413.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7414=IKsin(j4);
IkReal x7415=IKcos(j4);
IkReal x7416=(r11*sj5);
IkReal x7417=(r21*sj5);
IkReal x7418=(cj5*r00);
IkReal x7419=(cj5*r20);
IkReal x7420=(r01*sj5);
IkReal x7421=(cj5*r10);
IkReal x7422=((1.0)*x7415);
IkReal x7423=((1.0)*x7414);
evalcond[0]=((((-1.0)*r22*x7422))+(((-1.0)*x7419*x7423))+((x7414*x7417)));
evalcond[1]=(((x7415*x7418))+(((-1.0)*r02*x7423))+(((-1.0)*x7420*x7422)));
evalcond[2]=((((-1.0)*x7416*x7422))+(((-1.0)*r12*x7423))+((x7415*x7421)));
evalcond[3]=((((-1.0)*x7421*x7423))+cj0+(((-1.0)*r12*x7422))+((x7414*x7416)));
evalcond[4]=((-1.0)+((x7415*x7419))+(((-1.0)*r22*x7423))+(((-1.0)*x7417*x7422)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7422))+(((-1.0)*x7418*x7423))+((x7414*x7420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7424=((1.0)*sj5);
CheckValue<IkReal> x7425 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7424))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7425.valid){
continue;
}
CheckValue<IkReal> x7426=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7424)))),-1);
if(!x7426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7425.value)+(((1.5707963267949)*(x7426.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7427=IKsin(j4);
IkReal x7428=IKcos(j4);
IkReal x7429=(r11*sj5);
IkReal x7430=(r21*sj5);
IkReal x7431=(cj5*r00);
IkReal x7432=(cj5*r20);
IkReal x7433=(r01*sj5);
IkReal x7434=(cj5*r10);
IkReal x7435=((1.0)*x7428);
IkReal x7436=((1.0)*x7427);
evalcond[0]=((((-1.0)*r22*x7435))+((x7427*x7430))+(((-1.0)*x7432*x7436)));
evalcond[1]=((((-1.0)*r02*x7436))+((x7428*x7431))+(((-1.0)*x7433*x7435)));
evalcond[2]=((((-1.0)*x7429*x7435))+(((-1.0)*r12*x7436))+((x7428*x7434)));
evalcond[3]=(cj0+(((-1.0)*r12*x7435))+(((-1.0)*x7434*x7436))+((x7427*x7429)));
evalcond[4]=((-1.0)+(((-1.0)*x7430*x7435))+(((-1.0)*r22*x7436))+((x7428*x7432)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7435))+((x7427*x7433))+(((-1.0)*x7431*x7436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7437=IKsin(j0);
IkReal x7438=IKcos(j0);
evalcond[0]=((((0.392)*x7438))+(((-1.0)*px))+(((-0.134)*x7437)));
evalcond[1]=((((0.134)*x7438))+(((0.392)*x7437))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7439=((1.0)*cj5);
IkReal x7440=((((-1.0)*r01*x7439))+(((-1.0)*r00*sj5)));
j4eval[0]=x7440;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7439)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7440);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7441=((1.0)*cj5);
IkReal x7442=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7441)));
j4eval[0]=x7442;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7441))))));
j4eval[2]=IKsign(x7442);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7443=cj5*cj5;
IkReal x7444=((1.0)*sj5);
IkReal x7445=(cj5*r20);
IkReal x7446=(r11*r21);
IkReal x7447=((((-1.0)*cj5*r10*r21*x7444))+((r10*r20*x7443))+(((-1.0)*r11*x7444*x7445))+(((-1.0)*x7443*x7446))+((r12*r22))+x7446);
j4eval[0]=x7447;
j4eval[1]=IKsign(x7447);
j4eval[2]=((IKabs((((cj0*x7445))+(((-1.0)*cj0*r21*x7444)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7448=cj5*cj5;
IkReal x7449=((1.0)*sj5);
IkReal x7450=(cj5*r20);
IkReal x7451=(r11*r21);
CheckValue<IkReal> x7452=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7448*x7451))+(((-1.0)*r11*x7449*x7450))+(((-1.0)*cj5*r10*r21*x7449))+((r10*r20*x7448))+((r12*r22))+x7451)),-1);
if(!x7452.valid){
continue;
}
CheckValue<IkReal> x7453 = IKatan2WithCheck(IkReal((((cj0*x7450))+(((-1.0)*cj0*r21*x7449)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7452.value)))+(x7453.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7454=IKsin(j4);
IkReal x7455=IKcos(j4);
IkReal x7456=((1.0)*sj0);
IkReal x7457=(cj5*r00);
IkReal x7458=(r11*sj5);
IkReal x7459=(cj5*r10);
IkReal x7460=(r21*sj5);
IkReal x7461=(cj5*r20);
IkReal x7462=(r01*sj5);
IkReal x7463=((1.0)*x7455);
IkReal x7464=((1.0)*x7454);
evalcond[0]=((((-1.0)*r22*x7463))+(((-1.0)*x7461*x7464))+((x7454*x7460)));
evalcond[1]=((((-1.0)*r22*x7464))+(((-1.0)*x7460*x7463))+((x7455*x7461)));
evalcond[2]=(((x7454*x7458))+cj0+(((-1.0)*r12*x7463))+(((-1.0)*x7459*x7464)));
evalcond[3]=((((-1.0)*x7456))+(((-1.0)*r02*x7463))+((x7454*x7462))+(((-1.0)*x7457*x7464)));
evalcond[4]=(((x7455*x7457))+(((-1.0)*r02*x7464))+(((-1.0)*x7462*x7463))+(((-1.0)*cj0)));
evalcond[5]=(((x7455*x7459))+(((-1.0)*x7456))+(((-1.0)*x7458*x7463))+(((-1.0)*r12*x7464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7465=((1.0)*cj5);
CheckValue<IkReal> x7466 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7465))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7466.valid){
continue;
}
CheckValue<IkReal> x7467=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7465)))),-1);
if(!x7467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7466.value)+(((1.5707963267949)*(x7467.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7468=IKsin(j4);
IkReal x7469=IKcos(j4);
IkReal x7470=((1.0)*sj0);
IkReal x7471=(cj5*r00);
IkReal x7472=(r11*sj5);
IkReal x7473=(cj5*r10);
IkReal x7474=(r21*sj5);
IkReal x7475=(cj5*r20);
IkReal x7476=(r01*sj5);
IkReal x7477=((1.0)*x7469);
IkReal x7478=((1.0)*x7468);
evalcond[0]=((((-1.0)*x7475*x7478))+(((-1.0)*r22*x7477))+((x7468*x7474)));
evalcond[1]=(((x7469*x7475))+(((-1.0)*x7474*x7477))+(((-1.0)*r22*x7478)));
evalcond[2]=(cj0+(((-1.0)*x7473*x7478))+((x7468*x7472))+(((-1.0)*r12*x7477)));
evalcond[3]=((((-1.0)*r02*x7477))+(((-1.0)*x7470))+((x7468*x7476))+(((-1.0)*x7471*x7478)));
evalcond[4]=((((-1.0)*r02*x7478))+((x7469*x7471))+(((-1.0)*x7476*x7477))+(((-1.0)*cj0)));
evalcond[5]=(((x7469*x7473))+(((-1.0)*x7470))+(((-1.0)*x7472*x7477))+(((-1.0)*r12*x7478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7479=((1.0)*cj5);
CheckValue<IkReal> x7480=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7479))+(((-1.0)*r00*sj5)))),-1);
if(!x7480.valid){
continue;
}
CheckValue<IkReal> x7481 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7480.value)))+(x7481.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7482=IKsin(j4);
IkReal x7483=IKcos(j4);
IkReal x7484=((1.0)*sj0);
IkReal x7485=(cj5*r00);
IkReal x7486=(r11*sj5);
IkReal x7487=(cj5*r10);
IkReal x7488=(r21*sj5);
IkReal x7489=(cj5*r20);
IkReal x7490=(r01*sj5);
IkReal x7491=((1.0)*x7483);
IkReal x7492=((1.0)*x7482);
evalcond[0]=((((-1.0)*x7489*x7492))+(((-1.0)*r22*x7491))+((x7482*x7488)));
evalcond[1]=((((-1.0)*x7488*x7491))+(((-1.0)*r22*x7492))+((x7483*x7489)));
evalcond[2]=(cj0+(((-1.0)*x7487*x7492))+((x7482*x7486))+(((-1.0)*r12*x7491)));
evalcond[3]=((((-1.0)*x7484))+(((-1.0)*r02*x7491))+((x7482*x7490))+(((-1.0)*x7485*x7492)));
evalcond[4]=((((-1.0)*x7490*x7491))+(((-1.0)*r02*x7492))+((x7483*x7485))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7486*x7491))+(((-1.0)*x7484))+(((-1.0)*r12*x7492))+((x7483*x7487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7493=((1.0)*sj5);
IkReal x7494=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x7493))+(((-1.0)*r11*x7494)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x7494))+(((-1.0)*r00*x7493)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x7493))+(((-1.0)*r11*x7494))))+IKsqr(((((-1.0)*r01*x7494))+(((-1.0)*r00*x7493))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x7493))+(((-1.0)*r11*x7494))), ((((-1.0)*r01*x7494))+(((-1.0)*r00*x7493))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7495=IKsin(j0);
IkReal x7496=IKcos(j0);
IkReal x7497=((0.1)*sj5);
IkReal x7498=(cj5*r11);
IkReal x7499=(cj5*r01);
IkReal x7500=((1.0)*sj5);
evalcond[0]=((((-1.0)*r00*x7500))+(((-1.0)*x7499))+(((-1.0)*x7496)));
evalcond[1]=((((-1.0)*x7498))+(((-1.0)*x7495))+(((-1.0)*r10*x7500)));
evalcond[2]=((((-0.134)*x7495))+(((-0.1)*x7499))+(((-1.0)*px))+(((-1.0)*r00*x7497)));
evalcond[3]=((((-0.1)*x7498))+(((-1.0)*py))+(((-1.0)*r10*x7497))+(((0.134)*x7496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7501=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7501;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7501);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7502=((1.0)*cj5);
IkReal x7503=((((-1.0)*r01*x7502))+(((-1.0)*r00*sj5)));
j4eval[0]=x7503;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7502))))));
j4eval[2]=IKsign(x7503);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7504=cj5*cj5;
IkReal x7505=r21*r21;
IkReal x7506=(r21*sj5);
IkReal x7507=(cj5*r20);
IkReal x7508=((((-2.0)*x7506*x7507))+(r22*r22)+(((-1.0)*x7504*x7505))+((x7504*(r20*r20)))+x7505);
j4eval[0]=x7508;
j4eval[1]=IKsign(x7508);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x7507))+x7506))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7509=cj5*cj5;
IkReal x7510=r21*r21;
IkReal x7511=(r21*sj5);
IkReal x7512=(cj5*r20);
CheckValue<IkReal> x7513=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7511*x7512))+((x7509*(r20*r20)))+x7510+(((-1.0)*x7509*x7510)))),-1);
if(!x7513.valid){
continue;
}
CheckValue<IkReal> x7514 = IKatan2WithCheck(IkReal(r22),IkReal((x7511+(((-1.0)*x7512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7513.value)))+(x7514.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7515=IKsin(j4);
IkReal x7516=IKcos(j4);
IkReal x7517=(r11*sj5);
IkReal x7518=(r21*sj5);
IkReal x7519=(cj5*r00);
IkReal x7520=(cj5*r20);
IkReal x7521=(r01*sj5);
IkReal x7522=(cj5*r10);
IkReal x7523=((1.0)*x7516);
IkReal x7524=((1.0)*x7515);
evalcond[0]=(((x7515*x7518))+(((-1.0)*x7520*x7524))+(((-1.0)*r22*x7523)));
evalcond[1]=((((-1.0)*r02*x7524))+(((-1.0)*x7521*x7523))+((x7516*x7519)));
evalcond[2]=(((x7516*x7522))+(((-1.0)*x7517*x7523))+(((-1.0)*r12*x7524)));
evalcond[3]=(((x7515*x7517))+cj0+(((-1.0)*x7522*x7524))+(((-1.0)*r12*x7523)));
evalcond[4]=((1.0)+((x7516*x7520))+(((-1.0)*x7518*x7523))+(((-1.0)*r22*x7524)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7523))+(((-1.0)*x7519*x7524))+((x7515*x7521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7525=((1.0)*cj5);
CheckValue<IkReal> x7526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7525))+(((-1.0)*r00*sj5)))),-1);
if(!x7526.valid){
continue;
}
CheckValue<IkReal> x7527 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7526.value)))+(x7527.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7528=IKsin(j4);
IkReal x7529=IKcos(j4);
IkReal x7530=(r11*sj5);
IkReal x7531=(r21*sj5);
IkReal x7532=(cj5*r00);
IkReal x7533=(cj5*r20);
IkReal x7534=(r01*sj5);
IkReal x7535=(cj5*r10);
IkReal x7536=((1.0)*x7529);
IkReal x7537=((1.0)*x7528);
evalcond[0]=(((x7528*x7531))+(((-1.0)*r22*x7536))+(((-1.0)*x7533*x7537)));
evalcond[1]=((((-1.0)*x7534*x7536))+((x7529*x7532))+(((-1.0)*r02*x7537)));
evalcond[2]=((((-1.0)*r12*x7537))+(((-1.0)*x7530*x7536))+((x7529*x7535)));
evalcond[3]=(cj0+(((-1.0)*r12*x7536))+((x7528*x7530))+(((-1.0)*x7535*x7537)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7537))+(((-1.0)*x7531*x7536))+((x7529*x7533)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7532*x7537))+((x7528*x7534))+(((-1.0)*r02*x7536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7538 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7538.valid){
continue;
}
CheckValue<IkReal> x7539=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7538.value)+(((1.5707963267949)*(x7539.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7540=IKsin(j4);
IkReal x7541=IKcos(j4);
IkReal x7542=(r11*sj5);
IkReal x7543=(r21*sj5);
IkReal x7544=(cj5*r00);
IkReal x7545=(cj5*r20);
IkReal x7546=(r01*sj5);
IkReal x7547=(cj5*r10);
IkReal x7548=((1.0)*x7541);
IkReal x7549=((1.0)*x7540);
evalcond[0]=((((-1.0)*r22*x7548))+(((-1.0)*x7545*x7549))+((x7540*x7543)));
evalcond[1]=(((x7541*x7544))+(((-1.0)*x7546*x7548))+(((-1.0)*r02*x7549)));
evalcond[2]=((((-1.0)*x7542*x7548))+((x7541*x7547))+(((-1.0)*r12*x7549)));
evalcond[3]=(cj0+(((-1.0)*r12*x7548))+(((-1.0)*x7547*x7549))+((x7540*x7542)));
evalcond[4]=((1.0)+(((-1.0)*x7543*x7548))+(((-1.0)*r22*x7549))+((x7541*x7545)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7544*x7549))+((x7540*x7546))+(((-1.0)*r02*x7548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7550=IKcos(j0);
IkReal x7551=IKsin(j0);
evalcond[0]=((((-0.392)*x7550))+(((-1.0)*px))+(((-0.134)*x7551)));
evalcond[1]=((((-0.392)*x7551))+(((-1.0)*py))+(((0.134)*x7550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7552=((1.0)*cj5);
IkReal x7553=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7552)));
j4eval[0]=x7553;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7552))))));
j4eval[2]=IKsign(x7553);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7554=cj5*cj5;
IkReal x7555=((1.0)*r21);
IkReal x7556=(cj5*sj5);
IkReal x7557=((1.0)*r20);
IkReal x7558=(((r00*r20*x7554))+(((-1.0)*r01*x7556*x7557))+(((-1.0)*r00*x7555*x7556))+((r01*r21))+(((-1.0)*r01*x7554*x7555))+((r02*r22)));
j4eval[0]=x7558;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7557)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7558);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7559=cj5*cj5;
IkReal x7560=(r21*sj5);
IkReal x7561=(r11*r21);
IkReal x7562=((1.0)*cj5*r20);
IkReal x7563=((((-1.0)*cj5*r10*x7560))+((r10*r20*x7559))+((r12*r22))+x7561+(((-1.0)*r11*sj5*x7562))+(((-1.0)*x7559*x7561)));
j4eval[0]=x7563;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7560))+(((-1.0)*sj0*x7562))))));
j4eval[2]=IKsign(x7563);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7564=cj5*cj5;
IkReal x7565=(r21*sj5);
IkReal x7566=(r11*r21);
IkReal x7567=((1.0)*cj5*r20);
CheckValue<IkReal> x7568 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7565))+(((-1.0)*sj0*x7567)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7568.valid){
continue;
}
CheckValue<IkReal> x7569=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x7565))+((r10*r20*x7564))+((r12*r22))+(((-1.0)*x7564*x7566))+x7566+(((-1.0)*r11*sj5*x7567)))),-1);
if(!x7569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7568.value)+(((1.5707963267949)*(x7569.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7570=IKsin(j4);
IkReal x7571=IKcos(j4);
IkReal x7572=(r11*sj5);
IkReal x7573=(cj5*r00);
IkReal x7574=(cj5*r10);
IkReal x7575=(r21*sj5);
IkReal x7576=(cj5*r20);
IkReal x7577=(r01*sj5);
IkReal x7578=((1.0)*x7571);
IkReal x7579=((1.0)*x7570);
evalcond[0]=((((-1.0)*x7576*x7579))+((x7570*x7575))+(((-1.0)*r22*x7578)));
evalcond[1]=(((x7571*x7576))+(((-1.0)*x7575*x7578))+(((-1.0)*r22*x7579)));
evalcond[2]=(cj0+(((-1.0)*x7574*x7579))+((x7570*x7572))+(((-1.0)*r12*x7578)));
evalcond[3]=(cj0+(((-1.0)*x7577*x7578))+((x7571*x7573))+(((-1.0)*r02*x7579)));
evalcond[4]=(sj0+((x7571*x7574))+(((-1.0)*r12*x7579))+(((-1.0)*x7572*x7578)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7578))+((x7570*x7577))+(((-1.0)*x7573*x7579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7580=cj5*cj5;
IkReal x7581=((1.0)*r21);
IkReal x7582=(cj5*sj5);
IkReal x7583=((1.0)*r20);
CheckValue<IkReal> x7584=IKPowWithIntegerCheck(IKsign((((r00*r20*x7580))+(((-1.0)*r01*x7582*x7583))+((r01*r21))+(((-1.0)*r00*x7581*x7582))+((r02*r22))+(((-1.0)*r01*x7580*x7581)))),-1);
if(!x7584.valid){
continue;
}
CheckValue<IkReal> x7585 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7583)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7584.value)))+(x7585.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7586=IKsin(j4);
IkReal x7587=IKcos(j4);
IkReal x7588=(r11*sj5);
IkReal x7589=(cj5*r00);
IkReal x7590=(cj5*r10);
IkReal x7591=(r21*sj5);
IkReal x7592=(cj5*r20);
IkReal x7593=(r01*sj5);
IkReal x7594=((1.0)*x7587);
IkReal x7595=((1.0)*x7586);
evalcond[0]=((((-1.0)*x7592*x7595))+((x7586*x7591))+(((-1.0)*r22*x7594)));
evalcond[1]=((((-1.0)*x7591*x7594))+(((-1.0)*r22*x7595))+((x7587*x7592)));
evalcond[2]=(cj0+(((-1.0)*x7590*x7595))+(((-1.0)*r12*x7594))+((x7586*x7588)));
evalcond[3]=(cj0+(((-1.0)*r02*x7595))+(((-1.0)*x7593*x7594))+((x7587*x7589)));
evalcond[4]=(sj0+(((-1.0)*r12*x7595))+(((-1.0)*x7588*x7594))+((x7587*x7590)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7589*x7595))+((x7586*x7593))+(((-1.0)*r02*x7594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7596=((1.0)*cj5);
CheckValue<IkReal> x7597 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7597.valid){
continue;
}
CheckValue<IkReal> x7598=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7596)))),-1);
if(!x7598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7597.value)+(((1.5707963267949)*(x7598.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7599=IKsin(j4);
IkReal x7600=IKcos(j4);
IkReal x7601=(r11*sj5);
IkReal x7602=(cj5*r00);
IkReal x7603=(cj5*r10);
IkReal x7604=(r21*sj5);
IkReal x7605=(cj5*r20);
IkReal x7606=(r01*sj5);
IkReal x7607=((1.0)*x7600);
IkReal x7608=((1.0)*x7599);
evalcond[0]=(((x7599*x7604))+(((-1.0)*r22*x7607))+(((-1.0)*x7605*x7608)));
evalcond[1]=((((-1.0)*r22*x7608))+((x7600*x7605))+(((-1.0)*x7604*x7607)));
evalcond[2]=(((x7599*x7601))+cj0+(((-1.0)*x7603*x7608))+(((-1.0)*r12*x7607)));
evalcond[3]=(((x7600*x7602))+cj0+(((-1.0)*x7606*x7607))+(((-1.0)*r02*x7608)));
evalcond[4]=(sj0+((x7600*x7603))+(((-1.0)*x7601*x7607))+(((-1.0)*r12*x7608)));
evalcond[5]=(((x7599*x7606))+(((-1.0)*sj0))+(((-1.0)*r02*x7607))+(((-1.0)*x7602*x7608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7609=cj1*cj1;
IkReal x7610=((500.0)*py);
IkReal x7611=(cj1*sj2);
IkReal x7612=(cj2*sj2);
IkReal x7613=(cj5*r01);
IkReal x7614=(cj2*sj1);
IkReal x7615=(cj1*sj1);
IkReal x7616=(r00*sj5);
IkReal x7617=((50.0)*r10*sj5);
IkReal x7618=((50.0)*cj5*r11);
CheckValue<IkReal> x7619=IKPowWithIntegerCheck(((((-212.5)*sj2*x7609))+(((-392.0)*cj1*cj2*x7614))+(((196.0)*x7612))+(((196.0)*x7615))+(((-212.5)*cj1*x7614))+(((-392.0)*x7609*x7612))),-1);
if(!x7619.valid){
continue;
}
CheckValue<IkReal> x7620=IKPowWithIntegerCheck(((((-1.0)*x7611))+(((-1.0)*x7614))),-1);
if(!x7620.valid){
continue;
}
if( IKabs(((x7619.value)*(((((-1.0)*x7610*x7611))+(((-1.0)*x7610*x7614))+(((-1.0)*x7611*x7617))+(((-1.0)*x7611*x7618))+(((-1.0)*x7614*x7618))+(((-1.0)*x7614*x7617))+(((-67.0)*x7616))+(((-67.0)*x7613)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7620.value)*((x7616+x7613)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7619.value)*(((((-1.0)*x7610*x7611))+(((-1.0)*x7610*x7614))+(((-1.0)*x7611*x7617))+(((-1.0)*x7611*x7618))+(((-1.0)*x7614*x7618))+(((-1.0)*x7614*x7617))+(((-67.0)*x7616))+(((-67.0)*x7613))))))+IKsqr(((x7620.value)*((x7616+x7613))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7619.value)*(((((-1.0)*x7610*x7611))+(((-1.0)*x7610*x7614))+(((-1.0)*x7611*x7617))+(((-1.0)*x7611*x7618))+(((-1.0)*x7614*x7618))+(((-1.0)*x7614*x7617))+(((-67.0)*x7616))+(((-67.0)*x7613))))), ((x7620.value)*((x7616+x7613))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7621=IKcos(j0);
IkReal x7622=IKsin(j0);
IkReal x7623=(r00*sj5);
IkReal x7624=(cj5*r11);
IkReal x7625=(r10*sj5);
IkReal x7626=((1.0)*cj2);
IkReal x7627=(cj5*r01);
IkReal x7628=((0.392)*sj2);
IkReal x7629=((0.425)*cj1);
IkReal x7630=((1.0)*cj1*sj2);
IkReal x7631=((0.392)*cj1*cj2);
IkReal x7632=(sj1*x7621);
IkReal x7633=(sj1*x7622);
evalcond[0]=((((-1.0)*x7623))+(((-1.0)*x7627))+(((-1.0)*x7626*x7632))+(((-1.0)*x7621*x7630)));
evalcond[1]=((((-1.0)*x7625))+(((-1.0)*x7624))+(((-1.0)*x7626*x7633))+(((-1.0)*x7622*x7630)));
evalcond[2]=((((-0.1)*x7623))+(((-0.1)*x7627))+(((-1.0)*x7628*x7632))+((x7621*x7629))+(((-1.0)*px))+((x7621*x7631))+(((-0.134)*x7622)));
evalcond[3]=((((-0.1)*x7624))+(((-0.1)*x7625))+(((0.134)*x7621))+((x7622*x7631))+(((-1.0)*x7628*x7633))+(((-1.0)*py))+((x7622*x7629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7634=((1.0)*cj5);
IkReal x7635=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7634)));
j4eval[0]=x7635;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7634)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7635);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7636=((1.0)*cj5);
IkReal x7637=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7636)));
j4eval[0]=x7637;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7636)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7637);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7638=((1.0)*sj0);
IkReal x7639=((1.0)*cj0);
IkReal x7640=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7640;
j4eval[1]=((IKabs(((((-1.0)*r02*x7639))+(((-1.0)*r12*x7638)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x7638))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x7639))))));
j4eval[2]=IKsign(x7640);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7641=((-1.0)*r20);
IkReal x7643 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7643)==0){
continue;
}
IkReal x7642=pow(x7643,-0.5);
CheckValue<IkReal> x7644 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7641),IKFAST_ATAN2_MAGTHRESH);
if(!x7644.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7644.value));
IkReal gconst133=(r21*x7642);
IkReal gconst134=(x7641*x7642);
CheckValue<IkReal> x7645 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7645.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7645.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7646=((-1.0)*r20);
IkReal x7647=x7642;
CheckValue<IkReal> x7649 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7646),IKFAST_ATAN2_MAGTHRESH);
if(!x7649.valid){
continue;
}
IkReal x7648=((-1.0)*(x7649.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7648;
IkReal gconst132=x7648;
IkReal gconst133=(r21*x7647);
IkReal gconst134=(x7646*x7647);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7650=((-1.0)*r20);
IkReal x7651=x7642;
CheckValue<IkReal> x7653 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7650),IKFAST_ATAN2_MAGTHRESH);
if(!x7653.valid){
continue;
}
IkReal x7652=((-1.0)*(x7653.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7652;
IkReal gconst132=x7652;
IkReal gconst133=(r21*x7651);
IkReal gconst134=(x7650*x7651);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7654=((-1.0)*r20);
IkReal x7655=x7642;
CheckValue<IkReal> x7657 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7654),IKFAST_ATAN2_MAGTHRESH);
if(!x7657.valid){
continue;
}
IkReal x7656=((-1.0)*(x7657.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7656;
IkReal gconst132=x7656;
IkReal gconst133=(r21*x7655);
IkReal gconst134=(x7654*x7655);
IkReal x7658=r22*r22;
CheckValue<IkReal> x7661=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7658))),-1);
if(!x7661.valid){
continue;
}
IkReal x7659=x7661.value;
IkReal x7660=(((x7659*(r20*r20*r20*r20)))+((x7659*(r21*r21*r21*r21)))+(((2.0)*x7659*(r20*r20)*(r21*r21)))+x7658);
j4eval[0]=x7660;
j4eval[1]=IKsign(x7660);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7662=(gconst133*r21);
IkReal x7663=(cj1*sj2);
IkReal x7664=(gconst134*r20);
IkReal x7665=(cj2*sj1);
CheckValue<IkReal> x7666 = IKatan2WithCheck(IkReal((((r22*x7663))+((r22*x7665)))),IkReal(((((-1.0)*x7664*x7665))+((x7662*x7665))+((x7662*x7663))+(((-1.0)*x7663*x7664)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7666.valid){
continue;
}
CheckValue<IkReal> x7667=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7664*x7664)+(x7662*x7662)+(((-2.0)*x7662*x7664)))),-1);
if(!x7667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7666.value)+(((1.5707963267949)*(x7667.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7668=IKsin(j4);
IkReal x7669=IKcos(j4);
IkReal x7670=(sj1*sj2);
IkReal x7671=(gconst133*r11);
IkReal x7672=(gconst133*r21);
IkReal x7673=(gconst133*r01);
IkReal x7674=((1.0)*x7669);
IkReal x7675=(gconst134*x7669);
IkReal x7676=((1.0)*x7668);
IkReal x7677=((1.0)*cj1*cj2);
evalcond[0]=(((x7668*x7672))+(((-1.0)*gconst134*r20*x7676))+(((-1.0)*r22*x7674)));
evalcond[1]=(((x7668*x7671))+cj0+(((-1.0)*gconst134*r10*x7676))+(((-1.0)*r12*x7674)));
evalcond[2]=(((x7668*x7673))+(((-1.0)*sj0))+(((-1.0)*r02*x7674))+(((-1.0)*gconst134*r00*x7676)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7675))+(((-1.0)*x7672*x7674))+(((-1.0)*r22*x7676)));
evalcond[4]=((((-1.0)*r02*x7676))+(((-1.0)*cj0*x7677))+(((-1.0)*x7673*x7674))+((cj0*x7670))+((r00*x7675)));
evalcond[5]=(((sj0*x7670))+(((-1.0)*sj0*x7677))+(((-1.0)*r12*x7676))+((r10*x7675))+(((-1.0)*x7671*x7674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7678=((1.0)*gconst134);
CheckValue<IkReal> x7679 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7678))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7679.valid){
continue;
}
CheckValue<IkReal> x7680=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7678)))),-1);
if(!x7680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7679.value)+(((1.5707963267949)*(x7680.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7681=IKsin(j4);
IkReal x7682=IKcos(j4);
IkReal x7683=(sj1*sj2);
IkReal x7684=(gconst133*r11);
IkReal x7685=(gconst133*r21);
IkReal x7686=(gconst133*r01);
IkReal x7687=((1.0)*x7682);
IkReal x7688=(gconst134*x7682);
IkReal x7689=((1.0)*x7681);
IkReal x7690=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7689))+((x7681*x7685))+(((-1.0)*r22*x7687)));
evalcond[1]=((((-1.0)*gconst134*r10*x7689))+((x7681*x7684))+cj0+(((-1.0)*r12*x7687)));
evalcond[2]=((((-1.0)*gconst134*r00*x7689))+(((-1.0)*sj0))+((x7681*x7686))+(((-1.0)*r02*x7687)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7689))+((r20*x7688))+(((-1.0)*x7685*x7687)));
evalcond[4]=((((-1.0)*cj0*x7690))+((cj0*x7683))+(((-1.0)*x7686*x7687))+((r00*x7688))+(((-1.0)*r02*x7689)));
evalcond[5]=(((sj0*x7683))+((r10*x7688))+(((-1.0)*r12*x7689))+(((-1.0)*sj0*x7690))+(((-1.0)*x7684*x7687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7691=((1.0)*gconst134);
CheckValue<IkReal> x7692 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*r20*x7691)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7692.valid){
continue;
}
CheckValue<IkReal> x7693=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7691)))),-1);
if(!x7693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7692.value)+(((1.5707963267949)*(x7693.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7694=IKsin(j4);
IkReal x7695=IKcos(j4);
IkReal x7696=(sj1*sj2);
IkReal x7697=(gconst133*r11);
IkReal x7698=(gconst133*r21);
IkReal x7699=(gconst133*r01);
IkReal x7700=((1.0)*x7695);
IkReal x7701=(gconst134*x7695);
IkReal x7702=((1.0)*x7694);
IkReal x7703=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7700))+((x7694*x7698))+(((-1.0)*gconst134*r20*x7702)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x7702))+(((-1.0)*r12*x7700))+((x7694*x7697)));
evalcond[2]=((((-1.0)*sj0))+((x7694*x7699))+(((-1.0)*r02*x7700))+(((-1.0)*gconst134*r00*x7702)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7698*x7700))+(((-1.0)*r22*x7702))+((cj1*sj2))+((r20*x7701)));
evalcond[4]=(((cj0*x7696))+(((-1.0)*r02*x7702))+(((-1.0)*x7699*x7700))+((r00*x7701))+(((-1.0)*cj0*x7703)));
evalcond[5]=((((-1.0)*x7697*x7700))+((sj0*x7696))+(((-1.0)*r12*x7702))+((r10*x7701))+(((-1.0)*sj0*x7703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7704=((-1.0)*r21);
IkReal x7706 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7706)==0){
continue;
}
IkReal x7705=pow(x7706,-0.5);
CheckValue<IkReal> x7707 = IKatan2WithCheck(IkReal(x7704),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7707.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7707.value))));
IkReal gconst136=(x7704*x7705);
IkReal gconst137=((1.0)*r20*x7705);
CheckValue<IkReal> x7708 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7708.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7708.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7709=((-1.0)*r21);
CheckValue<IkReal> x7712 = IKatan2WithCheck(IkReal(x7709),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7712.valid){
continue;
}
IkReal x7710=((1.0)*(x7712.value));
IkReal x7711=x7705;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7710)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7710)));
IkReal gconst136=(x7709*x7711);
IkReal gconst137=((1.0)*r20*x7711);
IkReal x7713=r22*r22;
IkReal x7714=((1.0)*x7713);
CheckValue<IkReal> x7718=IKPowWithIntegerCheck(((-1.0)+x7713),-1);
if(!x7718.valid){
continue;
}
IkReal x7715=x7718.value;
if((((1.0)+(((-1.0)*x7714)))) < -0.00001)
continue;
IkReal x7716=IKsqrt(((1.0)+(((-1.0)*x7714))));
IkReal x7717=(cj0*x7715*x7716);
j4eval[0]=((IKabs(((((-1.0)*x7714*x7717))+x7717)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7719=((-1.0)*r21);
CheckValue<IkReal> x7722 = IKatan2WithCheck(IkReal(x7719),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7722.valid){
continue;
}
IkReal x7720=((1.0)*(x7722.value));
IkReal x7721=x7705;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7720)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7720)));
IkReal gconst136=(x7719*x7721);
IkReal gconst137=((1.0)*r20*x7721);
IkReal x7723=r22*r22;
IkReal x7724=((1.0)*x7723);
CheckValue<IkReal> x7728=IKPowWithIntegerCheck(((-1.0)+x7723),-1);
if(!x7728.valid){
continue;
}
IkReal x7725=x7728.value;
if((((1.0)+(((-1.0)*x7724)))) < -0.00001)
continue;
IkReal x7726=IKsqrt(((1.0)+(((-1.0)*x7724))));
IkReal x7727=(sj0*x7725*x7726);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7724*x7727))+x7727))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7729=((-1.0)*r21);
CheckValue<IkReal> x7732 = IKatan2WithCheck(IkReal(x7729),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7732.valid){
continue;
}
IkReal x7730=((1.0)*(x7732.value));
IkReal x7731=x7705;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7730)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7730)));
IkReal gconst136=(x7729*x7731);
IkReal gconst137=((1.0)*r20*x7731);
IkReal x7733=r22*r22;
IkReal x7734=(r12*sj0);
IkReal x7735=(cj0*r02);
CheckValue<IkReal> x7739=IKPowWithIntegerCheck(((-1.0)+x7733),-1);
if(!x7739.valid){
continue;
}
IkReal x7736=x7739.value;
if((((1.0)+(((-1.0)*x7733)))) < -0.00001)
continue;
IkReal x7737=IKsqrt(((1.0)+(((-1.0)*x7733))));
IkReal x7738=(r22*x7736*x7737);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7734))+(((-1.0)*x7735)))))+(IKabs((((x7735*x7738))+((x7734*x7738))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7740=((1.0)*sj0);
IkReal x7741=((1.0)*cj0);
CheckValue<IkReal> x7742=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7742.valid){
continue;
}
CheckValue<IkReal> x7743 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7741))+(((-1.0)*r12*x7740)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x7740))+((cj0*gconst137*r00))+(((-1.0)*gconst136*r01*x7741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7742.value)))+(x7743.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7744=IKsin(j4);
IkReal x7745=IKcos(j4);
IkReal x7746=(gconst136*r01);
IkReal x7747=(gconst137*r10);
IkReal x7748=(sj1*sj2);
IkReal x7749=(gconst137*r20);
IkReal x7750=(gconst136*r11);
IkReal x7751=(gconst136*r21);
IkReal x7752=(gconst137*r00);
IkReal x7753=((1.0)*x7745);
IkReal x7754=((1.0)*cj1*cj2);
IkReal x7755=((1.0)*x7744);
evalcond[0]=((((-1.0)*r22*x7753))+(((-1.0)*x7749*x7755))+((x7744*x7751)));
evalcond[1]=(cj0+(((-1.0)*r12*x7753))+(((-1.0)*x7747*x7755))+((x7744*x7750)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7753))+(((-1.0)*x7752*x7755))+((x7744*x7746)));
evalcond[3]=((((-1.0)*r22*x7755))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7751*x7753))+((x7745*x7749)));
evalcond[4]=((((-1.0)*r02*x7755))+(((-1.0)*cj0*x7754))+((cj0*x7748))+(((-1.0)*x7746*x7753))+((x7745*x7752)));
evalcond[5]=(((sj0*x7748))+(((-1.0)*r12*x7755))+(((-1.0)*sj0*x7754))+(((-1.0)*x7750*x7753))+((x7745*x7747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7756=((1.0)*gconst137);
CheckValue<IkReal> x7757 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7756))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7757.valid){
continue;
}
CheckValue<IkReal> x7758=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7756)))),-1);
if(!x7758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7757.value)+(((1.5707963267949)*(x7758.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7759=IKsin(j4);
IkReal x7760=IKcos(j4);
IkReal x7761=(gconst136*r01);
IkReal x7762=(gconst137*r10);
IkReal x7763=(sj1*sj2);
IkReal x7764=(gconst137*r20);
IkReal x7765=(gconst136*r11);
IkReal x7766=(gconst136*r21);
IkReal x7767=(gconst137*r00);
IkReal x7768=((1.0)*x7760);
IkReal x7769=((1.0)*cj1*cj2);
IkReal x7770=((1.0)*x7759);
evalcond[0]=((((-1.0)*r22*x7768))+(((-1.0)*x7764*x7770))+((x7759*x7766)));
evalcond[1]=(cj0+(((-1.0)*r12*x7768))+(((-1.0)*x7762*x7770))+((x7759*x7765)));
evalcond[2]=((((-1.0)*x7767*x7770))+(((-1.0)*sj0))+(((-1.0)*r02*x7768))+((x7759*x7761)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7766*x7768))+((x7760*x7764))+(((-1.0)*r22*x7770))+((cj1*sj2)));
evalcond[4]=((((-1.0)*r02*x7770))+((x7760*x7767))+(((-1.0)*cj0*x7769))+((cj0*x7763))+(((-1.0)*x7761*x7768)));
evalcond[5]=(((x7760*x7762))+((sj0*x7763))+(((-1.0)*sj0*x7769))+(((-1.0)*r12*x7770))+(((-1.0)*x7765*x7768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7771=((1.0)*gconst137);
CheckValue<IkReal> x7772=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7771))+(((-1.0)*gconst136*r00)))),-1);
if(!x7772.valid){
continue;
}
CheckValue<IkReal> x7773 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x7771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7772.value)))+(x7773.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7774=IKsin(j4);
IkReal x7775=IKcos(j4);
IkReal x7776=(gconst136*r01);
IkReal x7777=(gconst137*r10);
IkReal x7778=(sj1*sj2);
IkReal x7779=(gconst137*r20);
IkReal x7780=(gconst136*r11);
IkReal x7781=(gconst136*r21);
IkReal x7782=(gconst137*r00);
IkReal x7783=((1.0)*x7775);
IkReal x7784=((1.0)*cj1*cj2);
IkReal x7785=((1.0)*x7774);
evalcond[0]=((((-1.0)*x7779*x7785))+((x7774*x7781))+(((-1.0)*r22*x7783)));
evalcond[1]=(cj0+((x7774*x7780))+(((-1.0)*r12*x7783))+(((-1.0)*x7777*x7785)));
evalcond[2]=((((-1.0)*x7782*x7785))+(((-1.0)*sj0))+(((-1.0)*r02*x7783))+((x7774*x7776)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7775*x7779))+(((-1.0)*r22*x7785))+(((-1.0)*x7781*x7783)));
evalcond[4]=(((cj0*x7778))+((x7775*x7782))+(((-1.0)*r02*x7785))+(((-1.0)*cj0*x7784))+(((-1.0)*x7776*x7783)));
evalcond[5]=(((sj0*x7778))+(((-1.0)*sj0*x7784))+((x7775*x7777))+(((-1.0)*r12*x7785))+(((-1.0)*x7780*x7783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7786=((-1.0)*r10);
IkReal x7788 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7788)==0){
continue;
}
IkReal x7787=pow(x7788,-0.5);
CheckValue<IkReal> x7789 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7786),IKFAST_ATAN2_MAGTHRESH);
if(!x7789.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7789.value));
IkReal gconst139=(r11*x7787);
IkReal gconst140=(x7786*x7787);
CheckValue<IkReal> x7790 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7790.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7790.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7791=((-1.0)*r10);
IkReal x7792=x7787;
CheckValue<IkReal> x7794 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7791),IKFAST_ATAN2_MAGTHRESH);
if(!x7794.valid){
continue;
}
IkReal x7793=((-1.0)*(x7794.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7793;
IkReal gconst138=x7793;
IkReal gconst139=(r11*x7792);
IkReal gconst140=(x7791*x7792);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7795=((1.0)*sj0);
IkReal x7796=((1.0)*gconst139);
CheckValue<IkReal> x7797 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7795))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst139*r11*x7795))+((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x7796))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7797.valid){
continue;
}
CheckValue<IkReal> x7798=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7796)))),-1);
if(!x7798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7797.value)+(((1.5707963267949)*(x7798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7799=IKsin(j4);
IkReal x7800=IKcos(j4);
IkReal x7801=(gconst140*r00);
IkReal x7802=(sj1*sj2);
IkReal x7803=(gconst139*r11);
IkReal x7804=(gconst139*r01);
IkReal x7805=(gconst139*r21);
IkReal x7806=((1.0)*x7800);
IkReal x7807=((1.0)*x7799);
IkReal x7808=((1.0)*cj1*cj2);
IkReal x7809=(gconst140*x7800);
evalcond[0]=((((-1.0)*gconst140*r20*x7807))+(((-1.0)*r22*x7806))+((x7799*x7805)));
evalcond[1]=(cj0+(((-1.0)*r12*x7806))+(((-1.0)*gconst140*r10*x7807))+((x7799*x7803)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7801*x7807))+(((-1.0)*r02*x7806))+((x7799*x7804)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7805*x7806))+((cj1*sj2))+(((-1.0)*r22*x7807))+((r20*x7809)));
evalcond[4]=(((x7800*x7801))+((cj0*x7802))+(((-1.0)*r02*x7807))+(((-1.0)*cj0*x7808))+(((-1.0)*x7804*x7806)));
evalcond[5]=((((-1.0)*sj0*x7808))+(((-1.0)*r12*x7807))+((sj0*x7802))+(((-1.0)*x7803*x7806))+((r10*x7809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7810=((1.0)*gconst140);
CheckValue<IkReal> x7811 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7810)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7811.valid){
continue;
}
CheckValue<IkReal> x7812=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x7810)))),-1);
if(!x7812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7811.value)+(((1.5707963267949)*(x7812.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7813=IKsin(j4);
IkReal x7814=IKcos(j4);
IkReal x7815=(gconst140*r00);
IkReal x7816=(sj1*sj2);
IkReal x7817=(gconst139*r11);
IkReal x7818=(gconst139*r01);
IkReal x7819=(gconst139*r21);
IkReal x7820=((1.0)*x7814);
IkReal x7821=((1.0)*x7813);
IkReal x7822=((1.0)*cj1*cj2);
IkReal x7823=(gconst140*x7814);
evalcond[0]=(((x7813*x7819))+(((-1.0)*r22*x7820))+(((-1.0)*gconst140*r20*x7821)));
evalcond[1]=(((x7813*x7817))+cj0+(((-1.0)*gconst140*r10*x7821))+(((-1.0)*r12*x7820)));
evalcond[2]=(((x7813*x7818))+(((-1.0)*sj0))+(((-1.0)*r02*x7820))+(((-1.0)*x7815*x7821)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7823))+(((-1.0)*r22*x7821))+(((-1.0)*x7819*x7820)));
evalcond[4]=(((x7814*x7815))+(((-1.0)*r02*x7821))+(((-1.0)*cj0*x7822))+(((-1.0)*x7818*x7820))+((cj0*x7816)));
evalcond[5]=(((r10*x7823))+((sj0*x7816))+(((-1.0)*x7817*x7820))+(((-1.0)*sj0*x7822))+(((-1.0)*r12*x7821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7824=((-1.0)*r11);
IkReal x7826 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7826)==0){
continue;
}
IkReal x7825=pow(x7826,-0.5);
CheckValue<IkReal> x7827 = IKatan2WithCheck(IkReal(x7824),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7827.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7827.value))));
IkReal gconst142=(x7824*x7825);
IkReal gconst143=((1.0)*r10*x7825);
CheckValue<IkReal> x7828 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7828.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7828.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7829=((-1.0)*r11);
CheckValue<IkReal> x7832 = IKatan2WithCheck(IkReal(x7829),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7832.valid){
continue;
}
IkReal x7830=((1.0)*(x7832.value));
IkReal x7831=x7825;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7830)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7830)));
IkReal gconst142=(x7829*x7831);
IkReal gconst143=((1.0)*r10*x7831);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7833=((-1.0)*r11);
CheckValue<IkReal> x7836 = IKatan2WithCheck(IkReal(x7833),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7836.valid){
continue;
}
IkReal x7834=((1.0)*(x7836.value));
IkReal x7835=x7825;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7834)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7834)));
IkReal gconst142=(x7833*x7835);
IkReal gconst143=((1.0)*r10*x7835);
IkReal x7837=r12*r12;
IkReal x7838=((1.0)*sj0);
IkReal x7839=(cj0*r02);
IkReal x7840=x7825;
j4eval[0]=((IKabs(((((-1.0)*x7838*x7840))+((r12*x7839*x7840))+((sj0*x7837*x7840)))))+(IKabs(((((-1.0)*x7839))+(((-1.0)*r12*x7838))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7841=((-1.0)*r11);
CheckValue<IkReal> x7844 = IKatan2WithCheck(IkReal(x7841),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7844.valid){
continue;
}
IkReal x7842=((1.0)*(x7844.value));
IkReal x7843=x7825;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7842)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7842)));
IkReal gconst142=(x7841*x7843);
IkReal gconst143=((1.0)*r10*x7843);
IkReal x7845=r12*r12;
IkReal x7846=(cj1*r22*sj2);
IkReal x7847=(cj2*r22*sj1);
CheckValue<IkReal> x7851=IKPowWithIntegerCheck(((-1.0)+x7845),-1);
if(!x7851.valid){
continue;
}
IkReal x7848=x7851.value;
if((((1.0)+(((-1.0)*x7845)))) < -0.00001)
continue;
IkReal x7849=IKsqrt(((1.0)+(((-1.0)*x7845))));
IkReal x7850=((1.0)*r12*x7848*x7849);
j4eval[0]=((IKabs(((((-1.0)*x7847*x7850))+(((-1.0)*x7846*x7850)))))+(IKabs((x7847+x7846))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7852=(gconst142*r21);
IkReal x7853=(cj1*sj2);
IkReal x7854=(cj2*sj1);
IkReal x7855=(gconst143*r20);
CheckValue<IkReal> x7856=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7855*x7855)+(((-2.0)*x7852*x7855))+(x7852*x7852))),-1);
if(!x7856.valid){
continue;
}
CheckValue<IkReal> x7857 = IKatan2WithCheck(IkReal((((r22*x7853))+((r22*x7854)))),IkReal((((x7852*x7854))+((x7852*x7853))+(((-1.0)*x7854*x7855))+(((-1.0)*x7853*x7855)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7856.value)))+(x7857.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7858=IKsin(j4);
IkReal x7859=IKcos(j4);
IkReal x7860=(sj1*sj2);
IkReal x7861=(gconst143*r20);
IkReal x7862=((1.0)*x7859);
IkReal x7863=((1.0)*cj1*cj2);
IkReal x7864=((1.0)*x7858);
IkReal x7865=(gconst142*x7858);
IkReal x7866=(gconst143*x7859);
evalcond[0]=(((r21*x7865))+(((-1.0)*x7861*x7864))+(((-1.0)*r22*x7862)));
evalcond[1]=(cj0+((r11*x7865))+(((-1.0)*r12*x7862))+(((-1.0)*gconst143*r10*x7864)));
evalcond[2]=((((-1.0)*gconst143*r00*x7864))+(((-1.0)*sj0))+((r01*x7865))+(((-1.0)*r02*x7862)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7859*x7861))+(((-1.0)*gconst142*r21*x7862))+(((-1.0)*r22*x7864)));
evalcond[4]=(((cj0*x7860))+(((-1.0)*gconst142*r01*x7862))+((r00*x7866))+(((-1.0)*r02*x7864))+(((-1.0)*cj0*x7863)));
evalcond[5]=(((sj0*x7860))+(((-1.0)*r12*x7864))+(((-1.0)*sj0*x7863))+((r10*x7866))+(((-1.0)*gconst142*r11*x7862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7867=((1.0)*sj0);
IkReal x7868=((1.0)*gconst142);
CheckValue<IkReal> x7869 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7867)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7868))+((gconst143*r10*sj0))+(((-1.0)*gconst142*r11*x7867)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7869.valid){
continue;
}
CheckValue<IkReal> x7870=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r21))+(((-1.0)*r20*x7868)))),-1);
if(!x7870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7869.value)+(((1.5707963267949)*(x7870.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7871=IKsin(j4);
IkReal x7872=IKcos(j4);
IkReal x7873=(sj1*sj2);
IkReal x7874=(gconst143*r20);
IkReal x7875=((1.0)*x7872);
IkReal x7876=((1.0)*cj1*cj2);
IkReal x7877=((1.0)*x7871);
IkReal x7878=(gconst142*x7871);
IkReal x7879=(gconst143*x7872);
evalcond[0]=((((-1.0)*r22*x7875))+(((-1.0)*x7874*x7877))+((r21*x7878)));
evalcond[1]=(cj0+((r11*x7878))+(((-1.0)*r12*x7875))+(((-1.0)*gconst143*r10*x7877)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7878))+(((-1.0)*r02*x7875))+(((-1.0)*gconst143*r00*x7877)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7877))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7875))+((x7872*x7874)));
evalcond[4]=(((cj0*x7873))+(((-1.0)*gconst142*r01*x7875))+((r00*x7879))+(((-1.0)*r02*x7877))+(((-1.0)*cj0*x7876)));
evalcond[5]=((((-1.0)*gconst142*r11*x7875))+((r10*x7879))+(((-1.0)*r12*x7877))+((sj0*x7873))+(((-1.0)*sj0*x7876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7880=((1.0)*gconst143);
CheckValue<IkReal> x7881 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7880))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7881.valid){
continue;
}
CheckValue<IkReal> x7882=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7880))+(((-1.0)*gconst142*r00)))),-1);
if(!x7882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7881.value)+(((1.5707963267949)*(x7882.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7883=IKsin(j4);
IkReal x7884=IKcos(j4);
IkReal x7885=(sj1*sj2);
IkReal x7886=(gconst143*r20);
IkReal x7887=((1.0)*x7884);
IkReal x7888=((1.0)*cj1*cj2);
IkReal x7889=((1.0)*x7883);
IkReal x7890=(gconst142*x7883);
IkReal x7891=(gconst143*x7884);
evalcond[0]=(((r21*x7890))+(((-1.0)*r22*x7887))+(((-1.0)*x7886*x7889)));
evalcond[1]=(cj0+(((-1.0)*r12*x7887))+((r11*x7890))+(((-1.0)*gconst143*r10*x7889)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x7889))+(((-1.0)*r02*x7887))+((r01*x7890)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7889))+((x7884*x7886))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7887)));
evalcond[4]=(((cj0*x7885))+(((-1.0)*r02*x7889))+(((-1.0)*gconst142*r01*x7887))+(((-1.0)*cj0*x7888))+((r00*x7891)));
evalcond[5]=((((-1.0)*sj0*x7888))+((sj0*x7885))+(((-1.0)*r12*x7889))+(((-1.0)*gconst142*r11*x7887))+((r10*x7891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7892=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7892;
j4eval[1]=IKsign(x7892);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7893=((1.0)*cj5);
IkReal x7894=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7893)));
j4eval[0]=x7894;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7893))))));
j4eval[2]=IKsign(x7894);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7895=cj5*cj5;
IkReal x7896=r11*r11;
IkReal x7897=(r11*sj5);
IkReal x7898=(cj5*r10);
IkReal x7899=((((-1.0)*x7895*x7896))+(r12*r12)+((x7895*(r10*r10)))+x7896+(((-2.0)*x7897*x7898)));
j4eval[0]=x7899;
j4eval[1]=IKsign(x7899);
j4eval[2]=((IKabs(r12))+(IKabs((x7898+(((-1.0)*x7897))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7900=cj5*cj5;
IkReal x7901=r11*r11;
IkReal x7902=(cj5*r10);
IkReal x7903=(r11*sj5);
CheckValue<IkReal> x7904=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x7900*(r10*r10)))+x7901+(((-2.0)*x7902*x7903))+(((-1.0)*x7900*x7901)))),-1);
if(!x7904.valid){
continue;
}
CheckValue<IkReal> x7905 = IKatan2WithCheck(IkReal(((((-1.0)*x7903))+x7902)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7904.value)))+(x7905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7906=IKsin(j4);
IkReal x7907=IKcos(j4);
IkReal x7908=(cj5*r10);
IkReal x7909=(r01*sj5);
IkReal x7910=(cj5*r00);
IkReal x7911=(cj5*r20);
IkReal x7912=((1.0)*x7907);
IkReal x7913=((1.0)*x7906);
IkReal x7914=(sj5*x7906);
evalcond[0]=(((r21*x7914))+(((-1.0)*r22*x7912))+(((-1.0)*x7911*x7913)));
evalcond[1]=((((-1.0)*r02*x7912))+(((-1.0)*x7910*x7913))+((x7906*x7909)));
evalcond[2]=((((-1.0)*r11*sj5*x7912))+(((-1.0)*r12*x7913))+((x7907*x7908)));
evalcond[3]=((1.0)+(((-1.0)*x7908*x7913))+((r11*x7914))+(((-1.0)*r12*x7912)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7913))+(((-1.0)*r21*sj5*x7912))+((x7907*x7911)));
evalcond[5]=((((-1.0)*r02*x7913))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7907*x7910))+(((-1.0)*x7909*x7912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7915=((1.0)*cj5);
CheckValue<IkReal> x7916 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7915)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7916.valid){
continue;
}
CheckValue<IkReal> x7917=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7915)))),-1);
if(!x7917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7916.value)+(((1.5707963267949)*(x7917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7918=IKsin(j4);
IkReal x7919=IKcos(j4);
IkReal x7920=(cj5*r10);
IkReal x7921=(r01*sj5);
IkReal x7922=(cj5*r00);
IkReal x7923=(cj5*r20);
IkReal x7924=((1.0)*x7919);
IkReal x7925=((1.0)*x7918);
IkReal x7926=(sj5*x7918);
evalcond[0]=((((-1.0)*r22*x7924))+(((-1.0)*x7923*x7925))+((r21*x7926)));
evalcond[1]=((((-1.0)*r02*x7924))+(((-1.0)*x7922*x7925))+((x7918*x7921)));
evalcond[2]=((((-1.0)*r11*sj5*x7924))+(((-1.0)*r12*x7925))+((x7919*x7920)));
evalcond[3]=((1.0)+(((-1.0)*x7920*x7925))+(((-1.0)*r12*x7924))+((r11*x7926)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7925))+(((-1.0)*r21*sj5*x7924))+((x7919*x7923)));
evalcond[5]=((((-1.0)*x7921*x7924))+(((-1.0)*r02*x7925))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7919*x7922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7927=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7927.valid){
continue;
}
CheckValue<IkReal> x7928 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7927.value)))+(x7928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7929=IKsin(j4);
IkReal x7930=IKcos(j4);
IkReal x7931=(cj5*r10);
IkReal x7932=(r01*sj5);
IkReal x7933=(cj5*r00);
IkReal x7934=(cj5*r20);
IkReal x7935=((1.0)*x7930);
IkReal x7936=((1.0)*x7929);
IkReal x7937=(sj5*x7929);
evalcond[0]=(((r21*x7937))+(((-1.0)*x7934*x7936))+(((-1.0)*r22*x7935)));
evalcond[1]=((((-1.0)*r02*x7935))+((x7929*x7932))+(((-1.0)*x7933*x7936)));
evalcond[2]=((((-1.0)*r11*sj5*x7935))+((x7930*x7931))+(((-1.0)*r12*x7936)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7935))+((r11*x7937))+(((-1.0)*x7931*x7936)));
evalcond[4]=(((cj2*sj1))+((x7930*x7934))+(((-1.0)*r22*x7936))+(((-1.0)*r21*sj5*x7935))+((cj1*sj2)));
evalcond[5]=(((x7930*x7933))+(((-1.0)*x7932*x7935))+(((-1.0)*r02*x7936))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7938=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7938;
j4eval[1]=IKsign(x7938);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7939=((1.0)*cj5);
IkReal x7940=((((-1.0)*r21*x7939))+(((-1.0)*r20*sj5)));
j4eval[0]=x7940;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x7939))+((r01*sj5))))));
j4eval[2]=IKsign(x7940);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7941=cj5*cj5;
IkReal x7942=r11*r11;
IkReal x7943=(cj5*r10);
IkReal x7944=(r11*sj5);
IkReal x7945=((((2.0)*x7943*x7944))+(((-1.0)*x7942))+(((-1.0)*(r12*r12)))+((x7941*x7942))+(((-1.0)*x7941*(r10*r10))));
j4eval[0]=x7945;
j4eval[1]=((IKabs(r12))+(IKabs((x7943+(((-1.0)*x7944))))));
j4eval[2]=IKsign(x7945);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7946=cj5*cj5;
IkReal x7947=r11*r11;
IkReal x7948=(cj5*r10);
IkReal x7949=(r11*sj5);
CheckValue<IkReal> x7950 = IKatan2WithCheck(IkReal((x7948+(((-1.0)*x7949)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7950.valid){
continue;
}
CheckValue<IkReal> x7951=IKPowWithIntegerCheck(IKsign((((x7946*x7947))+(((-1.0)*x7947))+(((-1.0)*(r12*r12)))+(((-1.0)*x7946*(r10*r10)))+(((2.0)*x7948*x7949)))),-1);
if(!x7951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7950.value)+(((1.5707963267949)*(x7951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7952=IKsin(j4);
IkReal x7953=IKcos(j4);
IkReal x7954=(cj5*r10);
IkReal x7955=(r01*sj5);
IkReal x7956=(cj5*r00);
IkReal x7957=(cj5*r20);
IkReal x7958=((1.0)*x7953);
IkReal x7959=((1.0)*x7952);
IkReal x7960=(sj5*x7952);
evalcond[0]=(((r21*x7960))+(((-1.0)*x7957*x7959))+(((-1.0)*r22*x7958)));
evalcond[1]=((((-1.0)*x7956*x7959))+(((-1.0)*r02*x7958))+((x7952*x7955)));
evalcond[2]=((((-1.0)*r11*sj5*x7958))+((x7953*x7954))+(((-1.0)*r12*x7959)));
evalcond[3]=((-1.0)+((r11*x7960))+(((-1.0)*x7954*x7959))+(((-1.0)*r12*x7958)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7959))+((cj1*sj2))+(((-1.0)*r21*sj5*x7958))+((x7953*x7957)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x7955*x7958))+(((-1.0)*r02*x7959))+((cj1*cj2))+((x7953*x7956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7961=((1.0)*cj5);
CheckValue<IkReal> x7962=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7961))+(((-1.0)*r20*sj5)))),-1);
if(!x7962.valid){
continue;
}
CheckValue<IkReal> x7963 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7961)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7962.value)))+(x7963.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7964=IKsin(j4);
IkReal x7965=IKcos(j4);
IkReal x7966=(cj5*r10);
IkReal x7967=(r01*sj5);
IkReal x7968=(cj5*r00);
IkReal x7969=(cj5*r20);
IkReal x7970=((1.0)*x7965);
IkReal x7971=((1.0)*x7964);
IkReal x7972=(sj5*x7964);
evalcond[0]=((((-1.0)*r22*x7970))+(((-1.0)*x7969*x7971))+((r21*x7972)));
evalcond[1]=(((x7964*x7967))+(((-1.0)*x7968*x7971))+(((-1.0)*r02*x7970)));
evalcond[2]=(((x7965*x7966))+(((-1.0)*r11*sj5*x7970))+(((-1.0)*r12*x7971)));
evalcond[3]=((-1.0)+(((-1.0)*x7966*x7971))+((r11*x7972))+(((-1.0)*r12*x7970)));
evalcond[4]=(((cj2*sj1))+((x7965*x7969))+(((-1.0)*r22*x7971))+((cj1*sj2))+(((-1.0)*r21*sj5*x7970)));
evalcond[5]=(((x7965*x7968))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7971))+(((-1.0)*x7967*x7970))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7973 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7973.valid){
continue;
}
CheckValue<IkReal> x7974=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7973.value)+(((1.5707963267949)*(x7974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7975=IKsin(j4);
IkReal x7976=IKcos(j4);
IkReal x7977=(cj5*r10);
IkReal x7978=(r01*sj5);
IkReal x7979=(cj5*r00);
IkReal x7980=(cj5*r20);
IkReal x7981=((1.0)*x7976);
IkReal x7982=((1.0)*x7975);
IkReal x7983=(sj5*x7975);
evalcond[0]=((((-1.0)*r22*x7981))+(((-1.0)*x7980*x7982))+((r21*x7983)));
evalcond[1]=(((x7975*x7978))+(((-1.0)*x7979*x7982))+(((-1.0)*r02*x7981)));
evalcond[2]=((((-1.0)*r12*x7982))+(((-1.0)*r11*sj5*x7981))+((x7976*x7977)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7981))+(((-1.0)*x7977*x7982))+((r11*x7983)));
evalcond[4]=((((-1.0)*r22*x7982))+((cj2*sj1))+(((-1.0)*r21*sj5*x7981))+((x7976*x7980))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x7978*x7981))+(((-1.0)*sj1*sj2))+((x7976*x7979))+((cj1*cj2))+(((-1.0)*r02*x7982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7984=((-1.0)*r00);
IkReal x7986 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7986)==0){
continue;
}
IkReal x7985=pow(x7986,-0.5);
CheckValue<IkReal> x7987 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7984),IKFAST_ATAN2_MAGTHRESH);
if(!x7987.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7987.value));
IkReal gconst145=(r01*x7985);
IkReal gconst146=(x7984*x7985);
CheckValue<IkReal> x7988 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7988.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7988.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7989=((-1.0)*r00);
IkReal x7990=x7985;
CheckValue<IkReal> x7992 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7989),IKFAST_ATAN2_MAGTHRESH);
if(!x7992.valid){
continue;
}
IkReal x7991=((-1.0)*(x7992.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7991;
IkReal gconst144=x7991;
IkReal gconst145=(r01*x7990);
IkReal gconst146=(x7989*x7990);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7993=((1.0)*sj0);
IkReal x7994=((1.0)*gconst145);
CheckValue<IkReal> x7995=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7994))+(((-1.0)*gconst146*r21)))),-1);
if(!x7995.valid){
continue;
}
CheckValue<IkReal> x7996 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7993))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x7993))+(((-1.0)*cj0*r01*x7994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7995.value)))+(x7996.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7997=IKsin(j4);
IkReal x7998=IKcos(j4);
IkReal x7999=(gconst146*r10);
IkReal x8000=(sj1*sj2);
IkReal x8001=(gconst146*r20);
IkReal x8002=(gconst146*r00);
IkReal x8003=((1.0)*x7998);
IkReal x8004=((1.0)*x7997);
IkReal x8005=(gconst145*x7997);
IkReal x8006=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8005))+(((-1.0)*r22*x8003))+(((-1.0)*x8001*x8004)));
evalcond[1]=(cj0+((r11*x8005))+(((-1.0)*x7999*x8004))+(((-1.0)*r12*x8003)));
evalcond[2]=(((r01*x8005))+(((-1.0)*sj0))+(((-1.0)*x8002*x8004))+(((-1.0)*r02*x8003)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8003))+((cj1*sj2))+((x7998*x8001))+(((-1.0)*r22*x8004)));
evalcond[4]=((((-1.0)*cj0*x8006))+((cj0*x8000))+((x7998*x8002))+(((-1.0)*gconst145*r01*x8003))+(((-1.0)*r02*x8004)));
evalcond[5]=(((sj0*x8000))+(((-1.0)*gconst145*r11*x8003))+((x7998*x7999))+(((-1.0)*r12*x8004))+(((-1.0)*sj0*x8006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8007=((1.0)*gconst146);
CheckValue<IkReal> x8008=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8007))+(((-1.0)*gconst145*r10)))),-1);
if(!x8008.valid){
continue;
}
CheckValue<IkReal> x8009 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst145*r21*sj0))+(((-1.0)*r20*sj0*x8007)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8008.value)))+(x8009.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8010=IKsin(j4);
IkReal x8011=IKcos(j4);
IkReal x8012=(gconst146*r10);
IkReal x8013=(sj1*sj2);
IkReal x8014=(gconst146*r20);
IkReal x8015=(gconst146*r00);
IkReal x8016=((1.0)*x8011);
IkReal x8017=((1.0)*x8010);
IkReal x8018=(gconst145*x8010);
IkReal x8019=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8016))+(((-1.0)*x8014*x8017))+((r21*x8018)));
evalcond[1]=((((-1.0)*x8012*x8017))+cj0+((r11*x8018))+(((-1.0)*r12*x8016)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8016))+((r01*x8018))+(((-1.0)*x8015*x8017)));
evalcond[3]=((((-1.0)*r22*x8017))+((cj2*sj1))+((cj1*sj2))+((x8011*x8014))+(((-1.0)*gconst145*r21*x8016)));
evalcond[4]=((((-1.0)*r02*x8017))+((cj0*x8013))+(((-1.0)*cj0*x8019))+(((-1.0)*gconst145*r01*x8016))+((x8011*x8015)));
evalcond[5]=((((-1.0)*gconst145*r11*x8016))+((sj0*x8013))+((x8011*x8012))+(((-1.0)*sj0*x8019))+(((-1.0)*r12*x8017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8020=((-1.0)*r01);
IkReal x8022 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8022)==0){
continue;
}
IkReal x8021=pow(x8022,-0.5);
CheckValue<IkReal> x8023 = IKatan2WithCheck(IkReal(x8020),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8023.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8023.value))));
IkReal gconst148=(x8020*x8021);
IkReal gconst149=((1.0)*r00*x8021);
CheckValue<IkReal> x8024 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8024.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8024.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8025=((-1.0)*r01);
CheckValue<IkReal> x8028 = IKatan2WithCheck(IkReal(x8025),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8028.valid){
continue;
}
IkReal x8026=((1.0)*(x8028.value));
IkReal x8027=x8021;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8026)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8026)));
IkReal gconst148=(x8025*x8027);
IkReal gconst149=((1.0)*r00*x8027);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8029=((-1.0)*r01);
CheckValue<IkReal> x8032 = IKatan2WithCheck(IkReal(x8029),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8032.valid){
continue;
}
IkReal x8030=((1.0)*(x8032.value));
IkReal x8031=x8021;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8030)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8030)));
IkReal gconst148=(x8029*x8031);
IkReal gconst149=((1.0)*r00*x8031);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8033=((-1.0)*r01);
CheckValue<IkReal> x8036 = IKatan2WithCheck(IkReal(x8033),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8036.valid){
continue;
}
IkReal x8034=((1.0)*(x8036.value));
IkReal x8035=x8021;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8034)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8034)));
IkReal gconst148=(x8033*x8035);
IkReal gconst149=((1.0)*r00*x8035);
IkReal x8037=r02*r02;
IkReal x8038=(r12*sj0);
IkReal x8039=((1.0)*cj0);
IkReal x8040=x8021;
j4eval[0]=((IKabs((((cj0*x8037*x8040))+(((-1.0)*x8039*x8040))+((r02*x8038*x8040)))))+(IKabs(((((-1.0)*x8038))+(((-1.0)*r02*x8039))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8041=((1.0)*sj0);
IkReal x8042=((1.0)*gconst148);
CheckValue<IkReal> x8043 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8041)))),IkReal(((((-1.0)*cj0*r01*x8042))+(((-1.0)*gconst148*r11*x8041))+((gconst149*r10*sj0))+((cj0*gconst149*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8043.valid){
continue;
}
CheckValue<IkReal> x8044=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8042))+(((-1.0)*gconst149*r21)))),-1);
if(!x8044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8043.value)+(((1.5707963267949)*(x8044.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8045=IKsin(j4);
IkReal x8046=IKcos(j4);
IkReal x8047=(gconst148*r11);
IkReal x8048=(sj1*sj2);
IkReal x8049=((1.0)*x8046);
IkReal x8050=(gconst149*x8046);
IkReal x8051=(gconst148*x8045);
IkReal x8052=((1.0)*cj1*cj2);
IkReal x8053=((1.0)*x8045);
evalcond[0]=((((-1.0)*gconst149*r20*x8053))+((r21*x8051))+(((-1.0)*r22*x8049)));
evalcond[1]=(cj0+((x8045*x8047))+(((-1.0)*gconst149*r10*x8053))+(((-1.0)*r12*x8049)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8049))+(((-1.0)*gconst149*r00*x8053))+((r01*x8051)));
evalcond[3]=(((cj2*sj1))+((r20*x8050))+(((-1.0)*gconst148*r21*x8049))+((cj1*sj2))+(((-1.0)*r22*x8053)));
evalcond[4]=(((r00*x8050))+(((-1.0)*gconst148*r01*x8049))+(((-1.0)*r02*x8053))+((cj0*x8048))+(((-1.0)*cj0*x8052)));
evalcond[5]=((((-1.0)*r12*x8053))+(((-1.0)*sj0*x8052))+((r10*x8050))+((sj0*x8048))+(((-1.0)*x8047*x8049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8054=((1.0)*gconst149);
CheckValue<IkReal> x8055=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8054)))),-1);
if(!x8055.valid){
continue;
}
CheckValue<IkReal> x8056 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8054))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8055.value)))+(x8056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8057=IKsin(j4);
IkReal x8058=IKcos(j4);
IkReal x8059=(gconst148*r11);
IkReal x8060=(sj1*sj2);
IkReal x8061=((1.0)*x8058);
IkReal x8062=(gconst149*x8058);
IkReal x8063=(gconst148*x8057);
IkReal x8064=((1.0)*cj1*cj2);
IkReal x8065=((1.0)*x8057);
evalcond[0]=(((r21*x8063))+(((-1.0)*gconst149*r20*x8065))+(((-1.0)*r22*x8061)));
evalcond[1]=(cj0+(((-1.0)*r12*x8061))+(((-1.0)*gconst149*r10*x8065))+((x8057*x8059)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8063))+(((-1.0)*gconst149*r00*x8065))+(((-1.0)*r02*x8061)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8061))+((r20*x8062))+(((-1.0)*r22*x8065)));
evalcond[4]=((((-1.0)*cj0*x8064))+((r00*x8062))+((cj0*x8060))+(((-1.0)*gconst148*r01*x8061))+(((-1.0)*r02*x8065)));
evalcond[5]=(((r10*x8062))+(((-1.0)*sj0*x8064))+(((-1.0)*r12*x8065))+(((-1.0)*x8059*x8061))+((sj0*x8060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8066=((1.0)*gconst149);
CheckValue<IkReal> x8067 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8066)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8067.valid){
continue;
}
CheckValue<IkReal> x8068=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8066)))),-1);
if(!x8068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8067.value)+(((1.5707963267949)*(x8068.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8069=IKsin(j4);
IkReal x8070=IKcos(j4);
IkReal x8071=(gconst148*r11);
IkReal x8072=(sj1*sj2);
IkReal x8073=((1.0)*x8070);
IkReal x8074=(gconst149*x8070);
IkReal x8075=(gconst148*x8069);
IkReal x8076=((1.0)*cj1*cj2);
IkReal x8077=((1.0)*x8069);
evalcond[0]=((((-1.0)*gconst149*r20*x8077))+((r21*x8075))+(((-1.0)*r22*x8073)));
evalcond[1]=(((x8069*x8071))+cj0+(((-1.0)*gconst149*r10*x8077))+(((-1.0)*r12*x8073)));
evalcond[2]=((((-1.0)*gconst149*r00*x8077))+(((-1.0)*sj0))+(((-1.0)*r02*x8073))+((r01*x8075)));
evalcond[3]=(((cj2*sj1))+((r20*x8074))+((cj1*sj2))+(((-1.0)*r22*x8077))+(((-1.0)*gconst148*r21*x8073)));
evalcond[4]=((((-1.0)*r02*x8077))+(((-1.0)*cj0*x8076))+((r00*x8074))+(((-1.0)*gconst148*r01*x8073))+((cj0*x8072)));
evalcond[5]=(((r10*x8074))+(((-1.0)*x8071*x8073))+((sj0*x8072))+(((-1.0)*sj0*x8076))+(((-1.0)*r12*x8077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8078=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8078;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8078);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8079=((1.0)*cj5);
IkReal x8080=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8079)));
j4eval[0]=x8080;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8079))))));
j4eval[2]=IKsign(x8080);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8081=cj5*cj5;
IkReal x8082=r01*r01;
IkReal x8083=(r01*sj5);
IkReal x8084=(cj5*r00);
IkReal x8085=((((2.0)*x8083*x8084))+(((-1.0)*x8082))+(((-1.0)*x8081*(r00*r00)))+(((-1.0)*(r02*r02)))+((x8081*x8082)));
j4eval[0]=x8085;
j4eval[1]=IKsign(x8085);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8083))+x8084))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8086=cj5*cj5;
IkReal x8087=r01*r01;
IkReal x8088=(r01*sj5);
IkReal x8089=(cj5*r00);
CheckValue<IkReal> x8090 = IKatan2WithCheck(IkReal(((((-1.0)*x8088))+x8089)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8090.valid){
continue;
}
CheckValue<IkReal> x8091=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8086*(r00*r00)))+(((-1.0)*x8087))+((x8086*x8087))+(((-1.0)*(r02*r02)))+(((2.0)*x8088*x8089)))),-1);
if(!x8091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8090.value)+(((1.5707963267949)*(x8091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8092=IKsin(j4);
IkReal x8093=IKcos(j4);
IkReal x8094=(cj5*r10);
IkReal x8095=(r01*sj5);
IkReal x8096=(cj5*r00);
IkReal x8097=(cj5*r20);
IkReal x8098=((1.0)*x8093);
IkReal x8099=((1.0)*x8092);
IkReal x8100=(sj5*x8092);
evalcond[0]=((((-1.0)*x8097*x8099))+(((-1.0)*r22*x8098))+((r21*x8100)));
evalcond[1]=((((-1.0)*x8094*x8099))+((r11*x8100))+(((-1.0)*r12*x8098)));
evalcond[2]=((((-1.0)*x8095*x8098))+(((-1.0)*r02*x8099))+((x8093*x8096)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8098))+((x8092*x8095))+(((-1.0)*x8096*x8099)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8098))+((cj1*sj2))+(((-1.0)*r22*x8099))+((x8093*x8097)));
evalcond[5]=((((-1.0)*r11*sj5*x8098))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8099))+((x8093*x8094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8101=((1.0)*cj5);
CheckValue<IkReal> x8102 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8101)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8102.valid){
continue;
}
CheckValue<IkReal> x8103=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8101))+(((-1.0)*r10*sj5)))),-1);
if(!x8103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8102.value)+(((1.5707963267949)*(x8103.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8104=IKsin(j4);
IkReal x8105=IKcos(j4);
IkReal x8106=(cj5*r10);
IkReal x8107=(r01*sj5);
IkReal x8108=(cj5*r00);
IkReal x8109=(cj5*r20);
IkReal x8110=((1.0)*x8105);
IkReal x8111=((1.0)*x8104);
IkReal x8112=(sj5*x8104);
evalcond[0]=((((-1.0)*x8109*x8111))+((r21*x8112))+(((-1.0)*r22*x8110)));
evalcond[1]=((((-1.0)*r12*x8110))+((r11*x8112))+(((-1.0)*x8106*x8111)));
evalcond[2]=((((-1.0)*r02*x8111))+((x8105*x8108))+(((-1.0)*x8107*x8110)));
evalcond[3]=((-1.0)+(((-1.0)*x8108*x8111))+(((-1.0)*r02*x8110))+((x8104*x8107)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8110))+((cj1*sj2))+((x8105*x8109))+(((-1.0)*r22*x8111)));
evalcond[5]=((((-1.0)*r11*sj5*x8110))+(((-1.0)*r12*x8111))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8105*x8106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8113=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8113.valid){
continue;
}
CheckValue<IkReal> x8114 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8113.value)))+(x8114.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8115=IKsin(j4);
IkReal x8116=IKcos(j4);
IkReal x8117=(cj5*r10);
IkReal x8118=(r01*sj5);
IkReal x8119=(cj5*r00);
IkReal x8120=(cj5*r20);
IkReal x8121=((1.0)*x8116);
IkReal x8122=((1.0)*x8115);
IkReal x8123=(sj5*x8115);
evalcond[0]=(((r21*x8123))+(((-1.0)*r22*x8121))+(((-1.0)*x8120*x8122)));
evalcond[1]=((((-1.0)*r12*x8121))+((r11*x8123))+(((-1.0)*x8117*x8122)));
evalcond[2]=(((x8116*x8119))+(((-1.0)*r02*x8122))+(((-1.0)*x8118*x8121)));
evalcond[3]=((-1.0)+((x8115*x8118))+(((-1.0)*r02*x8121))+(((-1.0)*x8119*x8122)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8121))+((cj1*sj2))+((x8116*x8120))+(((-1.0)*r22*x8122)));
evalcond[5]=((((-1.0)*r11*sj5*x8121))+(((-1.0)*r12*x8122))+((x8116*x8117))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8124=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8124;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8124);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8125=((1.0)*cj5);
IkReal x8126=((((-1.0)*r21*x8125))+(((-1.0)*r20*sj5)));
j4eval[0]=x8126;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8125))))));
j4eval[2]=IKsign(x8126);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8127=cj5*cj5;
IkReal x8128=r01*r01;
IkReal x8129=(cj5*r00);
IkReal x8130=(r01*sj5);
IkReal x8131=((((-2.0)*x8129*x8130))+((x8127*(r00*r00)))+(r02*r02)+x8128+(((-1.0)*x8127*x8128)));
j4eval[0]=x8131;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8130))+x8129))));
j4eval[2]=IKsign(x8131);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8132=cj5*cj5;
IkReal x8133=r01*r01;
IkReal x8134=(r01*sj5);
IkReal x8135=(cj5*r00);
CheckValue<IkReal> x8136=IKPowWithIntegerCheck(IKsign((((x8132*(r00*r00)))+(((-1.0)*x8132*x8133))+(r02*r02)+x8133+(((-2.0)*x8134*x8135)))),-1);
if(!x8136.valid){
continue;
}
CheckValue<IkReal> x8137 = IKatan2WithCheck(IkReal(((((-1.0)*x8134))+x8135)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8136.value)))+(x8137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8138=IKsin(j4);
IkReal x8139=IKcos(j4);
IkReal x8140=(cj5*r10);
IkReal x8141=(r01*sj5);
IkReal x8142=(cj5*r00);
IkReal x8143=(cj5*r20);
IkReal x8144=((1.0)*x8139);
IkReal x8145=((1.0)*x8138);
IkReal x8146=(sj5*x8138);
evalcond[0]=((((-1.0)*x8143*x8145))+(((-1.0)*r22*x8144))+((r21*x8146)));
evalcond[1]=((((-1.0)*x8140*x8145))+((r11*x8146))+(((-1.0)*r12*x8144)));
evalcond[2]=((((-1.0)*x8141*x8144))+(((-1.0)*r02*x8145))+((x8139*x8142)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8144))+((x8138*x8141))+(((-1.0)*x8142*x8145)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8145))+(((-1.0)*r21*sj5*x8144))+((x8139*x8143)));
evalcond[5]=((((-1.0)*r11*sj5*x8144))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8145))+((cj1*cj2))+((x8139*x8140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8147=((1.0)*cj5);
CheckValue<IkReal> x8148 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8147))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8148.valid){
continue;
}
CheckValue<IkReal> x8149=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8147))+(((-1.0)*r20*sj5)))),-1);
if(!x8149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8148.value)+(((1.5707963267949)*(x8149.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8150=IKsin(j4);
IkReal x8151=IKcos(j4);
IkReal x8152=(cj5*r10);
IkReal x8153=(r01*sj5);
IkReal x8154=(cj5*r00);
IkReal x8155=(cj5*r20);
IkReal x8156=((1.0)*x8151);
IkReal x8157=((1.0)*x8150);
IkReal x8158=(sj5*x8150);
evalcond[0]=((((-1.0)*r22*x8156))+(((-1.0)*x8155*x8157))+((r21*x8158)));
evalcond[1]=(((r11*x8158))+(((-1.0)*r12*x8156))+(((-1.0)*x8152*x8157)));
evalcond[2]=((((-1.0)*x8153*x8156))+(((-1.0)*r02*x8157))+((x8151*x8154)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8156))+((x8150*x8153))+(((-1.0)*x8154*x8157)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8151*x8155))+(((-1.0)*r21*sj5*x8156))+(((-1.0)*r22*x8157)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8156))+((x8151*x8152))+((cj1*cj2))+(((-1.0)*r12*x8157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8159 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8159.valid){
continue;
}
CheckValue<IkReal> x8160=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8159.value)+(((1.5707963267949)*(x8160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8161=IKsin(j4);
IkReal x8162=IKcos(j4);
IkReal x8163=(cj5*r10);
IkReal x8164=(r01*sj5);
IkReal x8165=(cj5*r00);
IkReal x8166=(cj5*r20);
IkReal x8167=((1.0)*x8162);
IkReal x8168=((1.0)*x8161);
IkReal x8169=(sj5*x8161);
evalcond[0]=((((-1.0)*x8166*x8168))+((r21*x8169))+(((-1.0)*r22*x8167)));
evalcond[1]=(((r11*x8169))+(((-1.0)*r12*x8167))+(((-1.0)*x8163*x8168)));
evalcond[2]=((((-1.0)*r02*x8168))+((x8162*x8165))+(((-1.0)*x8164*x8167)));
evalcond[3]=((1.0)+(((-1.0)*x8165*x8168))+(((-1.0)*r02*x8167))+((x8161*x8164)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8167))+((cj1*sj2))+((x8162*x8166))+(((-1.0)*r22*x8168)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x8168))+((x8162*x8163))+(((-1.0)*r11*sj5*x8167))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8170=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8170);
rxp1_1=(px*r21);
rxp1_2=(r11*x8170);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8171=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8171);
rxp1_1=(px*r21);
rxp1_2=(r11*x8171);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8172=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8172);
rxp1_1=(px*r21);
rxp1_2=(r11*x8172);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8175=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8175.valid){
continue;
}
IkReal x8173=x8175.value;
IkReal x8174=(sj0*x8173);
cj4array[0]=((((-1.0)*sj1*sj2*x8174))+((cj1*cj2*x8174)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8176=IKsin(j4);
IkReal x8177=IKcos(j4);
IkReal x8178=(r21*sj5);
IkReal x8179=(cj5*r20);
IkReal x8180=((1.0)*x8176);
IkReal x8181=((1.0)*x8177);
evalcond[0]=((-1.0)*r02*x8176);
evalcond[1]=((((-1.0)*r02*x8181))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x8179*x8180))+((x8176*x8178)));
evalcond[3]=(((r11*sj5*x8176))+(((-1.0)*cj5*r10*x8180)));
evalcond[4]=(((x8177*x8179))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8178*x8181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8184=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8184.valid){
continue;
}
IkReal x8182=x8184.value;
IkReal x8183=((1.0)*x8182);
cj4array[0]=((((-1.0)*cj2*sj1*x8183))+(((-1.0)*cj1*sj2*x8183)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8185=IKsin(j4);
IkReal x8186=IKcos(j4);
IkReal x8187=(r11*sj5);
IkReal x8188=((1.0)*sj0);
IkReal x8189=((1.0)*x8186);
IkReal x8190=((1.0)*cj5*x8185);
evalcond[0]=((-1.0)*r02*x8185);
evalcond[1]=((((-1.0)*r02*x8189))+(((-1.0)*x8188)));
evalcond[2]=(((r21*sj5*x8185))+(((-1.0)*r20*x8190)));
evalcond[3]=(((x8185*x8187))+(((-1.0)*r10*x8190)));
evalcond[4]=((((-1.0)*cj1*cj2*x8188))+(((-1.0)*x8187*x8189))+((sj0*sj1*sj2))+((cj5*r10*x8186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8191=IKPowWithIntegerCheck(r02,-1);
if(!x8191.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8191.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8192=IKsin(j4);
IkReal x8193=IKcos(j4);
IkReal x8194=(cj5*x8193);
IkReal x8195=(sj5*x8192);
IkReal x8196=((1.0)*sj5*x8193);
IkReal x8197=((1.0)*cj5*x8192);
evalcond[0]=((-1.0)*r02*x8192);
evalcond[1]=(((r21*x8195))+(((-1.0)*r20*x8197)));
evalcond[2]=(((r11*x8195))+(((-1.0)*r10*x8197)));
evalcond[3]=(((r20*x8194))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8196)));
evalcond[4]=(((r10*x8194))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*r11*x8196))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8198=((1.0)*sj0);
IkReal x8199=((1.0)*cj0);
CheckValue<IkReal> x8200=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8200.valid){
continue;
}
CheckValue<IkReal> x8201 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8199))+(((-1.0)*r12*x8198)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8199))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8200.value)))+(x8201.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8202=IKsin(j4);
IkReal x8203=IKcos(j4);
IkReal x8204=(cj5*r10);
IkReal x8205=(sj1*sj2);
IkReal x8206=(r01*sj5);
IkReal x8207=(cj5*r00);
IkReal x8208=(cj5*r20);
IkReal x8209=((1.0)*x8203);
IkReal x8210=((1.0)*cj1*cj2);
IkReal x8211=((1.0)*x8202);
IkReal x8212=(sj5*x8202);
evalcond[0]=((((-1.0)*x8208*x8211))+(((-1.0)*r22*x8209))+((r21*x8212)));
evalcond[1]=(((r11*x8212))+cj0+(((-1.0)*x8204*x8211))+(((-1.0)*r12*x8209)));
evalcond[2]=((((-1.0)*sj0))+((x8202*x8206))+(((-1.0)*r02*x8209))+(((-1.0)*x8207*x8211)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8203*x8208))+(((-1.0)*r21*sj5*x8209))+(((-1.0)*r22*x8211)));
evalcond[4]=((((-1.0)*cj0*x8210))+((cj0*x8205))+(((-1.0)*r02*x8211))+((x8203*x8207))+(((-1.0)*x8206*x8209)));
evalcond[5]=(((sj0*x8205))+((x8203*x8204))+(((-1.0)*r12*x8211))+(((-1.0)*sj0*x8210))+(((-1.0)*r11*sj5*x8209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8213=((1.0)*cj5);
CheckValue<IkReal> x8214=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8213)))),-1);
if(!x8214.valid){
continue;
}
CheckValue<IkReal> x8215 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8214.value)))+(x8215.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8216=IKsin(j4);
IkReal x8217=IKcos(j4);
IkReal x8218=(cj5*r10);
IkReal x8219=(sj1*sj2);
IkReal x8220=(r01*sj5);
IkReal x8221=(cj5*r00);
IkReal x8222=(cj5*r20);
IkReal x8223=((1.0)*x8217);
IkReal x8224=((1.0)*cj1*cj2);
IkReal x8225=((1.0)*x8216);
IkReal x8226=(sj5*x8216);
evalcond[0]=(((r21*x8226))+(((-1.0)*r22*x8223))+(((-1.0)*x8222*x8225)));
evalcond[1]=(cj0+((r11*x8226))+(((-1.0)*x8218*x8225))+(((-1.0)*r12*x8223)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8221*x8225))+(((-1.0)*r02*x8223))+((x8216*x8220)));
evalcond[3]=(((cj2*sj1))+((x8217*x8222))+((cj1*sj2))+(((-1.0)*r21*sj5*x8223))+(((-1.0)*r22*x8225)));
evalcond[4]=((((-1.0)*x8220*x8223))+((x8217*x8221))+((cj0*x8219))+(((-1.0)*r02*x8225))+(((-1.0)*cj0*x8224)));
evalcond[5]=(((x8217*x8218))+(((-1.0)*r11*sj5*x8223))+(((-1.0)*r12*x8225))+(((-1.0)*sj0*x8224))+((sj0*x8219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8227=((1.0)*cj5);
CheckValue<IkReal> x8228 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8227)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8228.valid){
continue;
}
CheckValue<IkReal> x8229=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8227)))),-1);
if(!x8229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8228.value)+(((1.5707963267949)*(x8229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8230=IKsin(j4);
IkReal x8231=IKcos(j4);
IkReal x8232=(cj5*r10);
IkReal x8233=(sj1*sj2);
IkReal x8234=(r01*sj5);
IkReal x8235=(cj5*r00);
IkReal x8236=(cj5*r20);
IkReal x8237=((1.0)*x8231);
IkReal x8238=((1.0)*cj1*cj2);
IkReal x8239=((1.0)*x8230);
IkReal x8240=(sj5*x8230);
evalcond[0]=((((-1.0)*x8236*x8239))+((r21*x8240))+(((-1.0)*r22*x8237)));
evalcond[1]=(cj0+(((-1.0)*r12*x8237))+(((-1.0)*x8232*x8239))+((r11*x8240)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8237))+((x8230*x8234))+(((-1.0)*x8235*x8239)));
evalcond[3]=(((cj2*sj1))+((x8231*x8236))+((cj1*sj2))+(((-1.0)*r21*sj5*x8237))+(((-1.0)*r22*x8239)));
evalcond[4]=(((x8231*x8235))+((cj0*x8233))+(((-1.0)*x8234*x8237))+(((-1.0)*r02*x8239))+(((-1.0)*cj0*x8238)));
evalcond[5]=(((x8231*x8232))+(((-1.0)*r11*sj5*x8237))+(((-1.0)*r12*x8239))+(((-1.0)*sj0*x8238))+((sj0*x8233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8241=cj5*cj5;
IkReal x8242=r21*r21;
IkReal x8243=(cj2*sj1);
IkReal x8244=(cj1*sj2);
IkReal x8245=(r21*sj5);
IkReal x8246=((1.0)*cj5*r20);
CheckValue<IkReal> x8247 = IKatan2WithCheck(IkReal((((r22*x8243))+((r22*x8244)))),IkReal(((((-1.0)*x8244*x8246))+((x8243*x8245))+(((-1.0)*x8243*x8246))+((x8244*x8245)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8247.valid){
continue;
}
CheckValue<IkReal> x8248=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*r20*x8245))+(r22*r22)+(((-1.0)*x8241*x8242))+((x8241*(r20*r20)))+x8242)),-1);
if(!x8248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8247.value)+(((1.5707963267949)*(x8248.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8249=IKsin(j4);
IkReal x8250=IKcos(j4);
IkReal x8251=(r21*sj5);
IkReal x8252=(cj5*r20);
IkReal x8253=((1.0)*x8250);
IkReal x8254=((1.0)*x8249);
evalcond[0]=((((-1.0)*r22*x8253))+(((-1.0)*x8252*x8254))+((x8249*x8251)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8251*x8253))+(((-1.0)*r22*x8254))+((x8250*x8252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8255=(cj5*sj4);
IkReal x8256=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8256))+(((-1.0)*r00*x8255)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x8255))+(((-1.0)*r11*x8256))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8256))+(((-1.0)*r00*x8255))))+IKsqr((((r10*x8255))+(((-1.0)*r11*x8256))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8256))+(((-1.0)*r00*x8255))), (((r10*x8255))+(((-1.0)*r11*x8256))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8257=IKcos(j0);
IkReal x8258=IKsin(j0);
IkReal x8259=(cj4*cj5);
IkReal x8260=((0.1)*sj5);
IkReal x8261=((0.392)*sj1);
IkReal x8262=(cj5*r11);
IkReal x8263=((1.0)*cj1);
IkReal x8264=(r11*sj5);
IkReal x8265=((1.0)*sj5);
IkReal x8266=((1.0)*sj4);
IkReal x8267=((0.392)*cj1);
IkReal x8268=((1.0)*sj1);
IkReal x8269=(cj5*r01);
IkReal x8270=((0.425)*cj1);
IkReal x8271=((1.0)*cj4);
IkReal x8272=(sj2*x8258);
IkReal x8273=(sj2*x8257);
IkReal x8274=(cj2*x8257);
IkReal x8275=(cj2*x8258);
evalcond[0]=(((sj4*x8264))+(((-1.0)*cj5*r10*x8266))+(((-1.0)*r12*x8271))+x8257);
evalcond[1]=((((-1.0)*x8258))+(((-1.0)*cj5*r00*x8266))+((r01*sj4*sj5))+(((-1.0)*r02*x8271)));
evalcond[2]=((((-1.0)*x8268*x8274))+(((-1.0)*r00*x8265))+(((-1.0)*x8269))+(((-1.0)*x8263*x8273)));
evalcond[3]=((((-1.0)*r10*x8265))+(((-1.0)*x8268*x8275))+(((-1.0)*x8262))+(((-1.0)*x8263*x8272)));
evalcond[4]=(((r00*x8259))+(((-1.0)*cj4*r01*x8265))+(((-1.0)*r02*x8266))+((sj1*x8273))+(((-1.0)*x8263*x8274)));
evalcond[5]=((((-1.0)*r12*x8266))+((r10*x8259))+(((-1.0)*x8264*x8271))+((sj1*x8272))+(((-1.0)*x8263*x8275)));
evalcond[6]=(((x8257*x8270))+(((-0.134)*x8258))+(((-1.0)*x8261*x8273))+(((-1.0)*px))+(((-0.1)*x8269))+(((-1.0)*r00*x8260))+((x8267*x8274)));
evalcond[7]=((((-1.0)*r10*x8260))+(((-1.0)*x8261*x8272))+((x8258*x8270))+(((-1.0)*py))+(((-0.1)*x8262))+(((0.134)*x8257))+((x8267*x8275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8276 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8276.valid){
continue;
}
CheckValue<IkReal> x8277=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8277.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8276.value)+(((1.5707963267949)*(x8277.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8278=IKcos(j0);
IkReal x8279=IKsin(j0);
IkReal x8280=(r00*sj5);
IkReal x8281=(cj5*r11);
IkReal x8282=(r10*sj5);
IkReal x8283=((1.0)*cj2);
IkReal x8284=(cj5*r01);
IkReal x8285=((0.392)*sj2);
IkReal x8286=((0.425)*cj1);
IkReal x8287=((1.0)*cj1*sj2);
IkReal x8288=((0.392)*cj1*cj2);
IkReal x8289=(sj1*x8278);
IkReal x8290=(sj1*x8279);
evalcond[0]=((((-1.0)*x8283*x8289))+(((-1.0)*x8280))+(((-1.0)*x8284))+(((-1.0)*x8278*x8287)));
evalcond[1]=((((-1.0)*x8281))+(((-1.0)*x8282))+(((-1.0)*x8283*x8290))+(((-1.0)*x8279*x8287)));
evalcond[2]=((((-1.0)*x8285*x8289))+(((-1.0)*px))+((x8278*x8286))+((x8278*x8288))+(((-0.1)*x8284))+(((-0.1)*x8280))+(((-0.134)*x8279)));
evalcond[3]=((((-1.0)*x8285*x8290))+((x8279*x8288))+((x8279*x8286))+(((-1.0)*py))+(((-0.1)*x8282))+(((-0.1)*x8281))+(((0.134)*x8278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8291=((1.0)*cj5);
IkReal x8292=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8291)));
j4eval[0]=x8292;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8291)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8292);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8293=((1.0)*cj5);
IkReal x8294=((((-1.0)*r11*x8293))+(((-1.0)*r10*sj5)));
j4eval[0]=x8294;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8293)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x8294);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8295=((1.0)*sj0);
IkReal x8296=((1.0)*cj0);
IkReal x8297=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8297;
j4eval[1]=((IKabs(((((-1.0)*r12*x8295))+(((-1.0)*r02*x8296)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8295))+(((-1.0)*r01*sj5*x8296))))));
j4eval[2]=IKsign(x8297);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8298=((-1.0)*r20);
IkReal x8300 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8300)==0){
continue;
}
IkReal x8299=pow(x8300,-0.5);
CheckValue<IkReal> x8301 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8298),IKFAST_ATAN2_MAGTHRESH);
if(!x8301.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8301.value));
IkReal gconst133=(r21*x8299);
IkReal gconst134=(x8298*x8299);
CheckValue<IkReal> x8302 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8302.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8302.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8303=((-1.0)*r20);
IkReal x8304=x8299;
CheckValue<IkReal> x8306 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8303),IKFAST_ATAN2_MAGTHRESH);
if(!x8306.valid){
continue;
}
IkReal x8305=((-1.0)*(x8306.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8305;
IkReal gconst132=x8305;
IkReal gconst133=(r21*x8304);
IkReal gconst134=(x8303*x8304);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8307=((-1.0)*r20);
IkReal x8308=x8299;
CheckValue<IkReal> x8310 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8307),IKFAST_ATAN2_MAGTHRESH);
if(!x8310.valid){
continue;
}
IkReal x8309=((-1.0)*(x8310.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8309;
IkReal gconst132=x8309;
IkReal gconst133=(r21*x8308);
IkReal gconst134=(x8307*x8308);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8311=((-1.0)*r20);
IkReal x8312=x8299;
CheckValue<IkReal> x8314 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8311),IKFAST_ATAN2_MAGTHRESH);
if(!x8314.valid){
continue;
}
IkReal x8313=((-1.0)*(x8314.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8313;
IkReal gconst132=x8313;
IkReal gconst133=(r21*x8312);
IkReal gconst134=(x8311*x8312);
IkReal x8315=r22*r22;
CheckValue<IkReal> x8318=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8315))),-1);
if(!x8318.valid){
continue;
}
IkReal x8316=x8318.value;
IkReal x8317=(x8315+(((2.0)*x8316*(r20*r20)*(r21*r21)))+((x8316*(r21*r21*r21*r21)))+((x8316*(r20*r20*r20*r20))));
j4eval[0]=x8317;
j4eval[1]=IKsign(x8317);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8319=(gconst133*r21);
IkReal x8320=(cj1*sj2);
IkReal x8321=(gconst134*r20);
IkReal x8322=(cj2*sj1);
CheckValue<IkReal> x8323=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8319*x8319)+(x8321*x8321)+(((-2.0)*x8319*x8321)))),-1);
if(!x8323.valid){
continue;
}
CheckValue<IkReal> x8324 = IKatan2WithCheck(IkReal((((r22*x8322))+((r22*x8320)))),IkReal(((((-1.0)*x8321*x8322))+((x8319*x8322))+((x8319*x8320))+(((-1.0)*x8320*x8321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8323.value)))+(x8324.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8325=IKsin(j4);
IkReal x8326=IKcos(j4);
IkReal x8327=(sj1*sj2);
IkReal x8328=(gconst133*r11);
IkReal x8329=(gconst133*r21);
IkReal x8330=(gconst133*r01);
IkReal x8331=((1.0)*x8326);
IkReal x8332=(gconst134*x8326);
IkReal x8333=((1.0)*x8325);
IkReal x8334=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8331))+(((-1.0)*gconst134*r20*x8333))+((x8325*x8329)));
evalcond[1]=(cj0+(((-1.0)*r12*x8331))+(((-1.0)*gconst134*r10*x8333))+((x8325*x8328)));
evalcond[2]=((((-1.0)*gconst134*r00*x8333))+(((-1.0)*sj0))+((x8325*x8330))+(((-1.0)*r02*x8331)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8333))+((cj1*sj2))+((r20*x8332))+(((-1.0)*x8329*x8331)));
evalcond[4]=(((cj0*x8327))+((r00*x8332))+(((-1.0)*x8330*x8331))+(((-1.0)*r02*x8333))+(((-1.0)*cj0*x8334)));
evalcond[5]=((((-1.0)*r12*x8333))+((r10*x8332))+((sj0*x8327))+(((-1.0)*sj0*x8334))+(((-1.0)*x8328*x8331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8335=((1.0)*gconst134);
CheckValue<IkReal> x8336 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst133*r21*sj0))+(((-1.0)*r20*sj0*x8335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8336.valid){
continue;
}
CheckValue<IkReal> x8337=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x8335)))),-1);
if(!x8337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8336.value)+(((1.5707963267949)*(x8337.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8338=IKsin(j4);
IkReal x8339=IKcos(j4);
IkReal x8340=(sj1*sj2);
IkReal x8341=(gconst133*r11);
IkReal x8342=(gconst133*r21);
IkReal x8343=(gconst133*r01);
IkReal x8344=((1.0)*x8339);
IkReal x8345=(gconst134*x8339);
IkReal x8346=((1.0)*x8338);
IkReal x8347=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8344))+(((-1.0)*gconst134*r20*x8346))+((x8338*x8342)));
evalcond[1]=((((-1.0)*gconst134*r10*x8346))+cj0+((x8338*x8341))+(((-1.0)*r12*x8344)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8344))+((x8338*x8343))+(((-1.0)*gconst134*r00*x8346)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8342*x8344))+((cj1*sj2))+((r20*x8345))+(((-1.0)*r22*x8346)));
evalcond[4]=((((-1.0)*r02*x8346))+(((-1.0)*x8343*x8344))+((cj0*x8340))+(((-1.0)*cj0*x8347))+((r00*x8345)));
evalcond[5]=(((sj0*x8340))+(((-1.0)*x8341*x8344))+(((-1.0)*r12*x8346))+(((-1.0)*sj0*x8347))+((r10*x8345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8348=((1.0)*gconst134);
CheckValue<IkReal> x8349 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*r20*x8348)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8349.valid){
continue;
}
CheckValue<IkReal> x8350=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8348)))),-1);
if(!x8350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8349.value)+(((1.5707963267949)*(x8350.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8351=IKsin(j4);
IkReal x8352=IKcos(j4);
IkReal x8353=(sj1*sj2);
IkReal x8354=(gconst133*r11);
IkReal x8355=(gconst133*r21);
IkReal x8356=(gconst133*r01);
IkReal x8357=((1.0)*x8352);
IkReal x8358=(gconst134*x8352);
IkReal x8359=((1.0)*x8351);
IkReal x8360=((1.0)*cj1*cj2);
evalcond[0]=(((x8351*x8355))+(((-1.0)*r22*x8357))+(((-1.0)*gconst134*r20*x8359)));
evalcond[1]=(((x8351*x8354))+cj0+(((-1.0)*r12*x8357))+(((-1.0)*gconst134*r10*x8359)));
evalcond[2]=((((-1.0)*sj0))+((x8351*x8356))+(((-1.0)*r02*x8357))+(((-1.0)*gconst134*r00*x8359)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8359))+((cj1*sj2))+((r20*x8358))+(((-1.0)*x8355*x8357)));
evalcond[4]=((((-1.0)*r02*x8359))+((cj0*x8353))+(((-1.0)*cj0*x8360))+((r00*x8358))+(((-1.0)*x8356*x8357)));
evalcond[5]=((((-1.0)*x8354*x8357))+((r10*x8358))+(((-1.0)*r12*x8359))+((sj0*x8353))+(((-1.0)*sj0*x8360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8361=((-1.0)*r21);
IkReal x8363 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8363)==0){
continue;
}
IkReal x8362=pow(x8363,-0.5);
CheckValue<IkReal> x8364 = IKatan2WithCheck(IkReal(x8361),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8364.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8364.value))));
IkReal gconst136=(x8361*x8362);
IkReal gconst137=((1.0)*r20*x8362);
CheckValue<IkReal> x8365 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8365.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8365.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8366=((-1.0)*r21);
CheckValue<IkReal> x8369 = IKatan2WithCheck(IkReal(x8366),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8369.valid){
continue;
}
IkReal x8367=((1.0)*(x8369.value));
IkReal x8368=x8362;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8367)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8367)));
IkReal gconst136=(x8366*x8368);
IkReal gconst137=((1.0)*r20*x8368);
IkReal x8370=r22*r22;
IkReal x8371=((1.0)*x8370);
CheckValue<IkReal> x8375=IKPowWithIntegerCheck(((-1.0)+x8370),-1);
if(!x8375.valid){
continue;
}
IkReal x8372=x8375.value;
if((((1.0)+(((-1.0)*x8371)))) < -0.00001)
continue;
IkReal x8373=IKsqrt(((1.0)+(((-1.0)*x8371))));
IkReal x8374=(cj0*x8372*x8373);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x8371*x8374))+x8374))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8376=((-1.0)*r21);
CheckValue<IkReal> x8379 = IKatan2WithCheck(IkReal(x8376),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8379.valid){
continue;
}
IkReal x8377=((1.0)*(x8379.value));
IkReal x8378=x8362;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8377)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8377)));
IkReal gconst136=(x8376*x8378);
IkReal gconst137=((1.0)*r20*x8378);
IkReal x8380=r22*r22;
IkReal x8381=((1.0)*x8380);
CheckValue<IkReal> x8385=IKPowWithIntegerCheck(((-1.0)+x8380),-1);
if(!x8385.valid){
continue;
}
IkReal x8382=x8385.value;
if((((1.0)+(((-1.0)*x8381)))) < -0.00001)
continue;
IkReal x8383=IKsqrt(((1.0)+(((-1.0)*x8381))));
IkReal x8384=(sj0*x8382*x8383);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8384+(((-1.0)*x8381*x8384))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8386=((-1.0)*r21);
CheckValue<IkReal> x8389 = IKatan2WithCheck(IkReal(x8386),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8389.valid){
continue;
}
IkReal x8387=((1.0)*(x8389.value));
IkReal x8388=x8362;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8387)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8387)));
IkReal gconst136=(x8386*x8388);
IkReal gconst137=((1.0)*r20*x8388);
IkReal x8390=r22*r22;
IkReal x8391=(r12*sj0);
IkReal x8392=(cj0*r02);
CheckValue<IkReal> x8396=IKPowWithIntegerCheck(((-1.0)+x8390),-1);
if(!x8396.valid){
continue;
}
IkReal x8393=x8396.value;
if((((1.0)+(((-1.0)*x8390)))) < -0.00001)
continue;
IkReal x8394=IKsqrt(((1.0)+(((-1.0)*x8390))));
IkReal x8395=(r22*x8393*x8394);
j4eval[0]=0;
j4eval[1]=((IKabs((((x8392*x8395))+((x8391*x8395)))))+(IKabs(((((-1.0)*x8391))+(((-1.0)*x8392))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8397=((1.0)*sj0);
IkReal x8398=((1.0)*cj0);
CheckValue<IkReal> x8399 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8398))+(((-1.0)*r12*x8397)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x8397))+((cj0*gconst137*r00))+(((-1.0)*gconst136*r01*x8398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8399.valid){
continue;
}
CheckValue<IkReal> x8400=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8399.value)+(((1.5707963267949)*(x8400.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8401=IKsin(j4);
IkReal x8402=IKcos(j4);
IkReal x8403=(gconst136*r01);
IkReal x8404=(gconst137*r10);
IkReal x8405=(sj1*sj2);
IkReal x8406=(gconst137*r20);
IkReal x8407=(gconst136*r11);
IkReal x8408=(gconst136*r21);
IkReal x8409=(gconst137*r00);
IkReal x8410=((1.0)*x8402);
IkReal x8411=((1.0)*cj1*cj2);
IkReal x8412=((1.0)*x8401);
evalcond[0]=(((x8401*x8408))+(((-1.0)*x8406*x8412))+(((-1.0)*r22*x8410)));
evalcond[1]=((((-1.0)*x8404*x8412))+((x8401*x8407))+(((-1.0)*r12*x8410))+cj0);
evalcond[2]=(((x8401*x8403))+(((-1.0)*sj0))+(((-1.0)*x8409*x8412))+(((-1.0)*r02*x8410)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8408*x8410))+((cj1*sj2))+((x8402*x8406))+(((-1.0)*r22*x8412)));
evalcond[4]=((((-1.0)*cj0*x8411))+(((-1.0)*r02*x8412))+((cj0*x8405))+((x8402*x8409))+(((-1.0)*x8403*x8410)));
evalcond[5]=((((-1.0)*r12*x8412))+((sj0*x8405))+(((-1.0)*x8407*x8410))+(((-1.0)*sj0*x8411))+((x8402*x8404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8413=((1.0)*gconst137);
CheckValue<IkReal> x8414=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8413))+(((-1.0)*gconst136*r10)))),-1);
if(!x8414.valid){
continue;
}
CheckValue<IkReal> x8415 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8413))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8414.value)))+(x8415.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8416=IKsin(j4);
IkReal x8417=IKcos(j4);
IkReal x8418=(gconst136*r01);
IkReal x8419=(gconst137*r10);
IkReal x8420=(sj1*sj2);
IkReal x8421=(gconst137*r20);
IkReal x8422=(gconst136*r11);
IkReal x8423=(gconst136*r21);
IkReal x8424=(gconst137*r00);
IkReal x8425=((1.0)*x8417);
IkReal x8426=((1.0)*cj1*cj2);
IkReal x8427=((1.0)*x8416);
evalcond[0]=(((x8416*x8423))+(((-1.0)*x8421*x8427))+(((-1.0)*r22*x8425)));
evalcond[1]=(cj0+((x8416*x8422))+(((-1.0)*x8419*x8427))+(((-1.0)*r12*x8425)));
evalcond[2]=((((-1.0)*x8424*x8427))+(((-1.0)*sj0))+(((-1.0)*r02*x8425))+((x8416*x8418)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8417*x8421))+(((-1.0)*r22*x8427))+(((-1.0)*x8423*x8425)));
evalcond[4]=(((cj0*x8420))+((x8417*x8424))+(((-1.0)*cj0*x8426))+(((-1.0)*r02*x8427))+(((-1.0)*x8418*x8425)));
evalcond[5]=((((-1.0)*x8422*x8425))+((sj0*x8420))+(((-1.0)*sj0*x8426))+((x8417*x8419))+(((-1.0)*r12*x8427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8428=((1.0)*gconst137);
CheckValue<IkReal> x8429=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x8428)))),-1);
if(!x8429.valid){
continue;
}
CheckValue<IkReal> x8430 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8428))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8429.value)))+(x8430.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8431=IKsin(j4);
IkReal x8432=IKcos(j4);
IkReal x8433=(gconst136*r01);
IkReal x8434=(gconst137*r10);
IkReal x8435=(sj1*sj2);
IkReal x8436=(gconst137*r20);
IkReal x8437=(gconst136*r11);
IkReal x8438=(gconst136*r21);
IkReal x8439=(gconst137*r00);
IkReal x8440=((1.0)*x8432);
IkReal x8441=((1.0)*cj1*cj2);
IkReal x8442=((1.0)*x8431);
evalcond[0]=((((-1.0)*r22*x8440))+(((-1.0)*x8436*x8442))+((x8431*x8438)));
evalcond[1]=(cj0+(((-1.0)*x8434*x8442))+(((-1.0)*r12*x8440))+((x8431*x8437)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8440))+(((-1.0)*x8439*x8442))+((x8431*x8433)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8438*x8440))+((cj1*sj2))+((x8432*x8436))+(((-1.0)*r22*x8442)));
evalcond[4]=((((-1.0)*x8433*x8440))+((x8432*x8439))+(((-1.0)*cj0*x8441))+(((-1.0)*r02*x8442))+((cj0*x8435)));
evalcond[5]=((((-1.0)*r12*x8442))+((sj0*x8435))+(((-1.0)*x8437*x8440))+(((-1.0)*sj0*x8441))+((x8432*x8434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8443=((-1.0)*r10);
IkReal x8445 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8445)==0){
continue;
}
IkReal x8444=pow(x8445,-0.5);
CheckValue<IkReal> x8446 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8443),IKFAST_ATAN2_MAGTHRESH);
if(!x8446.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8446.value));
IkReal gconst139=(r11*x8444);
IkReal gconst140=(x8443*x8444);
CheckValue<IkReal> x8447 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8447.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8447.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8448=((-1.0)*r10);
IkReal x8449=x8444;
CheckValue<IkReal> x8451 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8448),IKFAST_ATAN2_MAGTHRESH);
if(!x8451.valid){
continue;
}
IkReal x8450=((-1.0)*(x8451.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8450;
IkReal gconst138=x8450;
IkReal gconst139=(r11*x8449);
IkReal gconst140=(x8448*x8449);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8452=((1.0)*sj0);
IkReal x8453=((1.0)*gconst139);
CheckValue<IkReal> x8454 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8452))+(((-1.0)*cj0*r02)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x8453))+(((-1.0)*gconst139*r11*x8452))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8454.valid){
continue;
}
CheckValue<IkReal> x8455=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8453)))),-1);
if(!x8455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8454.value)+(((1.5707963267949)*(x8455.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8456=IKsin(j4);
IkReal x8457=IKcos(j4);
IkReal x8458=(gconst140*r00);
IkReal x8459=(sj1*sj2);
IkReal x8460=(gconst139*r11);
IkReal x8461=(gconst139*r01);
IkReal x8462=(gconst139*r21);
IkReal x8463=((1.0)*x8457);
IkReal x8464=((1.0)*x8456);
IkReal x8465=((1.0)*cj1*cj2);
IkReal x8466=(gconst140*x8457);
evalcond[0]=(((x8456*x8462))+(((-1.0)*gconst140*r20*x8464))+(((-1.0)*r22*x8463)));
evalcond[1]=(cj0+((x8456*x8460))+(((-1.0)*gconst140*r10*x8464))+(((-1.0)*r12*x8463)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8463))+((x8456*x8461))+(((-1.0)*x8458*x8464)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8464))+((r20*x8466))+(((-1.0)*x8462*x8463)));
evalcond[4]=(((x8457*x8458))+(((-1.0)*r02*x8464))+((cj0*x8459))+(((-1.0)*cj0*x8465))+(((-1.0)*x8461*x8463)));
evalcond[5]=((((-1.0)*sj0*x8465))+((sj0*x8459))+((r10*x8466))+(((-1.0)*r12*x8464))+(((-1.0)*x8460*x8463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8467=((1.0)*gconst140);
CheckValue<IkReal> x8468=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x8467)))),-1);
if(!x8468.valid){
continue;
}
CheckValue<IkReal> x8469 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8467))+((cj0*gconst139*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8468.value)))+(x8469.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8470=IKsin(j4);
IkReal x8471=IKcos(j4);
IkReal x8472=(gconst140*r00);
IkReal x8473=(sj1*sj2);
IkReal x8474=(gconst139*r11);
IkReal x8475=(gconst139*r01);
IkReal x8476=(gconst139*r21);
IkReal x8477=((1.0)*x8471);
IkReal x8478=((1.0)*x8470);
IkReal x8479=((1.0)*cj1*cj2);
IkReal x8480=(gconst140*x8471);
evalcond[0]=(((x8470*x8476))+(((-1.0)*gconst140*r20*x8478))+(((-1.0)*r22*x8477)));
evalcond[1]=(cj0+((x8470*x8474))+(((-1.0)*gconst140*r10*x8478))+(((-1.0)*r12*x8477)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8477))+((x8470*x8475))+(((-1.0)*x8472*x8478)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8476*x8477))+(((-1.0)*r22*x8478))+((r20*x8480)));
evalcond[4]=((((-1.0)*r02*x8478))+((x8471*x8472))+((cj0*x8473))+(((-1.0)*cj0*x8479))+(((-1.0)*x8475*x8477)));
evalcond[5]=(((r10*x8480))+(((-1.0)*sj0*x8479))+(((-1.0)*x8474*x8477))+(((-1.0)*r12*x8478))+((sj0*x8473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8481=((-1.0)*r11);
IkReal x8483 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8483)==0){
continue;
}
IkReal x8482=pow(x8483,-0.5);
CheckValue<IkReal> x8484 = IKatan2WithCheck(IkReal(x8481),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8484.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8484.value))));
IkReal gconst142=(x8481*x8482);
IkReal gconst143=((1.0)*r10*x8482);
CheckValue<IkReal> x8485 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8485.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8485.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8486=((-1.0)*r11);
CheckValue<IkReal> x8489 = IKatan2WithCheck(IkReal(x8486),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8489.valid){
continue;
}
IkReal x8487=((1.0)*(x8489.value));
IkReal x8488=x8482;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8487)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8487)));
IkReal gconst142=(x8486*x8488);
IkReal gconst143=((1.0)*r10*x8488);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8490=((-1.0)*r11);
CheckValue<IkReal> x8493 = IKatan2WithCheck(IkReal(x8490),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8493.valid){
continue;
}
IkReal x8491=((1.0)*(x8493.value));
IkReal x8492=x8482;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8491)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8491)));
IkReal gconst142=(x8490*x8492);
IkReal gconst143=((1.0)*r10*x8492);
IkReal x8494=r12*r12;
IkReal x8495=((1.0)*sj0);
IkReal x8496=(cj0*r02);
IkReal x8497=x8482;
j4eval[0]=((IKabs(((((-1.0)*x8496))+(((-1.0)*r12*x8495)))))+(IKabs((((sj0*x8494*x8497))+((r12*x8496*x8497))+(((-1.0)*x8495*x8497))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8498=((-1.0)*r11);
CheckValue<IkReal> x8501 = IKatan2WithCheck(IkReal(x8498),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8501.valid){
continue;
}
IkReal x8499=((1.0)*(x8501.value));
IkReal x8500=x8482;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8499)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8499)));
IkReal gconst142=(x8498*x8500);
IkReal gconst143=((1.0)*r10*x8500);
IkReal x8502=r12*r12;
IkReal x8503=(cj1*r22*sj2);
IkReal x8504=(cj2*r22*sj1);
CheckValue<IkReal> x8508=IKPowWithIntegerCheck(((-1.0)+x8502),-1);
if(!x8508.valid){
continue;
}
IkReal x8505=x8508.value;
if((((1.0)+(((-1.0)*x8502)))) < -0.00001)
continue;
IkReal x8506=IKsqrt(((1.0)+(((-1.0)*x8502))));
IkReal x8507=((1.0)*r12*x8505*x8506);
j4eval[0]=((IKabs((x8503+x8504)))+(IKabs(((((-1.0)*x8503*x8507))+(((-1.0)*x8504*x8507))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8509=(gconst142*r21);
IkReal x8510=(cj1*sj2);
IkReal x8511=(cj2*sj1);
IkReal x8512=(gconst143*r20);
CheckValue<IkReal> x8513=IKPowWithIntegerCheck(IKsign(((x8509*x8509)+(r22*r22)+(x8512*x8512)+(((-2.0)*x8509*x8512)))),-1);
if(!x8513.valid){
continue;
}
CheckValue<IkReal> x8514 = IKatan2WithCheck(IkReal((((r22*x8510))+((r22*x8511)))),IkReal(((((-1.0)*x8510*x8512))+((x8509*x8511))+((x8509*x8510))+(((-1.0)*x8511*x8512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8513.value)))+(x8514.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8515=IKsin(j4);
IkReal x8516=IKcos(j4);
IkReal x8517=(sj1*sj2);
IkReal x8518=(gconst143*r20);
IkReal x8519=((1.0)*x8516);
IkReal x8520=((1.0)*cj1*cj2);
IkReal x8521=((1.0)*x8515);
IkReal x8522=(gconst142*x8515);
IkReal x8523=(gconst143*x8516);
evalcond[0]=(((r21*x8522))+(((-1.0)*x8518*x8521))+(((-1.0)*r22*x8519)));
evalcond[1]=((((-1.0)*gconst143*r10*x8521))+cj0+((r11*x8522))+(((-1.0)*r12*x8519)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8519))+((r01*x8522))+(((-1.0)*gconst143*r00*x8521)));
evalcond[3]=(((cj2*sj1))+((x8516*x8518))+(((-1.0)*gconst142*r21*x8519))+((cj1*sj2))+(((-1.0)*r22*x8521)));
evalcond[4]=(((cj0*x8517))+(((-1.0)*r02*x8521))+(((-1.0)*cj0*x8520))+((r00*x8523))+(((-1.0)*gconst142*r01*x8519)));
evalcond[5]=(((sj0*x8517))+(((-1.0)*sj0*x8520))+(((-1.0)*r12*x8521))+(((-1.0)*gconst142*r11*x8519))+((r10*x8523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8524=((1.0)*sj0);
IkReal x8525=((1.0)*gconst142);
CheckValue<IkReal> x8526 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8524)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x8525))+(((-1.0)*gconst142*r11*x8524))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8526.valid){
continue;
}
CheckValue<IkReal> x8527=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8525))+(((-1.0)*gconst143*r21)))),-1);
if(!x8527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8526.value)+(((1.5707963267949)*(x8527.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8528=IKsin(j4);
IkReal x8529=IKcos(j4);
IkReal x8530=(sj1*sj2);
IkReal x8531=(gconst143*r20);
IkReal x8532=((1.0)*x8529);
IkReal x8533=((1.0)*cj1*cj2);
IkReal x8534=((1.0)*x8528);
IkReal x8535=(gconst142*x8528);
IkReal x8536=(gconst143*x8529);
evalcond[0]=((((-1.0)*x8531*x8534))+(((-1.0)*r22*x8532))+((r21*x8535)));
evalcond[1]=(cj0+(((-1.0)*r12*x8532))+(((-1.0)*gconst143*r10*x8534))+((r11*x8535)));
evalcond[2]=((((-1.0)*r02*x8532))+(((-1.0)*sj0))+((r01*x8535))+(((-1.0)*gconst143*r00*x8534)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8534))+((cj1*sj2))+(((-1.0)*gconst142*r21*x8532))+((x8529*x8531)));
evalcond[4]=((((-1.0)*r02*x8534))+(((-1.0)*cj0*x8533))+((r00*x8536))+(((-1.0)*gconst142*r01*x8532))+((cj0*x8530)));
evalcond[5]=((((-1.0)*sj0*x8533))+(((-1.0)*gconst142*r11*x8532))+((r10*x8536))+(((-1.0)*r12*x8534))+((sj0*x8530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8537=((1.0)*gconst143);
CheckValue<IkReal> x8538=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8537))+(((-1.0)*gconst142*r00)))),-1);
if(!x8538.valid){
continue;
}
CheckValue<IkReal> x8539 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8537))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8538.value)))+(x8539.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8540=IKsin(j4);
IkReal x8541=IKcos(j4);
IkReal x8542=(sj1*sj2);
IkReal x8543=(gconst143*r20);
IkReal x8544=((1.0)*x8541);
IkReal x8545=((1.0)*cj1*cj2);
IkReal x8546=((1.0)*x8540);
IkReal x8547=(gconst142*x8540);
IkReal x8548=(gconst143*x8541);
evalcond[0]=((((-1.0)*x8543*x8546))+(((-1.0)*r22*x8544))+((r21*x8547)));
evalcond[1]=(cj0+(((-1.0)*r12*x8544))+((r11*x8547))+(((-1.0)*gconst143*r10*x8546)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8544))+(((-1.0)*gconst143*r00*x8546))+((r01*x8547)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8546))+(((-1.0)*gconst142*r21*x8544))+((x8541*x8543)));
evalcond[4]=((((-1.0)*r02*x8546))+((r00*x8548))+(((-1.0)*cj0*x8545))+(((-1.0)*gconst142*r01*x8544))+((cj0*x8542)));
evalcond[5]=((((-1.0)*sj0*x8545))+((r10*x8548))+(((-1.0)*gconst142*r11*x8544))+(((-1.0)*r12*x8546))+((sj0*x8542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8549=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8549;
j4eval[1]=IKsign(x8549);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8550=((1.0)*cj5);
IkReal x8551=((((-1.0)*r01*x8550))+(((-1.0)*r00*sj5)));
j4eval[0]=x8551;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8550))))));
j4eval[2]=IKsign(x8551);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8552=cj5*cj5;
IkReal x8553=r11*r11;
IkReal x8554=(r11*sj5);
IkReal x8555=(cj5*r10);
IkReal x8556=((r12*r12)+x8553+(((-1.0)*x8552*x8553))+(((-2.0)*x8554*x8555))+((x8552*(r10*r10))));
j4eval[0]=x8556;
j4eval[1]=IKsign(x8556);
j4eval[2]=((IKabs(r12))+(IKabs((x8555+(((-1.0)*x8554))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8557=cj5*cj5;
IkReal x8558=r11*r11;
IkReal x8559=(cj5*r10);
IkReal x8560=(r11*sj5);
CheckValue<IkReal> x8561 = IKatan2WithCheck(IkReal((x8559+(((-1.0)*x8560)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8561.valid){
continue;
}
CheckValue<IkReal> x8562=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8557*x8558))+(((-2.0)*x8559*x8560))+(r12*r12)+x8558+((x8557*(r10*r10))))),-1);
if(!x8562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8561.value)+(((1.5707963267949)*(x8562.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8563=IKsin(j4);
IkReal x8564=IKcos(j4);
IkReal x8565=(cj5*r10);
IkReal x8566=(r01*sj5);
IkReal x8567=(cj5*r00);
IkReal x8568=(cj5*r20);
IkReal x8569=((1.0)*x8564);
IkReal x8570=((1.0)*x8563);
IkReal x8571=(sj5*x8563);
evalcond[0]=(((r21*x8571))+(((-1.0)*r22*x8569))+(((-1.0)*x8568*x8570)));
evalcond[1]=(((x8563*x8566))+(((-1.0)*x8567*x8570))+(((-1.0)*r02*x8569)));
evalcond[2]=(((x8564*x8565))+(((-1.0)*r12*x8570))+(((-1.0)*r11*sj5*x8569)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8569))+((r11*x8571))+(((-1.0)*x8565*x8570)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8569))+((x8564*x8568))+(((-1.0)*r22*x8570)));
evalcond[5]=((((-1.0)*x8566*x8569))+(((-1.0)*r02*x8570))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8564*x8567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8572=((1.0)*cj5);
CheckValue<IkReal> x8573=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8572)))),-1);
if(!x8573.valid){
continue;
}
CheckValue<IkReal> x8574 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8572))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8573.value)))+(x8574.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8575=IKsin(j4);
IkReal x8576=IKcos(j4);
IkReal x8577=(cj5*r10);
IkReal x8578=(r01*sj5);
IkReal x8579=(cj5*r00);
IkReal x8580=(cj5*r20);
IkReal x8581=((1.0)*x8576);
IkReal x8582=((1.0)*x8575);
IkReal x8583=(sj5*x8575);
evalcond[0]=((((-1.0)*r22*x8581))+(((-1.0)*x8580*x8582))+((r21*x8583)));
evalcond[1]=(((x8575*x8578))+(((-1.0)*r02*x8581))+(((-1.0)*x8579*x8582)));
evalcond[2]=(((x8576*x8577))+(((-1.0)*r12*x8582))+(((-1.0)*r11*sj5*x8581)));
evalcond[3]=((1.0)+(((-1.0)*x8577*x8582))+((r11*x8583))+(((-1.0)*r12*x8581)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8582))+(((-1.0)*r21*sj5*x8581))+((cj1*sj2))+((x8576*x8580)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8582))+((x8576*x8579))+(((-1.0)*x8578*x8581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8584=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8584.valid){
continue;
}
CheckValue<IkReal> x8585 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8584.value)))+(x8585.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8586=IKsin(j4);
IkReal x8587=IKcos(j4);
IkReal x8588=(cj5*r10);
IkReal x8589=(r01*sj5);
IkReal x8590=(cj5*r00);
IkReal x8591=(cj5*r20);
IkReal x8592=((1.0)*x8587);
IkReal x8593=((1.0)*x8586);
IkReal x8594=(sj5*x8586);
evalcond[0]=((((-1.0)*r22*x8592))+(((-1.0)*x8591*x8593))+((r21*x8594)));
evalcond[1]=(((x8586*x8589))+(((-1.0)*r02*x8592))+(((-1.0)*x8590*x8593)));
evalcond[2]=((((-1.0)*r11*sj5*x8592))+(((-1.0)*r12*x8593))+((x8587*x8588)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8592))+(((-1.0)*x8588*x8593))+((r11*x8594)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8593))+((x8587*x8591))+((cj1*sj2))+(((-1.0)*r21*sj5*x8592)));
evalcond[5]=((((-1.0)*x8589*x8592))+(((-1.0)*r02*x8593))+((x8587*x8590))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8595=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8595;
j4eval[1]=IKsign(x8595);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8596=((1.0)*cj5);
IkReal x8597=((((-1.0)*r21*x8596))+(((-1.0)*r20*sj5)));
j4eval[0]=x8597;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8596))))));
j4eval[2]=IKsign(x8597);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8598=cj5*cj5;
IkReal x8599=r11*r11;
IkReal x8600=(cj5*r10);
IkReal x8601=(r11*sj5);
IkReal x8602=((((-1.0)*x8599))+((x8598*x8599))+(((-1.0)*(r12*r12)))+(((-1.0)*x8598*(r10*r10)))+(((2.0)*x8600*x8601)));
j4eval[0]=x8602;
j4eval[1]=((IKabs(r12))+(IKabs((x8600+(((-1.0)*x8601))))));
j4eval[2]=IKsign(x8602);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8603=cj5*cj5;
IkReal x8604=r11*r11;
IkReal x8605=(cj5*r10);
IkReal x8606=(r11*sj5);
CheckValue<IkReal> x8607 = IKatan2WithCheck(IkReal((x8605+(((-1.0)*x8606)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8607.valid){
continue;
}
CheckValue<IkReal> x8608=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8603*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8604))+(((2.0)*x8605*x8606))+((x8603*x8604)))),-1);
if(!x8608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8607.value)+(((1.5707963267949)*(x8608.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8609=IKsin(j4);
IkReal x8610=IKcos(j4);
IkReal x8611=(cj5*r10);
IkReal x8612=(r01*sj5);
IkReal x8613=(cj5*r00);
IkReal x8614=(cj5*r20);
IkReal x8615=((1.0)*x8610);
IkReal x8616=((1.0)*x8609);
IkReal x8617=(sj5*x8609);
evalcond[0]=((((-1.0)*x8614*x8616))+(((-1.0)*r22*x8615))+((r21*x8617)));
evalcond[1]=((((-1.0)*r02*x8615))+((x8609*x8612))+(((-1.0)*x8613*x8616)));
evalcond[2]=((((-1.0)*r12*x8616))+(((-1.0)*r11*sj5*x8615))+((x8610*x8611)));
evalcond[3]=((-1.0)+((r11*x8617))+(((-1.0)*r12*x8615))+(((-1.0)*x8611*x8616)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8616))+(((-1.0)*r21*sj5*x8615))+((x8610*x8614)));
evalcond[5]=((((-1.0)*x8612*x8615))+(((-1.0)*r02*x8616))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x8610*x8613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8618=((1.0)*cj5);
CheckValue<IkReal> x8619 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x8618))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8619.valid){
continue;
}
CheckValue<IkReal> x8620=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8618))+(((-1.0)*r20*sj5)))),-1);
if(!x8620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8619.value)+(((1.5707963267949)*(x8620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8621=IKsin(j4);
IkReal x8622=IKcos(j4);
IkReal x8623=(cj5*r10);
IkReal x8624=(r01*sj5);
IkReal x8625=(cj5*r00);
IkReal x8626=(cj5*r20);
IkReal x8627=((1.0)*x8622);
IkReal x8628=((1.0)*x8621);
IkReal x8629=(sj5*x8621);
evalcond[0]=(((r21*x8629))+(((-1.0)*x8626*x8628))+(((-1.0)*r22*x8627)));
evalcond[1]=((((-1.0)*x8625*x8628))+((x8621*x8624))+(((-1.0)*r02*x8627)));
evalcond[2]=((((-1.0)*r12*x8628))+((x8622*x8623))+(((-1.0)*r11*sj5*x8627)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8627))+(((-1.0)*x8623*x8628))+((r11*x8629)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8627))+(((-1.0)*r22*x8628))+((x8622*x8626)));
evalcond[5]=((((-1.0)*x8624*x8627))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x8622*x8625))+(((-1.0)*r02*x8628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8630 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8630.valid){
continue;
}
CheckValue<IkReal> x8631=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8630.value)+(((1.5707963267949)*(x8631.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8632=IKsin(j4);
IkReal x8633=IKcos(j4);
IkReal x8634=(cj5*r10);
IkReal x8635=(r01*sj5);
IkReal x8636=(cj5*r00);
IkReal x8637=(cj5*r20);
IkReal x8638=((1.0)*x8633);
IkReal x8639=((1.0)*x8632);
IkReal x8640=(sj5*x8632);
evalcond[0]=(((r21*x8640))+(((-1.0)*r22*x8638))+(((-1.0)*x8637*x8639)));
evalcond[1]=(((x8632*x8635))+(((-1.0)*x8636*x8639))+(((-1.0)*r02*x8638)));
evalcond[2]=((((-1.0)*r12*x8639))+((x8633*x8634))+(((-1.0)*r11*sj5*x8638)));
evalcond[3]=((-1.0)+(((-1.0)*x8634*x8639))+((r11*x8640))+(((-1.0)*r12*x8638)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8638))+(((-1.0)*r22*x8639))+((x8633*x8637)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x8633*x8636))+((cj1*cj2))+(((-1.0)*x8635*x8638))+(((-1.0)*r02*x8639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8641=((-1.0)*r00);
IkReal x8643 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8643)==0){
continue;
}
IkReal x8642=pow(x8643,-0.5);
CheckValue<IkReal> x8644 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8641),IKFAST_ATAN2_MAGTHRESH);
if(!x8644.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8644.value));
IkReal gconst145=(r01*x8642);
IkReal gconst146=(x8641*x8642);
CheckValue<IkReal> x8645 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8645.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8645.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8646=((-1.0)*r00);
IkReal x8647=x8642;
CheckValue<IkReal> x8649 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8646),IKFAST_ATAN2_MAGTHRESH);
if(!x8649.valid){
continue;
}
IkReal x8648=((-1.0)*(x8649.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8648;
IkReal gconst144=x8648;
IkReal gconst145=(r01*x8647);
IkReal gconst146=(x8646*x8647);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8650=((1.0)*sj0);
IkReal x8651=((1.0)*gconst145);
CheckValue<IkReal> x8652=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8651))+(((-1.0)*gconst146*r21)))),-1);
if(!x8652.valid){
continue;
}
CheckValue<IkReal> x8653 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8650))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*gconst145*r11*x8650))+((gconst146*r10*sj0))+(((-1.0)*cj0*r01*x8651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8652.value)))+(x8653.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8654=IKsin(j4);
IkReal x8655=IKcos(j4);
IkReal x8656=(gconst146*r10);
IkReal x8657=(sj1*sj2);
IkReal x8658=(gconst146*r20);
IkReal x8659=(gconst146*r00);
IkReal x8660=((1.0)*x8655);
IkReal x8661=((1.0)*x8654);
IkReal x8662=(gconst145*x8654);
IkReal x8663=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x8658*x8661))+(((-1.0)*r22*x8660))+((r21*x8662)));
evalcond[1]=((((-1.0)*x8656*x8661))+cj0+(((-1.0)*r12*x8660))+((r11*x8662)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8660))+(((-1.0)*x8659*x8661))+((r01*x8662)));
evalcond[3]=(((cj2*sj1))+((x8655*x8658))+((cj1*sj2))+(((-1.0)*r22*x8661))+(((-1.0)*gconst145*r21*x8660)));
evalcond[4]=((((-1.0)*cj0*x8663))+((x8655*x8659))+(((-1.0)*r02*x8661))+((cj0*x8657))+(((-1.0)*gconst145*r01*x8660)));
evalcond[5]=((((-1.0)*sj0*x8663))+(((-1.0)*gconst145*r11*x8660))+(((-1.0)*r12*x8661))+((x8655*x8656))+((sj0*x8657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8664=((1.0)*gconst146);
CheckValue<IkReal> x8665 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8664))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8665.valid){
continue;
}
CheckValue<IkReal> x8666=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8664))+(((-1.0)*gconst145*r10)))),-1);
if(!x8666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8665.value)+(((1.5707963267949)*(x8666.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8667=IKsin(j4);
IkReal x8668=IKcos(j4);
IkReal x8669=(gconst146*r10);
IkReal x8670=(sj1*sj2);
IkReal x8671=(gconst146*r20);
IkReal x8672=(gconst146*r00);
IkReal x8673=((1.0)*x8668);
IkReal x8674=((1.0)*x8667);
IkReal x8675=(gconst145*x8667);
IkReal x8676=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8673))+((r21*x8675))+(((-1.0)*x8671*x8674)));
evalcond[1]=(cj0+(((-1.0)*r12*x8673))+((r11*x8675))+(((-1.0)*x8669*x8674)));
evalcond[2]=((((-1.0)*x8672*x8674))+(((-1.0)*sj0))+(((-1.0)*r02*x8673))+((r01*x8675)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8674))+((cj1*sj2))+((x8668*x8671))+(((-1.0)*gconst145*r21*x8673)));
evalcond[4]=(((cj0*x8670))+(((-1.0)*cj0*x8676))+(((-1.0)*r02*x8674))+((x8668*x8672))+(((-1.0)*gconst145*r01*x8673)));
evalcond[5]=((((-1.0)*gconst145*r11*x8673))+(((-1.0)*r12*x8674))+((x8668*x8669))+(((-1.0)*sj0*x8676))+((sj0*x8670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8677=((-1.0)*r01);
IkReal x8679 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8679)==0){
continue;
}
IkReal x8678=pow(x8679,-0.5);
CheckValue<IkReal> x8680 = IKatan2WithCheck(IkReal(x8677),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8680.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8680.value))));
IkReal gconst148=(x8677*x8678);
IkReal gconst149=((1.0)*r00*x8678);
CheckValue<IkReal> x8681 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8681.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8681.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8682=((-1.0)*r01);
CheckValue<IkReal> x8685 = IKatan2WithCheck(IkReal(x8682),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8685.valid){
continue;
}
IkReal x8683=((1.0)*(x8685.value));
IkReal x8684=x8678;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8683)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8683)));
IkReal gconst148=(x8682*x8684);
IkReal gconst149=((1.0)*r00*x8684);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8686=((-1.0)*r01);
CheckValue<IkReal> x8689 = IKatan2WithCheck(IkReal(x8686),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8689.valid){
continue;
}
IkReal x8687=((1.0)*(x8689.value));
IkReal x8688=x8678;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8687)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8687)));
IkReal gconst148=(x8686*x8688);
IkReal gconst149=((1.0)*r00*x8688);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8690=((-1.0)*r01);
CheckValue<IkReal> x8693 = IKatan2WithCheck(IkReal(x8690),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8693.valid){
continue;
}
IkReal x8691=((1.0)*(x8693.value));
IkReal x8692=x8678;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8691)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8691)));
IkReal gconst148=(x8690*x8692);
IkReal gconst149=((1.0)*r00*x8692);
IkReal x8694=r02*r02;
IkReal x8695=(r12*sj0);
IkReal x8696=((1.0)*cj0);
IkReal x8697=x8678;
j4eval[0]=((IKabs(((((-1.0)*x8696*x8697))+((cj0*x8694*x8697))+((r02*x8695*x8697)))))+(IKabs(((((-1.0)*x8695))+(((-1.0)*r02*x8696))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8698=((1.0)*sj0);
IkReal x8699=((1.0)*gconst148);
CheckValue<IkReal> x8700=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8699)))),-1);
if(!x8700.valid){
continue;
}
CheckValue<IkReal> x8701 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8698)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8698))+(((-1.0)*cj0*r01*x8699)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8700.value)))+(x8701.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8702=IKsin(j4);
IkReal x8703=IKcos(j4);
IkReal x8704=(gconst148*r11);
IkReal x8705=(sj1*sj2);
IkReal x8706=((1.0)*x8703);
IkReal x8707=(gconst149*x8703);
IkReal x8708=(gconst148*x8702);
IkReal x8709=((1.0)*cj1*cj2);
IkReal x8710=((1.0)*x8702);
evalcond[0]=(((r21*x8708))+(((-1.0)*gconst149*r20*x8710))+(((-1.0)*r22*x8706)));
evalcond[1]=(cj0+((x8702*x8704))+(((-1.0)*gconst149*r10*x8710))+(((-1.0)*r12*x8706)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8710))+(((-1.0)*r02*x8706))+((r01*x8708)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8706))+((cj1*sj2))+(((-1.0)*r22*x8710))+((r20*x8707)));
evalcond[4]=((((-1.0)*cj0*x8709))+(((-1.0)*r02*x8710))+(((-1.0)*gconst148*r01*x8706))+((cj0*x8705))+((r00*x8707)));
evalcond[5]=(((r10*x8707))+(((-1.0)*x8704*x8706))+(((-1.0)*r12*x8710))+(((-1.0)*sj0*x8709))+((sj0*x8705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8711=((1.0)*gconst149);
CheckValue<IkReal> x8712 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst148*r21*sj0))+(((-1.0)*r20*sj0*x8711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8712.valid){
continue;
}
CheckValue<IkReal> x8713=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8711))+(((-1.0)*gconst148*r10)))),-1);
if(!x8713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8712.value)+(((1.5707963267949)*(x8713.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8714=IKsin(j4);
IkReal x8715=IKcos(j4);
IkReal x8716=(gconst148*r11);
IkReal x8717=(sj1*sj2);
IkReal x8718=((1.0)*x8715);
IkReal x8719=(gconst149*x8715);
IkReal x8720=(gconst148*x8714);
IkReal x8721=((1.0)*cj1*cj2);
IkReal x8722=((1.0)*x8714);
evalcond[0]=(((r21*x8720))+(((-1.0)*r22*x8718))+(((-1.0)*gconst149*r20*x8722)));
evalcond[1]=((((-1.0)*gconst149*r10*x8722))+((x8714*x8716))+cj0+(((-1.0)*r12*x8718)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8718))+(((-1.0)*gconst149*r00*x8722))+((r01*x8720)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8718))+((cj1*sj2))+((r20*x8719))+(((-1.0)*r22*x8722)));
evalcond[4]=((((-1.0)*cj0*x8721))+((cj0*x8717))+(((-1.0)*gconst148*r01*x8718))+((r00*x8719))+(((-1.0)*r02*x8722)));
evalcond[5]=((((-1.0)*x8716*x8718))+((sj0*x8717))+(((-1.0)*sj0*x8721))+((r10*x8719))+(((-1.0)*r12*x8722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8723=((1.0)*gconst149);
CheckValue<IkReal> x8724=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8723)))),-1);
if(!x8724.valid){
continue;
}
CheckValue<IkReal> x8725 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8723)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8724.value)))+(x8725.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8726=IKsin(j4);
IkReal x8727=IKcos(j4);
IkReal x8728=(gconst148*r11);
IkReal x8729=(sj1*sj2);
IkReal x8730=((1.0)*x8727);
IkReal x8731=(gconst149*x8727);
IkReal x8732=(gconst148*x8726);
IkReal x8733=((1.0)*cj1*cj2);
IkReal x8734=((1.0)*x8726);
evalcond[0]=(((r21*x8732))+(((-1.0)*gconst149*r20*x8734))+(((-1.0)*r22*x8730)));
evalcond[1]=((((-1.0)*gconst149*r10*x8734))+cj0+((x8726*x8728))+(((-1.0)*r12*x8730)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8734))+(((-1.0)*r02*x8730))+((r01*x8732)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8730))+((cj1*sj2))+((r20*x8731))+(((-1.0)*r22*x8734)));
evalcond[4]=((((-1.0)*cj0*x8733))+(((-1.0)*gconst148*r01*x8730))+((cj0*x8729))+(((-1.0)*r02*x8734))+((r00*x8731)));
evalcond[5]=(((r10*x8731))+(((-1.0)*x8728*x8730))+(((-1.0)*sj0*x8733))+(((-1.0)*r12*x8734))+((sj0*x8729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8735=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8735;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8735);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8736=((1.0)*cj5);
IkReal x8737=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8736)));
j4eval[0]=x8737;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8736))))));
j4eval[2]=IKsign(x8737);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8738=cj5*cj5;
IkReal x8739=r01*r01;
IkReal x8740=(r01*sj5);
IkReal x8741=(cj5*r00);
IkReal x8742=((((-1.0)*x8738*(r00*r00)))+(((2.0)*x8740*x8741))+(((-1.0)*(r02*r02)))+(((-1.0)*x8739))+((x8738*x8739)));
j4eval[0]=x8742;
j4eval[1]=IKsign(x8742);
j4eval[2]=((IKabs(r02))+(IKabs((x8741+(((-1.0)*x8740))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8743=cj5*cj5;
IkReal x8744=r01*r01;
IkReal x8745=(r01*sj5);
IkReal x8746=(cj5*r00);
CheckValue<IkReal> x8747 = IKatan2WithCheck(IkReal((x8746+(((-1.0)*x8745)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8747.valid){
continue;
}
CheckValue<IkReal> x8748=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8743*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x8745*x8746))+((x8743*x8744))+(((-1.0)*x8744)))),-1);
if(!x8748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8747.value)+(((1.5707963267949)*(x8748.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8749=IKsin(j4);
IkReal x8750=IKcos(j4);
IkReal x8751=(cj5*r10);
IkReal x8752=(r01*sj5);
IkReal x8753=(cj5*r00);
IkReal x8754=(cj5*r20);
IkReal x8755=((1.0)*x8750);
IkReal x8756=((1.0)*x8749);
IkReal x8757=(sj5*x8749);
evalcond[0]=((((-1.0)*x8754*x8756))+(((-1.0)*r22*x8755))+((r21*x8757)));
evalcond[1]=((((-1.0)*x8751*x8756))+((r11*x8757))+(((-1.0)*r12*x8755)));
evalcond[2]=(((x8750*x8753))+(((-1.0)*r02*x8756))+(((-1.0)*x8752*x8755)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8755))+(((-1.0)*x8753*x8756))+((x8749*x8752)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8756))+((x8750*x8754))+((cj1*sj2))+(((-1.0)*r21*sj5*x8755)));
evalcond[5]=(((x8750*x8751))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8755))+(((-1.0)*r12*x8756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8758=((1.0)*cj5);
CheckValue<IkReal> x8759=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8758)))),-1);
if(!x8759.valid){
continue;
}
CheckValue<IkReal> x8760 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8758)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8759.value)))+(x8760.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8761=IKsin(j4);
IkReal x8762=IKcos(j4);
IkReal x8763=(cj5*r10);
IkReal x8764=(r01*sj5);
IkReal x8765=(cj5*r00);
IkReal x8766=(cj5*r20);
IkReal x8767=((1.0)*x8762);
IkReal x8768=((1.0)*x8761);
IkReal x8769=(sj5*x8761);
evalcond[0]=((((-1.0)*x8766*x8768))+(((-1.0)*r22*x8767))+((r21*x8769)));
evalcond[1]=((((-1.0)*r12*x8767))+((r11*x8769))+(((-1.0)*x8763*x8768)));
evalcond[2]=((((-1.0)*r02*x8768))+(((-1.0)*x8764*x8767))+((x8762*x8765)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8767))+((x8761*x8764))+(((-1.0)*x8765*x8768)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8768))+(((-1.0)*r21*sj5*x8767))+((x8762*x8766)));
evalcond[5]=((((-1.0)*r11*sj5*x8767))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8768))+((x8762*x8763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8770=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8770.valid){
continue;
}
CheckValue<IkReal> x8771 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8770.value)))+(x8771.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8772=IKsin(j4);
IkReal x8773=IKcos(j4);
IkReal x8774=(cj5*r10);
IkReal x8775=(r01*sj5);
IkReal x8776=(cj5*r00);
IkReal x8777=(cj5*r20);
IkReal x8778=((1.0)*x8773);
IkReal x8779=((1.0)*x8772);
IkReal x8780=(sj5*x8772);
evalcond[0]=((((-1.0)*x8777*x8779))+((r21*x8780))+(((-1.0)*r22*x8778)));
evalcond[1]=(((r11*x8780))+(((-1.0)*x8774*x8779))+(((-1.0)*r12*x8778)));
evalcond[2]=(((x8773*x8776))+(((-1.0)*r02*x8779))+(((-1.0)*x8775*x8778)));
evalcond[3]=((-1.0)+(((-1.0)*x8776*x8779))+((x8772*x8775))+(((-1.0)*r02*x8778)));
evalcond[4]=(((cj2*sj1))+((x8773*x8777))+((cj1*sj2))+(((-1.0)*r22*x8779))+(((-1.0)*r21*sj5*x8778)));
evalcond[5]=((((-1.0)*r11*sj5*x8778))+((x8773*x8774))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8781=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8781;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8781);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8782=((1.0)*cj5);
IkReal x8783=((((-1.0)*r21*x8782))+(((-1.0)*r20*sj5)));
j4eval[0]=x8783;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8782))))));
j4eval[2]=IKsign(x8783);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8784=cj5*cj5;
IkReal x8785=r01*r01;
IkReal x8786=(cj5*r00);
IkReal x8787=(r01*sj5);
IkReal x8788=((((-2.0)*x8786*x8787))+x8785+((x8784*(r00*r00)))+(((-1.0)*x8784*x8785))+(r02*r02));
j4eval[0]=x8788;
j4eval[1]=((IKabs(r02))+(IKabs((x8786+(((-1.0)*x8787))))));
j4eval[2]=IKsign(x8788);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8789=cj5*cj5;
IkReal x8790=r01*r01;
IkReal x8791=(r01*sj5);
IkReal x8792=(cj5*r00);
CheckValue<IkReal> x8793=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8789*x8790))+((x8789*(r00*r00)))+x8790+(((-2.0)*x8791*x8792))+(r02*r02))),-1);
if(!x8793.valid){
continue;
}
CheckValue<IkReal> x8794 = IKatan2WithCheck(IkReal((x8792+(((-1.0)*x8791)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8793.value)))+(x8794.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8795=IKsin(j4);
IkReal x8796=IKcos(j4);
IkReal x8797=(cj5*r10);
IkReal x8798=(r01*sj5);
IkReal x8799=(cj5*r00);
IkReal x8800=(cj5*r20);
IkReal x8801=((1.0)*x8796);
IkReal x8802=((1.0)*x8795);
IkReal x8803=(sj5*x8795);
evalcond[0]=(((r21*x8803))+(((-1.0)*r22*x8801))+(((-1.0)*x8800*x8802)));
evalcond[1]=((((-1.0)*r12*x8801))+((r11*x8803))+(((-1.0)*x8797*x8802)));
evalcond[2]=(((x8796*x8799))+(((-1.0)*r02*x8802))+(((-1.0)*x8798*x8801)));
evalcond[3]=((1.0)+((x8795*x8798))+(((-1.0)*r02*x8801))+(((-1.0)*x8799*x8802)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8802))+((x8796*x8800))+((cj1*sj2))+(((-1.0)*r21*sj5*x8801)));
evalcond[5]=((((-1.0)*r12*x8802))+((x8796*x8797))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8804=((1.0)*cj5);
CheckValue<IkReal> x8805=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8804))+(((-1.0)*r20*sj5)))),-1);
if(!x8805.valid){
continue;
}
CheckValue<IkReal> x8806 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8804))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8805.value)))+(x8806.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8807=IKsin(j4);
IkReal x8808=IKcos(j4);
IkReal x8809=(cj5*r10);
IkReal x8810=(r01*sj5);
IkReal x8811=(cj5*r00);
IkReal x8812=(cj5*r20);
IkReal x8813=((1.0)*x8808);
IkReal x8814=((1.0)*x8807);
IkReal x8815=(sj5*x8807);
evalcond[0]=(((r21*x8815))+(((-1.0)*r22*x8813))+(((-1.0)*x8812*x8814)));
evalcond[1]=((((-1.0)*r12*x8813))+((r11*x8815))+(((-1.0)*x8809*x8814)));
evalcond[2]=((((-1.0)*r02*x8814))+((x8808*x8811))+(((-1.0)*x8810*x8813)));
evalcond[3]=((1.0)+((x8807*x8810))+(((-1.0)*r02*x8813))+(((-1.0)*x8811*x8814)));
evalcond[4]=((((-1.0)*r22*x8814))+((cj2*sj1))+((cj1*sj2))+((x8808*x8812))+(((-1.0)*r21*sj5*x8813)));
evalcond[5]=((((-1.0)*r12*x8814))+(((-1.0)*sj1*sj2))+((x8808*x8809))+((cj1*cj2))+(((-1.0)*r11*sj5*x8813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8816 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8816.valid){
continue;
}
CheckValue<IkReal> x8817=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8816.value)+(((1.5707963267949)*(x8817.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8818=IKsin(j4);
IkReal x8819=IKcos(j4);
IkReal x8820=(cj5*r10);
IkReal x8821=(r01*sj5);
IkReal x8822=(cj5*r00);
IkReal x8823=(cj5*r20);
IkReal x8824=((1.0)*x8819);
IkReal x8825=((1.0)*x8818);
IkReal x8826=(sj5*x8818);
evalcond[0]=(((r21*x8826))+(((-1.0)*x8823*x8825))+(((-1.0)*r22*x8824)));
evalcond[1]=((((-1.0)*r12*x8824))+((r11*x8826))+(((-1.0)*x8820*x8825)));
evalcond[2]=(((x8819*x8822))+(((-1.0)*x8821*x8824))+(((-1.0)*r02*x8825)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8824))+((x8818*x8821))+(((-1.0)*x8822*x8825)));
evalcond[4]=(((cj2*sj1))+((x8819*x8823))+((cj1*sj2))+(((-1.0)*r21*sj5*x8824))+(((-1.0)*r22*x8825)));
evalcond[5]=((((-1.0)*r11*sj5*x8824))+((x8819*x8820))+(((-1.0)*r12*x8825))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8827=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8827);
rxp1_1=(px*r21);
rxp1_2=(r11*x8827);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8828=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8828);
rxp1_1=(px*r21);
rxp1_2=(r11*x8828);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8829=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8829);
rxp1_1=(px*r21);
rxp1_2=(r11*x8829);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8832=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8832.valid){
continue;
}
IkReal x8830=x8832.value;
IkReal x8831=(sj0*x8830);
cj4array[0]=(((cj1*cj2*x8831))+(((-1.0)*sj1*sj2*x8831)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8833=IKsin(j4);
IkReal x8834=IKcos(j4);
IkReal x8835=(r21*sj5);
IkReal x8836=(cj5*r20);
IkReal x8837=((1.0)*x8833);
IkReal x8838=((1.0)*x8834);
evalcond[0]=((-1.0)*r02*x8833);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8838)));
evalcond[2]=(((x8833*x8835))+(((-1.0)*x8836*x8837)));
evalcond[3]=(((r11*sj5*x8833))+(((-1.0)*cj5*r10*x8837)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8835*x8838))+((cj1*sj2))+((x8834*x8836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8841=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8841.valid){
continue;
}
IkReal x8839=x8841.value;
IkReal x8840=((1.0)*x8839);
cj4array[0]=((((-1.0)*cj1*sj2*x8840))+(((-1.0)*cj2*sj1*x8840)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8842=IKsin(j4);
IkReal x8843=IKcos(j4);
IkReal x8844=(r11*sj5);
IkReal x8845=((1.0)*sj0);
IkReal x8846=((1.0)*x8843);
IkReal x8847=((1.0)*cj5*x8842);
evalcond[0]=((-1.0)*r02*x8842);
evalcond[1]=((((-1.0)*r02*x8846))+(((-1.0)*x8845)));
evalcond[2]=((((-1.0)*r20*x8847))+((r21*sj5*x8842)));
evalcond[3]=((((-1.0)*r10*x8847))+((x8842*x8844)));
evalcond[4]=((((-1.0)*cj1*cj2*x8845))+(((-1.0)*x8844*x8846))+((cj5*r10*x8843))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8848=IKPowWithIntegerCheck(r02,-1);
if(!x8848.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8848.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8849=IKsin(j4);
IkReal x8850=IKcos(j4);
IkReal x8851=(cj5*x8850);
IkReal x8852=(sj5*x8849);
IkReal x8853=((1.0)*sj5*x8850);
IkReal x8854=((1.0)*cj5*x8849);
evalcond[0]=((-1.0)*r02*x8849);
evalcond[1]=(((r21*x8852))+(((-1.0)*r20*x8854)));
evalcond[2]=((((-1.0)*r10*x8854))+((r11*x8852)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8853))+((r20*x8851)));
evalcond[4]=((((-1.0)*r11*x8853))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((r10*x8851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8855=((1.0)*sj0);
IkReal x8856=((1.0)*cj0);
CheckValue<IkReal> x8857 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8855))+(((-1.0)*r02*x8856)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8855))+(((-1.0)*r01*sj5*x8856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8857.valid){
continue;
}
CheckValue<IkReal> x8858=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8857.value)+(((1.5707963267949)*(x8858.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8859=IKsin(j4);
IkReal x8860=IKcos(j4);
IkReal x8861=(cj5*r10);
IkReal x8862=(sj1*sj2);
IkReal x8863=(r01*sj5);
IkReal x8864=(cj5*r00);
IkReal x8865=(cj5*r20);
IkReal x8866=((1.0)*x8860);
IkReal x8867=((1.0)*cj1*cj2);
IkReal x8868=((1.0)*x8859);
IkReal x8869=(sj5*x8859);
evalcond[0]=((((-1.0)*x8865*x8868))+((r21*x8869))+(((-1.0)*r22*x8866)));
evalcond[1]=(cj0+((r11*x8869))+(((-1.0)*x8861*x8868))+(((-1.0)*r12*x8866)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8864*x8868))+((x8859*x8863))+(((-1.0)*r02*x8866)));
evalcond[3]=(((cj2*sj1))+((x8860*x8865))+((cj1*sj2))+(((-1.0)*r22*x8868))+(((-1.0)*r21*sj5*x8866)));
evalcond[4]=((((-1.0)*x8863*x8866))+((x8860*x8864))+(((-1.0)*cj0*x8867))+((cj0*x8862))+(((-1.0)*r02*x8868)));
evalcond[5]=(((x8860*x8861))+(((-1.0)*r11*sj5*x8866))+(((-1.0)*sj0*x8867))+((sj0*x8862))+(((-1.0)*r12*x8868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8870=((1.0)*cj5);
CheckValue<IkReal> x8871 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8870)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8871.valid){
continue;
}
CheckValue<IkReal> x8872=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8870)))),-1);
if(!x8872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8871.value)+(((1.5707963267949)*(x8872.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8873=IKsin(j4);
IkReal x8874=IKcos(j4);
IkReal x8875=(cj5*r10);
IkReal x8876=(sj1*sj2);
IkReal x8877=(r01*sj5);
IkReal x8878=(cj5*r00);
IkReal x8879=(cj5*r20);
IkReal x8880=((1.0)*x8874);
IkReal x8881=((1.0)*cj1*cj2);
IkReal x8882=((1.0)*x8873);
IkReal x8883=(sj5*x8873);
evalcond[0]=((((-1.0)*r22*x8880))+((r21*x8883))+(((-1.0)*x8879*x8882)));
evalcond[1]=(cj0+(((-1.0)*r12*x8880))+((r11*x8883))+(((-1.0)*x8875*x8882)));
evalcond[2]=((((-1.0)*sj0))+((x8873*x8877))+(((-1.0)*x8878*x8882))+(((-1.0)*r02*x8880)));
evalcond[3]=((((-1.0)*r22*x8882))+((cj2*sj1))+((x8874*x8879))+((cj1*sj2))+(((-1.0)*r21*sj5*x8880)));
evalcond[4]=(((x8874*x8878))+(((-1.0)*cj0*x8881))+(((-1.0)*x8877*x8880))+(((-1.0)*r02*x8882))+((cj0*x8876)));
evalcond[5]=(((x8874*x8875))+(((-1.0)*r12*x8882))+(((-1.0)*r11*sj5*x8880))+(((-1.0)*sj0*x8881))+((sj0*x8876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8884=((1.0)*cj5);
CheckValue<IkReal> x8885 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8885.valid){
continue;
}
CheckValue<IkReal> x8886=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8884)))),-1);
if(!x8886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8885.value)+(((1.5707963267949)*(x8886.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8887=IKsin(j4);
IkReal x8888=IKcos(j4);
IkReal x8889=(cj5*r10);
IkReal x8890=(sj1*sj2);
IkReal x8891=(r01*sj5);
IkReal x8892=(cj5*r00);
IkReal x8893=(cj5*r20);
IkReal x8894=((1.0)*x8888);
IkReal x8895=((1.0)*cj1*cj2);
IkReal x8896=((1.0)*x8887);
IkReal x8897=(sj5*x8887);
evalcond[0]=((((-1.0)*x8893*x8896))+((r21*x8897))+(((-1.0)*r22*x8894)));
evalcond[1]=(cj0+(((-1.0)*x8889*x8896))+(((-1.0)*r12*x8894))+((r11*x8897)));
evalcond[2]=(((x8887*x8891))+(((-1.0)*sj0))+(((-1.0)*x8892*x8896))+(((-1.0)*r02*x8894)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8894))+((x8888*x8893))+(((-1.0)*r22*x8896)));
evalcond[4]=((((-1.0)*x8891*x8894))+(((-1.0)*cj0*x8895))+(((-1.0)*r02*x8896))+((x8888*x8892))+((cj0*x8890)));
evalcond[5]=(((sj0*x8890))+(((-1.0)*sj0*x8895))+(((-1.0)*r11*sj5*x8894))+(((-1.0)*r12*x8896))+((x8888*x8889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8898=cj1*cj1;
IkReal x8899=cj2*cj2;
IkReal x8900=(r10*sj5);
IkReal x8901=(cj1*px);
IkReal x8902=((98000.0)*cj2);
IkReal x8903=(r00*sj5);
IkReal x8904=(cj5*r11);
IkReal x8905=(cj5*r01);
IkReal x8906=((10625.0)*cj1);
IkReal x8907=(sj1*sj2);
IkReal x8908=(cj1*py);
IkReal x8909=((9800.0)*x8907);
IkReal x8910=((9800.0)*cj1*cj2);
CheckValue<IkReal> x8911=IKPowWithIntegerCheck(IKsign(((42905.0)+(((-38416.0)*x8899))+(((-83300.0)*cj1*x8907))+(((76832.0)*x8898*x8899))+(((-76832.0)*cj1*cj2*x8907))+(((6740.25)*x8898))+(((83300.0)*cj2*x8898)))),-1);
if(!x8911.valid){
continue;
}
CheckValue<IkReal> x8912 = IKatan2WithCheck(IkReal((((x8900*x8910))+(((-98000.0)*py*x8907))+(((-1.0)*x8900*x8909))+(((-3350.0)*x8903))+(((-3350.0)*x8905))+((x8902*x8908))+((x8904*x8906))+((x8900*x8906))+(((-1.0)*x8904*x8909))+((x8904*x8910))+(((106250.0)*x8908))+(((-33500.0)*px)))),IkReal((((x8905*x8906))+(((-1.0)*x8903*x8909))+((x8903*x8906))+((x8901*x8902))+(((3350.0)*x8904))+(((3350.0)*x8900))+(((33500.0)*py))+((x8905*x8910))+(((-98000.0)*px*x8907))+(((-1.0)*x8905*x8909))+(((106250.0)*x8901))+((x8903*x8910)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8912.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8911.value)))+(x8912.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8913=IKcos(j0);
IkReal x8914=IKsin(j0);
IkReal x8915=((0.1)*sj5);
IkReal x8916=((0.425)*cj1);
IkReal x8917=((0.1)*cj5);
IkReal x8918=((0.392)*cj1*cj2);
IkReal x8919=((0.392)*sj1*sj2);
evalcond[0]=((((-1.0)*r01*x8917))+((x8913*x8918))+((x8913*x8916))+(((-0.134)*x8914))+(((-1.0)*px))+(((-1.0)*x8913*x8919))+(((-1.0)*r00*x8915)));
evalcond[1]=(((x8914*x8916))+((x8914*x8918))+(((-1.0)*r11*x8917))+(((-1.0)*py))+(((-1.0)*x8914*x8919))+(((0.134)*x8913))+(((-1.0)*r10*x8915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8920=((1.0)*cj5);
IkReal x8921=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8920)));
j4eval[0]=x8921;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8920))))));
j4eval[2]=IKsign(x8921);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8922=((1.0)*cj5);
IkReal x8923=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8922)));
j4eval[0]=x8923;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x8922))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x8923);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8924=((1.0)*sj0);
IkReal x8925=((1.0)*cj0);
IkReal x8926=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8926;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x8924))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8925)))))+(IKabs(((((-1.0)*r02*x8925))+(((-1.0)*r12*x8924))))));
j4eval[2]=IKsign(x8926);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8927=((-1.0)*r20);
IkReal x8929 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8929)==0){
continue;
}
IkReal x8928=pow(x8929,-0.5);
CheckValue<IkReal> x8930 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8927),IKFAST_ATAN2_MAGTHRESH);
if(!x8930.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8930.value));
IkReal gconst1=(r21*x8928);
IkReal gconst2=(x8927*x8928);
CheckValue<IkReal> x8931 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8931.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8931.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8932=((-1.0)*r20);
IkReal x8933=x8928;
CheckValue<IkReal> x8935 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8932),IKFAST_ATAN2_MAGTHRESH);
if(!x8935.valid){
continue;
}
IkReal x8934=((-1.0)*(x8935.value));
sj5=gconst1;
cj5=gconst2;
j5=x8934;
IkReal gconst0=x8934;
IkReal gconst1=(r21*x8933);
IkReal gconst2=(x8932*x8933);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8936=((-1.0)*r20);
IkReal x8937=x8928;
CheckValue<IkReal> x8939 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8936),IKFAST_ATAN2_MAGTHRESH);
if(!x8939.valid){
continue;
}
IkReal x8938=((-1.0)*(x8939.value));
sj5=gconst1;
cj5=gconst2;
j5=x8938;
IkReal gconst0=x8938;
IkReal gconst1=(r21*x8937);
IkReal gconst2=(x8936*x8937);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8940=((-1.0)*r20);
IkReal x8941=x8928;
CheckValue<IkReal> x8943 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8940),IKFAST_ATAN2_MAGTHRESH);
if(!x8943.valid){
continue;
}
IkReal x8942=((-1.0)*(x8943.value));
sj5=gconst1;
cj5=gconst2;
j5=x8942;
IkReal gconst0=x8942;
IkReal gconst1=(r21*x8941);
IkReal gconst2=(x8940*x8941);
IkReal x8944=r22*r22;
CheckValue<IkReal> x8948=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8944))),-1);
if(!x8948.valid){
continue;
}
IkReal x8945=x8948.value;
IkReal x8946=(sj3*x8945);
IkReal x8947=(((x8946*(r21*r21*r21*r21)))+(((2.0)*x8946*(r20*r20)*(r21*r21)))+((sj3*x8944))+((x8946*(r20*r20*r20*r20))));
j4eval[0]=x8947;
j4eval[1]=IKsign(x8947);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8949=((-1.0)*r20);
IkReal x8950=x8928;
CheckValue<IkReal> x8952 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8949),IKFAST_ATAN2_MAGTHRESH);
if(!x8952.valid){
continue;
}
IkReal x8951=((-1.0)*(x8952.value));
sj5=gconst1;
cj5=gconst2;
j5=x8951;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8951;
IkReal gconst1=(r21*x8950);
IkReal gconst2=(x8949*x8950);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8953=((-1.0)*r20);
IkReal x8954=x8928;
CheckValue<IkReal> x8956 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8953),IKFAST_ATAN2_MAGTHRESH);
if(!x8956.valid){
continue;
}
IkReal x8955=((-1.0)*(x8956.value));
sj5=gconst1;
cj5=gconst2;
j5=x8955;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8955;
IkReal gconst1=(r21*x8954);
IkReal gconst2=(x8953*x8954);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8957=((-1.0)*r20);
IkReal x8958=x8928;
CheckValue<IkReal> x8960 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8957),IKFAST_ATAN2_MAGTHRESH);
if(!x8960.valid){
continue;
}
IkReal x8959=((-1.0)*(x8960.value));
sj5=gconst1;
cj5=gconst2;
j5=x8959;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8959;
IkReal gconst1=(r21*x8958);
IkReal gconst2=(x8957*x8958);
IkReal x8961=((1.0)*(r22*r22));
CheckValue<IkReal> x8965=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8961))),-1);
if(!x8965.valid){
continue;
}
IkReal x8962=x8965.value;
IkReal x8963=((1.0)*x8962);
IkReal x8964=((((-1.0)*x8963*(r20*r20*r20*r20)))+(((-2.0)*x8962*(r20*r20)*(r21*r21)))+(((-1.0)*x8961))+(((-1.0)*x8963*(r21*r21*r21*r21))));
j4eval[0]=x8964;
j4eval[1]=IKsign(x8964);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8966=((-1.0)*r20);
IkReal x8967=x8928;
CheckValue<IkReal> x8969 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8966),IKFAST_ATAN2_MAGTHRESH);
if(!x8969.valid){
continue;
}
IkReal x8968=((-1.0)*(x8969.value));
sj5=gconst1;
cj5=gconst2;
j5=x8968;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8968;
IkReal gconst1=(r21*x8967);
IkReal gconst2=(x8966*x8967);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8970=((-1.0)*r20);
IkReal x8971=x8928;
CheckValue<IkReal> x8973 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8970),IKFAST_ATAN2_MAGTHRESH);
if(!x8973.valid){
continue;
}
IkReal x8972=((-1.0)*(x8973.value));
sj5=gconst1;
cj5=gconst2;
j5=x8972;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8972;
IkReal gconst1=(r21*x8971);
IkReal gconst2=(x8970*x8971);
IkReal x8974=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8978=IKPowWithIntegerCheck(x8974,-1);
if(!x8978.valid){
continue;
}
IkReal x8975=x8978.value;
IkReal x8976=((1.0)*x8975);
IkReal x8977=((((-1.0)*x8976*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x8975))+(((-1.0)*x8976*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x8977;
j4eval[1]=r12;
j4eval[2]=x8974;
j4eval[3]=IKsign(x8977);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8979=((-1.0)*r20);
IkReal x8980=x8928;
CheckValue<IkReal> x8982 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8979),IKFAST_ATAN2_MAGTHRESH);
if(!x8982.valid){
continue;
}
IkReal x8981=((-1.0)*(x8982.value));
sj5=gconst1;
cj5=gconst2;
j5=x8981;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8981;
IkReal gconst1=(r21*x8980);
IkReal gconst2=(x8979*x8980);
IkReal x8983=r22*r22;
IkReal x8984=(cj1*r12*sj2);
IkReal x8985=(cj2*r12*sj1);
CheckValue<IkReal> x8989=IKPowWithIntegerCheck(((-1.0)+x8983),-1);
if(!x8989.valid){
continue;
}
IkReal x8986=x8989.value;
if((((1.0)+(((-1.0)*x8983)))) < -0.00001)
continue;
IkReal x8987=IKsqrt(((1.0)+(((-1.0)*x8983))));
IkReal x8988=(r22*x8986*x8987);
j4eval[0]=((IKabs(((((-1.0)*x8985))+(((-1.0)*x8984)))))+(IKabs((((x8984*x8988))+((x8985*x8988))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8990=(cj1*sj2);
IkReal x8991=(cj2*sj1);
IkReal x8992=((1.0)*r12);
IkReal x8993=(gconst1*r11);
IkReal x8994=((1.0)*gconst2*r10);
CheckValue<IkReal> x8995 = IKatan2WithCheck(IkReal(((((-1.0)*x8991*x8994))+(((-1.0)*x8990*x8994))+((x8991*x8993))+((x8990*x8993)))),IkReal(((((-1.0)*x8991*x8992))+(((-1.0)*x8990*x8992)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8995.valid){
continue;
}
CheckValue<IkReal> x8996=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8995.value)+(((1.5707963267949)*(x8996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8997=IKcos(j4);
IkReal x8998=IKsin(j4);
IkReal x8999=((1.0)*x8997);
IkReal x9000=(gconst1*x8997);
IkReal x9001=(gconst1*x8998);
IkReal x9002=((1.0)*gconst2*x8998);
evalcond[0]=(((r12*x8998))+((r11*x9000))+(((-1.0)*gconst2*r10*x8999)));
evalcond[1]=(((r21*x9001))+(((-1.0)*r22*x8999))+(((-1.0)*r20*x9002)));
evalcond[2]=((((-1.0)*r00*x9002))+(((-1.0)*r02*x8999))+((r01*x9001)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8999))+(((-1.0)*r10*x9002))+((r11*x9001)));
evalcond[4]=(((cj2*sj1))+((r21*x9000))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8999))+((r22*x8998)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8999))+((r02*x8998))+((r01*x9000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9003=(gconst2*r10);
IkReal x9004=(gconst1*r11);
CheckValue<IkReal> x9005 = IKatan2WithCheck(IkReal(((((-1.0)*x9003))+x9004)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9005.valid){
continue;
}
CheckValue<IkReal> x9006=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9003*x9003)))+(((-1.0)*(x9004*x9004)))+(((-1.0)*(r12*r12)))+(((2.0)*x9003*x9004)))),-1);
if(!x9006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9005.value)+(((1.5707963267949)*(x9006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9007=IKcos(j4);
IkReal x9008=IKsin(j4);
IkReal x9009=((1.0)*x9007);
IkReal x9010=(gconst1*x9007);
IkReal x9011=(gconst1*x9008);
IkReal x9012=((1.0)*gconst2*x9008);
evalcond[0]=((((-1.0)*gconst2*r10*x9009))+((r12*x9008))+((r11*x9010)));
evalcond[1]=((((-1.0)*r22*x9009))+(((-1.0)*r20*x9012))+((r21*x9011)));
evalcond[2]=((((-1.0)*r02*x9009))+(((-1.0)*r00*x9012))+((r01*x9011)));
evalcond[3]=((1.0)+(((-1.0)*r10*x9012))+(((-1.0)*r12*x9009))+((r11*x9011)));
evalcond[4]=(((cj2*sj1))+((r22*x9008))+((cj1*sj2))+((r21*x9010))+(((-1.0)*gconst2*r20*x9009)));
evalcond[5]=(((r02*x9008))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9009))+((r01*x9010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9013=((1.0)*gconst2);
CheckValue<IkReal> x9014=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9013)))),-1);
if(!x9014.valid){
continue;
}
CheckValue<IkReal> x9015 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9013)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9014.value)))+(x9015.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9016=IKcos(j4);
IkReal x9017=IKsin(j4);
IkReal x9018=((1.0)*x9016);
IkReal x9019=(gconst1*x9016);
IkReal x9020=(gconst1*x9017);
IkReal x9021=((1.0)*gconst2*x9017);
evalcond[0]=(((r12*x9017))+(((-1.0)*gconst2*r10*x9018))+((r11*x9019)));
evalcond[1]=((((-1.0)*r22*x9018))+((r21*x9020))+(((-1.0)*r20*x9021)));
evalcond[2]=(((r01*x9020))+(((-1.0)*r02*x9018))+(((-1.0)*r00*x9021)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9018))+((r11*x9020))+(((-1.0)*r10*x9021)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9018))+((cj1*sj2))+((r22*x9017))+((r21*x9019)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x9017))+((r01*x9019))+(((-1.0)*gconst2*r00*x9018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9022=((-1.0)*r20);
IkReal x9023=x8928;
CheckValue<IkReal> x9025 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9022),IKFAST_ATAN2_MAGTHRESH);
if(!x9025.valid){
continue;
}
IkReal x9024=((-1.0)*(x9025.value));
sj5=gconst1;
cj5=gconst2;
j5=x9024;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9024;
IkReal gconst1=(r21*x9023);
IkReal gconst2=(x9022*x9023);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9026=((-1.0)*r20);
IkReal x9027=x8928;
CheckValue<IkReal> x9029 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9026),IKFAST_ATAN2_MAGTHRESH);
if(!x9029.valid){
continue;
}
IkReal x9028=((-1.0)*(x9029.value));
sj5=gconst1;
cj5=gconst2;
j5=x9028;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9028;
IkReal gconst1=(r21*x9027);
IkReal gconst2=(x9026*x9027);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9030=((-1.0)*r20);
IkReal x9031=x8928;
CheckValue<IkReal> x9033 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9030),IKFAST_ATAN2_MAGTHRESH);
if(!x9033.valid){
continue;
}
IkReal x9032=((-1.0)*(x9033.value));
sj5=gconst1;
cj5=gconst2;
j5=x9032;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9032;
IkReal gconst1=(r21*x9031);
IkReal gconst2=(x9030*x9031);
IkReal x9034=r22*r22;
IkReal x9035=(cj1*r12*sj2);
IkReal x9036=(cj2*r12*sj1);
CheckValue<IkReal> x9040=IKPowWithIntegerCheck(((-1.0)+x9034),-1);
if(!x9040.valid){
continue;
}
IkReal x9037=x9040.value;
if((((1.0)+(((-1.0)*x9034)))) < -0.00001)
continue;
IkReal x9038=IKsqrt(((1.0)+(((-1.0)*x9034))));
IkReal x9039=(r22*x9037*x9038);
j4eval[0]=((IKabs((((x9036*x9039))+((x9035*x9039)))))+(IKabs(((((-1.0)*x9035))+(((-1.0)*x9036))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9041=(cj1*sj2);
IkReal x9042=(cj2*sj1);
IkReal x9043=((1.0)*r12);
IkReal x9044=(gconst1*r11);
IkReal x9045=((1.0)*gconst2*r10);
CheckValue<IkReal> x9046=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9046.valid){
continue;
}
CheckValue<IkReal> x9047 = IKatan2WithCheck(IkReal(((((-1.0)*x9041*x9045))+((x9041*x9044))+(((-1.0)*x9042*x9045))+((x9042*x9044)))),IkReal(((((-1.0)*x9041*x9043))+(((-1.0)*x9042*x9043)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9046.value)))+(x9047.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9048=IKcos(j4);
IkReal x9049=IKsin(j4);
IkReal x9050=((1.0)*x9048);
IkReal x9051=(gconst1*x9048);
IkReal x9052=(gconst1*x9049);
IkReal x9053=((1.0)*gconst2*x9049);
evalcond[0]=((((-1.0)*gconst2*r10*x9050))+((r12*x9049))+((r11*x9051)));
evalcond[1]=((((-1.0)*r22*x9050))+(((-1.0)*r20*x9053))+((r21*x9052)));
evalcond[2]=((((-1.0)*r02*x9050))+(((-1.0)*r00*x9053))+((r01*x9052)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9053))+(((-1.0)*r12*x9050))+((r11*x9052)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9049))+(((-1.0)*gconst2*r20*x9050))+((r21*x9051)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9051))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9050))+((r02*x9049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9054=(gconst1*r11);
IkReal x9055=(gconst2*r10);
CheckValue<IkReal> x9056 = IKatan2WithCheck(IkReal((x9054+(((-1.0)*x9055)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9056.valid){
continue;
}
CheckValue<IkReal> x9057=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9055*x9055)+(((-2.0)*x9054*x9055))+(x9054*x9054))),-1);
if(!x9057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9056.value)+(((1.5707963267949)*(x9057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9058=IKcos(j4);
IkReal x9059=IKsin(j4);
IkReal x9060=((1.0)*x9058);
IkReal x9061=(gconst1*x9058);
IkReal x9062=(gconst1*x9059);
IkReal x9063=((1.0)*gconst2*x9059);
evalcond[0]=(((r11*x9061))+((r12*x9059))+(((-1.0)*gconst2*r10*x9060)));
evalcond[1]=((((-1.0)*r20*x9063))+((r21*x9062))+(((-1.0)*r22*x9060)));
evalcond[2]=(((r01*x9062))+(((-1.0)*r02*x9060))+(((-1.0)*r00*x9063)));
evalcond[3]=((-1.0)+((r11*x9062))+(((-1.0)*r10*x9063))+(((-1.0)*r12*x9060)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9060))+((r21*x9061))+((r22*x9059)));
evalcond[5]=(((r01*x9061))+(((-1.0)*gconst2*r00*x9060))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x9059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9064 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9064.valid){
continue;
}
CheckValue<IkReal> x9065=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9064.value)+(((1.5707963267949)*(x9065.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9066=IKcos(j4);
IkReal x9067=IKsin(j4);
IkReal x9068=((1.0)*x9066);
IkReal x9069=(gconst1*x9066);
IkReal x9070=(gconst1*x9067);
IkReal x9071=((1.0)*gconst2*x9067);
evalcond[0]=(((r11*x9069))+((r12*x9067))+(((-1.0)*gconst2*r10*x9068)));
evalcond[1]=(((r21*x9070))+(((-1.0)*r20*x9071))+(((-1.0)*r22*x9068)));
evalcond[2]=((((-1.0)*r00*x9071))+((r01*x9070))+(((-1.0)*r02*x9068)));
evalcond[3]=((-1.0)+((r11*x9070))+(((-1.0)*r10*x9071))+(((-1.0)*r12*x9068)));
evalcond[4]=(((cj2*sj1))+((r22*x9067))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9068))+((r21*x9069)));
evalcond[5]=(((r01*x9069))+(((-1.0)*gconst2*r00*x9068))+(((-1.0)*sj1*sj2))+((r02*x9067))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9072=((-1.0)*r20);
IkReal x9073=x8928;
CheckValue<IkReal> x9075 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9072),IKFAST_ATAN2_MAGTHRESH);
if(!x9075.valid){
continue;
}
IkReal x9074=((-1.0)*(x9075.value));
sj5=gconst1;
cj5=gconst2;
j5=x9074;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9074;
IkReal gconst1=(r21*x9073);
IkReal gconst2=(x9072*x9073);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9076=((-1.0)*r20);
IkReal x9077=x8928;
CheckValue<IkReal> x9079 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9076),IKFAST_ATAN2_MAGTHRESH);
if(!x9079.valid){
continue;
}
IkReal x9078=((-1.0)*(x9079.value));
sj5=gconst1;
cj5=gconst2;
j5=x9078;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9078;
IkReal gconst1=(r21*x9077);
IkReal gconst2=(x9076*x9077);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9080=((-1.0)*r20);
IkReal x9081=x8928;
CheckValue<IkReal> x9083 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9080),IKFAST_ATAN2_MAGTHRESH);
if(!x9083.valid){
continue;
}
IkReal x9082=((-1.0)*(x9083.value));
sj5=gconst1;
cj5=gconst2;
j5=x9082;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9082;
IkReal gconst1=(r21*x9081);
IkReal gconst2=(x9080*x9081);
IkReal x9084=r22*r22;
IkReal x9085=((1.0)*r02);
IkReal x9086=(cj1*sj2);
IkReal x9087=(cj2*sj1);
CheckValue<IkReal> x9091=IKPowWithIntegerCheck(((-1.0)+x9084),-1);
if(!x9091.valid){
continue;
}
IkReal x9088=x9091.value;
if((((1.0)+(((-1.0)*x9084)))) < -0.00001)
continue;
IkReal x9089=IKsqrt(((1.0)+(((-1.0)*x9084))));
IkReal x9090=(r02*r22*x9088*x9089);
j4eval[0]=((IKabs((((x9087*x9090))+((x9086*x9090)))))+(IKabs(((((-1.0)*x9085*x9086))+(((-1.0)*x9085*x9087))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9092=(cj1*sj2);
IkReal x9093=(gconst1*r01);
IkReal x9094=((1.0)*r02);
IkReal x9095=(cj2*sj1);
IkReal x9096=((1.0)*gconst2*r00);
CheckValue<IkReal> x9097 = IKatan2WithCheck(IkReal(((((-1.0)*x9092*x9096))+((x9092*x9093))+(((-1.0)*x9095*x9096))+((x9093*x9095)))),IkReal(((((-1.0)*x9092*x9094))+(((-1.0)*x9094*x9095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9097.valid){
continue;
}
CheckValue<IkReal> x9098=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9097.value)+(((1.5707963267949)*(x9098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9099=IKcos(j4);
IkReal x9100=IKsin(j4);
IkReal x9101=((1.0)*x9099);
IkReal x9102=(gconst1*x9099);
IkReal x9103=(gconst1*x9100);
IkReal x9104=((1.0)*gconst2*x9100);
evalcond[0]=(((r02*x9100))+(((-1.0)*gconst2*r00*x9101))+((r01*x9102)));
evalcond[1]=((((-1.0)*r22*x9101))+((r21*x9103))+(((-1.0)*r20*x9104)));
evalcond[2]=((((-1.0)*r10*x9104))+(((-1.0)*r12*x9101))+((r11*x9103)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9101))+(((-1.0)*r00*x9104))+((r01*x9103)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9100))+((r21*x9102))+(((-1.0)*gconst2*r20*x9101)));
evalcond[5]=((((-1.0)*gconst2*r10*x9101))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9100))+((r11*x9102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9105=(gconst1*r01);
IkReal x9106=(gconst2*r00);
CheckValue<IkReal> x9107 = IKatan2WithCheck(IkReal(((((-1.0)*x9106))+x9105)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9107.valid){
continue;
}
CheckValue<IkReal> x9108=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9105*x9106))+(x9106*x9106)+(x9105*x9105)+(r02*r02))),-1);
if(!x9108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9107.value)+(((1.5707963267949)*(x9108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9109=IKcos(j4);
IkReal x9110=IKsin(j4);
IkReal x9111=((1.0)*x9109);
IkReal x9112=(gconst1*x9109);
IkReal x9113=(gconst1*x9110);
IkReal x9114=((1.0)*gconst2*x9110);
evalcond[0]=((((-1.0)*gconst2*r00*x9111))+((r01*x9112))+((r02*x9110)));
evalcond[1]=(((r21*x9113))+(((-1.0)*r22*x9111))+(((-1.0)*r20*x9114)));
evalcond[2]=((((-1.0)*r10*x9114))+((r11*x9113))+(((-1.0)*r12*x9111)));
evalcond[3]=((-1.0)+((r01*x9113))+(((-1.0)*r02*x9111))+(((-1.0)*r00*x9114)));
evalcond[4]=(((r21*x9112))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9111))+((r22*x9110)));
evalcond[5]=(((r12*x9110))+((r11*x9112))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9115=((1.0)*gconst2);
CheckValue<IkReal> x9116=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9115)))),-1);
if(!x9116.valid){
continue;
}
CheckValue<IkReal> x9117 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9116.value)))+(x9117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9118=IKcos(j4);
IkReal x9119=IKsin(j4);
IkReal x9120=((1.0)*x9118);
IkReal x9121=(gconst1*x9118);
IkReal x9122=(gconst1*x9119);
IkReal x9123=((1.0)*gconst2*x9119);
evalcond[0]=((((-1.0)*gconst2*r00*x9120))+((r01*x9121))+((r02*x9119)));
evalcond[1]=((((-1.0)*r20*x9123))+(((-1.0)*r22*x9120))+((r21*x9122)));
evalcond[2]=((((-1.0)*r12*x9120))+(((-1.0)*r10*x9123))+((r11*x9122)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9120))+((r01*x9122))+(((-1.0)*r00*x9123)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9120))+((cj1*sj2))+((r22*x9119))+((r21*x9121)));
evalcond[5]=(((r12*x9119))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9120))+((r11*x9121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9124=((-1.0)*r20);
IkReal x9125=x8928;
CheckValue<IkReal> x9127 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9124),IKFAST_ATAN2_MAGTHRESH);
if(!x9127.valid){
continue;
}
IkReal x9126=((-1.0)*(x9127.value));
sj5=gconst1;
cj5=gconst2;
j5=x9126;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9126;
IkReal gconst1=(r21*x9125);
IkReal gconst2=(x9124*x9125);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9128=((-1.0)*r20);
IkReal x9129=x8928;
CheckValue<IkReal> x9131 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9128),IKFAST_ATAN2_MAGTHRESH);
if(!x9131.valid){
continue;
}
IkReal x9130=((-1.0)*(x9131.value));
sj5=gconst1;
cj5=gconst2;
j5=x9130;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9130;
IkReal gconst1=(r21*x9129);
IkReal gconst2=(x9128*x9129);
IkReal x9132=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9136=IKPowWithIntegerCheck(x9132,-1);
if(!x9136.valid){
continue;
}
IkReal x9133=x9136.value;
IkReal x9134=((1.0)*x9133);
IkReal x9135=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9133))+(((-1.0)*x9134*(r00*r00)*(r20*r20)))+(((-1.0)*x9134*(r01*r01)*(r21*r21))));
j4eval[0]=x9135;
j4eval[1]=IKsign(x9135);
j4eval[2]=r02;
j4eval[3]=x9132;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9137=((-1.0)*r20);
IkReal x9138=x8928;
CheckValue<IkReal> x9140 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9137),IKFAST_ATAN2_MAGTHRESH);
if(!x9140.valid){
continue;
}
IkReal x9139=((-1.0)*(x9140.value));
sj5=gconst1;
cj5=gconst2;
j5=x9139;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9139;
IkReal gconst1=(r21*x9138);
IkReal gconst2=(x9137*x9138);
IkReal x9141=r22*r22;
IkReal x9142=((1.0)*r02);
IkReal x9143=(cj1*sj2);
IkReal x9144=(cj2*sj1);
CheckValue<IkReal> x9148=IKPowWithIntegerCheck(((-1.0)+x9141),-1);
if(!x9148.valid){
continue;
}
IkReal x9145=x9148.value;
if((((1.0)+(((-1.0)*x9141)))) < -0.00001)
continue;
IkReal x9146=IKsqrt(((1.0)+(((-1.0)*x9141))));
IkReal x9147=(r02*r22*x9145*x9146);
j4eval[0]=((IKabs((((x9144*x9147))+((x9143*x9147)))))+(IKabs(((((-1.0)*x9142*x9144))+(((-1.0)*x9142*x9143))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9149=(cj1*sj2);
IkReal x9150=(gconst1*r01);
IkReal x9151=((1.0)*r02);
IkReal x9152=(cj2*sj1);
IkReal x9153=((1.0)*gconst2*r00);
CheckValue<IkReal> x9154 = IKatan2WithCheck(IkReal((((x9150*x9152))+(((-1.0)*x9152*x9153))+((x9149*x9150))+(((-1.0)*x9149*x9153)))),IkReal(((((-1.0)*x9151*x9152))+(((-1.0)*x9149*x9151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9154.valid){
continue;
}
CheckValue<IkReal> x9155=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9154.value)+(((1.5707963267949)*(x9155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9156=IKcos(j4);
IkReal x9157=IKsin(j4);
IkReal x9158=((1.0)*x9156);
IkReal x9159=(gconst1*x9156);
IkReal x9160=(gconst1*x9157);
IkReal x9161=((1.0)*gconst2*x9157);
evalcond[0]=(((r02*x9157))+(((-1.0)*gconst2*r00*x9158))+((r01*x9159)));
evalcond[1]=((((-1.0)*r22*x9158))+((r21*x9160))+(((-1.0)*r20*x9161)));
evalcond[2]=((((-1.0)*r12*x9158))+(((-1.0)*r10*x9161))+((r11*x9160)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9158))+((r01*x9160))+(((-1.0)*r00*x9161)));
evalcond[4]=(((cj2*sj1))+((r22*x9157))+(((-1.0)*gconst2*r20*x9158))+((cj1*sj2))+((r21*x9159)));
evalcond[5]=(((r11*x9159))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9158))+((cj1*cj2))+((r12*x9157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9162=(gconst1*r01);
IkReal x9163=(gconst2*r00);
CheckValue<IkReal> x9164=IKPowWithIntegerCheck(IKsign(((((2.0)*x9162*x9163))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9163*x9163)))+(((-1.0)*(x9162*x9162))))),-1);
if(!x9164.valid){
continue;
}
CheckValue<IkReal> x9165 = IKatan2WithCheck(IkReal(((((-1.0)*x9163))+x9162)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9164.value)))+(x9165.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9166=IKcos(j4);
IkReal x9167=IKsin(j4);
IkReal x9168=((1.0)*x9166);
IkReal x9169=(gconst1*x9166);
IkReal x9170=(gconst1*x9167);
IkReal x9171=((1.0)*gconst2*x9167);
evalcond[0]=(((r01*x9169))+((r02*x9167))+(((-1.0)*gconst2*r00*x9168)));
evalcond[1]=((((-1.0)*r22*x9168))+((r21*x9170))+(((-1.0)*r20*x9171)));
evalcond[2]=((((-1.0)*r12*x9168))+(((-1.0)*r10*x9171))+((r11*x9170)));
evalcond[3]=((1.0)+((r01*x9170))+(((-1.0)*r02*x9168))+(((-1.0)*r00*x9171)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9167))+((r21*x9169))+(((-1.0)*gconst2*r20*x9168)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9168))+((r11*x9169))+((r12*x9167))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9172 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9172.valid){
continue;
}
CheckValue<IkReal> x9173=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9172.value)+(((1.5707963267949)*(x9173.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9174=IKcos(j4);
IkReal x9175=IKsin(j4);
IkReal x9176=((1.0)*x9174);
IkReal x9177=(gconst1*x9174);
IkReal x9178=(gconst1*x9175);
IkReal x9179=((1.0)*gconst2*x9175);
evalcond[0]=((((-1.0)*gconst2*r00*x9176))+((r02*x9175))+((r01*x9177)));
evalcond[1]=(((r21*x9178))+(((-1.0)*r22*x9176))+(((-1.0)*r20*x9179)));
evalcond[2]=((((-1.0)*r10*x9179))+(((-1.0)*r12*x9176))+((r11*x9178)));
evalcond[3]=((1.0)+((r01*x9178))+(((-1.0)*r02*x9176))+(((-1.0)*r00*x9179)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9176))+((cj1*sj2))+((r21*x9177))+((r22*x9175)));
evalcond[5]=((((-1.0)*gconst2*r10*x9176))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x9175))+((r11*x9177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9180=((-1.0)*r20);
IkReal x9181=((-1.0)*px);
CheckValue<IkReal> x9183 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9180),IKFAST_ATAN2_MAGTHRESH);
if(!x9183.valid){
continue;
}
IkReal x9182=((-1.0)*(x9183.value));
sj5=gconst1;
cj5=gconst2;
j5=x9182;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9181);
rxp1_1=(px*r21);
rxp1_2=(r11*x9181);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9182;
IkReal gconst1=r21;
IkReal gconst2=x9180;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9184=((-1.0)*r20);
IkReal x9185=((-1.0)*px);
CheckValue<IkReal> x9187 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9184),IKFAST_ATAN2_MAGTHRESH);
if(!x9187.valid){
continue;
}
IkReal x9186=((-1.0)*(x9187.value));
sj5=gconst1;
cj5=gconst2;
j5=x9186;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9185);
rxp1_1=(px*r21);
rxp1_2=(r11*x9185);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9186;
IkReal gconst1=r21;
IkReal gconst2=x9184;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9188=((-1.0)*r20);
IkReal x9189=((-1.0)*px);
CheckValue<IkReal> x9191 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9188),IKFAST_ATAN2_MAGTHRESH);
if(!x9191.valid){
continue;
}
IkReal x9190=((-1.0)*(x9191.value));
sj5=gconst1;
cj5=gconst2;
j5=x9190;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9189);
rxp1_1=(px*r21);
rxp1_2=(r11*x9189);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9190;
IkReal gconst1=r21;
IkReal gconst2=x9188;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9194=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9194.valid){
continue;
}
IkReal x9192=x9194.value;
IkReal x9193=(sj0*x9192);
cj4array[0]=(((cj1*cj2*x9193))+(((-1.0)*sj1*sj2*x9193)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9195=IKsin(j4);
IkReal x9196=IKcos(j4);
IkReal x9197=((1.0)*gconst2);
IkReal x9198=(gconst1*r21);
evalcond[0]=(r02*x9195);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9196)));
evalcond[2]=(((x9195*x9198))+(((-1.0)*r20*x9195*x9197)));
evalcond[3]=((((-1.0)*r10*x9195*x9197))+((gconst1*r11*x9195)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x9196*x9197))+((x9196*x9198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9201=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9201.valid){
continue;
}
IkReal x9199=x9201.value;
IkReal x9200=((1.0)*x9199);
cj4array[0]=((((-1.0)*cj2*sj1*x9200))+(((-1.0)*cj1*sj2*x9200)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9202=IKsin(j4);
IkReal x9203=IKcos(j4);
IkReal x9204=((1.0)*sj0);
IkReal x9205=(gconst1*x9202);
IkReal x9206=((1.0)*x9203);
IkReal x9207=((1.0)*gconst2*x9202);
evalcond[0]=(r02*x9202);
evalcond[1]=((((-1.0)*r02*x9206))+(((-1.0)*x9204)));
evalcond[2]=(((r21*x9205))+(((-1.0)*r20*x9207)));
evalcond[3]=(((r11*x9205))+(((-1.0)*r10*x9207)));
evalcond[4]=(((gconst1*r11*x9203))+(((-1.0)*gconst2*r10*x9206))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x9204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9208=IKPowWithIntegerCheck(r02,-1);
if(!x9208.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9208.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9209=IKsin(j4);
IkReal x9210=IKcos(j4);
IkReal x9211=(gconst1*r21);
IkReal x9212=(gconst1*r11);
IkReal x9213=((1.0)*gconst2*r10);
IkReal x9214=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9209);
evalcond[1]=(((x9209*x9211))+(((-1.0)*x9209*x9214)));
evalcond[2]=(((x9209*x9212))+(((-1.0)*x9209*x9213)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9210*x9214))+((cj1*sj2))+((x9210*x9211)));
evalcond[4]=((((-1.0)*x9210*x9213))+(((-1.0)*cj1*cj2*sj0))+((x9210*x9212))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9215=(cj2*sj1);
IkReal x9216=(cj1*sj2);
IkReal x9217=(gconst1*r21);
IkReal x9218=((1.0)*gconst2*r20);
CheckValue<IkReal> x9219 = IKatan2WithCheck(IkReal((((r22*x9216))+((r22*x9215)))),IkReal(((((-1.0)*x9216*x9218))+((x9215*x9217))+((x9216*x9217))+(((-1.0)*x9215*x9218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9219.valid){
continue;
}
CheckValue<IkReal> x9220=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst2*r20*x9217))+(((-1.0)*gconst2*r20*x9218))+(((-1.0)*(x9217*x9217)))+(((-1.0)*(r22*r22))))),-1);
if(!x9220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9219.value)+(((1.5707963267949)*(x9220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9221=IKsin(j4);
IkReal x9222=IKcos(j4);
IkReal x9223=(sj1*sj2);
IkReal x9224=(gconst2*r10);
IkReal x9225=(gconst2*r00);
IkReal x9226=(gconst2*r20);
IkReal x9227=((1.0)*x9222);
IkReal x9228=(gconst1*x9222);
IkReal x9229=((1.0)*cj1*cj2);
IkReal x9230=(gconst1*x9221);
IkReal x9231=((1.0)*x9221);
evalcond[0]=((((-1.0)*x9226*x9231))+((r21*x9230))+(((-1.0)*r22*x9227)));
evalcond[1]=(cj0+(((-1.0)*r12*x9227))+((r11*x9230))+(((-1.0)*x9224*x9231)));
evalcond[2]=((((-1.0)*x9225*x9231))+(((-1.0)*sj0))+(((-1.0)*r02*x9227))+((r01*x9230)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9228))+((r22*x9221))+(((-1.0)*x9226*x9227)));
evalcond[4]=(((r01*x9228))+(((-1.0)*cj0*x9229))+((r02*x9221))+(((-1.0)*x9225*x9227))+((cj0*x9223)));
evalcond[5]=(((r12*x9221))+((r11*x9228))+((sj0*x9223))+(((-1.0)*x9224*x9227))+(((-1.0)*sj0*x9229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9232=((1.0)*gconst2);
CheckValue<IkReal> x9233 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9232))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9233.valid){
continue;
}
CheckValue<IkReal> x9234=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9232))+(((-1.0)*gconst1*r10)))),-1);
if(!x9234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9233.value)+(((1.5707963267949)*(x9234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9235=IKsin(j4);
IkReal x9236=IKcos(j4);
IkReal x9237=(sj1*sj2);
IkReal x9238=(gconst2*r10);
IkReal x9239=(gconst2*r00);
IkReal x9240=(gconst2*r20);
IkReal x9241=((1.0)*x9236);
IkReal x9242=(gconst1*x9236);
IkReal x9243=((1.0)*cj1*cj2);
IkReal x9244=(gconst1*x9235);
IkReal x9245=((1.0)*x9235);
evalcond[0]=((((-1.0)*r22*x9241))+((r21*x9244))+(((-1.0)*x9240*x9245)));
evalcond[1]=(cj0+(((-1.0)*r12*x9241))+((r11*x9244))+(((-1.0)*x9238*x9245)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9244))+(((-1.0)*r02*x9241))+(((-1.0)*x9239*x9245)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9242))+((r22*x9235))+(((-1.0)*x9240*x9241)));
evalcond[4]=(((r02*x9235))+((cj0*x9237))+((r01*x9242))+(((-1.0)*x9239*x9241))+(((-1.0)*cj0*x9243)));
evalcond[5]=(((sj0*x9237))+((r12*x9235))+((r11*x9242))+(((-1.0)*x9238*x9241))+(((-1.0)*sj0*x9243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9246=((1.0)*gconst2);
CheckValue<IkReal> x9247=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9246)))),-1);
if(!x9247.valid){
continue;
}
CheckValue<IkReal> x9248 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9246))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9247.value)))+(x9248.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9249=IKsin(j4);
IkReal x9250=IKcos(j4);
IkReal x9251=(sj1*sj2);
IkReal x9252=(gconst2*r10);
IkReal x9253=(gconst2*r00);
IkReal x9254=(gconst2*r20);
IkReal x9255=((1.0)*x9250);
IkReal x9256=(gconst1*x9250);
IkReal x9257=((1.0)*cj1*cj2);
IkReal x9258=(gconst1*x9249);
IkReal x9259=((1.0)*x9249);
evalcond[0]=((((-1.0)*r22*x9255))+((r21*x9258))+(((-1.0)*x9254*x9259)));
evalcond[1]=(cj0+(((-1.0)*r12*x9255))+((r11*x9258))+(((-1.0)*x9252*x9259)));
evalcond[2]=((((-1.0)*x9253*x9259))+(((-1.0)*sj0))+((r01*x9258))+(((-1.0)*r02*x9255)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9256))+((r22*x9249))+(((-1.0)*x9254*x9255)));
evalcond[4]=((((-1.0)*cj0*x9257))+(((-1.0)*x9253*x9255))+((cj0*x9251))+((r02*x9249))+((r01*x9256)));
evalcond[5]=(((r12*x9249))+((r11*x9256))+((sj0*x9251))+(((-1.0)*x9252*x9255))+(((-1.0)*sj0*x9257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9260=((-1.0)*r20);
IkReal x9261=x8928;
CheckValue<IkReal> x9263 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9260),IKFAST_ATAN2_MAGTHRESH);
if(!x9263.valid){
continue;
}
IkReal x9262=((-1.0)*(x9263.value));
sj5=gconst1;
cj5=gconst2;
j5=x9262;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9262;
IkReal gconst1=(r21*x9261);
IkReal gconst2=(x9260*x9261);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9264=((-1.0)*r20);
IkReal x9265=x8928;
CheckValue<IkReal> x9267 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9264),IKFAST_ATAN2_MAGTHRESH);
if(!x9267.valid){
continue;
}
IkReal x9266=((-1.0)*(x9267.value));
sj5=gconst1;
cj5=gconst2;
j5=x9266;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9266;
IkReal gconst1=(r21*x9265);
IkReal gconst2=(x9264*x9265);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9268=((-1.0)*r20);
IkReal x9269=x8928;
CheckValue<IkReal> x9271 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9268),IKFAST_ATAN2_MAGTHRESH);
if(!x9271.valid){
continue;
}
IkReal x9270=((-1.0)*(x9271.value));
sj5=gconst1;
cj5=gconst2;
j5=x9270;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9270;
IkReal gconst1=(r21*x9269);
IkReal gconst2=(x9268*x9269);
IkReal x9272=r22*r22;
CheckValue<IkReal> x9275=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9272))),-1);
if(!x9275.valid){
continue;
}
IkReal x9273=x9275.value;
IkReal x9274=(((x9273*(r21*r21*r21*r21)))+((x9273*(r20*r20*r20*r20)))+(((2.0)*x9273*(r20*r20)*(r21*r21)))+x9272);
j4eval[0]=x9274;
j4eval[1]=IKsign(x9274);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9276=((-1.0)*r20);
IkReal x9277=x8928;
CheckValue<IkReal> x9279 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9276),IKFAST_ATAN2_MAGTHRESH);
if(!x9279.valid){
continue;
}
IkReal x9278=((-1.0)*(x9279.value));
sj5=gconst1;
cj5=gconst2;
j5=x9278;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9278;
IkReal gconst1=(r21*x9277);
IkReal gconst2=(x9276*x9277);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9280=((-1.0)*r20);
IkReal x9281=x8928;
CheckValue<IkReal> x9283 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9280),IKFAST_ATAN2_MAGTHRESH);
if(!x9283.valid){
continue;
}
IkReal x9282=((-1.0)*(x9283.value));
sj5=gconst1;
cj5=gconst2;
j5=x9282;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9282;
IkReal gconst1=(r21*x9281);
IkReal gconst2=(x9280*x9281);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9284=((-1.0)*r20);
IkReal x9285=x8928;
CheckValue<IkReal> x9287 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9284),IKFAST_ATAN2_MAGTHRESH);
if(!x9287.valid){
continue;
}
IkReal x9286=((-1.0)*(x9287.value));
sj5=gconst1;
cj5=gconst2;
j5=x9286;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9286;
IkReal gconst1=(r21*x9285);
IkReal gconst2=(x9284*x9285);
IkReal x9288=r22*r22;
IkReal x9289=(cj1*r12*sj2);
IkReal x9290=(cj2*r12*sj1);
CheckValue<IkReal> x9294=IKPowWithIntegerCheck(((-1.0)+x9288),-1);
if(!x9294.valid){
continue;
}
IkReal x9291=x9294.value;
if((((1.0)+(((-1.0)*x9288)))) < -0.00001)
continue;
IkReal x9292=IKsqrt(((1.0)+(((-1.0)*x9288))));
IkReal x9293=((1.0)*r22*x9291*x9292);
j4eval[0]=((IKabs(((((-1.0)*x9290*x9293))+(((-1.0)*x9289*x9293)))))+(IKabs((x9290+x9289))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9295=((1.0)*gconst1);
IkReal x9296=(cj2*sj1);
IkReal x9297=(gconst2*r10);
IkReal x9298=(cj1*sj2);
CheckValue<IkReal> x9299 = IKatan2WithCheck(IkReal((((x9296*x9297))+((x9297*x9298))+(((-1.0)*r11*x9295*x9298))+(((-1.0)*r11*x9295*x9296)))),IkReal((((r12*x9298))+((r12*x9296)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9299.valid){
continue;
}
CheckValue<IkReal> x9300=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9295)))),-1);
if(!x9300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9299.value)+(((1.5707963267949)*(x9300.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9301=IKsin(j4);
IkReal x9302=IKcos(j4);
IkReal x9303=((1.0)*x9302);
IkReal x9304=(gconst2*x9302);
IkReal x9305=(gconst1*x9301);
IkReal x9306=((1.0)*x9301);
evalcond[0]=(((r21*x9305))+(((-1.0)*r22*x9303))+(((-1.0)*gconst2*r20*x9306)));
evalcond[1]=((((-1.0)*gconst2*r00*x9306))+((r01*x9305))+(((-1.0)*r02*x9303)));
evalcond[2]=((((-1.0)*gconst1*r11*x9303))+((r10*x9304))+(((-1.0)*r12*x9306)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9306))+((r11*x9305))+(((-1.0)*r12*x9303)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9303))+((cj1*sj2))+((r20*x9304))+(((-1.0)*r22*x9306)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9303))+(((-1.0)*r02*x9306))+((r00*x9304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9307=(gconst1*r11);
IkReal x9308=(gconst2*r10);
CheckValue<IkReal> x9309 = IKatan2WithCheck(IkReal((x9308+(((-1.0)*x9307)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9309.valid){
continue;
}
CheckValue<IkReal> x9310=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9307*x9308))+(r12*r12)+(x9307*x9307)+(x9308*x9308))),-1);
if(!x9310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9309.value)+(((1.5707963267949)*(x9310.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9311=IKsin(j4);
IkReal x9312=IKcos(j4);
IkReal x9313=((1.0)*x9312);
IkReal x9314=(gconst2*x9312);
IkReal x9315=(gconst1*x9311);
IkReal x9316=((1.0)*x9311);
evalcond[0]=(((r21*x9315))+(((-1.0)*r22*x9313))+(((-1.0)*gconst2*r20*x9316)));
evalcond[1]=((((-1.0)*gconst2*r00*x9316))+((r01*x9315))+(((-1.0)*r02*x9313)));
evalcond[2]=((((-1.0)*gconst1*r11*x9313))+((r10*x9314))+(((-1.0)*r12*x9316)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9316))+((r11*x9315))+(((-1.0)*r12*x9313)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9313))+((cj1*sj2))+((r20*x9314))+(((-1.0)*r22*x9316)));
evalcond[5]=((((-1.0)*gconst1*r01*x9313))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9316))+((r00*x9314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9317=((1.0)*gconst2);
CheckValue<IkReal> x9318=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9317)))),-1);
if(!x9318.valid){
continue;
}
CheckValue<IkReal> x9319 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9317))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9318.value)))+(x9319.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9320=IKsin(j4);
IkReal x9321=IKcos(j4);
IkReal x9322=((1.0)*x9321);
IkReal x9323=(gconst2*x9321);
IkReal x9324=(gconst1*x9320);
IkReal x9325=((1.0)*x9320);
evalcond[0]=((((-1.0)*r22*x9322))+(((-1.0)*gconst2*r20*x9325))+((r21*x9324)));
evalcond[1]=((((-1.0)*r02*x9322))+((r01*x9324))+(((-1.0)*gconst2*r00*x9325)));
evalcond[2]=((((-1.0)*r12*x9325))+((r10*x9323))+(((-1.0)*gconst1*r11*x9322)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9322))+(((-1.0)*gconst2*r10*x9325))+((r11*x9324)));
evalcond[4]=(((cj2*sj1))+((r20*x9323))+(((-1.0)*r22*x9325))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9322)));
evalcond[5]=((((-1.0)*gconst1*r01*x9322))+(((-1.0)*r02*x9325))+((r00*x9323))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9326=((-1.0)*r20);
IkReal x9327=x8928;
CheckValue<IkReal> x9329 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9326),IKFAST_ATAN2_MAGTHRESH);
if(!x9329.valid){
continue;
}
IkReal x9328=((-1.0)*(x9329.value));
sj5=gconst1;
cj5=gconst2;
j5=x9328;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9328;
IkReal gconst1=(r21*x9327);
IkReal gconst2=(x9326*x9327);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9330=((-1.0)*r20);
IkReal x9331=x8928;
CheckValue<IkReal> x9333 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9330),IKFAST_ATAN2_MAGTHRESH);
if(!x9333.valid){
continue;
}
IkReal x9332=((-1.0)*(x9333.value));
sj5=gconst1;
cj5=gconst2;
j5=x9332;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9332;
IkReal gconst1=(r21*x9331);
IkReal gconst2=(x9330*x9331);
IkReal x9334=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9338=IKPowWithIntegerCheck(x9334,-1);
if(!x9338.valid){
continue;
}
IkReal x9335=x9338.value;
IkReal x9336=((1.0)*x9335);
IkReal x9337=((((-1.0)*x9336*(r10*r10)*(r20*r20)))+(((-1.0)*x9336*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x9335))+(((-1.0)*(r12*r12))));
j4eval[0]=x9337;
j4eval[1]=r12;
j4eval[2]=x9334;
j4eval[3]=IKsign(x9337);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9339=((-1.0)*r20);
IkReal x9340=x8928;
CheckValue<IkReal> x9342 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9339),IKFAST_ATAN2_MAGTHRESH);
if(!x9342.valid){
continue;
}
IkReal x9341=((-1.0)*(x9342.value));
sj5=gconst1;
cj5=gconst2;
j5=x9341;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9341;
IkReal gconst1=(r21*x9340);
IkReal gconst2=(x9339*x9340);
IkReal x9343=r22*r22;
IkReal x9344=(cj1*r12*sj2);
IkReal x9345=(cj2*r12*sj1);
CheckValue<IkReal> x9349=IKPowWithIntegerCheck(((-1.0)+x9343),-1);
if(!x9349.valid){
continue;
}
IkReal x9346=x9349.value;
if((((1.0)+(((-1.0)*x9343)))) < -0.00001)
continue;
IkReal x9347=IKsqrt(((1.0)+(((-1.0)*x9343))));
IkReal x9348=((1.0)*r22*x9346*x9347);
j4eval[0]=((IKabs((x9344+x9345)))+(IKabs(((((-1.0)*x9344*x9348))+(((-1.0)*x9345*x9348))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9350=((1.0)*gconst1);
IkReal x9351=(cj2*sj1);
IkReal x9352=(gconst2*r10);
IkReal x9353=(cj1*sj2);
CheckValue<IkReal> x9354 = IKatan2WithCheck(IkReal((((x9351*x9352))+((x9352*x9353))+(((-1.0)*r11*x9350*x9353))+(((-1.0)*r11*x9350*x9351)))),IkReal((((r12*x9353))+((r12*x9351)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9354.valid){
continue;
}
CheckValue<IkReal> x9355=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9350)))),-1);
if(!x9355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9354.value)+(((1.5707963267949)*(x9355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9356=IKsin(j4);
IkReal x9357=IKcos(j4);
IkReal x9358=((1.0)*x9357);
IkReal x9359=(gconst2*x9357);
IkReal x9360=(gconst1*x9356);
IkReal x9361=((1.0)*x9356);
evalcond[0]=(((r21*x9360))+(((-1.0)*r22*x9358))+(((-1.0)*gconst2*r20*x9361)));
evalcond[1]=((((-1.0)*r02*x9358))+((r01*x9360))+(((-1.0)*gconst2*r00*x9361)));
evalcond[2]=(((r10*x9359))+(((-1.0)*gconst1*r11*x9358))+(((-1.0)*r12*x9361)));
evalcond[3]=((-1.0)+((r11*x9360))+(((-1.0)*r12*x9358))+(((-1.0)*gconst2*r10*x9361)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9359))+(((-1.0)*gconst1*r21*x9358))+(((-1.0)*r22*x9361)));
evalcond[5]=((((-1.0)*gconst1*r01*x9358))+(((-1.0)*sj1*sj2))+((r00*x9359))+(((-1.0)*r02*x9361))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9362=(gconst1*r11);
IkReal x9363=(gconst2*r10);
CheckValue<IkReal> x9364 = IKatan2WithCheck(IkReal((x9363+(((-1.0)*x9362)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9364.valid){
continue;
}
CheckValue<IkReal> x9365=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9363*x9363)))+(((-1.0)*(r12*r12)))+(((2.0)*x9362*x9363))+(((-1.0)*(x9362*x9362))))),-1);
if(!x9365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9364.value)+(((1.5707963267949)*(x9365.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9366=IKsin(j4);
IkReal x9367=IKcos(j4);
IkReal x9368=((1.0)*x9367);
IkReal x9369=(gconst2*x9367);
IkReal x9370=(gconst1*x9366);
IkReal x9371=((1.0)*x9366);
evalcond[0]=(((r21*x9370))+(((-1.0)*gconst2*r20*x9371))+(((-1.0)*r22*x9368)));
evalcond[1]=((((-1.0)*r02*x9368))+(((-1.0)*gconst2*r00*x9371))+((r01*x9370)));
evalcond[2]=((((-1.0)*gconst1*r11*x9368))+(((-1.0)*r12*x9371))+((r10*x9369)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9371))+((r11*x9370))+(((-1.0)*r12*x9368)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9368))+((cj1*sj2))+(((-1.0)*r22*x9371))+((r20*x9369)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9371))+(((-1.0)*gconst1*r01*x9368))+((cj1*cj2))+((r00*x9369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9372 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9372.valid){
continue;
}
CheckValue<IkReal> x9373=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9372.value)+(((1.5707963267949)*(x9373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9374=IKsin(j4);
IkReal x9375=IKcos(j4);
IkReal x9376=((1.0)*x9375);
IkReal x9377=(gconst2*x9375);
IkReal x9378=(gconst1*x9374);
IkReal x9379=((1.0)*x9374);
evalcond[0]=(((r21*x9378))+(((-1.0)*r22*x9376))+(((-1.0)*gconst2*r20*x9379)));
evalcond[1]=((((-1.0)*r02*x9376))+(((-1.0)*gconst2*r00*x9379))+((r01*x9378)));
evalcond[2]=((((-1.0)*r12*x9379))+((r10*x9377))+(((-1.0)*gconst1*r11*x9376)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9379))+((r11*x9378))+(((-1.0)*r12*x9376)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9376))+((cj1*sj2))+(((-1.0)*r22*x9379))+((r20*x9377)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9379))+((cj1*cj2))+((r00*x9377))+(((-1.0)*gconst1*r01*x9376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9380=((-1.0)*r20);
IkReal x9381=x8928;
CheckValue<IkReal> x9383 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9380),IKFAST_ATAN2_MAGTHRESH);
if(!x9383.valid){
continue;
}
IkReal x9382=((-1.0)*(x9383.value));
sj5=gconst1;
cj5=gconst2;
j5=x9382;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9382;
IkReal gconst1=(r21*x9381);
IkReal gconst2=(x9380*x9381);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9384=((-1.0)*r20);
IkReal x9385=x8928;
CheckValue<IkReal> x9387 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9384),IKFAST_ATAN2_MAGTHRESH);
if(!x9387.valid){
continue;
}
IkReal x9386=((-1.0)*(x9387.value));
sj5=gconst1;
cj5=gconst2;
j5=x9386;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9386;
IkReal gconst1=(r21*x9385);
IkReal gconst2=(x9384*x9385);
IkReal x9388=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9392=IKPowWithIntegerCheck(x9388,-1);
if(!x9392.valid){
continue;
}
IkReal x9389=x9392.value;
IkReal x9390=((1.0)*x9389);
IkReal x9391=((((-1.0)*x9390*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x9390*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x9389)));
j4eval[0]=x9391;
j4eval[1]=IKsign(x9391);
j4eval[2]=r02;
j4eval[3]=x9388;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9393=((-1.0)*r20);
IkReal x9394=x8928;
CheckValue<IkReal> x9396 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9393),IKFAST_ATAN2_MAGTHRESH);
if(!x9396.valid){
continue;
}
IkReal x9395=((-1.0)*(x9396.value));
sj5=gconst1;
cj5=gconst2;
j5=x9395;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9395;
IkReal gconst1=(r21*x9394);
IkReal gconst2=(x9393*x9394);
IkReal x9397=r22*r22;
IkReal x9398=(cj1*r02*sj2);
IkReal x9399=(cj2*r02*sj1);
CheckValue<IkReal> x9403=IKPowWithIntegerCheck(((-1.0)+x9397),-1);
if(!x9403.valid){
continue;
}
IkReal x9400=x9403.value;
if((((1.0)+(((-1.0)*x9397)))) < -0.00001)
continue;
IkReal x9401=IKsqrt(((1.0)+(((-1.0)*x9397))));
IkReal x9402=((1.0)*r22*x9400*x9401);
j4eval[0]=((IKabs((x9399+x9398)))+(IKabs(((((-1.0)*x9399*x9402))+(((-1.0)*x9398*x9402))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9404=(cj2*sj1);
IkReal x9405=(cj1*sj2);
IkReal x9406=(gconst2*r00);
IkReal x9407=((1.0)*gconst1*r01);
CheckValue<IkReal> x9408 = IKatan2WithCheck(IkReal((((x9405*x9406))+((x9404*x9406))+(((-1.0)*x9405*x9407))+(((-1.0)*x9404*x9407)))),IkReal((((r02*x9405))+((r02*x9404)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9408.valid){
continue;
}
CheckValue<IkReal> x9409=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9408.value)+(((1.5707963267949)*(x9409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9410=IKsin(j4);
IkReal x9411=IKcos(j4);
IkReal x9412=(gconst1*r11);
IkReal x9413=(gconst1*r21);
IkReal x9414=(gconst1*r01);
IkReal x9415=((1.0)*x9411);
IkReal x9416=(gconst2*x9411);
IkReal x9417=((1.0)*x9410);
evalcond[0]=(((x9410*x9413))+(((-1.0)*gconst2*r20*x9417))+(((-1.0)*r22*x9415)));
evalcond[1]=(((x9410*x9412))+(((-1.0)*r12*x9415))+(((-1.0)*gconst2*r10*x9417)));
evalcond[2]=((((-1.0)*r02*x9417))+(((-1.0)*x9414*x9415))+((r00*x9416)));
evalcond[3]=((-1.0)+((x9410*x9414))+(((-1.0)*r02*x9415))+(((-1.0)*gconst2*r00*x9417)));
evalcond[4]=(((r20*x9416))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9417))+(((-1.0)*x9413*x9415)));
evalcond[5]=((((-1.0)*r12*x9417))+((r10*x9416))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9412*x9415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9418=(gconst2*r00);
IkReal x9419=(gconst1*r01);
CheckValue<IkReal> x9420=IKPowWithIntegerCheck(IKsign(((((2.0)*x9418*x9419))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9419*x9419)))+(((-1.0)*(x9418*x9418))))),-1);
if(!x9420.valid){
continue;
}
CheckValue<IkReal> x9421 = IKatan2WithCheck(IkReal((x9418+(((-1.0)*x9419)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9420.value)))+(x9421.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9422=IKsin(j4);
IkReal x9423=IKcos(j4);
IkReal x9424=(gconst1*r11);
IkReal x9425=(gconst1*r21);
IkReal x9426=(gconst1*r01);
IkReal x9427=((1.0)*x9423);
IkReal x9428=(gconst2*x9423);
IkReal x9429=((1.0)*x9422);
evalcond[0]=(((x9422*x9425))+(((-1.0)*gconst2*r20*x9429))+(((-1.0)*r22*x9427)));
evalcond[1]=((((-1.0)*gconst2*r10*x9429))+((x9422*x9424))+(((-1.0)*r12*x9427)));
evalcond[2]=(((r00*x9428))+(((-1.0)*x9426*x9427))+(((-1.0)*r02*x9429)));
evalcond[3]=((-1.0)+((x9422*x9426))+(((-1.0)*r02*x9427))+(((-1.0)*gconst2*r00*x9429)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9425*x9427))+((cj1*sj2))+((r20*x9428))+(((-1.0)*r22*x9429)));
evalcond[5]=((((-1.0)*x9424*x9427))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9429))+((r10*x9428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9430=((1.0)*gconst2);
CheckValue<IkReal> x9431 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9430))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9431.valid){
continue;
}
CheckValue<IkReal> x9432=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9430)))),-1);
if(!x9432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9431.value)+(((1.5707963267949)*(x9432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9433=IKsin(j4);
IkReal x9434=IKcos(j4);
IkReal x9435=(gconst1*r11);
IkReal x9436=(gconst1*r21);
IkReal x9437=(gconst1*r01);
IkReal x9438=((1.0)*x9434);
IkReal x9439=(gconst2*x9434);
IkReal x9440=((1.0)*x9433);
evalcond[0]=((((-1.0)*gconst2*r20*x9440))+((x9433*x9436))+(((-1.0)*r22*x9438)));
evalcond[1]=((((-1.0)*r12*x9438))+((x9433*x9435))+(((-1.0)*gconst2*r10*x9440)));
evalcond[2]=((((-1.0)*x9437*x9438))+(((-1.0)*r02*x9440))+((r00*x9439)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9438))+(((-1.0)*gconst2*r00*x9440))+((x9433*x9437)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9439))+(((-1.0)*x9436*x9438))+(((-1.0)*r22*x9440)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9435*x9438))+(((-1.0)*r12*x9440))+((r10*x9439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9441=((-1.0)*r20);
IkReal x9442=x8928;
CheckValue<IkReal> x9444 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9441),IKFAST_ATAN2_MAGTHRESH);
if(!x9444.valid){
continue;
}
IkReal x9443=((-1.0)*(x9444.value));
sj5=gconst1;
cj5=gconst2;
j5=x9443;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9443;
IkReal gconst1=(r21*x9442);
IkReal gconst2=(x9441*x9442);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9445=((-1.0)*r20);
IkReal x9446=x8928;
CheckValue<IkReal> x9448 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9445),IKFAST_ATAN2_MAGTHRESH);
if(!x9448.valid){
continue;
}
IkReal x9447=((-1.0)*(x9448.value));
sj5=gconst1;
cj5=gconst2;
j5=x9447;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9447;
IkReal gconst1=(r21*x9446);
IkReal gconst2=(x9445*x9446);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9449=((-1.0)*r20);
IkReal x9450=x8928;
CheckValue<IkReal> x9452 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9449),IKFAST_ATAN2_MAGTHRESH);
if(!x9452.valid){
continue;
}
IkReal x9451=((-1.0)*(x9452.value));
sj5=gconst1;
cj5=gconst2;
j5=x9451;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9451;
IkReal gconst1=(r21*x9450);
IkReal gconst2=(x9449*x9450);
IkReal x9453=r22*r22;
IkReal x9454=(cj1*r02*sj2);
IkReal x9455=(cj2*r02*sj1);
CheckValue<IkReal> x9459=IKPowWithIntegerCheck(((-1.0)+x9453),-1);
if(!x9459.valid){
continue;
}
IkReal x9456=x9459.value;
if((((1.0)+(((-1.0)*x9453)))) < -0.00001)
continue;
IkReal x9457=IKsqrt(((1.0)+(((-1.0)*x9453))));
IkReal x9458=((1.0)*r22*x9456*x9457);
j4eval[0]=((IKabs(((((-1.0)*x9454*x9458))+(((-1.0)*x9455*x9458)))))+(IKabs((x9454+x9455))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9460=(cj2*sj1);
IkReal x9461=(cj1*sj2);
IkReal x9462=(gconst2*r00);
IkReal x9463=((1.0)*gconst1*r01);
CheckValue<IkReal> x9464 = IKatan2WithCheck(IkReal((((x9460*x9462))+((x9461*x9462))+(((-1.0)*x9460*x9463))+(((-1.0)*x9461*x9463)))),IkReal((((r02*x9461))+((r02*x9460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9464.valid){
continue;
}
CheckValue<IkReal> x9465=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9464.value)+(((1.5707963267949)*(x9465.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9466=IKsin(j4);
IkReal x9467=IKcos(j4);
IkReal x9468=(gconst1*r11);
IkReal x9469=(gconst1*r21);
IkReal x9470=(gconst1*r01);
IkReal x9471=((1.0)*x9467);
IkReal x9472=(gconst2*x9467);
IkReal x9473=((1.0)*x9466);
evalcond[0]=(((x9466*x9469))+(((-1.0)*gconst2*r20*x9473))+(((-1.0)*r22*x9471)));
evalcond[1]=(((x9466*x9468))+(((-1.0)*r12*x9471))+(((-1.0)*gconst2*r10*x9473)));
evalcond[2]=((((-1.0)*r02*x9473))+(((-1.0)*x9470*x9471))+((r00*x9472)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9471))+(((-1.0)*gconst2*r00*x9473))+((x9466*x9470)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9469*x9471))+(((-1.0)*r22*x9473))+((r20*x9472)));
evalcond[5]=(((r10*x9472))+(((-1.0)*sj1*sj2))+(((-1.0)*x9468*x9471))+(((-1.0)*r12*x9473))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9474=(gconst1*r01);
IkReal x9475=(gconst2*r00);
CheckValue<IkReal> x9476=IKPowWithIntegerCheck(IKsign(((x9475*x9475)+(((-2.0)*x9474*x9475))+(x9474*x9474)+(r02*r02))),-1);
if(!x9476.valid){
continue;
}
CheckValue<IkReal> x9477 = IKatan2WithCheck(IkReal(((((-1.0)*x9474))+x9475)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9476.value)))+(x9477.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9478=IKsin(j4);
IkReal x9479=IKcos(j4);
IkReal x9480=(gconst1*r11);
IkReal x9481=(gconst1*r21);
IkReal x9482=(gconst1*r01);
IkReal x9483=((1.0)*x9479);
IkReal x9484=(gconst2*x9479);
IkReal x9485=((1.0)*x9478);
evalcond[0]=(((x9478*x9481))+(((-1.0)*r22*x9483))+(((-1.0)*gconst2*r20*x9485)));
evalcond[1]=(((x9478*x9480))+(((-1.0)*gconst2*r10*x9485))+(((-1.0)*r12*x9483)));
evalcond[2]=(((r00*x9484))+(((-1.0)*r02*x9485))+(((-1.0)*x9482*x9483)));
evalcond[3]=((1.0)+((x9478*x9482))+(((-1.0)*gconst2*r00*x9485))+(((-1.0)*r02*x9483)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9481*x9483))+((r20*x9484))+(((-1.0)*r22*x9485)));
evalcond[5]=((((-1.0)*x9480*x9483))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r10*x9484))+(((-1.0)*r12*x9485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9486 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9486.valid){
continue;
}
CheckValue<IkReal> x9487=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9486.value)+(((1.5707963267949)*(x9487.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9488=IKsin(j4);
IkReal x9489=IKcos(j4);
IkReal x9490=(gconst1*r11);
IkReal x9491=(gconst1*r21);
IkReal x9492=(gconst1*r01);
IkReal x9493=((1.0)*x9489);
IkReal x9494=(gconst2*x9489);
IkReal x9495=((1.0)*x9488);
evalcond[0]=((((-1.0)*gconst2*r20*x9495))+(((-1.0)*r22*x9493))+((x9488*x9491)));
evalcond[1]=((((-1.0)*gconst2*r10*x9495))+(((-1.0)*r12*x9493))+((x9488*x9490)));
evalcond[2]=((((-1.0)*r02*x9495))+(((-1.0)*x9492*x9493))+((r00*x9494)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9493))+(((-1.0)*gconst2*r00*x9495))+((x9488*x9492)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9495))+((cj1*sj2))+(((-1.0)*x9491*x9493))+((r20*x9494)));
evalcond[5]=(((r10*x9494))+(((-1.0)*sj1*sj2))+(((-1.0)*x9490*x9493))+(((-1.0)*r12*x9495))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9496=((-1.0)*r20);
IkReal x9497=((-1.0)*px);
CheckValue<IkReal> x9499 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9496),IKFAST_ATAN2_MAGTHRESH);
if(!x9499.valid){
continue;
}
IkReal x9498=((-1.0)*(x9499.value));
sj5=gconst1;
cj5=gconst2;
j5=x9498;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9497);
rxp1_1=(px*r21);
rxp1_2=(r11*x9497);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9498;
IkReal gconst1=r21;
IkReal gconst2=x9496;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9500=((-1.0)*r20);
IkReal x9501=((-1.0)*px);
CheckValue<IkReal> x9503 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9500),IKFAST_ATAN2_MAGTHRESH);
if(!x9503.valid){
continue;
}
IkReal x9502=((-1.0)*(x9503.value));
sj5=gconst1;
cj5=gconst2;
j5=x9502;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9501);
rxp1_1=(px*r21);
rxp1_2=(r11*x9501);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9502;
IkReal gconst1=r21;
IkReal gconst2=x9500;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9504=((-1.0)*r20);
IkReal x9505=((-1.0)*px);
CheckValue<IkReal> x9507 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9504),IKFAST_ATAN2_MAGTHRESH);
if(!x9507.valid){
continue;
}
IkReal x9506=((-1.0)*(x9507.value));
sj5=gconst1;
cj5=gconst2;
j5=x9506;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9505);
rxp1_1=(px*r21);
rxp1_2=(r11*x9505);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9506;
IkReal gconst1=r21;
IkReal gconst2=x9504;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9510=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9510.valid){
continue;
}
IkReal x9508=x9510.value;
IkReal x9509=(sj0*x9508);
cj4array[0]=((((-1.0)*sj1*sj2*x9509))+((cj1*cj2*x9509)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9511=IKsin(j4);
IkReal x9512=IKcos(j4);
IkReal x9513=(gconst1*x9511);
IkReal x9514=((1.0)*x9512);
IkReal x9515=((1.0)*gconst2*x9511);
evalcond[0]=((-1.0)*r02*x9511);
evalcond[1]=((((-1.0)*r02*x9514))+(((-1.0)*sj0)));
evalcond[2]=(((r21*x9513))+(((-1.0)*r20*x9515)));
evalcond[3]=((((-1.0)*r10*x9515))+((r11*x9513)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9514))+((gconst2*r20*x9512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9518=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9518.valid){
continue;
}
IkReal x9516=x9518.value;
IkReal x9517=((1.0)*x9516);
cj4array[0]=((((-1.0)*cj2*sj1*x9517))+(((-1.0)*cj1*sj2*x9517)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9519=IKsin(j4);
IkReal x9520=IKcos(j4);
IkReal x9521=(gconst2*r10);
IkReal x9522=((1.0)*sj0);
IkReal x9523=(gconst1*r11);
IkReal x9524=((1.0)*x9519);
IkReal x9525=((1.0)*x9520);
evalcond[0]=((-1.0)*r02*x9519);
evalcond[1]=((((-1.0)*r02*x9525))+(((-1.0)*x9522)));
evalcond[2]=(((gconst1*r21*x9519))+(((-1.0)*gconst2*r20*x9524)));
evalcond[3]=((((-1.0)*x9521*x9524))+((x9519*x9523)));
evalcond[4]=(((x9520*x9521))+(((-1.0)*cj1*cj2*x9522))+((sj0*sj1*sj2))+(((-1.0)*x9523*x9525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9526=IKPowWithIntegerCheck(r02,-1);
if(!x9526.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9526.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9527=IKsin(j4);
IkReal x9528=IKcos(j4);
IkReal x9529=(gconst2*r10);
IkReal x9530=(gconst1*r11);
IkReal x9531=(gconst1*r21);
IkReal x9532=(gconst2*r20);
IkReal x9533=((1.0)*x9527);
IkReal x9534=((1.0)*x9528);
evalcond[0]=((-1.0)*r02*x9527);
evalcond[1]=((((-1.0)*x9532*x9533))+((x9527*x9531)));
evalcond[2]=(((x9527*x9530))+(((-1.0)*x9529*x9533)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9531*x9534))+((cj1*sj2))+((x9528*x9532)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9530*x9534))+((sj0*sj1*sj2))+((x9528*x9529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9535=(cj2*sj1);
IkReal x9536=(cj1*sj2);
IkReal x9537=(gconst1*r21);
IkReal x9538=((1.0)*gconst2*r20);
CheckValue<IkReal> x9539=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x9537*x9537)+(((gconst2*gconst2)*(r20*r20)))+(((-2.0)*gconst2*r20*x9537)))),-1);
if(!x9539.valid){
continue;
}
CheckValue<IkReal> x9540 = IKatan2WithCheck(IkReal((((r22*x9536))+((r22*x9535)))),IkReal(((((-1.0)*x9536*x9538))+(((-1.0)*x9535*x9538))+((x9536*x9537))+((x9535*x9537)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9539.value)))+(x9540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9541=IKsin(j4);
IkReal x9542=IKcos(j4);
IkReal x9543=(gconst1*r11);
IkReal x9544=(sj1*sj2);
IkReal x9545=(gconst1*r21);
IkReal x9546=(gconst1*r01);
IkReal x9547=((1.0)*x9542);
IkReal x9548=(gconst2*x9542);
IkReal x9549=((1.0)*cj1*cj2);
IkReal x9550=((1.0)*x9541);
evalcond[0]=((((-1.0)*r22*x9547))+((x9541*x9545))+(((-1.0)*gconst2*r20*x9550)));
evalcond[1]=((((-1.0)*r12*x9547))+cj0+(((-1.0)*gconst2*r10*x9550))+((x9541*x9543)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x9547))+(((-1.0)*gconst2*r00*x9550))+((x9541*x9546)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x9550))+((cj1*sj2))+((r20*x9548))+(((-1.0)*x9545*x9547)));
evalcond[4]=((((-1.0)*cj0*x9549))+(((-1.0)*x9546*x9547))+(((-1.0)*r02*x9550))+((cj0*x9544))+((r00*x9548)));
evalcond[5]=((((-1.0)*sj0*x9549))+(((-1.0)*x9543*x9547))+((r10*x9548))+(((-1.0)*r12*x9550))+((sj0*x9544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9551=((1.0)*gconst2);
CheckValue<IkReal> x9552 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9551))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9552.valid){
continue;
}
CheckValue<IkReal> x9553=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9551)))),-1);
if(!x9553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9552.value)+(((1.5707963267949)*(x9553.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9554=IKsin(j4);
IkReal x9555=IKcos(j4);
IkReal x9556=(gconst1*r11);
IkReal x9557=(sj1*sj2);
IkReal x9558=(gconst1*r21);
IkReal x9559=(gconst1*r01);
IkReal x9560=((1.0)*x9555);
IkReal x9561=(gconst2*x9555);
IkReal x9562=((1.0)*cj1*cj2);
IkReal x9563=((1.0)*x9554);
evalcond[0]=((((-1.0)*gconst2*r20*x9563))+((x9554*x9558))+(((-1.0)*r22*x9560)));
evalcond[1]=(cj0+((x9554*x9556))+(((-1.0)*gconst2*r10*x9563))+(((-1.0)*r12*x9560)));
evalcond[2]=((((-1.0)*gconst2*r00*x9563))+(((-1.0)*sj0))+((x9554*x9559))+(((-1.0)*r02*x9560)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9563))+(((-1.0)*x9558*x9560))+((r20*x9561)));
evalcond[4]=(((r00*x9561))+(((-1.0)*cj0*x9562))+(((-1.0)*x9559*x9560))+((cj0*x9557))+(((-1.0)*r02*x9563)));
evalcond[5]=(((sj0*x9557))+(((-1.0)*x9556*x9560))+(((-1.0)*r12*x9563))+(((-1.0)*sj0*x9562))+((r10*x9561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9564=((1.0)*gconst2);
CheckValue<IkReal> x9565=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9564)))),-1);
if(!x9565.valid){
continue;
}
CheckValue<IkReal> x9566 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9565.value)))+(x9566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9567=IKsin(j4);
IkReal x9568=IKcos(j4);
IkReal x9569=(gconst1*r11);
IkReal x9570=(sj1*sj2);
IkReal x9571=(gconst1*r21);
IkReal x9572=(gconst1*r01);
IkReal x9573=((1.0)*x9568);
IkReal x9574=(gconst2*x9568);
IkReal x9575=((1.0)*cj1*cj2);
IkReal x9576=((1.0)*x9567);
evalcond[0]=((((-1.0)*gconst2*r20*x9576))+((x9567*x9571))+(((-1.0)*r22*x9573)));
evalcond[1]=(cj0+(((-1.0)*r12*x9573))+(((-1.0)*gconst2*r10*x9576))+((x9567*x9569)));
evalcond[2]=(((x9567*x9572))+(((-1.0)*sj0))+(((-1.0)*r02*x9573))+(((-1.0)*gconst2*r00*x9576)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9576))+((r20*x9574))+(((-1.0)*x9571*x9573)));
evalcond[4]=((((-1.0)*cj0*x9575))+(((-1.0)*r02*x9576))+((r00*x9574))+((cj0*x9570))+(((-1.0)*x9572*x9573)));
evalcond[5]=((((-1.0)*sj0*x9575))+(((-1.0)*r12*x9576))+((sj0*x9570))+(((-1.0)*x9569*x9573))+((r10*x9574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9577=((-1.0)*r20);
IkReal x9578=x8928;
CheckValue<IkReal> x9580 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9577),IKFAST_ATAN2_MAGTHRESH);
if(!x9580.valid){
continue;
}
IkReal x9579=((-1.0)*(x9580.value));
sj5=gconst1;
cj5=gconst2;
j5=x9579;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9579;
IkReal gconst1=(r21*x9578);
IkReal gconst2=(x9577*x9578);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9581=((-1.0)*r20);
IkReal x9582=x8928;
CheckValue<IkReal> x9584 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9581),IKFAST_ATAN2_MAGTHRESH);
if(!x9584.valid){
continue;
}
IkReal x9583=((-1.0)*(x9584.value));
sj5=gconst1;
cj5=gconst2;
j5=x9583;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9583;
IkReal gconst1=(r21*x9582);
IkReal gconst2=(x9581*x9582);
CheckValue<IkReal> x9592=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9592.valid){
continue;
}
IkReal x9585=x9592.value;
IkReal x9586=(sj3*x9585);
IkReal x9587=(r11*x9586);
IkReal x9588=(r00*x9586);
IkReal x9589=(r01*x9586);
IkReal x9590=(r10*x9586);
IkReal x9591=(r20*r21*x9586);
j4eval[0]=IKsign((((r00*r20*r21*x9587))+((r02*r12*sj3))+((r10*r20*r21*x9589))+((r10*x9588*(r20*r20)))+((r01*x9587*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9593=gconst2*gconst2;
IkReal x9594=gconst1*gconst1;
IkReal x9595=((1.0)*cj3);
IkReal x9596=((1.0)*sj3);
IkReal x9597=(r11*sj3);
IkReal x9598=(r10*sj3);
IkReal x9599=(gconst1*gconst2*r00);
IkReal x9600=(gconst1*gconst2*r01);
IkReal x9601=(r00*x9593);
IkReal x9602=(r01*x9594);
CheckValue<IkReal> x9603 = IKatan2WithCheck(IkReal((((gconst2*r02*x9597))+((gconst1*r02*x9598)))),IkReal((((x9598*x9602))+((x9597*x9600))+(((-1.0)*r10*x9596*x9599))+(((-1.0)*r11*x9596*x9601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9603.valid){
continue;
}
CheckValue<IkReal> x9604=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9595*x9601))+((cj3*r11*x9599))+(((-1.0)*r11*x9595*x9602))+(((-1.0)*r02*r12*x9595))+((cj3*r10*x9600)))),-1);
if(!x9604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9603.value)+(((1.5707963267949)*(x9604.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9605=IKsin(j4);
IkReal x9606=IKcos(j4);
IkReal x9607=(sj1*sj2);
IkReal x9608=(gconst1*sj3);
IkReal x9609=(cj3*gconst1);
IkReal x9610=(cj3*gconst2);
IkReal x9611=((1.0)*cj2);
IkReal x9612=(cj1*sj2);
IkReal x9613=(gconst2*sj3);
IkReal x9614=(cj1*x9611);
IkReal x9615=((1.0)*x9606);
IkReal x9616=((1.0)*x9605);
IkReal x9617=(gconst1*x9605);
IkReal x9618=(cj3*x9605);
IkReal x9619=(x9606*x9613);
evalcond[0]=((((-1.0)*r22*x9615))+(((-1.0)*gconst2*r20*x9616))+((r21*x9617)));
evalcond[1]=(((r01*x9617))+(((-1.0)*r02*x9615))+(((-1.0)*gconst2*r00*x9616)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9616))+(((-1.0)*r12*x9615))+((r11*x9617)));
evalcond[3]=(((r10*x9608))+(((-1.0)*r10*x9610*x9615))+((r11*x9613))+((r12*x9618))+((r11*x9606*x9609)));
evalcond[4]=((((-1.0)*r11*x9608*x9615))+((r10*x9619))+((r10*x9609))+(((-1.0)*r12*sj3*x9616))+((r11*x9610)));
evalcond[5]=(((cj2*sj1))+((r22*x9618))+(((-1.0)*r20*x9610*x9615))+((r20*x9608))+((r21*x9613))+x9612+((r21*x9606*x9609)));
evalcond[6]=(((r01*x9613))+((r00*x9608))+((r02*x9618))+(((-1.0)*r00*x9610*x9615))+x9607+(((-1.0)*x9614))+((r01*x9606*x9609)));
evalcond[7]=(((r20*x9619))+((r20*x9609))+((r21*x9610))+(((-1.0)*r22*sj3*x9616))+x9607+(((-1.0)*r21*x9608*x9615))+(((-1.0)*x9614)));
evalcond[8]=((((-1.0)*r01*x9608*x9615))+((r00*x9619))+((r01*x9610))+((r00*x9609))+(((-1.0)*x9612))+(((-1.0)*r02*sj3*x9616))+(((-1.0)*sj1*x9611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9620=gconst2*gconst2;
IkReal x9621=gconst1*gconst1;
IkReal x9622=(gconst2*r11);
IkReal x9623=(cj3*r02);
IkReal x9624=(gconst1*r01);
IkReal x9625=(cj3*r10);
IkReal x9626=(r10*sj3);
IkReal x9627=((1.0)*gconst1*r00);
IkReal x9628=(r01*x9621);
IkReal x9629=(r00*x9620);
CheckValue<IkReal> x9630=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*sj3*x9622*x9627))+((r11*sj3*x9628))+(((-1.0)*gconst2*x9624*x9626))+((x9626*x9629)))),-1);
if(!x9630.valid){
continue;
}
CheckValue<IkReal> x9631 = IKatan2WithCheck(IkReal((((x9622*x9623))+((gconst1*r10*x9623)))),IkReal(((((-1.0)*gconst2*x9625*x9627))+((cj3*x9622*x9624))+(((-1.0)*cj3*r11*x9629))+((x9625*x9628)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9630.value)))+(x9631.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9632=IKsin(j4);
IkReal x9633=IKcos(j4);
IkReal x9634=(sj1*sj2);
IkReal x9635=(gconst1*sj3);
IkReal x9636=(cj3*gconst1);
IkReal x9637=(cj3*gconst2);
IkReal x9638=((1.0)*cj2);
IkReal x9639=(cj1*sj2);
IkReal x9640=(gconst2*sj3);
IkReal x9641=(cj1*x9638);
IkReal x9642=((1.0)*x9633);
IkReal x9643=((1.0)*x9632);
IkReal x9644=(gconst1*x9632);
IkReal x9645=(cj3*x9632);
IkReal x9646=(x9633*x9640);
evalcond[0]=((((-1.0)*gconst2*r20*x9643))+((r21*x9644))+(((-1.0)*r22*x9642)));
evalcond[1]=((((-1.0)*gconst2*r00*x9643))+((r01*x9644))+(((-1.0)*r02*x9642)));
evalcond[2]=((1.0)+(((-1.0)*r12*x9642))+((r11*x9644))+(((-1.0)*gconst2*r10*x9643)));
evalcond[3]=(((r11*x9640))+(((-1.0)*r10*x9637*x9642))+((r10*x9635))+((r11*x9633*x9636))+((r12*x9645)));
evalcond[4]=(((r10*x9636))+(((-1.0)*r11*x9635*x9642))+((r10*x9646))+(((-1.0)*r12*sj3*x9643))+((r11*x9637)));
evalcond[5]=(((r22*x9645))+((cj2*sj1))+(((-1.0)*r20*x9637*x9642))+((r20*x9635))+x9639+((r21*x9633*x9636))+((r21*x9640)));
evalcond[6]=(((r00*x9635))+((r01*x9633*x9636))+(((-1.0)*r00*x9637*x9642))+((r02*x9645))+(((-1.0)*x9641))+((r01*x9640))+x9634);
evalcond[7]=((((-1.0)*r22*sj3*x9643))+((r20*x9636))+((r21*x9637))+(((-1.0)*x9641))+(((-1.0)*r21*x9635*x9642))+x9634+((r20*x9646)));
evalcond[8]=((((-1.0)*r01*x9635*x9642))+((r00*x9636))+((r01*x9637))+(((-1.0)*x9639))+((r00*x9646))+(((-1.0)*r02*sj3*x9643))+(((-1.0)*sj1*x9638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9647=((1.0)*gconst2);
CheckValue<IkReal> x9648=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9647)))),-1);
if(!x9648.valid){
continue;
}
CheckValue<IkReal> x9649 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9647))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9648.value)))+(x9649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9650=IKsin(j4);
IkReal x9651=IKcos(j4);
IkReal x9652=(sj1*sj2);
IkReal x9653=(gconst1*sj3);
IkReal x9654=(cj3*gconst1);
IkReal x9655=(cj3*gconst2);
IkReal x9656=((1.0)*cj2);
IkReal x9657=(cj1*sj2);
IkReal x9658=(gconst2*sj3);
IkReal x9659=(cj1*x9656);
IkReal x9660=((1.0)*x9651);
IkReal x9661=((1.0)*x9650);
IkReal x9662=(gconst1*x9650);
IkReal x9663=(cj3*x9650);
IkReal x9664=(x9651*x9658);
evalcond[0]=((((-1.0)*gconst2*r20*x9661))+((r21*x9662))+(((-1.0)*r22*x9660)));
evalcond[1]=(((r01*x9662))+(((-1.0)*gconst2*r00*x9661))+(((-1.0)*r02*x9660)));
evalcond[2]=((1.0)+((r11*x9662))+(((-1.0)*r12*x9660))+(((-1.0)*gconst2*r10*x9661)));
evalcond[3]=(((r11*x9658))+((r12*x9663))+((r11*x9651*x9654))+(((-1.0)*r10*x9655*x9660))+((r10*x9653)));
evalcond[4]=((((-1.0)*r11*x9653*x9660))+((r11*x9655))+((r10*x9664))+((r10*x9654))+(((-1.0)*r12*sj3*x9661)));
evalcond[5]=(((cj2*sj1))+((r21*x9658))+((r20*x9653))+(((-1.0)*r20*x9655*x9660))+x9657+((r22*x9663))+((r21*x9651*x9654)));
evalcond[6]=(((r01*x9658))+((r00*x9653))+(((-1.0)*r00*x9655*x9660))+x9652+((r02*x9663))+((r01*x9651*x9654))+(((-1.0)*x9659)));
evalcond[7]=(((r21*x9655))+(((-1.0)*r21*x9653*x9660))+((r20*x9654))+((r20*x9664))+x9652+(((-1.0)*r22*sj3*x9661))+(((-1.0)*x9659)));
evalcond[8]=((((-1.0)*r01*x9653*x9660))+(((-1.0)*r02*sj3*x9661))+((r00*x9664))+((r01*x9655))+((r00*x9654))+(((-1.0)*x9657))+(((-1.0)*sj1*x9656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9665=((-1.0)*r20);
IkReal x9666=x8928;
CheckValue<IkReal> x9668 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9665),IKFAST_ATAN2_MAGTHRESH);
if(!x9668.valid){
continue;
}
IkReal x9667=((-1.0)*(x9668.value));
sj5=gconst1;
cj5=gconst2;
j5=x9667;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9667;
IkReal gconst1=(r21*x9666);
IkReal gconst2=(x9665*x9666);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9669=((-1.0)*r20);
IkReal x9670=x8928;
CheckValue<IkReal> x9672 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9669),IKFAST_ATAN2_MAGTHRESH);
if(!x9672.valid){
continue;
}
IkReal x9671=((-1.0)*(x9672.value));
sj5=gconst1;
cj5=gconst2;
j5=x9671;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9671;
IkReal gconst1=(r21*x9670);
IkReal gconst2=(x9669*x9670);
CheckValue<IkReal> x9680=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9680.valid){
continue;
}
IkReal x9673=x9680.value;
IkReal x9674=(sj3*x9673);
IkReal x9675=(r11*x9674);
IkReal x9676=(r00*x9674);
IkReal x9677=(r01*x9674);
IkReal x9678=(r10*x9674);
IkReal x9679=(r20*r21*x9674);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9676*(r20*r20)))+((r10*r20*r21*x9677))+((r01*x9675*(r21*r21)))+((r00*r20*r21*x9675))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9681=gconst2*gconst2;
IkReal x9682=gconst1*gconst1;
IkReal x9683=((1.0)*cj3);
IkReal x9684=((1.0)*sj3);
IkReal x9685=(r11*sj3);
IkReal x9686=(r10*sj3);
IkReal x9687=(gconst1*gconst2*r00);
IkReal x9688=(gconst1*gconst2*r01);
IkReal x9689=(r00*x9681);
IkReal x9690=(r01*x9682);
CheckValue<IkReal> x9691 = IKatan2WithCheck(IkReal((((gconst1*r02*x9686))+((gconst2*r02*x9685)))),IkReal(((((-1.0)*r11*x9684*x9689))+((x9685*x9688))+((x9686*x9690))+(((-1.0)*r10*x9684*x9687)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9691.valid){
continue;
}
CheckValue<IkReal> x9692=IKPowWithIntegerCheck(IKsign((((cj3*r11*x9687))+((cj3*r10*x9688))+(((-1.0)*r11*x9683*x9690))+(((-1.0)*r10*x9683*x9689))+(((-1.0)*r02*r12*x9683)))),-1);
if(!x9692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9691.value)+(((1.5707963267949)*(x9692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9693=IKsin(j4);
IkReal x9694=IKcos(j4);
IkReal x9695=(cj2*sj1);
IkReal x9696=(cj1*sj2);
IkReal x9697=(gconst1*sj3);
IkReal x9698=(cj3*gconst1);
IkReal x9699=(sj1*sj2);
IkReal x9700=(cj3*gconst2);
IkReal x9701=(cj1*cj2);
IkReal x9702=(gconst2*sj3);
IkReal x9703=((1.0)*x9694);
IkReal x9704=((1.0)*x9693);
IkReal x9705=(gconst1*x9693);
IkReal x9706=(cj3*x9693);
IkReal x9707=(x9696+x9695);
IkReal x9708=(x9694*x9702);
evalcond[0]=((((-1.0)*r22*x9703))+((r21*x9705))+(((-1.0)*gconst2*r20*x9704)));
evalcond[1]=((((-1.0)*r02*x9703))+((r01*x9705))+(((-1.0)*gconst2*r00*x9704)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9704))+((r11*x9705))+(((-1.0)*r12*x9703)));
evalcond[3]=(((r12*x9706))+((r11*x9702))+((r11*x9694*x9698))+(((-1.0)*r10*x9700*x9703))+((r10*x9697)));
evalcond[4]=(((r10*x9708))+(((-1.0)*r12*sj3*x9704))+((r11*x9700))+(((-1.0)*r11*x9697*x9703))+((r10*x9698)));
evalcond[5]=(((r21*x9702))+((r21*x9694*x9698))+(((-1.0)*r20*x9700*x9703))+x9707+((r20*x9697))+((r22*x9706)));
evalcond[6]=((((-1.0)*x9699))+((r02*x9706))+(((-1.0)*r00*x9700*x9703))+((r01*x9702))+x9701+((r00*x9697))+((r01*x9694*x9698)));
evalcond[7]=(((r01*x9700))+(((-1.0)*r01*x9697*x9703))+((r00*x9708))+x9707+(((-1.0)*r02*sj3*x9704))+((r00*x9698)));
evalcond[8]=((((-1.0)*x9701))+((r20*x9708))+((r21*x9700))+(((-1.0)*r22*sj3*x9704))+x9699+(((-1.0)*r21*x9697*x9703))+((r20*x9698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9709=gconst2*gconst2;
IkReal x9710=gconst1*gconst1;
IkReal x9711=(gconst2*r11);
IkReal x9712=(cj3*r02);
IkReal x9713=(gconst1*r01);
IkReal x9714=(cj3*r10);
IkReal x9715=(r10*sj3);
IkReal x9716=((1.0)*gconst1*r00);
IkReal x9717=(r01*x9710);
IkReal x9718=(r00*x9709);
CheckValue<IkReal> x9719 = IKatan2WithCheck(IkReal((((x9711*x9712))+((gconst1*r10*x9712)))),IkReal((((x9714*x9717))+((cj3*x9711*x9713))+(((-1.0)*cj3*r11*x9718))+(((-1.0)*gconst2*x9714*x9716)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9719.valid){
continue;
}
CheckValue<IkReal> x9720=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst2*x9713*x9715))+((x9715*x9718))+((r11*sj3*x9717))+(((-1.0)*sj3*x9711*x9716)))),-1);
if(!x9720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9719.value)+(((1.5707963267949)*(x9720.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9721=IKsin(j4);
IkReal x9722=IKcos(j4);
IkReal x9723=(cj2*sj1);
IkReal x9724=(cj1*sj2);
IkReal x9725=(gconst1*sj3);
IkReal x9726=(cj3*gconst1);
IkReal x9727=(sj1*sj2);
IkReal x9728=(cj3*gconst2);
IkReal x9729=(cj1*cj2);
IkReal x9730=(gconst2*sj3);
IkReal x9731=((1.0)*x9722);
IkReal x9732=((1.0)*x9721);
IkReal x9733=(gconst1*x9721);
IkReal x9734=(cj3*x9721);
IkReal x9735=(x9724+x9723);
IkReal x9736=(x9722*x9730);
evalcond[0]=((((-1.0)*r22*x9731))+((r21*x9733))+(((-1.0)*gconst2*r20*x9732)));
evalcond[1]=((((-1.0)*r02*x9731))+(((-1.0)*gconst2*r00*x9732))+((r01*x9733)));
evalcond[2]=((-1.0)+((r11*x9733))+(((-1.0)*r12*x9731))+(((-1.0)*gconst2*r10*x9732)));
evalcond[3]=((((-1.0)*r10*x9728*x9731))+((r11*x9730))+((r11*x9722*x9726))+((r12*x9734))+((r10*x9725)));
evalcond[4]=(((r11*x9728))+(((-1.0)*r12*sj3*x9732))+(((-1.0)*r11*x9725*x9731))+((r10*x9726))+((r10*x9736)));
evalcond[5]=(((r21*x9722*x9726))+x9735+((r20*x9725))+(((-1.0)*r20*x9728*x9731))+((r21*x9730))+((r22*x9734)));
evalcond[6]=((((-1.0)*r00*x9728*x9731))+((r02*x9734))+x9729+((r01*x9722*x9726))+(((-1.0)*x9727))+((r00*x9725))+((r01*x9730)));
evalcond[7]=(((r01*x9728))+(((-1.0)*r01*x9725*x9731))+(((-1.0)*r02*sj3*x9732))+x9735+((r00*x9726))+((r00*x9736)));
evalcond[8]=(((r20*x9736))+x9727+((r20*x9726))+(((-1.0)*r22*sj3*x9732))+(((-1.0)*r21*x9725*x9731))+((r21*x9728))+(((-1.0)*x9729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9737 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9737.valid){
continue;
}
CheckValue<IkReal> x9738=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9737.value)+(((1.5707963267949)*(x9738.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9739=IKsin(j4);
IkReal x9740=IKcos(j4);
IkReal x9741=(cj2*sj1);
IkReal x9742=(cj1*sj2);
IkReal x9743=(gconst1*sj3);
IkReal x9744=(cj3*gconst1);
IkReal x9745=(sj1*sj2);
IkReal x9746=(cj3*gconst2);
IkReal x9747=(cj1*cj2);
IkReal x9748=(gconst2*sj3);
IkReal x9749=((1.0)*x9740);
IkReal x9750=((1.0)*x9739);
IkReal x9751=(gconst1*x9739);
IkReal x9752=(cj3*x9739);
IkReal x9753=(x9741+x9742);
IkReal x9754=(x9740*x9748);
evalcond[0]=(((r21*x9751))+(((-1.0)*r22*x9749))+(((-1.0)*gconst2*r20*x9750)));
evalcond[1]=(((r01*x9751))+(((-1.0)*r02*x9749))+(((-1.0)*gconst2*r00*x9750)));
evalcond[2]=((-1.0)+((r11*x9751))+(((-1.0)*gconst2*r10*x9750))+(((-1.0)*r12*x9749)));
evalcond[3]=(((r11*x9748))+(((-1.0)*r10*x9746*x9749))+((r10*x9743))+((r11*x9740*x9744))+((r12*x9752)));
evalcond[4]=(((r10*x9754))+((r11*x9746))+((r10*x9744))+(((-1.0)*r11*x9743*x9749))+(((-1.0)*r12*sj3*x9750)));
evalcond[5]=((((-1.0)*r20*x9746*x9749))+((r21*x9740*x9744))+((r21*x9748))+((r22*x9752))+x9753+((r20*x9743)));
evalcond[6]=((((-1.0)*r00*x9746*x9749))+((r01*x9740*x9744))+(((-1.0)*x9745))+x9747+((r02*x9752))+((r01*x9748))+((r00*x9743)));
evalcond[7]=(((r00*x9754))+x9753+(((-1.0)*r01*x9743*x9749))+((r01*x9746))+((r00*x9744))+(((-1.0)*r02*sj3*x9750)));
evalcond[8]=(((r21*x9746))+(((-1.0)*r21*x9743*x9749))+(((-1.0)*x9747))+x9745+((r20*x9744))+(((-1.0)*r22*sj3*x9750))+((r20*x9754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9755=((-1.0)*r20);
IkReal x9756=x8928;
CheckValue<IkReal> x9758 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9755),IKFAST_ATAN2_MAGTHRESH);
if(!x9758.valid){
continue;
}
IkReal x9757=((-1.0)*(x9758.value));
sj5=gconst1;
cj5=gconst2;
j5=x9757;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9757;
IkReal gconst1=(r21*x9756);
IkReal gconst2=(x9755*x9756);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9759=((-1.0)*r20);
IkReal x9760=x8928;
CheckValue<IkReal> x9762 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9759),IKFAST_ATAN2_MAGTHRESH);
if(!x9762.valid){
continue;
}
IkReal x9761=((-1.0)*(x9762.value));
sj5=gconst1;
cj5=gconst2;
j5=x9761;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9761;
IkReal gconst1=(r21*x9760);
IkReal gconst2=(x9759*x9760);
CheckValue<IkReal> x9770=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9770.valid){
continue;
}
IkReal x9763=x9770.value;
IkReal x9764=(sj3*x9763);
IkReal x9765=(r11*x9764);
IkReal x9766=(r00*x9764);
IkReal x9767=(r01*x9764);
IkReal x9768=(r10*x9764);
IkReal x9769=(r20*r21*x9764);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9765))+((r10*x9766*(r20*r20)))+((r10*r20*r21*x9767))+((r01*x9765*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9771=gconst1*gconst1;
IkReal x9772=gconst2*gconst2;
IkReal x9773=((1.0)*cj3);
IkReal x9774=(gconst2*r10);
IkReal x9775=(r01*sj3);
IkReal x9776=(gconst1*r00*sj3);
IkReal x9777=(gconst1*gconst2*r11);
IkReal x9778=(r10*x9772);
IkReal x9779=(r11*x9771);
CheckValue<IkReal> x9780=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9773*x9779))+(((-1.0)*r00*x9773*x9778))+(((-1.0)*r02*r12*x9773))+((cj3*gconst1*r01*x9774))+((cj3*r00*x9777)))),-1);
if(!x9780.valid){
continue;
}
CheckValue<IkReal> x9781 = IKatan2WithCheck(IkReal((((r12*x9776))+((gconst2*r12*x9775)))),IkReal((((r00*sj3*x9779))+(((-1.0)*x9774*x9776))+(((-1.0)*x9775*x9778))+((x9775*x9777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9780.value)))+(x9781.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9782=IKsin(j4);
IkReal x9783=IKcos(j4);
IkReal x9784=(sj1*sj2);
IkReal x9785=(gconst1*sj3);
IkReal x9786=(cj3*gconst1);
IkReal x9787=(cj3*gconst2);
IkReal x9788=((1.0)*cj2);
IkReal x9789=(cj1*sj2);
IkReal x9790=(gconst2*sj3);
IkReal x9791=(cj1*x9788);
IkReal x9792=((1.0)*x9783);
IkReal x9793=((1.0)*x9782);
IkReal x9794=(gconst1*x9782);
IkReal x9795=(cj3*x9782);
IkReal x9796=(x9783*x9790);
evalcond[0]=(((r21*x9794))+(((-1.0)*gconst2*r20*x9793))+(((-1.0)*r22*x9792)));
evalcond[1]=(((r11*x9794))+(((-1.0)*gconst2*r10*x9793))+(((-1.0)*r12*x9792)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9792))+(((-1.0)*gconst2*r00*x9793))+((r01*x9794)));
evalcond[3]=(((r00*x9785))+((r02*x9795))+(((-1.0)*r00*x9787*x9792))+((r01*x9783*x9786))+((r01*x9790)));
evalcond[4]=(((r00*x9786))+((r01*x9787))+(((-1.0)*r02*sj3*x9793))+((r00*x9796))+(((-1.0)*r01*x9785*x9792)));
evalcond[5]=(((cj2*sj1))+((r21*x9783*x9786))+x9789+(((-1.0)*r20*x9787*x9792))+((r21*x9790))+((r20*x9785))+((r22*x9795)));
evalcond[6]=(((r11*x9790))+((r12*x9795))+(((-1.0)*x9791))+x9784+((r10*x9785))+(((-1.0)*r10*x9787*x9792))+((r11*x9783*x9786)));
evalcond[7]=(((r21*x9787))+(((-1.0)*r21*x9785*x9792))+((r20*x9796))+(((-1.0)*x9791))+x9784+((r20*x9786))+(((-1.0)*r22*sj3*x9793)));
evalcond[8]=(((r10*x9796))+(((-1.0)*r12*sj3*x9793))+(((-1.0)*sj1*x9788))+((r10*x9786))+((r11*x9787))+(((-1.0)*x9789))+(((-1.0)*r11*x9785*x9792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9797=gconst2*gconst2;
IkReal x9798=gconst1*gconst1;
IkReal x9799=(gconst1*r00);
IkReal x9800=(r11*sj3);
IkReal x9801=((1.0)*gconst2);
IkReal x9802=(cj3*r12);
IkReal x9803=(cj3*r11);
IkReal x9804=(gconst2*r01);
IkReal x9805=(cj3*r10);
IkReal x9806=(r10*sj3);
CheckValue<IkReal> x9807 = IKatan2WithCheck(IkReal((((x9799*x9802))+((x9802*x9804)))),IkReal((((r00*x9798*x9803))+((gconst1*x9803*x9804))+(((-1.0)*x9799*x9801*x9805))+(((-1.0)*r01*x9797*x9805)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9807.valid){
continue;
}
CheckValue<IkReal> x9808=IKPowWithIntegerCheck(IKsign((((r00*x9797*x9806))+((r02*r12*sj3))+(((-1.0)*x9799*x9800*x9801))+(((-1.0)*gconst1*r01*x9801*x9806))+((r01*x9798*x9800)))),-1);
if(!x9808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9807.value)+(((1.5707963267949)*(x9808.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9809=IKsin(j4);
IkReal x9810=IKcos(j4);
IkReal x9811=(sj1*sj2);
IkReal x9812=(gconst1*sj3);
IkReal x9813=(cj3*gconst1);
IkReal x9814=(cj3*gconst2);
IkReal x9815=((1.0)*cj2);
IkReal x9816=(cj1*sj2);
IkReal x9817=(gconst2*sj3);
IkReal x9818=(cj1*x9815);
IkReal x9819=((1.0)*x9810);
IkReal x9820=((1.0)*x9809);
IkReal x9821=(gconst1*x9809);
IkReal x9822=(cj3*x9809);
IkReal x9823=(x9810*x9817);
evalcond[0]=((((-1.0)*r22*x9819))+(((-1.0)*gconst2*r20*x9820))+((r21*x9821)));
evalcond[1]=(((r11*x9821))+(((-1.0)*gconst2*r10*x9820))+(((-1.0)*r12*x9819)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9820))+(((-1.0)*r02*x9819))+((r01*x9821)));
evalcond[3]=(((r01*x9810*x9813))+(((-1.0)*r00*x9814*x9819))+((r02*x9822))+((r00*x9812))+((r01*x9817)));
evalcond[4]=((((-1.0)*r01*x9812*x9819))+((r00*x9823))+(((-1.0)*r02*sj3*x9820))+((r00*x9813))+((r01*x9814)));
evalcond[5]=(((cj2*sj1))+((r21*x9817))+(((-1.0)*r20*x9814*x9819))+((r22*x9822))+((r21*x9810*x9813))+x9816+((r20*x9812)));
evalcond[6]=((((-1.0)*x9818))+(((-1.0)*r10*x9814*x9819))+((r11*x9810*x9813))+((r11*x9817))+((r12*x9822))+x9811+((r10*x9812)));
evalcond[7]=(((r20*x9823))+((r21*x9814))+(((-1.0)*x9818))+(((-1.0)*r21*x9812*x9819))+(((-1.0)*r22*sj3*x9820))+x9811+((r20*x9813)));
evalcond[8]=((((-1.0)*x9816))+((r11*x9814))+(((-1.0)*r11*x9812*x9819))+(((-1.0)*sj1*x9815))+(((-1.0)*r12*sj3*x9820))+((r10*x9823))+((r10*x9813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9824=((1.0)*gconst2);
CheckValue<IkReal> x9825=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9824)))),-1);
if(!x9825.valid){
continue;
}
CheckValue<IkReal> x9826 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9825.value)))+(x9826.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9827=IKsin(j4);
IkReal x9828=IKcos(j4);
IkReal x9829=(sj1*sj2);
IkReal x9830=(gconst1*sj3);
IkReal x9831=(cj3*gconst1);
IkReal x9832=(cj3*gconst2);
IkReal x9833=((1.0)*cj2);
IkReal x9834=(cj1*sj2);
IkReal x9835=(gconst2*sj3);
IkReal x9836=(cj1*x9833);
IkReal x9837=((1.0)*x9828);
IkReal x9838=((1.0)*x9827);
IkReal x9839=(gconst1*x9827);
IkReal x9840=(cj3*x9827);
IkReal x9841=(x9828*x9835);
evalcond[0]=(((r21*x9839))+(((-1.0)*r22*x9837))+(((-1.0)*gconst2*r20*x9838)));
evalcond[1]=(((r11*x9839))+(((-1.0)*gconst2*r10*x9838))+(((-1.0)*r12*x9837)));
evalcond[2]=((-1.0)+((r01*x9839))+(((-1.0)*r02*x9837))+(((-1.0)*gconst2*r00*x9838)));
evalcond[3]=(((r00*x9830))+((r02*x9840))+((r01*x9835))+((r01*x9828*x9831))+(((-1.0)*r00*x9832*x9837)));
evalcond[4]=((((-1.0)*r02*sj3*x9838))+((r00*x9831))+((r01*x9832))+(((-1.0)*r01*x9830*x9837))+((r00*x9841)));
evalcond[5]=(((cj2*sj1))+((r21*x9835))+(((-1.0)*r20*x9832*x9837))+((r21*x9828*x9831))+((r20*x9830))+x9834+((r22*x9840)));
evalcond[6]=((((-1.0)*x9836))+((r11*x9828*x9831))+((r11*x9835))+((r10*x9830))+(((-1.0)*r10*x9832*x9837))+((r12*x9840))+x9829);
evalcond[7]=((((-1.0)*x9836))+((r21*x9832))+((r20*x9841))+(((-1.0)*r22*sj3*x9838))+((r20*x9831))+x9829+(((-1.0)*r21*x9830*x9837)));
evalcond[8]=(((r11*x9832))+((r10*x9841))+((r10*x9831))+(((-1.0)*r11*x9830*x9837))+(((-1.0)*x9834))+(((-1.0)*sj1*x9833))+(((-1.0)*r12*sj3*x9838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9842=((-1.0)*r20);
IkReal x9843=x8928;
CheckValue<IkReal> x9845 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9842),IKFAST_ATAN2_MAGTHRESH);
if(!x9845.valid){
continue;
}
IkReal x9844=((-1.0)*(x9845.value));
sj5=gconst1;
cj5=gconst2;
j5=x9844;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9844;
IkReal gconst1=(r21*x9843);
IkReal gconst2=(x9842*x9843);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9846=((-1.0)*r20);
IkReal x9847=x8928;
CheckValue<IkReal> x9849 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9846),IKFAST_ATAN2_MAGTHRESH);
if(!x9849.valid){
continue;
}
IkReal x9848=((-1.0)*(x9849.value));
sj5=gconst1;
cj5=gconst2;
j5=x9848;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9848;
IkReal gconst1=(r21*x9847);
IkReal gconst2=(x9846*x9847);
CheckValue<IkReal> x9857=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9857.valid){
continue;
}
IkReal x9850=x9857.value;
IkReal x9851=(sj3*x9850);
IkReal x9852=(r11*x9851);
IkReal x9853=(r00*x9851);
IkReal x9854=(r01*x9851);
IkReal x9855=(r10*x9851);
IkReal x9856=(r20*r21*x9851);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9852*(r21*r21)))+((r00*r20*r21*x9852))+((r10*r20*r21*x9854))+((r10*x9853*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9858=gconst1*gconst1;
IkReal x9859=gconst2*gconst2;
IkReal x9860=((1.0)*cj3);
IkReal x9861=(gconst2*r10);
IkReal x9862=(r01*sj3);
IkReal x9863=(gconst1*r00*sj3);
IkReal x9864=(gconst1*gconst2*r11);
IkReal x9865=(r10*x9859);
IkReal x9866=(r11*x9858);
CheckValue<IkReal> x9867=IKPowWithIntegerCheck(IKsign((((cj3*gconst1*r01*x9861))+((cj3*r00*x9864))+(((-1.0)*r02*r12*x9860))+(((-1.0)*r01*x9860*x9866))+(((-1.0)*r00*x9860*x9865)))),-1);
if(!x9867.valid){
continue;
}
CheckValue<IkReal> x9868 = IKatan2WithCheck(IkReal((((r12*x9863))+((gconst2*r12*x9862)))),IkReal(((((-1.0)*x9862*x9865))+((r00*sj3*x9866))+(((-1.0)*x9861*x9863))+((x9862*x9864)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9867.value)))+(x9868.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9869=IKsin(j4);
IkReal x9870=IKcos(j4);
IkReal x9871=(cj2*sj1);
IkReal x9872=(cj1*sj2);
IkReal x9873=(gconst1*sj3);
IkReal x9874=(cj3*gconst1);
IkReal x9875=(sj1*sj2);
IkReal x9876=(cj3*gconst2);
IkReal x9877=(cj1*cj2);
IkReal x9878=(gconst2*sj3);
IkReal x9879=((1.0)*x9870);
IkReal x9880=((1.0)*x9869);
IkReal x9881=(gconst1*x9869);
IkReal x9882=(cj3*x9869);
IkReal x9883=(x9872+x9871);
IkReal x9884=(x9870*x9878);
evalcond[0]=(((r21*x9881))+(((-1.0)*gconst2*r20*x9880))+(((-1.0)*r22*x9879)));
evalcond[1]=(((r11*x9881))+(((-1.0)*gconst2*r10*x9880))+(((-1.0)*r12*x9879)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9880))+((r01*x9881))+(((-1.0)*r02*x9879)));
evalcond[3]=((((-1.0)*r00*x9876*x9879))+((r00*x9873))+((r01*x9878))+((r01*x9870*x9874))+((r02*x9882)));
evalcond[4]=((((-1.0)*r01*x9873*x9879))+((r00*x9884))+(((-1.0)*r02*sj3*x9880))+((r00*x9874))+((r01*x9876)));
evalcond[5]=(((r21*x9870*x9874))+((r21*x9878))+((r20*x9873))+(((-1.0)*r20*x9876*x9879))+((r22*x9882))+x9883);
evalcond[6]=(((r12*x9882))+(((-1.0)*x9875))+((r10*x9873))+(((-1.0)*r10*x9876*x9879))+((r11*x9878))+x9877+((r11*x9870*x9874)));
evalcond[7]=(((r10*x9874))+(((-1.0)*r11*x9873*x9879))+(((-1.0)*r12*sj3*x9880))+((r10*x9884))+((r11*x9876))+x9883);
evalcond[8]=((((-1.0)*r22*sj3*x9880))+((r20*x9884))+(((-1.0)*x9877))+((r21*x9876))+((r20*x9874))+(((-1.0)*r21*x9873*x9879))+x9875);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9885=gconst2*gconst2;
IkReal x9886=gconst1*gconst1;
IkReal x9887=(gconst1*r00);
IkReal x9888=(r11*sj3);
IkReal x9889=((1.0)*gconst2);
IkReal x9890=(cj3*r12);
IkReal x9891=(cj3*r11);
IkReal x9892=(gconst2*r01);
IkReal x9893=(cj3*r10);
IkReal x9894=(r10*sj3);
CheckValue<IkReal> x9895 = IKatan2WithCheck(IkReal((((x9890*x9892))+((x9887*x9890)))),IkReal((((gconst1*x9891*x9892))+(((-1.0)*x9887*x9889*x9893))+(((-1.0)*r01*x9885*x9893))+((r00*x9886*x9891)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9895.valid){
continue;
}
CheckValue<IkReal> x9896=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r01*x9886*x9888))+(((-1.0)*x9887*x9888*x9889))+((r00*x9885*x9894))+(((-1.0)*gconst1*r01*x9889*x9894)))),-1);
if(!x9896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9895.value)+(((1.5707963267949)*(x9896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9897=IKsin(j4);
IkReal x9898=IKcos(j4);
IkReal x9899=(cj2*sj1);
IkReal x9900=(cj1*sj2);
IkReal x9901=(gconst1*sj3);
IkReal x9902=(cj3*gconst1);
IkReal x9903=(sj1*sj2);
IkReal x9904=(cj3*gconst2);
IkReal x9905=(cj1*cj2);
IkReal x9906=(gconst2*sj3);
IkReal x9907=((1.0)*x9898);
IkReal x9908=((1.0)*x9897);
IkReal x9909=(gconst1*x9897);
IkReal x9910=(cj3*x9897);
IkReal x9911=(x9900+x9899);
IkReal x9912=(x9898*x9906);
evalcond[0]=((((-1.0)*gconst2*r20*x9908))+(((-1.0)*r22*x9907))+((r21*x9909)));
evalcond[1]=((((-1.0)*r12*x9907))+((r11*x9909))+(((-1.0)*gconst2*r10*x9908)));
evalcond[2]=((1.0)+((r01*x9909))+(((-1.0)*r02*x9907))+(((-1.0)*gconst2*r00*x9908)));
evalcond[3]=((((-1.0)*r00*x9904*x9907))+((r01*x9898*x9902))+((r00*x9901))+((r01*x9906))+((r02*x9910)));
evalcond[4]=(((r00*x9902))+((r01*x9904))+((r00*x9912))+(((-1.0)*r02*sj3*x9908))+(((-1.0)*r01*x9901*x9907)));
evalcond[5]=(((r20*x9901))+(((-1.0)*r20*x9904*x9907))+((r22*x9910))+((r21*x9906))+x9911+((r21*x9898*x9902)));
evalcond[6]=(((r12*x9910))+(((-1.0)*x9903))+((r11*x9906))+(((-1.0)*r10*x9904*x9907))+x9905+((r10*x9901))+((r11*x9898*x9902)));
evalcond[7]=(((r11*x9904))+(((-1.0)*r11*x9901*x9907))+x9911+((r10*x9902))+(((-1.0)*r12*sj3*x9908))+((r10*x9912)));
evalcond[8]=(((r20*x9912))+(((-1.0)*r22*sj3*x9908))+((r20*x9902))+(((-1.0)*x9905))+(((-1.0)*r21*x9901*x9907))+((r21*x9904))+x9903);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9913 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9913.valid){
continue;
}
CheckValue<IkReal> x9914=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9913.value)+(((1.5707963267949)*(x9914.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9915=IKsin(j4);
IkReal x9916=IKcos(j4);
IkReal x9917=(cj2*sj1);
IkReal x9918=(cj1*sj2);
IkReal x9919=(gconst1*sj3);
IkReal x9920=(cj3*gconst1);
IkReal x9921=(sj1*sj2);
IkReal x9922=(cj3*gconst2);
IkReal x9923=(cj1*cj2);
IkReal x9924=(gconst2*sj3);
IkReal x9925=((1.0)*x9916);
IkReal x9926=((1.0)*x9915);
IkReal x9927=(gconst1*x9915);
IkReal x9928=(cj3*x9915);
IkReal x9929=(x9917+x9918);
IkReal x9930=(x9916*x9924);
evalcond[0]=((((-1.0)*gconst2*r20*x9926))+(((-1.0)*r22*x9925))+((r21*x9927)));
evalcond[1]=((((-1.0)*gconst2*r10*x9926))+(((-1.0)*r12*x9925))+((r11*x9927)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9925))+(((-1.0)*gconst2*r00*x9926))+((r01*x9927)));
evalcond[3]=(((r02*x9928))+((r00*x9919))+((r01*x9916*x9920))+(((-1.0)*r00*x9922*x9925))+((r01*x9924)));
evalcond[4]=(((r00*x9930))+(((-1.0)*r01*x9919*x9925))+((r01*x9922))+(((-1.0)*r02*sj3*x9926))+((r00*x9920)));
evalcond[5]=(((r20*x9919))+(((-1.0)*r20*x9922*x9925))+((r21*x9916*x9920))+((r21*x9924))+x9929+((r22*x9928)));
evalcond[6]=((((-1.0)*r10*x9922*x9925))+(((-1.0)*x9921))+((r11*x9924))+((r12*x9928))+((r11*x9916*x9920))+x9923+((r10*x9919)));
evalcond[7]=(((r10*x9920))+((r10*x9930))+((r11*x9922))+(((-1.0)*r12*sj3*x9926))+x9929+(((-1.0)*r11*x9919*x9925)));
evalcond[8]=((((-1.0)*r21*x9919*x9925))+((r20*x9920))+(((-1.0)*x9923))+((r21*x9922))+x9921+((r20*x9930))+(((-1.0)*r22*sj3*x9926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9931=((-1.0)*r20);
IkReal x9932=((-1.0)*px);
CheckValue<IkReal> x9934 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9931),IKFAST_ATAN2_MAGTHRESH);
if(!x9934.valid){
continue;
}
IkReal x9933=((-1.0)*(x9934.value));
sj5=gconst1;
cj5=gconst2;
j5=x9933;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9932);
rxp1_1=(px*r21);
rxp1_2=(r11*x9932);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9933;
IkReal gconst1=r21;
IkReal gconst2=x9931;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9935=((-1.0)*r20);
IkReal x9936=((-1.0)*px);
CheckValue<IkReal> x9938 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9935),IKFAST_ATAN2_MAGTHRESH);
if(!x9938.valid){
continue;
}
IkReal x9937=((-1.0)*(x9938.value));
sj5=gconst1;
cj5=gconst2;
j5=x9937;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9936);
rxp1_1=(px*r21);
rxp1_2=(r11*x9936);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9937;
IkReal gconst1=r21;
IkReal gconst2=x9935;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9939=((-1.0)*r20);
IkReal x9940=((-1.0)*px);
CheckValue<IkReal> x9942 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9939),IKFAST_ATAN2_MAGTHRESH);
if(!x9942.valid){
continue;
}
IkReal x9941=((-1.0)*(x9942.value));
sj5=gconst1;
cj5=gconst2;
j5=x9941;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9940);
rxp1_1=(px*r21);
rxp1_2=(r11*x9940);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9941;
IkReal gconst1=r21;
IkReal gconst2=x9939;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9943=((-1.0)*r20);
IkReal x9944=((-1.0)*px);
CheckValue<IkReal> x9946 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9943),IKFAST_ATAN2_MAGTHRESH);
if(!x9946.valid){
continue;
}
IkReal x9945=((-1.0)*(x9946.value));
sj5=gconst1;
cj5=gconst2;
j5=x9945;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9944);
rxp1_1=(px*r21);
rxp1_2=(r11*x9944);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9945;
IkReal gconst1=r21;
IkReal gconst2=x9943;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9947=((-1.0)*r20);
IkReal x9948=((-1.0)*px);
CheckValue<IkReal> x9950 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9947),IKFAST_ATAN2_MAGTHRESH);
if(!x9950.valid){
continue;
}
IkReal x9949=((-1.0)*(x9950.value));
sj5=gconst1;
cj5=gconst2;
j5=x9949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9948);
rxp1_1=(px*r21);
rxp1_2=(r11*x9948);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9949;
IkReal gconst1=r21;
IkReal gconst2=x9947;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9951=((-1.0)*r20);
IkReal x9952=((-1.0)*px);
CheckValue<IkReal> x9954 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9951),IKFAST_ATAN2_MAGTHRESH);
if(!x9954.valid){
continue;
}
IkReal x9953=((-1.0)*(x9954.value));
sj5=gconst1;
cj5=gconst2;
j5=x9953;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9952);
rxp1_1=(px*r21);
rxp1_2=(r11*x9952);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9953;
IkReal gconst1=r21;
IkReal gconst2=x9951;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9957=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9957.valid){
continue;
}
IkReal x9955=x9957.value;
IkReal x9956=(sj0*x9955);
cj4array[0]=(((cj1*sj2*x9956))+((cj2*sj1*x9956)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9958=IKsin(j4);
IkReal x9959=IKcos(j4);
IkReal x9960=(gconst1*x9958);
IkReal x9961=((1.0)*x9959);
IkReal x9962=((1.0)*gconst2*x9958);
evalcond[0]=((-1.0)*r02*x9958);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9961)));
evalcond[2]=(((r21*x9960))+(((-1.0)*r20*x9962)));
evalcond[3]=((((-1.0)*r10*x9962))+((r11*x9960)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst2*r20*x9959))+(((-1.0)*gconst1*r21*x9961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9964=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9964.valid){
continue;
}
IkReal x9963=x9964.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9963))+((cj1*cj2*x9963)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9965=IKsin(j4);
IkReal x9966=IKcos(j4);
IkReal x9967=(gconst2*r10);
IkReal x9968=((1.0)*sj0);
IkReal x9969=((1.0)*x9965);
IkReal x9970=(gconst1*x9965);
IkReal x9971=((1.0)*x9966);
evalcond[0]=((-1.0)*r02*x9965);
evalcond[1]=((((-1.0)*r02*x9971))+(((-1.0)*x9968)));
evalcond[2]=((((-1.0)*gconst2*r20*x9969))+((r21*x9970)));
evalcond[3]=((((-1.0)*x9967*x9969))+((r11*x9970)));
evalcond[4]=((((-1.0)*cj2*sj1*x9968))+(((-1.0)*cj1*sj2*x9968))+((x9966*x9967))+(((-1.0)*gconst1*r11*x9971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9972=IKPowWithIntegerCheck(r02,-1);
if(!x9972.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9972.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9973=IKsin(j4);
IkReal x9974=IKcos(j4);
IkReal x9975=(gconst2*r10);
IkReal x9976=((1.0)*sj0);
IkReal x9977=(gconst1*r11);
IkReal x9978=(gconst1*r21);
IkReal x9979=(gconst2*r20);
IkReal x9980=((1.0)*x9973);
IkReal x9981=((1.0)*x9974);
evalcond[0]=((-1.0)*r02*x9973);
evalcond[1]=(((x9973*x9978))+(((-1.0)*x9979*x9980)));
evalcond[2]=(((x9973*x9977))+(((-1.0)*x9975*x9980)));
evalcond[3]=(((x9974*x9979))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9978*x9981)));
evalcond[4]=(((x9974*x9975))+(((-1.0)*x9977*x9981))+(((-1.0)*cj2*sj1*x9976))+(((-1.0)*cj1*sj2*x9976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9982=((-1.0)*r20);
IkReal x9983=((-1.0)*px);
CheckValue<IkReal> x9985 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9982),IKFAST_ATAN2_MAGTHRESH);
if(!x9985.valid){
continue;
}
IkReal x9984=((-1.0)*(x9985.value));
sj5=gconst1;
cj5=gconst2;
j5=x9984;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9983);
rxp1_1=(px*r21);
rxp1_2=(r11*x9983);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9984;
IkReal gconst1=r21;
IkReal gconst2=x9982;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9986=((-1.0)*r20);
IkReal x9987=((-1.0)*px);
CheckValue<IkReal> x9989 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9986),IKFAST_ATAN2_MAGTHRESH);
if(!x9989.valid){
continue;
}
IkReal x9988=((-1.0)*(x9989.value));
sj5=gconst1;
cj5=gconst2;
j5=x9988;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9987);
rxp1_1=(px*r21);
rxp1_2=(r11*x9987);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9988;
IkReal gconst1=r21;
IkReal gconst2=x9986;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9990=((-1.0)*r20);
IkReal x9991=((-1.0)*px);
CheckValue<IkReal> x9993 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9990),IKFAST_ATAN2_MAGTHRESH);
if(!x9993.valid){
continue;
}
IkReal x9992=((-1.0)*(x9993.value));
sj5=gconst1;
cj5=gconst2;
j5=x9992;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9991);
rxp1_1=(px*r21);
rxp1_2=(r11*x9991);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9992;
IkReal gconst1=r21;
IkReal gconst2=x9990;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9996=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9996.valid){
continue;
}
IkReal x9994=x9996.value;
IkReal x9995=(sj0*x9994);
cj4array[0]=(((cj1*sj2*x9995))+((cj2*sj1*x9995)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9997=IKsin(j4);
IkReal x9998=IKcos(j4);
IkReal x9999=((1.0)*gconst2);
IkReal x10000=(gconst1*r21);
evalcond[0]=(r02*x9997);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9998)));
evalcond[2]=((((-1.0)*r20*x9997*x9999))+((x10000*x9997)));
evalcond[3]=(((gconst1*r11*x9997))+(((-1.0)*r10*x9997*x9999)));
evalcond[4]=((((-1.0)*r20*x9998*x9999))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10000*x9998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10002=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x10002.valid){
continue;
}
IkReal x10001=x10002.value;
cj4array[0]=((((-1.0)*sj1*sj2*x10001))+((cj1*cj2*x10001)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10003=IKsin(j4);
IkReal x10004=IKcos(j4);
IkReal x10005=((1.0)*sj0);
IkReal x10006=(gconst1*x10003);
IkReal x10007=((1.0)*x10004);
IkReal x10008=((1.0)*gconst2*x10003);
evalcond[0]=(r02*x10003);
evalcond[1]=((((-1.0)*r02*x10007))+(((-1.0)*x10005)));
evalcond[2]=((((-1.0)*r20*x10008))+((r21*x10006)));
evalcond[3]=(((r11*x10006))+(((-1.0)*r10*x10008)));
evalcond[4]=((((-1.0)*cj2*sj1*x10005))+(((-1.0)*cj1*sj2*x10005))+((gconst1*r11*x10004))+(((-1.0)*gconst2*r10*x10007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10009=IKPowWithIntegerCheck(r02,-1);
if(!x10009.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10009.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10010=IKsin(j4);
IkReal x10011=IKcos(j4);
IkReal x10012=(gconst1*r21);
IkReal x10013=((1.0)*sj0);
IkReal x10014=(gconst1*r11);
IkReal x10015=((1.0)*gconst2*r10);
IkReal x10016=((1.0)*gconst2*r20);
evalcond[0]=(r02*x10010);
evalcond[1]=(((x10010*x10012))+(((-1.0)*x10010*x10016)));
evalcond[2]=(((x10010*x10014))+(((-1.0)*x10010*x10015)));
evalcond[3]=(((x10011*x10012))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10011*x10016)));
evalcond[4]=((((-1.0)*cj2*sj1*x10013))+((x10011*x10014))+(((-1.0)*cj1*sj2*x10013))+(((-1.0)*x10011*x10015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10018=IKPowWithIntegerCheck(r02,-1);
if(!x10018.valid){
continue;
}
IkReal x10017=x10018.value;
CheckValue<IkReal> x10019=IKPowWithIntegerCheck(cj3,-1);
if(!x10019.valid){
continue;
}
if( IKabs((x10017*(x10019.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x10017)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10017*(x10019.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x10017))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10017*(x10019.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x10017));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10020=IKsin(j4);
IkReal x10021=IKcos(j4);
IkReal x10022=(gconst2*r10);
IkReal x10023=(gconst1*r11);
IkReal x10024=(sj1*sj2);
IkReal x10025=(gconst2*r20);
IkReal x10026=(cj2*sj1);
IkReal x10027=((1.0)*sj0);
IkReal x10028=(gconst1*r20);
IkReal x10029=(gconst2*r11);
IkReal x10030=(gconst1*r21);
IkReal x10031=((1.0)*cj0);
IkReal x10032=(gconst1*r10);
IkReal x10033=(cj1*sj2);
IkReal x10034=(gconst2*r21);
IkReal x10035=(sj3*x10021);
IkReal x10036=((1.0)*cj1*cj2);
IkReal x10037=(cj3*x10021);
IkReal x10038=(r02*x10020);
IkReal x10039=((1.0)*x10020);
evalcond[0]=((((-1.0)*r02*x10021))+(((-1.0)*x10027)));
evalcond[1]=(((x10020*x10030))+(((-1.0)*x10025*x10039)));
evalcond[2]=(cj0+((x10020*x10023))+(((-1.0)*x10022*x10039)));
evalcond[3]=(((cj0*x10024))+((cj3*x10038))+(((-1.0)*cj1*cj2*x10031)));
evalcond[4]=((((-1.0)*sj3*x10038))+(((-1.0)*x10031*x10033))+(((-1.0)*x10026*x10031)));
evalcond[5]=(((sj3*x10034))+((sj3*x10028))+x10033+x10026+((x10030*x10037))+(((-1.0)*x10025*x10037)));
evalcond[6]=((((-1.0)*x10030*x10035))+x10024+((cj3*x10034))+(((-1.0)*x10036))+((cj3*x10028))+((x10025*x10035)));
evalcond[7]=(((sj0*x10024))+((sj3*x10032))+((sj3*x10029))+(((-1.0)*cj1*cj2*x10027))+((x10023*x10037))+(((-1.0)*x10022*x10037)));
evalcond[8]=((((-1.0)*x10023*x10035))+((cj3*x10032))+((x10022*x10035))+((cj3*x10029))+(((-1.0)*x10027*x10033))+(((-1.0)*x10026*x10027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10040=((1.0)*sj3);
IkReal x10041=((1.0)*gconst2);
CheckValue<IkReal> x10042=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x10041))),-1);
if(!x10042.valid){
continue;
}
CheckValue<IkReal> x10043=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x10041))),-1);
if(!x10043.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10042.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10043.value)*(((((-1.0)*gconst2*r21*x10040))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10040)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10042.value)))+IKsqr(((x10043.value)*(((((-1.0)*gconst2*r21*x10040))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10040))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10042.value)), ((x10043.value)*(((((-1.0)*gconst2*r21*x10040))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10040))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10044=IKsin(j4);
IkReal x10045=IKcos(j4);
IkReal x10046=(gconst2*r10);
IkReal x10047=(gconst1*r11);
IkReal x10048=(sj1*sj2);
IkReal x10049=(gconst2*r20);
IkReal x10050=(cj2*sj1);
IkReal x10051=((1.0)*sj0);
IkReal x10052=(gconst1*r20);
IkReal x10053=(gconst2*r11);
IkReal x10054=(gconst1*r21);
IkReal x10055=((1.0)*cj0);
IkReal x10056=(gconst1*r10);
IkReal x10057=(cj1*sj2);
IkReal x10058=(gconst2*r21);
IkReal x10059=(sj3*x10045);
IkReal x10060=((1.0)*cj1*cj2);
IkReal x10061=(cj3*x10045);
IkReal x10062=(r02*x10044);
IkReal x10063=((1.0)*x10044);
evalcond[0]=((((-1.0)*r02*x10045))+(((-1.0)*x10051)));
evalcond[1]=(((x10044*x10054))+(((-1.0)*x10049*x10063)));
evalcond[2]=(cj0+((x10044*x10047))+(((-1.0)*x10046*x10063)));
evalcond[3]=((((-1.0)*cj1*cj2*x10055))+((cj3*x10062))+((cj0*x10048)));
evalcond[4]=((((-1.0)*x10050*x10055))+(((-1.0)*sj3*x10062))+(((-1.0)*x10055*x10057)));
evalcond[5]=(((sj3*x10058))+((sj3*x10052))+(((-1.0)*x10049*x10061))+((x10054*x10061))+x10057+x10050);
evalcond[6]=((((-1.0)*x10054*x10059))+(((-1.0)*x10060))+x10048+((x10049*x10059))+((cj3*x10058))+((cj3*x10052)));
evalcond[7]=(((sj3*x10056))+((sj3*x10053))+((sj0*x10048))+(((-1.0)*x10046*x10061))+(((-1.0)*cj1*cj2*x10051))+((x10047*x10061)));
evalcond[8]=((((-1.0)*x10047*x10059))+(((-1.0)*x10050*x10051))+(((-1.0)*x10051*x10057))+((cj3*x10056))+((cj3*x10053))+((x10046*x10059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10064=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10064.valid){
continue;
}
CheckValue<IkReal> x10065=IKPowWithIntegerCheck(r02,-1);
if(!x10065.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10064.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10065.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10064.value)))+IKsqr(((-1.0)*sj0*(x10065.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10064.value)), ((-1.0)*sj0*(x10065.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10066=IKsin(j4);
IkReal x10067=IKcos(j4);
IkReal x10068=(gconst2*r10);
IkReal x10069=(gconst1*r11);
IkReal x10070=(sj1*sj2);
IkReal x10071=(gconst2*r20);
IkReal x10072=(cj2*sj1);
IkReal x10073=((1.0)*sj0);
IkReal x10074=(gconst1*r20);
IkReal x10075=(gconst2*r11);
IkReal x10076=(gconst1*r21);
IkReal x10077=((1.0)*cj0);
IkReal x10078=(gconst1*r10);
IkReal x10079=(cj1*sj2);
IkReal x10080=(gconst2*r21);
IkReal x10081=(sj3*x10067);
IkReal x10082=((1.0)*cj1*cj2);
IkReal x10083=(cj3*x10067);
IkReal x10084=(r02*x10066);
IkReal x10085=((1.0)*x10066);
evalcond[0]=((((-1.0)*x10073))+(((-1.0)*r02*x10067)));
evalcond[1]=(((x10066*x10076))+(((-1.0)*x10071*x10085)));
evalcond[2]=(cj0+(((-1.0)*x10068*x10085))+((x10066*x10069)));
evalcond[3]=(((cj3*x10084))+(((-1.0)*cj1*cj2*x10077))+((cj0*x10070)));
evalcond[4]=((((-1.0)*x10072*x10077))+(((-1.0)*x10077*x10079))+(((-1.0)*sj3*x10084)));
evalcond[5]=(((sj3*x10074))+((sj3*x10080))+x10072+x10079+((x10076*x10083))+(((-1.0)*x10071*x10083)));
evalcond[6]=(((cj3*x10080))+((x10071*x10081))+(((-1.0)*x10082))+x10070+(((-1.0)*x10076*x10081))+((cj3*x10074)));
evalcond[7]=(((x10069*x10083))+((sj3*x10078))+((sj3*x10075))+(((-1.0)*cj1*cj2*x10073))+((sj0*x10070))+(((-1.0)*x10068*x10083)));
evalcond[8]=((((-1.0)*x10072*x10073))+(((-1.0)*x10069*x10081))+((cj3*x10075))+((cj3*x10078))+((x10068*x10081))+(((-1.0)*x10073*x10079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10086=gconst1*gconst1;
IkReal x10087=r21*r21;
IkReal x10088=gconst2*gconst2;
IkReal x10089=r20*r20;
IkReal x10090=(gconst2*r20);
IkReal x10091=(cj1*cj2);
IkReal x10092=(sj1*sj2);
IkReal x10093=(gconst1*r21);
IkReal x10094=(cj3*gconst2);
IkReal x10095=(cj3*r20);
CheckValue<IkReal> x10096=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x10088*x10089))+((sj3*x10086*x10087))+(((-2.0)*sj3*x10090*x10093)))),-1);
if(!x10096.valid){
continue;
}
CheckValue<IkReal> x10097 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x10091))+((r22*x10092))+((r21*r22*x10094))+((gconst1*r22*x10095)))),IkReal(((((-1.0)*r21*x10088*x10095))+((x10090*x10091))+(((-1.0)*x10091*x10093))+(((-1.0)*gconst1*x10089*x10094))+((x10092*x10093))+(((-1.0)*x10090*x10092))+((r21*x10086*x10095))+((gconst1*x10087*x10094)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10096.value)))+(x10097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10098=IKsin(j4);
IkReal x10099=IKcos(j4);
IkReal x10100=(cj3*gconst1);
IkReal x10101=(gconst1*r01);
IkReal x10102=(gconst1*r11);
IkReal x10103=(sj1*sj2);
IkReal x10104=(cj3*gconst2);
IkReal x10105=(gconst1*sj3);
IkReal x10106=(gconst2*sj3);
IkReal x10107=((1.0)*sj0);
IkReal x10108=(cj1*sj2);
IkReal x10109=((1.0)*x10099);
IkReal x10110=((1.0)*x10098);
IkReal x10111=((1.0)*cj1*cj2);
IkReal x10112=(cj3*x10098);
IkReal x10113=((1.0)*cj2*sj1);
IkReal x10114=(x10099*x10106);
evalcond[0]=((((-1.0)*gconst2*r20*x10110))+(((-1.0)*r22*x10109))+((gconst1*r21*x10098)));
evalcond[1]=((((-1.0)*r12*x10109))+cj0+((x10098*x10102))+(((-1.0)*gconst2*r10*x10110)));
evalcond[2]=(((x10098*x10101))+(((-1.0)*r02*x10109))+(((-1.0)*gconst2*r00*x10110))+(((-1.0)*x10107)));
evalcond[3]=(((r21*x10106))+((cj2*sj1))+((r20*x10105))+x10108+((r21*x10099*x10100))+((r22*x10112))+(((-1.0)*r20*x10104*x10109)));
evalcond[4]=(((r21*x10104))+((r20*x10114))+((r20*x10100))+(((-1.0)*r21*x10105*x10109))+x10103+(((-1.0)*r22*sj3*x10110))+(((-1.0)*x10111)));
evalcond[5]=(((cj0*x10103))+((r01*x10106))+((r00*x10105))+(((-1.0)*cj0*x10111))+(((-1.0)*r00*x10104*x10109))+((r02*x10112))+((r01*x10099*x10100)));
evalcond[6]=((((-1.0)*cj1*cj2*x10107))+((sj0*x10103))+((r11*x10106))+((r12*x10112))+((r10*x10105))+(((-1.0)*r10*x10104*x10109))+((r11*x10099*x10100)));
evalcond[7]=(((r01*x10104))+((r00*x10100))+((r00*x10114))+(((-1.0)*cj0*x10113))+(((-1.0)*sj3*x10101*x10109))+(((-1.0)*r02*sj3*x10110))+(((-1.0)*cj0*x10108)));
evalcond[8]=((((-1.0)*sj3*x10102*x10109))+(((-1.0)*r12*sj3*x10110))+(((-1.0)*cj2*sj1*x10107))+((r11*x10104))+((r10*x10100))+((r10*x10114))+(((-1.0)*x10107*x10108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10115=((1.0)*gconst2);
CheckValue<IkReal> x10116 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10115))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10116.valid){
continue;
}
CheckValue<IkReal> x10117=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10115)))),-1);
if(!x10117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10116.value)+(((1.5707963267949)*(x10117.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10118=IKsin(j4);
IkReal x10119=IKcos(j4);
IkReal x10120=(cj3*gconst1);
IkReal x10121=(gconst1*r01);
IkReal x10122=(gconst1*r11);
IkReal x10123=(sj1*sj2);
IkReal x10124=(cj3*gconst2);
IkReal x10125=(gconst1*sj3);
IkReal x10126=(gconst2*sj3);
IkReal x10127=((1.0)*sj0);
IkReal x10128=(cj1*sj2);
IkReal x10129=((1.0)*x10119);
IkReal x10130=((1.0)*x10118);
IkReal x10131=((1.0)*cj1*cj2);
IkReal x10132=(cj3*x10118);
IkReal x10133=((1.0)*cj2*sj1);
IkReal x10134=(x10119*x10126);
evalcond[0]=(((gconst1*r21*x10118))+(((-1.0)*gconst2*r20*x10130))+(((-1.0)*r22*x10129)));
evalcond[1]=(((x10118*x10122))+cj0+(((-1.0)*gconst2*r10*x10130))+(((-1.0)*r12*x10129)));
evalcond[2]=(((x10118*x10121))+(((-1.0)*gconst2*r00*x10130))+(((-1.0)*r02*x10129))+(((-1.0)*x10127)));
evalcond[3]=(((cj2*sj1))+((r20*x10125))+((r21*x10126))+((r21*x10119*x10120))+(((-1.0)*r20*x10124*x10129))+x10128+((r22*x10132)));
evalcond[4]=(((r20*x10134))+(((-1.0)*r21*x10125*x10129))+((r20*x10120))+((r21*x10124))+(((-1.0)*r22*sj3*x10130))+x10123+(((-1.0)*x10131)));
evalcond[5]=(((r02*x10132))+((r00*x10125))+((cj0*x10123))+((r01*x10126))+(((-1.0)*cj0*x10131))+(((-1.0)*r00*x10124*x10129))+((r01*x10119*x10120)));
evalcond[6]=(((r11*x10119*x10120))+(((-1.0)*r10*x10124*x10129))+((r10*x10125))+((r12*x10132))+((sj0*x10123))+(((-1.0)*cj1*cj2*x10127))+((r11*x10126)));
evalcond[7]=((((-1.0)*cj0*x10128))+((r00*x10120))+((r00*x10134))+((r01*x10124))+(((-1.0)*cj0*x10133))+(((-1.0)*sj3*x10121*x10129))+(((-1.0)*r02*sj3*x10130)));
evalcond[8]=((((-1.0)*x10127*x10128))+(((-1.0)*sj3*x10122*x10129))+((r10*x10120))+((r10*x10134))+(((-1.0)*cj2*sj1*x10127))+(((-1.0)*r12*sj3*x10130))+((r11*x10124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10135=((1.0)*gconst2);
CheckValue<IkReal> x10136=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10135)))),-1);
if(!x10136.valid){
continue;
}
CheckValue<IkReal> x10137 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x10135))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10136.value)))+(x10137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10138=IKsin(j4);
IkReal x10139=IKcos(j4);
IkReal x10140=(cj3*gconst1);
IkReal x10141=(gconst1*r01);
IkReal x10142=(gconst1*r11);
IkReal x10143=(sj1*sj2);
IkReal x10144=(cj3*gconst2);
IkReal x10145=(gconst1*sj3);
IkReal x10146=(gconst2*sj3);
IkReal x10147=((1.0)*sj0);
IkReal x10148=(cj1*sj2);
IkReal x10149=((1.0)*x10139);
IkReal x10150=((1.0)*x10138);
IkReal x10151=((1.0)*cj1*cj2);
IkReal x10152=(cj3*x10138);
IkReal x10153=((1.0)*cj2*sj1);
IkReal x10154=(x10139*x10146);
evalcond[0]=(((gconst1*r21*x10138))+(((-1.0)*gconst2*r20*x10150))+(((-1.0)*r22*x10149)));
evalcond[1]=(cj0+((x10138*x10142))+(((-1.0)*r12*x10149))+(((-1.0)*gconst2*r10*x10150)));
evalcond[2]=((((-1.0)*gconst2*r00*x10150))+((x10138*x10141))+(((-1.0)*r02*x10149))+(((-1.0)*x10147)));
evalcond[3]=(((cj2*sj1))+((r21*x10146))+x10148+((r22*x10152))+((r21*x10139*x10140))+(((-1.0)*r20*x10144*x10149))+((r20*x10145)));
evalcond[4]=((((-1.0)*r21*x10145*x10149))+((r21*x10144))+x10143+(((-1.0)*r22*sj3*x10150))+(((-1.0)*x10151))+((r20*x10154))+((r20*x10140)));
evalcond[5]=(((r02*x10152))+(((-1.0)*r00*x10144*x10149))+((r00*x10145))+((cj0*x10143))+((r01*x10146))+(((-1.0)*cj0*x10151))+((r01*x10139*x10140)));
evalcond[6]=(((r12*x10152))+((sj0*x10143))+(((-1.0)*cj1*cj2*x10147))+(((-1.0)*r10*x10144*x10149))+((r10*x10145))+((r11*x10139*x10140))+((r11*x10146)));
evalcond[7]=((((-1.0)*r02*sj3*x10150))+(((-1.0)*cj0*x10148))+(((-1.0)*sj3*x10141*x10149))+((r00*x10140))+((r00*x10154))+((r01*x10144))+(((-1.0)*cj0*x10153)));
evalcond[8]=(((r10*x10140))+((r10*x10154))+(((-1.0)*sj3*x10142*x10149))+(((-1.0)*cj2*sj1*x10147))+(((-1.0)*x10147*x10148))+((r11*x10144))+(((-1.0)*r12*sj3*x10150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10155=((-1.0)*r21);
IkReal x10157 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10157)==0){
continue;
}
IkReal x10156=pow(x10157,-0.5);
CheckValue<IkReal> x10158 = IKatan2WithCheck(IkReal(x10155),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10158.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10158.value))));
IkReal gconst4=(x10155*x10156);
IkReal gconst5=((1.0)*r20*x10156);
CheckValue<IkReal> x10159 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10159.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10159.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10160=((-1.0)*r21);
CheckValue<IkReal> x10163 = IKatan2WithCheck(IkReal(x10160),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10163.valid){
continue;
}
IkReal x10161=((1.0)*(x10163.value));
IkReal x10162=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10161)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10161)));
IkReal gconst4=(x10160*x10162);
IkReal gconst5=((1.0)*r20*x10162);
IkReal x10164=r22*r22;
IkReal x10165=((1.0)*x10164);
CheckValue<IkReal> x10169=IKPowWithIntegerCheck(((-1.0)+x10164),-1);
if(!x10169.valid){
continue;
}
IkReal x10166=x10169.value;
if((((1.0)+(((-1.0)*x10165)))) < -0.00001)
continue;
IkReal x10167=IKsqrt(((1.0)+(((-1.0)*x10165))));
IkReal x10168=(cj0*x10166*x10167);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x10168+(((-1.0)*x10165*x10168))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10170=((-1.0)*r21);
CheckValue<IkReal> x10173 = IKatan2WithCheck(IkReal(x10170),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10173.valid){
continue;
}
IkReal x10171=((1.0)*(x10173.value));
IkReal x10172=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10171)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10171)));
IkReal gconst4=(x10170*x10172);
IkReal gconst5=((1.0)*r20*x10172);
IkReal x10174=r22*r22;
IkReal x10175=((1.0)*x10174);
CheckValue<IkReal> x10179=IKPowWithIntegerCheck(((-1.0)+x10174),-1);
if(!x10179.valid){
continue;
}
IkReal x10176=x10179.value;
if((((1.0)+(((-1.0)*x10175)))) < -0.00001)
continue;
IkReal x10177=IKsqrt(((1.0)+(((-1.0)*x10175))));
IkReal x10178=(sj0*x10176*x10177);
j4eval[0]=((IKabs((x10178+(((-1.0)*x10175*x10178)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10180=((-1.0)*r21);
CheckValue<IkReal> x10183 = IKatan2WithCheck(IkReal(x10180),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10183.valid){
continue;
}
IkReal x10181=((1.0)*(x10183.value));
IkReal x10182=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10181)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10181)));
IkReal gconst4=(x10180*x10182);
IkReal gconst5=((1.0)*r20*x10182);
IkReal x10184=r22*r22;
IkReal x10185=(r12*sj0);
IkReal x10186=(cj0*r02);
CheckValue<IkReal> x10190=IKPowWithIntegerCheck(((-1.0)+x10184),-1);
if(!x10190.valid){
continue;
}
IkReal x10187=x10190.value;
if((((1.0)+(((-1.0)*x10184)))) < -0.00001)
continue;
IkReal x10188=IKsqrt(((1.0)+(((-1.0)*x10184))));
IkReal x10189=(r22*x10187*x10188);
j4eval[0]=0;
j4eval[1]=((IKabs((((x10185*x10189))+((x10186*x10189)))))+(IKabs(((((-1.0)*x10185))+(((-1.0)*x10186))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10191=((-1.0)*r21);
CheckValue<IkReal> x10194 = IKatan2WithCheck(IkReal(x10191),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10194.valid){
continue;
}
IkReal x10192=((1.0)*(x10194.value));
IkReal x10193=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10192)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10192)));
IkReal gconst4=(x10191*x10193);
IkReal gconst5=((1.0)*r20*x10193);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10195=((-1.0)*r21);
CheckValue<IkReal> x10198 = IKatan2WithCheck(IkReal(x10195),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10198.valid){
continue;
}
IkReal x10196=((1.0)*(x10198.value));
IkReal x10197=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10196)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10196)));
IkReal gconst4=(x10195*x10197);
IkReal gconst5=((1.0)*r20*x10197);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10199=((-1.0)*r21);
CheckValue<IkReal> x10202 = IKatan2WithCheck(IkReal(x10199),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10202.valid){
continue;
}
IkReal x10200=((1.0)*(x10202.value));
IkReal x10201=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10200)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10200)));
IkReal gconst4=(x10199*x10201);
IkReal gconst5=((1.0)*r20*x10201);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10203=((-1.0)*r21);
CheckValue<IkReal> x10206 = IKatan2WithCheck(IkReal(x10203),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10206.valid){
continue;
}
IkReal x10204=((1.0)*(x10206.value));
IkReal x10205=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10204)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10204)));
IkReal gconst4=(x10203*x10205);
IkReal gconst5=((1.0)*r20*x10205);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10207=((-1.0)*r21);
CheckValue<IkReal> x10210 = IKatan2WithCheck(IkReal(x10207),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10210.valid){
continue;
}
IkReal x10208=((1.0)*(x10210.value));
IkReal x10209=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10208)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10208)));
IkReal gconst4=(x10207*x10209);
IkReal gconst5=((1.0)*r20*x10209);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10211=((-1.0)*r21);
CheckValue<IkReal> x10214 = IKatan2WithCheck(IkReal(x10211),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10214.valid){
continue;
}
IkReal x10212=((1.0)*(x10214.value));
IkReal x10213=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10212)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10212)));
IkReal gconst4=(x10211*x10213);
IkReal gconst5=((1.0)*r20*x10213);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10215=(gconst5*r10);
IkReal x10216=(gconst4*r11);
CheckValue<IkReal> x10217 = IKatan2WithCheck(IkReal((x10215+(((-1.0)*x10216)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10217.valid){
continue;
}
CheckValue<IkReal> x10218=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10215*x10215)+(x10216*x10216)+(((-2.0)*x10215*x10216)))),-1);
if(!x10218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10217.value)+(((1.5707963267949)*(x10218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10219=IKsin(j4);
IkReal x10220=IKcos(j4);
IkReal x10221=(gconst4*r11);
IkReal x10222=((1.0)*cj1);
IkReal x10223=(gconst5*r10);
IkReal x10224=(gconst4*r01);
IkReal x10225=(gconst5*r00);
IkReal x10226=(gconst4*r21);
IkReal x10227=(gconst5*r20);
IkReal x10228=((1.0)*x10220);
IkReal x10229=((1.0)*x10219);
evalcond[0]=((((-1.0)*x10227*x10229))+((x10219*x10226))+(((-1.0)*r22*x10228)));
evalcond[1]=((((-1.0)*r02*x10228))+(((-1.0)*x10225*x10229))+((x10219*x10224)));
evalcond[2]=((((-1.0)*x10221*x10228))+(((-1.0)*r12*x10229))+((x10220*x10223)));
evalcond[3]=((1.0)+((x10219*x10221))+(((-1.0)*r12*x10228))+(((-1.0)*x10223*x10229)));
evalcond[4]=((((-1.0)*x10226*x10228))+(((-1.0)*cj2*x10222))+((sj1*sj2))+(((-1.0)*r22*x10229))+((x10220*x10227)));
evalcond[5]=((((-1.0)*x10224*x10228))+(((-1.0)*r02*x10229))+(((-1.0)*cj2*sj1))+((x10220*x10225))+(((-1.0)*sj2*x10222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10230=((1.0)*gconst5);
CheckValue<IkReal> x10231 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10230)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10231.valid){
continue;
}
CheckValue<IkReal> x10232=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10230)))),-1);
if(!x10232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10231.value)+(((1.5707963267949)*(x10232.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10233=IKsin(j4);
IkReal x10234=IKcos(j4);
IkReal x10235=(gconst4*r11);
IkReal x10236=((1.0)*cj1);
IkReal x10237=(gconst5*r10);
IkReal x10238=(gconst4*r01);
IkReal x10239=(gconst5*r00);
IkReal x10240=(gconst4*r21);
IkReal x10241=(gconst5*r20);
IkReal x10242=((1.0)*x10234);
IkReal x10243=((1.0)*x10233);
evalcond[0]=((((-1.0)*x10241*x10243))+(((-1.0)*r22*x10242))+((x10233*x10240)));
evalcond[1]=((((-1.0)*x10239*x10243))+((x10233*x10238))+(((-1.0)*r02*x10242)));
evalcond[2]=((((-1.0)*x10235*x10242))+((x10234*x10237))+(((-1.0)*r12*x10243)));
evalcond[3]=((1.0)+(((-1.0)*x10237*x10243))+(((-1.0)*r12*x10242))+((x10233*x10235)));
evalcond[4]=((((-1.0)*x10240*x10242))+((x10234*x10241))+((sj1*sj2))+(((-1.0)*cj2*x10236))+(((-1.0)*r22*x10243)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x10234*x10239))+(((-1.0)*x10238*x10242))+(((-1.0)*sj2*x10236))+(((-1.0)*r02*x10243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10244 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10244.valid){
continue;
}
CheckValue<IkReal> x10245=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10244.value)+(((1.5707963267949)*(x10245.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10246=IKsin(j4);
IkReal x10247=IKcos(j4);
IkReal x10248=(gconst4*r11);
IkReal x10249=((1.0)*cj1);
IkReal x10250=(gconst5*r10);
IkReal x10251=(gconst4*r01);
IkReal x10252=(gconst5*r00);
IkReal x10253=(gconst4*r21);
IkReal x10254=(gconst5*r20);
IkReal x10255=((1.0)*x10247);
IkReal x10256=((1.0)*x10246);
evalcond[0]=((((-1.0)*x10254*x10256))+((x10246*x10253))+(((-1.0)*r22*x10255)));
evalcond[1]=((((-1.0)*r02*x10255))+(((-1.0)*x10252*x10256))+((x10246*x10251)));
evalcond[2]=(((x10247*x10250))+(((-1.0)*x10248*x10255))+(((-1.0)*r12*x10256)));
evalcond[3]=((1.0)+((x10246*x10248))+(((-1.0)*r12*x10255))+(((-1.0)*x10250*x10256)));
evalcond[4]=(((x10247*x10254))+(((-1.0)*x10253*x10255))+(((-1.0)*cj2*x10249))+((sj1*sj2))+(((-1.0)*r22*x10256)));
evalcond[5]=((((-1.0)*x10251*x10255))+((x10247*x10252))+(((-1.0)*r02*x10256))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10257=((-1.0)*r21);
CheckValue<IkReal> x10260 = IKatan2WithCheck(IkReal(x10257),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10260.valid){
continue;
}
IkReal x10258=((1.0)*(x10260.value));
IkReal x10259=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10258)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10258)));
IkReal gconst4=(x10257*x10259);
IkReal gconst5=((1.0)*r20*x10259);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10261=((-1.0)*r21);
CheckValue<IkReal> x10264 = IKatan2WithCheck(IkReal(x10261),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10264.valid){
continue;
}
IkReal x10262=((1.0)*(x10264.value));
IkReal x10263=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10262)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10262)));
IkReal gconst4=(x10261*x10263);
IkReal gconst5=((1.0)*r20*x10263);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10265=((-1.0)*r21);
CheckValue<IkReal> x10268 = IKatan2WithCheck(IkReal(x10265),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10268.valid){
continue;
}
IkReal x10266=((1.0)*(x10268.value));
IkReal x10267=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10266)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10266)));
IkReal gconst4=(x10265*x10267);
IkReal gconst5=((1.0)*r20*x10267);
IkReal x10269=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10273=IKPowWithIntegerCheck(x10269,-1);
if(!x10273.valid){
continue;
}
IkReal x10270=x10273.value;
IkReal x10271=((1.0)*x10270);
IkReal x10272=((((-1.0)*x10271*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10270))+(((-1.0)*x10271*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x10272;
j4eval[1]=r12;
j4eval[2]=x10269;
j4eval[3]=IKsign(x10272);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10274=(gconst5*r10);
IkReal x10275=(gconst4*r11);
CheckValue<IkReal> x10276 = IKatan2WithCheck(IkReal((x10275+(((-1.0)*x10274)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10276.valid){
continue;
}
CheckValue<IkReal> x10277=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10274*x10274)))+(((-1.0)*(r12*r12)))+(((2.0)*x10274*x10275))+(((-1.0)*(x10275*x10275))))),-1);
if(!x10277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10276.value)+(((1.5707963267949)*(x10277.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10278=IKcos(j4);
IkReal x10279=IKsin(j4);
IkReal x10280=(gconst4*r11);
IkReal x10281=(gconst5*r10);
IkReal x10282=((1.0)*cj1);
IkReal x10283=(gconst5*r00);
IkReal x10284=(gconst5*r20);
IkReal x10285=((1.0)*x10278);
IkReal x10286=(gconst4*x10278);
IkReal x10287=((1.0)*x10279);
IkReal x10288=(gconst4*x10279);
evalcond[0]=(((r12*x10279))+(((-1.0)*x10281*x10285))+((x10278*x10280)));
evalcond[1]=((((-1.0)*r22*x10285))+(((-1.0)*x10284*x10287))+((r21*x10288)));
evalcond[2]=(((r01*x10288))+(((-1.0)*x10283*x10287))+(((-1.0)*r02*x10285)));
evalcond[3]=((1.0)+(((-1.0)*x10281*x10287))+(((-1.0)*r12*x10285))+((x10279*x10280)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj2*x10282))+(((-1.0)*x10284*x10285))+((r21*x10286))+((r22*x10279)));
evalcond[5]=(((r01*x10286))+(((-1.0)*x10283*x10285))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10282))+((r02*x10279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10289=((1.0)*gconst5);
CheckValue<IkReal> x10290 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10290.valid){
continue;
}
CheckValue<IkReal> x10291=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10289)))),-1);
if(!x10291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10290.value)+(((1.5707963267949)*(x10291.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10292=IKcos(j4);
IkReal x10293=IKsin(j4);
IkReal x10294=(gconst4*r11);
IkReal x10295=(gconst5*r10);
IkReal x10296=((1.0)*cj1);
IkReal x10297=(gconst5*r00);
IkReal x10298=(gconst5*r20);
IkReal x10299=((1.0)*x10292);
IkReal x10300=(gconst4*x10292);
IkReal x10301=((1.0)*x10293);
IkReal x10302=(gconst4*x10293);
evalcond[0]=(((r12*x10293))+((x10292*x10294))+(((-1.0)*x10295*x10299)));
evalcond[1]=((((-1.0)*x10298*x10301))+((r21*x10302))+(((-1.0)*r22*x10299)));
evalcond[2]=((((-1.0)*r02*x10299))+((r01*x10302))+(((-1.0)*x10297*x10301)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10299))+((x10293*x10294))+(((-1.0)*x10295*x10301)));
evalcond[4]=((((-1.0)*x10298*x10299))+((sj1*sj2))+((r21*x10300))+((r22*x10293))+(((-1.0)*cj2*x10296)));
evalcond[5]=((((-1.0)*sj2*x10296))+(((-1.0)*cj2*sj1))+((r01*x10300))+(((-1.0)*x10297*x10299))+((r02*x10293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10303 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10303.valid){
continue;
}
CheckValue<IkReal> x10304=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10303.value)+(((1.5707963267949)*(x10304.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10305=IKcos(j4);
IkReal x10306=IKsin(j4);
IkReal x10307=(gconst4*r11);
IkReal x10308=(gconst5*r10);
IkReal x10309=((1.0)*cj1);
IkReal x10310=(gconst5*r00);
IkReal x10311=(gconst5*r20);
IkReal x10312=((1.0)*x10305);
IkReal x10313=(gconst4*x10305);
IkReal x10314=((1.0)*x10306);
IkReal x10315=(gconst4*x10306);
evalcond[0]=(((x10305*x10307))+(((-1.0)*x10308*x10312))+((r12*x10306)));
evalcond[1]=(((r21*x10315))+(((-1.0)*x10311*x10314))+(((-1.0)*r22*x10312)));
evalcond[2]=(((r01*x10315))+(((-1.0)*x10310*x10314))+(((-1.0)*r02*x10312)));
evalcond[3]=((1.0)+((x10306*x10307))+(((-1.0)*r12*x10312))+(((-1.0)*x10308*x10314)));
evalcond[4]=((((-1.0)*cj2*x10309))+((r21*x10313))+((sj1*sj2))+(((-1.0)*x10311*x10312))+((r22*x10306)));
evalcond[5]=(((r02*x10306))+((r01*x10313))+(((-1.0)*sj2*x10309))+(((-1.0)*x10310*x10312))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10316=((-1.0)*r21);
CheckValue<IkReal> x10319 = IKatan2WithCheck(IkReal(x10316),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10319.valid){
continue;
}
IkReal x10317=((1.0)*(x10319.value));
IkReal x10318=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10317)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10317)));
IkReal gconst4=(x10316*x10318);
IkReal gconst5=((1.0)*r20*x10318);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10320=((-1.0)*r21);
CheckValue<IkReal> x10323 = IKatan2WithCheck(IkReal(x10320),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10323.valid){
continue;
}
IkReal x10321=((1.0)*(x10323.value));
IkReal x10322=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10321)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10321)));
IkReal gconst4=(x10320*x10322);
IkReal gconst5=((1.0)*r20*x10322);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10324=((-1.0)*r21);
CheckValue<IkReal> x10327 = IKatan2WithCheck(IkReal(x10324),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10327.valid){
continue;
}
IkReal x10325=((1.0)*(x10327.value));
IkReal x10326=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10325)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10325)));
IkReal gconst4=(x10324*x10326);
IkReal gconst5=((1.0)*r20*x10326);
IkReal x10328=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10332=IKPowWithIntegerCheck(x10328,-1);
if(!x10332.valid){
continue;
}
IkReal x10329=x10332.value;
IkReal x10330=((1.0)*x10329);
IkReal x10331=((((-1.0)*x10330*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10330*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10329)));
j4eval[0]=x10331;
j4eval[1]=r12;
j4eval[2]=x10328;
j4eval[3]=IKsign(x10331);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10333=(gconst5*r10);
IkReal x10334=(gconst4*r11);
CheckValue<IkReal> x10335=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10334*x10334)))+(((2.0)*x10333*x10334))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10333*x10333))))),-1);
if(!x10335.valid){
continue;
}
CheckValue<IkReal> x10336 = IKatan2WithCheck(IkReal(((((-1.0)*x10333))+x10334)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10335.value)))+(x10336.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10337=IKcos(j4);
IkReal x10338=IKsin(j4);
IkReal x10339=(gconst4*r11);
IkReal x10340=(gconst5*r10);
IkReal x10341=(gconst5*r00);
IkReal x10342=(gconst5*r20);
IkReal x10343=((1.0)*x10337);
IkReal x10344=(gconst4*x10337);
IkReal x10345=((1.0)*x10338);
IkReal x10346=(gconst4*x10338);
evalcond[0]=((((-1.0)*x10340*x10343))+((r12*x10338))+((x10337*x10339)));
evalcond[1]=((((-1.0)*x10342*x10345))+((r21*x10346))+(((-1.0)*r22*x10343)));
evalcond[2]=((((-1.0)*x10341*x10345))+((r01*x10346))+(((-1.0)*r02*x10343)));
evalcond[3]=((1.0)+(((-1.0)*x10340*x10345))+(((-1.0)*r12*x10343))+((x10338*x10339)));
evalcond[4]=(((cj2*sj1))+((r22*x10338))+(((-1.0)*x10342*x10343))+((cj1*sj2))+((r21*x10344)));
evalcond[5]=((((-1.0)*x10341*x10343))+((r02*x10338))+((r01*x10344))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10347=((1.0)*gconst5);
CheckValue<IkReal> x10348 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10347)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10348.valid){
continue;
}
CheckValue<IkReal> x10349=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10347)))),-1);
if(!x10349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10348.value)+(((1.5707963267949)*(x10349.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10350=IKcos(j4);
IkReal x10351=IKsin(j4);
IkReal x10352=(gconst4*r11);
IkReal x10353=(gconst5*r10);
IkReal x10354=(gconst5*r00);
IkReal x10355=(gconst5*r20);
IkReal x10356=((1.0)*x10350);
IkReal x10357=(gconst4*x10350);
IkReal x10358=((1.0)*x10351);
IkReal x10359=(gconst4*x10351);
evalcond[0]=(((x10350*x10352))+(((-1.0)*x10353*x10356))+((r12*x10351)));
evalcond[1]=(((r21*x10359))+(((-1.0)*r22*x10356))+(((-1.0)*x10355*x10358)));
evalcond[2]=(((r01*x10359))+(((-1.0)*x10354*x10358))+(((-1.0)*r02*x10356)));
evalcond[3]=((1.0)+((x10351*x10352))+(((-1.0)*r12*x10356))+(((-1.0)*x10353*x10358)));
evalcond[4]=(((r21*x10357))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10355*x10356))+((r22*x10351)));
evalcond[5]=(((r01*x10357))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10354*x10356))+((r02*x10351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10360 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10360.valid){
continue;
}
CheckValue<IkReal> x10361=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10360.value)+(((1.5707963267949)*(x10361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10362=IKcos(j4);
IkReal x10363=IKsin(j4);
IkReal x10364=(gconst4*r11);
IkReal x10365=(gconst5*r10);
IkReal x10366=(gconst5*r00);
IkReal x10367=(gconst5*r20);
IkReal x10368=((1.0)*x10362);
IkReal x10369=(gconst4*x10362);
IkReal x10370=((1.0)*x10363);
IkReal x10371=(gconst4*x10363);
evalcond[0]=(((x10362*x10364))+(((-1.0)*x10365*x10368))+((r12*x10363)));
evalcond[1]=((((-1.0)*x10367*x10370))+(((-1.0)*r22*x10368))+((r21*x10371)));
evalcond[2]=(((r01*x10371))+(((-1.0)*r02*x10368))+(((-1.0)*x10366*x10370)));
evalcond[3]=((1.0)+((x10363*x10364))+(((-1.0)*x10365*x10370))+(((-1.0)*r12*x10368)));
evalcond[4]=(((r22*x10363))+((cj2*sj1))+((r21*x10369))+((cj1*sj2))+(((-1.0)*x10367*x10368)));
evalcond[5]=(((r01*x10369))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10363))+(((-1.0)*x10366*x10368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10372=((-1.0)*r21);
CheckValue<IkReal> x10375 = IKatan2WithCheck(IkReal(x10372),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10375.valid){
continue;
}
IkReal x10373=((1.0)*(x10375.value));
IkReal x10374=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10373)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10373)));
IkReal gconst4=(x10372*x10374);
IkReal gconst5=((1.0)*r20*x10374);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10376=((-1.0)*r21);
CheckValue<IkReal> x10379 = IKatan2WithCheck(IkReal(x10376),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10379.valid){
continue;
}
IkReal x10377=((1.0)*(x10379.value));
IkReal x10378=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10377)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10377)));
IkReal gconst4=(x10376*x10378);
IkReal gconst5=((1.0)*r20*x10378);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10380=((-1.0)*r21);
CheckValue<IkReal> x10383 = IKatan2WithCheck(IkReal(x10380),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10383.valid){
continue;
}
IkReal x10381=((1.0)*(x10383.value));
IkReal x10382=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10381)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10381)));
IkReal gconst4=(x10380*x10382);
IkReal gconst5=((1.0)*r20*x10382);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10384=(gconst5*r10);
IkReal x10385=(gconst4*r11);
CheckValue<IkReal> x10386 = IKatan2WithCheck(IkReal(((((-1.0)*x10385))+x10384)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10386.valid){
continue;
}
CheckValue<IkReal> x10387=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10384*x10385))+(x10384*x10384)+(x10385*x10385))),-1);
if(!x10387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10386.value)+(((1.5707963267949)*(x10387.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10388=IKsin(j4);
IkReal x10389=IKcos(j4);
IkReal x10390=(gconst4*r11);
IkReal x10391=(gconst5*r10);
IkReal x10392=(gconst4*r01);
IkReal x10393=(gconst5*r00);
IkReal x10394=(gconst4*r21);
IkReal x10395=(gconst5*r20);
IkReal x10396=((1.0)*x10389);
IkReal x10397=((1.0)*x10388);
evalcond[0]=((((-1.0)*x10395*x10397))+(((-1.0)*r22*x10396))+((x10388*x10394)));
evalcond[1]=((((-1.0)*x10393*x10397))+(((-1.0)*r02*x10396))+((x10388*x10392)));
evalcond[2]=((((-1.0)*r12*x10397))+((x10389*x10391))+(((-1.0)*x10390*x10396)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10396))+(((-1.0)*x10391*x10397))+((x10388*x10390)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10389*x10395))+(((-1.0)*r22*x10397))+(((-1.0)*x10394*x10396)));
evalcond[5]=((((-1.0)*x10392*x10396))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10389*x10393))+(((-1.0)*r02*x10397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10398=((1.0)*gconst5);
CheckValue<IkReal> x10399=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10398)))),-1);
if(!x10399.valid){
continue;
}
CheckValue<IkReal> x10400 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10398))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10399.value)))+(x10400.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10401=IKsin(j4);
IkReal x10402=IKcos(j4);
IkReal x10403=(gconst4*r11);
IkReal x10404=(gconst5*r10);
IkReal x10405=(gconst4*r01);
IkReal x10406=(gconst5*r00);
IkReal x10407=(gconst4*r21);
IkReal x10408=(gconst5*r20);
IkReal x10409=((1.0)*x10402);
IkReal x10410=((1.0)*x10401);
evalcond[0]=(((x10401*x10407))+(((-1.0)*r22*x10409))+(((-1.0)*x10408*x10410)));
evalcond[1]=(((x10401*x10405))+(((-1.0)*x10406*x10410))+(((-1.0)*r02*x10409)));
evalcond[2]=((((-1.0)*r12*x10410))+((x10402*x10404))+(((-1.0)*x10403*x10409)));
evalcond[3]=((1.0)+((x10401*x10403))+(((-1.0)*r12*x10409))+(((-1.0)*x10404*x10410)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10410))+((x10402*x10408))+(((-1.0)*x10407*x10409)));
evalcond[5]=((((-1.0)*r02*x10410))+(((-1.0)*cj1*cj2))+(((-1.0)*x10405*x10409))+((sj1*sj2))+((x10402*x10406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10411 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10411.valid){
continue;
}
CheckValue<IkReal> x10412=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10411.value)+(((1.5707963267949)*(x10412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10413=IKsin(j4);
IkReal x10414=IKcos(j4);
IkReal x10415=(gconst4*r11);
IkReal x10416=(gconst5*r10);
IkReal x10417=(gconst4*r01);
IkReal x10418=(gconst5*r00);
IkReal x10419=(gconst4*r21);
IkReal x10420=(gconst5*r20);
IkReal x10421=((1.0)*x10414);
IkReal x10422=((1.0)*x10413);
evalcond[0]=((((-1.0)*x10420*x10422))+((x10413*x10419))+(((-1.0)*r22*x10421)));
evalcond[1]=(((x10413*x10417))+(((-1.0)*x10418*x10422))+(((-1.0)*r02*x10421)));
evalcond[2]=(((x10414*x10416))+(((-1.0)*r12*x10422))+(((-1.0)*x10415*x10421)));
evalcond[3]=((1.0)+((x10413*x10415))+(((-1.0)*r12*x10421))+(((-1.0)*x10416*x10422)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10419*x10421))+((cj1*sj2))+((x10414*x10420))+(((-1.0)*r22*x10422)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10414*x10418))+(((-1.0)*x10417*x10421))+(((-1.0)*r02*x10422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10423=gconst4*gconst4;
IkReal x10424=gconst5*gconst5;
IkReal x10425=(r10*r21);
IkReal x10426=((1.0)*cj3);
IkReal x10427=(r11*r21);
IkReal x10428=(r11*r20);
IkReal x10429=(r22*sj3);
IkReal x10430=(gconst4*r10);
IkReal x10431=((1.0)*sj3);
IkReal x10432=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10433=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x10424*x10426))+((x10425*x10432))+(((-1.0)*x10423*x10426*x10427))+((x10428*x10432))+(((-1.0)*r12*r22*x10426)))),-1);
if(!x10433.valid){
continue;
}
CheckValue<IkReal> x10434 = IKatan2WithCheck(IkReal((((gconst5*r11*x10429))+((x10429*x10430)))),IkReal((((sj3*x10423*x10425))+(((-1.0)*gconst5*r20*x10430*x10431))+((gconst4*gconst5*sj3*x10427))+(((-1.0)*x10424*x10428*x10431)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10433.value)))+(x10434.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10435=IKsin(j4);
IkReal x10436=IKcos(j4);
IkReal x10437=(sj1*sj2);
IkReal x10438=(gconst5*sj3);
IkReal x10439=(cj3*gconst5);
IkReal x10440=(gconst4*r11);
IkReal x10441=((1.0)*cj1);
IkReal x10442=(gconst4*r01);
IkReal x10443=(cj2*sj1);
IkReal x10444=(gconst4*r21);
IkReal x10445=(gconst4*sj3);
IkReal x10446=(cj3*gconst4);
IkReal x10447=(cj2*x10441);
IkReal x10448=((1.0)*x10436);
IkReal x10449=((1.0)*x10435);
IkReal x10450=(cj3*x10435);
IkReal x10451=(cj3*x10436);
evalcond[0]=((((-1.0)*gconst5*r20*x10449))+(((-1.0)*r22*x10448))+((x10435*x10444)));
evalcond[1]=((((-1.0)*r02*x10448))+(((-1.0)*gconst5*r00*x10449))+((x10435*x10442)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10448))+(((-1.0)*gconst5*r10*x10449))+((x10435*x10440)));
evalcond[3]=((((-1.0)*r10*x10439*x10448))+((r12*x10450))+((r11*x10438))+((x10440*x10451))+((r10*x10445)));
evalcond[4]=((((-1.0)*r12*sj3*x10449))+((r10*x10436*x10438))+((r11*x10439))+((r10*x10446))+(((-1.0)*sj3*x10440*x10448)));
evalcond[5]=(((cj1*sj2))+((r22*x10450))+((r20*x10445))+(((-1.0)*r20*x10439*x10448))+x10443+((r21*x10438))+((x10444*x10451)));
evalcond[6]=(((r01*x10438))+((x10442*x10451))+(((-1.0)*r00*x10439*x10448))+(((-1.0)*x10447))+((r00*x10445))+x10437+((r02*x10450)));
evalcond[7]=(((r20*x10436*x10438))+(((-1.0)*r22*sj3*x10449))+(((-1.0)*sj3*x10444*x10448))+(((-1.0)*x10447))+((r20*x10446))+x10437+((r21*x10439)));
evalcond[8]=((((-1.0)*x10443))+((r01*x10439))+(((-1.0)*r02*sj3*x10449))+(((-1.0)*sj3*x10442*x10448))+(((-1.0)*sj2*x10441))+((r00*x10446))+((r00*x10436*x10438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10452=((1.0)*gconst5);
CheckValue<IkReal> x10453=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10452)))),-1);
if(!x10453.valid){
continue;
}
CheckValue<IkReal> x10454 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10452)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10453.value)))+(x10454.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10455=IKsin(j4);
IkReal x10456=IKcos(j4);
IkReal x10457=(sj1*sj2);
IkReal x10458=(gconst5*sj3);
IkReal x10459=(cj3*gconst5);
IkReal x10460=(gconst4*r11);
IkReal x10461=((1.0)*cj1);
IkReal x10462=(gconst4*r01);
IkReal x10463=(cj2*sj1);
IkReal x10464=(gconst4*r21);
IkReal x10465=(gconst4*sj3);
IkReal x10466=(cj3*gconst4);
IkReal x10467=(cj2*x10461);
IkReal x10468=((1.0)*x10456);
IkReal x10469=((1.0)*x10455);
IkReal x10470=(cj3*x10455);
IkReal x10471=(cj3*x10456);
evalcond[0]=((((-1.0)*gconst5*r20*x10469))+(((-1.0)*r22*x10468))+((x10455*x10464)));
evalcond[1]=((((-1.0)*r02*x10468))+((x10455*x10462))+(((-1.0)*gconst5*r00*x10469)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10469))+((x10455*x10460))+(((-1.0)*r12*x10468)));
evalcond[3]=(((r11*x10458))+((r12*x10470))+((x10460*x10471))+(((-1.0)*r10*x10459*x10468))+((r10*x10465)));
evalcond[4]=((((-1.0)*sj3*x10460*x10468))+((r10*x10456*x10458))+((r11*x10459))+(((-1.0)*r12*sj3*x10469))+((r10*x10466)));
evalcond[5]=(((r20*x10465))+((x10464*x10471))+(((-1.0)*r20*x10459*x10468))+((cj1*sj2))+((r22*x10470))+x10463+((r21*x10458)));
evalcond[6]=((((-1.0)*r00*x10459*x10468))+((r00*x10465))+((r01*x10458))+x10457+((r02*x10470))+((x10462*x10471))+(((-1.0)*x10467)));
evalcond[7]=(((r20*x10466))+(((-1.0)*sj3*x10464*x10468))+(((-1.0)*r22*sj3*x10469))+x10457+((r21*x10459))+((r20*x10456*x10458))+(((-1.0)*x10467)));
evalcond[8]=((((-1.0)*x10463))+((r00*x10456*x10458))+(((-1.0)*sj3*x10462*x10468))+((r00*x10466))+((r01*x10459))+(((-1.0)*r02*sj3*x10469))+(((-1.0)*sj2*x10461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10472 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10472.valid){
continue;
}
CheckValue<IkReal> x10473=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10472.value)+(((1.5707963267949)*(x10473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10474=IKsin(j4);
IkReal x10475=IKcos(j4);
IkReal x10476=(sj1*sj2);
IkReal x10477=(gconst5*sj3);
IkReal x10478=(cj3*gconst5);
IkReal x10479=(gconst4*r11);
IkReal x10480=((1.0)*cj1);
IkReal x10481=(gconst4*r01);
IkReal x10482=(cj2*sj1);
IkReal x10483=(gconst4*r21);
IkReal x10484=(gconst4*sj3);
IkReal x10485=(cj3*gconst4);
IkReal x10486=(cj2*x10480);
IkReal x10487=((1.0)*x10475);
IkReal x10488=((1.0)*x10474);
IkReal x10489=(cj3*x10474);
IkReal x10490=(cj3*x10475);
evalcond[0]=(((x10474*x10483))+(((-1.0)*r22*x10487))+(((-1.0)*gconst5*r20*x10488)));
evalcond[1]=(((x10474*x10481))+(((-1.0)*r02*x10487))+(((-1.0)*gconst5*r00*x10488)));
evalcond[2]=((1.0)+((x10474*x10479))+(((-1.0)*gconst5*r10*x10488))+(((-1.0)*r12*x10487)));
evalcond[3]=(((x10479*x10490))+((r10*x10484))+((r12*x10489))+((r11*x10477))+(((-1.0)*r10*x10478*x10487)));
evalcond[4]=(((r10*x10485))+((r11*x10478))+((r10*x10475*x10477))+(((-1.0)*r12*sj3*x10488))+(((-1.0)*sj3*x10479*x10487)));
evalcond[5]=(((cj1*sj2))+((r22*x10489))+((x10483*x10490))+((r21*x10477))+x10482+((r20*x10484))+(((-1.0)*r20*x10478*x10487)));
evalcond[6]=(((r00*x10484))+((r01*x10477))+(((-1.0)*x10486))+(((-1.0)*r00*x10478*x10487))+((r02*x10489))+x10476+((x10481*x10490)));
evalcond[7]=((((-1.0)*sj3*x10483*x10487))+((r20*x10475*x10477))+(((-1.0)*r22*sj3*x10488))+(((-1.0)*x10486))+((r21*x10478))+x10476+((r20*x10485)));
evalcond[8]=(((r00*x10485))+(((-1.0)*sj2*x10480))+(((-1.0)*sj3*x10481*x10487))+((r01*x10478))+(((-1.0)*x10482))+((r00*x10475*x10477))+(((-1.0)*r02*sj3*x10488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10491=((-1.0)*r21);
CheckValue<IkReal> x10494 = IKatan2WithCheck(IkReal(x10491),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10494.valid){
continue;
}
IkReal x10492=((1.0)*(x10494.value));
IkReal x10493=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10492)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10492)));
IkReal gconst4=(x10491*x10493);
IkReal gconst5=((1.0)*r20*x10493);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10495=((-1.0)*r21);
CheckValue<IkReal> x10498 = IKatan2WithCheck(IkReal(x10495),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10498.valid){
continue;
}
IkReal x10496=((1.0)*(x10498.value));
IkReal x10497=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10496)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10496)));
IkReal gconst4=(x10495*x10497);
IkReal gconst5=((1.0)*r20*x10497);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10499=((-1.0)*r21);
CheckValue<IkReal> x10502 = IKatan2WithCheck(IkReal(x10499),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10502.valid){
continue;
}
IkReal x10500=((1.0)*(x10502.value));
IkReal x10501=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10500)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10500)));
IkReal gconst4=(x10499*x10501);
IkReal gconst5=((1.0)*r20*x10501);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10503=((-1.0)*r21);
CheckValue<IkReal> x10506 = IKatan2WithCheck(IkReal(x10503),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10506.valid){
continue;
}
IkReal x10504=((1.0)*(x10506.value));
IkReal x10505=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10504)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10504)));
IkReal gconst4=(x10503*x10505);
IkReal gconst5=((1.0)*r20*x10505);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10507=((-1.0)*r21);
CheckValue<IkReal> x10510 = IKatan2WithCheck(IkReal(x10507),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10510.valid){
continue;
}
IkReal x10508=((1.0)*(x10510.value));
IkReal x10509=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10508)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10508)));
IkReal gconst4=(x10507*x10509);
IkReal gconst5=((1.0)*r20*x10509);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10511=((-1.0)*r21);
CheckValue<IkReal> x10514 = IKatan2WithCheck(IkReal(x10511),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10514.valid){
continue;
}
IkReal x10512=((1.0)*(x10514.value));
IkReal x10513=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10512)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10512)));
IkReal gconst4=(x10511*x10513);
IkReal gconst5=((1.0)*r20*x10513);
IkReal x10515=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10519=IKPowWithIntegerCheck(x10515,-1);
if(!x10519.valid){
continue;
}
IkReal x10516=x10519.value;
IkReal x10517=((1.0)*x10516);
IkReal x10518=((((-2.0)*r10*r11*r20*r21*x10516))+(((-1.0)*x10517*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10517*(r10*r10)*(r20*r20))));
j4eval[0]=x10518;
j4eval[1]=r12;
j4eval[2]=x10515;
j4eval[3]=IKsign(x10518);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10520=(gconst5*r10);
IkReal x10521=(gconst4*r11);
CheckValue<IkReal> x10522 = IKatan2WithCheck(IkReal(((((-1.0)*x10521))+x10520)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10522.valid){
continue;
}
CheckValue<IkReal> x10523=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10520*x10520)))+(((-1.0)*(x10521*x10521)))+(((2.0)*x10520*x10521))+(((-1.0)*(r12*r12))))),-1);
if(!x10523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10522.value)+(((1.5707963267949)*(x10523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10524=IKsin(j4);
IkReal x10525=IKcos(j4);
IkReal x10526=(gconst4*r11);
IkReal x10527=(gconst5*r10);
IkReal x10528=(gconst4*r01);
IkReal x10529=(gconst5*r00);
IkReal x10530=(gconst4*r21);
IkReal x10531=(gconst5*r20);
IkReal x10532=((1.0)*x10525);
IkReal x10533=((1.0)*x10524);
evalcond[0]=((((-1.0)*r22*x10532))+((x10524*x10530))+(((-1.0)*x10531*x10533)));
evalcond[1]=((((-1.0)*r02*x10532))+(((-1.0)*x10529*x10533))+((x10524*x10528)));
evalcond[2]=((((-1.0)*r12*x10533))+((x10525*x10527))+(((-1.0)*x10526*x10532)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10532))+((x10524*x10526))+(((-1.0)*x10527*x10533)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10533))+(((-1.0)*x10528*x10532))+((x10525*x10529)));
evalcond[5]=((((-1.0)*r22*x10533))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10530*x10532))+((x10525*x10531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10534=((1.0)*gconst5);
CheckValue<IkReal> x10535 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10534)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10535.valid){
continue;
}
CheckValue<IkReal> x10536=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10534))+(((-1.0)*gconst4*r20)))),-1);
if(!x10536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10535.value)+(((1.5707963267949)*(x10536.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10537=IKsin(j4);
IkReal x10538=IKcos(j4);
IkReal x10539=(gconst4*r11);
IkReal x10540=(gconst5*r10);
IkReal x10541=(gconst4*r01);
IkReal x10542=(gconst5*r00);
IkReal x10543=(gconst4*r21);
IkReal x10544=(gconst5*r20);
IkReal x10545=((1.0)*x10538);
IkReal x10546=((1.0)*x10537);
evalcond[0]=((((-1.0)*x10544*x10546))+(((-1.0)*r22*x10545))+((x10537*x10543)));
evalcond[1]=((((-1.0)*x10542*x10546))+(((-1.0)*r02*x10545))+((x10537*x10541)));
evalcond[2]=(((x10538*x10540))+(((-1.0)*x10539*x10545))+(((-1.0)*r12*x10546)));
evalcond[3]=((-1.0)+((x10537*x10539))+(((-1.0)*r12*x10545))+(((-1.0)*x10540*x10546)));
evalcond[4]=(((cj2*sj1))+((x10538*x10542))+((cj1*sj2))+(((-1.0)*x10541*x10545))+(((-1.0)*r02*x10546)));
evalcond[5]=((((-1.0)*x10543*x10545))+((x10538*x10544))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10547=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10547.valid){
continue;
}
CheckValue<IkReal> x10548 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10547.value)))+(x10548.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10549=IKsin(j4);
IkReal x10550=IKcos(j4);
IkReal x10551=(gconst4*r11);
IkReal x10552=(gconst5*r10);
IkReal x10553=(gconst4*r01);
IkReal x10554=(gconst5*r00);
IkReal x10555=(gconst4*r21);
IkReal x10556=(gconst5*r20);
IkReal x10557=((1.0)*x10550);
IkReal x10558=((1.0)*x10549);
evalcond[0]=((((-1.0)*x10556*x10558))+((x10549*x10555))+(((-1.0)*r22*x10557)));
evalcond[1]=((((-1.0)*x10554*x10558))+(((-1.0)*r02*x10557))+((x10549*x10553)));
evalcond[2]=((((-1.0)*x10551*x10557))+(((-1.0)*r12*x10558))+((x10550*x10552)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10557))+((x10549*x10551))+(((-1.0)*x10552*x10558)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10558))+((x10550*x10554))+(((-1.0)*x10553*x10557)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10550*x10556))+(((-1.0)*x10555*x10557))+(((-1.0)*r22*x10558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10559=((-1.0)*r21);
CheckValue<IkReal> x10562 = IKatan2WithCheck(IkReal(x10559),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10562.valid){
continue;
}
IkReal x10560=((1.0)*(x10562.value));
IkReal x10561=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10560)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10560)));
IkReal gconst4=(x10559*x10561);
IkReal gconst5=((1.0)*r20*x10561);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10563=((-1.0)*r21);
CheckValue<IkReal> x10566 = IKatan2WithCheck(IkReal(x10563),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10566.valid){
continue;
}
IkReal x10564=((1.0)*(x10566.value));
IkReal x10565=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10564)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10564)));
IkReal gconst4=(x10563*x10565);
IkReal gconst5=((1.0)*r20*x10565);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10567=((-1.0)*r21);
CheckValue<IkReal> x10570 = IKatan2WithCheck(IkReal(x10567),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10570.valid){
continue;
}
IkReal x10568=((1.0)*(x10570.value));
IkReal x10569=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10568)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10568)));
IkReal gconst4=(x10567*x10569);
IkReal gconst5=((1.0)*r20*x10569);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10571=(gconst5*r10);
IkReal x10572=(gconst4*r11);
CheckValue<IkReal> x10573=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10571*x10572))+(r12*r12)+(x10571*x10571)+(x10572*x10572))),-1);
if(!x10573.valid){
continue;
}
CheckValue<IkReal> x10574 = IKatan2WithCheck(IkReal(((((-1.0)*x10571))+x10572)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10573.value)))+(x10574.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10575=IKcos(j4);
IkReal x10576=IKsin(j4);
IkReal x10577=(gconst4*r11);
IkReal x10578=(gconst5*r10);
IkReal x10579=(gconst5*r00);
IkReal x10580=(gconst5*r20);
IkReal x10581=((1.0)*x10575);
IkReal x10582=(gconst4*x10575);
IkReal x10583=((1.0)*x10576);
IkReal x10584=(gconst4*x10576);
evalcond[0]=((((-1.0)*x10578*x10581))+((x10575*x10577))+((r12*x10576)));
evalcond[1]=((((-1.0)*r22*x10581))+((r21*x10584))+(((-1.0)*x10580*x10583)));
evalcond[2]=((((-1.0)*r02*x10581))+(((-1.0)*x10579*x10583))+((r01*x10584)));
evalcond[3]=((-1.0)+(((-1.0)*x10578*x10583))+((x10576*x10577))+(((-1.0)*r12*x10581)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x10576))+(((-1.0)*x10579*x10581))+((r01*x10582)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10582))+((r22*x10576))+(((-1.0)*x10580*x10581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10585=((1.0)*gconst5);
CheckValue<IkReal> x10586=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10585))+(((-1.0)*gconst4*r20)))),-1);
if(!x10586.valid){
continue;
}
CheckValue<IkReal> x10587 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10585))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10586.value)))+(x10587.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10588=IKcos(j4);
IkReal x10589=IKsin(j4);
IkReal x10590=(gconst4*r11);
IkReal x10591=(gconst5*r10);
IkReal x10592=(gconst5*r00);
IkReal x10593=(gconst5*r20);
IkReal x10594=((1.0)*x10588);
IkReal x10595=(gconst4*x10588);
IkReal x10596=((1.0)*x10589);
IkReal x10597=(gconst4*x10589);
evalcond[0]=(((r12*x10589))+(((-1.0)*x10591*x10594))+((x10588*x10590)));
evalcond[1]=(((r21*x10597))+(((-1.0)*r22*x10594))+(((-1.0)*x10593*x10596)));
evalcond[2]=((((-1.0)*x10592*x10596))+(((-1.0)*r02*x10594))+((r01*x10597)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10594))+(((-1.0)*x10591*x10596))+((x10589*x10590)));
evalcond[4]=((((-1.0)*x10592*x10594))+((cj2*sj1))+((cj1*sj2))+((r01*x10595))+((r02*x10589)));
evalcond[5]=(((r21*x10595))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10593*x10594))+((r22*x10589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10598=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10598.valid){
continue;
}
CheckValue<IkReal> x10599 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10598.value)))+(x10599.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10600=IKcos(j4);
IkReal x10601=IKsin(j4);
IkReal x10602=(gconst4*r11);
IkReal x10603=(gconst5*r10);
IkReal x10604=(gconst5*r00);
IkReal x10605=(gconst5*r20);
IkReal x10606=((1.0)*x10600);
IkReal x10607=(gconst4*x10600);
IkReal x10608=((1.0)*x10601);
IkReal x10609=(gconst4*x10601);
evalcond[0]=(((x10600*x10602))+((r12*x10601))+(((-1.0)*x10603*x10606)));
evalcond[1]=(((r21*x10609))+(((-1.0)*r22*x10606))+(((-1.0)*x10605*x10608)));
evalcond[2]=(((r01*x10609))+(((-1.0)*x10604*x10608))+(((-1.0)*r02*x10606)));
evalcond[3]=((-1.0)+((x10601*x10602))+(((-1.0)*r12*x10606))+(((-1.0)*x10603*x10608)));
evalcond[4]=(((r01*x10607))+((cj2*sj1))+((cj1*sj2))+((r02*x10601))+(((-1.0)*x10604*x10606)));
evalcond[5]=(((r21*x10607))+((r22*x10601))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10605*x10606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10610=((-1.0)*r21);
CheckValue<IkReal> x10613 = IKatan2WithCheck(IkReal(x10610),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10613.valid){
continue;
}
IkReal x10611=((1.0)*(x10613.value));
IkReal x10612=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10611)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10611)));
IkReal gconst4=(x10610*x10612);
IkReal gconst5=((1.0)*r20*x10612);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10614=((-1.0)*r21);
CheckValue<IkReal> x10617 = IKatan2WithCheck(IkReal(x10614),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10617.valid){
continue;
}
IkReal x10615=((1.0)*(x10617.value));
IkReal x10616=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10615)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10615)));
IkReal gconst4=(x10614*x10616);
IkReal gconst5=((1.0)*r20*x10616);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10618=((-1.0)*r21);
CheckValue<IkReal> x10621 = IKatan2WithCheck(IkReal(x10618),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10621.valid){
continue;
}
IkReal x10619=((1.0)*(x10621.value));
IkReal x10620=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10619)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10619)));
IkReal gconst4=(x10618*x10620);
IkReal gconst5=((1.0)*r20*x10620);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10622=(gconst5*r10);
IkReal x10623=(gconst4*r11);
CheckValue<IkReal> x10624 = IKatan2WithCheck(IkReal(((((-1.0)*x10622))+x10623)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10624.valid){
continue;
}
CheckValue<IkReal> x10625=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10622*x10622)+(x10623*x10623)+(((-2.0)*x10622*x10623)))),-1);
if(!x10625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10624.value)+(((1.5707963267949)*(x10625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10626=IKcos(j4);
IkReal x10627=IKsin(j4);
IkReal x10628=(gconst5*r10);
IkReal x10629=(gconst5*r00);
IkReal x10630=(gconst5*r20);
IkReal x10631=((1.0)*x10626);
IkReal x10632=(gconst4*x10627);
IkReal x10633=(gconst4*x10626);
IkReal x10634=((1.0)*x10627);
evalcond[0]=((((-1.0)*x10628*x10631))+((r11*x10633))+((r12*x10627)));
evalcond[1]=((((-1.0)*r22*x10631))+(((-1.0)*x10630*x10634))+((r21*x10632)));
evalcond[2]=((((-1.0)*r02*x10631))+((r01*x10632))+(((-1.0)*x10629*x10634)));
evalcond[3]=((-1.0)+(((-1.0)*x10628*x10634))+(((-1.0)*r12*x10631))+((r11*x10632)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10627))+(((-1.0)*x10630*x10631))+((r21*x10633)));
evalcond[5]=(((r01*x10633))+(((-1.0)*sj1*sj2))+(((-1.0)*x10629*x10631))+((r02*x10627))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10635=((1.0)*gconst5);
CheckValue<IkReal> x10636=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10635))+(((-1.0)*gconst4*r20)))),-1);
if(!x10636.valid){
continue;
}
CheckValue<IkReal> x10637 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10635))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10636.value)))+(x10637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10638=IKcos(j4);
IkReal x10639=IKsin(j4);
IkReal x10640=(gconst5*r10);
IkReal x10641=(gconst5*r00);
IkReal x10642=(gconst5*r20);
IkReal x10643=((1.0)*x10638);
IkReal x10644=(gconst4*x10639);
IkReal x10645=(gconst4*x10638);
IkReal x10646=((1.0)*x10639);
evalcond[0]=((((-1.0)*x10640*x10643))+((r11*x10645))+((r12*x10639)));
evalcond[1]=(((r21*x10644))+(((-1.0)*r22*x10643))+(((-1.0)*x10642*x10646)));
evalcond[2]=((((-1.0)*r02*x10643))+(((-1.0)*x10641*x10646))+((r01*x10644)));
evalcond[3]=((-1.0)+(((-1.0)*x10640*x10646))+(((-1.0)*r12*x10643))+((r11*x10644)));
evalcond[4]=(((r21*x10645))+((cj2*sj1))+((cj1*sj2))+((r22*x10639))+(((-1.0)*x10642*x10643)));
evalcond[5]=((((-1.0)*x10641*x10643))+((r01*x10645))+(((-1.0)*sj1*sj2))+((r02*x10639))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10647=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10647.valid){
continue;
}
CheckValue<IkReal> x10648 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10647.value)))+(x10648.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10649=IKcos(j4);
IkReal x10650=IKsin(j4);
IkReal x10651=(gconst5*r10);
IkReal x10652=(gconst5*r00);
IkReal x10653=(gconst5*r20);
IkReal x10654=((1.0)*x10649);
IkReal x10655=(gconst4*x10650);
IkReal x10656=(gconst4*x10649);
IkReal x10657=((1.0)*x10650);
evalcond[0]=(((r11*x10656))+((r12*x10650))+(((-1.0)*x10651*x10654)));
evalcond[1]=((((-1.0)*r22*x10654))+(((-1.0)*x10653*x10657))+((r21*x10655)));
evalcond[2]=((((-1.0)*r02*x10654))+(((-1.0)*x10652*x10657))+((r01*x10655)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10654))+((r11*x10655))+(((-1.0)*x10651*x10657)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10653*x10654))+((cj1*sj2))+((r22*x10650))+((r21*x10656)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x10650))+(((-1.0)*x10652*x10654))+((cj1*cj2))+((r01*x10656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10658=((-1.0)*r21);
CheckValue<IkReal> x10661 = IKatan2WithCheck(IkReal(x10658),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10661.valid){
continue;
}
IkReal x10659=((1.0)*(x10661.value));
IkReal x10660=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10659)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10659)));
IkReal gconst4=(x10658*x10660);
IkReal gconst5=((1.0)*r20*x10660);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10662=((-1.0)*r21);
CheckValue<IkReal> x10665 = IKatan2WithCheck(IkReal(x10662),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10665.valid){
continue;
}
IkReal x10663=((1.0)*(x10665.value));
IkReal x10664=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10663)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10663)));
IkReal gconst4=(x10662*x10664);
IkReal gconst5=((1.0)*r20*x10664);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10666=((-1.0)*r21);
CheckValue<IkReal> x10669 = IKatan2WithCheck(IkReal(x10666),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10669.valid){
continue;
}
IkReal x10667=((1.0)*(x10669.value));
IkReal x10668=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10667)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10667)));
IkReal gconst4=(x10666*x10668);
IkReal gconst5=((1.0)*r20*x10668);
IkReal x10670=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10674=IKPowWithIntegerCheck(x10670,-1);
if(!x10674.valid){
continue;
}
IkReal x10671=x10674.value;
IkReal x10672=((1.0)*x10671);
IkReal x10673=((((-1.0)*x10672*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10671))+(((-1.0)*(r12*r12)))+(((-1.0)*x10672*(r11*r11)*(r21*r21))));
j4eval[0]=x10673;
j4eval[1]=r12;
j4eval[2]=x10670;
j4eval[3]=IKsign(x10673);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10675=(gconst5*r10);
IkReal x10676=(gconst4*r11);
CheckValue<IkReal> x10677 = IKatan2WithCheck(IkReal(((((-1.0)*x10676))+x10675)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10677.valid){
continue;
}
CheckValue<IkReal> x10678=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10676*x10676)))+(((-1.0)*(x10675*x10675)))+(((-1.0)*(r12*r12)))+(((2.0)*x10675*x10676)))),-1);
if(!x10678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10677.value)+(((1.5707963267949)*(x10678.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10679=IKsin(j4);
IkReal x10680=IKcos(j4);
IkReal x10681=(gconst4*r11);
IkReal x10682=(gconst5*r10);
IkReal x10683=(gconst5*r00);
IkReal x10684=(gconst5*r20);
IkReal x10685=((1.0)*x10680);
IkReal x10686=(gconst4*x10679);
IkReal x10687=((1.0)*x10679);
evalcond[0]=((((-1.0)*r22*x10685))+(((-1.0)*x10684*x10687))+((r21*x10686)));
evalcond[1]=((((-1.0)*x10683*x10687))+(((-1.0)*r02*x10685))+((r01*x10686)));
evalcond[2]=(((x10680*x10682))+(((-1.0)*r12*x10687))+(((-1.0)*x10681*x10685)));
evalcond[3]=((-1.0)+(((-1.0)*x10682*x10687))+(((-1.0)*r12*x10685))+((x10679*x10681)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x10687))+((x10680*x10684))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10685)));
evalcond[5]=((((-1.0)*gconst4*r01*x10685))+(((-1.0)*r02*x10687))+((x10680*x10683))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10688=((1.0)*gconst5);
CheckValue<IkReal> x10689=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10688))+(((-1.0)*gconst4*r20)))),-1);
if(!x10689.valid){
continue;
}
CheckValue<IkReal> x10690 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10688)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10689.value)))+(x10690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10691=IKsin(j4);
IkReal x10692=IKcos(j4);
IkReal x10693=(gconst4*r11);
IkReal x10694=(gconst5*r10);
IkReal x10695=(gconst5*r00);
IkReal x10696=(gconst5*r20);
IkReal x10697=((1.0)*x10692);
IkReal x10698=(gconst4*x10691);
IkReal x10699=((1.0)*x10691);
evalcond[0]=(((r21*x10698))+(((-1.0)*x10696*x10699))+(((-1.0)*r22*x10697)));
evalcond[1]=((((-1.0)*x10695*x10699))+(((-1.0)*r02*x10697))+((r01*x10698)));
evalcond[2]=((((-1.0)*x10693*x10697))+((x10692*x10694))+(((-1.0)*r12*x10699)));
evalcond[3]=((-1.0)+(((-1.0)*x10694*x10699))+((x10691*x10693))+(((-1.0)*r12*x10697)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x10697))+((x10692*x10696))+((cj1*sj2))+(((-1.0)*r22*x10699)));
evalcond[5]=(((x10692*x10695))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x10699))+(((-1.0)*gconst4*r01*x10697))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10700=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10700.valid){
continue;
}
CheckValue<IkReal> x10701 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10700.value)))+(x10701.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10702=IKsin(j4);
IkReal x10703=IKcos(j4);
IkReal x10704=(gconst4*r11);
IkReal x10705=(gconst5*r10);
IkReal x10706=(gconst5*r00);
IkReal x10707=(gconst5*r20);
IkReal x10708=((1.0)*x10703);
IkReal x10709=(gconst4*x10702);
IkReal x10710=((1.0)*x10702);
evalcond[0]=((((-1.0)*r22*x10708))+((r21*x10709))+(((-1.0)*x10707*x10710)));
evalcond[1]=((((-1.0)*x10706*x10710))+((r01*x10709))+(((-1.0)*r02*x10708)));
evalcond[2]=(((x10703*x10705))+(((-1.0)*x10704*x10708))+(((-1.0)*r12*x10710)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10708))+((x10702*x10704))+(((-1.0)*x10705*x10710)));
evalcond[4]=(((x10703*x10707))+((cj2*sj1))+(((-1.0)*gconst4*r21*x10708))+((cj1*sj2))+(((-1.0)*r22*x10710)));
evalcond[5]=(((x10703*x10706))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r01*x10708))+((cj1*cj2))+(((-1.0)*r02*x10710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10711=((-1.0)*r21);
IkReal x10712=((-1.0)*px);
CheckValue<IkReal> x10714 = IKatan2WithCheck(IkReal(x10711),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10714.valid){
continue;
}
IkReal x10713=((1.0)*(x10714.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10713)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10712);
rxp1_1=(px*r21);
rxp1_2=(r11*x10712);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10713)));
IkReal gconst4=x10711;
IkReal gconst5=((1.0)*r20);
IkReal x10715=((1.0)*cj3);
IkReal x10716=(r10*r20);
IkReal x10717=(r11*r21);
j4eval[0]=((((-1.0)*x10716))+(((-1.0)*x10717)));
j4eval[1]=((((-1.0)*x10715*x10716))+(((-1.0)*x10715*x10717)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10718=((-1.0)*r21);
IkReal x10719=((-1.0)*px);
CheckValue<IkReal> x10721 = IKatan2WithCheck(IkReal(x10718),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10721.valid){
continue;
}
IkReal x10720=((1.0)*(x10721.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10720)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10719);
rxp1_1=(px*r21);
rxp1_2=(r11*x10719);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10720)));
IkReal gconst4=x10718;
IkReal gconst5=((1.0)*r20);
IkReal x10722=((1.0)*r11*r21);
IkReal x10723=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10723))+(((-1.0)*x10722)));
j4eval[1]=(((sj3*x10722))+((sj3*x10723)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10724=((-1.0)*r21);
IkReal x10725=((-1.0)*px);
CheckValue<IkReal> x10727 = IKatan2WithCheck(IkReal(x10724),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10727.valid){
continue;
}
IkReal x10726=((1.0)*(x10727.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10726)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10725);
rxp1_1=(px*r21);
rxp1_2=(r11*x10725);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10726)));
IkReal gconst4=x10724;
IkReal gconst5=((1.0)*r20);
IkReal x10728=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r21*x10728))+(((-1.0)*r10*r20*x10728)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10729=((1.0)*r10);
CheckValue<IkReal> x10730=IKPowWithIntegerCheck(cj3,-1);
if(!x10730.valid){
continue;
}
CheckValue<IkReal> x10731=IKPowWithIntegerCheck(r02,-1);
if(!x10731.valid){
continue;
}
CheckValue<IkReal> x10732=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x10729))),-1);
if(!x10732.valid){
continue;
}
if( IKabs(((x10730.value)*(x10731.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10732.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10729)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10730.value)*(x10731.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10732.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10729))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10730.value)*(x10731.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10732.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10729))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10733=IKsin(j4);
IkReal x10734=IKcos(j4);
IkReal x10735=(cj2*sj1);
IkReal x10736=(cj1*sj2);
IkReal x10737=(gconst5*sj3);
IkReal x10738=(gconst4*r11);
IkReal x10739=(sj1*sj2);
IkReal x10740=((1.0)*gconst5);
IkReal x10741=(cj1*cj2);
IkReal x10742=(gconst4*r21);
IkReal x10743=(cj3*gconst4);
IkReal x10744=(gconst4*sj3);
IkReal x10745=(cj3*gconst5);
IkReal x10746=(r20*x10734);
IkReal x10747=(r10*x10734);
IkReal x10748=(cj3*x10734);
IkReal x10749=(r02*x10733);
IkReal x10750=(x10735+x10736);
IkReal x10751=((1.0)*sj3*x10734);
evalcond[0]=((-1.0)*r02*x10734);
evalcond[1]=(((x10733*x10742))+(((-1.0)*r20*x10733*x10740)));
evalcond[2]=(((cj3*x10749))+(((-1.0)*x10739))+x10741);
evalcond[3]=((((-1.0)*sj3*x10749))+x10750);
evalcond[4]=((-1.0)+((x10733*x10738))+(((-1.0)*r10*x10733*x10740)));
evalcond[5]=((((-1.0)*cj3*x10740*x10747))+((r10*x10744))+((x10738*x10748))+((r11*x10737)));
evalcond[6]=((((-1.0)*x10738*x10751))+((r10*x10743))+((x10737*x10747))+((r11*x10745)));
evalcond[7]=((((-1.0)*cj3*x10740*x10746))+((r21*x10737))+((r20*x10744))+x10750+((x10742*x10748)));
evalcond[8]=((((-1.0)*x10741))+((x10737*x10746))+((r20*x10743))+x10739+(((-1.0)*x10742*x10751))+((r21*x10745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10752=((1.0)*gconst5);
IkReal x10753=(gconst4*r11);
CheckValue<IkReal> x10754=IKPowWithIntegerCheck(((((-1.0)*r10*x10752))+x10753),-1);
if(!x10754.valid){
continue;
}
CheckValue<IkReal> x10755=IKPowWithIntegerCheck(((((-1.0)*sj3*x10753))+((gconst5*r10*sj3))),-1);
if(!x10755.valid){
continue;
}
if( IKabs(x10754.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10755.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10752)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10754.value)+IKsqr(((x10755.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10752))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10754.value, ((x10755.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10752))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10756=IKsin(j4);
IkReal x10757=IKcos(j4);
IkReal x10758=(cj2*sj1);
IkReal x10759=(cj1*sj2);
IkReal x10760=(gconst5*sj3);
IkReal x10761=(gconst4*r11);
IkReal x10762=(sj1*sj2);
IkReal x10763=((1.0)*gconst5);
IkReal x10764=(cj1*cj2);
IkReal x10765=(gconst4*r21);
IkReal x10766=(cj3*gconst4);
IkReal x10767=(gconst4*sj3);
IkReal x10768=(cj3*gconst5);
IkReal x10769=(r20*x10757);
IkReal x10770=(r10*x10757);
IkReal x10771=(cj3*x10757);
IkReal x10772=(r02*x10756);
IkReal x10773=(x10758+x10759);
IkReal x10774=((1.0)*sj3*x10757);
evalcond[0]=((-1.0)*r02*x10757);
evalcond[1]=((((-1.0)*r20*x10756*x10763))+((x10756*x10765)));
evalcond[2]=(((cj3*x10772))+(((-1.0)*x10762))+x10764);
evalcond[3]=((((-1.0)*sj3*x10772))+x10773);
evalcond[4]=((-1.0)+((x10756*x10761))+(((-1.0)*r10*x10756*x10763)));
evalcond[5]=((((-1.0)*cj3*x10763*x10770))+((r11*x10760))+((x10761*x10771))+((r10*x10767)));
evalcond[6]=(((r11*x10768))+((x10760*x10770))+(((-1.0)*x10761*x10774))+((r10*x10766)));
evalcond[7]=((((-1.0)*cj3*x10763*x10769))+((r20*x10767))+((r21*x10760))+((x10765*x10771))+x10773);
evalcond[8]=((((-1.0)*x10764))+((r20*x10766))+((x10760*x10769))+((r21*x10768))+(((-1.0)*x10765*x10774))+x10762);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10775=((1.0)*sj3);
IkReal x10776=(gconst4*r11);
IkReal x10777=((1.0)*gconst5*r10);
CheckValue<IkReal> x10778=IKPowWithIntegerCheck(((((-1.0)*x10777))+x10776),-1);
if(!x10778.valid){
continue;
}
CheckValue<IkReal> x10779=IKPowWithIntegerCheck((((cj3*x10776))+(((-1.0)*cj3*x10777))),-1);
if(!x10779.valid){
continue;
}
if( IKabs(x10778.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10779.value)*(((((-1.0)*gconst4*r10*x10775))+(((-1.0)*gconst5*r11*x10775)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10778.value)+IKsqr(((x10779.value)*(((((-1.0)*gconst4*r10*x10775))+(((-1.0)*gconst5*r11*x10775))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10778.value, ((x10779.value)*(((((-1.0)*gconst4*r10*x10775))+(((-1.0)*gconst5*r11*x10775))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10780=IKsin(j4);
IkReal x10781=IKcos(j4);
IkReal x10782=(cj2*sj1);
IkReal x10783=(cj1*sj2);
IkReal x10784=(gconst5*sj3);
IkReal x10785=(gconst4*r11);
IkReal x10786=(sj1*sj2);
IkReal x10787=((1.0)*gconst5);
IkReal x10788=(cj1*cj2);
IkReal x10789=(gconst4*r21);
IkReal x10790=(cj3*gconst4);
IkReal x10791=(gconst4*sj3);
IkReal x10792=(cj3*gconst5);
IkReal x10793=(r20*x10781);
IkReal x10794=(r10*x10781);
IkReal x10795=(cj3*x10781);
IkReal x10796=(r02*x10780);
IkReal x10797=(x10783+x10782);
IkReal x10798=((1.0)*sj3*x10781);
evalcond[0]=((-1.0)*r02*x10781);
evalcond[1]=(((x10780*x10789))+(((-1.0)*r20*x10780*x10787)));
evalcond[2]=((((-1.0)*x10786))+((cj3*x10796))+x10788);
evalcond[3]=((((-1.0)*sj3*x10796))+x10797);
evalcond[4]=((-1.0)+((x10780*x10785))+(((-1.0)*r10*x10780*x10787)));
evalcond[5]=(((r10*x10791))+((r11*x10784))+(((-1.0)*cj3*x10787*x10794))+((x10785*x10795)));
evalcond[6]=(((r10*x10790))+((x10784*x10794))+(((-1.0)*x10785*x10798))+((r11*x10792)));
evalcond[7]=(((r21*x10784))+(((-1.0)*cj3*x10787*x10793))+((r20*x10791))+((x10789*x10795))+x10797);
evalcond[8]=(((r21*x10792))+((x10784*x10793))+((r20*x10790))+(((-1.0)*x10788))+x10786+(((-1.0)*x10789*x10798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10799=gconst4*gconst4;
IkReal x10800=gconst5*gconst5;
IkReal x10801=(r10*r21);
IkReal x10802=((1.0)*cj3);
IkReal x10803=(r11*r21);
IkReal x10804=(r11*r20);
IkReal x10805=(r22*sj3);
IkReal x10806=(gconst4*r10);
IkReal x10807=((1.0)*sj3);
IkReal x10808=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10809=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x10800*x10802))+((x10801*x10808))+(((-1.0)*x10799*x10802*x10803))+((x10804*x10808))+(((-1.0)*r12*r22*x10802)))),-1);
if(!x10809.valid){
continue;
}
CheckValue<IkReal> x10810 = IKatan2WithCheck(IkReal((((gconst5*r11*x10805))+((x10805*x10806)))),IkReal(((((-1.0)*x10800*x10804*x10807))+(((-1.0)*gconst5*r20*x10806*x10807))+((sj3*x10799*x10801))+((gconst4*gconst5*sj3*x10803)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10809.value)))+(x10810.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10811=IKsin(j4);
IkReal x10812=IKcos(j4);
IkReal x10813=(cj2*sj1);
IkReal x10814=(cj1*sj2);
IkReal x10815=(gconst5*sj3);
IkReal x10816=(gconst4*r11);
IkReal x10817=(sj1*sj2);
IkReal x10818=(gconst5*r10);
IkReal x10819=(cj1*cj2);
IkReal x10820=(gconst4*r01);
IkReal x10821=(gconst4*r21);
IkReal x10822=(gconst5*r00);
IkReal x10823=(gconst4*sj3);
IkReal x10824=(cj3*gconst5);
IkReal x10825=(cj3*gconst4);
IkReal x10826=((1.0)*x10812);
IkReal x10827=((1.0)*x10811);
IkReal x10828=(cj3*x10811);
IkReal x10829=(cj3*x10812);
IkReal x10830=(x10813+x10814);
evalcond[0]=((((-1.0)*gconst5*r20*x10827))+((x10811*x10821))+(((-1.0)*r22*x10826)));
evalcond[1]=((((-1.0)*r02*x10826))+(((-1.0)*x10822*x10827))+((x10811*x10820)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10826))+((x10811*x10816))+(((-1.0)*x10818*x10827)));
evalcond[3]=(((r12*x10828))+((x10816*x10829))+((r10*x10823))+((r11*x10815))+(((-1.0)*cj3*x10818*x10826)));
evalcond[4]=((((-1.0)*sj3*x10816*x10826))+((r10*x10812*x10815))+((r10*x10825))+(((-1.0)*r12*sj3*x10827))+((r11*x10824)));
evalcond[5]=(((r20*x10823))+(((-1.0)*r20*x10824*x10826))+((x10821*x10829))+((r22*x10828))+((r21*x10815))+x10830);
evalcond[6]=((((-1.0)*x10817))+((r02*x10828))+((x10820*x10829))+(((-1.0)*cj3*x10822*x10826))+((r01*x10815))+((r00*x10823))+x10819);
evalcond[7]=(((r00*x10812*x10815))+(((-1.0)*r02*sj3*x10827))+(((-1.0)*sj3*x10820*x10826))+((r00*x10825))+((r01*x10824))+x10830);
evalcond[8]=(((r21*x10824))+(((-1.0)*sj3*x10821*x10826))+(((-1.0)*x10819))+(((-1.0)*r22*sj3*x10827))+((r20*x10825))+((r20*x10812*x10815))+x10817);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10831=((1.0)*gconst5);
CheckValue<IkReal> x10832=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10831))+(((-1.0)*gconst4*r20)))),-1);
if(!x10832.valid){
continue;
}
CheckValue<IkReal> x10833 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10831)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10832.value)))+(x10833.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10834=IKsin(j4);
IkReal x10835=IKcos(j4);
IkReal x10836=(cj2*sj1);
IkReal x10837=(cj1*sj2);
IkReal x10838=(gconst5*sj3);
IkReal x10839=(gconst4*r11);
IkReal x10840=(sj1*sj2);
IkReal x10841=(gconst5*r10);
IkReal x10842=(cj1*cj2);
IkReal x10843=(gconst4*r01);
IkReal x10844=(gconst4*r21);
IkReal x10845=(gconst5*r00);
IkReal x10846=(gconst4*sj3);
IkReal x10847=(cj3*gconst5);
IkReal x10848=(cj3*gconst4);
IkReal x10849=((1.0)*x10835);
IkReal x10850=((1.0)*x10834);
IkReal x10851=(cj3*x10834);
IkReal x10852=(cj3*x10835);
IkReal x10853=(x10837+x10836);
evalcond[0]=((((-1.0)*r22*x10849))+(((-1.0)*gconst5*r20*x10850))+((x10834*x10844)));
evalcond[1]=((((-1.0)*r02*x10849))+(((-1.0)*x10845*x10850))+((x10834*x10843)));
evalcond[2]=((-1.0)+(((-1.0)*x10841*x10850))+(((-1.0)*r12*x10849))+((x10834*x10839)));
evalcond[3]=(((r12*x10851))+((x10839*x10852))+(((-1.0)*cj3*x10841*x10849))+((r10*x10846))+((r11*x10838)));
evalcond[4]=((((-1.0)*sj3*x10839*x10849))+((r10*x10835*x10838))+(((-1.0)*r12*sj3*x10850))+((r11*x10847))+((r10*x10848)));
evalcond[5]=((((-1.0)*r20*x10847*x10849))+((x10844*x10852))+((r20*x10846))+((r22*x10851))+((r21*x10838))+x10853);
evalcond[6]=(((x10843*x10852))+((r00*x10846))+(((-1.0)*x10840))+(((-1.0)*cj3*x10845*x10849))+((r01*x10838))+((r02*x10851))+x10842);
evalcond[7]=(((r01*x10847))+((r00*x10848))+((r00*x10835*x10838))+(((-1.0)*r02*sj3*x10850))+(((-1.0)*sj3*x10843*x10849))+x10853);
evalcond[8]=((((-1.0)*r22*sj3*x10850))+(((-1.0)*sj3*x10844*x10849))+(((-1.0)*x10842))+((r20*x10835*x10838))+((r21*x10847))+((r20*x10848))+x10840);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10854=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10854.valid){
continue;
}
CheckValue<IkReal> x10855 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10854.value)))+(x10855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10856=IKsin(j4);
IkReal x10857=IKcos(j4);
IkReal x10858=(cj2*sj1);
IkReal x10859=(cj1*sj2);
IkReal x10860=(gconst5*sj3);
IkReal x10861=(gconst4*r11);
IkReal x10862=(sj1*sj2);
IkReal x10863=(gconst5*r10);
IkReal x10864=(cj1*cj2);
IkReal x10865=(gconst4*r01);
IkReal x10866=(gconst4*r21);
IkReal x10867=(gconst5*r00);
IkReal x10868=(gconst4*sj3);
IkReal x10869=(cj3*gconst5);
IkReal x10870=(cj3*gconst4);
IkReal x10871=((1.0)*x10857);
IkReal x10872=((1.0)*x10856);
IkReal x10873=(cj3*x10856);
IkReal x10874=(cj3*x10857);
IkReal x10875=(x10859+x10858);
evalcond[0]=((((-1.0)*r22*x10871))+((x10856*x10866))+(((-1.0)*gconst5*r20*x10872)));
evalcond[1]=(((x10856*x10865))+(((-1.0)*x10867*x10872))+(((-1.0)*r02*x10871)));
evalcond[2]=((-1.0)+(((-1.0)*x10863*x10872))+((x10856*x10861))+(((-1.0)*r12*x10871)));
evalcond[3]=(((r12*x10873))+((r11*x10860))+(((-1.0)*cj3*x10863*x10871))+((r10*x10868))+((x10861*x10874)));
evalcond[4]=(((r11*x10869))+((r10*x10857*x10860))+((r10*x10870))+(((-1.0)*sj3*x10861*x10871))+(((-1.0)*r12*sj3*x10872)));
evalcond[5]=(((x10866*x10874))+(((-1.0)*r20*x10869*x10871))+((r21*x10860))+((r20*x10868))+((r22*x10873))+x10875);
evalcond[6]=(((r02*x10873))+(((-1.0)*cj3*x10867*x10871))+((r00*x10868))+((r01*x10860))+(((-1.0)*x10862))+((x10865*x10874))+x10864);
evalcond[7]=(((r00*x10857*x10860))+(((-1.0)*sj3*x10865*x10871))+((r00*x10870))+(((-1.0)*r02*sj3*x10872))+((r01*x10869))+x10875);
evalcond[8]=(((r20*x10857*x10860))+((r21*x10869))+((r20*x10870))+(((-1.0)*x10864))+(((-1.0)*sj3*x10866*x10871))+(((-1.0)*r22*sj3*x10872))+x10862);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10876=((-1.0)*r21);
CheckValue<IkReal> x10879 = IKatan2WithCheck(IkReal(x10876),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10879.valid){
continue;
}
IkReal x10877=((1.0)*(x10879.value));
IkReal x10878=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10877)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10877)));
IkReal gconst4=(x10876*x10878);
IkReal gconst5=((1.0)*r20*x10878);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10880=((-1.0)*r21);
CheckValue<IkReal> x10883 = IKatan2WithCheck(IkReal(x10880),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10883.valid){
continue;
}
IkReal x10881=((1.0)*(x10883.value));
IkReal x10882=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10881)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10881)));
IkReal gconst4=(x10880*x10882);
IkReal gconst5=((1.0)*r20*x10882);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10884=((-1.0)*r21);
CheckValue<IkReal> x10887 = IKatan2WithCheck(IkReal(x10884),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10887.valid){
continue;
}
IkReal x10885=((1.0)*(x10887.value));
IkReal x10886=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10885)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10885)));
IkReal gconst4=(x10884*x10886);
IkReal gconst5=((1.0)*r20*x10886);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10888=((-1.0)*r21);
CheckValue<IkReal> x10891 = IKatan2WithCheck(IkReal(x10888),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10891.valid){
continue;
}
IkReal x10889=((1.0)*(x10891.value));
IkReal x10890=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10889)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10889)));
IkReal gconst4=(x10888*x10890);
IkReal gconst5=((1.0)*r20*x10890);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10892=((-1.0)*r21);
CheckValue<IkReal> x10895 = IKatan2WithCheck(IkReal(x10892),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10895.valid){
continue;
}
IkReal x10893=((1.0)*(x10895.value));
IkReal x10894=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10893)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10893)));
IkReal gconst4=(x10892*x10894);
IkReal gconst5=((1.0)*r20*x10894);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10896=((-1.0)*r21);
CheckValue<IkReal> x10899 = IKatan2WithCheck(IkReal(x10896),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10899.valid){
continue;
}
IkReal x10897=((1.0)*(x10899.value));
IkReal x10898=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10897)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10897)));
IkReal gconst4=(x10896*x10898);
IkReal gconst5=((1.0)*r20*x10898);
IkReal x10900=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10904=IKPowWithIntegerCheck(x10900,-1);
if(!x10904.valid){
continue;
}
IkReal x10901=x10904.value;
IkReal x10902=((1.0)*x10901);
IkReal x10903=((((-2.0)*r00*r01*r20*r21*x10901))+(((-1.0)*(r02*r02)))+(((-1.0)*x10902*(r01*r01)*(r21*r21)))+(((-1.0)*x10902*(r00*r00)*(r20*r20))));
j4eval[0]=x10903;
j4eval[1]=r02;
j4eval[2]=x10900;
j4eval[3]=IKsign(x10903);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10905=(gconst5*r00);
IkReal x10906=(gconst4*r01);
CheckValue<IkReal> x10907=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x10905*x10906))+(((-1.0)*(x10906*x10906)))+(((-1.0)*(x10905*x10905))))),-1);
if(!x10907.valid){
continue;
}
CheckValue<IkReal> x10908 = IKatan2WithCheck(IkReal(((((-1.0)*x10906))+x10905)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10907.value)))+(x10908.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10909=IKsin(j4);
IkReal x10910=IKcos(j4);
IkReal x10911=(gconst4*r11);
IkReal x10912=((1.0)*cj1);
IkReal x10913=(gconst5*r10);
IkReal x10914=(gconst4*r01);
IkReal x10915=(gconst5*r00);
IkReal x10916=(gconst4*r21);
IkReal x10917=(gconst5*r20);
IkReal x10918=((1.0)*x10910);
IkReal x10919=((1.0)*x10909);
evalcond[0]=(((x10909*x10916))+(((-1.0)*r22*x10918))+(((-1.0)*x10917*x10919)));
evalcond[1]=(((x10909*x10911))+(((-1.0)*r12*x10918))+(((-1.0)*x10913*x10919)));
evalcond[2]=(((x10910*x10915))+(((-1.0)*r02*x10919))+(((-1.0)*x10914*x10918)));
evalcond[3]=((-1.0)+((x10909*x10914))+(((-1.0)*r02*x10918))+(((-1.0)*x10915*x10919)));
evalcond[4]=(((x10910*x10917))+(((-1.0)*r22*x10919))+((sj1*sj2))+(((-1.0)*cj2*x10912))+(((-1.0)*x10916*x10918)));
evalcond[5]=(((x10910*x10913))+(((-1.0)*sj2*x10912))+(((-1.0)*r12*x10919))+(((-1.0)*cj2*sj1))+(((-1.0)*x10911*x10918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10920=((1.0)*gconst5);
CheckValue<IkReal> x10921 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10920))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10921.valid){
continue;
}
CheckValue<IkReal> x10922=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10920))+(((-1.0)*gconst4*r10)))),-1);
if(!x10922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10921.value)+(((1.5707963267949)*(x10922.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10923=IKsin(j4);
IkReal x10924=IKcos(j4);
IkReal x10925=(gconst4*r11);
IkReal x10926=((1.0)*cj1);
IkReal x10927=(gconst5*r10);
IkReal x10928=(gconst4*r01);
IkReal x10929=(gconst5*r00);
IkReal x10930=(gconst4*r21);
IkReal x10931=(gconst5*r20);
IkReal x10932=((1.0)*x10924);
IkReal x10933=((1.0)*x10923);
evalcond[0]=((((-1.0)*r22*x10932))+(((-1.0)*x10931*x10933))+((x10923*x10930)));
evalcond[1]=((((-1.0)*r12*x10932))+(((-1.0)*x10927*x10933))+((x10923*x10925)));
evalcond[2]=(((x10924*x10929))+(((-1.0)*r02*x10933))+(((-1.0)*x10928*x10932)));
evalcond[3]=((-1.0)+(((-1.0)*x10929*x10933))+(((-1.0)*r02*x10932))+((x10923*x10928)));
evalcond[4]=((((-1.0)*r22*x10933))+((x10924*x10931))+((sj1*sj2))+(((-1.0)*x10930*x10932))+(((-1.0)*cj2*x10926)));
evalcond[5]=((((-1.0)*x10925*x10932))+(((-1.0)*sj2*x10926))+(((-1.0)*r12*x10933))+((x10924*x10927))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10934 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10934.valid){
continue;
}
CheckValue<IkReal> x10935=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10934.value)+(((1.5707963267949)*(x10935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10936=IKsin(j4);
IkReal x10937=IKcos(j4);
IkReal x10938=(gconst4*r11);
IkReal x10939=((1.0)*cj1);
IkReal x10940=(gconst5*r10);
IkReal x10941=(gconst4*r01);
IkReal x10942=(gconst5*r00);
IkReal x10943=(gconst4*r21);
IkReal x10944=(gconst5*r20);
IkReal x10945=((1.0)*x10937);
IkReal x10946=((1.0)*x10936);
evalcond[0]=(((x10936*x10943))+(((-1.0)*r22*x10945))+(((-1.0)*x10944*x10946)));
evalcond[1]=((((-1.0)*r12*x10945))+((x10936*x10938))+(((-1.0)*x10940*x10946)));
evalcond[2]=(((x10937*x10942))+(((-1.0)*x10941*x10945))+(((-1.0)*r02*x10946)));
evalcond[3]=((-1.0)+((x10936*x10941))+(((-1.0)*x10942*x10946))+(((-1.0)*r02*x10945)));
evalcond[4]=(((x10937*x10944))+((sj1*sj2))+(((-1.0)*r22*x10946))+(((-1.0)*x10943*x10945))+(((-1.0)*cj2*x10939)));
evalcond[5]=(((x10937*x10940))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x10946))+(((-1.0)*x10938*x10945))+(((-1.0)*sj2*x10939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10947=((-1.0)*r21);
CheckValue<IkReal> x10950 = IKatan2WithCheck(IkReal(x10947),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10950.valid){
continue;
}
IkReal x10948=((1.0)*(x10950.value));
IkReal x10949=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10948)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10948)));
IkReal gconst4=(x10947*x10949);
IkReal gconst5=((1.0)*r20*x10949);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10951=((-1.0)*r21);
CheckValue<IkReal> x10954 = IKatan2WithCheck(IkReal(x10951),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10954.valid){
continue;
}
IkReal x10952=((1.0)*(x10954.value));
IkReal x10953=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10952)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10952)));
IkReal gconst4=(x10951*x10953);
IkReal gconst5=((1.0)*r20*x10953);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10955=((-1.0)*r21);
CheckValue<IkReal> x10958 = IKatan2WithCheck(IkReal(x10955),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10958.valid){
continue;
}
IkReal x10956=((1.0)*(x10958.value));
IkReal x10957=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10956)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10956)));
IkReal gconst4=(x10955*x10957);
IkReal gconst5=((1.0)*r20*x10957);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10959=(gconst4*r01);
IkReal x10960=(gconst5*r00);
CheckValue<IkReal> x10961 = IKatan2WithCheck(IkReal(((((-1.0)*x10960))+x10959)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10961.valid){
continue;
}
CheckValue<IkReal> x10962=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10959*x10960))+(x10959*x10959)+(r02*r02)+(x10960*x10960))),-1);
if(!x10962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10961.value)+(((1.5707963267949)*(x10962.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10963=IKcos(j4);
IkReal x10964=IKsin(j4);
IkReal x10965=(gconst4*r11);
IkReal x10966=(gconst5*r10);
IkReal x10967=((1.0)*cj1);
IkReal x10968=(gconst5*r00);
IkReal x10969=(gconst5*r20);
IkReal x10970=((1.0)*x10963);
IkReal x10971=(gconst4*x10963);
IkReal x10972=((1.0)*x10964);
IkReal x10973=(gconst4*x10964);
evalcond[0]=(((r02*x10964))+(((-1.0)*x10968*x10970))+((r01*x10971)));
evalcond[1]=((((-1.0)*r22*x10970))+((r21*x10973))+(((-1.0)*x10969*x10972)));
evalcond[2]=(((x10964*x10965))+(((-1.0)*x10966*x10972))+(((-1.0)*r12*x10970)));
evalcond[3]=((-1.0)+(((-1.0)*x10968*x10972))+((r01*x10973))+(((-1.0)*r02*x10970)));
evalcond[4]=(((r22*x10964))+((sj1*sj2))+((r21*x10971))+(((-1.0)*x10969*x10970))+(((-1.0)*cj2*x10967)));
evalcond[5]=(((x10963*x10965))+(((-1.0)*cj2*sj1))+(((-1.0)*x10966*x10970))+(((-1.0)*sj2*x10967))+((r12*x10964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10974=((1.0)*gconst5);
CheckValue<IkReal> x10975=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10974))+(((-1.0)*gconst4*r10)))),-1);
if(!x10975.valid){
continue;
}
CheckValue<IkReal> x10976 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10974))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10975.value)))+(x10976.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10977=IKcos(j4);
IkReal x10978=IKsin(j4);
IkReal x10979=(gconst4*r11);
IkReal x10980=(gconst5*r10);
IkReal x10981=((1.0)*cj1);
IkReal x10982=(gconst5*r00);
IkReal x10983=(gconst5*r20);
IkReal x10984=((1.0)*x10977);
IkReal x10985=(gconst4*x10977);
IkReal x10986=((1.0)*x10978);
IkReal x10987=(gconst4*x10978);
evalcond[0]=(((r02*x10978))+((r01*x10985))+(((-1.0)*x10982*x10984)));
evalcond[1]=((((-1.0)*x10983*x10986))+((r21*x10987))+(((-1.0)*r22*x10984)));
evalcond[2]=(((x10978*x10979))+(((-1.0)*r12*x10984))+(((-1.0)*x10980*x10986)));
evalcond[3]=((-1.0)+((r01*x10987))+(((-1.0)*x10982*x10986))+(((-1.0)*r02*x10984)));
evalcond[4]=((((-1.0)*x10983*x10984))+((r21*x10985))+(((-1.0)*cj2*x10981))+((r22*x10978))+((sj1*sj2)));
evalcond[5]=((((-1.0)*sj2*x10981))+(((-1.0)*cj2*sj1))+((x10977*x10979))+(((-1.0)*x10980*x10984))+((r12*x10978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10988 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10988.valid){
continue;
}
CheckValue<IkReal> x10989=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10988.value)+(((1.5707963267949)*(x10989.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10990=IKcos(j4);
IkReal x10991=IKsin(j4);
IkReal x10992=(gconst4*r11);
IkReal x10993=(gconst5*r10);
IkReal x10994=((1.0)*cj1);
IkReal x10995=(gconst5*r00);
IkReal x10996=(gconst5*r20);
IkReal x10997=((1.0)*x10990);
IkReal x10998=(gconst4*x10990);
IkReal x10999=((1.0)*x10991);
IkReal x11000=(gconst4*x10991);
evalcond[0]=(((r01*x10998))+(((-1.0)*x10995*x10997))+((r02*x10991)));
evalcond[1]=((((-1.0)*r22*x10997))+((r21*x11000))+(((-1.0)*x10996*x10999)));
evalcond[2]=((((-1.0)*x10993*x10999))+((x10991*x10992))+(((-1.0)*r12*x10997)));
evalcond[3]=((-1.0)+(((-1.0)*x10995*x10999))+((r01*x11000))+(((-1.0)*r02*x10997)));
evalcond[4]=(((r22*x10991))+((r21*x10998))+(((-1.0)*cj2*x10994))+((sj1*sj2))+(((-1.0)*x10996*x10997)));
evalcond[5]=(((r12*x10991))+(((-1.0)*x10993*x10997))+(((-1.0)*sj2*x10994))+(((-1.0)*cj2*sj1))+((x10990*x10992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11001=((-1.0)*r21);
CheckValue<IkReal> x11004 = IKatan2WithCheck(IkReal(x11001),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11004.valid){
continue;
}
IkReal x11002=((1.0)*(x11004.value));
IkReal x11003=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11002)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11002)));
IkReal gconst4=(x11001*x11003);
IkReal gconst5=((1.0)*r20*x11003);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11005=((-1.0)*r21);
CheckValue<IkReal> x11008 = IKatan2WithCheck(IkReal(x11005),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11008.valid){
continue;
}
IkReal x11006=((1.0)*(x11008.value));
IkReal x11007=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11006)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11006)));
IkReal gconst4=(x11005*x11007);
IkReal gconst5=((1.0)*r20*x11007);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11009=((-1.0)*r21);
CheckValue<IkReal> x11012 = IKatan2WithCheck(IkReal(x11009),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11012.valid){
continue;
}
IkReal x11010=((1.0)*(x11012.value));
IkReal x11011=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11010)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11010)));
IkReal gconst4=(x11009*x11011);
IkReal gconst5=((1.0)*r20*x11011);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11013=(gconst4*r01);
IkReal x11014=(gconst5*r00);
CheckValue<IkReal> x11015 = IKatan2WithCheck(IkReal((x11013+(((-1.0)*x11014)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11015.valid){
continue;
}
CheckValue<IkReal> x11016=IKPowWithIntegerCheck(IKsign(((x11014*x11014)+(x11013*x11013)+(r02*r02)+(((-2.0)*x11013*x11014)))),-1);
if(!x11016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11015.value)+(((1.5707963267949)*(x11016.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11017=IKcos(j4);
IkReal x11018=IKsin(j4);
IkReal x11019=(gconst4*r11);
IkReal x11020=(gconst5*r10);
IkReal x11021=(gconst5*r00);
IkReal x11022=(gconst5*r20);
IkReal x11023=((1.0)*x11017);
IkReal x11024=(gconst4*x11017);
IkReal x11025=((1.0)*x11018);
IkReal x11026=(gconst4*x11018);
evalcond[0]=(((r01*x11024))+(((-1.0)*x11021*x11023))+((r02*x11018)));
evalcond[1]=(((r21*x11026))+(((-1.0)*r22*x11023))+(((-1.0)*x11022*x11025)));
evalcond[2]=(((x11018*x11019))+(((-1.0)*r12*x11023))+(((-1.0)*x11020*x11025)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11023))+((r01*x11026))+(((-1.0)*x11021*x11025)));
evalcond[4]=(((cj2*sj1))+((r21*x11024))+((cj1*sj2))+((r22*x11018))+(((-1.0)*x11022*x11023)));
evalcond[5]=(((x11017*x11019))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11018))+(((-1.0)*x11020*x11023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11027=((1.0)*gconst5);
CheckValue<IkReal> x11028 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11027))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11028.valid){
continue;
}
CheckValue<IkReal> x11029=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11027))+(((-1.0)*gconst4*r10)))),-1);
if(!x11029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11028.value)+(((1.5707963267949)*(x11029.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11030=IKcos(j4);
IkReal x11031=IKsin(j4);
IkReal x11032=(gconst4*r11);
IkReal x11033=(gconst5*r10);
IkReal x11034=(gconst5*r00);
IkReal x11035=(gconst5*r20);
IkReal x11036=((1.0)*x11030);
IkReal x11037=(gconst4*x11030);
IkReal x11038=((1.0)*x11031);
IkReal x11039=(gconst4*x11031);
evalcond[0]=((((-1.0)*x11034*x11036))+((r01*x11037))+((r02*x11031)));
evalcond[1]=(((r21*x11039))+(((-1.0)*r22*x11036))+(((-1.0)*x11035*x11038)));
evalcond[2]=((((-1.0)*x11033*x11038))+(((-1.0)*r12*x11036))+((x11031*x11032)));
evalcond[3]=((-1.0)+(((-1.0)*x11034*x11038))+(((-1.0)*r02*x11036))+((r01*x11039)));
evalcond[4]=(((cj2*sj1))+((r21*x11037))+((cj1*sj2))+(((-1.0)*x11035*x11036))+((r22*x11031)));
evalcond[5]=(((x11030*x11032))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11031))+(((-1.0)*x11033*x11036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11040 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11040.valid){
continue;
}
CheckValue<IkReal> x11041=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11040.value)+(((1.5707963267949)*(x11041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11042=IKcos(j4);
IkReal x11043=IKsin(j4);
IkReal x11044=(gconst4*r11);
IkReal x11045=(gconst5*r10);
IkReal x11046=(gconst5*r00);
IkReal x11047=(gconst5*r20);
IkReal x11048=((1.0)*x11042);
IkReal x11049=(gconst4*x11042);
IkReal x11050=((1.0)*x11043);
IkReal x11051=(gconst4*x11043);
evalcond[0]=(((r01*x11049))+(((-1.0)*x11046*x11048))+((r02*x11043)));
evalcond[1]=((((-1.0)*r22*x11048))+(((-1.0)*x11047*x11050))+((r21*x11051)));
evalcond[2]=((((-1.0)*x11045*x11050))+(((-1.0)*r12*x11048))+((x11043*x11044)));
evalcond[3]=((-1.0)+(((-1.0)*x11046*x11050))+((r01*x11051))+(((-1.0)*r02*x11048)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x11043))+((r21*x11049))+(((-1.0)*x11047*x11048)));
evalcond[5]=((((-1.0)*x11045*x11048))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11042*x11044))+((r12*x11043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11052=((-1.0)*r21);
CheckValue<IkReal> x11055 = IKatan2WithCheck(IkReal(x11052),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11055.valid){
continue;
}
IkReal x11053=((1.0)*(x11055.value));
IkReal x11054=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11053)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11053)));
IkReal gconst4=(x11052*x11054);
IkReal gconst5=((1.0)*r20*x11054);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11056=((-1.0)*r21);
CheckValue<IkReal> x11059 = IKatan2WithCheck(IkReal(x11056),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11059.valid){
continue;
}
IkReal x11057=((1.0)*(x11059.value));
IkReal x11058=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11057)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11057)));
IkReal gconst4=(x11056*x11058);
IkReal gconst5=((1.0)*r20*x11058);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11060=((-1.0)*r21);
CheckValue<IkReal> x11063 = IKatan2WithCheck(IkReal(x11060),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11063.valid){
continue;
}
IkReal x11061=((1.0)*(x11063.value));
IkReal x11062=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11061)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11061)));
IkReal gconst4=(x11060*x11062);
IkReal gconst5=((1.0)*r20*x11062);
IkReal x11064=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11068=IKPowWithIntegerCheck(x11064,-1);
if(!x11068.valid){
continue;
}
IkReal x11065=x11068.value;
IkReal x11066=((1.0)*x11065);
IkReal x11067=((((-2.0)*r00*r01*r20*r21*x11065))+(((-1.0)*(r02*r02)))+(((-1.0)*x11066*(r00*r00)*(r20*r20)))+(((-1.0)*x11066*(r01*r01)*(r21*r21))));
j4eval[0]=x11067;
j4eval[1]=r02;
j4eval[2]=x11064;
j4eval[3]=IKsign(x11067);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11069=(gconst5*r00);
IkReal x11070=(gconst4*r01);
CheckValue<IkReal> x11071 = IKatan2WithCheck(IkReal((x11069+(((-1.0)*x11070)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11071.valid){
continue;
}
CheckValue<IkReal> x11072=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x11069*x11070))+(((-1.0)*(x11070*x11070)))+(((-1.0)*(x11069*x11069))))),-1);
if(!x11072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11071.value)+(((1.5707963267949)*(x11072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11073=IKsin(j4);
IkReal x11074=IKcos(j4);
IkReal x11075=(gconst4*r11);
IkReal x11076=(gconst5*r10);
IkReal x11077=(gconst4*r01);
IkReal x11078=(gconst5*r00);
IkReal x11079=(gconst4*r21);
IkReal x11080=(gconst5*r20);
IkReal x11081=((1.0)*x11074);
IkReal x11082=((1.0)*x11073);
evalcond[0]=((((-1.0)*x11080*x11082))+((x11073*x11079))+(((-1.0)*r22*x11081)));
evalcond[1]=((((-1.0)*x11076*x11082))+((x11073*x11075))+(((-1.0)*r12*x11081)));
evalcond[2]=((((-1.0)*x11077*x11081))+(((-1.0)*r02*x11082))+((x11074*x11078)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11081))+((x11073*x11077))+(((-1.0)*x11078*x11082)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11074*x11080))+(((-1.0)*r22*x11082))+(((-1.0)*x11079*x11081)));
evalcond[5]=((((-1.0)*x11075*x11081))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11082))+((x11074*x11076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11083=((1.0)*gconst5);
CheckValue<IkReal> x11084 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11083))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11084.valid){
continue;
}
CheckValue<IkReal> x11085=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11083))+(((-1.0)*gconst4*r10)))),-1);
if(!x11085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11084.value)+(((1.5707963267949)*(x11085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11086=IKsin(j4);
IkReal x11087=IKcos(j4);
IkReal x11088=(gconst4*r11);
IkReal x11089=(gconst5*r10);
IkReal x11090=(gconst4*r01);
IkReal x11091=(gconst5*r00);
IkReal x11092=(gconst4*r21);
IkReal x11093=(gconst5*r20);
IkReal x11094=((1.0)*x11087);
IkReal x11095=((1.0)*x11086);
evalcond[0]=((((-1.0)*r22*x11094))+(((-1.0)*x11093*x11095))+((x11086*x11092)));
evalcond[1]=(((x11086*x11088))+(((-1.0)*r12*x11094))+(((-1.0)*x11089*x11095)));
evalcond[2]=((((-1.0)*r02*x11095))+(((-1.0)*x11090*x11094))+((x11087*x11091)));
evalcond[3]=((-1.0)+(((-1.0)*x11091*x11095))+(((-1.0)*r02*x11094))+((x11086*x11090)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11095))+((cj1*sj2))+(((-1.0)*x11092*x11094))+((x11087*x11093)));
evalcond[5]=((((-1.0)*r12*x11095))+((x11087*x11089))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11088*x11094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11096 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11096.valid){
continue;
}
CheckValue<IkReal> x11097=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11096.value)+(((1.5707963267949)*(x11097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11098=IKsin(j4);
IkReal x11099=IKcos(j4);
IkReal x11100=(gconst4*r11);
IkReal x11101=(gconst5*r10);
IkReal x11102=(gconst4*r01);
IkReal x11103=(gconst5*r00);
IkReal x11104=(gconst4*r21);
IkReal x11105=(gconst5*r20);
IkReal x11106=((1.0)*x11099);
IkReal x11107=((1.0)*x11098);
evalcond[0]=((((-1.0)*x11105*x11107))+((x11098*x11104))+(((-1.0)*r22*x11106)));
evalcond[1]=((((-1.0)*x11101*x11107))+(((-1.0)*r12*x11106))+((x11098*x11100)));
evalcond[2]=((((-1.0)*x11102*x11106))+(((-1.0)*r02*x11107))+((x11099*x11103)));
evalcond[3]=((-1.0)+(((-1.0)*x11103*x11107))+(((-1.0)*r02*x11106))+((x11098*x11102)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11104*x11106))+((cj1*sj2))+(((-1.0)*r22*x11107))+((x11099*x11105)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11100*x11106))+(((-1.0)*r12*x11107))+((x11099*x11101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11108=gconst4*gconst4;
IkReal x11109=gconst5*gconst5;
IkReal x11110=(r01*r20);
IkReal x11111=(gconst4*sj3);
IkReal x11112=(r01*r21);
IkReal x11113=((1.0)*cj3);
IkReal x11114=(r00*r21);
IkReal x11115=(r00*r20);
IkReal x11116=(cj3*gconst4*gconst5);
IkReal x11117=((1.0)*x11109);
CheckValue<IkReal> x11118 = IKatan2WithCheck(IkReal((((r00*r22*x11111))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x11108*x11114))+(((-1.0)*sj3*x11110*x11117))+(((-1.0)*gconst5*x11111*x11115))+((gconst5*x11111*x11112)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11118.valid){
continue;
}
CheckValue<IkReal> x11119=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11109*x11113*x11115))+(((-1.0)*x11108*x11112*x11113))+(((-1.0)*r02*r22*x11113))+((x11110*x11116))+((x11114*x11116)))),-1);
if(!x11119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11118.value)+(((1.5707963267949)*(x11119.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11120=IKsin(j4);
IkReal x11121=IKcos(j4);
IkReal x11122=(sj1*sj2);
IkReal x11123=(gconst5*sj3);
IkReal x11124=(gconst4*r11);
IkReal x11125=(gconst5*r10);
IkReal x11126=((1.0)*cj1);
IkReal x11127=(gconst4*r01);
IkReal x11128=(cj2*sj1);
IkReal x11129=(gconst5*r00);
IkReal x11130=(gconst4*sj3);
IkReal x11131=(cj3*gconst5);
IkReal x11132=(cj3*gconst4);
IkReal x11133=(gconst4*r21);
IkReal x11134=(cj2*x11126);
IkReal x11135=((1.0)*x11121);
IkReal x11136=((1.0)*x11120);
IkReal x11137=(cj3*x11120);
IkReal x11138=(cj3*x11121);
evalcond[0]=(((x11120*x11133))+(((-1.0)*r22*x11135))+(((-1.0)*gconst5*r20*x11136)));
evalcond[1]=(((x11120*x11124))+(((-1.0)*x11125*x11136))+(((-1.0)*r12*x11135)));
evalcond[2]=((-1.0)+(((-1.0)*x11129*x11136))+((x11120*x11127))+(((-1.0)*r02*x11135)));
evalcond[3]=(((r02*x11137))+(((-1.0)*cj3*x11129*x11135))+((x11127*x11138))+((r01*x11123))+((r00*x11130)));
evalcond[4]=((((-1.0)*r02*sj3*x11136))+((r00*x11121*x11123))+(((-1.0)*sj3*x11127*x11135))+((r01*x11131))+((r00*x11132)));
evalcond[5]=(((r22*x11137))+((r21*x11123))+((r21*x11121*x11132))+((cj1*sj2))+x11128+((r20*x11130))+(((-1.0)*r20*x11131*x11135)));
evalcond[6]=(((x11124*x11138))+(((-1.0)*cj3*x11125*x11135))+x11122+((r10*x11130))+((r11*x11123))+(((-1.0)*x11134))+((r12*x11137)));
evalcond[7]=((((-1.0)*r21*x11130*x11135))+((r21*x11131))+x11122+(((-1.0)*r22*sj3*x11136))+((r20*x11132))+(((-1.0)*x11134))+((r20*x11121*x11123)));
evalcond[8]=((((-1.0)*x11128))+(((-1.0)*r12*sj3*x11136))+((r10*x11121*x11123))+((r10*x11132))+((r11*x11131))+(((-1.0)*sj2*x11126))+(((-1.0)*sj3*x11124*x11135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11139=((1.0)*gconst5);
CheckValue<IkReal> x11140 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11139))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11140.valid){
continue;
}
CheckValue<IkReal> x11141=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11139))+(((-1.0)*gconst4*r10)))),-1);
if(!x11141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11140.value)+(((1.5707963267949)*(x11141.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11142=IKsin(j4);
IkReal x11143=IKcos(j4);
IkReal x11144=(sj1*sj2);
IkReal x11145=(gconst5*sj3);
IkReal x11146=(gconst4*r11);
IkReal x11147=(gconst5*r10);
IkReal x11148=((1.0)*cj1);
IkReal x11149=(gconst4*r01);
IkReal x11150=(cj2*sj1);
IkReal x11151=(gconst5*r00);
IkReal x11152=(gconst4*sj3);
IkReal x11153=(cj3*gconst5);
IkReal x11154=(cj3*gconst4);
IkReal x11155=(gconst4*r21);
IkReal x11156=(cj2*x11148);
IkReal x11157=((1.0)*x11143);
IkReal x11158=((1.0)*x11142);
IkReal x11159=(cj3*x11142);
IkReal x11160=(cj3*x11143);
evalcond[0]=((((-1.0)*gconst5*r20*x11158))+(((-1.0)*r22*x11157))+((x11142*x11155)));
evalcond[1]=(((x11142*x11146))+(((-1.0)*x11147*x11158))+(((-1.0)*r12*x11157)));
evalcond[2]=((-1.0)+(((-1.0)*x11151*x11158))+((x11142*x11149))+(((-1.0)*r02*x11157)));
evalcond[3]=(((r01*x11145))+((r00*x11152))+((x11149*x11160))+(((-1.0)*cj3*x11151*x11157))+((r02*x11159)));
evalcond[4]=(((r00*x11154))+((r01*x11153))+((r00*x11143*x11145))+(((-1.0)*r02*sj3*x11158))+(((-1.0)*sj3*x11149*x11157)));
evalcond[5]=((((-1.0)*r20*x11153*x11157))+((r22*x11159))+((r21*x11145))+((cj1*sj2))+((r21*x11143*x11154))+x11150+((r20*x11152)));
evalcond[6]=(((x11146*x11160))+(((-1.0)*cj3*x11147*x11157))+((r11*x11145))+x11144+((r12*x11159))+((r10*x11152))+(((-1.0)*x11156)));
evalcond[7]=(((r20*x11143*x11145))+((r21*x11153))+x11144+(((-1.0)*r21*x11152*x11157))+((r20*x11154))+(((-1.0)*r22*sj3*x11158))+(((-1.0)*x11156)));
evalcond[8]=((((-1.0)*x11150))+((r10*x11143*x11145))+(((-1.0)*sj3*x11146*x11157))+((r11*x11153))+(((-1.0)*r12*sj3*x11158))+((r10*x11154))+(((-1.0)*sj2*x11148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11161 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11161.valid){
continue;
}
CheckValue<IkReal> x11162=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11161.value)+(((1.5707963267949)*(x11162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11163=IKsin(j4);
IkReal x11164=IKcos(j4);
IkReal x11165=(sj1*sj2);
IkReal x11166=(gconst5*sj3);
IkReal x11167=(gconst4*r11);
IkReal x11168=(gconst5*r10);
IkReal x11169=((1.0)*cj1);
IkReal x11170=(gconst4*r01);
IkReal x11171=(cj2*sj1);
IkReal x11172=(gconst5*r00);
IkReal x11173=(gconst4*sj3);
IkReal x11174=(cj3*gconst5);
IkReal x11175=(cj3*gconst4);
IkReal x11176=(gconst4*r21);
IkReal x11177=(cj2*x11169);
IkReal x11178=((1.0)*x11164);
IkReal x11179=((1.0)*x11163);
IkReal x11180=(cj3*x11163);
IkReal x11181=(cj3*x11164);
evalcond[0]=((((-1.0)*r22*x11178))+((x11163*x11176))+(((-1.0)*gconst5*r20*x11179)));
evalcond[1]=((((-1.0)*r12*x11178))+((x11163*x11167))+(((-1.0)*x11168*x11179)));
evalcond[2]=((-1.0)+(((-1.0)*x11172*x11179))+((x11163*x11170))+(((-1.0)*r02*x11178)));
evalcond[3]=(((x11170*x11181))+((r01*x11166))+((r00*x11173))+((r02*x11180))+(((-1.0)*cj3*x11172*x11178)));
evalcond[4]=(((r00*x11175))+(((-1.0)*sj3*x11170*x11178))+((r01*x11174))+(((-1.0)*r02*sj3*x11179))+((r00*x11164*x11166)));
evalcond[5]=((((-1.0)*r20*x11174*x11178))+((r21*x11164*x11175))+((r20*x11173))+((cj1*sj2))+x11171+((r22*x11180))+((r21*x11166)));
evalcond[6]=(((r12*x11180))+((x11167*x11181))+((r11*x11166))+(((-1.0)*x11177))+x11165+((r10*x11173))+(((-1.0)*cj3*x11168*x11178)));
evalcond[7]=((((-1.0)*r22*sj3*x11179))+((r20*x11164*x11166))+((r20*x11175))+(((-1.0)*x11177))+x11165+(((-1.0)*r21*x11173*x11178))+((r21*x11174)));
evalcond[8]=((((-1.0)*sj3*x11167*x11178))+((r11*x11174))+(((-1.0)*sj2*x11169))+(((-1.0)*x11171))+((r10*x11164*x11166))+(((-1.0)*r12*sj3*x11179))+((r10*x11175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11182=((-1.0)*r21);
CheckValue<IkReal> x11185 = IKatan2WithCheck(IkReal(x11182),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11185.valid){
continue;
}
IkReal x11183=((1.0)*(x11185.value));
IkReal x11184=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11183)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11183)));
IkReal gconst4=(x11182*x11184);
IkReal gconst5=((1.0)*r20*x11184);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11186=((-1.0)*r21);
CheckValue<IkReal> x11189 = IKatan2WithCheck(IkReal(x11186),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11189.valid){
continue;
}
IkReal x11187=((1.0)*(x11189.value));
IkReal x11188=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11187)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11187)));
IkReal gconst4=(x11186*x11188);
IkReal gconst5=((1.0)*r20*x11188);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11190=((-1.0)*r21);
CheckValue<IkReal> x11193 = IKatan2WithCheck(IkReal(x11190),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11193.valid){
continue;
}
IkReal x11191=((1.0)*(x11193.value));
IkReal x11192=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11191)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11191)));
IkReal gconst4=(x11190*x11192);
IkReal gconst5=((1.0)*r20*x11192);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11194=((-1.0)*r21);
CheckValue<IkReal> x11197 = IKatan2WithCheck(IkReal(x11194),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11197.valid){
continue;
}
IkReal x11195=((1.0)*(x11197.value));
IkReal x11196=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11195)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11195)));
IkReal gconst4=(x11194*x11196);
IkReal gconst5=((1.0)*r20*x11196);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11198=((-1.0)*r21);
CheckValue<IkReal> x11201 = IKatan2WithCheck(IkReal(x11198),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11201.valid){
continue;
}
IkReal x11199=((1.0)*(x11201.value));
IkReal x11200=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11199)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11199)));
IkReal gconst4=(x11198*x11200);
IkReal gconst5=((1.0)*r20*x11200);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11202=((-1.0)*r21);
CheckValue<IkReal> x11205 = IKatan2WithCheck(IkReal(x11202),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11205.valid){
continue;
}
IkReal x11203=((1.0)*(x11205.value));
IkReal x11204=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11203)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11203)));
IkReal gconst4=(x11202*x11204);
IkReal gconst5=((1.0)*r20*x11204);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11206=(gconst5*r00);
IkReal x11207=(gconst4*r01);
CheckValue<IkReal> x11208=IKPowWithIntegerCheck(IKsign(((x11207*x11207)+(x11206*x11206)+(((-2.0)*x11206*x11207))+(r02*r02))),-1);
if(!x11208.valid){
continue;
}
CheckValue<IkReal> x11209 = IKatan2WithCheck(IkReal((x11206+(((-1.0)*x11207)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11208.value)))+(x11209.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11210=IKsin(j4);
IkReal x11211=IKcos(j4);
IkReal x11212=(gconst4*r11);
IkReal x11213=(gconst5*r10);
IkReal x11214=(gconst4*r01);
IkReal x11215=(gconst5*r00);
IkReal x11216=(gconst4*r21);
IkReal x11217=(gconst5*r20);
IkReal x11218=((1.0)*x11211);
IkReal x11219=((1.0)*x11210);
evalcond[0]=((((-1.0)*x11217*x11219))+((x11210*x11216))+(((-1.0)*r22*x11218)));
evalcond[1]=(((x11210*x11212))+(((-1.0)*r12*x11218))+(((-1.0)*x11213*x11219)));
evalcond[2]=(((x11211*x11215))+(((-1.0)*r02*x11219))+(((-1.0)*x11214*x11218)));
evalcond[3]=((1.0)+((x11210*x11214))+(((-1.0)*r02*x11218))+(((-1.0)*x11215*x11219)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11211*x11213))+(((-1.0)*r12*x11219))+(((-1.0)*x11212*x11218)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11211*x11217))+(((-1.0)*x11216*x11218))+(((-1.0)*r22*x11219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11220=((1.0)*gconst5);
CheckValue<IkReal> x11221 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11220)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11221.valid){
continue;
}
CheckValue<IkReal> x11222=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11220))+(((-1.0)*gconst4*r20)))),-1);
if(!x11222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11221.value)+(((1.5707963267949)*(x11222.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11223=IKsin(j4);
IkReal x11224=IKcos(j4);
IkReal x11225=(gconst4*r11);
IkReal x11226=(gconst5*r10);
IkReal x11227=(gconst4*r01);
IkReal x11228=(gconst5*r00);
IkReal x11229=(gconst4*r21);
IkReal x11230=(gconst5*r20);
IkReal x11231=((1.0)*x11224);
IkReal x11232=((1.0)*x11223);
evalcond[0]=(((x11223*x11229))+(((-1.0)*x11230*x11232))+(((-1.0)*r22*x11231)));
evalcond[1]=((((-1.0)*x11226*x11232))+((x11223*x11225))+(((-1.0)*r12*x11231)));
evalcond[2]=((((-1.0)*r02*x11232))+((x11224*x11228))+(((-1.0)*x11227*x11231)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11231))+((x11223*x11227))+(((-1.0)*x11228*x11232)));
evalcond[4]=(((cj2*sj1))+((x11224*x11226))+((cj1*sj2))+(((-1.0)*x11225*x11231))+(((-1.0)*r12*x11232)));
evalcond[5]=(((x11224*x11230))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11229*x11231))+(((-1.0)*r22*x11232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11233=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11233.valid){
continue;
}
CheckValue<IkReal> x11234 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11233.value)))+(x11234.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11235=IKsin(j4);
IkReal x11236=IKcos(j4);
IkReal x11237=(gconst4*r11);
IkReal x11238=(gconst5*r10);
IkReal x11239=(gconst4*r01);
IkReal x11240=(gconst5*r00);
IkReal x11241=(gconst4*r21);
IkReal x11242=(gconst5*r20);
IkReal x11243=((1.0)*x11236);
IkReal x11244=((1.0)*x11235);
evalcond[0]=(((x11235*x11241))+(((-1.0)*x11242*x11244))+(((-1.0)*r22*x11243)));
evalcond[1]=(((x11235*x11237))+(((-1.0)*x11238*x11244))+(((-1.0)*r12*x11243)));
evalcond[2]=((((-1.0)*r02*x11244))+((x11236*x11240))+(((-1.0)*x11239*x11243)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11243))+((x11235*x11239))+(((-1.0)*x11240*x11244)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11236*x11238))+(((-1.0)*r12*x11244))+(((-1.0)*x11237*x11243)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11236*x11242))+(((-1.0)*x11241*x11243))+(((-1.0)*r22*x11244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11245=((-1.0)*r21);
CheckValue<IkReal> x11248 = IKatan2WithCheck(IkReal(x11245),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11248.valid){
continue;
}
IkReal x11246=((1.0)*(x11248.value));
IkReal x11247=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11246)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11246)));
IkReal gconst4=(x11245*x11247);
IkReal gconst5=((1.0)*r20*x11247);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11249=((-1.0)*r21);
CheckValue<IkReal> x11252 = IKatan2WithCheck(IkReal(x11249),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11252.valid){
continue;
}
IkReal x11250=((1.0)*(x11252.value));
IkReal x11251=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11250)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11250)));
IkReal gconst4=(x11249*x11251);
IkReal gconst5=((1.0)*r20*x11251);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11253=((-1.0)*r21);
CheckValue<IkReal> x11256 = IKatan2WithCheck(IkReal(x11253),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11256.valid){
continue;
}
IkReal x11254=((1.0)*(x11256.value));
IkReal x11255=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11254)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11254)));
IkReal gconst4=(x11253*x11255);
IkReal gconst5=((1.0)*r20*x11255);
IkReal x11257=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11261=IKPowWithIntegerCheck(x11257,-1);
if(!x11261.valid){
continue;
}
IkReal x11258=x11261.value;
IkReal x11259=((1.0)*x11258);
IkReal x11260=((((-2.0)*r00*r01*r20*r21*x11258))+(((-1.0)*x11259*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11259*(r01*r01)*(r21*r21))));
j4eval[0]=x11260;
j4eval[1]=IKsign(x11260);
j4eval[2]=r02;
j4eval[3]=x11257;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11262=(gconst4*r01);
IkReal x11263=(gconst5*r00);
CheckValue<IkReal> x11264 = IKatan2WithCheck(IkReal(((((-1.0)*x11263))+x11262)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11264.valid){
continue;
}
CheckValue<IkReal> x11265=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11263*x11263)))+(((-1.0)*(r02*r02)))+(((2.0)*x11262*x11263))+(((-1.0)*(x11262*x11262))))),-1);
if(!x11265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11264.value)+(((1.5707963267949)*(x11265.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11266=IKcos(j4);
IkReal x11267=IKsin(j4);
IkReal x11268=(gconst4*r11);
IkReal x11269=(gconst5*r10);
IkReal x11270=(gconst5*r00);
IkReal x11271=(gconst5*r20);
IkReal x11272=((1.0)*x11266);
IkReal x11273=(gconst4*x11266);
IkReal x11274=((1.0)*x11267);
IkReal x11275=(gconst4*x11267);
evalcond[0]=(((r01*x11273))+((r02*x11267))+(((-1.0)*x11270*x11272)));
evalcond[1]=(((r21*x11275))+(((-1.0)*r22*x11272))+(((-1.0)*x11271*x11274)));
evalcond[2]=((((-1.0)*r12*x11272))+((x11267*x11268))+(((-1.0)*x11269*x11274)));
evalcond[3]=((1.0)+((r01*x11275))+(((-1.0)*r02*x11272))+(((-1.0)*x11270*x11274)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11269*x11272))+((x11266*x11268))+((r12*x11267)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11267))+((r21*x11273))+(((-1.0)*x11271*x11272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11276=((1.0)*gconst5);
CheckValue<IkReal> x11277 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11276)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11277.valid){
continue;
}
CheckValue<IkReal> x11278=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11276))+(((-1.0)*gconst4*r20)))),-1);
if(!x11278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11277.value)+(((1.5707963267949)*(x11278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11279=IKcos(j4);
IkReal x11280=IKsin(j4);
IkReal x11281=(gconst4*r11);
IkReal x11282=(gconst5*r10);
IkReal x11283=(gconst5*r00);
IkReal x11284=(gconst5*r20);
IkReal x11285=((1.0)*x11279);
IkReal x11286=(gconst4*x11279);
IkReal x11287=((1.0)*x11280);
IkReal x11288=(gconst4*x11280);
evalcond[0]=(((r02*x11280))+(((-1.0)*x11283*x11285))+((r01*x11286)));
evalcond[1]=((((-1.0)*x11284*x11287))+(((-1.0)*r22*x11285))+((r21*x11288)));
evalcond[2]=(((x11280*x11281))+(((-1.0)*r12*x11285))+(((-1.0)*x11282*x11287)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11285))+(((-1.0)*x11283*x11287))+((r01*x11288)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11282*x11285))+((cj1*sj2))+((x11279*x11281))+((r12*x11280)));
evalcond[5]=(((r22*x11280))+(((-1.0)*x11284*x11285))+((r21*x11286))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11289=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11289.valid){
continue;
}
CheckValue<IkReal> x11290 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11289.value)))+(x11290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11291=IKcos(j4);
IkReal x11292=IKsin(j4);
IkReal x11293=(gconst4*r11);
IkReal x11294=(gconst5*r10);
IkReal x11295=(gconst5*r00);
IkReal x11296=(gconst5*r20);
IkReal x11297=((1.0)*x11291);
IkReal x11298=(gconst4*x11291);
IkReal x11299=((1.0)*x11292);
IkReal x11300=(gconst4*x11292);
evalcond[0]=(((r01*x11298))+((r02*x11292))+(((-1.0)*x11295*x11297)));
evalcond[1]=((((-1.0)*r22*x11297))+((r21*x11300))+(((-1.0)*x11296*x11299)));
evalcond[2]=((((-1.0)*x11294*x11299))+((x11292*x11293))+(((-1.0)*r12*x11297)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11297))+((r01*x11300))+(((-1.0)*x11295*x11299)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11291*x11293))+(((-1.0)*x11294*x11297))+((r12*x11292)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11298))+(((-1.0)*x11296*x11297))+((r22*x11292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11301=((-1.0)*r21);
CheckValue<IkReal> x11304 = IKatan2WithCheck(IkReal(x11301),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11304.valid){
continue;
}
IkReal x11302=((1.0)*(x11304.value));
IkReal x11303=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11302)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11302)));
IkReal gconst4=(x11301*x11303);
IkReal gconst5=((1.0)*r20*x11303);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11305=((-1.0)*r21);
CheckValue<IkReal> x11308 = IKatan2WithCheck(IkReal(x11305),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11308.valid){
continue;
}
IkReal x11306=((1.0)*(x11308.value));
IkReal x11307=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11306)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11306)));
IkReal gconst4=(x11305*x11307);
IkReal gconst5=((1.0)*r20*x11307);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11309=((-1.0)*r21);
CheckValue<IkReal> x11312 = IKatan2WithCheck(IkReal(x11309),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11312.valid){
continue;
}
IkReal x11310=((1.0)*(x11312.value));
IkReal x11311=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11310)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11310)));
IkReal gconst4=(x11309*x11311);
IkReal gconst5=((1.0)*r20*x11311);
IkReal x11313=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11317=IKPowWithIntegerCheck(x11313,-1);
if(!x11317.valid){
continue;
}
IkReal x11314=x11317.value;
IkReal x11315=((1.0)*x11314);
IkReal x11316=((((-2.0)*r00*r01*r20*r21*x11314))+(((-1.0)*x11315*(r01*r01)*(r21*r21)))+(((-1.0)*x11315*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02))));
j4eval[0]=x11316;
j4eval[1]=IKsign(x11316);
j4eval[2]=r02;
j4eval[3]=x11313;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11318=(gconst4*r01);
IkReal x11319=(gconst5*r00);
CheckValue<IkReal> x11320=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11319*x11319)))+(((2.0)*x11318*x11319))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11318*x11318))))),-1);
if(!x11320.valid){
continue;
}
CheckValue<IkReal> x11321 = IKatan2WithCheck(IkReal((x11318+(((-1.0)*x11319)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11320.value)))+(x11321.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11322=IKcos(j4);
IkReal x11323=IKsin(j4);
IkReal x11324=(gconst5*r10);
IkReal x11325=(gconst5*r00);
IkReal x11326=(gconst5*r20);
IkReal x11327=((1.0)*x11322);
IkReal x11328=(gconst4*x11323);
IkReal x11329=(gconst4*x11322);
IkReal x11330=((1.0)*x11323);
evalcond[0]=((((-1.0)*x11325*x11327))+((r02*x11323))+((r01*x11329)));
evalcond[1]=((((-1.0)*r22*x11327))+((r21*x11328))+(((-1.0)*x11326*x11330)));
evalcond[2]=((((-1.0)*x11324*x11330))+(((-1.0)*r12*x11327))+((r11*x11328)));
evalcond[3]=((1.0)+(((-1.0)*x11325*x11330))+(((-1.0)*r02*x11327))+((r01*x11328)));
evalcond[4]=(((cj2*sj1))+((r22*x11323))+((cj1*sj2))+(((-1.0)*x11326*x11327))+((r21*x11329)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x11323))+((r11*x11329))+(((-1.0)*x11324*x11327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11331=((1.0)*gconst5);
CheckValue<IkReal> x11332=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11331))+(((-1.0)*gconst4*r20)))),-1);
if(!x11332.valid){
continue;
}
CheckValue<IkReal> x11333 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11331)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11332.value)))+(x11333.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11334=IKcos(j4);
IkReal x11335=IKsin(j4);
IkReal x11336=(gconst5*r10);
IkReal x11337=(gconst5*r00);
IkReal x11338=(gconst5*r20);
IkReal x11339=((1.0)*x11334);
IkReal x11340=(gconst4*x11335);
IkReal x11341=(gconst4*x11334);
IkReal x11342=((1.0)*x11335);
evalcond[0]=((((-1.0)*x11337*x11339))+((r01*x11341))+((r02*x11335)));
evalcond[1]=((((-1.0)*r22*x11339))+(((-1.0)*x11338*x11342))+((r21*x11340)));
evalcond[2]=((((-1.0)*r12*x11339))+((r11*x11340))+(((-1.0)*x11336*x11342)));
evalcond[3]=((1.0)+(((-1.0)*x11337*x11342))+((r01*x11340))+(((-1.0)*r02*x11339)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11338*x11339))+((r22*x11335))+((r21*x11341)));
evalcond[5]=(((r11*x11341))+((r12*x11335))+(((-1.0)*x11336*x11339))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11343=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11343.valid){
continue;
}
CheckValue<IkReal> x11344 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11343.value)))+(x11344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11345=IKcos(j4);
IkReal x11346=IKsin(j4);
IkReal x11347=(gconst5*r10);
IkReal x11348=(gconst5*r00);
IkReal x11349=(gconst5*r20);
IkReal x11350=((1.0)*x11345);
IkReal x11351=(gconst4*x11346);
IkReal x11352=(gconst4*x11345);
IkReal x11353=((1.0)*x11346);
evalcond[0]=((((-1.0)*x11348*x11350))+((r01*x11352))+((r02*x11346)));
evalcond[1]=((((-1.0)*x11349*x11353))+(((-1.0)*r22*x11350))+((r21*x11351)));
evalcond[2]=((((-1.0)*r12*x11350))+((r11*x11351))+(((-1.0)*x11347*x11353)));
evalcond[3]=((1.0)+(((-1.0)*x11348*x11353))+((r01*x11351))+(((-1.0)*r02*x11350)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11349*x11350))+((r21*x11352))+((r22*x11346)));
evalcond[5]=(((r11*x11352))+(((-1.0)*sj1*sj2))+((r12*x11346))+(((-1.0)*x11347*x11350))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11354=((-1.0)*r21);
CheckValue<IkReal> x11357 = IKatan2WithCheck(IkReal(x11354),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11357.valid){
continue;
}
IkReal x11355=((1.0)*(x11357.value));
IkReal x11356=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11355)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11355)));
IkReal gconst4=(x11354*x11356);
IkReal gconst5=((1.0)*r20*x11356);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11358=((-1.0)*r21);
CheckValue<IkReal> x11361 = IKatan2WithCheck(IkReal(x11358),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11361.valid){
continue;
}
IkReal x11359=((1.0)*(x11361.value));
IkReal x11360=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11359)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11359)));
IkReal gconst4=(x11358*x11360);
IkReal gconst5=((1.0)*r20*x11360);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11362=((-1.0)*r21);
CheckValue<IkReal> x11365 = IKatan2WithCheck(IkReal(x11362),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11365.valid){
continue;
}
IkReal x11363=((1.0)*(x11365.value));
IkReal x11364=x10156;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11363)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11363)));
IkReal gconst4=(x11362*x11364);
IkReal gconst5=((1.0)*r20*x11364);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11366=(gconst5*r00);
IkReal x11367=(gconst4*r01);
CheckValue<IkReal> x11368=IKPowWithIntegerCheck(IKsign(((x11366*x11366)+(((-2.0)*x11366*x11367))+(r02*r02)+(x11367*x11367))),-1);
if(!x11368.valid){
continue;
}
CheckValue<IkReal> x11369 = IKatan2WithCheck(IkReal(((((-1.0)*x11367))+x11366)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11368.value)))+(x11369.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11370=IKsin(j4);
IkReal x11371=IKcos(j4);
IkReal x11372=(gconst4*r11);
IkReal x11373=(gconst5*r10);
IkReal x11374=(gconst5*r00);
IkReal x11375=(gconst5*r20);
IkReal x11376=((1.0)*x11371);
IkReal x11377=(gconst4*x11370);
IkReal x11378=((1.0)*x11370);
evalcond[0]=((((-1.0)*x11375*x11378))+((r21*x11377))+(((-1.0)*r22*x11376)));
evalcond[1]=(((x11370*x11372))+(((-1.0)*x11373*x11378))+(((-1.0)*r12*x11376)));
evalcond[2]=((((-1.0)*gconst4*r01*x11376))+(((-1.0)*r02*x11378))+((x11371*x11374)));
evalcond[3]=((1.0)+((r01*x11377))+(((-1.0)*x11374*x11378))+(((-1.0)*r02*x11376)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11378))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11376))+((x11371*x11375)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x11378))+(((-1.0)*x11372*x11376))+((cj1*cj2))+((x11371*x11373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11379=((1.0)*gconst5);
CheckValue<IkReal> x11380=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11379))+(((-1.0)*gconst4*r20)))),-1);
if(!x11380.valid){
continue;
}
CheckValue<IkReal> x11381 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11379))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11380.value)))+(x11381.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11382=IKsin(j4);
IkReal x11383=IKcos(j4);
IkReal x11384=(gconst4*r11);
IkReal x11385=(gconst5*r10);
IkReal x11386=(gconst5*r00);
IkReal x11387=(gconst5*r20);
IkReal x11388=((1.0)*x11383);
IkReal x11389=(gconst4*x11382);
IkReal x11390=((1.0)*x11382);
evalcond[0]=((((-1.0)*r22*x11388))+((r21*x11389))+(((-1.0)*x11387*x11390)));
evalcond[1]=(((x11382*x11384))+(((-1.0)*r12*x11388))+(((-1.0)*x11385*x11390)));
evalcond[2]=(((x11383*x11386))+(((-1.0)*r02*x11390))+(((-1.0)*gconst4*r01*x11388)));
evalcond[3]=((1.0)+((r01*x11389))+(((-1.0)*r02*x11388))+(((-1.0)*x11386*x11390)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x11388))+((cj1*sj2))+((x11383*x11387))+(((-1.0)*r22*x11390)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x11383*x11385))+(((-1.0)*x11384*x11388))+((cj1*cj2))+(((-1.0)*r12*x11390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11391=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11391.valid){
continue;
}
CheckValue<IkReal> x11392 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11391.value)))+(x11392.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11393=IKsin(j4);
IkReal x11394=IKcos(j4);
IkReal x11395=(gconst4*r11);
IkReal x11396=(gconst5*r10);
IkReal x11397=(gconst5*r00);
IkReal x11398=(gconst5*r20);
IkReal x11399=((1.0)*x11394);
IkReal x11400=(gconst4*x11393);
IkReal x11401=((1.0)*x11393);
evalcond[0]=(((r21*x11400))+(((-1.0)*r22*x11399))+(((-1.0)*x11398*x11401)));
evalcond[1]=((((-1.0)*x11396*x11401))+((x11393*x11395))+(((-1.0)*r12*x11399)));
evalcond[2]=((((-1.0)*gconst4*r01*x11399))+(((-1.0)*r02*x11401))+((x11394*x11397)));
evalcond[3]=((1.0)+(((-1.0)*x11397*x11401))+(((-1.0)*r02*x11399))+((r01*x11400)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11399))+((x11394*x11398))+(((-1.0)*r22*x11401)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x11394*x11396))+((cj1*cj2))+(((-1.0)*x11395*x11399))+(((-1.0)*r12*x11401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11402=((-1.0)*r21);
IkReal x11403=((-1.0)*r20);
CheckValue<IkReal> x11405 = IKatan2WithCheck(IkReal(x11402),IkReal(x11403),IKFAST_ATAN2_MAGTHRESH);
if(!x11405.valid){
continue;
}
IkReal x11404=((1.0)*(x11405.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11404)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11403);
rxp0_2=(py*r00);
rxp1_0=(py*x11402);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11404)));
IkReal gconst4=x11402;
IkReal gconst5=((1.0)*r20);
IkReal x11406=((1.0)*r01*r21);
IkReal x11407=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11406))+(((-1.0)*x11407)));
j4eval[1]=((((-1.0)*cj3*x11407))+(((-1.0)*cj3*x11406)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11408=((-1.0)*r21);
IkReal x11409=((-1.0)*r20);
CheckValue<IkReal> x11411 = IKatan2WithCheck(IkReal(x11408),IkReal(x11409),IKFAST_ATAN2_MAGTHRESH);
if(!x11411.valid){
continue;
}
IkReal x11410=((1.0)*(x11411.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11410)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11409);
rxp0_2=(py*r00);
rxp1_0=(py*x11408);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11410)));
IkReal gconst4=x11408;
IkReal gconst5=((1.0)*r20);
IkReal x11412=((1.0)*r01*r21);
IkReal x11413=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11412))+(((-1.0)*x11413)));
j4eval[1]=(((sj3*x11412))+((sj3*x11413)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11414=((-1.0)*r21);
IkReal x11415=((-1.0)*r20);
CheckValue<IkReal> x11417 = IKatan2WithCheck(IkReal(x11414),IkReal(x11415),IKFAST_ATAN2_MAGTHRESH);
if(!x11417.valid){
continue;
}
IkReal x11416=((1.0)*(x11417.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11416)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11415);
rxp0_2=(py*r00);
rxp1_0=(py*x11414);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11416)));
IkReal gconst4=x11414;
IkReal gconst5=((1.0)*r20);
IkReal x11418=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r01*r21*x11418))+(((-1.0)*r00*r20*x11418)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11419=((1.0)*gconst5);
CheckValue<IkReal> x11420=IKPowWithIntegerCheck(cj3,-1);
if(!x11420.valid){
continue;
}
CheckValue<IkReal> x11421=IKPowWithIntegerCheck(r12,-1);
if(!x11421.valid){
continue;
}
CheckValue<IkReal> x11422=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11419))+((cj3*gconst4*r01))),-1);
if(!x11422.valid){
continue;
}
if( IKabs(((x11420.value)*(x11421.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11422.value)*(((((-1.0)*r01*sj3*x11419))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11420.value)*(x11421.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11422.value)*(((((-1.0)*r01*sj3*x11419))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11420.value)*(x11421.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11422.value)*(((((-1.0)*r01*sj3*x11419))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11423=IKsin(j4);
IkReal x11424=IKcos(j4);
IkReal x11425=(cj2*sj1);
IkReal x11426=(cj1*sj2);
IkReal x11427=(sj1*sj2);
IkReal x11428=(gconst5*sj3);
IkReal x11429=(gconst5*r00);
IkReal x11430=(cj3*gconst5);
IkReal x11431=(gconst4*sj3);
IkReal x11432=(cj3*gconst4);
IkReal x11433=(cj1*cj2);
IkReal x11434=((1.0)*x11423);
IkReal x11435=(gconst4*x11423);
IkReal x11436=((1.0)*x11424);
IkReal x11437=(x11426+x11425);
IkReal x11438=(x11424*x11428);
IkReal x11439=(x11424*x11432);
evalcond[0]=((-1.0)*r12*x11424);
evalcond[1]=(((r21*x11435))+(((-1.0)*gconst5*r20*x11434)));
evalcond[2]=(x11433+((cj3*r12*x11423))+(((-1.0)*x11427)));
evalcond[3]=(x11437+(((-1.0)*r12*sj3*x11434)));
evalcond[4]=((1.0)+(((-1.0)*x11429*x11434))+((r01*x11435)));
evalcond[5]=((((-1.0)*cj3*x11429*x11436))+((r01*x11439))+((r01*x11428))+((r00*x11431)));
evalcond[6]=(((r01*x11430))+((r00*x11432))+((r00*x11438))+(((-1.0)*r01*x11431*x11436)));
evalcond[7]=(((r20*x11431))+x11437+(((-1.0)*r20*x11430*x11436))+((r21*x11428))+((r21*x11439)));
evalcond[8]=((((-1.0)*r21*x11431*x11436))+((r20*x11432))+((r20*x11438))+x11427+((r21*x11430))+(((-1.0)*x11433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11440=((1.0)*gconst4);
IkReal x11441=(gconst5*r00);
CheckValue<IkReal> x11442=IKPowWithIntegerCheck(((((-1.0)*x11441))+((gconst4*r01))),-1);
if(!x11442.valid){
continue;
}
CheckValue<IkReal> x11443=IKPowWithIntegerCheck((((sj3*x11441))+(((-1.0)*r01*sj3*x11440))),-1);
if(!x11443.valid){
continue;
}
if( IKabs(((-1.0)*(x11442.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11443.value)*(((((-1.0)*cj3*r00*x11440))+(((-1.0)*cj3*gconst5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11442.value)))+IKsqr(((x11443.value)*(((((-1.0)*cj3*r00*x11440))+(((-1.0)*cj3*gconst5*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11442.value)), ((x11443.value)*(((((-1.0)*cj3*r00*x11440))+(((-1.0)*cj3*gconst5*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11444=IKsin(j4);
IkReal x11445=IKcos(j4);
IkReal x11446=(cj2*sj1);
IkReal x11447=(cj1*sj2);
IkReal x11448=(sj1*sj2);
IkReal x11449=(gconst5*sj3);
IkReal x11450=(gconst5*r00);
IkReal x11451=(cj3*gconst5);
IkReal x11452=(gconst4*sj3);
IkReal x11453=(cj3*gconst4);
IkReal x11454=(cj1*cj2);
IkReal x11455=((1.0)*x11444);
IkReal x11456=(gconst4*x11444);
IkReal x11457=((1.0)*x11445);
IkReal x11458=(x11447+x11446);
IkReal x11459=(x11445*x11449);
IkReal x11460=(x11445*x11453);
evalcond[0]=((-1.0)*r12*x11445);
evalcond[1]=(((r21*x11456))+(((-1.0)*gconst5*r20*x11455)));
evalcond[2]=((((-1.0)*x11448))+((cj3*r12*x11444))+x11454);
evalcond[3]=(x11458+(((-1.0)*r12*sj3*x11455)));
evalcond[4]=((1.0)+((r01*x11456))+(((-1.0)*x11450*x11455)));
evalcond[5]=(((r01*x11460))+(((-1.0)*cj3*x11450*x11457))+((r00*x11452))+((r01*x11449)));
evalcond[6]=(((r01*x11451))+((r00*x11453))+((r00*x11459))+(((-1.0)*r01*x11452*x11457)));
evalcond[7]=(x11458+((r20*x11452))+(((-1.0)*r20*x11451*x11457))+((r21*x11449))+((r21*x11460)));
evalcond[8]=((((-1.0)*r21*x11452*x11457))+x11448+((r20*x11453))+((r20*x11459))+((r21*x11451))+(((-1.0)*x11454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11461=((1.0)*gconst5);
IkReal x11462=(gconst4*r01);
CheckValue<IkReal> x11463=IKPowWithIntegerCheck((x11462+(((-1.0)*r00*x11461))),-1);
if(!x11463.valid){
continue;
}
CheckValue<IkReal> x11464=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11461))+((cj3*x11462))),-1);
if(!x11464.valid){
continue;
}
if( IKabs(((-1.0)*(x11463.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11464.value)*(((((-1.0)*r01*sj3*x11461))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11463.value)))+IKsqr(((x11464.value)*(((((-1.0)*r01*sj3*x11461))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11463.value)), ((x11464.value)*(((((-1.0)*r01*sj3*x11461))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11465=IKsin(j4);
IkReal x11466=IKcos(j4);
IkReal x11467=(cj2*sj1);
IkReal x11468=(cj1*sj2);
IkReal x11469=(sj1*sj2);
IkReal x11470=(gconst5*sj3);
IkReal x11471=(gconst5*r00);
IkReal x11472=(cj3*gconst5);
IkReal x11473=(gconst4*sj3);
IkReal x11474=(cj3*gconst4);
IkReal x11475=(cj1*cj2);
IkReal x11476=((1.0)*x11465);
IkReal x11477=(gconst4*x11465);
IkReal x11478=((1.0)*x11466);
IkReal x11479=(x11467+x11468);
IkReal x11480=(x11466*x11470);
IkReal x11481=(x11466*x11474);
evalcond[0]=((-1.0)*r12*x11466);
evalcond[1]=((((-1.0)*gconst5*r20*x11476))+((r21*x11477)));
evalcond[2]=(x11475+((cj3*r12*x11465))+(((-1.0)*x11469)));
evalcond[3]=(x11479+(((-1.0)*r12*sj3*x11476)));
evalcond[4]=((1.0)+(((-1.0)*x11471*x11476))+((r01*x11477)));
evalcond[5]=(((r00*x11473))+((r01*x11481))+(((-1.0)*cj3*x11471*x11478))+((r01*x11470)));
evalcond[6]=(((r00*x11474))+(((-1.0)*r01*x11473*x11478))+((r00*x11480))+((r01*x11472)));
evalcond[7]=(x11479+((r20*x11473))+((r21*x11470))+(((-1.0)*r20*x11472*x11478))+((r21*x11481)));
evalcond[8]=((((-1.0)*x11475))+((r20*x11480))+x11469+((r20*x11474))+(((-1.0)*r21*x11473*x11478))+((r21*x11472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11482=gconst4*gconst4;
IkReal x11483=gconst5*gconst5;
IkReal x11484=(r01*r20);
IkReal x11485=(gconst4*sj3);
IkReal x11486=(r01*r21);
IkReal x11487=((1.0)*cj3);
IkReal x11488=(r00*r21);
IkReal x11489=(r00*r20);
IkReal x11490=(cj3*gconst4*gconst5);
IkReal x11491=((1.0)*x11483);
CheckValue<IkReal> x11492=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11483*x11487*x11489))+(((-1.0)*r02*r22*x11487))+((x11488*x11490))+((x11484*x11490))+(((-1.0)*x11482*x11486*x11487)))),-1);
if(!x11492.valid){
continue;
}
CheckValue<IkReal> x11493 = IKatan2WithCheck(IkReal((((r00*r22*x11485))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*gconst5*x11485*x11489))+((gconst5*x11485*x11486))+(((-1.0)*sj3*x11484*x11491))+((sj3*x11482*x11488)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11492.value)))+(x11493.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11494=IKsin(j4);
IkReal x11495=IKcos(j4);
IkReal x11496=(cj2*sj1);
IkReal x11497=(cj1*sj2);
IkReal x11498=(gconst5*sj3);
IkReal x11499=(gconst4*r11);
IkReal x11500=(sj1*sj2);
IkReal x11501=(gconst5*r10);
IkReal x11502=(cj1*cj2);
IkReal x11503=(gconst4*r01);
IkReal x11504=(gconst5*r00);
IkReal x11505=(gconst4*sj3);
IkReal x11506=(cj3*gconst5);
IkReal x11507=(cj3*gconst4);
IkReal x11508=(gconst4*r21);
IkReal x11509=((1.0)*x11495);
IkReal x11510=((1.0)*x11494);
IkReal x11511=(cj3*x11494);
IkReal x11512=(cj3*x11495);
IkReal x11513=(x11496+x11497);
evalcond[0]=(((x11494*x11508))+(((-1.0)*r22*x11509))+(((-1.0)*gconst5*r20*x11510)));
evalcond[1]=((((-1.0)*r12*x11509))+((x11494*x11499))+(((-1.0)*x11501*x11510)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11509))+((x11494*x11503))+(((-1.0)*x11504*x11510)));
evalcond[3]=(((r00*x11505))+((r02*x11511))+(((-1.0)*cj3*x11504*x11509))+((r01*x11498))+((x11503*x11512)));
evalcond[4]=(((r00*x11495*x11498))+((r00*x11507))+((r01*x11506))+(((-1.0)*r02*sj3*x11510))+(((-1.0)*sj3*x11503*x11509)));
evalcond[5]=(((r21*x11495*x11507))+x11513+((r21*x11498))+((r22*x11511))+((r20*x11505))+(((-1.0)*r20*x11506*x11509)));
evalcond[6]=(x11502+(((-1.0)*cj3*x11501*x11509))+((x11499*x11512))+((r11*x11498))+((r10*x11505))+(((-1.0)*x11500))+((r12*x11511)));
evalcond[7]=((((-1.0)*sj3*x11499*x11509))+((r10*x11495*x11498))+x11513+((r11*x11506))+(((-1.0)*r12*sj3*x11510))+((r10*x11507)));
evalcond[8]=((((-1.0)*r21*x11505*x11509))+x11500+((r21*x11506))+(((-1.0)*r22*sj3*x11510))+((r20*x11495*x11498))+(((-1.0)*x11502))+((r20*x11507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11514=((1.0)*gconst5);
CheckValue<IkReal> x11515 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11514)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11515.valid){
continue;
}
CheckValue<IkReal> x11516=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11514))+(((-1.0)*gconst4*r20)))),-1);
if(!x11516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11515.value)+(((1.5707963267949)*(x11516.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11517=IKsin(j4);
IkReal x11518=IKcos(j4);
IkReal x11519=(cj2*sj1);
IkReal x11520=(cj1*sj2);
IkReal x11521=(gconst5*sj3);
IkReal x11522=(gconst4*r11);
IkReal x11523=(sj1*sj2);
IkReal x11524=(gconst5*r10);
IkReal x11525=(cj1*cj2);
IkReal x11526=(gconst4*r01);
IkReal x11527=(gconst5*r00);
IkReal x11528=(gconst4*sj3);
IkReal x11529=(cj3*gconst5);
IkReal x11530=(cj3*gconst4);
IkReal x11531=(gconst4*r21);
IkReal x11532=((1.0)*x11518);
IkReal x11533=((1.0)*x11517);
IkReal x11534=(cj3*x11517);
IkReal x11535=(cj3*x11518);
IkReal x11536=(x11520+x11519);
evalcond[0]=((((-1.0)*gconst5*r20*x11533))+((x11517*x11531))+(((-1.0)*r22*x11532)));
evalcond[1]=((((-1.0)*r12*x11532))+((x11517*x11522))+(((-1.0)*x11524*x11533)));
evalcond[2]=((1.0)+((x11517*x11526))+(((-1.0)*x11527*x11533))+(((-1.0)*r02*x11532)));
evalcond[3]=((((-1.0)*cj3*x11527*x11532))+((r01*x11521))+((r00*x11528))+((x11526*x11535))+((r02*x11534)));
evalcond[4]=((((-1.0)*r02*sj3*x11533))+((r00*x11530))+((r01*x11529))+(((-1.0)*sj3*x11526*x11532))+((r00*x11518*x11521)));
evalcond[5]=(((r22*x11534))+x11536+((r21*x11521))+((r20*x11528))+(((-1.0)*r20*x11529*x11532))+((r21*x11518*x11530)));
evalcond[6]=(x11525+((r12*x11534))+((r11*x11521))+((r10*x11528))+(((-1.0)*x11523))+(((-1.0)*cj3*x11524*x11532))+((x11522*x11535)));
evalcond[7]=(((r10*x11518*x11521))+(((-1.0)*r12*sj3*x11533))+x11536+((r11*x11529))+(((-1.0)*sj3*x11522*x11532))+((r10*x11530)));
evalcond[8]=(x11523+((r21*x11529))+((r20*x11530))+(((-1.0)*r22*sj3*x11533))+((r20*x11518*x11521))+(((-1.0)*x11525))+(((-1.0)*r21*x11528*x11532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11537=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11537.valid){
continue;
}
CheckValue<IkReal> x11538 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11537.value)))+(x11538.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11539=IKsin(j4);
IkReal x11540=IKcos(j4);
IkReal x11541=(cj2*sj1);
IkReal x11542=(cj1*sj2);
IkReal x11543=(gconst5*sj3);
IkReal x11544=(gconst4*r11);
IkReal x11545=(sj1*sj2);
IkReal x11546=(gconst5*r10);
IkReal x11547=(cj1*cj2);
IkReal x11548=(gconst4*r01);
IkReal x11549=(gconst5*r00);
IkReal x11550=(gconst4*sj3);
IkReal x11551=(cj3*gconst5);
IkReal x11552=(cj3*gconst4);
IkReal x11553=(gconst4*r21);
IkReal x11554=((1.0)*x11540);
IkReal x11555=((1.0)*x11539);
IkReal x11556=(cj3*x11539);
IkReal x11557=(cj3*x11540);
IkReal x11558=(x11541+x11542);
evalcond[0]=((((-1.0)*gconst5*r20*x11555))+(((-1.0)*r22*x11554))+((x11539*x11553)));
evalcond[1]=((((-1.0)*x11546*x11555))+((x11539*x11544))+(((-1.0)*r12*x11554)));
evalcond[2]=((1.0)+((x11539*x11548))+(((-1.0)*r02*x11554))+(((-1.0)*x11549*x11555)));
evalcond[3]=(((r01*x11543))+((x11548*x11557))+((r02*x11556))+((r00*x11550))+(((-1.0)*cj3*x11549*x11554)));
evalcond[4]=((((-1.0)*sj3*x11548*x11554))+((r00*x11552))+((r01*x11551))+(((-1.0)*r02*sj3*x11555))+((r00*x11540*x11543)));
evalcond[5]=(x11558+((r22*x11556))+((r21*x11540*x11552))+(((-1.0)*r20*x11551*x11554))+((r21*x11543))+((r20*x11550)));
evalcond[6]=(((r12*x11556))+((x11544*x11557))+x11547+(((-1.0)*cj3*x11546*x11554))+(((-1.0)*x11545))+((r10*x11550))+((r11*x11543)));
evalcond[7]=(((r11*x11551))+(((-1.0)*r12*sj3*x11555))+x11558+((r10*x11540*x11543))+((r10*x11552))+(((-1.0)*sj3*x11544*x11554)));
evalcond[8]=(((r21*x11551))+(((-1.0)*r22*sj3*x11555))+x11545+(((-1.0)*r21*x11550*x11554))+((r20*x11540*x11543))+(((-1.0)*x11547))+((r20*x11552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11559=((-1.0)*r21);
IkReal x11560=((-1.0)*px);
CheckValue<IkReal> x11562 = IKatan2WithCheck(IkReal(x11559),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11562.valid){
continue;
}
IkReal x11561=((1.0)*(x11562.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11561)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11560);
rxp1_1=(px*r21);
rxp1_2=(r11*x11560);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11561)));
IkReal gconst4=x11559;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11563=((-1.0)*r21);
IkReal x11564=((-1.0)*px);
CheckValue<IkReal> x11566 = IKatan2WithCheck(IkReal(x11563),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11566.valid){
continue;
}
IkReal x11565=((1.0)*(x11566.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11565)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11564);
rxp1_1=(px*r21);
rxp1_2=(r11*x11564);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11565)));
IkReal gconst4=x11563;
IkReal gconst5=((1.0)*r20);
IkReal x11567=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=(((x11567*(r10*r10)))+(((-1.0)*x11567))+(((-1.0)*x11567*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11568=((-1.0)*r21);
IkReal x11569=((-1.0)*px);
CheckValue<IkReal> x11571 = IKatan2WithCheck(IkReal(x11568),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11571.valid){
continue;
}
IkReal x11570=((1.0)*(x11571.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11570)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11569);
rxp1_1=(px*r21);
rxp1_2=(r11*x11569);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11570)));
IkReal gconst4=x11568;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11572=((-1.0)*r21);
IkReal x11573=((-1.0)*px);
CheckValue<IkReal> x11575 = IKatan2WithCheck(IkReal(x11572),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11575.valid){
continue;
}
IkReal x11574=((1.0)*(x11575.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11574)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11573);
rxp1_1=(px*r21);
rxp1_2=(r11*x11573);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11574)));
IkReal gconst4=x11572;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11576=((-1.0)*r21);
IkReal x11577=((-1.0)*px);
CheckValue<IkReal> x11579 = IKatan2WithCheck(IkReal(x11576),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11579.valid){
continue;
}
IkReal x11578=((1.0)*(x11579.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11578)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11577);
rxp1_1=(px*r21);
rxp1_2=(r11*x11577);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11578)));
IkReal gconst4=x11576;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11580=((-1.0)*r21);
IkReal x11581=((-1.0)*px);
CheckValue<IkReal> x11583 = IKatan2WithCheck(IkReal(x11580),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11583.valid){
continue;
}
IkReal x11582=((1.0)*(x11583.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11582)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11581);
rxp1_1=(px*r21);
rxp1_2=(r11*x11581);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11582)));
IkReal gconst4=x11580;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11586=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11586.valid){
continue;
}
IkReal x11584=x11586.value;
IkReal x11585=(sj0*x11584);
cj4array[0]=(((cj2*sj1*x11585))+((cj1*sj2*x11585)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11587=IKsin(j4);
IkReal x11588=IKcos(j4);
IkReal x11589=(gconst5*r20);
IkReal x11590=(gconst4*x11587);
IkReal x11591=((1.0)*x11588);
IkReal x11592=((1.0)*x11587);
evalcond[0]=((-1.0)*r02*x11587);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11591)));
evalcond[2]=(((r21*x11590))+(((-1.0)*x11589*x11592)));
evalcond[3]=((((-1.0)*gconst5*r10*x11592))+((r11*x11590)));
evalcond[4]=(((x11588*x11589))+(((-1.0)*gconst4*r21*x11591))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11594=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11594.valid){
continue;
}
IkReal x11593=x11594.value;
cj4array[0]=(((cj1*cj2*x11593))+(((-1.0)*sj1*sj2*x11593)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11595=IKsin(j4);
IkReal x11596=IKcos(j4);
IkReal x11597=(gconst5*r10);
IkReal x11598=((1.0)*sj0);
IkReal x11599=(gconst4*x11595);
IkReal x11600=((1.0)*x11596);
IkReal x11601=((1.0)*x11595);
evalcond[0]=((-1.0)*r02*x11595);
evalcond[1]=((((-1.0)*r02*x11600))+(((-1.0)*x11598)));
evalcond[2]=((((-1.0)*gconst5*r20*x11601))+((r21*x11599)));
evalcond[3]=((((-1.0)*x11597*x11601))+((r11*x11599)));
evalcond[4]=((((-1.0)*gconst4*r11*x11600))+(((-1.0)*cj2*sj1*x11598))+(((-1.0)*cj1*sj2*x11598))+((x11596*x11597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11602=IKPowWithIntegerCheck(r02,-1);
if(!x11602.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11602.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11603=IKsin(j4);
IkReal x11604=IKcos(j4);
IkReal x11605=((1.0)*sj0);
IkReal x11606=(gconst5*x11604);
IkReal x11607=(gconst4*x11603);
IkReal x11608=((1.0)*gconst4*x11604);
IkReal x11609=((1.0)*gconst5*x11603);
evalcond[0]=((-1.0)*r02*x11603);
evalcond[1]=((((-1.0)*r20*x11609))+((r21*x11607)));
evalcond[2]=((((-1.0)*r10*x11609))+((r11*x11607)));
evalcond[3]=((((-1.0)*r21*x11608))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11606)));
evalcond[4]=((((-1.0)*r11*x11608))+(((-1.0)*cj1*sj2*x11605))+(((-1.0)*cj2*sj1*x11605))+((r10*x11606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11610=((-1.0)*r21);
IkReal x11611=((-1.0)*px);
CheckValue<IkReal> x11613 = IKatan2WithCheck(IkReal(x11610),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11613.valid){
continue;
}
IkReal x11612=((1.0)*(x11613.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11612)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11611);
rxp1_1=(px*r21);
rxp1_2=(r11*x11611);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11612)));
IkReal gconst4=x11610;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11614=((-1.0)*r21);
IkReal x11615=((-1.0)*px);
CheckValue<IkReal> x11617 = IKatan2WithCheck(IkReal(x11614),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11617.valid){
continue;
}
IkReal x11616=((1.0)*(x11617.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11616)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11615);
rxp1_1=(px*r21);
rxp1_2=(r11*x11615);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11616)));
IkReal gconst4=x11614;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11618=((-1.0)*r21);
IkReal x11619=((-1.0)*px);
CheckValue<IkReal> x11621 = IKatan2WithCheck(IkReal(x11618),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11621.valid){
continue;
}
IkReal x11620=((1.0)*(x11621.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11620)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11619);
rxp1_1=(px*r21);
rxp1_2=(r11*x11619);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11620)));
IkReal gconst4=x11618;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11624=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11624.valid){
continue;
}
IkReal x11622=x11624.value;
IkReal x11623=(sj0*x11622);
cj4array[0]=(((cj2*sj1*x11623))+((cj1*sj2*x11623)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11625=IKsin(j4);
IkReal x11626=IKcos(j4);
IkReal x11627=(gconst5*r20);
IkReal x11628=(gconst4*x11625);
IkReal x11629=((1.0)*x11626);
IkReal x11630=((1.0)*x11625);
evalcond[0]=(r02*x11625);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11629)));
evalcond[2]=(((r21*x11628))+(((-1.0)*x11627*x11630)));
evalcond[3]=(((r11*x11628))+(((-1.0)*gconst5*r10*x11630)));
evalcond[4]=(((gconst4*r21*x11626))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11627*x11629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11632=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11632.valid){
continue;
}
IkReal x11631=x11632.value;
cj4array[0]=(((cj1*cj2*x11631))+(((-1.0)*sj1*sj2*x11631)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11633=IKsin(j4);
IkReal x11634=IKcos(j4);
IkReal x11635=(gconst4*r11);
IkReal x11636=((1.0)*sj0);
IkReal x11637=(gconst5*r10);
IkReal x11638=((1.0)*x11634);
IkReal x11639=((1.0)*x11633);
evalcond[0]=(r02*x11633);
evalcond[1]=((((-1.0)*x11636))+(((-1.0)*r02*x11638)));
evalcond[2]=(((gconst4*r21*x11633))+(((-1.0)*gconst5*r20*x11639)));
evalcond[3]=((((-1.0)*x11637*x11639))+((x11633*x11635)));
evalcond[4]=((((-1.0)*x11637*x11638))+(((-1.0)*cj1*sj2*x11636))+(((-1.0)*cj2*sj1*x11636))+((x11634*x11635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11640=IKPowWithIntegerCheck(r02,-1);
if(!x11640.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11640.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11641=IKsin(j4);
IkReal x11642=IKcos(j4);
IkReal x11643=(gconst4*r11);
IkReal x11644=((1.0)*cj1);
IkReal x11645=(gconst4*r21);
IkReal x11646=((1.0)*gconst5*x11642);
IkReal x11647=((1.0)*gconst5*x11641);
evalcond[0]=(r02*x11641);
evalcond[1]=(((x11641*x11645))+(((-1.0)*r20*x11647)));
evalcond[2]=(((x11641*x11643))+(((-1.0)*r10*x11647)));
evalcond[3]=(((x11642*x11645))+((sj1*sj2))+(((-1.0)*r20*x11646))+(((-1.0)*cj2*x11644)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x11642*x11643))+(((-1.0)*r10*x11646))+(((-1.0)*sj0*sj2*x11644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11649=IKPowWithIntegerCheck(r02,-1);
if(!x11649.valid){
continue;
}
IkReal x11648=x11649.value;
CheckValue<IkReal> x11650=IKPowWithIntegerCheck(cj3,-1);
if(!x11650.valid){
continue;
}
if( IKabs((x11648*(x11650.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11648)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11648*(x11650.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11648))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11648*(x11650.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11648));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11651=IKsin(j4);
IkReal x11652=IKcos(j4);
IkReal x11653=(gconst5*sj3);
IkReal x11654=(gconst4*r11);
IkReal x11655=(sj1*sj2);
IkReal x11656=((1.0)*gconst5);
IkReal x11657=(cj2*sj1);
IkReal x11658=((1.0)*sj0);
IkReal x11659=((1.0)*cj0);
IkReal x11660=(gconst4*r21);
IkReal x11661=(cj1*sj2);
IkReal x11662=(cj3*gconst4);
IkReal x11663=(gconst4*sj3);
IkReal x11664=(cj3*gconst5);
IkReal x11665=(r20*x11652);
IkReal x11666=((1.0)*cj1*cj2);
IkReal x11667=(r10*x11652);
IkReal x11668=(cj3*x11652);
IkReal x11669=(r02*x11651);
IkReal x11670=((1.0)*sj3*x11652);
evalcond[0]=((((-1.0)*x11658))+(((-1.0)*r02*x11652)));
evalcond[1]=((((-1.0)*r20*x11651*x11656))+((x11651*x11660)));
evalcond[2]=(cj0+(((-1.0)*r10*x11651*x11656))+((x11651*x11654)));
evalcond[3]=((((-1.0)*cj1*cj2*x11659))+((cj0*x11655))+((cj3*x11669)));
evalcond[4]=((((-1.0)*x11659*x11661))+(((-1.0)*x11657*x11659))+(((-1.0)*sj3*x11669)));
evalcond[5]=(x11661+x11657+((r20*x11663))+(((-1.0)*cj3*x11656*x11665))+((r21*x11653))+((x11660*x11668)));
evalcond[6]=(((r21*x11664))+x11655+((r20*x11662))+(((-1.0)*x11660*x11670))+(((-1.0)*x11666))+((x11653*x11665)));
evalcond[7]=((((-1.0)*cj1*cj2*x11658))+((r11*x11653))+(((-1.0)*cj3*x11656*x11667))+((sj0*x11655))+((r10*x11663))+((x11654*x11668)));
evalcond[8]=((((-1.0)*x11657*x11658))+((r11*x11664))+((r10*x11662))+(((-1.0)*x11658*x11661))+((x11653*x11667))+(((-1.0)*x11654*x11670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11671=((1.0)*gconst5);
CheckValue<IkReal> x11672=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*r10*x11671))),-1);
if(!x11672.valid){
continue;
}
CheckValue<IkReal> x11673=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11671))+((cj3*gconst4*r21))),-1);
if(!x11673.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11672.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11673.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11671)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11672.value)))+IKsqr(((x11673.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11671))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11672.value)), ((x11673.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11671))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11674=IKsin(j4);
IkReal x11675=IKcos(j4);
IkReal x11676=(gconst5*sj3);
IkReal x11677=(gconst4*r11);
IkReal x11678=(sj1*sj2);
IkReal x11679=((1.0)*gconst5);
IkReal x11680=(cj2*sj1);
IkReal x11681=((1.0)*sj0);
IkReal x11682=((1.0)*cj0);
IkReal x11683=(gconst4*r21);
IkReal x11684=(cj1*sj2);
IkReal x11685=(cj3*gconst4);
IkReal x11686=(gconst4*sj3);
IkReal x11687=(cj3*gconst5);
IkReal x11688=(r20*x11675);
IkReal x11689=((1.0)*cj1*cj2);
IkReal x11690=(r10*x11675);
IkReal x11691=(cj3*x11675);
IkReal x11692=(r02*x11674);
IkReal x11693=((1.0)*sj3*x11675);
evalcond[0]=((((-1.0)*x11681))+(((-1.0)*r02*x11675)));
evalcond[1]=((((-1.0)*r20*x11674*x11679))+((x11674*x11683)));
evalcond[2]=(cj0+((x11674*x11677))+(((-1.0)*r10*x11674*x11679)));
evalcond[3]=(((cj0*x11678))+(((-1.0)*cj1*cj2*x11682))+((cj3*x11692)));
evalcond[4]=((((-1.0)*x11680*x11682))+(((-1.0)*sj3*x11692))+(((-1.0)*x11682*x11684)));
evalcond[5]=(x11684+x11680+((x11683*x11691))+((r21*x11676))+(((-1.0)*cj3*x11679*x11688))+((r20*x11686)));
evalcond[6]=(((x11676*x11688))+x11678+(((-1.0)*x11689))+((r21*x11687))+(((-1.0)*x11683*x11693))+((r20*x11685)));
evalcond[7]=((((-1.0)*cj3*x11679*x11690))+((r10*x11686))+((r11*x11676))+((x11677*x11691))+((sj0*x11678))+(((-1.0)*cj1*cj2*x11681)));
evalcond[8]=((((-1.0)*x11680*x11681))+(((-1.0)*x11681*x11684))+((r11*x11687))+((r10*x11685))+((x11676*x11690))+(((-1.0)*x11677*x11693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11694=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11694.valid){
continue;
}
CheckValue<IkReal> x11695=IKPowWithIntegerCheck(r02,-1);
if(!x11695.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11694.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11695.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11694.value)))+IKsqr(((-1.0)*sj0*(x11695.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11694.value)), ((-1.0)*sj0*(x11695.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11696=IKsin(j4);
IkReal x11697=IKcos(j4);
IkReal x11698=(gconst5*sj3);
IkReal x11699=(gconst4*r11);
IkReal x11700=(sj1*sj2);
IkReal x11701=((1.0)*gconst5);
IkReal x11702=(cj2*sj1);
IkReal x11703=((1.0)*sj0);
IkReal x11704=((1.0)*cj0);
IkReal x11705=(gconst4*r21);
IkReal x11706=(cj1*sj2);
IkReal x11707=(cj3*gconst4);
IkReal x11708=(gconst4*sj3);
IkReal x11709=(cj3*gconst5);
IkReal x11710=(r20*x11697);
IkReal x11711=((1.0)*cj1*cj2);
IkReal x11712=(r10*x11697);
IkReal x11713=(cj3*x11697);
IkReal x11714=(r02*x11696);
IkReal x11715=((1.0)*sj3*x11697);
evalcond[0]=((((-1.0)*x11703))+(((-1.0)*r02*x11697)));
evalcond[1]=(((x11696*x11705))+(((-1.0)*r20*x11696*x11701)));
evalcond[2]=(cj0+((x11696*x11699))+(((-1.0)*r10*x11696*x11701)));
evalcond[3]=(((cj0*x11700))+((cj3*x11714))+(((-1.0)*cj1*cj2*x11704)));
evalcond[4]=((((-1.0)*x11702*x11704))+(((-1.0)*x11704*x11706))+(((-1.0)*sj3*x11714)));
evalcond[5]=((((-1.0)*cj3*x11701*x11710))+x11706+x11702+((x11705*x11713))+((r20*x11708))+((r21*x11698)));
evalcond[6]=(x11700+(((-1.0)*x11711))+((x11698*x11710))+((r21*x11709))+(((-1.0)*x11705*x11715))+((r20*x11707)));
evalcond[7]=((((-1.0)*cj3*x11701*x11712))+((x11699*x11713))+((r11*x11698))+((sj0*x11700))+(((-1.0)*cj1*cj2*x11703))+((r10*x11708)));
evalcond[8]=((((-1.0)*x11703*x11706))+(((-1.0)*x11702*x11703))+((x11698*x11712))+(((-1.0)*x11699*x11715))+((r10*x11707))+((r11*x11709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11716=((1.0)*sj0);
IkReal x11717=((1.0)*gconst4);
CheckValue<IkReal> x11718 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11716))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst5*r00))+(((-1.0)*cj0*r01*x11717))+(((-1.0)*gconst4*r11*x11716))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11718.valid){
continue;
}
CheckValue<IkReal> x11719=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11717))+(((-1.0)*gconst5*r21)))),-1);
if(!x11719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11718.value)+(((1.5707963267949)*(x11719.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11720=IKsin(j4);
IkReal x11721=IKcos(j4);
IkReal x11722=(gconst5*sj3);
IkReal x11723=(cj3*gconst5);
IkReal x11724=(gconst4*r11);
IkReal x11725=(sj1*sj2);
IkReal x11726=(cj2*sj1);
IkReal x11727=((1.0)*sj0);
IkReal x11728=(gconst4*r01);
IkReal x11729=(gconst4*r21);
IkReal x11730=((1.0)*cj0);
IkReal x11731=(cj1*sj2);
IkReal x11732=(gconst4*sj3);
IkReal x11733=(cj3*gconst4);
IkReal x11734=((1.0)*x11721);
IkReal x11735=((1.0)*cj1*cj2);
IkReal x11736=(cj3*x11720);
IkReal x11737=(cj3*x11721);
IkReal x11738=((1.0)*gconst5*x11720);
IkReal x11739=((1.0)*sj3*x11720);
evalcond[0]=((((-1.0)*r20*x11738))+(((-1.0)*r22*x11734))+((x11720*x11729)));
evalcond[1]=(cj0+(((-1.0)*r10*x11738))+(((-1.0)*r12*x11734))+((x11720*x11724)));
evalcond[2]=((((-1.0)*x11727))+(((-1.0)*r00*x11738))+(((-1.0)*r02*x11734))+((x11720*x11728)));
evalcond[3]=(x11731+x11726+(((-1.0)*r20*x11723*x11734))+((x11729*x11737))+((r20*x11732))+((r21*x11722))+((r22*x11736)));
evalcond[4]=(((r20*x11721*x11722))+x11725+(((-1.0)*x11735))+(((-1.0)*sj3*x11729*x11734))+(((-1.0)*r22*x11739))+((r20*x11733))+((r21*x11723)));
evalcond[5]=(((r00*x11732))+((x11728*x11737))+((r01*x11722))+(((-1.0)*cj1*cj2*x11730))+((cj0*x11725))+((r02*x11736))+(((-1.0)*r00*x11723*x11734)));
evalcond[6]=(((sj0*x11725))+((r10*x11732))+(((-1.0)*r10*x11723*x11734))+(((-1.0)*cj1*cj2*x11727))+((x11724*x11737))+((r12*x11736))+((r11*x11722)));
evalcond[7]=((((-1.0)*x11726*x11730))+((r00*x11733))+((r01*x11723))+(((-1.0)*x11730*x11731))+(((-1.0)*sj3*x11728*x11734))+(((-1.0)*r02*x11739))+((r00*x11721*x11722)));
evalcond[8]=((((-1.0)*sj3*x11724*x11734))+((r10*x11721*x11722))+((r10*x11733))+(((-1.0)*r12*x11739))+(((-1.0)*x11726*x11727))+((r11*x11723))+(((-1.0)*x11727*x11731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11740=((1.0)*gconst5);
CheckValue<IkReal> x11741=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11740))+(((-1.0)*gconst4*r10)))),-1);
if(!x11741.valid){
continue;
}
CheckValue<IkReal> x11742 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11740))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11741.value)))+(x11742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11743=IKsin(j4);
IkReal x11744=IKcos(j4);
IkReal x11745=(gconst5*sj3);
IkReal x11746=(cj3*gconst5);
IkReal x11747=(gconst4*r11);
IkReal x11748=(sj1*sj2);
IkReal x11749=(cj2*sj1);
IkReal x11750=((1.0)*sj0);
IkReal x11751=(gconst4*r01);
IkReal x11752=(gconst4*r21);
IkReal x11753=((1.0)*cj0);
IkReal x11754=(cj1*sj2);
IkReal x11755=(gconst4*sj3);
IkReal x11756=(cj3*gconst4);
IkReal x11757=((1.0)*x11744);
IkReal x11758=((1.0)*cj1*cj2);
IkReal x11759=(cj3*x11743);
IkReal x11760=(cj3*x11744);
IkReal x11761=((1.0)*gconst5*x11743);
IkReal x11762=((1.0)*sj3*x11743);
evalcond[0]=(((x11743*x11752))+(((-1.0)*r22*x11757))+(((-1.0)*r20*x11761)));
evalcond[1]=((((-1.0)*r12*x11757))+cj0+(((-1.0)*r10*x11761))+((x11743*x11747)));
evalcond[2]=(((x11743*x11751))+(((-1.0)*r02*x11757))+(((-1.0)*x11750))+(((-1.0)*r00*x11761)));
evalcond[3]=(x11754+x11749+(((-1.0)*r20*x11746*x11757))+((x11752*x11760))+((r22*x11759))+((r21*x11745))+((r20*x11755)));
evalcond[4]=(x11748+((r20*x11744*x11745))+(((-1.0)*sj3*x11752*x11757))+(((-1.0)*r22*x11762))+(((-1.0)*x11758))+((r21*x11746))+((r20*x11756)));
evalcond[5]=(((x11751*x11760))+(((-1.0)*cj1*cj2*x11753))+((r01*x11745))+(((-1.0)*r00*x11746*x11757))+((cj0*x11748))+((r02*x11759))+((r00*x11755)));
evalcond[6]=((((-1.0)*cj1*cj2*x11750))+(((-1.0)*r10*x11746*x11757))+((sj0*x11748))+((r10*x11755))+((r12*x11759))+((x11747*x11760))+((r11*x11745)));
evalcond[7]=((((-1.0)*sj3*x11751*x11757))+((r01*x11746))+(((-1.0)*x11749*x11753))+((r00*x11744*x11745))+(((-1.0)*r02*x11762))+(((-1.0)*x11753*x11754))+((r00*x11756)));
evalcond[8]=((((-1.0)*r12*x11762))+((r10*x11756))+(((-1.0)*x11749*x11750))+(((-1.0)*x11750*x11754))+((r10*x11744*x11745))+(((-1.0)*sj3*x11747*x11757))+((r11*x11746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11763=((1.0)*gconst5);
CheckValue<IkReal> x11764=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11763)))),-1);
if(!x11764.valid){
continue;
}
CheckValue<IkReal> x11765 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11763))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11764.value)))+(x11765.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11766=IKsin(j4);
IkReal x11767=IKcos(j4);
IkReal x11768=(gconst5*sj3);
IkReal x11769=(cj3*gconst5);
IkReal x11770=(gconst4*r11);
IkReal x11771=(sj1*sj2);
IkReal x11772=(cj2*sj1);
IkReal x11773=((1.0)*sj0);
IkReal x11774=(gconst4*r01);
IkReal x11775=(gconst4*r21);
IkReal x11776=((1.0)*cj0);
IkReal x11777=(cj1*sj2);
IkReal x11778=(gconst4*sj3);
IkReal x11779=(cj3*gconst4);
IkReal x11780=((1.0)*x11767);
IkReal x11781=((1.0)*cj1*cj2);
IkReal x11782=(cj3*x11766);
IkReal x11783=(cj3*x11767);
IkReal x11784=((1.0)*gconst5*x11766);
IkReal x11785=((1.0)*sj3*x11766);
evalcond[0]=((((-1.0)*r20*x11784))+((x11766*x11775))+(((-1.0)*r22*x11780)));
evalcond[1]=(cj0+(((-1.0)*r12*x11780))+((x11766*x11770))+(((-1.0)*r10*x11784)));
evalcond[2]=(((x11766*x11774))+(((-1.0)*r00*x11784))+(((-1.0)*r02*x11780))+(((-1.0)*x11773)));
evalcond[3]=(x11772+x11777+((r20*x11778))+((r22*x11782))+(((-1.0)*r20*x11769*x11780))+((x11775*x11783))+((r21*x11768)));
evalcond[4]=(x11771+((r20*x11779))+(((-1.0)*r22*x11785))+(((-1.0)*sj3*x11775*x11780))+(((-1.0)*x11781))+((r21*x11769))+((r20*x11767*x11768)));
evalcond[5]=(((x11774*x11783))+((r02*x11782))+(((-1.0)*r00*x11769*x11780))+((r00*x11778))+((r01*x11768))+(((-1.0)*cj1*cj2*x11776))+((cj0*x11771)));
evalcond[6]=(((r11*x11768))+((r10*x11778))+((sj0*x11771))+((r12*x11782))+(((-1.0)*cj1*cj2*x11773))+(((-1.0)*r10*x11769*x11780))+((x11770*x11783)));
evalcond[7]=(((r00*x11767*x11768))+(((-1.0)*x11772*x11776))+(((-1.0)*sj3*x11774*x11780))+((r00*x11779))+(((-1.0)*x11776*x11777))+(((-1.0)*r02*x11785))+((r01*x11769)));
evalcond[8]=(((r11*x11769))+((r10*x11779))+(((-1.0)*r12*x11785))+((r10*x11767*x11768))+(((-1.0)*x11772*x11773))+(((-1.0)*x11773*x11777))+(((-1.0)*sj3*x11770*x11780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11786=((-1.0)*r10);
IkReal x11788 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11788)==0){
continue;
}
IkReal x11787=pow(x11788,-0.5);
CheckValue<IkReal> x11789 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11786),IKFAST_ATAN2_MAGTHRESH);
if(!x11789.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11789.value));
IkReal gconst7=(r11*x11787);
IkReal gconst8=(x11786*x11787);
CheckValue<IkReal> x11790 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11790.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11790.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11791=((-1.0)*r10);
IkReal x11792=x11787;
CheckValue<IkReal> x11794 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11791),IKFAST_ATAN2_MAGTHRESH);
if(!x11794.valid){
continue;
}
IkReal x11793=((-1.0)*(x11794.value));
sj5=gconst7;
cj5=gconst8;
j5=x11793;
IkReal gconst6=x11793;
IkReal gconst7=(r11*x11792);
IkReal gconst8=(x11791*x11792);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11795=((1.0)*sj0);
IkReal x11796=((1.0)*gconst7);
CheckValue<IkReal> x11797 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11795))+(((-1.0)*cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*cj0*r01*x11796))+(((-1.0)*gconst7*r11*x11795))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11797.valid){
continue;
}
CheckValue<IkReal> x11798=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11796))+(((-1.0)*gconst8*r21)))),-1);
if(!x11798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11797.value)+(((1.5707963267949)*(x11798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11799=IKsin(j4);
IkReal x11800=IKcos(j4);
IkReal x11801=(gconst7*sj3);
IkReal x11802=(cj3*gconst8);
IkReal x11803=(cj3*gconst7);
IkReal x11804=(sj1*sj2);
IkReal x11805=(cj2*sj1);
IkReal x11806=((1.0)*sj0);
IkReal x11807=((1.0)*cj0);
IkReal x11808=(gconst8*sj3);
IkReal x11809=(cj1*sj2);
IkReal x11810=((1.0)*x11800);
IkReal x11811=((1.0)*x11799);
IkReal x11812=((1.0)*cj1*cj2);
IkReal x11813=(cj3*x11799);
IkReal x11814=(gconst7*x11799);
IkReal x11815=(x11800*x11808);
evalcond[0]=((((-1.0)*r22*x11810))+((r21*x11814))+(((-1.0)*gconst8*r20*x11811)));
evalcond[1]=(cj0+(((-1.0)*gconst8*r10*x11811))+(((-1.0)*r12*x11810))+((r11*x11814)));
evalcond[2]=(((r01*x11814))+(((-1.0)*x11806))+(((-1.0)*r02*x11810))+(((-1.0)*gconst8*r00*x11811)));
evalcond[3]=(((r21*x11808))+((r21*x11800*x11803))+((r22*x11813))+(((-1.0)*r20*x11802*x11810))+((r20*x11801))+x11809+x11805);
evalcond[4]=((((-1.0)*r22*sj3*x11811))+((r21*x11802))+((r20*x11803))+(((-1.0)*x11812))+((r20*x11815))+(((-1.0)*r21*x11801*x11810))+x11804);
evalcond[5]=(((r00*x11801))+((r02*x11813))+(((-1.0)*r00*x11802*x11810))+((r01*x11800*x11803))+((cj0*x11804))+(((-1.0)*cj1*cj2*x11807))+((r01*x11808)));
evalcond[6]=((((-1.0)*r10*x11802*x11810))+((r11*x11800*x11803))+((r11*x11808))+((r10*x11801))+((sj0*x11804))+(((-1.0)*cj1*cj2*x11806))+((r12*x11813)));
evalcond[7]=(((r00*x11803))+((r00*x11815))+(((-1.0)*x11807*x11809))+(((-1.0)*x11805*x11807))+((r01*x11802))+(((-1.0)*r02*sj3*x11811))+(((-1.0)*r01*x11801*x11810)));
evalcond[8]=((((-1.0)*x11806*x11809))+(((-1.0)*r11*x11801*x11810))+((r11*x11802))+((r10*x11803))+((r10*x11815))+(((-1.0)*x11805*x11806))+(((-1.0)*r12*sj3*x11811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11816=((1.0)*gconst8);
CheckValue<IkReal> x11817=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11816))+(((-1.0)*gconst7*r00)))),-1);
if(!x11817.valid){
continue;
}
CheckValue<IkReal> x11818 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11816)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11817.value)))+(x11818.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11819=IKsin(j4);
IkReal x11820=IKcos(j4);
IkReal x11821=(gconst7*sj3);
IkReal x11822=(cj3*gconst8);
IkReal x11823=(cj3*gconst7);
IkReal x11824=(sj1*sj2);
IkReal x11825=(cj2*sj1);
IkReal x11826=((1.0)*sj0);
IkReal x11827=((1.0)*cj0);
IkReal x11828=(gconst8*sj3);
IkReal x11829=(cj1*sj2);
IkReal x11830=((1.0)*x11820);
IkReal x11831=((1.0)*x11819);
IkReal x11832=((1.0)*cj1*cj2);
IkReal x11833=(cj3*x11819);
IkReal x11834=(gconst7*x11819);
IkReal x11835=(x11820*x11828);
evalcond[0]=(((r21*x11834))+(((-1.0)*gconst8*r20*x11831))+(((-1.0)*r22*x11830)));
evalcond[1]=((((-1.0)*gconst8*r10*x11831))+cj0+(((-1.0)*r12*x11830))+((r11*x11834)));
evalcond[2]=((((-1.0)*gconst8*r00*x11831))+(((-1.0)*x11826))+(((-1.0)*r02*x11830))+((r01*x11834)));
evalcond[3]=(((r22*x11833))+(((-1.0)*r20*x11822*x11830))+((r21*x11820*x11823))+((r20*x11821))+((r21*x11828))+x11829+x11825);
evalcond[4]=((((-1.0)*r21*x11821*x11830))+(((-1.0)*r22*sj3*x11831))+(((-1.0)*x11832))+((r20*x11835))+((r20*x11823))+((r21*x11822))+x11824);
evalcond[5]=((((-1.0)*r00*x11822*x11830))+((r02*x11833))+((r01*x11820*x11823))+((cj0*x11824))+(((-1.0)*cj1*cj2*x11827))+((r01*x11828))+((r00*x11821)));
evalcond[6]=(((r11*x11820*x11823))+((r10*x11821))+((sj0*x11824))+((r12*x11833))+(((-1.0)*cj1*cj2*x11826))+((r11*x11828))+(((-1.0)*r10*x11822*x11830)));
evalcond[7]=((((-1.0)*r02*sj3*x11831))+(((-1.0)*r01*x11821*x11830))+(((-1.0)*x11825*x11827))+(((-1.0)*x11827*x11829))+((r01*x11822))+((r00*x11823))+((r00*x11835)));
evalcond[8]=((((-1.0)*x11826*x11829))+((r10*x11823))+(((-1.0)*r11*x11821*x11830))+(((-1.0)*x11825*x11826))+((r10*x11835))+(((-1.0)*r12*sj3*x11831))+((r11*x11822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11836=((-1.0)*r11);
IkReal x11838 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11838)==0){
continue;
}
IkReal x11837=pow(x11838,-0.5);
CheckValue<IkReal> x11839 = IKatan2WithCheck(IkReal(x11836),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11839.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11839.value))));
IkReal gconst10=(x11836*x11837);
IkReal gconst11=((1.0)*r10*x11837);
CheckValue<IkReal> x11840 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11840.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11840.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11841=((-1.0)*r11);
CheckValue<IkReal> x11844 = IKatan2WithCheck(IkReal(x11841),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11844.valid){
continue;
}
IkReal x11842=((1.0)*(x11844.value));
IkReal x11843=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11842)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11842)));
IkReal gconst10=(x11841*x11843);
IkReal gconst11=((1.0)*r10*x11843);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11845=((-1.0)*r11);
CheckValue<IkReal> x11848 = IKatan2WithCheck(IkReal(x11845),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11848.valid){
continue;
}
IkReal x11846=((1.0)*(x11848.value));
IkReal x11847=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11846)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11846)));
IkReal gconst10=(x11845*x11847);
IkReal gconst11=((1.0)*r10*x11847);
IkReal x11849=r12*r12;
IkReal x11850=((1.0)*sj0);
IkReal x11851=(cj0*r02);
IkReal x11852=x11837;
j4eval[0]=((IKabs((((sj0*x11849*x11852))+((r12*x11851*x11852))+(((-1.0)*x11850*x11852)))))+(IKabs(((((-1.0)*x11851))+(((-1.0)*r12*x11850))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11853=((-1.0)*r11);
CheckValue<IkReal> x11856 = IKatan2WithCheck(IkReal(x11853),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11856.valid){
continue;
}
IkReal x11854=((1.0)*(x11856.value));
IkReal x11855=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11854)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11854)));
IkReal gconst10=(x11853*x11855);
IkReal gconst11=((1.0)*r10*x11855);
IkReal x11857=((1.0)*cj3);
CheckValue<IkReal> x11862=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11862.valid){
continue;
}
IkReal x11858=x11862.value;
IkReal x11859=(cj3*x11858);
IkReal x11860=(x11857*x11858);
IkReal x11861=((((-1.0)*x11857*(r22*r22)))+(((-1.0)*x11860*(r11*r11)*(r21*r21)))+(((-1.0)*x11860*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x11859)));
j4eval[0]=x11861;
j4eval[1]=IKsign(x11861);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11863=((-1.0)*r11);
CheckValue<IkReal> x11866 = IKatan2WithCheck(IkReal(x11863),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11866.valid){
continue;
}
IkReal x11864=((1.0)*(x11866.value));
IkReal x11865=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11864)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11864)));
IkReal gconst10=(x11863*x11865);
IkReal gconst11=((1.0)*r10*x11865);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11867=((-1.0)*r11);
CheckValue<IkReal> x11870 = IKatan2WithCheck(IkReal(x11867),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11870.valid){
continue;
}
IkReal x11868=((1.0)*(x11870.value));
IkReal x11869=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11868)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11868)));
IkReal gconst10=(x11867*x11869);
IkReal gconst11=((1.0)*r10*x11869);
IkReal x11871=r12*r12;
IkReal x11872=((1.0)*sj0);
IkReal x11873=(cj0*r02);
IkReal x11874=x11837;
j4eval[0]=((IKabs(((((-1.0)*x11873))+(((-1.0)*r12*x11872)))))+(IKabs(((((-1.0)*x11872*x11874))+((r12*x11873*x11874))+((sj0*x11871*x11874))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11875=((-1.0)*r11);
CheckValue<IkReal> x11878 = IKatan2WithCheck(IkReal(x11875),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11878.valid){
continue;
}
IkReal x11876=((1.0)*(x11878.value));
IkReal x11877=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11876)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11876)));
IkReal gconst10=(x11875*x11877);
IkReal gconst11=((1.0)*r10*x11877);
IkReal x11879=r12*r12;
IkReal x11880=(cj1*cj2*r22);
IkReal x11881=(r22*sj1*sj2);
CheckValue<IkReal> x11885=IKPowWithIntegerCheck(((-1.0)+x11879),-1);
if(!x11885.valid){
continue;
}
IkReal x11882=x11885.value;
if((((1.0)+(((-1.0)*x11879)))) < -0.00001)
continue;
IkReal x11883=IKsqrt(((1.0)+(((-1.0)*x11879))));
IkReal x11884=(r12*x11882*x11883);
j4eval[0]=((IKabs(((((-1.0)*x11880))+x11881)))+(IKabs(((((-1.0)*x11881*x11884))+((x11880*x11884))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11886=((-1.0)*r11);
CheckValue<IkReal> x11889 = IKatan2WithCheck(IkReal(x11886),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11889.valid){
continue;
}
IkReal x11887=((1.0)*(x11889.value));
IkReal x11888=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11887)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11887)));
IkReal gconst10=(x11886*x11888);
IkReal gconst11=((1.0)*r10*x11888);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11890=((-1.0)*r11);
CheckValue<IkReal> x11893 = IKatan2WithCheck(IkReal(x11890),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11893.valid){
continue;
}
IkReal x11891=((1.0)*(x11893.value));
IkReal x11892=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11891)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11891)));
IkReal gconst10=(x11890*x11892);
IkReal gconst11=((1.0)*r10*x11892);
IkReal x11894=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11898=IKPowWithIntegerCheck(x11894,-1);
if(!x11898.valid){
continue;
}
IkReal x11895=x11898.value;
IkReal x11896=((1.0)*x11895);
IkReal x11897=((((-2.0)*r00*r01*r10*r11*x11895))+(((-1.0)*(r02*r02)))+(((-1.0)*x11896*(r01*r01)*(r11*r11)))+(((-1.0)*x11896*(r00*r00)*(r10*r10))));
j4eval[0]=x11897;
j4eval[1]=IKsign(x11897);
j4eval[2]=r02;
j4eval[3]=x11894;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11899=((-1.0)*r11);
CheckValue<IkReal> x11902 = IKatan2WithCheck(IkReal(x11899),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11902.valid){
continue;
}
IkReal x11900=((1.0)*(x11902.value));
IkReal x11901=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11900)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11900)));
IkReal gconst10=(x11899*x11901);
IkReal gconst11=((1.0)*r10*x11901);
IkReal x11903=r12*r12;
IkReal x11904=(cj1*cj2*r22);
IkReal x11905=(r22*sj1*sj2);
CheckValue<IkReal> x11909=IKPowWithIntegerCheck(((-1.0)+x11903),-1);
if(!x11909.valid){
continue;
}
IkReal x11906=x11909.value;
if((((1.0)+(((-1.0)*x11903)))) < -0.00001)
continue;
IkReal x11907=IKsqrt(((1.0)+(((-1.0)*x11903))));
IkReal x11908=(r12*x11906*x11907);
j4eval[0]=((IKabs(((((-1.0)*x11905*x11908))+((x11904*x11908)))))+(IKabs((x11905+(((-1.0)*x11904))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11910=(gconst10*r21);
IkReal x11911=(gconst11*r20);
IkReal x11912=(sj1*sj2);
IkReal x11913=(cj1*cj2);
CheckValue<IkReal> x11914 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11913))+((r22*x11912)))),IkReal(((((-1.0)*x11910*x11913))+((x11910*x11912))+((x11911*x11913))+(((-1.0)*x11911*x11912)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11914.valid){
continue;
}
CheckValue<IkReal> x11915=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x11910*x11911))+(x11911*x11911)+(x11910*x11910))),-1);
if(!x11915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11914.value)+(((1.5707963267949)*(x11915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11916=IKsin(j4);
IkReal x11917=IKcos(j4);
IkReal x11918=((1.0)*cj2);
IkReal x11919=((1.0)*x11917);
IkReal x11920=(gconst10*x11916);
IkReal x11921=((1.0)*x11916);
IkReal x11922=(gconst11*x11917);
IkReal x11923=(gconst11*x11921);
evalcond[0]=((((-1.0)*r20*x11923))+((r21*x11920))+(((-1.0)*r22*x11919)));
evalcond[1]=((((-1.0)*r10*x11923))+((r11*x11920))+(((-1.0)*r12*x11919)));
evalcond[2]=((((-1.0)*r02*x11921))+(((-1.0)*gconst10*r01*x11919))+((r00*x11922)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11923))+((r01*x11920))+(((-1.0)*r02*x11919)));
evalcond[4]=((((-1.0)*gconst10*r21*x11919))+(((-1.0)*cj1*x11918))+((r20*x11922))+((sj1*sj2))+(((-1.0)*r22*x11921)));
evalcond[5]=(((r10*x11922))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11919))+(((-1.0)*sj1*x11918))+(((-1.0)*r12*x11921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11924=(gconst11*r00);
IkReal x11925=(gconst10*r01);
CheckValue<IkReal> x11926 = IKatan2WithCheck(IkReal((x11924+(((-1.0)*x11925)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11926.valid){
continue;
}
CheckValue<IkReal> x11927=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x11924*x11925))+(((-1.0)*(x11925*x11925)))+(((-1.0)*(x11924*x11924))))),-1);
if(!x11927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11926.value)+(((1.5707963267949)*(x11927.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11928=IKsin(j4);
IkReal x11929=IKcos(j4);
IkReal x11930=((1.0)*cj2);
IkReal x11931=((1.0)*x11929);
IkReal x11932=(gconst10*x11928);
IkReal x11933=((1.0)*x11928);
IkReal x11934=(gconst11*x11929);
IkReal x11935=(gconst11*x11933);
evalcond[0]=(((r21*x11932))+(((-1.0)*r22*x11931))+(((-1.0)*r20*x11935)));
evalcond[1]=((((-1.0)*r10*x11935))+((r11*x11932))+(((-1.0)*r12*x11931)));
evalcond[2]=((((-1.0)*gconst10*r01*x11931))+(((-1.0)*r02*x11933))+((r00*x11934)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11931))+(((-1.0)*r00*x11935))+((r01*x11932)));
evalcond[4]=(((r20*x11934))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11931))+(((-1.0)*r22*x11933))+(((-1.0)*cj1*x11930)));
evalcond[5]=((((-1.0)*sj1*x11930))+((r10*x11934))+(((-1.0)*gconst10*r11*x11931))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x11933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11936 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11936.valid){
continue;
}
CheckValue<IkReal> x11937=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11936.value)+(((1.5707963267949)*(x11937.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11938=IKsin(j4);
IkReal x11939=IKcos(j4);
IkReal x11940=((1.0)*cj2);
IkReal x11941=((1.0)*x11939);
IkReal x11942=(gconst10*x11938);
IkReal x11943=((1.0)*x11938);
IkReal x11944=(gconst11*x11939);
IkReal x11945=(gconst11*x11943);
evalcond[0]=((((-1.0)*r20*x11945))+(((-1.0)*r22*x11941))+((r21*x11942)));
evalcond[1]=(((r11*x11942))+(((-1.0)*r12*x11941))+(((-1.0)*r10*x11945)));
evalcond[2]=((((-1.0)*r02*x11943))+((r00*x11944))+(((-1.0)*gconst10*r01*x11941)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11941))+(((-1.0)*r00*x11945))+((r01*x11942)));
evalcond[4]=((((-1.0)*cj1*x11940))+(((-1.0)*gconst10*r21*x11941))+((r20*x11944))+(((-1.0)*r22*x11943))+((sj1*sj2)));
evalcond[5]=((((-1.0)*gconst10*r11*x11941))+(((-1.0)*sj1*x11940))+(((-1.0)*cj1*sj2))+((r10*x11944))+(((-1.0)*r12*x11943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11946=((-1.0)*r11);
CheckValue<IkReal> x11949 = IKatan2WithCheck(IkReal(x11946),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11949.valid){
continue;
}
IkReal x11947=((1.0)*(x11949.value));
IkReal x11948=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11947)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11947)));
IkReal gconst10=(x11946*x11948);
IkReal gconst11=((1.0)*r10*x11948);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11950=((-1.0)*r11);
CheckValue<IkReal> x11953 = IKatan2WithCheck(IkReal(x11950),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11953.valid){
continue;
}
IkReal x11951=((1.0)*(x11953.value));
IkReal x11952=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11951)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11951)));
IkReal gconst10=(x11950*x11952);
IkReal gconst11=((1.0)*r10*x11952);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11954=((-1.0)*r11);
CheckValue<IkReal> x11957 = IKatan2WithCheck(IkReal(x11954),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11957.valid){
continue;
}
IkReal x11955=((1.0)*(x11957.value));
IkReal x11956=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11955)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11955)));
IkReal gconst10=(x11954*x11956);
IkReal gconst11=((1.0)*r10*x11956);
IkReal x11958=r12*r12;
CheckValue<IkReal> x11961=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11958))),-1);
if(!x11961.valid){
continue;
}
IkReal x11959=x11961.value;
IkReal x11960=((1.0)*x11959);
j4eval[0]=IKsign((x11958+((x11960*(r10*r10*r10*r10)))+((x11960*(r11*r11*r11*r11)))+(((2.0)*x11959*(r10*r10)*(r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11962=(cj2*sj1);
IkReal x11963=(gconst10*r11);
IkReal x11964=(gconst11*r10);
IkReal x11965=(cj1*sj2);
CheckValue<IkReal> x11966=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11963*x11963)+(((-2.0)*x11963*x11964))+(x11964*x11964))),-1);
if(!x11966.valid){
continue;
}
CheckValue<IkReal> x11967 = IKatan2WithCheck(IkReal((((r12*x11965))+((r12*x11962)))),IkReal(((((-1.0)*x11964*x11965))+((x11963*x11965))+((x11962*x11963))+(((-1.0)*x11962*x11964)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11966.value)))+(x11967.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11968=IKsin(j4);
IkReal x11969=IKcos(j4);
IkReal x11970=((1.0)*x11969);
IkReal x11971=(gconst10*x11968);
IkReal x11972=((1.0)*x11968);
IkReal x11973=(gconst11*x11969);
IkReal x11974=(gconst11*x11972);
evalcond[0]=((((-1.0)*r20*x11974))+(((-1.0)*r22*x11970))+((r21*x11971)));
evalcond[1]=((((-1.0)*r10*x11974))+(((-1.0)*r12*x11970))+((r11*x11971)));
evalcond[2]=(((r00*x11973))+(((-1.0)*gconst10*r01*x11970))+(((-1.0)*r02*x11972)));
evalcond[3]=((1.0)+((r01*x11971))+(((-1.0)*r00*x11974))+(((-1.0)*r02*x11970)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11972))+(((-1.0)*gconst10*r11*x11970))+((cj1*sj2))+((r10*x11973)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11973))+(((-1.0)*r22*x11972))+(((-1.0)*gconst10*r21*x11970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11975=(gconst11*r00);
IkReal x11976=(gconst10*r01);
CheckValue<IkReal> x11977 = IKatan2WithCheck(IkReal((x11975+(((-1.0)*x11976)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11977.valid){
continue;
}
CheckValue<IkReal> x11978=IKPowWithIntegerCheck(IKsign(((x11975*x11975)+(((-2.0)*x11975*x11976))+(r02*r02)+(x11976*x11976))),-1);
if(!x11978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11977.value)+(((1.5707963267949)*(x11978.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11979=IKsin(j4);
IkReal x11980=IKcos(j4);
IkReal x11981=((1.0)*x11980);
IkReal x11982=(gconst10*x11979);
IkReal x11983=((1.0)*x11979);
IkReal x11984=(gconst11*x11980);
IkReal x11985=(gconst11*x11983);
evalcond[0]=(((r21*x11982))+(((-1.0)*r22*x11981))+(((-1.0)*r20*x11985)));
evalcond[1]=((((-1.0)*r12*x11981))+(((-1.0)*r10*x11985))+((r11*x11982)));
evalcond[2]=((((-1.0)*gconst10*r01*x11981))+(((-1.0)*r02*x11983))+((r00*x11984)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11981))+(((-1.0)*r00*x11985))+((r01*x11982)));
evalcond[4]=((((-1.0)*r12*x11983))+((cj2*sj1))+((r10*x11984))+(((-1.0)*gconst10*r11*x11981))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11981))+((r20*x11984))+(((-1.0)*r22*x11983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11986=((1.0)*gconst11);
CheckValue<IkReal> x11987=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11986)))),-1);
if(!x11987.valid){
continue;
}
CheckValue<IkReal> x11988 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11987.value)))+(x11988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11989=IKsin(j4);
IkReal x11990=IKcos(j4);
IkReal x11991=((1.0)*x11990);
IkReal x11992=(gconst10*x11989);
IkReal x11993=((1.0)*x11989);
IkReal x11994=(gconst11*x11990);
IkReal x11995=(gconst11*x11993);
evalcond[0]=(((r21*x11992))+(((-1.0)*r20*x11995))+(((-1.0)*r22*x11991)));
evalcond[1]=((((-1.0)*r12*x11991))+(((-1.0)*r10*x11995))+((r11*x11992)));
evalcond[2]=((((-1.0)*r02*x11993))+((r00*x11994))+(((-1.0)*gconst10*r01*x11991)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11991))+((r01*x11992))+(((-1.0)*r00*x11995)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x11993))+(((-1.0)*gconst10*r11*x11991))+((r10*x11994)));
evalcond[5]=(((r20*x11994))+(((-1.0)*cj1*cj2))+(((-1.0)*gconst10*r21*x11991))+((sj1*sj2))+(((-1.0)*r22*x11993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11996=((-1.0)*r11);
IkReal x11997=((-1.0)*r10);
CheckValue<IkReal> x11999 = IKatan2WithCheck(IkReal(x11996),IkReal(x11997),IKFAST_ATAN2_MAGTHRESH);
if(!x11999.valid){
continue;
}
IkReal x11998=((1.0)*(x11999.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11998)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11997);
rxp1_1=(px*r21);
rxp1_2=(px*x11996);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11998)));
IkReal gconst10=x11996;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12000=((-1.0)*r11);
IkReal x12001=((-1.0)*r10);
CheckValue<IkReal> x12003 = IKatan2WithCheck(IkReal(x12000),IkReal(x12001),IKFAST_ATAN2_MAGTHRESH);
if(!x12003.valid){
continue;
}
IkReal x12002=((1.0)*(x12003.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12002)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12001);
rxp1_1=(px*r21);
rxp1_2=(px*x12000);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12002)));
IkReal gconst10=x12000;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12004=((-1.0)*r11);
IkReal x12005=((-1.0)*r10);
CheckValue<IkReal> x12007 = IKatan2WithCheck(IkReal(x12004),IkReal(x12005),IKFAST_ATAN2_MAGTHRESH);
if(!x12007.valid){
continue;
}
IkReal x12006=((1.0)*(x12007.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12006)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12005);
rxp1_1=(px*r21);
rxp1_2=(px*x12004);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12006)));
IkReal gconst10=x12004;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12010=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x12010.valid){
continue;
}
IkReal x12008=x12010.value;
IkReal x12009=(sj0*x12008);
cj4array[0]=(((cj1*sj2*x12009))+((cj2*sj1*x12009)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12011=IKsin(j4);
IkReal x12012=IKcos(j4);
IkReal x12013=(gconst10*r21);
IkReal x12014=(gconst11*r20);
IkReal x12015=((1.0)*x12011);
IkReal x12016=((1.0)*x12012);
evalcond[0]=((-1.0)*r02*x12011);
evalcond[1]=((((-1.0)*r02*x12016))+(((-1.0)*sj0)));
evalcond[2]=(((x12011*x12013))+(((-1.0)*x12014*x12015)));
evalcond[3]=((((-1.0)*gconst11*r10*x12015))+((gconst10*r11*x12011)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12013*x12016))+((x12012*x12014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12018=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12018.valid){
continue;
}
IkReal x12017=x12018.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12017))+((cj1*cj2*x12017)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12019=IKsin(j4);
IkReal x12020=IKcos(j4);
IkReal x12021=((1.0)*sj0);
IkReal x12022=(gconst10*x12019);
IkReal x12023=((1.0)*x12020);
IkReal x12024=((1.0)*gconst11*x12019);
evalcond[0]=((-1.0)*r02*x12019);
evalcond[1]=((((-1.0)*x12021))+(((-1.0)*r02*x12023)));
evalcond[2]=((((-1.0)*r20*x12024))+((r21*x12022)));
evalcond[3]=(((r11*x12022))+(((-1.0)*r10*x12024)));
evalcond[4]=((((-1.0)*cj1*sj2*x12021))+(((-1.0)*cj2*sj1*x12021))+(((-1.0)*gconst10*r11*x12023))+((gconst11*r10*x12020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12025=IKPowWithIntegerCheck(r02,-1);
if(!x12025.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12025.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12026=IKsin(j4);
IkReal x12027=IKcos(j4);
IkReal x12028=(gconst10*r21);
IkReal x12029=((1.0)*sj0);
IkReal x12030=(gconst10*r11);
IkReal x12031=(gconst11*x12027);
IkReal x12032=((1.0)*x12027);
IkReal x12033=((1.0)*gconst11*x12026);
evalcond[0]=((-1.0)*r02*x12026);
evalcond[1]=((((-1.0)*r20*x12033))+((x12026*x12028)));
evalcond[2]=(((x12026*x12030))+(((-1.0)*r10*x12033)));
evalcond[3]=((((-1.0)*x12028*x12032))+((r20*x12031))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj1*sj2*x12029))+(((-1.0)*cj2*sj1*x12029))+(((-1.0)*x12030*x12032))+((r10*x12031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12034=((1.0)*gconst11);
CheckValue<IkReal> x12035 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x12034))+((gconst10*r11*sj0))+(((-1.0)*r10*sj0*x12034))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12035.valid){
continue;
}
CheckValue<IkReal> x12036=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12035.value)+(((1.5707963267949)*(x12036.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12037=IKsin(j4);
IkReal x12038=IKcos(j4);
IkReal x12039=((1.0)*cj2);
IkReal x12040=((1.0)*sj0);
IkReal x12041=(cj1*sj2);
IkReal x12042=(gconst10*x12037);
IkReal x12043=((1.0)*x12038);
IkReal x12044=(gconst11*x12038);
IkReal x12045=((1.0)*x12037);
IkReal x12046=(gconst11*x12045);
evalcond[0]=((((-1.0)*r20*x12046))+((r21*x12042)));
evalcond[1]=((((-1.0)*r12*x12043))+cj0+((r11*x12042))+(((-1.0)*r10*x12046)));
evalcond[2]=((((-1.0)*cj1*x12039))+((sj1*sj2))+((r20*x12044))+(((-1.0)*gconst10*r21*x12043)));
evalcond[3]=((((-1.0)*r00*x12046))+(((-1.0)*x12040))+((r01*x12042))+(((-1.0)*r02*x12043)));
evalcond[4]=((((-1.0)*cj0*x12041))+(((-1.0)*gconst10*r01*x12043))+((r00*x12044))+(((-1.0)*cj0*sj1*x12039))+(((-1.0)*r02*x12045)));
evalcond[5]=(((r10*x12044))+(((-1.0)*x12040*x12041))+(((-1.0)*r12*x12045))+(((-1.0)*gconst10*r11*x12043))+(((-1.0)*sj0*sj1*x12039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12047=(gconst10*r21);
IkReal x12048=(gconst11*r20);
IkReal x12049=(sj1*sj2);
IkReal x12050=(cj1*cj2);
CheckValue<IkReal> x12051=IKPowWithIntegerCheck(IKsign(((x12047*x12047)+(r22*r22)+(((-2.0)*x12047*x12048))+(x12048*x12048))),-1);
if(!x12051.valid){
continue;
}
CheckValue<IkReal> x12052 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12050))+((r22*x12049)))),IkReal(((((-1.0)*x12047*x12050))+(((-1.0)*x12048*x12049))+((x12047*x12049))+((x12048*x12050)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12051.value)))+(x12052.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12053=IKsin(j4);
IkReal x12054=IKcos(j4);
IkReal x12055=((1.0)*cj2);
IkReal x12056=((1.0)*sj0);
IkReal x12057=(cj1*sj2);
IkReal x12058=((1.0)*x12054);
IkReal x12059=(gconst10*x12053);
IkReal x12060=((1.0)*x12053);
IkReal x12061=(gconst11*x12054);
IkReal x12062=(gconst11*x12060);
evalcond[0]=((((-1.0)*r20*x12062))+(((-1.0)*r22*x12058))+((r21*x12059)));
evalcond[1]=(cj0+(((-1.0)*r10*x12062))+(((-1.0)*r12*x12058))+((r11*x12059)));
evalcond[2]=((((-1.0)*x12056))+((r01*x12059))+(((-1.0)*r02*x12058))+(((-1.0)*r00*x12062)));
evalcond[3]=((((-1.0)*cj1*x12055))+((sj1*sj2))+((r20*x12061))+(((-1.0)*gconst10*r21*x12058))+(((-1.0)*r22*x12060)));
evalcond[4]=(((r00*x12061))+(((-1.0)*cj0*sj1*x12055))+(((-1.0)*r02*x12060))+(((-1.0)*gconst10*r01*x12058))+(((-1.0)*cj0*x12057)));
evalcond[5]=(((r10*x12061))+(((-1.0)*x12056*x12057))+(((-1.0)*r12*x12060))+(((-1.0)*gconst10*r11*x12058))+(((-1.0)*sj0*sj1*x12055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12063=((1.0)*sj0);
IkReal x12064=((1.0)*gconst10);
CheckValue<IkReal> x12065 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12063)))),IkReal(((((-1.0)*gconst10*r11*x12063))+(((-1.0)*cj0*r01*x12064))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12065.valid){
continue;
}
CheckValue<IkReal> x12066=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12064))+(((-1.0)*gconst11*r21)))),-1);
if(!x12066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12065.value)+(((1.5707963267949)*(x12066.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12067=IKsin(j4);
IkReal x12068=IKcos(j4);
IkReal x12069=((1.0)*cj2);
IkReal x12070=((1.0)*sj0);
IkReal x12071=(cj1*sj2);
IkReal x12072=((1.0)*x12068);
IkReal x12073=(gconst10*x12067);
IkReal x12074=((1.0)*x12067);
IkReal x12075=(gconst11*x12068);
IkReal x12076=(gconst11*x12074);
evalcond[0]=((((-1.0)*r20*x12076))+(((-1.0)*r22*x12072))+((r21*x12073)));
evalcond[1]=(cj0+((r11*x12073))+(((-1.0)*r10*x12076))+(((-1.0)*r12*x12072)));
evalcond[2]=((((-1.0)*r02*x12072))+(((-1.0)*r00*x12076))+(((-1.0)*x12070))+((r01*x12073)));
evalcond[3]=((((-1.0)*gconst10*r21*x12072))+((sj1*sj2))+((r20*x12075))+(((-1.0)*r22*x12074))+(((-1.0)*cj1*x12069)));
evalcond[4]=((((-1.0)*gconst10*r01*x12072))+(((-1.0)*r02*x12074))+(((-1.0)*cj0*sj1*x12069))+(((-1.0)*cj0*x12071))+((r00*x12075)));
evalcond[5]=((((-1.0)*sj0*sj1*x12069))+(((-1.0)*gconst10*r11*x12072))+((r10*x12075))+(((-1.0)*r12*x12074))+(((-1.0)*x12070*x12071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12077=((1.0)*gconst11);
CheckValue<IkReal> x12078=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12077)))),-1);
if(!x12078.valid){
continue;
}
CheckValue<IkReal> x12079 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12077)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12078.value)))+(x12079.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12080=IKsin(j4);
IkReal x12081=IKcos(j4);
IkReal x12082=((1.0)*cj2);
IkReal x12083=((1.0)*sj0);
IkReal x12084=(cj1*sj2);
IkReal x12085=((1.0)*x12081);
IkReal x12086=(gconst10*x12080);
IkReal x12087=((1.0)*x12080);
IkReal x12088=(gconst11*x12081);
IkReal x12089=(gconst11*x12087);
evalcond[0]=((((-1.0)*r22*x12085))+((r21*x12086))+(((-1.0)*r20*x12089)));
evalcond[1]=((((-1.0)*r12*x12085))+cj0+((r11*x12086))+(((-1.0)*r10*x12089)));
evalcond[2]=((((-1.0)*x12083))+((r01*x12086))+(((-1.0)*r00*x12089))+(((-1.0)*r02*x12085)));
evalcond[3]=(((r20*x12088))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12085))+(((-1.0)*r22*x12087))+(((-1.0)*cj1*x12082)));
evalcond[4]=(((r00*x12088))+(((-1.0)*gconst10*r01*x12085))+(((-1.0)*cj0*x12084))+(((-1.0)*r02*x12087))+(((-1.0)*cj0*sj1*x12082)));
evalcond[5]=((((-1.0)*r12*x12087))+(((-1.0)*sj0*sj1*x12082))+(((-1.0)*gconst10*r11*x12085))+((r10*x12088))+(((-1.0)*x12083*x12084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12090=((-1.0)*r11);
CheckValue<IkReal> x12093 = IKatan2WithCheck(IkReal(x12090),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12093.valid){
continue;
}
IkReal x12091=((1.0)*(x12093.value));
IkReal x12092=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12091)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12091)));
IkReal gconst10=(x12090*x12092);
IkReal gconst11=((1.0)*r10*x12092);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12094=((-1.0)*r11);
CheckValue<IkReal> x12097 = IKatan2WithCheck(IkReal(x12094),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12097.valid){
continue;
}
IkReal x12095=((1.0)*(x12097.value));
IkReal x12096=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12095)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12095)));
IkReal gconst10=(x12094*x12096);
IkReal gconst11=((1.0)*r10*x12096);
IkReal x12098=r12*r12;
IkReal x12099=((1.0)*sj0);
IkReal x12100=(cj0*r02);
IkReal x12101=x11837;
j4eval[0]=((IKabs((((sj0*x12098*x12101))+(((-1.0)*x12099*x12101))+((r12*x12100*x12101)))))+(IKabs(((((-1.0)*r12*x12099))+(((-1.0)*x12100))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12102=((-1.0)*r11);
CheckValue<IkReal> x12105 = IKatan2WithCheck(IkReal(x12102),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12105.valid){
continue;
}
IkReal x12103=((1.0)*(x12105.value));
IkReal x12104=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12103)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12103)));
IkReal gconst10=(x12102*x12104);
IkReal gconst11=((1.0)*r10*x12104);
IkReal x12106=r12*r12;
IkReal x12107=((1.0)+(((-1.0)*x12106)));
IkReal x12108=(r22*sj1*sj2);
IkReal x12109=(cj1*cj2*r22);
CheckValue<IkReal> x12116=IKPowWithIntegerCheck(x12107,-1);
if(!x12116.valid){
continue;
}
IkReal x12110=x12116.value;
CheckValue<IkReal> x12117=IKPowWithIntegerCheck(((-1.0)+x12106),-1);
if(!x12117.valid){
continue;
}
IkReal x12111=x12117.value;
IkReal x12112=((1.0)*x12110);
if((x12107) < -0.00001)
continue;
IkReal x12113=IKsqrt(x12107);
IkReal x12114=(r12*x12111*x12113);
IkReal x12115=((((-1.0)*x12112*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x12110))+(((-1.0)*x12112*(r10*r10)*(r20*r20))));
j4eval[0]=x12115;
j4eval[1]=((IKabs(((((-1.0)*x12108*x12114))+((x12109*x12114)))))+(IKabs((x12108+(((-1.0)*x12109))))));
j4eval[2]=IKsign(x12115);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12118=((-1.0)*r11);
CheckValue<IkReal> x12121 = IKatan2WithCheck(IkReal(x12118),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12121.valid){
continue;
}
IkReal x12119=((1.0)*(x12121.value));
IkReal x12120=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12119)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12119)));
IkReal gconst10=(x12118*x12120);
IkReal gconst11=((1.0)*r10*x12120);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12122=((-1.0)*r11);
CheckValue<IkReal> x12125 = IKatan2WithCheck(IkReal(x12122),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12125.valid){
continue;
}
IkReal x12123=((1.0)*(x12125.value));
IkReal x12124=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12123)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12123)));
IkReal gconst10=(x12122*x12124);
IkReal gconst11=((1.0)*r10*x12124);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12126=((-1.0)*r11);
CheckValue<IkReal> x12129 = IKatan2WithCheck(IkReal(x12126),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12129.valid){
continue;
}
IkReal x12127=((1.0)*(x12129.value));
IkReal x12128=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12127)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12127)));
IkReal gconst10=(x12126*x12128);
IkReal gconst11=((1.0)*r10*x12128);
IkReal x12130=(cj1*r02*sj2);
IkReal x12131=(cj2*r02*sj1);
IkReal x12132=x11837;
IkReal x12133=(r12*x12132);
j4eval[0]=((IKabs((x12130+x12131)))+(IKabs((((x12131*x12133))+((x12130*x12133))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12134=(cj1*sj2);
IkReal x12135=(cj2*sj1);
IkReal x12136=(gconst11*r00);
IkReal x12137=((1.0)*gconst10*r01);
CheckValue<IkReal> x12138=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12138.valid){
continue;
}
CheckValue<IkReal> x12139 = IKatan2WithCheck(IkReal(((((-1.0)*x12135*x12137))+((x12134*x12136))+((x12135*x12136))+(((-1.0)*x12134*x12137)))),IkReal((((r02*x12134))+((r02*x12135)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12138.value)))+(x12139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12140=IKcos(j4);
IkReal x12141=IKsin(j4);
IkReal x12142=((1.0)*cj2);
IkReal x12143=((1.0)*x12140);
IkReal x12144=(gconst10*x12140);
IkReal x12145=(gconst10*x12141);
IkReal x12146=((1.0)*gconst11*x12141);
evalcond[0]=(((r02*x12141))+((r01*x12144))+(((-1.0)*gconst11*r00*x12143)));
evalcond[1]=((((-1.0)*r22*x12143))+(((-1.0)*r20*x12146))+((r21*x12145)));
evalcond[2]=((((-1.0)*r12*x12143))+((r11*x12145))+(((-1.0)*r10*x12146)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12146))+(((-1.0)*r02*x12143))+((r01*x12145)));
evalcond[4]=(((r22*x12141))+(((-1.0)*gconst11*r20*x12143))+((sj1*sj2))+(((-1.0)*cj1*x12142))+((r21*x12144)));
evalcond[5]=((((-1.0)*gconst11*r10*x12143))+(((-1.0)*cj1*sj2))+((r12*x12141))+((r11*x12144))+(((-1.0)*sj1*x12142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12147=(gconst10*r01);
IkReal x12148=(gconst11*r00);
CheckValue<IkReal> x12149 = IKatan2WithCheck(IkReal(((((-1.0)*x12148))+x12147)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12149.valid){
continue;
}
CheckValue<IkReal> x12150=IKPowWithIntegerCheck(IKsign(((x12148*x12148)+(r02*r02)+(x12147*x12147)+(((-2.0)*x12147*x12148)))),-1);
if(!x12150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12149.value)+(((1.5707963267949)*(x12150.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12151=IKcos(j4);
IkReal x12152=IKsin(j4);
IkReal x12153=((1.0)*cj2);
IkReal x12154=((1.0)*x12151);
IkReal x12155=(gconst10*x12151);
IkReal x12156=(gconst10*x12152);
IkReal x12157=((1.0)*gconst11*x12152);
evalcond[0]=(((r02*x12152))+((r01*x12155))+(((-1.0)*gconst11*r00*x12154)));
evalcond[1]=((((-1.0)*r22*x12154))+((r21*x12156))+(((-1.0)*r20*x12157)));
evalcond[2]=((((-1.0)*r12*x12154))+((r11*x12156))+(((-1.0)*r10*x12157)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12154))+(((-1.0)*r00*x12157))+((r01*x12156)));
evalcond[4]=((((-1.0)*gconst11*r20*x12154))+((r22*x12152))+((sj1*sj2))+((r21*x12155))+(((-1.0)*cj1*x12153)));
evalcond[5]=((((-1.0)*gconst11*r10*x12154))+((r12*x12152))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12153))+((r11*x12155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12158 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12158.valid){
continue;
}
CheckValue<IkReal> x12159=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12158.value)+(((1.5707963267949)*(x12159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12160=IKcos(j4);
IkReal x12161=IKsin(j4);
IkReal x12162=((1.0)*cj2);
IkReal x12163=((1.0)*x12160);
IkReal x12164=(gconst10*x12160);
IkReal x12165=(gconst10*x12161);
IkReal x12166=((1.0)*gconst11*x12161);
evalcond[0]=((((-1.0)*gconst11*r00*x12163))+((r02*x12161))+((r01*x12164)));
evalcond[1]=(((r21*x12165))+(((-1.0)*r22*x12163))+(((-1.0)*r20*x12166)));
evalcond[2]=((((-1.0)*r10*x12166))+((r11*x12165))+(((-1.0)*r12*x12163)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12166))+((r01*x12165))+(((-1.0)*r02*x12163)));
evalcond[4]=(((r21*x12164))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12163))+(((-1.0)*cj1*x12162))+((r22*x12161)));
evalcond[5]=((((-1.0)*gconst11*r10*x12163))+(((-1.0)*sj1*x12162))+(((-1.0)*cj1*sj2))+((r11*x12164))+((r12*x12161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12167=((-1.0)*r11);
CheckValue<IkReal> x12170 = IKatan2WithCheck(IkReal(x12167),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12170.valid){
continue;
}
IkReal x12168=((1.0)*(x12170.value));
IkReal x12169=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12168)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12168)));
IkReal gconst10=(x12167*x12169);
IkReal gconst11=((1.0)*r10*x12169);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12171=((-1.0)*r11);
CheckValue<IkReal> x12174 = IKatan2WithCheck(IkReal(x12171),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12174.valid){
continue;
}
IkReal x12172=((1.0)*(x12174.value));
IkReal x12173=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12172)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12172)));
IkReal gconst10=(x12171*x12173);
IkReal gconst11=((1.0)*r10*x12173);
IkReal x12175=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12179=IKPowWithIntegerCheck(x12175,-1);
if(!x12179.valid){
continue;
}
IkReal x12176=x12179.value;
IkReal x12177=((1.0)*x12176);
IkReal x12178=((((-1.0)*x12177*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x12176))+(((-1.0)*(r02*r02)))+(((-1.0)*x12177*(r00*r00)*(r10*r10))));
j4eval[0]=x12178;
j4eval[1]=r02;
j4eval[2]=x12175;
j4eval[3]=IKsign(x12178);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12180=((-1.0)*r11);
CheckValue<IkReal> x12183 = IKatan2WithCheck(IkReal(x12180),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12183.valid){
continue;
}
IkReal x12181=((1.0)*(x12183.value));
IkReal x12182=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12181)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12181)));
IkReal gconst10=(x12180*x12182);
IkReal gconst11=((1.0)*r10*x12182);
IkReal x12184=r12*r12;
IkReal x12185=((1.0)*r02);
IkReal x12186=(cj1*sj2);
IkReal x12187=(cj2*sj1);
CheckValue<IkReal> x12191=IKPowWithIntegerCheck(((-1.0)+x12184),-1);
if(!x12191.valid){
continue;
}
IkReal x12188=x12191.value;
if((((1.0)+(((-1.0)*x12184)))) < -0.00001)
continue;
IkReal x12189=IKsqrt(((1.0)+(((-1.0)*x12184))));
IkReal x12190=(r12*x12188*x12189);
j4eval[0]=((IKabs(((((-1.0)*x12185*x12186))+(((-1.0)*x12185*x12187)))))+(IKabs(((((-1.0)*x12185*x12186*x12190))+(((-1.0)*x12185*x12187*x12190))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12192=(cj1*sj2);
IkReal x12193=(gconst10*r01);
IkReal x12194=(cj2*sj1);
IkReal x12195=((1.0)*r02);
IkReal x12196=((1.0)*gconst11*r00);
CheckValue<IkReal> x12197=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12197.valid){
continue;
}
CheckValue<IkReal> x12198 = IKatan2WithCheck(IkReal(((((-1.0)*x12194*x12196))+(((-1.0)*x12192*x12196))+((x12193*x12194))+((x12192*x12193)))),IkReal(((((-1.0)*x12194*x12195))+(((-1.0)*x12192*x12195)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12197.value)))+(x12198.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12199=IKcos(j4);
IkReal x12200=IKsin(j4);
IkReal x12201=((1.0)*x12199);
IkReal x12202=(gconst10*x12199);
IkReal x12203=(gconst10*x12200);
IkReal x12204=((1.0)*gconst11*x12200);
evalcond[0]=(((r02*x12200))+(((-1.0)*gconst11*r00*x12201))+((r01*x12202)));
evalcond[1]=((((-1.0)*r22*x12201))+((r21*x12203))+(((-1.0)*r20*x12204)));
evalcond[2]=((((-1.0)*r12*x12201))+(((-1.0)*r10*x12204))+((r11*x12203)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12201))+(((-1.0)*r00*x12204))+((r01*x12203)));
evalcond[4]=(((cj2*sj1))+((r12*x12200))+(((-1.0)*gconst11*r10*x12201))+((cj1*sj2))+((r11*x12202)));
evalcond[5]=(((r22*x12200))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12201))+((r21*x12202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12205=(gconst10*r01);
IkReal x12206=(gconst11*r00);
CheckValue<IkReal> x12207=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12206*x12206)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x12205*x12205)))+(((2.0)*x12205*x12206)))),-1);
if(!x12207.valid){
continue;
}
CheckValue<IkReal> x12208 = IKatan2WithCheck(IkReal(((((-1.0)*x12206))+x12205)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12207.value)))+(x12208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12209=IKcos(j4);
IkReal x12210=IKsin(j4);
IkReal x12211=((1.0)*x12209);
IkReal x12212=(gconst10*x12209);
IkReal x12213=(gconst10*x12210);
IkReal x12214=((1.0)*gconst11*x12210);
evalcond[0]=((((-1.0)*gconst11*r00*x12211))+((r02*x12210))+((r01*x12212)));
evalcond[1]=((((-1.0)*r22*x12211))+((r21*x12213))+(((-1.0)*r20*x12214)));
evalcond[2]=((((-1.0)*r12*x12211))+(((-1.0)*r10*x12214))+((r11*x12213)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12211))+(((-1.0)*r00*x12214))+((r01*x12213)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12211))+((r12*x12210))+((cj1*sj2))+((r11*x12212)));
evalcond[5]=(((r22*x12210))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12211))+((r21*x12212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12215=((1.0)*gconst11);
CheckValue<IkReal> x12216 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12215)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12216.valid){
continue;
}
CheckValue<IkReal> x12217=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12215)))),-1);
if(!x12217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12216.value)+(((1.5707963267949)*(x12217.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12218=IKcos(j4);
IkReal x12219=IKsin(j4);
IkReal x12220=((1.0)*x12218);
IkReal x12221=(gconst10*x12218);
IkReal x12222=(gconst10*x12219);
IkReal x12223=((1.0)*gconst11*x12219);
evalcond[0]=(((r02*x12219))+((r01*x12221))+(((-1.0)*gconst11*r00*x12220)));
evalcond[1]=((((-1.0)*r22*x12220))+((r21*x12222))+(((-1.0)*r20*x12223)));
evalcond[2]=(((r11*x12222))+(((-1.0)*r12*x12220))+(((-1.0)*r10*x12223)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12223))+((r01*x12222))+(((-1.0)*r02*x12220)));
evalcond[4]=(((cj2*sj1))+((r11*x12221))+((r12*x12219))+((cj1*sj2))+(((-1.0)*gconst11*r10*x12220)));
evalcond[5]=(((r22*x12219))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12221))+(((-1.0)*gconst11*r20*x12220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12224=((-1.0)*r11);
IkReal x12225=((-1.0)*r10);
CheckValue<IkReal> x12227 = IKatan2WithCheck(IkReal(x12224),IkReal(x12225),IKFAST_ATAN2_MAGTHRESH);
if(!x12227.valid){
continue;
}
IkReal x12226=((1.0)*(x12227.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12226)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12225);
rxp1_1=(px*r21);
rxp1_2=(px*x12224);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12226)));
IkReal gconst10=x12224;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12228=((-1.0)*r11);
IkReal x12229=((-1.0)*r10);
CheckValue<IkReal> x12231 = IKatan2WithCheck(IkReal(x12228),IkReal(x12229),IKFAST_ATAN2_MAGTHRESH);
if(!x12231.valid){
continue;
}
IkReal x12230=((1.0)*(x12231.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12230)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12229);
rxp1_1=(px*r21);
rxp1_2=(px*x12228);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12230)));
IkReal gconst10=x12228;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12232=((-1.0)*r11);
IkReal x12233=((-1.0)*r10);
CheckValue<IkReal> x12235 = IKatan2WithCheck(IkReal(x12232),IkReal(x12233),IKFAST_ATAN2_MAGTHRESH);
if(!x12235.valid){
continue;
}
IkReal x12234=((1.0)*(x12235.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12234)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12233);
rxp1_1=(px*r21);
rxp1_2=(px*x12232);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12234)));
IkReal gconst10=x12232;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12238=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12238.valid){
continue;
}
IkReal x12236=x12238.value;
IkReal x12237=(sj0*x12236);
cj4array[0]=(((cj2*sj1*x12237))+((cj1*sj2*x12237)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12239=IKsin(j4);
IkReal x12240=IKcos(j4);
IkReal x12241=(gconst10*r21);
IkReal x12242=((1.0)*x12240);
IkReal x12243=((1.0)*gconst11*x12239);
evalcond[0]=(r02*x12239);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12242)));
evalcond[2]=((((-1.0)*r20*x12243))+((x12239*x12241)));
evalcond[3]=((((-1.0)*r10*x12243))+((gconst10*r11*x12239)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12242))+((x12240*x12241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12245=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12245.valid){
continue;
}
IkReal x12244=x12245.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12244))+((cj1*cj2*x12244)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12246=IKsin(j4);
IkReal x12247=IKcos(j4);
IkReal x12248=((1.0)*sj0);
IkReal x12249=(gconst10*x12246);
IkReal x12250=((1.0)*x12247);
IkReal x12251=((1.0)*gconst11*x12246);
evalcond[0]=(r02*x12246);
evalcond[1]=((((-1.0)*r02*x12250))+(((-1.0)*x12248)));
evalcond[2]=((((-1.0)*r20*x12251))+((r21*x12249)));
evalcond[3]=(((r11*x12249))+(((-1.0)*r10*x12251)));
evalcond[4]=(((gconst10*r11*x12247))+(((-1.0)*cj2*sj1*x12248))+(((-1.0)*gconst11*r10*x12250))+(((-1.0)*cj1*sj2*x12248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12252=IKPowWithIntegerCheck(r02,-1);
if(!x12252.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12252.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12253=IKsin(j4);
IkReal x12254=IKcos(j4);
IkReal x12255=(gconst10*r21);
IkReal x12256=((1.0)*cj1);
IkReal x12257=(gconst10*r11);
IkReal x12258=((1.0)*gconst11*x12253);
IkReal x12259=((1.0)*gconst11*x12254);
evalcond[0]=(r02*x12253);
evalcond[1]=(((x12253*x12255))+(((-1.0)*r20*x12258)));
evalcond[2]=(((x12253*x12257))+(((-1.0)*r10*x12258)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r20*x12259))+((x12254*x12255))+(((-1.0)*cj2*x12256)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x12254*x12257))+(((-1.0)*sj0*sj2*x12256))+(((-1.0)*r10*x12259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12260=((1.0)*gconst11);
CheckValue<IkReal> x12261 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x12260))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*cj0*r00*x12260)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12261.valid){
continue;
}
CheckValue<IkReal> x12262=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12261.value)+(((1.5707963267949)*(x12262.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12263=IKsin(j4);
IkReal x12264=IKcos(j4);
IkReal x12265=((1.0)*gconst11);
IkReal x12266=((1.0)*cj2);
IkReal x12267=((1.0)*sj0);
IkReal x12268=(cj1*sj2);
IkReal x12269=(gconst10*x12264);
IkReal x12270=(gconst10*x12263);
IkReal x12271=((1.0)*x12264);
evalcond[0]=(((r21*x12270))+(((-1.0)*r20*x12263*x12265)));
evalcond[1]=(cj0+(((-1.0)*r12*x12271))+((r11*x12270))+(((-1.0)*r10*x12263*x12265)));
evalcond[2]=((((-1.0)*r20*x12264*x12265))+((sj1*sj2))+((r21*x12269))+(((-1.0)*cj1*x12266)));
evalcond[3]=((((-1.0)*r02*x12271))+(((-1.0)*r00*x12263*x12265))+(((-1.0)*x12267))+((r01*x12270)));
evalcond[4]=((((-1.0)*cj0*sj1*x12266))+(((-1.0)*r00*x12264*x12265))+((r01*x12269))+(((-1.0)*cj0*x12268))+((r02*x12263)));
evalcond[5]=(((r12*x12263))+((r11*x12269))+(((-1.0)*x12267*x12268))+(((-1.0)*r10*x12264*x12265))+(((-1.0)*sj0*sj1*x12266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12272=(gconst10*r21);
IkReal x12273=(gconst11*r20);
IkReal x12274=(sj1*sj2);
IkReal x12275=(cj1*cj2);
CheckValue<IkReal> x12276=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12273*x12273)))+(((2.0)*x12272*x12273))+(((-1.0)*(r22*r22)))+(((-1.0)*(x12272*x12272))))),-1);
if(!x12276.valid){
continue;
}
CheckValue<IkReal> x12277 = IKatan2WithCheck(IkReal((((r22*x12274))+(((-1.0)*r22*x12275)))),IkReal((((x12272*x12274))+((x12273*x12275))+(((-1.0)*x12273*x12274))+(((-1.0)*x12272*x12275)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12276.value)))+(x12277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12278=IKsin(j4);
IkReal x12279=IKcos(j4);
IkReal x12280=((1.0)*cj2);
IkReal x12281=((1.0)*sj0);
IkReal x12282=(cj1*sj2);
IkReal x12283=((1.0)*x12279);
IkReal x12284=(gconst10*x12279);
IkReal x12285=(gconst10*x12278);
IkReal x12286=((1.0)*gconst11*x12278);
evalcond[0]=((((-1.0)*r22*x12283))+(((-1.0)*r20*x12286))+((r21*x12285)));
evalcond[1]=((((-1.0)*r10*x12286))+cj0+(((-1.0)*r12*x12283))+((r11*x12285)));
evalcond[2]=(((r01*x12285))+(((-1.0)*r00*x12286))+(((-1.0)*r02*x12283))+(((-1.0)*x12281)));
evalcond[3]=((((-1.0)*gconst11*r20*x12283))+(((-1.0)*cj1*x12280))+((sj1*sj2))+((r22*x12278))+((r21*x12284)));
evalcond[4]=((((-1.0)*gconst11*r00*x12283))+((r02*x12278))+(((-1.0)*cj0*sj1*x12280))+((r01*x12284))+(((-1.0)*cj0*x12282)));
evalcond[5]=((((-1.0)*sj0*sj1*x12280))+(((-1.0)*x12281*x12282))+(((-1.0)*gconst11*r10*x12283))+((r11*x12284))+((r12*x12278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12287=((1.0)*sj0);
IkReal x12288=((1.0)*gconst10);
CheckValue<IkReal> x12289=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12288)))),-1);
if(!x12289.valid){
continue;
}
CheckValue<IkReal> x12290 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12287))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12288))+(((-1.0)*gconst10*r11*x12287))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12289.value)))+(x12290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12291=IKsin(j4);
IkReal x12292=IKcos(j4);
IkReal x12293=((1.0)*cj2);
IkReal x12294=((1.0)*sj0);
IkReal x12295=(cj1*sj2);
IkReal x12296=((1.0)*x12292);
IkReal x12297=(gconst10*x12292);
IkReal x12298=(gconst10*x12291);
IkReal x12299=((1.0)*gconst11*x12291);
evalcond[0]=(((r21*x12298))+(((-1.0)*r20*x12299))+(((-1.0)*r22*x12296)));
evalcond[1]=((((-1.0)*r10*x12299))+cj0+((r11*x12298))+(((-1.0)*r12*x12296)));
evalcond[2]=(((r01*x12298))+(((-1.0)*r00*x12299))+(((-1.0)*x12294))+(((-1.0)*r02*x12296)));
evalcond[3]=(((r21*x12297))+((sj1*sj2))+((r22*x12291))+(((-1.0)*cj1*x12293))+(((-1.0)*gconst11*r20*x12296)));
evalcond[4]=((((-1.0)*cj0*sj1*x12293))+((r01*x12297))+(((-1.0)*cj0*x12295))+((r02*x12291))+(((-1.0)*gconst11*r00*x12296)));
evalcond[5]=((((-1.0)*x12294*x12295))+((r11*x12297))+((r12*x12291))+(((-1.0)*gconst11*r10*x12296))+(((-1.0)*sj0*sj1*x12293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12300=((1.0)*gconst11);
CheckValue<IkReal> x12301 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12300))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12301.valid){
continue;
}
CheckValue<IkReal> x12302=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12300)))),-1);
if(!x12302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12301.value)+(((1.5707963267949)*(x12302.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12303=IKsin(j4);
IkReal x12304=IKcos(j4);
IkReal x12305=((1.0)*cj2);
IkReal x12306=((1.0)*sj0);
IkReal x12307=(cj1*sj2);
IkReal x12308=((1.0)*x12304);
IkReal x12309=(gconst10*x12304);
IkReal x12310=(gconst10*x12303);
IkReal x12311=((1.0)*gconst11*x12303);
evalcond[0]=((((-1.0)*r20*x12311))+(((-1.0)*r22*x12308))+((r21*x12310)));
evalcond[1]=((((-1.0)*r10*x12311))+cj0+((r11*x12310))+(((-1.0)*r12*x12308)));
evalcond[2]=((((-1.0)*r00*x12311))+(((-1.0)*r02*x12308))+(((-1.0)*x12306))+((r01*x12310)));
evalcond[3]=((((-1.0)*cj1*x12305))+((r21*x12309))+(((-1.0)*gconst11*r20*x12308))+((sj1*sj2))+((r22*x12303)));
evalcond[4]=((((-1.0)*cj0*x12307))+(((-1.0)*gconst11*r00*x12308))+((r01*x12309))+((r02*x12303))+(((-1.0)*cj0*sj1*x12305)));
evalcond[5]=((((-1.0)*x12306*x12307))+(((-1.0)*gconst11*r10*x12308))+((r11*x12309))+((r12*x12303))+(((-1.0)*sj0*sj1*x12305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12312=((-1.0)*r11);
CheckValue<IkReal> x12315 = IKatan2WithCheck(IkReal(x12312),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12315.valid){
continue;
}
IkReal x12313=((1.0)*(x12315.value));
IkReal x12314=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12313)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12313)));
IkReal gconst10=(x12312*x12314);
IkReal gconst11=((1.0)*r10*x12314);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12316=gconst10*gconst10;
IkReal x12317=gconst11*gconst11;
IkReal x12318=(gconst10*r21);
IkReal x12319=(cj3*r00);
IkReal x12320=(r00*sj3);
IkReal x12321=((1.0)*gconst11);
IkReal x12322=(gconst10*r20);
IkReal x12323=(r01*sj3);
IkReal x12324=(cj3*gconst11*r01);
IkReal x12325=(r21*x12316);
IkReal x12326=(r20*x12317);
CheckValue<IkReal> x12327 = IKatan2WithCheck(IkReal((((gconst10*r22*x12319))+((r22*x12324)))),IkReal(((((-1.0)*x12319*x12321*x12322))+(((-1.0)*cj3*r01*x12326))+((x12319*x12325))+((x12318*x12324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12327.valid){
continue;
}
CheckValue<IkReal> x12328=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12318*x12320*x12321))+((x12323*x12325))+(((-1.0)*x12321*x12322*x12323))+((r02*r22*sj3))+((x12320*x12326)))),-1);
if(!x12328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12327.value)+(((1.5707963267949)*(x12328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12329=IKsin(j4);
IkReal x12330=IKcos(j4);
IkReal x12331=(sj1*sj2);
IkReal x12332=(gconst10*sj3);
IkReal x12333=(cj3*gconst10);
IkReal x12334=(gconst11*r20);
IkReal x12335=(gconst11*r21);
IkReal x12336=(gconst11*r00);
IkReal x12337=(cj3*gconst11);
IkReal x12338=(gconst11*r10);
IkReal x12339=((1.0)*cj1);
IkReal x12340=(cj2*sj1);
IkReal x12341=(gconst11*sj3);
IkReal x12342=(cj2*x12339);
IkReal x12343=((1.0)*x12330);
IkReal x12344=((1.0)*x12329);
IkReal x12345=(gconst10*x12329);
IkReal x12346=(cj3*x12329);
IkReal x12347=(sj3*x12330);
evalcond[0]=(((r21*x12345))+(((-1.0)*x12334*x12344))+(((-1.0)*r22*x12343)));
evalcond[1]=((((-1.0)*x12338*x12344))+(((-1.0)*r12*x12343))+((r11*x12345)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12343))+((r01*x12345))+(((-1.0)*x12336*x12344)));
evalcond[3]=((((-1.0)*cj3*x12336*x12343))+((r00*x12332))+((r01*x12330*x12333))+((r01*x12341))+((r02*x12346)));
evalcond[4]=(((x12336*x12347))+((r01*x12337))+((r00*x12333))+(((-1.0)*r02*sj3*x12344))+(((-1.0)*r01*x12332*x12343)));
evalcond[5]=(((r20*x12332))+((cj1*sj2))+x12340+(((-1.0)*cj3*x12334*x12343))+((r21*x12330*x12333))+((r22*x12346))+((sj3*x12335)));
evalcond[6]=((((-1.0)*r10*x12337*x12343))+x12331+(((-1.0)*x12342))+((r11*x12341))+((r10*x12332))+((r11*x12330*x12333))+((r12*x12346)));
evalcond[7]=((((-1.0)*r21*x12332*x12343))+((r20*x12333))+x12331+(((-1.0)*x12342))+((x12334*x12347))+((cj3*x12335))+(((-1.0)*r22*sj3*x12344)));
evalcond[8]=((((-1.0)*r11*x12332*x12343))+((r10*x12333))+(((-1.0)*sj2*x12339))+((x12338*x12347))+(((-1.0)*r12*sj3*x12344))+((r11*x12337))+(((-1.0)*x12340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12348 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12348.valid){
continue;
}
CheckValue<IkReal> x12349=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12348.value)+(((1.5707963267949)*(x12349.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12350=IKsin(j4);
IkReal x12351=IKcos(j4);
IkReal x12352=(sj1*sj2);
IkReal x12353=(gconst10*sj3);
IkReal x12354=(cj3*gconst10);
IkReal x12355=(gconst11*r20);
IkReal x12356=(gconst11*r21);
IkReal x12357=(gconst11*r00);
IkReal x12358=(cj3*gconst11);
IkReal x12359=(gconst11*r10);
IkReal x12360=((1.0)*cj1);
IkReal x12361=(cj2*sj1);
IkReal x12362=(gconst11*sj3);
IkReal x12363=(cj2*x12360);
IkReal x12364=((1.0)*x12351);
IkReal x12365=((1.0)*x12350);
IkReal x12366=(gconst10*x12350);
IkReal x12367=(cj3*x12350);
IkReal x12368=(sj3*x12351);
evalcond[0]=((((-1.0)*r22*x12364))+((r21*x12366))+(((-1.0)*x12355*x12365)));
evalcond[1]=(((r11*x12366))+(((-1.0)*x12359*x12365))+(((-1.0)*r12*x12364)));
evalcond[2]=((-1.0)+(((-1.0)*x12357*x12365))+(((-1.0)*r02*x12364))+((r01*x12366)));
evalcond[3]=(((r01*x12351*x12354))+(((-1.0)*cj3*x12357*x12364))+((r00*x12353))+((r02*x12367))+((r01*x12362)));
evalcond[4]=((((-1.0)*r02*sj3*x12365))+((r01*x12358))+((r00*x12354))+((x12357*x12368))+(((-1.0)*r01*x12353*x12364)));
evalcond[5]=(((r20*x12353))+(((-1.0)*cj3*x12355*x12364))+((cj1*sj2))+x12361+((sj3*x12356))+((r22*x12367))+((r21*x12351*x12354)));
evalcond[6]=(((r11*x12362))+(((-1.0)*x12363))+((r11*x12351*x12354))+x12352+(((-1.0)*r10*x12358*x12364))+((r10*x12353))+((r12*x12367)));
evalcond[7]=((((-1.0)*x12363))+((r20*x12354))+x12352+((cj3*x12356))+(((-1.0)*r21*x12353*x12364))+(((-1.0)*r22*sj3*x12365))+((x12355*x12368)));
evalcond[8]=((((-1.0)*r11*x12353*x12364))+(((-1.0)*sj2*x12360))+((r11*x12358))+(((-1.0)*x12361))+((r10*x12354))+((x12359*x12368))+(((-1.0)*r12*sj3*x12365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12369=((-1.0)*r11);
CheckValue<IkReal> x12372 = IKatan2WithCheck(IkReal(x12369),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12372.valid){
continue;
}
IkReal x12370=((1.0)*(x12372.value));
IkReal x12371=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12370)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12370)));
IkReal gconst10=(x12369*x12371);
IkReal gconst11=((1.0)*r10*x12371);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12373=gconst10*gconst10;
IkReal x12374=gconst11*gconst11;
IkReal x12375=(gconst10*r21);
IkReal x12376=(cj3*r00);
IkReal x12377=(r00*sj3);
IkReal x12378=((1.0)*gconst11);
IkReal x12379=(gconst10*r20);
IkReal x12380=(r01*sj3);
IkReal x12381=(cj3*gconst11*r01);
IkReal x12382=(r21*x12373);
IkReal x12383=(r20*x12374);
CheckValue<IkReal> x12384=IKPowWithIntegerCheck(IKsign((((x12380*x12382))+(((-1.0)*x12375*x12377*x12378))+((x12377*x12383))+(((-1.0)*x12378*x12379*x12380))+((r02*r22*sj3)))),-1);
if(!x12384.valid){
continue;
}
CheckValue<IkReal> x12385 = IKatan2WithCheck(IkReal((((gconst10*r22*x12376))+((r22*x12381)))),IkReal((((x12376*x12382))+(((-1.0)*cj3*r01*x12383))+(((-1.0)*x12376*x12378*x12379))+((x12375*x12381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12384.value)))+(x12385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12386=IKsin(j4);
IkReal x12387=IKcos(j4);
IkReal x12388=(cj2*sj1);
IkReal x12389=(cj1*sj2);
IkReal x12390=(gconst10*sj3);
IkReal x12391=(cj3*gconst10);
IkReal x12392=(gconst11*r20);
IkReal x12393=(gconst11*r21);
IkReal x12394=(gconst11*r00);
IkReal x12395=(sj1*sj2);
IkReal x12396=(cj3*gconst11);
IkReal x12397=(gconst11*r10);
IkReal x12398=(cj1*cj2);
IkReal x12399=(gconst11*sj3);
IkReal x12400=((1.0)*x12387);
IkReal x12401=((1.0)*x12386);
IkReal x12402=(gconst10*x12386);
IkReal x12403=(cj3*x12386);
IkReal x12404=(sj3*x12387);
IkReal x12405=(x12389+x12388);
evalcond[0]=((((-1.0)*x12392*x12401))+(((-1.0)*r22*x12400))+((r21*x12402)));
evalcond[1]=((((-1.0)*r12*x12400))+((r11*x12402))+(((-1.0)*x12397*x12401)));
evalcond[2]=((1.0)+(((-1.0)*x12394*x12401))+(((-1.0)*r02*x12400))+((r01*x12402)));
evalcond[3]=(((r02*x12403))+((r01*x12387*x12391))+(((-1.0)*cj3*x12394*x12400))+((r01*x12399))+((r00*x12390)));
evalcond[4]=(((x12394*x12404))+((r01*x12396))+((r00*x12391))+(((-1.0)*r01*x12390*x12400))+(((-1.0)*r02*sj3*x12401)));
evalcond[5]=(((r22*x12403))+(((-1.0)*cj3*x12392*x12400))+((r21*x12387*x12391))+((r20*x12390))+((sj3*x12393))+x12405);
evalcond[6]=(((r11*x12387*x12391))+((r11*x12399))+x12398+((r10*x12390))+(((-1.0)*r10*x12396*x12400))+(((-1.0)*x12395))+((r12*x12403)));
evalcond[7]=((((-1.0)*r11*x12390*x12400))+((r11*x12396))+((x12397*x12404))+(((-1.0)*r12*sj3*x12401))+((r10*x12391))+x12405);
evalcond[8]=(((cj3*x12393))+((x12392*x12404))+x12395+((r20*x12391))+(((-1.0)*r21*x12390*x12400))+(((-1.0)*x12398))+(((-1.0)*r22*sj3*x12401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12406=((1.0)*gconst11);
CheckValue<IkReal> x12407 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12406)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12407.valid){
continue;
}
CheckValue<IkReal> x12408=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12406)))),-1);
if(!x12408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12407.value)+(((1.5707963267949)*(x12408.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12409=IKsin(j4);
IkReal x12410=IKcos(j4);
IkReal x12411=(cj2*sj1);
IkReal x12412=(cj1*sj2);
IkReal x12413=(gconst10*sj3);
IkReal x12414=(cj3*gconst10);
IkReal x12415=(gconst11*r20);
IkReal x12416=(gconst11*r21);
IkReal x12417=(gconst11*r00);
IkReal x12418=(sj1*sj2);
IkReal x12419=(cj3*gconst11);
IkReal x12420=(gconst11*r10);
IkReal x12421=(cj1*cj2);
IkReal x12422=(gconst11*sj3);
IkReal x12423=((1.0)*x12410);
IkReal x12424=((1.0)*x12409);
IkReal x12425=(gconst10*x12409);
IkReal x12426=(cj3*x12409);
IkReal x12427=(sj3*x12410);
IkReal x12428=(x12412+x12411);
evalcond[0]=(((r21*x12425))+(((-1.0)*r22*x12423))+(((-1.0)*x12415*x12424)));
evalcond[1]=((((-1.0)*x12420*x12424))+((r11*x12425))+(((-1.0)*r12*x12423)));
evalcond[2]=((1.0)+(((-1.0)*x12417*x12424))+((r01*x12425))+(((-1.0)*r02*x12423)));
evalcond[3]=(((r00*x12413))+((r02*x12426))+((r01*x12410*x12414))+((r01*x12422))+(((-1.0)*cj3*x12417*x12423)));
evalcond[4]=((((-1.0)*r02*sj3*x12424))+((r00*x12414))+((r01*x12419))+((x12417*x12427))+(((-1.0)*r01*x12413*x12423)));
evalcond[5]=(((sj3*x12416))+((r21*x12410*x12414))+(((-1.0)*cj3*x12415*x12423))+((r20*x12413))+((r22*x12426))+x12428);
evalcond[6]=(((r10*x12413))+((r11*x12410*x12414))+(((-1.0)*x12418))+((r12*x12426))+((r11*x12422))+x12421+(((-1.0)*r10*x12419*x12423)));
evalcond[7]=(((r10*x12414))+((x12420*x12427))+((r11*x12419))+(((-1.0)*r12*sj3*x12424))+x12428+(((-1.0)*r11*x12413*x12423)));
evalcond[8]=(((cj3*x12416))+(((-1.0)*x12421))+(((-1.0)*r22*sj3*x12424))+((r20*x12414))+(((-1.0)*r21*x12413*x12423))+x12418+((x12415*x12427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12429=((-1.0)*r11);
IkReal x12430=((-1.0)*r10);
CheckValue<IkReal> x12432 = IKatan2WithCheck(IkReal(x12429),IkReal(x12430),IKFAST_ATAN2_MAGTHRESH);
if(!x12432.valid){
continue;
}
IkReal x12431=((1.0)*(x12432.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12431)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12430);
rxp1_1=(px*r21);
rxp1_2=(px*x12429);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12431)));
IkReal gconst10=x12429;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12433=((-1.0)*r11);
IkReal x12434=((-1.0)*r10);
CheckValue<IkReal> x12436 = IKatan2WithCheck(IkReal(x12433),IkReal(x12434),IKFAST_ATAN2_MAGTHRESH);
if(!x12436.valid){
continue;
}
IkReal x12435=((1.0)*(x12436.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12435)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12434);
rxp1_1=(px*r21);
rxp1_2=(px*x12433);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12435)));
IkReal gconst10=x12433;
IkReal gconst11=((1.0)*r10);
IkReal x12437=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r11*r21*x12437))+(((-1.0)*r10*r20*x12437)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12438=((-1.0)*r11);
IkReal x12439=((-1.0)*r10);
CheckValue<IkReal> x12441 = IKatan2WithCheck(IkReal(x12438),IkReal(x12439),IKFAST_ATAN2_MAGTHRESH);
if(!x12441.valid){
continue;
}
IkReal x12440=((1.0)*(x12441.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12440)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12439);
rxp1_1=(px*r21);
rxp1_2=(px*x12438);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12440)));
IkReal gconst10=x12438;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12443=IKPowWithIntegerCheck(r02,-1);
if(!x12443.valid){
continue;
}
IkReal x12442=x12443.value;
CheckValue<IkReal> x12444=IKPowWithIntegerCheck(cj3,-1);
if(!x12444.valid){
continue;
}
if( IKabs((x12442*(x12444.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12442)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12442*(x12444.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12442))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12442*(x12444.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12442));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12445=IKsin(j4);
IkReal x12446=IKcos(j4);
IkReal x12447=(cj3*r10);
IkReal x12448=((1.0)*gconst11);
IkReal x12449=(sj1*sj2);
IkReal x12450=(gconst11*sj3);
IkReal x12451=(cj3*r11);
IkReal x12452=(cj2*sj1);
IkReal x12453=(gconst10*r20);
IkReal x12454=(gconst10*sj3);
IkReal x12455=((1.0)*cj0);
IkReal x12456=((1.0)*sj0);
IkReal x12457=(cj1*sj2);
IkReal x12458=(cj3*r21);
IkReal x12459=((1.0)*cj1*cj2);
IkReal x12460=(r20*x12446);
IkReal x12461=(gconst10*x12445);
IkReal x12462=(gconst10*x12446);
IkReal x12463=(r02*x12445);
IkReal x12464=((1.0)*x12446);
evalcond[0]=((((-1.0)*r02*x12464))+(((-1.0)*x12456)));
evalcond[1]=((((-1.0)*r20*x12445*x12448))+((r21*x12461)));
evalcond[2]=(cj0+(((-1.0)*r10*x12445*x12448))+((r11*x12461)));
evalcond[3]=(((cj0*x12449))+((cj3*x12463))+(((-1.0)*cj1*cj2*x12455)));
evalcond[4]=((((-1.0)*sj3*x12463))+(((-1.0)*x12452*x12455))+(((-1.0)*x12455*x12457)));
evalcond[5]=(((sj3*x12453))+(((-1.0)*cj3*x12448*x12460))+((x12458*x12462))+x12457+x12452+((r21*x12450)));
evalcond[6]=((((-1.0)*r21*x12454*x12464))+((x12450*x12460))+((cj3*x12453))+(((-1.0)*x12459))+x12449+((gconst11*x12458)));
evalcond[7]=(((sj0*x12449))+((x12451*x12462))+((r11*x12450))+(((-1.0)*cj1*cj2*x12456))+(((-1.0)*x12446*x12447*x12448))+((r10*x12454)));
evalcond[8]=(((gconst10*x12447))+((r10*x12446*x12450))+(((-1.0)*r11*x12454*x12464))+(((-1.0)*x12452*x12456))+(((-1.0)*x12456*x12457))+((gconst11*x12451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12465=((1.0)*r20);
IkReal x12466=((1.0)*gconst11);
CheckValue<IkReal> x12467=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12466))),-1);
if(!x12467.valid){
continue;
}
CheckValue<IkReal> x12468=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12465))+((cj3*gconst10*r21))),-1);
if(!x12468.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12467.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12468.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12465))+(((-1.0)*r21*sj3*x12466)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12467.value)))+IKsqr(((x12468.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12465))+(((-1.0)*r21*sj3*x12466))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12467.value)), ((x12468.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12465))+(((-1.0)*r21*sj3*x12466))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12469=IKsin(j4);
IkReal x12470=IKcos(j4);
IkReal x12471=(cj3*r10);
IkReal x12472=((1.0)*gconst11);
IkReal x12473=(sj1*sj2);
IkReal x12474=(gconst11*sj3);
IkReal x12475=(cj3*r11);
IkReal x12476=(cj2*sj1);
IkReal x12477=(gconst10*r20);
IkReal x12478=(gconst10*sj3);
IkReal x12479=((1.0)*cj0);
IkReal x12480=((1.0)*sj0);
IkReal x12481=(cj1*sj2);
IkReal x12482=(cj3*r21);
IkReal x12483=((1.0)*cj1*cj2);
IkReal x12484=(r20*x12470);
IkReal x12485=(gconst10*x12469);
IkReal x12486=(gconst10*x12470);
IkReal x12487=(r02*x12469);
IkReal x12488=((1.0)*x12470);
evalcond[0]=((((-1.0)*x12480))+(((-1.0)*r02*x12488)));
evalcond[1]=((((-1.0)*r20*x12469*x12472))+((r21*x12485)));
evalcond[2]=((((-1.0)*r10*x12469*x12472))+cj0+((r11*x12485)));
evalcond[3]=(((cj0*x12473))+((cj3*x12487))+(((-1.0)*cj1*cj2*x12479)));
evalcond[4]=((((-1.0)*x12479*x12481))+(((-1.0)*x12476*x12479))+(((-1.0)*sj3*x12487)));
evalcond[5]=(((x12482*x12486))+((sj3*x12477))+x12476+x12481+(((-1.0)*cj3*x12472*x12484))+((r21*x12474)));
evalcond[6]=((((-1.0)*x12483))+((cj3*x12477))+(((-1.0)*r21*x12478*x12488))+((x12474*x12484))+((gconst11*x12482))+x12473);
evalcond[7]=(((r11*x12474))+(((-1.0)*cj1*cj2*x12480))+(((-1.0)*x12470*x12471*x12472))+((x12475*x12486))+((sj0*x12473))+((r10*x12478)));
evalcond[8]=(((gconst10*x12471))+(((-1.0)*x12480*x12481))+(((-1.0)*r11*x12478*x12488))+((r10*x12470*x12474))+(((-1.0)*x12476*x12480))+((gconst11*x12475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12489=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12489.valid){
continue;
}
CheckValue<IkReal> x12490=IKPowWithIntegerCheck(r02,-1);
if(!x12490.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12489.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12490.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12489.value)))+IKsqr(((-1.0)*sj0*(x12490.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12489.value)), ((-1.0)*sj0*(x12490.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12491=IKsin(j4);
IkReal x12492=IKcos(j4);
IkReal x12493=(cj3*r10);
IkReal x12494=((1.0)*gconst11);
IkReal x12495=(sj1*sj2);
IkReal x12496=(gconst11*sj3);
IkReal x12497=(cj3*r11);
IkReal x12498=(cj2*sj1);
IkReal x12499=(gconst10*r20);
IkReal x12500=(gconst10*sj3);
IkReal x12501=((1.0)*cj0);
IkReal x12502=((1.0)*sj0);
IkReal x12503=(cj1*sj2);
IkReal x12504=(cj3*r21);
IkReal x12505=((1.0)*cj1*cj2);
IkReal x12506=(r20*x12492);
IkReal x12507=(gconst10*x12491);
IkReal x12508=(gconst10*x12492);
IkReal x12509=(r02*x12491);
IkReal x12510=((1.0)*x12492);
evalcond[0]=((((-1.0)*x12502))+(((-1.0)*r02*x12510)));
evalcond[1]=(((r21*x12507))+(((-1.0)*r20*x12491*x12494)));
evalcond[2]=((((-1.0)*r10*x12491*x12494))+((r11*x12507))+cj0);
evalcond[3]=(((cj3*x12509))+(((-1.0)*cj1*cj2*x12501))+((cj0*x12495)));
evalcond[4]=((((-1.0)*x12498*x12501))+(((-1.0)*sj3*x12509))+(((-1.0)*x12501*x12503)));
evalcond[5]=(((r21*x12496))+((x12504*x12508))+x12503+x12498+(((-1.0)*cj3*x12494*x12506))+((sj3*x12499)));
evalcond[6]=((((-1.0)*x12505))+((cj3*x12499))+(((-1.0)*r21*x12500*x12510))+((x12496*x12506))+x12495+((gconst11*x12504)));
evalcond[7]=((((-1.0)*x12492*x12493*x12494))+((sj0*x12495))+(((-1.0)*cj1*cj2*x12502))+((r10*x12500))+((x12497*x12508))+((r11*x12496)));
evalcond[8]=((((-1.0)*x12498*x12502))+(((-1.0)*r11*x12500*x12510))+((gconst11*x12497))+((r10*x12492*x12496))+((gconst10*x12493))+(((-1.0)*x12502*x12503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12511=((-1.0)*r11);
CheckValue<IkReal> x12514 = IKatan2WithCheck(IkReal(x12511),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12514.valid){
continue;
}
IkReal x12512=((1.0)*(x12514.value));
IkReal x12513=x11837;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12512)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12512)));
IkReal gconst10=(x12511*x12513);
IkReal gconst11=((1.0)*r10*x12513);
IkReal x12515=r12*r12;
IkReal x12516=((1.0)*sj0);
IkReal x12517=(cj0*r02);
IkReal x12518=x11837;
j4eval[0]=((IKabs(((((-1.0)*x12516*x12518))+((r12*x12517*x12518))+((sj0*x12515*x12518)))))+(IKabs(((((-1.0)*r12*x12516))+(((-1.0)*x12517))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12519=((1.0)*r12);
IkReal x12520=(sj1*sj2);
IkReal x12521=((1.0)*r21);
IkReal x12522=(cj3*gconst11);
IkReal x12523=(r11*sj3);
IkReal x12524=(gconst11*r20);
IkReal x12525=((1.0)*sj3);
IkReal x12526=(cj1*cj2);
IkReal x12527=(gconst10*r21*sj3);
IkReal x12528=(cj3*gconst10*r20);
CheckValue<IkReal> x12529=IKPowWithIntegerCheck((((gconst10*x12523*x12524))+(((-1.0)*x12521*x12523*(gconst10*gconst10)))+((gconst11*r10*x12527))+(((-1.0)*gconst11*r10*x12524*x12525))),-1);
if(!x12529.valid){
continue;
}
CheckValue<IkReal> x12530=IKPowWithIntegerCheck(((((-1.0)*gconst10*sj3*x12521))+((sj3*x12524))),-1);
if(!x12530.valid){
continue;
}
if( IKabs(((x12529.value)*((((cj0*x12527))+(((-1.0)*x12519*x12520))+(((-1.0)*x12519*x12528))+(((-1.0)*cj0*x12524*x12525))+(((-1.0)*r21*x12519*x12522))+((r12*x12526)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12530.value)*(((((-1.0)*x12521*x12522))+x12526+(((-1.0)*x12520))+(((-1.0)*x12528)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12529.value)*((((cj0*x12527))+(((-1.0)*x12519*x12520))+(((-1.0)*x12519*x12528))+(((-1.0)*cj0*x12524*x12525))+(((-1.0)*r21*x12519*x12522))+((r12*x12526))))))+IKsqr(((x12530.value)*(((((-1.0)*x12521*x12522))+x12526+(((-1.0)*x12520))+(((-1.0)*x12528))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12529.value)*((((cj0*x12527))+(((-1.0)*x12519*x12520))+(((-1.0)*x12519*x12528))+(((-1.0)*cj0*x12524*x12525))+(((-1.0)*r21*x12519*x12522))+((r12*x12526))))), ((x12530.value)*(((((-1.0)*x12521*x12522))+x12526+(((-1.0)*x12520))+(((-1.0)*x12528))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12531=IKsin(j4);
IkReal x12532=IKcos(j4);
IkReal x12533=(cj3*r10);
IkReal x12534=(gconst11*r20);
IkReal x12535=(gconst11*sj3);
IkReal x12536=(sj1*sj2);
IkReal x12537=(cj3*r11);
IkReal x12538=(r10*sj3);
IkReal x12539=(gconst10*r01);
IkReal x12540=(gconst10*sj3);
IkReal x12541=(cj2*sj1);
IkReal x12542=((1.0)*sj0);
IkReal x12543=(cj1*sj2);
IkReal x12544=(gconst10*r21);
IkReal x12545=(cj3*gconst10);
IkReal x12546=(cj3*gconst11);
IkReal x12547=((1.0)*cj0);
IkReal x12548=((1.0)*x12531);
IkReal x12549=((1.0)*cj1*cj2);
IkReal x12550=(gconst11*x12532);
IkReal x12551=(sj3*x12532);
IkReal x12552=(gconst10*x12531);
IkReal x12553=((1.0)*x12532);
IkReal x12554=(cj3*x12532);
IkReal x12555=(cj3*x12531);
evalcond[0]=(((x12531*x12544))+(((-1.0)*x12534*x12548)));
evalcond[1]=((((-1.0)*r12*x12553))+cj0+((r11*x12552))+(((-1.0)*gconst11*r10*x12548)));
evalcond[2]=(((x12531*x12539))+(((-1.0)*r02*x12553))+(((-1.0)*gconst11*r00*x12548))+(((-1.0)*x12542)));
evalcond[3]=((((-1.0)*cj3*x12534*x12553))+((r20*x12540))+((r21*x12535))+((x12544*x12554))+x12541+x12543);
evalcond[4]=(((r20*x12545))+((x12534*x12551))+(((-1.0)*r21*x12540*x12553))+x12536+((r21*x12546))+(((-1.0)*x12549)));
evalcond[5]=(((x12539*x12554))+((r00*x12540))+(((-1.0)*r00*x12546*x12553))+(((-1.0)*cj1*cj2*x12547))+((r02*x12555))+((r01*x12535))+((cj0*x12536)));
evalcond[6]=(((r11*x12535))+((r12*x12555))+(((-1.0)*cj1*cj2*x12542))+(((-1.0)*x12533*x12550))+((gconst10*x12538))+((sj0*x12536))+((gconst10*x12532*x12537)));
evalcond[7]=(((r00*x12545))+(((-1.0)*x12539*x12551))+((r01*x12546))+(((-1.0)*x12541*x12547))+(((-1.0)*r02*sj3*x12548))+((r00*x12532*x12535))+(((-1.0)*x12543*x12547)));
evalcond[8]=((((-1.0)*x12541*x12542))+(((-1.0)*x12542*x12543))+(((-1.0)*r12*sj3*x12548))+((r10*x12532*x12535))+((gconst10*x12533))+(((-1.0)*r11*x12540*x12553))+((gconst11*x12537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12556=((1.0)*sj0);
IkReal x12557=((1.0)*gconst10);
CheckValue<IkReal> x12558 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12556))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12556))+(((-1.0)*cj0*r01*x12557))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12558.valid){
continue;
}
CheckValue<IkReal> x12559=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12557))+(((-1.0)*gconst11*r21)))),-1);
if(!x12559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12558.value)+(((1.5707963267949)*(x12559.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12560=IKsin(j4);
IkReal x12561=IKcos(j4);
IkReal x12562=(cj3*r10);
IkReal x12563=(gconst11*r20);
IkReal x12564=(gconst11*sj3);
IkReal x12565=(sj1*sj2);
IkReal x12566=(cj3*r11);
IkReal x12567=(r10*sj3);
IkReal x12568=(gconst10*r01);
IkReal x12569=(gconst10*sj3);
IkReal x12570=(cj2*sj1);
IkReal x12571=((1.0)*sj0);
IkReal x12572=(cj1*sj2);
IkReal x12573=(gconst10*r21);
IkReal x12574=(cj3*gconst10);
IkReal x12575=(cj3*gconst11);
IkReal x12576=((1.0)*cj0);
IkReal x12577=((1.0)*x12560);
IkReal x12578=((1.0)*cj1*cj2);
IkReal x12579=(gconst11*x12561);
IkReal x12580=(sj3*x12561);
IkReal x12581=(gconst10*x12560);
IkReal x12582=((1.0)*x12561);
IkReal x12583=(cj3*x12561);
IkReal x12584=(cj3*x12560);
evalcond[0]=((((-1.0)*x12563*x12577))+((x12560*x12573)));
evalcond[1]=((((-1.0)*gconst11*r10*x12577))+cj0+(((-1.0)*r12*x12582))+((r11*x12581)));
evalcond[2]=((((-1.0)*x12571))+((x12560*x12568))+(((-1.0)*r02*x12582))+(((-1.0)*gconst11*r00*x12577)));
evalcond[3]=(((x12573*x12583))+((r20*x12569))+((r21*x12564))+(((-1.0)*cj3*x12563*x12582))+x12570+x12572);
evalcond[4]=(((x12563*x12580))+(((-1.0)*r21*x12569*x12582))+((r21*x12575))+(((-1.0)*x12578))+((r20*x12574))+x12565);
evalcond[5]=((((-1.0)*r00*x12575*x12582))+((r01*x12564))+((r00*x12569))+((r02*x12584))+((x12568*x12583))+(((-1.0)*cj1*cj2*x12576))+((cj0*x12565)));
evalcond[6]=(((r11*x12564))+((r12*x12584))+((sj0*x12565))+((gconst10*x12561*x12566))+(((-1.0)*x12562*x12579))+((gconst10*x12567))+(((-1.0)*cj1*cj2*x12571)));
evalcond[7]=(((r00*x12561*x12564))+(((-1.0)*x12572*x12576))+(((-1.0)*x12568*x12580))+(((-1.0)*x12570*x12576))+((r00*x12574))+((r01*x12575))+(((-1.0)*r02*sj3*x12577)));
evalcond[8]=(((gconst11*x12566))+(((-1.0)*r11*x12569*x12582))+(((-1.0)*x12570*x12571))+(((-1.0)*x12571*x12572))+((gconst10*x12562))+(((-1.0)*r12*sj3*x12577))+((r10*x12561*x12564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12585=gconst10*gconst10;
IkReal x12586=r21*r21;
IkReal x12587=gconst11*gconst11;
IkReal x12588=r20*r20;
IkReal x12589=((1.0)*cj3);
IkReal x12590=(r20*sj3);
IkReal x12591=(gconst10*gconst11);
IkReal x12592=(cj2*sj1);
IkReal x12593=(gconst10*r21);
IkReal x12594=(cj1*sj2);
IkReal x12595=((1.0)*gconst11*r20);
CheckValue<IkReal> x12596=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12587*x12588*x12589))+(((-1.0)*x12589*(r22*r22)))+(((-1.0)*x12585*x12586*x12589))+(((2.0)*cj3*r20*r21*x12591)))),-1);
if(!x12596.valid){
continue;
}
CheckValue<IkReal> x12597 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((r22*x12594))+((r22*x12592))+((gconst10*r22*x12590)))),IkReal((((sj3*x12586*x12591))+((r21*x12585*x12590))+((x12593*x12594))+(((-1.0)*x12592*x12595))+((x12592*x12593))+(((-1.0)*sj3*x12588*x12591))+(((-1.0)*x12594*x12595))+(((-1.0)*r21*x12587*x12590)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12596.value)))+(x12597.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12598=IKsin(j4);
IkReal x12599=IKcos(j4);
IkReal x12600=(cj3*r10);
IkReal x12601=(gconst11*r20);
IkReal x12602=(gconst11*sj3);
IkReal x12603=(sj1*sj2);
IkReal x12604=(gconst11*r00);
IkReal x12605=(cj3*r11);
IkReal x12606=(gconst10*sj3);
IkReal x12607=(cj2*sj1);
IkReal x12608=(cj3*r01);
IkReal x12609=((1.0)*sj0);
IkReal x12610=(cj1*sj2);
IkReal x12611=(cj3*r21);
IkReal x12612=(cj3*gconst10);
IkReal x12613=((1.0)*cj0);
IkReal x12614=((1.0)*x12599);
IkReal x12615=((1.0)*x12598);
IkReal x12616=((1.0)*cj1*cj2);
IkReal x12617=(cj3*x12598);
IkReal x12618=(gconst10*x12598);
IkReal x12619=(gconst10*x12599);
evalcond[0]=((((-1.0)*r22*x12614))+((r21*x12618))+(((-1.0)*x12601*x12615)));
evalcond[1]=((((-1.0)*r12*x12614))+cj0+(((-1.0)*gconst11*r10*x12615))+((r11*x12618)));
evalcond[2]=((((-1.0)*r02*x12614))+(((-1.0)*x12609))+(((-1.0)*x12604*x12615))+((r01*x12618)));
evalcond[3]=(((r20*x12606))+((x12611*x12619))+(((-1.0)*cj3*x12601*x12614))+x12607+x12610+((r21*x12602))+((r22*x12617)));
evalcond[4]=(((sj3*x12599*x12601))+((gconst11*x12611))+(((-1.0)*r22*sj3*x12615))+(((-1.0)*r21*x12606*x12614))+((r20*x12612))+x12603+(((-1.0)*x12616)));
evalcond[5]=(((r02*x12617))+((r00*x12606))+((r01*x12602))+((cj0*x12603))+((x12608*x12619))+(((-1.0)*cj1*cj2*x12613))+(((-1.0)*cj3*x12604*x12614)));
evalcond[6]=(((r11*x12602))+(((-1.0)*gconst11*x12600*x12614))+((r10*x12606))+((x12605*x12619))+((sj0*x12603))+((r12*x12617))+(((-1.0)*cj1*cj2*x12609)));
evalcond[7]=(((r00*x12599*x12602))+(((-1.0)*x12607*x12613))+(((-1.0)*x12610*x12613))+(((-1.0)*r01*x12606*x12614))+((gconst11*x12608))+(((-1.0)*r02*sj3*x12615))+((r00*x12612)));
evalcond[8]=(((r10*x12599*x12602))+((gconst10*x12600))+(((-1.0)*x12607*x12609))+(((-1.0)*r11*x12606*x12614))+(((-1.0)*x12609*x12610))+((gconst11*x12605))+(((-1.0)*r12*sj3*x12615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12620=((1.0)*sj0);
IkReal x12621=((1.0)*gconst10);
CheckValue<IkReal> x12622=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12621))+(((-1.0)*gconst11*r21)))),-1);
if(!x12622.valid){
continue;
}
CheckValue<IkReal> x12623 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12620))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12621))+((cj0*gconst11*r00))+(((-1.0)*gconst10*r11*x12620))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12622.value)))+(x12623.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12624=IKsin(j4);
IkReal x12625=IKcos(j4);
IkReal x12626=(cj3*r10);
IkReal x12627=(gconst11*r20);
IkReal x12628=(gconst11*sj3);
IkReal x12629=(sj1*sj2);
IkReal x12630=(gconst11*r00);
IkReal x12631=(cj3*r11);
IkReal x12632=(gconst10*sj3);
IkReal x12633=(cj2*sj1);
IkReal x12634=(cj3*r01);
IkReal x12635=((1.0)*sj0);
IkReal x12636=(cj1*sj2);
IkReal x12637=(cj3*r21);
IkReal x12638=(cj3*gconst10);
IkReal x12639=((1.0)*cj0);
IkReal x12640=((1.0)*x12625);
IkReal x12641=((1.0)*x12624);
IkReal x12642=((1.0)*cj1*cj2);
IkReal x12643=(cj3*x12624);
IkReal x12644=(gconst10*x12624);
IkReal x12645=(gconst10*x12625);
evalcond[0]=((((-1.0)*x12627*x12641))+(((-1.0)*r22*x12640))+((r21*x12644)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x12641))+(((-1.0)*r12*x12640))+((r11*x12644)));
evalcond[2]=((((-1.0)*r02*x12640))+((r01*x12644))+(((-1.0)*x12635))+(((-1.0)*x12630*x12641)));
evalcond[3]=(((r20*x12632))+((r21*x12628))+((r22*x12643))+((x12637*x12645))+x12633+x12636+(((-1.0)*cj3*x12627*x12640)));
evalcond[4]=(((r20*x12638))+((sj3*x12625*x12627))+x12629+(((-1.0)*x12642))+(((-1.0)*r21*x12632*x12640))+(((-1.0)*r22*sj3*x12641))+((gconst11*x12637)));
evalcond[5]=((((-1.0)*cj3*x12630*x12640))+(((-1.0)*cj1*cj2*x12639))+((r00*x12632))+((r01*x12628))+((cj0*x12629))+((r02*x12643))+((x12634*x12645)));
evalcond[6]=(((sj0*x12629))+((r12*x12643))+(((-1.0)*cj1*cj2*x12635))+((x12631*x12645))+((r10*x12632))+(((-1.0)*gconst11*x12626*x12640))+((r11*x12628)));
evalcond[7]=((((-1.0)*x12636*x12639))+((r00*x12625*x12628))+(((-1.0)*x12633*x12639))+((r00*x12638))+(((-1.0)*r01*x12632*x12640))+(((-1.0)*r02*sj3*x12641))+((gconst11*x12634)));
evalcond[8]=((((-1.0)*r11*x12632*x12640))+(((-1.0)*x12633*x12635))+(((-1.0)*r12*sj3*x12641))+((gconst10*x12626))+((r10*x12625*x12628))+(((-1.0)*x12635*x12636))+((gconst11*x12631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12646=((1.0)*gconst11);
CheckValue<IkReal> x12647=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12646)))),-1);
if(!x12647.valid){
continue;
}
CheckValue<IkReal> x12648 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12646))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12647.value)))+(x12648.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12649=IKsin(j4);
IkReal x12650=IKcos(j4);
IkReal x12651=(cj3*r10);
IkReal x12652=(gconst11*r20);
IkReal x12653=(gconst11*sj3);
IkReal x12654=(sj1*sj2);
IkReal x12655=(gconst11*r00);
IkReal x12656=(cj3*r11);
IkReal x12657=(gconst10*sj3);
IkReal x12658=(cj2*sj1);
IkReal x12659=(cj3*r01);
IkReal x12660=((1.0)*sj0);
IkReal x12661=(cj1*sj2);
IkReal x12662=(cj3*r21);
IkReal x12663=(cj3*gconst10);
IkReal x12664=((1.0)*cj0);
IkReal x12665=((1.0)*x12650);
IkReal x12666=((1.0)*x12649);
IkReal x12667=((1.0)*cj1*cj2);
IkReal x12668=(cj3*x12649);
IkReal x12669=(gconst10*x12649);
IkReal x12670=(gconst10*x12650);
evalcond[0]=((((-1.0)*r22*x12665))+((r21*x12669))+(((-1.0)*x12652*x12666)));
evalcond[1]=(cj0+((r11*x12669))+(((-1.0)*r12*x12665))+(((-1.0)*gconst11*r10*x12666)));
evalcond[2]=((((-1.0)*x12655*x12666))+(((-1.0)*x12660))+(((-1.0)*r02*x12665))+((r01*x12669)));
evalcond[3]=(((r21*x12653))+((x12662*x12670))+((r22*x12668))+(((-1.0)*cj3*x12652*x12665))+x12661+x12658+((r20*x12657)));
evalcond[4]=((((-1.0)*x12667))+(((-1.0)*r22*sj3*x12666))+((gconst11*x12662))+(((-1.0)*r21*x12657*x12665))+x12654+((sj3*x12650*x12652))+((r20*x12663)));
evalcond[5]=(((x12659*x12670))+((r02*x12668))+(((-1.0)*cj3*x12655*x12665))+(((-1.0)*cj1*cj2*x12664))+((r00*x12657))+((r01*x12653))+((cj0*x12654)));
evalcond[6]=(((r10*x12657))+(((-1.0)*gconst11*x12651*x12665))+((sj0*x12654))+((r11*x12653))+((r12*x12668))+((x12656*x12670))+(((-1.0)*cj1*cj2*x12660)));
evalcond[7]=((((-1.0)*x12661*x12664))+((r00*x12650*x12653))+(((-1.0)*r02*sj3*x12666))+(((-1.0)*r01*x12657*x12665))+((gconst11*x12659))+(((-1.0)*x12658*x12664))+((r00*x12663)));
evalcond[8]=(((gconst10*x12651))+((gconst11*x12656))+(((-1.0)*x12660*x12661))+(((-1.0)*x12658*x12660))+(((-1.0)*r12*sj3*x12666))+(((-1.0)*r11*x12657*x12665))+((r10*x12650*x12653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12671=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12671;
j4eval[1]=IKsign(x12671);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12672=((1.0)*cj5);
IkReal x12673=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12672)));
j4eval[0]=x12673;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12672)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12673);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12674=cj5*cj5;
IkReal x12675=(cj3*r21);
IkReal x12676=(cj5*sj5);
IkReal x12677=((1.0)*cj3);
IkReal x12678=(((cj3*r11*r20*x12676))+((r11*x12674*x12675))+(((-1.0)*r10*r20*x12674*x12677))+(((-1.0)*r12*r22*x12677))+((r10*x12675*x12676))+(((-1.0)*r11*x12675)));
j4eval[0]=x12678;
j4eval[1]=IKsign(x12678);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12679=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12679;
j4eval[1]=IKsign(x12679);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12680=((1.0)*cj5);
IkReal x12681=((((-1.0)*r01*x12680))+(((-1.0)*r00*sj5)));
j4eval[0]=x12681;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12680))+((r21*sj5))))));
j4eval[2]=IKsign(x12681);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12682=cj5*cj5;
IkReal x12683=r11*r11;
IkReal x12684=(r11*sj5);
IkReal x12685=(cj5*r10);
IkReal x12686=((r12*r12)+(((-2.0)*x12684*x12685))+((x12682*(r10*r10)))+x12683+(((-1.0)*x12682*x12683)));
j4eval[0]=x12686;
j4eval[1]=IKsign(x12686);
j4eval[2]=((IKabs(r12))+(IKabs((x12685+(((-1.0)*x12684))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12687=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12687);
rxp1_1=(px*r21);
rxp1_2=(r11*x12687);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12688=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12688);
rxp1_1=(px*r21);
rxp1_2=(r11*x12688);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12689=((1.0)*sj1);
CheckValue<IkReal> x12690=IKPowWithIntegerCheck(r02,-1);
if(!x12690.valid){
continue;
}
CheckValue<IkReal> x12691=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12691.valid){
continue;
}
if( IKabs(((x12690.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12689)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12691.value)*((((cj1*cj2))+(((-1.0)*sj2*x12689)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12690.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12689))))))+IKsqr(((x12691.value)*((((cj1*cj2))+(((-1.0)*sj2*x12689))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12690.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12689))))), ((x12691.value)*((((cj1*cj2))+(((-1.0)*sj2*x12689))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12692=IKsin(j4);
IkReal x12693=IKcos(j4);
IkReal x12694=(cj5*r20);
IkReal x12695=((1.0)*cj2);
IkReal x12696=(cj5*r10);
IkReal x12697=((1.0)*x12692);
IkReal x12698=(sj5*x12692);
IkReal x12699=((1.0)*sj5*x12693);
evalcond[0]=((-1.0)*r02*x12693);
evalcond[1]=(((r21*x12698))+(((-1.0)*x12694*x12697)));
evalcond[2]=((((-1.0)*r11*x12699))+((x12693*x12696)));
evalcond[3]=((1.0)+((r11*x12698))+(((-1.0)*x12696*x12697)));
evalcond[4]=((((-1.0)*r02*x12697))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12695)));
evalcond[5]=((((-1.0)*cj1*x12695))+((x12693*x12694))+((sj1*sj2))+(((-1.0)*r21*x12699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12700=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12700.valid){
continue;
}
CheckValue<IkReal> x12701=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12701.valid){
continue;
}
if( IKabs(((-1.0)*(x12700.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12701.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12700.value)))+IKsqr(((x12701.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12700.value)), ((x12701.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12702=IKsin(j4);
IkReal x12703=IKcos(j4);
IkReal x12704=(cj5*r20);
IkReal x12705=((1.0)*cj2);
IkReal x12706=(cj5*r10);
IkReal x12707=((1.0)*x12702);
IkReal x12708=(sj5*x12702);
IkReal x12709=((1.0)*sj5*x12703);
evalcond[0]=((-1.0)*r02*x12703);
evalcond[1]=(((r21*x12708))+(((-1.0)*x12704*x12707)));
evalcond[2]=((((-1.0)*r11*x12709))+((x12703*x12706)));
evalcond[3]=((1.0)+(((-1.0)*x12706*x12707))+((r11*x12708)));
evalcond[4]=((((-1.0)*sj1*x12705))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12707)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r21*x12709))+(((-1.0)*cj1*x12705))+((x12703*x12704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12710=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12710);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12710);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12711=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12711);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12711);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12712=IKPowWithIntegerCheck(r22,-1);
if(!x12712.valid){
continue;
}
CheckValue<IkReal> x12713=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12713.valid){
continue;
}
if( IKabs(((x12712.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12713.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12712.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12713.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12712.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12713.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12714=IKsin(j4);
IkReal x12715=IKcos(j4);
IkReal x12716=((1.0)*cj2);
IkReal x12717=(cj5*x12715);
IkReal x12718=(sj5*x12714);
IkReal x12719=((1.0)*sj5*x12715);
IkReal x12720=((1.0)*cj5*x12714);
evalcond[0]=((-1.0)*r22*x12715);
evalcond[1]=((((-1.0)*r00*x12720))+((r01*x12718)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12714))+(((-1.0)*cj1*x12716)));
evalcond[3]=(((r10*x12717))+(((-1.0)*r11*x12719)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12720))+((r11*x12718)));
evalcond[5]=((((-1.0)*sj1*x12716))+(((-1.0)*cj1*sj2))+((r00*x12717))+(((-1.0)*r01*x12719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12721=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12721.valid){
continue;
}
CheckValue<IkReal> x12722=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12722.valid){
continue;
}
if( IKabs(((-1.0)*(x12721.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12722.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12721.value)))+IKsqr(((x12722.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12721.value)), ((x12722.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12723=IKsin(j4);
IkReal x12724=IKcos(j4);
IkReal x12725=((1.0)*cj2);
IkReal x12726=(cj5*x12724);
IkReal x12727=(sj5*x12723);
IkReal x12728=((1.0)*sj5*x12724);
IkReal x12729=((1.0)*cj5*x12723);
evalcond[0]=((-1.0)*r22*x12724);
evalcond[1]=((((-1.0)*r00*x12729))+((r01*x12727)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12723))+(((-1.0)*cj1*x12725)));
evalcond[3]=(((r10*x12726))+(((-1.0)*r11*x12728)));
evalcond[4]=((1.0)+((r11*x12727))+(((-1.0)*r10*x12729)));
evalcond[5]=((((-1.0)*sj1*x12725))+(((-1.0)*r01*x12728))+(((-1.0)*cj1*sj2))+((r00*x12726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12730=cj5*cj5;
IkReal x12731=r11*r11;
IkReal x12732=(cj5*r10);
IkReal x12733=(r11*sj5);
CheckValue<IkReal> x12734 = IKatan2WithCheck(IkReal(((((-1.0)*x12733))+x12732)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12734.valid){
continue;
}
CheckValue<IkReal> x12735=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12730*x12731))+(r12*r12)+x12731+(((-2.0)*x12732*x12733))+((x12730*(r10*r10))))),-1);
if(!x12735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12734.value)+(((1.5707963267949)*(x12735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12736=IKsin(j4);
IkReal x12737=IKcos(j4);
IkReal x12738=(cj5*r10);
IkReal x12739=(r01*sj5);
IkReal x12740=((1.0)*cj2);
IkReal x12741=(cj5*r00);
IkReal x12742=(cj5*r20);
IkReal x12743=((1.0)*x12737);
IkReal x12744=((1.0)*x12736);
IkReal x12745=(sj5*x12736);
evalcond[0]=((((-1.0)*r22*x12743))+(((-1.0)*x12742*x12744))+((r21*x12745)));
evalcond[1]=((((-1.0)*x12741*x12744))+(((-1.0)*r02*x12743))+((x12736*x12739)));
evalcond[2]=((((-1.0)*r12*x12744))+((x12737*x12738))+(((-1.0)*r11*sj5*x12743)));
evalcond[3]=((1.0)+((r11*x12745))+(((-1.0)*r12*x12743))+(((-1.0)*x12738*x12744)));
evalcond[4]=(((x12737*x12742))+(((-1.0)*r21*sj5*x12743))+((sj1*sj2))+(((-1.0)*r22*x12744))+(((-1.0)*cj1*x12740)));
evalcond[5]=(((x12737*x12741))+(((-1.0)*r02*x12744))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12740))+(((-1.0)*x12739*x12743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12746=((1.0)*cj5);
CheckValue<IkReal> x12747 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12746)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12747.valid){
continue;
}
CheckValue<IkReal> x12748=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12746)))),-1);
if(!x12748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12747.value)+(((1.5707963267949)*(x12748.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12749=IKsin(j4);
IkReal x12750=IKcos(j4);
IkReal x12751=(cj5*r10);
IkReal x12752=(r01*sj5);
IkReal x12753=((1.0)*cj2);
IkReal x12754=(cj5*r00);
IkReal x12755=(cj5*r20);
IkReal x12756=((1.0)*x12750);
IkReal x12757=((1.0)*x12749);
IkReal x12758=(sj5*x12749);
evalcond[0]=((((-1.0)*r22*x12756))+(((-1.0)*x12755*x12757))+((r21*x12758)));
evalcond[1]=((((-1.0)*r02*x12756))+(((-1.0)*x12754*x12757))+((x12749*x12752)));
evalcond[2]=((((-1.0)*r12*x12757))+(((-1.0)*r11*sj5*x12756))+((x12750*x12751)));
evalcond[3]=((1.0)+((r11*x12758))+(((-1.0)*r12*x12756))+(((-1.0)*x12751*x12757)));
evalcond[4]=((((-1.0)*r21*sj5*x12756))+(((-1.0)*r22*x12757))+((sj1*sj2))+(((-1.0)*cj1*x12753))+((x12750*x12755)));
evalcond[5]=((((-1.0)*x12752*x12756))+(((-1.0)*r02*x12757))+(((-1.0)*sj1*x12753))+(((-1.0)*cj1*sj2))+((x12750*x12754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12759=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12759.valid){
continue;
}
CheckValue<IkReal> x12760 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12759.value)))+(x12760.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12761=IKsin(j4);
IkReal x12762=IKcos(j4);
IkReal x12763=(cj5*r10);
IkReal x12764=(r01*sj5);
IkReal x12765=((1.0)*cj2);
IkReal x12766=(cj5*r00);
IkReal x12767=(cj5*r20);
IkReal x12768=((1.0)*x12762);
IkReal x12769=((1.0)*x12761);
IkReal x12770=(sj5*x12761);
evalcond[0]=((((-1.0)*r22*x12768))+((r21*x12770))+(((-1.0)*x12767*x12769)));
evalcond[1]=((((-1.0)*x12766*x12769))+(((-1.0)*r02*x12768))+((x12761*x12764)));
evalcond[2]=(((x12762*x12763))+(((-1.0)*r12*x12769))+(((-1.0)*r11*sj5*x12768)));
evalcond[3]=((1.0)+(((-1.0)*x12763*x12769))+(((-1.0)*r12*x12768))+((r11*x12770)));
evalcond[4]=(((x12762*x12767))+(((-1.0)*r21*sj5*x12768))+(((-1.0)*r22*x12769))+((sj1*sj2))+(((-1.0)*cj1*x12765)));
evalcond[5]=(((x12762*x12766))+(((-1.0)*sj1*x12765))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12769))+(((-1.0)*x12764*x12768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12771=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12771;
j4eval[1]=IKsign(x12771);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12772=((1.0)*cj5);
IkReal x12773=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12772)));
j4eval[0]=x12773;
j4eval[1]=((IKabs(((((-1.0)*r20*x12772))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12774=(sj1*sj2);
IkReal x12775=(cj5*r10);
IkReal x12776=(r11*sj5);
IkReal x12777=(cj1*cj2);
IkReal x12778=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12778;
j4eval[1]=((IKabs((((r12*x12777))+(((-1.0)*r12*x12774)))))+(IKabs(((((-1.0)*x12776*x12777))+((x12774*x12776))+(((-1.0)*x12774*x12775))+((x12775*x12777))))));
j4eval[2]=IKsign(x12778);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12779=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12779);
rxp1_1=(px*r21);
rxp1_2=(r11*x12779);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12780=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12780);
rxp1_1=(px*r21);
rxp1_2=(r11*x12780);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12781=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x12781)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12781)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12782=((1.0)*cj5);
CheckValue<IkReal> x12783=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12782))),-1);
if(!x12783.valid){
continue;
}
CheckValue<IkReal> x12784=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12782))),-1);
if(!x12784.valid){
continue;
}
if( IKabs(((-1.0)*(x12783.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12784.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12783.value)))+IKsqr(((x12784.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12783.value)), ((x12784.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12785=IKsin(j4);
IkReal x12786=IKcos(j4);
IkReal x12787=((1.0)*cj2);
IkReal x12788=(r21*sj5);
IkReal x12789=(r11*sj5);
IkReal x12790=((1.0)*cj5*x12785);
IkReal x12791=((1.0)*cj5*x12786);
evalcond[0]=((-1.0)*r02*x12786);
evalcond[1]=((((-1.0)*r20*x12790))+((x12785*x12788)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12787))+((r02*x12785)));
evalcond[3]=(((x12786*x12789))+(((-1.0)*r10*x12791)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12790))+((x12785*x12789)));
evalcond[5]=(((x12786*x12788))+(((-1.0)*r20*x12791))+((sj1*sj2))+(((-1.0)*cj1*x12787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12792=IKPowWithIntegerCheck(r02,-1);
if(!x12792.valid){
continue;
}
CheckValue<IkReal> x12793=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12793.valid){
continue;
}
if( IKabs(((x12792.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12793.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12792.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12793.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12792.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12793.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12794=IKsin(j4);
IkReal x12795=IKcos(j4);
IkReal x12796=((1.0)*cj2);
IkReal x12797=(r21*sj5);
IkReal x12798=(r11*sj5);
IkReal x12799=((1.0)*cj5*x12794);
IkReal x12800=((1.0)*cj5*x12795);
evalcond[0]=((-1.0)*r02*x12795);
evalcond[1]=((((-1.0)*r20*x12799))+((x12794*x12797)));
evalcond[2]=(((r02*x12794))+(((-1.0)*sj1*x12796))+(((-1.0)*cj1*sj2)));
evalcond[3]=((((-1.0)*r10*x12800))+((x12795*x12798)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12799))+((x12794*x12798)));
evalcond[5]=(((x12795*x12797))+((sj1*sj2))+(((-1.0)*r20*x12800))+(((-1.0)*cj1*x12796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12801=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12801;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12801);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12802=((1.0)*cj5);
IkReal x12803=((((-1.0)*r21*x12802))+(((-1.0)*r20*sj5)));
j4eval[0]=x12803;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12802))+((r11*sj5))))));
j4eval[2]=IKsign(x12803);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12804=cj5*cj5;
IkReal x12805=(r11*r21);
IkReal x12806=((1.0)*r20);
IkReal x12807=(cj5*sj5);
IkReal x12808=(((r11*r20*x12807))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12804*x12806))+(((-1.0)*x12805))+((r10*r21*x12807))+((x12804*x12805)));
j4eval[0]=x12808;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12806))))));
j4eval[2]=IKsign(x12808);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12809=cj5*cj5;
IkReal x12810=(r21*sj5);
IkReal x12811=(r11*r21);
IkReal x12812=((1.0)*r20);
CheckValue<IkReal> x12813=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12809*x12812))+(((-1.0)*r12*r22))+(((-1.0)*x12811))+((x12809*x12811))+((cj5*r10*x12810))+((cj5*r11*r20*sj5)))),-1);
if(!x12813.valid){
continue;
}
CheckValue<IkReal> x12814 = IKatan2WithCheck(IkReal((x12810+(((-1.0)*cj5*x12812)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12813.value)))+(x12814.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12815=IKcos(j4);
IkReal x12816=IKsin(j4);
IkReal x12817=(cj5*r00);
IkReal x12818=(cj5*r20);
IkReal x12819=(cj5*r10);
IkReal x12820=((1.0)*x12815);
IkReal x12821=((1.0)*x12816);
IkReal x12822=(sj5*x12815);
IkReal x12823=(sj5*x12816);
evalcond[0]=(((r21*x12822))+(((-1.0)*x12818*x12820))+((r22*x12816)));
evalcond[1]=(((r12*x12816))+((r11*x12822))+(((-1.0)*x12819*x12820)));
evalcond[2]=((((-1.0)*r22*x12820))+((r21*x12823))+(((-1.0)*x12818*x12821)));
evalcond[3]=((((-1.0)*r02*x12820))+((r01*x12823))+(((-1.0)*x12817*x12821)));
evalcond[4]=((-1.0)+((r01*x12822))+((r02*x12816))+(((-1.0)*x12817*x12820)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12820))+((r11*x12823))+(((-1.0)*x12819*x12821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12824=((1.0)*cj5);
CheckValue<IkReal> x12825=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12824))+(((-1.0)*r20*sj5)))),-1);
if(!x12825.valid){
continue;
}
CheckValue<IkReal> x12826 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12824))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12825.value)))+(x12826.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12827=IKcos(j4);
IkReal x12828=IKsin(j4);
IkReal x12829=(cj5*r00);
IkReal x12830=(cj5*r20);
IkReal x12831=(cj5*r10);
IkReal x12832=((1.0)*x12827);
IkReal x12833=((1.0)*x12828);
IkReal x12834=(sj5*x12827);
IkReal x12835=(sj5*x12828);
evalcond[0]=(((r21*x12834))+((r22*x12828))+(((-1.0)*x12830*x12832)));
evalcond[1]=(((r11*x12834))+((r12*x12828))+(((-1.0)*x12831*x12832)));
evalcond[2]=(((r21*x12835))+(((-1.0)*r22*x12832))+(((-1.0)*x12830*x12833)));
evalcond[3]=((((-1.0)*x12829*x12833))+(((-1.0)*r02*x12832))+((r01*x12835)));
evalcond[4]=((-1.0)+(((-1.0)*x12829*x12832))+((r02*x12828))+((r01*x12834)));
evalcond[5]=((1.0)+((r11*x12835))+(((-1.0)*r12*x12832))+(((-1.0)*x12831*x12833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12836 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12836.valid){
continue;
}
CheckValue<IkReal> x12837=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12836.value)+(((1.5707963267949)*(x12837.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12838=IKcos(j4);
IkReal x12839=IKsin(j4);
IkReal x12840=(cj5*r00);
IkReal x12841=(cj5*r20);
IkReal x12842=(cj5*r10);
IkReal x12843=((1.0)*x12838);
IkReal x12844=((1.0)*x12839);
IkReal x12845=(sj5*x12838);
IkReal x12846=(sj5*x12839);
evalcond[0]=(((r22*x12839))+(((-1.0)*x12841*x12843))+((r21*x12845)));
evalcond[1]=(((r12*x12839))+((r11*x12845))+(((-1.0)*x12842*x12843)));
evalcond[2]=((((-1.0)*r22*x12843))+(((-1.0)*x12841*x12844))+((r21*x12846)));
evalcond[3]=((((-1.0)*r02*x12843))+((r01*x12846))+(((-1.0)*x12840*x12844)));
evalcond[4]=((-1.0)+((r01*x12845))+(((-1.0)*x12840*x12843))+((r02*x12839)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12843))+((r11*x12846))+(((-1.0)*x12842*x12844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12847=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12847;
j4eval[1]=IKsign(x12847);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12848=((1.0)*cj5);
IkReal x12849=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12848)));
j4eval[0]=x12849;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12848))))));
j4eval[2]=IKsign(x12849);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12850=cj5*cj5;
IkReal x12851=(r11*r21);
IkReal x12852=((1.0)*r20);
IkReal x12853=(cj5*sj5);
IkReal x12854=(((r11*r20*x12853))+(((-1.0)*r12*r22))+(((-1.0)*x12851))+((r10*r21*x12853))+(((-1.0)*r10*x12850*x12852))+((x12850*x12851)));
j4eval[0]=x12854;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12852)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12854);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12855=cj5*cj5;
IkReal x12856=(r21*sj5);
IkReal x12857=(r11*r21);
IkReal x12858=((1.0)*r20);
CheckValue<IkReal> x12859=IKPowWithIntegerCheck(IKsign((((x12855*x12857))+(((-1.0)*r12*r22))+(((-1.0)*x12857))+((cj5*r10*x12856))+((cj5*r11*r20*sj5))+(((-1.0)*r10*x12855*x12858)))),-1);
if(!x12859.valid){
continue;
}
CheckValue<IkReal> x12860 = IKatan2WithCheck(IkReal((x12856+(((-1.0)*cj5*x12858)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12859.value)))+(x12860.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12861=IKcos(j4);
IkReal x12862=IKsin(j4);
IkReal x12863=(cj5*r00);
IkReal x12864=(cj5*r20);
IkReal x12865=(cj5*r10);
IkReal x12866=((1.0)*x12861);
IkReal x12867=((1.0)*x12862);
IkReal x12868=(sj5*x12861);
IkReal x12869=(sj5*x12862);
evalcond[0]=(((r21*x12868))+(((-1.0)*x12864*x12866))+((r22*x12862)));
evalcond[1]=(((r11*x12868))+((r12*x12862))+(((-1.0)*x12865*x12866)));
evalcond[2]=(((r21*x12869))+(((-1.0)*r22*x12866))+(((-1.0)*x12864*x12867)));
evalcond[3]=((((-1.0)*x12863*x12867))+(((-1.0)*r02*x12866))+((r01*x12869)));
evalcond[4]=((1.0)+(((-1.0)*x12863*x12866))+((r01*x12868))+((r02*x12862)));
evalcond[5]=((1.0)+((r11*x12869))+(((-1.0)*x12865*x12867))+(((-1.0)*r12*x12866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12870=((1.0)*cj5);
CheckValue<IkReal> x12871 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12870)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12871.valid){
continue;
}
CheckValue<IkReal> x12872=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12870))+(((-1.0)*r10*sj5)))),-1);
if(!x12872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12871.value)+(((1.5707963267949)*(x12872.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12873=IKcos(j4);
IkReal x12874=IKsin(j4);
IkReal x12875=(cj5*r00);
IkReal x12876=(cj5*r20);
IkReal x12877=(cj5*r10);
IkReal x12878=((1.0)*x12873);
IkReal x12879=((1.0)*x12874);
IkReal x12880=(sj5*x12873);
IkReal x12881=(sj5*x12874);
evalcond[0]=(((r22*x12874))+(((-1.0)*x12876*x12878))+((r21*x12880)));
evalcond[1]=(((r12*x12874))+(((-1.0)*x12877*x12878))+((r11*x12880)));
evalcond[2]=((((-1.0)*r22*x12878))+(((-1.0)*x12876*x12879))+((r21*x12881)));
evalcond[3]=((((-1.0)*r02*x12878))+((r01*x12881))+(((-1.0)*x12875*x12879)));
evalcond[4]=((1.0)+((r01*x12880))+((r02*x12874))+(((-1.0)*x12875*x12878)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12878))+(((-1.0)*x12877*x12879))+((r11*x12881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12882=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12882.valid){
continue;
}
CheckValue<IkReal> x12883 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12882.value)))+(x12883.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12884=IKcos(j4);
IkReal x12885=IKsin(j4);
IkReal x12886=(cj5*r00);
IkReal x12887=(cj5*r20);
IkReal x12888=(cj5*r10);
IkReal x12889=((1.0)*x12884);
IkReal x12890=((1.0)*x12885);
IkReal x12891=(sj5*x12884);
IkReal x12892=(sj5*x12885);
evalcond[0]=(((r21*x12891))+(((-1.0)*x12887*x12889))+((r22*x12885)));
evalcond[1]=(((r12*x12885))+(((-1.0)*x12888*x12889))+((r11*x12891)));
evalcond[2]=((((-1.0)*r22*x12889))+((r21*x12892))+(((-1.0)*x12887*x12890)));
evalcond[3]=(((r01*x12892))+(((-1.0)*r02*x12889))+(((-1.0)*x12886*x12890)));
evalcond[4]=((1.0)+(((-1.0)*x12886*x12889))+((r01*x12891))+((r02*x12885)));
evalcond[5]=((1.0)+(((-1.0)*x12888*x12890))+(((-1.0)*r12*x12889))+((r11*x12892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12893=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12893;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12893);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12894=((1.0)*cj5);
IkReal x12895=((((-1.0)*r21*x12894))+(((-1.0)*r20*sj5)));
j4eval[0]=x12895;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12894))))));
j4eval[2]=IKsign(x12895);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12896=cj5*cj5;
IkReal x12897=(r11*r21);
IkReal x12898=((1.0)*r20);
IkReal x12899=(cj5*sj5);
IkReal x12900=((((-1.0)*x12897))+((x12896*x12897))+(((-1.0)*r12*r22))+((r11*r20*x12899))+((r10*r21*x12899))+(((-1.0)*r10*x12896*x12898)));
j4eval[0]=x12900;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12898))))));
j4eval[2]=IKsign(x12900);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12901=cj5*cj5;
IkReal x12902=(r21*sj5);
IkReal x12903=(r11*r21);
IkReal x12904=((1.0)*r20);
CheckValue<IkReal> x12905 = IKatan2WithCheck(IkReal((x12902+(((-1.0)*cj5*x12904)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12905.valid){
continue;
}
CheckValue<IkReal> x12906=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*x12903))+(((-1.0)*r10*x12901*x12904))+((x12901*x12903))+((cj5*r10*x12902))+((cj5*r11*r20*sj5)))),-1);
if(!x12906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12905.value)+(((1.5707963267949)*(x12906.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12907=IKcos(j4);
IkReal x12908=IKsin(j4);
IkReal x12909=(cj5*r00);
IkReal x12910=(cj5*r20);
IkReal x12911=(cj5*r10);
IkReal x12912=((1.0)*x12907);
IkReal x12913=((1.0)*x12908);
IkReal x12914=(sj5*x12907);
IkReal x12915=(sj5*x12908);
evalcond[0]=((((-1.0)*x12910*x12912))+((r21*x12914))+((r22*x12908)));
evalcond[1]=((((-1.0)*x12911*x12912))+((r12*x12908))+((r11*x12914)));
evalcond[2]=((((-1.0)*x12910*x12913))+((r21*x12915))+(((-1.0)*r22*x12912)));
evalcond[3]=((((-1.0)*x12909*x12913))+(((-1.0)*r02*x12912))+((r01*x12915)));
evalcond[4]=((-1.0)+(((-1.0)*x12909*x12912))+((r02*x12908))+((r01*x12914)));
evalcond[5]=((1.0)+(((-1.0)*x12911*x12913))+(((-1.0)*r12*x12912))+((r11*x12915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12916=((1.0)*cj5);
CheckValue<IkReal> x12917=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12916))+(((-1.0)*r20*sj5)))),-1);
if(!x12917.valid){
continue;
}
CheckValue<IkReal> x12918 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12916))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12917.value)))+(x12918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12919=IKcos(j4);
IkReal x12920=IKsin(j4);
IkReal x12921=(cj5*r00);
IkReal x12922=(cj5*r20);
IkReal x12923=(cj5*r10);
IkReal x12924=((1.0)*x12919);
IkReal x12925=((1.0)*x12920);
IkReal x12926=(sj5*x12919);
IkReal x12927=(sj5*x12920);
evalcond[0]=((((-1.0)*x12922*x12924))+((r21*x12926))+((r22*x12920)));
evalcond[1]=(((r11*x12926))+(((-1.0)*x12923*x12924))+((r12*x12920)));
evalcond[2]=((((-1.0)*x12922*x12925))+((r21*x12927))+(((-1.0)*r22*x12924)));
evalcond[3]=((((-1.0)*r02*x12924))+((r01*x12927))+(((-1.0)*x12921*x12925)));
evalcond[4]=((-1.0)+((r02*x12920))+((r01*x12926))+(((-1.0)*x12921*x12924)));
evalcond[5]=((1.0)+((r11*x12927))+(((-1.0)*r12*x12924))+(((-1.0)*x12923*x12925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12928 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12928.valid){
continue;
}
CheckValue<IkReal> x12929=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12928.value)+(((1.5707963267949)*(x12929.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12930=IKcos(j4);
IkReal x12931=IKsin(j4);
IkReal x12932=(cj5*r00);
IkReal x12933=(cj5*r20);
IkReal x12934=(cj5*r10);
IkReal x12935=((1.0)*x12930);
IkReal x12936=((1.0)*x12931);
IkReal x12937=(sj5*x12930);
IkReal x12938=(sj5*x12931);
evalcond[0]=((((-1.0)*x12933*x12935))+((r22*x12931))+((r21*x12937)));
evalcond[1]=(((r11*x12937))+((r12*x12931))+(((-1.0)*x12934*x12935)));
evalcond[2]=((((-1.0)*x12933*x12936))+(((-1.0)*r22*x12935))+((r21*x12938)));
evalcond[3]=((((-1.0)*r02*x12935))+(((-1.0)*x12932*x12936))+((r01*x12938)));
evalcond[4]=((-1.0)+((r02*x12931))+(((-1.0)*x12932*x12935))+((r01*x12937)));
evalcond[5]=((1.0)+((r11*x12938))+(((-1.0)*r12*x12935))+(((-1.0)*x12934*x12936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12939=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12939;
j4eval[1]=IKsign(x12939);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12940=((1.0)*cj5);
IkReal x12941=((((-1.0)*r11*x12940))+(((-1.0)*r10*sj5)));
j4eval[0]=x12941;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12940)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12941);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12942=cj5*cj5;
IkReal x12943=(r11*r21);
IkReal x12944=((1.0)*r20);
IkReal x12945=(cj5*sj5);
IkReal x12946=((((-1.0)*r12*r22))+((r10*r21*x12945))+(((-1.0)*r10*x12942*x12944))+(((-1.0)*x12943))+((r11*r20*x12945))+((x12942*x12943)));
j4eval[0]=x12946;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12944))+((r21*sj5))))));
j4eval[2]=IKsign(x12946);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12947=cj5*cj5;
IkReal x12948=(r21*sj5);
IkReal x12949=(r11*r21);
IkReal x12950=((1.0)*r20);
CheckValue<IkReal> x12951 = IKatan2WithCheck(IkReal((x12948+(((-1.0)*cj5*x12950)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12951.valid){
continue;
}
CheckValue<IkReal> x12952=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x12947*x12949))+(((-1.0)*x12949))+((cj5*r10*x12948))+(((-1.0)*r10*x12947*x12950))+((cj5*r11*r20*sj5)))),-1);
if(!x12952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12951.value)+(((1.5707963267949)*(x12952.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12953=IKcos(j4);
IkReal x12954=IKsin(j4);
IkReal x12955=(cj5*r00);
IkReal x12956=(cj5*r20);
IkReal x12957=(cj5*r10);
IkReal x12958=((1.0)*x12953);
IkReal x12959=((1.0)*x12954);
IkReal x12960=(sj5*x12953);
IkReal x12961=(sj5*x12954);
evalcond[0]=(((r22*x12954))+(((-1.0)*x12956*x12958))+((r21*x12960)));
evalcond[1]=((((-1.0)*x12957*x12958))+((r12*x12954))+((r11*x12960)));
evalcond[2]=((((-1.0)*x12956*x12959))+(((-1.0)*r22*x12958))+((r21*x12961)));
evalcond[3]=((((-1.0)*x12955*x12959))+((r01*x12961))+(((-1.0)*r02*x12958)));
evalcond[4]=((1.0)+(((-1.0)*x12955*x12958))+((r01*x12960))+((r02*x12954)));
evalcond[5]=((1.0)+(((-1.0)*x12957*x12959))+(((-1.0)*r12*x12958))+((r11*x12961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12962=((1.0)*cj5);
CheckValue<IkReal> x12963 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12962)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12963.valid){
continue;
}
CheckValue<IkReal> x12964=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12962)))),-1);
if(!x12964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12963.value)+(((1.5707963267949)*(x12964.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12965=IKcos(j4);
IkReal x12966=IKsin(j4);
IkReal x12967=(cj5*r00);
IkReal x12968=(cj5*r20);
IkReal x12969=(cj5*r10);
IkReal x12970=((1.0)*x12965);
IkReal x12971=((1.0)*x12966);
IkReal x12972=(sj5*x12965);
IkReal x12973=(sj5*x12966);
evalcond[0]=(((r22*x12966))+(((-1.0)*x12968*x12970))+((r21*x12972)));
evalcond[1]=(((r11*x12972))+((r12*x12966))+(((-1.0)*x12969*x12970)));
evalcond[2]=((((-1.0)*r22*x12970))+(((-1.0)*x12968*x12971))+((r21*x12973)));
evalcond[3]=(((r01*x12973))+(((-1.0)*r02*x12970))+(((-1.0)*x12967*x12971)));
evalcond[4]=((1.0)+((r01*x12972))+((r02*x12966))+(((-1.0)*x12967*x12970)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12970))+((r11*x12973))+(((-1.0)*x12969*x12971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12974=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12974.valid){
continue;
}
CheckValue<IkReal> x12975 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12974.value)))+(x12975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12976=IKcos(j4);
IkReal x12977=IKsin(j4);
IkReal x12978=(cj5*r00);
IkReal x12979=(cj5*r20);
IkReal x12980=(cj5*r10);
IkReal x12981=((1.0)*x12976);
IkReal x12982=((1.0)*x12977);
IkReal x12983=(sj5*x12976);
IkReal x12984=(sj5*x12977);
evalcond[0]=(((r21*x12983))+(((-1.0)*x12979*x12981))+((r22*x12977)));
evalcond[1]=((((-1.0)*x12980*x12981))+((r11*x12983))+((r12*x12977)));
evalcond[2]=((((-1.0)*r22*x12981))+((r21*x12984))+(((-1.0)*x12979*x12982)));
evalcond[3]=(((r01*x12984))+(((-1.0)*r02*x12981))+(((-1.0)*x12978*x12982)));
evalcond[4]=((1.0)+((r02*x12977))+((r01*x12983))+(((-1.0)*x12978*x12981)));
evalcond[5]=((1.0)+(((-1.0)*x12980*x12982))+((r11*x12984))+(((-1.0)*r12*x12981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12985=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12985;
j4eval[1]=IKsign(x12985);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12986=((1.0)*cj5);
IkReal x12987=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12986)));
j4eval[0]=x12987;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12986))))));
j4eval[2]=IKsign(x12987);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12988=cj5*cj5;
IkReal x12989=(r11*r21);
IkReal x12990=((1.0)*r20);
IkReal x12991=(cj5*sj5);
IkReal x12992=(((r10*r21*x12991))+((x12988*x12989))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12988*x12990))+((r11*r20*x12991))+(((-1.0)*x12989)));
j4eval[0]=x12992;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12990))))));
j4eval[2]=IKsign(x12992);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12993=cj5*cj5;
IkReal x12994=(r21*sj5);
IkReal x12995=(r11*r21);
IkReal x12996=((1.0)*r20);
CheckValue<IkReal> x12997 = IKatan2WithCheck(IkReal((x12994+(((-1.0)*cj5*x12996)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12997.valid){
continue;
}
CheckValue<IkReal> x12998=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x12993*x12995))+((cj5*r10*x12994))+(((-1.0)*x12995))+((cj5*r11*r20*sj5))+(((-1.0)*r10*x12993*x12996)))),-1);
if(!x12998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12997.value)+(((1.5707963267949)*(x12998.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12999=IKcos(j4);
IkReal x13000=IKsin(j4);
IkReal x13001=(cj5*r00);
IkReal x13002=(cj5*r20);
IkReal x13003=(cj5*r10);
IkReal x13004=((1.0)*x12999);
IkReal x13005=((1.0)*x13000);
IkReal x13006=(sj5*x12999);
IkReal x13007=(sj5*x13000);
evalcond[0]=((((-1.0)*x13002*x13004))+((r22*x13000))+((r21*x13006)));
evalcond[1]=((((-1.0)*x13003*x13004))+((r12*x13000))+((r11*x13006)));
evalcond[2]=((((-1.0)*x13002*x13005))+(((-1.0)*r22*x13004))+((r21*x13007)));
evalcond[3]=((((-1.0)*x13001*x13005))+(((-1.0)*r02*x13004))+((r01*x13007)));
evalcond[4]=((1.0)+(((-1.0)*x13001*x13004))+((r02*x13000))+((r01*x13006)));
evalcond[5]=((1.0)+(((-1.0)*x13003*x13005))+(((-1.0)*r12*x13004))+((r11*x13007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13008=((1.0)*cj5);
CheckValue<IkReal> x13009 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13008)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13009.valid){
continue;
}
CheckValue<IkReal> x13010=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13008))+(((-1.0)*r10*sj5)))),-1);
if(!x13010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13009.value)+(((1.5707963267949)*(x13010.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13011=IKcos(j4);
IkReal x13012=IKsin(j4);
IkReal x13013=(cj5*r00);
IkReal x13014=(cj5*r20);
IkReal x13015=(cj5*r10);
IkReal x13016=((1.0)*x13011);
IkReal x13017=((1.0)*x13012);
IkReal x13018=(sj5*x13011);
IkReal x13019=(sj5*x13012);
evalcond[0]=(((r21*x13018))+((r22*x13012))+(((-1.0)*x13014*x13016)));
evalcond[1]=((((-1.0)*x13015*x13016))+((r11*x13018))+((r12*x13012)));
evalcond[2]=((((-1.0)*r22*x13016))+((r21*x13019))+(((-1.0)*x13014*x13017)));
evalcond[3]=((((-1.0)*x13013*x13017))+((r01*x13019))+(((-1.0)*r02*x13016)));
evalcond[4]=((1.0)+(((-1.0)*x13013*x13016))+((r01*x13018))+((r02*x13012)));
evalcond[5]=((1.0)+(((-1.0)*x13015*x13017))+((r11*x13019))+(((-1.0)*r12*x13016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13020=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13020.valid){
continue;
}
CheckValue<IkReal> x13021 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13020.value)))+(x13021.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13022=IKcos(j4);
IkReal x13023=IKsin(j4);
IkReal x13024=(cj5*r00);
IkReal x13025=(cj5*r20);
IkReal x13026=(cj5*r10);
IkReal x13027=((1.0)*x13022);
IkReal x13028=((1.0)*x13023);
IkReal x13029=(sj5*x13022);
IkReal x13030=(sj5*x13023);
evalcond[0]=(((r21*x13029))+(((-1.0)*x13025*x13027))+((r22*x13023)));
evalcond[1]=(((r11*x13029))+((r12*x13023))+(((-1.0)*x13026*x13027)));
evalcond[2]=((((-1.0)*r22*x13027))+(((-1.0)*x13025*x13028))+((r21*x13030)));
evalcond[3]=((((-1.0)*x13024*x13028))+((r01*x13030))+(((-1.0)*r02*x13027)));
evalcond[4]=((1.0)+((r01*x13029))+(((-1.0)*x13024*x13027))+((r02*x13023)));
evalcond[5]=((1.0)+((r11*x13030))+(((-1.0)*x13026*x13028))+(((-1.0)*r12*x13027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13031=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13031;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13031);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13032=((1.0)*cj5);
IkReal x13033=((((-1.0)*r21*x13032))+(((-1.0)*r20*sj5)));
j4eval[0]=x13033;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x13032))))));
j4eval[2]=IKsign(x13033);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13034=cj5*cj5;
IkReal x13035=(r11*r21);
IkReal x13036=((1.0)*r20);
IkReal x13037=(cj5*sj5);
IkReal x13038=((((-1.0)*x13035))+(((-1.0)*r12*r22))+((x13034*x13035))+((r10*r21*x13037))+((r11*r20*x13037))+(((-1.0)*r10*x13034*x13036)));
j4eval[0]=x13038;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13036)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13039=cj5*cj5;
IkReal x13040=(r21*sj5);
IkReal x13041=(r11*r21);
IkReal x13042=((1.0)*r20);
CheckValue<IkReal> x13043=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13041))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13039*x13042))+((x13039*x13041))+((cj5*r10*x13040))+((cj5*r11*r20*sj5)))),-1);
if(!x13043.valid){
continue;
}
CheckValue<IkReal> x13044 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13042))+x13040)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13043.value)))+(x13044.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13045=IKcos(j4);
IkReal x13046=IKsin(j4);
IkReal x13047=(cj5*r00);
IkReal x13048=(cj5*r20);
IkReal x13049=(cj5*r10);
IkReal x13050=((1.0)*x13045);
IkReal x13051=((1.0)*x13046);
IkReal x13052=(sj5*x13045);
IkReal x13053=(sj5*x13046);
evalcond[0]=(((r21*x13052))+(((-1.0)*x13048*x13050))+((r22*x13046)));
evalcond[1]=((((-1.0)*x13049*x13050))+((r12*x13046))+((r11*x13052)));
evalcond[2]=(((r21*x13053))+(((-1.0)*x13048*x13051))+(((-1.0)*r22*x13050)));
evalcond[3]=((((-1.0)*x13047*x13051))+(((-1.0)*r02*x13050))+((r01*x13053)));
evalcond[4]=((-1.0)+((r02*x13046))+(((-1.0)*x13047*x13050))+((r01*x13052)));
evalcond[5]=((1.0)+(((-1.0)*x13049*x13051))+(((-1.0)*r12*x13050))+((r11*x13053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13054=((1.0)*cj5);
CheckValue<IkReal> x13055=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13054))+(((-1.0)*r20*sj5)))),-1);
if(!x13055.valid){
continue;
}
CheckValue<IkReal> x13056 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13054)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13055.value)))+(x13056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13057=IKcos(j4);
IkReal x13058=IKsin(j4);
IkReal x13059=(cj5*r00);
IkReal x13060=(cj5*r20);
IkReal x13061=(cj5*r10);
IkReal x13062=((1.0)*x13057);
IkReal x13063=((1.0)*x13058);
IkReal x13064=(sj5*x13057);
IkReal x13065=(sj5*x13058);
evalcond[0]=((((-1.0)*x13060*x13062))+((r22*x13058))+((r21*x13064)));
evalcond[1]=(((r12*x13058))+(((-1.0)*x13061*x13062))+((r11*x13064)));
evalcond[2]=((((-1.0)*x13060*x13063))+((r21*x13065))+(((-1.0)*r22*x13062)));
evalcond[3]=((((-1.0)*x13059*x13063))+(((-1.0)*r02*x13062))+((r01*x13065)));
evalcond[4]=((-1.0)+((r02*x13058))+(((-1.0)*x13059*x13062))+((r01*x13064)));
evalcond[5]=((1.0)+(((-1.0)*x13061*x13063))+(((-1.0)*r12*x13062))+((r11*x13065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13066 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13066.valid){
continue;
}
CheckValue<IkReal> x13067=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13066.value)+(((1.5707963267949)*(x13067.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13068=IKcos(j4);
IkReal x13069=IKsin(j4);
IkReal x13070=(cj5*r00);
IkReal x13071=(cj5*r20);
IkReal x13072=(cj5*r10);
IkReal x13073=((1.0)*x13068);
IkReal x13074=((1.0)*x13069);
IkReal x13075=(sj5*x13068);
IkReal x13076=(sj5*x13069);
evalcond[0]=(((r21*x13075))+((r22*x13069))+(((-1.0)*x13071*x13073)));
evalcond[1]=(((r12*x13069))+(((-1.0)*x13072*x13073))+((r11*x13075)));
evalcond[2]=(((r21*x13076))+(((-1.0)*r22*x13073))+(((-1.0)*x13071*x13074)));
evalcond[3]=((((-1.0)*r02*x13073))+((r01*x13076))+(((-1.0)*x13070*x13074)));
evalcond[4]=((-1.0)+((r02*x13069))+((r01*x13075))+(((-1.0)*x13070*x13073)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13073))+(((-1.0)*x13072*x13074))+((r11*x13076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13077=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13077;
j4eval[1]=IKsign(x13077);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13078=((1.0)*cj5);
IkReal x13079=((((-1.0)*r11*x13078))+(((-1.0)*r10*sj5)));
j4eval[0]=x13079;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x13078)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13080=cj5*cj5;
IkReal x13081=(r11*r21);
IkReal x13082=((1.0)*r20);
IkReal x13083=(cj5*sj5);
IkReal x13084=((((-1.0)*r12*r22))+(((-1.0)*r10*x13080*x13082))+((r11*r20*x13083))+((r10*r21*x13083))+(((-1.0)*x13081))+((x13080*x13081)));
j4eval[0]=x13084;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13082))))));
j4eval[2]=IKsign(x13084);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13085=cj5*cj5;
IkReal x13086=(r21*sj5);
IkReal x13087=(r11*r21);
IkReal x13088=((1.0)*r20);
CheckValue<IkReal> x13089=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x13085*x13087))+(((-1.0)*r10*x13085*x13088))+(((-1.0)*x13087))+((cj5*r11*r20*sj5))+((cj5*r10*x13086)))),-1);
if(!x13089.valid){
continue;
}
CheckValue<IkReal> x13090 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13088))+x13086)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13089.value)))+(x13090.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13091=IKcos(j4);
IkReal x13092=IKsin(j4);
IkReal x13093=(cj5*r00);
IkReal x13094=(cj5*r20);
IkReal x13095=(cj5*r10);
IkReal x13096=((1.0)*x13091);
IkReal x13097=((1.0)*x13092);
IkReal x13098=(sj5*x13091);
IkReal x13099=(sj5*x13092);
evalcond[0]=((((-1.0)*x13094*x13096))+((r22*x13092))+((r21*x13098)));
evalcond[1]=((((-1.0)*x13095*x13096))+((r11*x13098))+((r12*x13092)));
evalcond[2]=((((-1.0)*x13094*x13097))+(((-1.0)*r22*x13096))+((r21*x13099)));
evalcond[3]=(((r01*x13099))+(((-1.0)*x13093*x13097))+(((-1.0)*r02*x13096)));
evalcond[4]=((1.0)+((r02*x13092))+((r01*x13098))+(((-1.0)*x13093*x13096)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13096))+(((-1.0)*x13095*x13097))+((r11*x13099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13100=((1.0)*cj5);
CheckValue<IkReal> x13101 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13100)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13101.valid){
continue;
}
CheckValue<IkReal> x13102=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13100)))),-1);
if(!x13102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13101.value)+(((1.5707963267949)*(x13102.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13103=IKcos(j4);
IkReal x13104=IKsin(j4);
IkReal x13105=(cj5*r00);
IkReal x13106=(cj5*r20);
IkReal x13107=(cj5*r10);
IkReal x13108=((1.0)*x13103);
IkReal x13109=((1.0)*x13104);
IkReal x13110=(sj5*x13103);
IkReal x13111=(sj5*x13104);
evalcond[0]=((((-1.0)*x13106*x13108))+((r21*x13110))+((r22*x13104)));
evalcond[1]=((((-1.0)*x13107*x13108))+((r12*x13104))+((r11*x13110)));
evalcond[2]=((((-1.0)*x13106*x13109))+((r21*x13111))+(((-1.0)*r22*x13108)));
evalcond[3]=((((-1.0)*r02*x13108))+(((-1.0)*x13105*x13109))+((r01*x13111)));
evalcond[4]=((1.0)+((r02*x13104))+(((-1.0)*x13105*x13108))+((r01*x13110)));
evalcond[5]=((1.0)+(((-1.0)*x13107*x13109))+(((-1.0)*r12*x13108))+((r11*x13111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13112=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13112.valid){
continue;
}
CheckValue<IkReal> x13113 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13112.value)))+(x13113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13114=IKcos(j4);
IkReal x13115=IKsin(j4);
IkReal x13116=(cj5*r00);
IkReal x13117=(cj5*r20);
IkReal x13118=(cj5*r10);
IkReal x13119=((1.0)*x13114);
IkReal x13120=((1.0)*x13115);
IkReal x13121=(sj5*x13114);
IkReal x13122=(sj5*x13115);
evalcond[0]=(((r22*x13115))+((r21*x13121))+(((-1.0)*x13117*x13119)));
evalcond[1]=(((r12*x13115))+((r11*x13121))+(((-1.0)*x13118*x13119)));
evalcond[2]=((((-1.0)*x13117*x13120))+((r21*x13122))+(((-1.0)*r22*x13119)));
evalcond[3]=(((r01*x13122))+(((-1.0)*r02*x13119))+(((-1.0)*x13116*x13120)));
evalcond[4]=((1.0)+((r02*x13115))+(((-1.0)*x13116*x13119))+((r01*x13121)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13119))+((r11*x13122))+(((-1.0)*x13118*x13120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13123=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13123;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13123);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13124=((1.0)*cj5);
IkReal x13125=((((-1.0)*r21*x13124))+(((-1.0)*r20*sj5)));
j4eval[0]=x13125;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x13124))))));
j4eval[2]=IKsign(x13125);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13126=cj5*cj5;
IkReal x13127=(r11*r21);
IkReal x13128=((1.0)*r20);
IkReal x13129=(cj5*sj5);
IkReal x13130=((((-1.0)*r12*r22))+((r10*r21*x13129))+(((-1.0)*r10*x13126*x13128))+((r11*r20*x13129))+((x13126*x13127))+(((-1.0)*x13127)));
j4eval[0]=x13130;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13128)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13130);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13131=cj5*cj5;
IkReal x13132=(r21*sj5);
IkReal x13133=(r11*r21);
IkReal x13134=((1.0)*r20);
CheckValue<IkReal> x13135 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13134))+x13132)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13135.valid){
continue;
}
CheckValue<IkReal> x13136=IKPowWithIntegerCheck(IKsign((((x13131*x13133))+(((-1.0)*r10*x13131*x13134))+(((-1.0)*r12*r22))+((cj5*r10*x13132))+(((-1.0)*x13133))+((cj5*r11*r20*sj5)))),-1);
if(!x13136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13135.value)+(((1.5707963267949)*(x13136.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13137=IKcos(j4);
IkReal x13138=IKsin(j4);
IkReal x13139=(cj5*r00);
IkReal x13140=(cj5*r20);
IkReal x13141=(cj5*r10);
IkReal x13142=((1.0)*x13137);
IkReal x13143=((1.0)*x13138);
IkReal x13144=(sj5*x13137);
IkReal x13145=(sj5*x13138);
evalcond[0]=((((-1.0)*x13140*x13142))+((r21*x13144))+((r22*x13138)));
evalcond[1]=((((-1.0)*x13141*x13142))+((r12*x13138))+((r11*x13144)));
evalcond[2]=((((-1.0)*x13140*x13143))+(((-1.0)*r22*x13142))+((r21*x13145)));
evalcond[3]=((((-1.0)*x13139*x13143))+(((-1.0)*r02*x13142))+((r01*x13145)));
evalcond[4]=((-1.0)+(((-1.0)*x13139*x13142))+((r02*x13138))+((r01*x13144)));
evalcond[5]=((1.0)+(((-1.0)*x13141*x13143))+((r11*x13145))+(((-1.0)*r12*x13142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13146=((1.0)*cj5);
CheckValue<IkReal> x13147=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13146))+(((-1.0)*r20*sj5)))),-1);
if(!x13147.valid){
continue;
}
CheckValue<IkReal> x13148 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13146))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13147.value)))+(x13148.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13149=IKcos(j4);
IkReal x13150=IKsin(j4);
IkReal x13151=(cj5*r00);
IkReal x13152=(cj5*r20);
IkReal x13153=(cj5*r10);
IkReal x13154=((1.0)*x13149);
IkReal x13155=((1.0)*x13150);
IkReal x13156=(sj5*x13149);
IkReal x13157=(sj5*x13150);
evalcond[0]=(((r21*x13156))+(((-1.0)*x13152*x13154))+((r22*x13150)));
evalcond[1]=(((r11*x13156))+((r12*x13150))+(((-1.0)*x13153*x13154)));
evalcond[2]=(((r21*x13157))+(((-1.0)*x13152*x13155))+(((-1.0)*r22*x13154)));
evalcond[3]=((((-1.0)*x13151*x13155))+(((-1.0)*r02*x13154))+((r01*x13157)));
evalcond[4]=((-1.0)+(((-1.0)*x13151*x13154))+((r02*x13150))+((r01*x13156)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13154))+((r11*x13157))+(((-1.0)*x13153*x13155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13158 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13158.valid){
continue;
}
CheckValue<IkReal> x13159=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13158.value)+(((1.5707963267949)*(x13159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13160=IKcos(j4);
IkReal x13161=IKsin(j4);
IkReal x13162=(cj5*r00);
IkReal x13163=(cj5*r20);
IkReal x13164=(cj5*r10);
IkReal x13165=((1.0)*x13160);
IkReal x13166=((1.0)*x13161);
IkReal x13167=(sj5*x13160);
IkReal x13168=(sj5*x13161);
evalcond[0]=(((r22*x13161))+(((-1.0)*x13163*x13165))+((r21*x13167)));
evalcond[1]=((((-1.0)*x13164*x13165))+((r11*x13167))+((r12*x13161)));
evalcond[2]=((((-1.0)*x13163*x13166))+(((-1.0)*r22*x13165))+((r21*x13168)));
evalcond[3]=(((r01*x13168))+(((-1.0)*x13162*x13166))+(((-1.0)*r02*x13165)));
evalcond[4]=((-1.0)+((r01*x13167))+((r02*x13161))+(((-1.0)*x13162*x13165)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13165))+(((-1.0)*x13164*x13166))+((r11*x13168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13169=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13169);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13169);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13170=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13170);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13170);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13171=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13171)));
j4eval[1]=((((-1.0)*r00*x13171))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13172=((1.0)*cj5);
CheckValue<IkReal> x13173=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13172))),-1);
if(!x13173.valid){
continue;
}
CheckValue<IkReal> x13174=IKPowWithIntegerCheck(((((-1.0)*r00*x13172))+((r01*sj5))),-1);
if(!x13174.valid){
continue;
}
if( IKabs(((-1.0)*(x13173.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13174.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13173.value)))+IKsqr(((x13174.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13173.value)), ((x13174.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13175=IKsin(j4);
IkReal x13176=IKcos(j4);
IkReal x13177=((1.0)*cj5);
IkReal x13178=((1.0)*cj2);
IkReal x13179=(sj5*x13176);
IkReal x13180=(sj5*x13175);
evalcond[0]=((-1.0)*r22*x13176);
evalcond[1]=((((-1.0)*cj1*x13178))+((sj1*sj2))+((r22*x13175)));
evalcond[2]=((((-1.0)*r00*x13175*x13177))+((r01*x13180)));
evalcond[3]=((((-1.0)*r10*x13176*x13177))+((r11*x13179)));
evalcond[4]=((1.0)+((r11*x13180))+(((-1.0)*r10*x13175*x13177)));
evalcond[5]=(((r01*x13179))+(((-1.0)*r00*x13176*x13177))+(((-1.0)*sj1*x13178))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13181=IKPowWithIntegerCheck(r22,-1);
if(!x13181.valid){
continue;
}
CheckValue<IkReal> x13182=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13182.valid){
continue;
}
if( IKabs(((x13181.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13182.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13181.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13182.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13181.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13182.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13183=IKsin(j4);
IkReal x13184=IKcos(j4);
IkReal x13185=((1.0)*cj5);
IkReal x13186=((1.0)*cj2);
IkReal x13187=(sj5*x13184);
IkReal x13188=(sj5*x13183);
evalcond[0]=((-1.0)*r22*x13184);
evalcond[1]=(((r22*x13183))+((sj1*sj2))+(((-1.0)*cj1*x13186)));
evalcond[2]=(((r01*x13188))+(((-1.0)*r00*x13183*x13185)));
evalcond[3]=(((r11*x13187))+(((-1.0)*r10*x13184*x13185)));
evalcond[4]=((1.0)+((r11*x13188))+(((-1.0)*r10*x13183*x13185)));
evalcond[5]=((((-1.0)*r00*x13184*x13185))+(((-1.0)*cj1*sj2))+((r01*x13187))+(((-1.0)*sj1*x13186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13189=(sj1*sj2);
IkReal x13190=(cj5*r10);
IkReal x13191=(r11*sj5);
IkReal x13192=(cj1*cj2);
CheckValue<IkReal> x13193=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13193.valid){
continue;
}
CheckValue<IkReal> x13194 = IKatan2WithCheck(IkReal(((((-1.0)*x13189*x13190))+((x13190*x13192))+(((-1.0)*x13191*x13192))+((x13189*x13191)))),IkReal((((r12*x13192))+(((-1.0)*r12*x13189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13193.value)))+(x13194.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13195=IKcos(j4);
IkReal x13196=IKsin(j4);
IkReal x13197=(cj5*r00);
IkReal x13198=(cj5*r10);
IkReal x13199=(r21*sj5);
IkReal x13200=((1.0)*cj2);
IkReal x13201=(cj5*r20);
IkReal x13202=((1.0)*x13195);
IkReal x13203=((1.0)*x13196);
IkReal x13204=(sj5*x13196);
IkReal x13205=(sj5*x13195);
evalcond[0]=((((-1.0)*x13198*x13202))+((r12*x13196))+((r11*x13205)));
evalcond[1]=((((-1.0)*x13201*x13203))+((x13196*x13199))+(((-1.0)*r22*x13202)));
evalcond[2]=(((r01*x13204))+(((-1.0)*r02*x13202))+(((-1.0)*x13197*x13203)));
evalcond[3]=((1.0)+(((-1.0)*x13198*x13203))+(((-1.0)*r12*x13202))+((r11*x13204)));
evalcond[4]=((((-1.0)*cj1*x13200))+((sj1*sj2))+((x13195*x13199))+(((-1.0)*x13201*x13202))+((r22*x13196)));
evalcond[5]=(((r01*x13205))+((r02*x13196))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13200))+(((-1.0)*x13197*x13202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13206=((1.0)*cj5);
CheckValue<IkReal> x13207 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13207.valid){
continue;
}
CheckValue<IkReal> x13208=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13206)))),-1);
if(!x13208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13207.value)+(((1.5707963267949)*(x13208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13209=IKcos(j4);
IkReal x13210=IKsin(j4);
IkReal x13211=(cj5*r00);
IkReal x13212=(cj5*r10);
IkReal x13213=(r21*sj5);
IkReal x13214=((1.0)*cj2);
IkReal x13215=(cj5*r20);
IkReal x13216=((1.0)*x13209);
IkReal x13217=((1.0)*x13210);
IkReal x13218=(sj5*x13210);
IkReal x13219=(sj5*x13209);
evalcond[0]=(((r12*x13210))+((r11*x13219))+(((-1.0)*x13212*x13216)));
evalcond[1]=(((x13210*x13213))+(((-1.0)*x13215*x13217))+(((-1.0)*r22*x13216)));
evalcond[2]=(((r01*x13218))+(((-1.0)*x13211*x13217))+(((-1.0)*r02*x13216)));
evalcond[3]=((1.0)+((r11*x13218))+(((-1.0)*r12*x13216))+(((-1.0)*x13212*x13217)));
evalcond[4]=((((-1.0)*cj1*x13214))+((sj1*sj2))+(((-1.0)*x13215*x13216))+((x13209*x13213))+((r22*x13210)));
evalcond[5]=(((r01*x13219))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13214))+(((-1.0)*x13211*x13216))+((r02*x13210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13220=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13220.valid){
continue;
}
CheckValue<IkReal> x13221 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13220.value)))+(x13221.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13222=IKcos(j4);
IkReal x13223=IKsin(j4);
IkReal x13224=(cj5*r00);
IkReal x13225=(cj5*r10);
IkReal x13226=(r21*sj5);
IkReal x13227=((1.0)*cj2);
IkReal x13228=(cj5*r20);
IkReal x13229=((1.0)*x13222);
IkReal x13230=((1.0)*x13223);
IkReal x13231=(sj5*x13223);
IkReal x13232=(sj5*x13222);
evalcond[0]=(((r11*x13232))+(((-1.0)*x13225*x13229))+((r12*x13223)));
evalcond[1]=((((-1.0)*x13228*x13230))+(((-1.0)*r22*x13229))+((x13223*x13226)));
evalcond[2]=(((r01*x13231))+(((-1.0)*r02*x13229))+(((-1.0)*x13224*x13230)));
evalcond[3]=((1.0)+(((-1.0)*x13225*x13230))+(((-1.0)*r12*x13229))+((r11*x13231)));
evalcond[4]=((((-1.0)*cj1*x13227))+(((-1.0)*x13228*x13229))+((r22*x13223))+((sj1*sj2))+((x13222*x13226)));
evalcond[5]=(((r01*x13232))+((r02*x13223))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13227))+(((-1.0)*x13224*x13229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13233=((-1.0)*r00);
IkReal x13235 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13235)==0){
continue;
}
IkReal x13234=pow(x13235,-0.5);
CheckValue<IkReal> x13236 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13233),IKFAST_ATAN2_MAGTHRESH);
if(!x13236.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13236.value));
IkReal gconst19=(r01*x13234);
IkReal gconst20=(x13233*x13234);
CheckValue<IkReal> x13237 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13237.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13237.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13238=((-1.0)*r00);
IkReal x13239=x13234;
CheckValue<IkReal> x13241 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13238),IKFAST_ATAN2_MAGTHRESH);
if(!x13241.valid){
continue;
}
IkReal x13240=((-1.0)*(x13241.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13240;
IkReal gconst18=x13240;
IkReal gconst19=(r01*x13239);
IkReal gconst20=(x13238*x13239);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13242=((-1.0)*r00);
IkReal x13243=x13234;
CheckValue<IkReal> x13245 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13242),IKFAST_ATAN2_MAGTHRESH);
if(!x13245.valid){
continue;
}
IkReal x13244=((-1.0)*(x13245.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13244;
IkReal gconst18=x13244;
IkReal gconst19=(r01*x13243);
IkReal gconst20=(x13242*x13243);
CheckValue<IkReal> x13253=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13253.valid){
continue;
}
IkReal x13246=x13253.value;
IkReal x13247=(sj3*x13246);
IkReal x13248=(r11*x13247);
IkReal x13249=(r21*x13247);
IkReal x13250=(r20*x13247);
IkReal x13251=(r10*x13247);
IkReal x13252=(r00*r01*x13247);
j4eval[0]=IKsign((((r21*x13248*(r01*r01)))+((r12*r22*sj3))+((r00*r01*r10*x13249))+((r10*x13250*(r00*r00)))+((r00*r01*r20*x13248))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13254=gconst19*gconst19;
IkReal x13255=gconst20*gconst20;
IkReal x13256=(gconst20*sj3);
IkReal x13257=((1.0)*cj3);
IkReal x13258=(r10*sj3);
IkReal x13259=(gconst19*r21);
IkReal x13260=(r11*r20);
IkReal x13261=(cj3*gconst20);
IkReal x13262=((1.0)*r10*r20);
IkReal x13263=(r21*x13254);
CheckValue<IkReal> x13264 = IKatan2WithCheck(IkReal((((gconst19*r22*x13258))+((r11*r22*x13256)))),IkReal((((x13258*x13263))+(((-1.0)*sj3*x13255*x13260))+(((-1.0)*gconst19*x13256*x13262))+((r11*x13256*x13259)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13264.valid){
continue;
}
CheckValue<IkReal> x13265=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x13255*x13257))+((gconst19*x13260*x13261))+((r10*x13259*x13261))+(((-1.0)*r12*r22*x13257))+(((-1.0)*r11*x13257*x13263)))),-1);
if(!x13265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13264.value)+(((1.5707963267949)*(x13265.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13266=IKsin(j4);
IkReal x13267=IKcos(j4);
IkReal x13268=(sj1*sj2);
IkReal x13269=(gconst20*sj3);
IkReal x13270=(gconst19*r21);
IkReal x13271=(gconst20*r10);
IkReal x13272=(cj3*gconst19);
IkReal x13273=(gconst19*sj3);
IkReal x13274=((1.0)*cj1);
IkReal x13275=(cj3*gconst20);
IkReal x13276=(cj2*sj1);
IkReal x13277=(cj2*x13274);
IkReal x13278=((1.0)*x13267);
IkReal x13279=((1.0)*x13266);
IkReal x13280=(cj3*x13266);
IkReal x13281=(gconst19*x13266);
evalcond[0]=((((-1.0)*r22*x13278))+(((-1.0)*gconst20*r20*x13279))+((x13266*x13270)));
evalcond[1]=((((-1.0)*gconst20*r00*x13279))+(((-1.0)*r02*x13278))+((r01*x13281)));
evalcond[2]=((1.0)+((r11*x13281))+(((-1.0)*x13271*x13279))+(((-1.0)*r12*x13278)));
evalcond[3]=(((r11*x13269))+((r12*x13280))+(((-1.0)*cj3*x13271*x13278))+((r10*x13273))+((r11*x13267*x13272)));
evalcond[4]=((((-1.0)*r11*x13273*x13278))+((r11*x13275))+((r10*x13267*x13269))+((r10*x13272))+(((-1.0)*r12*sj3*x13279)));
evalcond[5]=(((r21*x13269))+((r20*x13273))+((cj1*sj2))+(((-1.0)*r20*x13275*x13278))+((cj3*x13267*x13270))+((r22*x13280))+x13276);
evalcond[6]=((((-1.0)*x13277))+((r01*x13269))+((r00*x13273))+((r02*x13280))+((r01*x13267*x13272))+x13268+(((-1.0)*r00*x13275*x13278)));
evalcond[7]=((((-1.0)*x13277))+((r21*x13275))+((r20*x13272))+((r20*x13267*x13269))+(((-1.0)*r22*sj3*x13279))+(((-1.0)*sj3*x13270*x13278))+x13268);
evalcond[8]=((((-1.0)*r01*x13273*x13278))+((r00*x13267*x13269))+(((-1.0)*x13276))+((r01*x13275))+(((-1.0)*sj2*x13274))+((r00*x13272))+(((-1.0)*r02*sj3*x13279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13282=gconst19*gconst19;
IkReal x13283=gconst20*gconst20;
IkReal x13284=(r21*sj3);
IkReal x13285=(cj3*r11);
IkReal x13286=(gconst19*gconst20);
IkReal x13287=((1.0)*r10);
IkReal x13288=(cj3*r10);
IkReal x13289=(r20*x13283);
CheckValue<IkReal> x13290 = IKatan2WithCheck(IkReal((((gconst20*r22*x13285))+((gconst19*r22*x13288)))),IkReal(((((-1.0)*x13285*x13289))+(((-1.0)*cj3*r20*x13286*x13287))+((r21*x13282*x13288))+((r21*x13285*x13286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13290.valid){
continue;
}
CheckValue<IkReal> x13291=IKPowWithIntegerCheck(IKsign((((r11*x13282*x13284))+(((-1.0)*x13284*x13286*x13287))+(((-1.0)*r11*r20*sj3*x13286))+((r10*sj3*x13289))+((r12*r22*sj3)))),-1);
if(!x13291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13290.value)+(((1.5707963267949)*(x13291.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13292=IKsin(j4);
IkReal x13293=IKcos(j4);
IkReal x13294=(sj1*sj2);
IkReal x13295=(gconst20*sj3);
IkReal x13296=(gconst19*r21);
IkReal x13297=(gconst20*r10);
IkReal x13298=(cj3*gconst19);
IkReal x13299=(gconst19*sj3);
IkReal x13300=((1.0)*cj1);
IkReal x13301=(cj3*gconst20);
IkReal x13302=(cj2*sj1);
IkReal x13303=(cj2*x13300);
IkReal x13304=((1.0)*x13293);
IkReal x13305=((1.0)*x13292);
IkReal x13306=(cj3*x13292);
IkReal x13307=(gconst19*x13292);
evalcond[0]=((((-1.0)*gconst20*r20*x13305))+((x13292*x13296))+(((-1.0)*r22*x13304)));
evalcond[1]=((((-1.0)*gconst20*r00*x13305))+((r01*x13307))+(((-1.0)*r02*x13304)));
evalcond[2]=((1.0)+(((-1.0)*x13297*x13305))+(((-1.0)*r12*x13304))+((r11*x13307)));
evalcond[3]=(((r11*x13295))+((r12*x13306))+(((-1.0)*cj3*x13297*x13304))+((r10*x13299))+((r11*x13293*x13298)));
evalcond[4]=((((-1.0)*r12*sj3*x13305))+(((-1.0)*r11*x13299*x13304))+((r10*x13298))+((r10*x13293*x13295))+((r11*x13301)));
evalcond[5]=(((r20*x13299))+((cj1*sj2))+((r22*x13306))+((cj3*x13293*x13296))+(((-1.0)*r20*x13301*x13304))+x13302+((r21*x13295)));
evalcond[6]=((((-1.0)*r00*x13301*x13304))+(((-1.0)*x13303))+x13294+((r01*x13293*x13298))+((r02*x13306))+((r00*x13299))+((r01*x13295)));
evalcond[7]=(((r21*x13301))+((r20*x13298))+(((-1.0)*r22*sj3*x13305))+((r20*x13293*x13295))+(((-1.0)*x13303))+x13294+(((-1.0)*sj3*x13296*x13304)));
evalcond[8]=((((-1.0)*r01*x13299*x13304))+(((-1.0)*r02*sj3*x13305))+((r01*x13301))+((r00*x13293*x13295))+(((-1.0)*sj2*x13300))+(((-1.0)*x13302))+((r00*x13298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13308 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13308.valid){
continue;
}
CheckValue<IkReal> x13309=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13308.value)+(((1.5707963267949)*(x13309.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13310=IKsin(j4);
IkReal x13311=IKcos(j4);
IkReal x13312=(sj1*sj2);
IkReal x13313=(gconst20*sj3);
IkReal x13314=(gconst19*r21);
IkReal x13315=(gconst20*r10);
IkReal x13316=(cj3*gconst19);
IkReal x13317=(gconst19*sj3);
IkReal x13318=((1.0)*cj1);
IkReal x13319=(cj3*gconst20);
IkReal x13320=(cj2*sj1);
IkReal x13321=(cj2*x13318);
IkReal x13322=((1.0)*x13311);
IkReal x13323=((1.0)*x13310);
IkReal x13324=(cj3*x13310);
IkReal x13325=(gconst19*x13310);
evalcond[0]=((((-1.0)*r22*x13322))+(((-1.0)*gconst20*r20*x13323))+((x13310*x13314)));
evalcond[1]=((((-1.0)*r02*x13322))+((r01*x13325))+(((-1.0)*gconst20*r00*x13323)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13322))+(((-1.0)*x13315*x13323))+((r11*x13325)));
evalcond[3]=(((r12*x13324))+((r11*x13311*x13316))+((r11*x13313))+((r10*x13317))+(((-1.0)*cj3*x13315*x13322)));
evalcond[4]=(((r11*x13319))+((r10*x13316))+(((-1.0)*r11*x13317*x13322))+(((-1.0)*r12*sj3*x13323))+((r10*x13311*x13313)));
evalcond[5]=(((r20*x13317))+((cj1*sj2))+(((-1.0)*r20*x13319*x13322))+((r21*x13313))+x13320+((r22*x13324))+((cj3*x13311*x13314)));
evalcond[6]=(((r02*x13324))+((r01*x13313))+((r00*x13317))+(((-1.0)*r00*x13319*x13322))+(((-1.0)*x13321))+x13312+((r01*x13311*x13316)));
evalcond[7]=(((r20*x13311*x13313))+((r20*x13316))+(((-1.0)*sj3*x13314*x13322))+(((-1.0)*x13321))+((r21*x13319))+(((-1.0)*r22*sj3*x13323))+x13312);
evalcond[8]=((((-1.0)*sj2*x13318))+((r00*x13311*x13313))+(((-1.0)*x13320))+((r01*x13319))+(((-1.0)*r01*x13317*x13322))+((r00*x13316))+(((-1.0)*r02*sj3*x13323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13326=((-1.0)*r01);
IkReal x13328 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13328)==0){
continue;
}
IkReal x13327=pow(x13328,-0.5);
CheckValue<IkReal> x13329 = IKatan2WithCheck(IkReal(x13326),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13329.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13329.value))));
IkReal gconst22=(x13326*x13327);
IkReal gconst23=((1.0)*r00*x13327);
CheckValue<IkReal> x13330 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13330.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13330.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13331=((-1.0)*r01);
CheckValue<IkReal> x13334 = IKatan2WithCheck(IkReal(x13331),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13334.valid){
continue;
}
IkReal x13332=((1.0)*(x13334.value));
IkReal x13333=x13327;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13332)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13332)));
IkReal gconst22=(x13331*x13333);
IkReal gconst23=((1.0)*r00*x13333);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13335=((-1.0)*r01);
CheckValue<IkReal> x13338 = IKatan2WithCheck(IkReal(x13335),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13338.valid){
continue;
}
IkReal x13336=((1.0)*(x13338.value));
IkReal x13337=x13327;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13336)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13336)));
IkReal gconst22=(x13335*x13337);
IkReal gconst23=((1.0)*r00*x13337);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13339=gconst22*gconst22;
IkReal x13340=gconst23*gconst23;
IkReal x13341=(r21*sj3);
IkReal x13342=((1.0)*cj3);
IkReal x13343=(gconst23*r11);
IkReal x13344=(r22*sj3);
IkReal x13345=(gconst22*r10);
IkReal x13346=((1.0)*r20*sj3);
CheckValue<IkReal> x13347=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x13340*x13342))+(((-1.0)*r11*r21*x13339*x13342))+((cj3*gconst22*r20*x13343))+((cj3*gconst23*r21*x13345))+(((-1.0)*r12*r22*x13342)))),-1);
if(!x13347.valid){
continue;
}
CheckValue<IkReal> x13348 = IKatan2WithCheck(IkReal((((x13344*x13345))+((x13343*x13344)))),IkReal((((gconst22*x13341*x13343))+(((-1.0)*r11*x13340*x13346))+(((-1.0)*gconst23*x13345*x13346))+((r10*x13339*x13341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13347.value)))+(x13348.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13349=IKsin(j4);
IkReal x13350=IKcos(j4);
IkReal x13351=(sj1*sj2);
IkReal x13352=(gconst23*sj3);
IkReal x13353=(gconst22*sj3);
IkReal x13354=(cj2*sj1);
IkReal x13355=((1.0)*cj1);
IkReal x13356=(cj3*gconst23);
IkReal x13357=(cj3*gconst22);
IkReal x13358=(cj2*x13355);
IkReal x13359=((1.0)*x13350);
IkReal x13360=(cj3*x13349);
IkReal x13361=(gconst22*x13349);
IkReal x13362=((1.0)*sj3*x13349);
IkReal x13363=(x13350*x13357);
IkReal x13364=((1.0)*gconst23*x13349);
evalcond[0]=((((-1.0)*r22*x13359))+(((-1.0)*r20*x13364))+((r21*x13361)));
evalcond[1]=((((-1.0)*r02*x13359))+((r01*x13361))+(((-1.0)*r00*x13364)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13364))+(((-1.0)*r12*x13359))+((r11*x13361)));
evalcond[3]=(((r12*x13360))+((r11*x13363))+((r10*x13353))+(((-1.0)*r10*x13356*x13359))+((r11*x13352)));
evalcond[4]=((((-1.0)*r12*x13362))+((r10*x13357))+((r10*x13350*x13352))+((r11*x13356))+(((-1.0)*r11*x13353*x13359)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*r20*x13356*x13359))+((r20*x13353))+((r21*x13352))+((r21*x13363))+((r22*x13360))+x13354);
evalcond[6]=(((r01*x13363))+((r01*x13352))+((r00*x13353))+(((-1.0)*x13358))+(((-1.0)*r00*x13356*x13359))+x13351+((r02*x13360)));
evalcond[7]=((((-1.0)*r22*x13362))+((r20*x13357))+(((-1.0)*r21*x13353*x13359))+((r21*x13356))+(((-1.0)*x13358))+x13351+((r20*x13350*x13352)));
evalcond[8]=((((-1.0)*x13354))+(((-1.0)*r02*x13362))+(((-1.0)*r01*x13353*x13359))+((r01*x13356))+((r00*x13357))+((r00*x13350*x13352))+(((-1.0)*sj2*x13355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13365=((1.0)*gconst23);
CheckValue<IkReal> x13366 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x13365)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13366.valid){
continue;
}
CheckValue<IkReal> x13367=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13365)))),-1);
if(!x13367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13366.value)+(((1.5707963267949)*(x13367.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13368=IKsin(j4);
IkReal x13369=IKcos(j4);
IkReal x13370=(sj1*sj2);
IkReal x13371=(gconst23*sj3);
IkReal x13372=(gconst22*sj3);
IkReal x13373=(cj2*sj1);
IkReal x13374=((1.0)*cj1);
IkReal x13375=(cj3*gconst23);
IkReal x13376=(cj3*gconst22);
IkReal x13377=(cj2*x13374);
IkReal x13378=((1.0)*x13369);
IkReal x13379=(cj3*x13368);
IkReal x13380=(gconst22*x13368);
IkReal x13381=((1.0)*sj3*x13368);
IkReal x13382=(x13369*x13376);
IkReal x13383=((1.0)*gconst23*x13368);
evalcond[0]=((((-1.0)*r22*x13378))+(((-1.0)*r20*x13383))+((r21*x13380)));
evalcond[1]=(((r01*x13380))+(((-1.0)*r00*x13383))+(((-1.0)*r02*x13378)));
evalcond[2]=((1.0)+((r11*x13380))+(((-1.0)*r10*x13383))+(((-1.0)*r12*x13378)));
evalcond[3]=(((r10*x13372))+((r12*x13379))+((r11*x13382))+((r11*x13371))+(((-1.0)*r10*x13375*x13378)));
evalcond[4]=(((r10*x13376))+((r11*x13375))+((r10*x13369*x13371))+(((-1.0)*r11*x13372*x13378))+(((-1.0)*r12*x13381)));
evalcond[5]=((((-1.0)*r20*x13375*x13378))+((cj1*sj2))+((r20*x13372))+((r22*x13379))+((r21*x13371))+x13373+((r21*x13382)));
evalcond[6]=(((r02*x13379))+((r00*x13372))+((r01*x13371))+(((-1.0)*r00*x13375*x13378))+((r01*x13382))+(((-1.0)*x13377))+x13370);
evalcond[7]=((((-1.0)*r22*x13381))+(((-1.0)*r21*x13372*x13378))+((r20*x13376))+((r20*x13369*x13371))+(((-1.0)*x13377))+((r21*x13375))+x13370);
evalcond[8]=((((-1.0)*r01*x13372*x13378))+((r00*x13376))+((r01*x13375))+(((-1.0)*r02*x13381))+((r00*x13369*x13371))+(((-1.0)*sj2*x13374))+(((-1.0)*x13373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13384=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13384.valid){
continue;
}
CheckValue<IkReal> x13385 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13384.value)))+(x13385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13386=IKsin(j4);
IkReal x13387=IKcos(j4);
IkReal x13388=(sj1*sj2);
IkReal x13389=(gconst23*sj3);
IkReal x13390=(gconst22*sj3);
IkReal x13391=(cj2*sj1);
IkReal x13392=((1.0)*cj1);
IkReal x13393=(cj3*gconst23);
IkReal x13394=(cj3*gconst22);
IkReal x13395=(cj2*x13392);
IkReal x13396=((1.0)*x13387);
IkReal x13397=(cj3*x13386);
IkReal x13398=(gconst22*x13386);
IkReal x13399=((1.0)*sj3*x13386);
IkReal x13400=(x13387*x13394);
IkReal x13401=((1.0)*gconst23*x13386);
evalcond[0]=(((r21*x13398))+(((-1.0)*r22*x13396))+(((-1.0)*r20*x13401)));
evalcond[1]=(((r01*x13398))+(((-1.0)*r00*x13401))+(((-1.0)*r02*x13396)));
evalcond[2]=((1.0)+((r11*x13398))+(((-1.0)*r10*x13401))+(((-1.0)*r12*x13396)));
evalcond[3]=((((-1.0)*r10*x13393*x13396))+((r11*x13389))+((r10*x13390))+((r11*x13400))+((r12*x13397)));
evalcond[4]=(((r11*x13393))+((r10*x13394))+(((-1.0)*r11*x13390*x13396))+(((-1.0)*r12*x13399))+((r10*x13387*x13389)));
evalcond[5]=(((r20*x13390))+((cj1*sj2))+((r21*x13400))+((r22*x13397))+(((-1.0)*r20*x13393*x13396))+x13391+((r21*x13389)));
evalcond[6]=(((r01*x13400))+((r00*x13390))+((r01*x13389))+(((-1.0)*x13395))+((r02*x13397))+x13388+(((-1.0)*r00*x13393*x13396)));
evalcond[7]=(((r21*x13393))+(((-1.0)*r22*x13399))+((r20*x13394))+(((-1.0)*x13395))+x13388+(((-1.0)*r21*x13390*x13396))+((r20*x13387*x13389)));
evalcond[8]=((((-1.0)*x13391))+((r00*x13387*x13389))+((r00*x13394))+((r01*x13393))+(((-1.0)*sj2*x13392))+(((-1.0)*r02*x13399))+(((-1.0)*r01*x13390*x13396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13403 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13403)==0){
continue;
}
IkReal x13402=pow(x13403,-0.5);
CheckValue<IkReal> x13404 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13404.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13404.value));
IkReal gconst25=((-1.0)*r21*x13402);
IkReal gconst26=(r20*x13402);
CheckValue<IkReal> x13405 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13405.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13405.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13408 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13408.valid){
continue;
}
IkReal x13406=((-1.0)*(x13408.value));
IkReal x13407=x13402;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13406;
IkReal gconst24=x13406;
IkReal gconst25=((-1.0)*r21*x13407);
IkReal gconst26=(r20*x13407);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13411 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13411.valid){
continue;
}
IkReal x13409=((-1.0)*(x13411.value));
IkReal x13410=x13402;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13409;
IkReal gconst24=x13409;
IkReal gconst25=((-1.0)*r21*x13410);
IkReal gconst26=(r20*x13410);
CheckValue<IkReal> x13419=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13419.valid){
continue;
}
IkReal x13412=x13419.value;
IkReal x13413=(sj3*x13412);
IkReal x13414=(r11*x13413);
IkReal x13415=(r00*x13413);
IkReal x13416=(r01*x13413);
IkReal x13417=(r10*x13413);
IkReal x13418=(r20*r21*x13413);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x13414))+((r01*x13414*(r21*r21)))+((r10*x13415*(r20*r20)))+((r10*r20*r21*x13416))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13420=gconst25*gconst25;
IkReal x13421=gconst26*gconst26;
IkReal x13422=(r00*r11);
IkReal x13423=(r01*r10);
IkReal x13424=(r02*sj3);
IkReal x13425=(gconst25*r10);
IkReal x13426=(gconst26*r11);
IkReal x13427=((1.0)*sj3);
IkReal x13428=((1.0)*cj3);
IkReal x13429=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13430 = IKatan2WithCheck(IkReal((((x13424*x13425))+((x13424*x13426)))),IkReal(((((-1.0)*x13421*x13422*x13427))+(((-1.0)*gconst26*r00*x13425*x13427))+((gconst25*r01*sj3*x13426))+((sj3*x13420*x13423)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13430.valid){
continue;
}
CheckValue<IkReal> x13431=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r10*x13421*x13428))+(((-1.0)*r02*r12*x13428))+(((-1.0)*r01*r11*x13420*x13428))+((x13423*x13429))+((x13422*x13429)))),-1);
if(!x13431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13430.value)+(((1.5707963267949)*(x13431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13432=IKsin(j4);
IkReal x13433=IKcos(j4);
IkReal x13434=(sj1*sj2);
IkReal x13435=(gconst26*sj3);
IkReal x13436=(gconst25*sj3);
IkReal x13437=(gconst26*r10);
IkReal x13438=(gconst25*r11);
IkReal x13439=(cj3*gconst25);
IkReal x13440=((1.0)*cj2);
IkReal x13441=(cj1*sj2);
IkReal x13442=(gconst26*r00);
IkReal x13443=(gconst26*r20);
IkReal x13444=(cj3*gconst26);
IkReal x13445=(cj1*x13440);
IkReal x13446=((1.0)*x13433);
IkReal x13447=((1.0)*x13432);
IkReal x13448=(cj3*x13432);
IkReal x13449=(gconst25*x13432);
evalcond[0]=((((-1.0)*r22*x13446))+(((-1.0)*x13443*x13447))+((r21*x13449)));
evalcond[1]=((((-1.0)*r02*x13446))+((r01*x13449))+(((-1.0)*x13442*x13447)));
evalcond[2]=((1.0)+((x13432*x13438))+(((-1.0)*x13437*x13447))+(((-1.0)*r12*x13446)));
evalcond[3]=(((r11*x13435))+((r12*x13448))+(((-1.0)*cj3*x13437*x13446))+((cj3*x13433*x13438))+((r10*x13436)));
evalcond[4]=((((-1.0)*r11*x13436*x13446))+(((-1.0)*r12*sj3*x13447))+((r11*x13444))+((r10*x13433*x13435))+((r10*x13439)));
evalcond[5]=(((r22*x13448))+x13441+((cj2*sj1))+(((-1.0)*cj3*x13443*x13446))+((r21*x13433*x13439))+((r21*x13435))+((r20*x13436)));
evalcond[6]=(((r01*x13435))+x13434+((r02*x13448))+((r01*x13433*x13439))+(((-1.0)*x13445))+(((-1.0)*cj3*x13442*x13446))+((r00*x13436)));
evalcond[7]=(x13434+(((-1.0)*r22*sj3*x13447))+(((-1.0)*x13445))+(((-1.0)*r21*x13436*x13446))+((r20*x13433*x13435))+((r20*x13439))+((r21*x13444)));
evalcond[8]=(((r00*x13433*x13435))+(((-1.0)*r01*x13436*x13446))+(((-1.0)*r02*sj3*x13447))+((r01*x13444))+(((-1.0)*x13441))+((r00*x13439))+(((-1.0)*sj1*x13440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13450=gconst26*gconst26;
IkReal x13451=gconst25*gconst25;
IkReal x13452=(r01*r10);
IkReal x13453=(cj3*r11);
IkReal x13454=(gconst25*gconst26);
IkReal x13455=(cj3*r10);
IkReal x13456=(r00*x13450);
IkReal x13457=((1.0)*sj3*x13454);
CheckValue<IkReal> x13458 = IKatan2WithCheck(IkReal((((gconst25*r02*x13455))+((gconst26*r02*x13453)))),IkReal(((((-1.0)*x13453*x13456))+(((-1.0)*r00*x13454*x13455))+((r01*x13453*x13454))+((cj3*x13451*x13452)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13458.valid){
continue;
}
CheckValue<IkReal> x13459=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x13452*x13457))+(((-1.0)*r00*r11*x13457))+((r01*r11*sj3*x13451))+((r10*sj3*x13456)))),-1);
if(!x13459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13458.value)+(((1.5707963267949)*(x13459.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13460=IKsin(j4);
IkReal x13461=IKcos(j4);
IkReal x13462=(sj1*sj2);
IkReal x13463=(gconst26*sj3);
IkReal x13464=(gconst25*sj3);
IkReal x13465=(gconst26*r10);
IkReal x13466=(gconst25*r11);
IkReal x13467=(cj3*gconst25);
IkReal x13468=((1.0)*cj2);
IkReal x13469=(cj1*sj2);
IkReal x13470=(gconst26*r00);
IkReal x13471=(gconst26*r20);
IkReal x13472=(cj3*gconst26);
IkReal x13473=(cj1*x13468);
IkReal x13474=((1.0)*x13461);
IkReal x13475=((1.0)*x13460);
IkReal x13476=(cj3*x13460);
IkReal x13477=(gconst25*x13460);
evalcond[0]=(((r21*x13477))+(((-1.0)*x13471*x13475))+(((-1.0)*r22*x13474)));
evalcond[1]=(((r01*x13477))+(((-1.0)*r02*x13474))+(((-1.0)*x13470*x13475)));
evalcond[2]=((1.0)+((x13460*x13466))+(((-1.0)*x13465*x13475))+(((-1.0)*r12*x13474)));
evalcond[3]=(((cj3*x13461*x13466))+((r10*x13464))+(((-1.0)*cj3*x13465*x13474))+((r12*x13476))+((r11*x13463)));
evalcond[4]=(((r10*x13467))+((r11*x13472))+((r10*x13461*x13463))+(((-1.0)*r12*sj3*x13475))+(((-1.0)*r11*x13464*x13474)));
evalcond[5]=(x13469+((r20*x13464))+((cj2*sj1))+((r21*x13463))+(((-1.0)*cj3*x13471*x13474))+((r22*x13476))+((r21*x13461*x13467)));
evalcond[6]=(x13462+(((-1.0)*cj3*x13470*x13474))+(((-1.0)*x13473))+((r01*x13461*x13467))+((r02*x13476))+((r01*x13463))+((r00*x13464)));
evalcond[7]=(((r20*x13461*x13463))+x13462+((r20*x13467))+(((-1.0)*r21*x13464*x13474))+(((-1.0)*r22*sj3*x13475))+((r21*x13472))+(((-1.0)*x13473)));
evalcond[8]=(((r01*x13472))+((r00*x13461*x13463))+(((-1.0)*r02*sj3*x13475))+(((-1.0)*sj1*x13468))+(((-1.0)*x13469))+(((-1.0)*r01*x13464*x13474))+((r00*x13467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13478=((1.0)*gconst26);
CheckValue<IkReal> x13479 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst25*r21))+(((-1.0)*r20*x13478)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13479.valid){
continue;
}
CheckValue<IkReal> x13480=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13478))+(((-1.0)*gconst25*r00)))),-1);
if(!x13480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13479.value)+(((1.5707963267949)*(x13480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13481=IKsin(j4);
IkReal x13482=IKcos(j4);
IkReal x13483=(sj1*sj2);
IkReal x13484=(gconst26*sj3);
IkReal x13485=(gconst25*sj3);
IkReal x13486=(gconst26*r10);
IkReal x13487=(gconst25*r11);
IkReal x13488=(cj3*gconst25);
IkReal x13489=((1.0)*cj2);
IkReal x13490=(cj1*sj2);
IkReal x13491=(gconst26*r00);
IkReal x13492=(gconst26*r20);
IkReal x13493=(cj3*gconst26);
IkReal x13494=(cj1*x13489);
IkReal x13495=((1.0)*x13482);
IkReal x13496=((1.0)*x13481);
IkReal x13497=(cj3*x13481);
IkReal x13498=(gconst25*x13481);
evalcond[0]=((((-1.0)*r22*x13495))+(((-1.0)*x13492*x13496))+((r21*x13498)));
evalcond[1]=((((-1.0)*x13491*x13496))+(((-1.0)*r02*x13495))+((r01*x13498)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13495))+(((-1.0)*x13486*x13496))+((x13481*x13487)));
evalcond[3]=((((-1.0)*cj3*x13486*x13495))+((r11*x13484))+((r10*x13485))+((cj3*x13482*x13487))+((r12*x13497)));
evalcond[4]=((((-1.0)*r11*x13485*x13495))+((r10*x13482*x13484))+(((-1.0)*r12*sj3*x13496))+((r10*x13488))+((r11*x13493)));
evalcond[5]=(x13490+((cj2*sj1))+((r22*x13497))+((r21*x13482*x13488))+((r20*x13485))+(((-1.0)*cj3*x13492*x13495))+((r21*x13484)));
evalcond[6]=(x13483+((r02*x13497))+((r01*x13482*x13488))+(((-1.0)*cj3*x13491*x13495))+((r00*x13485))+((r01*x13484))+(((-1.0)*x13494)));
evalcond[7]=(x13483+((r20*x13482*x13484))+(((-1.0)*r21*x13485*x13495))+(((-1.0)*r22*sj3*x13496))+((r20*x13488))+((r21*x13493))+(((-1.0)*x13494)));
evalcond[8]=((((-1.0)*sj1*x13489))+(((-1.0)*r02*sj3*x13496))+(((-1.0)*x13490))+(((-1.0)*r01*x13485*x13495))+((r00*x13482*x13484))+((r00*x13488))+((r01*x13493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13500 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13500)==0){
continue;
}
IkReal x13499=pow(x13500,-0.5);
CheckValue<IkReal> x13501 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13501.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13501.value))));
IkReal gconst28=((1.0)*r21*x13499);
IkReal gconst29=((-1.0)*r20*x13499);
CheckValue<IkReal> x13502 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13502.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13502.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13505 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13505.valid){
continue;
}
IkReal x13503=((1.0)*(x13505.value));
IkReal x13504=x13499;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13503)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13503)));
IkReal gconst28=((1.0)*r21*x13504);
IkReal gconst29=((-1.0)*r20*x13504);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13508 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13508.valid){
continue;
}
IkReal x13506=((1.0)*(x13508.value));
IkReal x13507=x13499;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13506)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13506)));
IkReal gconst28=((1.0)*r21*x13507);
IkReal gconst29=((-1.0)*r20*x13507);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13511 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13511.valid){
continue;
}
IkReal x13509=((1.0)*(x13511.value));
IkReal x13510=x13499;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13509)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13509)));
IkReal gconst28=((1.0)*r21*x13510);
IkReal gconst29=((-1.0)*r20*x13510);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13514 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13514.valid){
continue;
}
IkReal x13512=((1.0)*(x13514.value));
IkReal x13513=x13499;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13512)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13512)));
IkReal gconst28=((1.0)*r21*x13513);
IkReal gconst29=((-1.0)*r20*x13513);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13517 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13517.valid){
continue;
}
IkReal x13515=((1.0)*(x13517.value));
IkReal x13516=x13499;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13515)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13515)));
IkReal gconst28=((1.0)*r21*x13516);
IkReal gconst29=((-1.0)*r20*x13516);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13520 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13520.valid){
continue;
}
IkReal x13518=((1.0)*(x13520.value));
IkReal x13519=x13499;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13518)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13518)));
IkReal gconst28=((1.0)*r21*x13519);
IkReal gconst29=((-1.0)*r20*x13519);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13521=(gconst29*r10);
IkReal x13522=(gconst28*r11);
CheckValue<IkReal> x13523 = IKatan2WithCheck(IkReal((x13521+(((-1.0)*x13522)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13523.valid){
continue;
}
CheckValue<IkReal> x13524=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13522*x13522)+(((-2.0)*x13521*x13522))+(x13521*x13521))),-1);
if(!x13524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13523.value)+(((1.5707963267949)*(x13524.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13525=IKsin(j4);
IkReal x13526=IKcos(j4);
IkReal x13527=(gconst28*r11);
IkReal x13528=((1.0)*cj2);
IkReal x13529=((1.0)*x13526);
IkReal x13530=(gconst29*x13526);
IkReal x13531=(gconst28*x13525);
IkReal x13532=((1.0)*x13525);
IkReal x13533=(gconst29*x13532);
evalcond[0]=((((-1.0)*r22*x13529))+(((-1.0)*r20*x13533))+((r21*x13531)));
evalcond[1]=((((-1.0)*r00*x13533))+((r01*x13531))+(((-1.0)*r02*x13529)));
evalcond[2]=((((-1.0)*r12*x13532))+(((-1.0)*x13527*x13529))+((r10*x13530)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13529))+((x13525*x13527))+(((-1.0)*r10*x13533)));
evalcond[4]=((((-1.0)*r22*x13532))+((r20*x13530))+((sj1*sj2))+(((-1.0)*cj1*x13528))+(((-1.0)*gconst28*r21*x13529)));
evalcond[5]=((((-1.0)*sj1*x13528))+(((-1.0)*gconst28*r01*x13529))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13532))+((r00*x13530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13534=((1.0)*gconst29);
CheckValue<IkReal> x13535 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13534))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13535.valid){
continue;
}
CheckValue<IkReal> x13536=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13534)))),-1);
if(!x13536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13535.value)+(((1.5707963267949)*(x13536.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13537=IKsin(j4);
IkReal x13538=IKcos(j4);
IkReal x13539=(gconst28*r11);
IkReal x13540=((1.0)*cj2);
IkReal x13541=((1.0)*x13538);
IkReal x13542=(gconst29*x13538);
IkReal x13543=(gconst28*x13537);
IkReal x13544=((1.0)*x13537);
IkReal x13545=(gconst29*x13544);
evalcond[0]=(((r21*x13543))+(((-1.0)*r22*x13541))+(((-1.0)*r20*x13545)));
evalcond[1]=(((r01*x13543))+(((-1.0)*r02*x13541))+(((-1.0)*r00*x13545)));
evalcond[2]=((((-1.0)*x13539*x13541))+((r10*x13542))+(((-1.0)*r12*x13544)));
evalcond[3]=((1.0)+((x13537*x13539))+(((-1.0)*r10*x13545))+(((-1.0)*r12*x13541)));
evalcond[4]=((((-1.0)*gconst28*r21*x13541))+((sj1*sj2))+((r20*x13542))+(((-1.0)*r22*x13544))+(((-1.0)*cj1*x13540)));
evalcond[5]=((((-1.0)*gconst28*r01*x13541))+((r00*x13542))+(((-1.0)*r02*x13544))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13546=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13546.valid){
continue;
}
CheckValue<IkReal> x13547 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13546.value)))+(x13547.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13548=IKsin(j4);
IkReal x13549=IKcos(j4);
IkReal x13550=(gconst28*r11);
IkReal x13551=((1.0)*cj2);
IkReal x13552=((1.0)*x13549);
IkReal x13553=(gconst29*x13549);
IkReal x13554=(gconst28*x13548);
IkReal x13555=((1.0)*x13548);
IkReal x13556=(gconst29*x13555);
evalcond[0]=(((r21*x13554))+(((-1.0)*r22*x13552))+(((-1.0)*r20*x13556)));
evalcond[1]=((((-1.0)*r00*x13556))+((r01*x13554))+(((-1.0)*r02*x13552)));
evalcond[2]=(((r10*x13553))+(((-1.0)*x13550*x13552))+(((-1.0)*r12*x13555)));
evalcond[3]=((1.0)+((x13548*x13550))+(((-1.0)*r12*x13552))+(((-1.0)*r10*x13556)));
evalcond[4]=((((-1.0)*gconst28*r21*x13552))+((sj1*sj2))+(((-1.0)*cj1*x13551))+((r20*x13553))+(((-1.0)*r22*x13555)));
evalcond[5]=((((-1.0)*gconst28*r01*x13552))+((r00*x13553))+(((-1.0)*r02*x13555))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13559 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13559.valid){
continue;
}
IkReal x13557=((1.0)*(x13559.value));
IkReal x13558=x13499;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13557)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13557)));
IkReal gconst28=((1.0)*r21*x13558);
IkReal gconst29=((-1.0)*r20*x13558);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13562 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13562.valid){
continue;
}
IkReal x13560=((1.0)*(x13562.value));
IkReal x13561=x13499;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13560)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13560)));
IkReal gconst28=((1.0)*r21*x13561);
IkReal gconst29=((-1.0)*r20*x13561);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13565 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13565.valid){
continue;
}
IkReal x13563=((1.0)*(x13565.value));
IkReal x13564=x13499;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13563)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13563)));
IkReal gconst28=((1.0)*r21*x13564);
IkReal gconst29=((-1.0)*r20*x13564);
IkReal x13566=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13570=IKPowWithIntegerCheck(x13566,-1);
if(!x13570.valid){
continue;
}
IkReal x13567=x13570.value;
IkReal x13568=((1.0)*x13567);
IkReal x13569=((((-1.0)*x13568*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x13567))+(((-1.0)*x13568*(r10*r10)*(r20*r20))));
j4eval[0]=x13569;
j4eval[1]=r12;
j4eval[2]=x13566;
j4eval[3]=IKsign(x13569);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13571=(gconst28*r11);
IkReal x13572=(gconst29*r10);
CheckValue<IkReal> x13573 = IKatan2WithCheck(IkReal((x13571+(((-1.0)*x13572)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13573.valid){
continue;
}
CheckValue<IkReal> x13574=IKPowWithIntegerCheck(IKsign(((((2.0)*x13571*x13572))+(((-1.0)*(x13571*x13571)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13572*x13572))))),-1);
if(!x13574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13573.value)+(((1.5707963267949)*(x13574.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13575=IKcos(j4);
IkReal x13576=IKsin(j4);
IkReal x13577=(gconst29*r10);
IkReal x13578=(gconst29*r20);
IkReal x13579=(gconst28*r21);
IkReal x13580=((1.0)*cj2);
IkReal x13581=(gconst29*r00);
IkReal x13582=((1.0)*x13575);
IkReal x13583=((1.0)*x13576);
IkReal x13584=(gconst28*x13575);
IkReal x13585=(gconst28*x13576);
evalcond[0]=(((r12*x13576))+(((-1.0)*x13577*x13582))+((r11*x13584)));
evalcond[1]=((((-1.0)*x13578*x13583))+(((-1.0)*r22*x13582))+((x13576*x13579)));
evalcond[2]=((((-1.0)*r02*x13582))+(((-1.0)*x13581*x13583))+((r01*x13585)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13582))+(((-1.0)*x13577*x13583))+((r11*x13585)));
evalcond[4]=((((-1.0)*x13578*x13582))+((sj1*sj2))+(((-1.0)*cj1*x13580))+((x13575*x13579))+((r22*x13576)));
evalcond[5]=((((-1.0)*x13581*x13582))+(((-1.0)*sj1*x13580))+(((-1.0)*cj1*sj2))+((r01*x13584))+((r02*x13576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13586=((1.0)*gconst29);
CheckValue<IkReal> x13587=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13586))+(((-1.0)*gconst28*r00)))),-1);
if(!x13587.valid){
continue;
}
CheckValue<IkReal> x13588 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13586))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13587.value)))+(x13588.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13589=IKcos(j4);
IkReal x13590=IKsin(j4);
IkReal x13591=(gconst29*r10);
IkReal x13592=(gconst29*r20);
IkReal x13593=(gconst28*r21);
IkReal x13594=((1.0)*cj2);
IkReal x13595=(gconst29*r00);
IkReal x13596=((1.0)*x13589);
IkReal x13597=((1.0)*x13590);
IkReal x13598=(gconst28*x13589);
IkReal x13599=(gconst28*x13590);
evalcond[0]=(((r11*x13598))+((r12*x13590))+(((-1.0)*x13591*x13596)));
evalcond[1]=((((-1.0)*x13592*x13597))+(((-1.0)*r22*x13596))+((x13590*x13593)));
evalcond[2]=(((r01*x13599))+(((-1.0)*r02*x13596))+(((-1.0)*x13595*x13597)));
evalcond[3]=((1.0)+((r11*x13599))+(((-1.0)*r12*x13596))+(((-1.0)*x13591*x13597)));
evalcond[4]=(((x13589*x13593))+(((-1.0)*x13592*x13596))+((r22*x13590))+((sj1*sj2))+(((-1.0)*cj1*x13594)));
evalcond[5]=(((r01*x13598))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13594))+((r02*x13590))+(((-1.0)*x13595*x13596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13600=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13600.valid){
continue;
}
CheckValue<IkReal> x13601 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13600.value)))+(x13601.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13602=IKcos(j4);
IkReal x13603=IKsin(j4);
IkReal x13604=(gconst29*r10);
IkReal x13605=(gconst29*r20);
IkReal x13606=(gconst28*r21);
IkReal x13607=((1.0)*cj2);
IkReal x13608=(gconst29*r00);
IkReal x13609=((1.0)*x13602);
IkReal x13610=((1.0)*x13603);
IkReal x13611=(gconst28*x13602);
IkReal x13612=(gconst28*x13603);
evalcond[0]=((((-1.0)*x13604*x13609))+((r12*x13603))+((r11*x13611)));
evalcond[1]=(((x13603*x13606))+(((-1.0)*r22*x13609))+(((-1.0)*x13605*x13610)));
evalcond[2]=((((-1.0)*x13608*x13610))+(((-1.0)*r02*x13609))+((r01*x13612)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13609))+(((-1.0)*x13604*x13610))+((r11*x13612)));
evalcond[4]=((((-1.0)*x13605*x13609))+(((-1.0)*cj1*x13607))+((r22*x13603))+((sj1*sj2))+((x13602*x13606)));
evalcond[5]=((((-1.0)*sj1*x13607))+(((-1.0)*cj1*sj2))+((r01*x13611))+((r02*x13603))+(((-1.0)*x13608*x13609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13615 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13615.valid){
continue;
}
IkReal x13613=((1.0)*(x13615.value));
IkReal x13614=x13499;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13613)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13613)));
IkReal gconst28=((1.0)*r21*x13614);
IkReal gconst29=((-1.0)*r20*x13614);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13618 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13618.valid){
continue;
}
IkReal x13616=((1.0)*(x13618.value));
IkReal x13617=x13499;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13616)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13616)));
IkReal gconst28=((1.0)*r21*x13617);
IkReal gconst29=((-1.0)*r20*x13617);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13621 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13621.valid){
continue;
}
IkReal x13619=((1.0)*(x13621.value));
IkReal x13620=x13499;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13619)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13619)));
IkReal gconst28=((1.0)*r21*x13620);
IkReal gconst29=((-1.0)*r20*x13620);
IkReal x13622=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13626=IKPowWithIntegerCheck(x13622,-1);
if(!x13626.valid){
continue;
}
IkReal x13623=x13626.value;
IkReal x13624=((1.0)*x13623);
IkReal x13625=((((-1.0)*x13624*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x13623))+(((-1.0)*(r12*r12)))+(((-1.0)*x13624*(r10*r10)*(r20*r20))));
j4eval[0]=x13625;
j4eval[1]=r12;
j4eval[2]=x13622;
j4eval[3]=IKsign(x13625);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13627=(gconst28*r11);
IkReal x13628=(gconst29*r10);
CheckValue<IkReal> x13629=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13627*x13627)))+(((-1.0)*(x13628*x13628)))+(((2.0)*x13627*x13628))+(((-1.0)*(r12*r12))))),-1);
if(!x13629.valid){
continue;
}
CheckValue<IkReal> x13630 = IKatan2WithCheck(IkReal((x13627+(((-1.0)*x13628)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13629.value)))+(x13630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13631=IKcos(j4);
IkReal x13632=IKsin(j4);
IkReal x13633=(gconst29*r10);
IkReal x13634=(gconst29*r20);
IkReal x13635=(gconst28*r21);
IkReal x13636=(gconst29*r00);
IkReal x13637=((1.0)*x13631);
IkReal x13638=((1.0)*x13632);
IkReal x13639=(gconst28*x13631);
IkReal x13640=(gconst28*x13632);
evalcond[0]=(((r11*x13639))+((r12*x13632))+(((-1.0)*x13633*x13637)));
evalcond[1]=(((x13632*x13635))+(((-1.0)*x13634*x13638))+(((-1.0)*r22*x13637)));
evalcond[2]=((((-1.0)*x13636*x13638))+(((-1.0)*r02*x13637))+((r01*x13640)));
evalcond[3]=((1.0)+((r11*x13640))+(((-1.0)*r12*x13637))+(((-1.0)*x13633*x13638)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13634*x13637))+((cj1*sj2))+((r22*x13632))+((x13631*x13635)));
evalcond[5]=((((-1.0)*x13636*x13637))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13632))+((r01*x13639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13641=((1.0)*gconst29);
CheckValue<IkReal> x13642=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13641)))),-1);
if(!x13642.valid){
continue;
}
CheckValue<IkReal> x13643 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13641))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13642.value)))+(x13643.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13644=IKcos(j4);
IkReal x13645=IKsin(j4);
IkReal x13646=(gconst29*r10);
IkReal x13647=(gconst29*r20);
IkReal x13648=(gconst28*r21);
IkReal x13649=(gconst29*r00);
IkReal x13650=((1.0)*x13644);
IkReal x13651=((1.0)*x13645);
IkReal x13652=(gconst28*x13644);
IkReal x13653=(gconst28*x13645);
evalcond[0]=(((r12*x13645))+((r11*x13652))+(((-1.0)*x13646*x13650)));
evalcond[1]=((((-1.0)*r22*x13650))+((x13645*x13648))+(((-1.0)*x13647*x13651)));
evalcond[2]=(((r01*x13653))+(((-1.0)*r02*x13650))+(((-1.0)*x13649*x13651)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13650))+((r11*x13653))+(((-1.0)*x13646*x13651)));
evalcond[4]=(((cj2*sj1))+((r22*x13645))+((cj1*sj2))+((x13644*x13648))+(((-1.0)*x13647*x13650)));
evalcond[5]=(((r02*x13645))+((r01*x13652))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13649*x13650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13654=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13654.valid){
continue;
}
CheckValue<IkReal> x13655 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13654.value)))+(x13655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13656=IKcos(j4);
IkReal x13657=IKsin(j4);
IkReal x13658=(gconst29*r10);
IkReal x13659=(gconst29*r20);
IkReal x13660=(gconst28*r21);
IkReal x13661=(gconst29*r00);
IkReal x13662=((1.0)*x13656);
IkReal x13663=((1.0)*x13657);
IkReal x13664=(gconst28*x13656);
IkReal x13665=(gconst28*x13657);
evalcond[0]=(((r12*x13657))+((r11*x13664))+(((-1.0)*x13658*x13662)));
evalcond[1]=((((-1.0)*r22*x13662))+((x13657*x13660))+(((-1.0)*x13659*x13663)));
evalcond[2]=(((r01*x13665))+(((-1.0)*x13661*x13663))+(((-1.0)*r02*x13662)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13662))+((r11*x13665))+(((-1.0)*x13658*x13663)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13656*x13660))+((r22*x13657))+(((-1.0)*x13659*x13662)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13664))+(((-1.0)*x13661*x13662))+((r02*x13657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13668 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13668.valid){
continue;
}
IkReal x13666=((1.0)*(x13668.value));
IkReal x13667=x13499;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13666)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13666)));
IkReal gconst28=((1.0)*r21*x13667);
IkReal gconst29=((-1.0)*r20*x13667);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13671 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13671.valid){
continue;
}
IkReal x13669=((1.0)*(x13671.value));
IkReal x13670=x13499;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13669)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13669)));
IkReal gconst28=((1.0)*r21*x13670);
IkReal gconst29=((-1.0)*r20*x13670);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13674 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13674.valid){
continue;
}
IkReal x13672=((1.0)*(x13674.value));
IkReal x13673=x13499;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13672)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13672)));
IkReal gconst28=((1.0)*r21*x13673);
IkReal gconst29=((-1.0)*r20*x13673);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13675=(gconst29*r10);
IkReal x13676=(gconst28*r11);
CheckValue<IkReal> x13677=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13676*x13676)+(((-2.0)*x13675*x13676))+(x13675*x13675))),-1);
if(!x13677.valid){
continue;
}
CheckValue<IkReal> x13678 = IKatan2WithCheck(IkReal((x13675+(((-1.0)*x13676)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13677.value)))+(x13678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13679=IKsin(j4);
IkReal x13680=IKcos(j4);
IkReal x13681=(gconst28*r11);
IkReal x13682=((1.0)*x13680);
IkReal x13683=(gconst29*x13680);
IkReal x13684=(gconst28*x13679);
IkReal x13685=((1.0)*x13679);
IkReal x13686=(gconst29*x13685);
evalcond[0]=((((-1.0)*r22*x13682))+(((-1.0)*r20*x13686))+((r21*x13684)));
evalcond[1]=((((-1.0)*r00*x13686))+((r01*x13684))+(((-1.0)*r02*x13682)));
evalcond[2]=((((-1.0)*r12*x13685))+((r10*x13683))+(((-1.0)*x13681*x13682)));
evalcond[3]=((1.0)+((x13679*x13681))+(((-1.0)*r10*x13686))+(((-1.0)*r12*x13682)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x13685))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13682))+((r20*x13683)));
evalcond[5]=((((-1.0)*gconst28*r01*x13682))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13683))+(((-1.0)*r02*x13685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13687=((1.0)*gconst29);
CheckValue<IkReal> x13688 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13687))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13688.valid){
continue;
}
CheckValue<IkReal> x13689=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13687))+(((-1.0)*gconst28*r00)))),-1);
if(!x13689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13688.value)+(((1.5707963267949)*(x13689.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13690=IKsin(j4);
IkReal x13691=IKcos(j4);
IkReal x13692=(gconst28*r11);
IkReal x13693=((1.0)*x13691);
IkReal x13694=(gconst29*x13691);
IkReal x13695=(gconst28*x13690);
IkReal x13696=((1.0)*x13690);
IkReal x13697=(gconst29*x13696);
evalcond[0]=((((-1.0)*r20*x13697))+((r21*x13695))+(((-1.0)*r22*x13693)));
evalcond[1]=(((r01*x13695))+(((-1.0)*r02*x13693))+(((-1.0)*r00*x13697)));
evalcond[2]=(((r10*x13694))+(((-1.0)*x13692*x13693))+(((-1.0)*r12*x13696)));
evalcond[3]=((1.0)+((x13690*x13692))+(((-1.0)*r10*x13697))+(((-1.0)*r12*x13693)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13693))+((cj1*sj2))+((r20*x13694))+(((-1.0)*r22*x13696)));
evalcond[5]=(((r00*x13694))+(((-1.0)*r02*x13696))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13698=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13698.valid){
continue;
}
CheckValue<IkReal> x13699 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13698.value)))+(x13699.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13700=IKsin(j4);
IkReal x13701=IKcos(j4);
IkReal x13702=(gconst28*r11);
IkReal x13703=((1.0)*x13701);
IkReal x13704=(gconst29*x13701);
IkReal x13705=(gconst28*x13700);
IkReal x13706=((1.0)*x13700);
IkReal x13707=(gconst29*x13706);
evalcond[0]=((((-1.0)*r22*x13703))+((r21*x13705))+(((-1.0)*r20*x13707)));
evalcond[1]=((((-1.0)*r00*x13707))+((r01*x13705))+(((-1.0)*r02*x13703)));
evalcond[2]=((((-1.0)*x13702*x13703))+(((-1.0)*r12*x13706))+((r10*x13704)));
evalcond[3]=((1.0)+((x13700*x13702))+(((-1.0)*r12*x13703))+(((-1.0)*r10*x13707)));
evalcond[4]=((((-1.0)*gconst28*r21*x13703))+(((-1.0)*r22*x13706))+((cj2*sj1))+((r20*x13704))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13704))+(((-1.0)*r02*x13706))+(((-1.0)*gconst28*r01*x13703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13708=gconst28*gconst28;
IkReal x13709=gconst29*gconst29;
IkReal x13710=(r11*r21);
IkReal x13711=(gconst29*sj3);
IkReal x13712=((1.0)*cj3);
IkReal x13713=(r10*r20);
IkReal x13714=(r10*r21);
IkReal x13715=(r11*r20);
IkReal x13716=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13717=IKPowWithIntegerCheck(IKsign((((x13714*x13716))+(((-1.0)*x13709*x13712*x13713))+(((-1.0)*x13708*x13710*x13712))+(((-1.0)*r12*r22*x13712))+((x13715*x13716)))),-1);
if(!x13717.valid){
continue;
}
CheckValue<IkReal> x13718 = IKatan2WithCheck(IkReal((((r11*r22*x13711))+((gconst28*r10*r22*sj3)))),IkReal(((((-1.0)*gconst28*x13711*x13713))+((sj3*x13708*x13714))+((gconst28*x13710*x13711))+(((-1.0)*sj3*x13709*x13715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13717.value)))+(x13718.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13719=IKsin(j4);
IkReal x13720=IKcos(j4);
IkReal x13721=(sj1*sj2);
IkReal x13722=(gconst29*r20);
IkReal x13723=(gconst28*r20);
IkReal x13724=((1.0)*cj2);
IkReal x13725=(r11*sj3);
IkReal x13726=(cj1*sj2);
IkReal x13727=(gconst29*r01);
IkReal x13728=(gconst29*r10);
IkReal x13729=(cj3*gconst28);
IkReal x13730=(cj3*gconst29);
IkReal x13731=(gconst28*sj3);
IkReal x13732=(gconst29*r00);
IkReal x13733=(cj1*x13724);
IkReal x13734=((1.0)*x13720);
IkReal x13735=((1.0)*x13719);
IkReal x13736=(gconst28*x13719);
IkReal x13737=(cj3*x13719);
IkReal x13738=(sj3*x13720);
evalcond[0]=((((-1.0)*r22*x13734))+((r21*x13736))+(((-1.0)*x13722*x13735)));
evalcond[1]=((((-1.0)*r02*x13734))+(((-1.0)*x13732*x13735))+((r01*x13736)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13734))+(((-1.0)*x13728*x13735))+((r11*x13736)));
evalcond[3]=(((r10*x13731))+((r11*x13720*x13729))+((r12*x13737))+(((-1.0)*cj3*x13728*x13734))+((gconst29*x13725)));
evalcond[4]=(((x13728*x13738))+((r10*x13729))+(((-1.0)*gconst28*x13725*x13734))+((r11*x13730))+(((-1.0)*r12*sj3*x13735)));
evalcond[5]=((((-1.0)*cj3*x13722*x13734))+((cj2*sj1))+((gconst29*r21*sj3))+((r22*x13737))+x13726+((r21*x13720*x13729))+((sj3*x13723)));
evalcond[6]=(((r00*x13731))+((r01*x13720*x13729))+x13721+(((-1.0)*x13733))+((r02*x13737))+(((-1.0)*r00*x13730*x13734))+((sj3*x13727)));
evalcond[7]=(x13721+(((-1.0)*x13733))+((r21*x13730))+((x13722*x13738))+(((-1.0)*r21*x13731*x13734))+((cj3*x13723))+(((-1.0)*r22*sj3*x13735)));
evalcond[8]=((((-1.0)*r02*sj3*x13735))+((r00*x13729))+(((-1.0)*r01*x13731*x13734))+(((-1.0)*sj1*x13724))+(((-1.0)*x13726))+((x13732*x13738))+((cj3*x13727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13739=((1.0)*gconst29);
CheckValue<IkReal> x13740=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13739)))),-1);
if(!x13740.valid){
continue;
}
CheckValue<IkReal> x13741 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13739))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13740.value)))+(x13741.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13742=IKsin(j4);
IkReal x13743=IKcos(j4);
IkReal x13744=(sj1*sj2);
IkReal x13745=(gconst29*r20);
IkReal x13746=(gconst28*r20);
IkReal x13747=((1.0)*cj2);
IkReal x13748=(r11*sj3);
IkReal x13749=(cj1*sj2);
IkReal x13750=(gconst29*r01);
IkReal x13751=(gconst29*r10);
IkReal x13752=(cj3*gconst28);
IkReal x13753=(cj3*gconst29);
IkReal x13754=(gconst28*sj3);
IkReal x13755=(gconst29*r00);
IkReal x13756=(cj1*x13747);
IkReal x13757=((1.0)*x13743);
IkReal x13758=((1.0)*x13742);
IkReal x13759=(gconst28*x13742);
IkReal x13760=(cj3*x13742);
IkReal x13761=(sj3*x13743);
evalcond[0]=(((r21*x13759))+(((-1.0)*r22*x13757))+(((-1.0)*x13745*x13758)));
evalcond[1]=((((-1.0)*x13755*x13758))+((r01*x13759))+(((-1.0)*r02*x13757)));
evalcond[2]=((1.0)+((r11*x13759))+(((-1.0)*x13751*x13758))+(((-1.0)*r12*x13757)));
evalcond[3]=(((gconst29*x13748))+((r11*x13743*x13752))+(((-1.0)*cj3*x13751*x13757))+((r10*x13754))+((r12*x13760)));
evalcond[4]=(((r11*x13753))+(((-1.0)*r12*sj3*x13758))+(((-1.0)*gconst28*x13748*x13757))+((r10*x13752))+((x13751*x13761)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+(((-1.0)*cj3*x13745*x13757))+x13749+((r21*x13743*x13752))+((r22*x13760))+((sj3*x13746)));
evalcond[6]=(((r01*x13743*x13752))+x13744+(((-1.0)*x13756))+(((-1.0)*r00*x13753*x13757))+((sj3*x13750))+((r00*x13754))+((r02*x13760)));
evalcond[7]=(((r21*x13753))+x13744+(((-1.0)*x13756))+(((-1.0)*r21*x13754*x13757))+(((-1.0)*r22*sj3*x13758))+((cj3*x13746))+((x13745*x13761)));
evalcond[8]=((((-1.0)*x13749))+((x13755*x13761))+(((-1.0)*sj1*x13747))+(((-1.0)*r02*sj3*x13758))+(((-1.0)*r01*x13754*x13757))+((r00*x13752))+((cj3*x13750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13762=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13762.valid){
continue;
}
CheckValue<IkReal> x13763 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13762.value)))+(x13763.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13764=IKsin(j4);
IkReal x13765=IKcos(j4);
IkReal x13766=(sj1*sj2);
IkReal x13767=(gconst29*r20);
IkReal x13768=(gconst28*r20);
IkReal x13769=((1.0)*cj2);
IkReal x13770=(r11*sj3);
IkReal x13771=(cj1*sj2);
IkReal x13772=(gconst29*r01);
IkReal x13773=(gconst29*r10);
IkReal x13774=(cj3*gconst28);
IkReal x13775=(cj3*gconst29);
IkReal x13776=(gconst28*sj3);
IkReal x13777=(gconst29*r00);
IkReal x13778=(cj1*x13769);
IkReal x13779=((1.0)*x13765);
IkReal x13780=((1.0)*x13764);
IkReal x13781=(gconst28*x13764);
IkReal x13782=(cj3*x13764);
IkReal x13783=(sj3*x13765);
evalcond[0]=((((-1.0)*r22*x13779))+(((-1.0)*x13767*x13780))+((r21*x13781)));
evalcond[1]=(((r01*x13781))+(((-1.0)*r02*x13779))+(((-1.0)*x13777*x13780)));
evalcond[2]=((1.0)+(((-1.0)*x13773*x13780))+(((-1.0)*r12*x13779))+((r11*x13781)));
evalcond[3]=(((gconst29*x13770))+((r10*x13776))+(((-1.0)*cj3*x13773*x13779))+((r11*x13765*x13774))+((r12*x13782)));
evalcond[4]=(((r11*x13775))+((r10*x13774))+(((-1.0)*gconst28*x13770*x13779))+(((-1.0)*r12*sj3*x13780))+((x13773*x13783)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj3*x13767*x13779))+((gconst29*r21*sj3))+x13771+((sj3*x13768))+((r22*x13782))+((r21*x13765*x13774)));
evalcond[6]=((((-1.0)*x13778))+x13766+((r00*x13776))+((sj3*x13772))+((r02*x13782))+((r01*x13765*x13774))+(((-1.0)*r00*x13775*x13779)));
evalcond[7]=((((-1.0)*x13778))+x13766+(((-1.0)*r22*sj3*x13780))+((cj3*x13768))+(((-1.0)*r21*x13776*x13779))+((r21*x13775))+((x13767*x13783)));
evalcond[8]=((((-1.0)*x13771))+((x13777*x13783))+(((-1.0)*r01*x13776*x13779))+(((-1.0)*sj1*x13769))+((r00*x13774))+(((-1.0)*r02*sj3*x13780))+((cj3*x13772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13784=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13784);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13784);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13785=(r11*sj5);
IkReal x13786=((1.0)*cj5*r10);
j4eval[0]=(x13785+(((-1.0)*x13786)));
j4eval[1]=((((-1.0)*cj3*x13786))+((cj3*x13785)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13787=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13787);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13787);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13788=(cj5*r10);
IkReal x13789=(r11*sj5);
j4eval[0]=(x13789+(((-1.0)*x13788)));
j4eval[1]=((((-1.0)*sj3*x13789))+((sj3*x13788)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13790=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13790);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13790);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13791=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13791);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13791);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13792=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13792))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13792)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13793=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13793);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13793);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13794=((1.0)*sj1);
CheckValue<IkReal> x13795=IKPowWithIntegerCheck(r22,-1);
if(!x13795.valid){
continue;
}
CheckValue<IkReal> x13796=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13796.valid){
continue;
}
if( IKabs(((x13795.value)*(((((-1.0)*cj2*x13794))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13796.value)*(((((-1.0)*sj2*x13794))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13795.value)*(((((-1.0)*cj2*x13794))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13796.value)*(((((-1.0)*sj2*x13794))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13795.value)*(((((-1.0)*cj2*x13794))+(((-1.0)*cj1*sj2))))), ((x13796.value)*(((((-1.0)*sj2*x13794))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13797=IKsin(j4);
IkReal x13798=IKcos(j4);
IkReal x13799=((1.0)*cj5);
IkReal x13800=(sj5*x13798);
IkReal x13801=(sj5*x13797);
evalcond[0]=((-1.0)*r22*x13798);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13797)));
evalcond[2]=(((r01*x13801))+(((-1.0)*r00*x13797*x13799)));
evalcond[3]=(((r11*x13800))+(((-1.0)*r10*x13798*x13799)));
evalcond[4]=((1.0)+((r11*x13801))+(((-1.0)*r10*x13797*x13799)));
evalcond[5]=(((r01*x13800))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13798*x13799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13802=((1.0)*cj5);
CheckValue<IkReal> x13803=IKPowWithIntegerCheck(((((-1.0)*r10*x13802))+((r11*sj5))),-1);
if(!x13803.valid){
continue;
}
CheckValue<IkReal> x13804=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13802))),-1);
if(!x13804.valid){
continue;
}
if( IKabs(((-1.0)*(x13803.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13804.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13803.value)))+IKsqr(((x13804.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13803.value)), ((x13804.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13805=IKsin(j4);
IkReal x13806=IKcos(j4);
IkReal x13807=((1.0)*cj5);
IkReal x13808=(sj5*x13806);
IkReal x13809=(sj5*x13805);
evalcond[0]=((-1.0)*r22*x13806);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13805)));
evalcond[2]=(((r01*x13809))+(((-1.0)*r00*x13805*x13807)));
evalcond[3]=(((r11*x13808))+(((-1.0)*r10*x13806*x13807)));
evalcond[4]=((1.0)+((r11*x13809))+(((-1.0)*r10*x13805*x13807)));
evalcond[5]=(((r01*x13808))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13806*x13807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13810=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13810);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13810);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13811=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13811);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13811);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13812=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13812.valid){
continue;
}
CheckValue<IkReal> x13813=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13813.valid){
continue;
}
if( IKabs(((-1.0)*(x13812.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13813.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13812.value)))+IKsqr(((x13813.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13812.value)), ((x13813.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13814=IKsin(j4);
IkReal x13815=IKcos(j4);
IkReal x13816=(cj5*x13815);
IkReal x13817=(sj5*x13814);
IkReal x13818=((1.0)*cj5*x13814);
IkReal x13819=((1.0)*sj5*x13815);
evalcond[0]=((-1.0)*r22*x13815);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13814)));
evalcond[2]=(((r01*x13817))+(((-1.0)*r00*x13818)));
evalcond[3]=(((r10*x13816))+(((-1.0)*r11*x13819)));
evalcond[4]=((1.0)+((r11*x13817))+(((-1.0)*r10*x13818)));
evalcond[5]=(((r00*x13816))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13820=IKPowWithIntegerCheck(r22,-1);
if(!x13820.valid){
continue;
}
CheckValue<IkReal> x13821=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13821.valid){
continue;
}
if( IKabs(((x13820.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13821.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13820.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13821.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13820.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13821.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13822=IKsin(j4);
IkReal x13823=IKcos(j4);
IkReal x13824=(cj5*x13823);
IkReal x13825=(sj5*x13822);
IkReal x13826=((1.0)*cj5*x13822);
IkReal x13827=((1.0)*sj5*x13823);
evalcond[0]=((-1.0)*r22*x13823);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13822)));
evalcond[2]=(((r01*x13825))+(((-1.0)*r00*x13826)));
evalcond[3]=(((r10*x13824))+(((-1.0)*r11*x13827)));
evalcond[4]=((1.0)+((r11*x13825))+(((-1.0)*r10*x13826)));
evalcond[5]=(((r00*x13824))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13828=((1.0)*r10);
CheckValue<IkReal> x13829=IKPowWithIntegerCheck(cj3,-1);
if(!x13829.valid){
continue;
}
CheckValue<IkReal> x13830=IKPowWithIntegerCheck(r22,-1);
if(!x13830.valid){
continue;
}
CheckValue<IkReal> x13831=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13828))+((cj3*r11*sj5))),-1);
if(!x13831.valid){
continue;
}
if( IKabs(((x13829.value)*(x13830.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13831.value)*(((((-1.0)*sj3*sj5*x13828))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13829.value)*(x13830.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13831.value)*(((((-1.0)*sj3*sj5*x13828))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13829.value)*(x13830.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13831.value)*(((((-1.0)*sj3*sj5*x13828))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13832=IKsin(j4);
IkReal x13833=IKcos(j4);
IkReal x13834=(sj1*sj2);
IkReal x13835=(r11*sj5);
IkReal x13836=(r00*sj3);
IkReal x13837=(cj5*r01);
IkReal x13838=((1.0)*cj1);
IkReal x13839=(cj3*sj5);
IkReal x13840=(cj5*r11);
IkReal x13841=(r10*sj3);
IkReal x13842=(cj2*sj1);
IkReal x13843=((1.0)*cj5);
IkReal x13844=((1.0)*sj3);
IkReal x13845=(r01*sj5);
IkReal x13846=(cj2*x13838);
IkReal x13847=(cj3*x13833);
IkReal x13848=(r22*x13832);
IkReal x13849=(cj5*x13833);
IkReal x13850=(x13832*x13843);
evalcond[0]=((-1.0)*r22*x13833);
evalcond[1]=(x13842+((cj1*sj2))+((cj3*x13848)));
evalcond[2]=(((x13832*x13845))+(((-1.0)*r00*x13850)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13850))+((x13832*x13835)));
evalcond[4]=((((-1.0)*x13846))+(((-1.0)*x13844*x13848))+x13834);
evalcond[5]=((((-1.0)*r10*x13843*x13847))+((sj5*x13841))+((sj3*x13840))+((x13835*x13847)));
evalcond[6]=((((-1.0)*x13833*x13835*x13844))+((r10*x13839))+((x13841*x13849))+((cj3*x13840)));
evalcond[7]=((((-1.0)*x13846))+(((-1.0)*r00*x13843*x13847))+x13834+((sj5*x13836))+((sj3*x13837))+((r01*x13833*x13839)));
evalcond[8]=(((x13836*x13849))+(((-1.0)*sj2*x13838))+(((-1.0)*x13833*x13844*x13845))+((r00*x13839))+((cj3*x13837))+(((-1.0)*x13842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13851=(cj5*r10);
IkReal x13852=((1.0)*r11);
CheckValue<IkReal> x13853=IKPowWithIntegerCheck(((((-1.0)*x13851))+((r11*sj5))),-1);
if(!x13853.valid){
continue;
}
CheckValue<IkReal> x13854=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13852))+((sj3*x13851))),-1);
if(!x13854.valid){
continue;
}
if( IKabs(((-1.0)*(x13853.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13854.value)*(((((-1.0)*cj3*cj5*x13852))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13853.value)))+IKsqr(((x13854.value)*(((((-1.0)*cj3*cj5*x13852))+(((-1.0)*cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13853.value)), ((x13854.value)*(((((-1.0)*cj3*cj5*x13852))+(((-1.0)*cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13855=IKsin(j4);
IkReal x13856=IKcos(j4);
IkReal x13857=(sj1*sj2);
IkReal x13858=(r11*sj5);
IkReal x13859=(r00*sj3);
IkReal x13860=(cj5*r01);
IkReal x13861=((1.0)*cj1);
IkReal x13862=(cj3*sj5);
IkReal x13863=(cj5*r11);
IkReal x13864=(r10*sj3);
IkReal x13865=(cj2*sj1);
IkReal x13866=((1.0)*cj5);
IkReal x13867=((1.0)*sj3);
IkReal x13868=(r01*sj5);
IkReal x13869=(cj2*x13861);
IkReal x13870=(cj3*x13856);
IkReal x13871=(r22*x13855);
IkReal x13872=(cj5*x13856);
IkReal x13873=(x13855*x13866);
evalcond[0]=((-1.0)*r22*x13856);
evalcond[1]=(((cj3*x13871))+x13865+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13873))+((x13855*x13868)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13873))+((x13855*x13858)));
evalcond[4]=(x13857+(((-1.0)*x13867*x13871))+(((-1.0)*x13869)));
evalcond[5]=((((-1.0)*r10*x13866*x13870))+((sj3*x13863))+((sj5*x13864))+((x13858*x13870)));
evalcond[6]=(((x13864*x13872))+(((-1.0)*x13856*x13858*x13867))+((cj3*x13863))+((r10*x13862)));
evalcond[7]=((((-1.0)*r00*x13866*x13870))+x13857+((sj3*x13860))+((sj5*x13859))+((r01*x13856*x13862))+(((-1.0)*x13869)));
evalcond[8]=((((-1.0)*x13856*x13867*x13868))+(((-1.0)*x13865))+((r00*x13862))+((x13859*x13872))+(((-1.0)*sj2*x13861))+((cj3*x13860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13874=((1.0)*sj3);
IkReal x13875=(r11*sj5);
IkReal x13876=((1.0)*cj5*r10);
CheckValue<IkReal> x13877=IKPowWithIntegerCheck((x13875+(((-1.0)*x13876))),-1);
if(!x13877.valid){
continue;
}
CheckValue<IkReal> x13878=IKPowWithIntegerCheck((((cj3*x13875))+(((-1.0)*cj3*x13876))),-1);
if(!x13878.valid){
continue;
}
if( IKabs(((-1.0)*(x13877.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13878.value)*(((((-1.0)*cj5*r11*x13874))+(((-1.0)*r10*sj5*x13874)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13877.value)))+IKsqr(((x13878.value)*(((((-1.0)*cj5*r11*x13874))+(((-1.0)*r10*sj5*x13874))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13877.value)), ((x13878.value)*(((((-1.0)*cj5*r11*x13874))+(((-1.0)*r10*sj5*x13874))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13879=IKsin(j4);
IkReal x13880=IKcos(j4);
IkReal x13881=(sj1*sj2);
IkReal x13882=(r11*sj5);
IkReal x13883=(r00*sj3);
IkReal x13884=(cj5*r01);
IkReal x13885=((1.0)*cj1);
IkReal x13886=(cj3*sj5);
IkReal x13887=(cj5*r11);
IkReal x13888=(r10*sj3);
IkReal x13889=(cj2*sj1);
IkReal x13890=((1.0)*cj5);
IkReal x13891=((1.0)*sj3);
IkReal x13892=(r01*sj5);
IkReal x13893=(cj2*x13885);
IkReal x13894=(cj3*x13880);
IkReal x13895=(r22*x13879);
IkReal x13896=(cj5*x13880);
IkReal x13897=(x13879*x13890);
evalcond[0]=((-1.0)*r22*x13880);
evalcond[1]=(x13889+((cj3*x13895))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13897))+((x13879*x13892)));
evalcond[3]=((1.0)+((x13879*x13882))+(((-1.0)*r10*x13897)));
evalcond[4]=(x13881+(((-1.0)*x13893))+(((-1.0)*x13891*x13895)));
evalcond[5]=(((x13882*x13894))+(((-1.0)*r10*x13890*x13894))+((sj5*x13888))+((sj3*x13887)));
evalcond[6]=((((-1.0)*x13880*x13882*x13891))+((cj3*x13887))+((r10*x13886))+((x13888*x13896)));
evalcond[7]=(((sj5*x13883))+((sj3*x13884))+((r01*x13880*x13886))+x13881+(((-1.0)*x13893))+(((-1.0)*r00*x13890*x13894)));
evalcond[8]=((((-1.0)*sj2*x13885))+((cj3*x13884))+(((-1.0)*x13880*x13891*x13892))+(((-1.0)*x13889))+((r00*x13886))+((x13883*x13896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13898=cj5*cj5;
IkReal x13899=((1.0)*cj3);
IkReal x13900=(r10*r21);
IkReal x13901=(cj5*sj5);
IkReal x13902=(r11*r21);
IkReal x13903=(r11*r20);
IkReal x13904=(r22*sj3);
IkReal x13905=(r10*r20);
IkReal x13906=((1.0)*sj3*x13898);
CheckValue<IkReal> x13907 = IKatan2WithCheck(IkReal((((cj5*r11*x13904))+((r10*sj5*x13904)))),IkReal(((((-1.0)*sj3*x13901*x13905))+((sj3*x13901*x13902))+((sj3*x13900))+(((-1.0)*x13903*x13906))+(((-1.0)*x13900*x13906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13907.valid){
continue;
}
CheckValue<IkReal> x13908=IKPowWithIntegerCheck(IKsign((((cj3*x13901*x13903))+((cj3*x13900*x13901))+((cj3*x13898*x13902))+(((-1.0)*r12*r22*x13899))+(((-1.0)*x13898*x13899*x13905))+(((-1.0)*x13899*x13902)))),-1);
if(!x13908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13907.value)+(((1.5707963267949)*(x13908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13909=IKsin(j4);
IkReal x13910=IKcos(j4);
IkReal x13911=(sj1*sj2);
IkReal x13912=(cj5*sj3);
IkReal x13913=(cj5*r10);
IkReal x13914=(r00*sj5);
IkReal x13915=(r11*sj5);
IkReal x13916=(cj3*cj5);
IkReal x13917=((1.0)*cj1);
IkReal x13918=(cj3*sj5);
IkReal x13919=(r21*sj5);
IkReal x13920=(cj2*sj1);
IkReal x13921=(sj3*sj5);
IkReal x13922=(r01*sj5);
IkReal x13923=(cj2*x13917);
IkReal x13924=((1.0)*x13910);
IkReal x13925=((1.0)*x13909);
IkReal x13926=(cj3*x13909);
IkReal x13927=(cj3*x13910);
evalcond[0]=((((-1.0)*r22*x13924))+((x13909*x13919))+(((-1.0)*cj5*r20*x13925)));
evalcond[1]=((((-1.0)*cj5*r00*x13925))+((x13909*x13922))+(((-1.0)*r02*x13924)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13924))+(((-1.0)*x13913*x13925))+((x13909*x13915)));
evalcond[3]=(((r10*x13921))+(((-1.0)*cj3*x13913*x13924))+((x13915*x13927))+((r11*x13912))+((r12*x13926)));
evalcond[4]=(((r10*x13918))+(((-1.0)*sj3*x13915*x13924))+((r10*x13910*x13912))+(((-1.0)*r12*sj3*x13925))+((r11*x13916)));
evalcond[5]=((((-1.0)*r20*x13916*x13924))+((r20*x13921))+((cj1*sj2))+((r21*x13910*x13918))+x13920+((r22*x13926))+((r21*x13912)));
evalcond[6]=(x13911+((r01*x13910*x13918))+(((-1.0)*x13923))+((sj3*x13914))+((r01*x13912))+((r02*x13926))+(((-1.0)*r00*x13916*x13924)));
evalcond[7]=(((r20*x13910*x13912))+(((-1.0)*sj3*x13919*x13924))+x13911+(((-1.0)*x13923))+((r20*x13918))+((r21*x13916))+(((-1.0)*r22*sj3*x13925)));
evalcond[8]=(((r00*x13910*x13912))+(((-1.0)*x13920))+(((-1.0)*sj2*x13917))+((cj3*x13914))+((r01*x13916))+(((-1.0)*r02*sj3*x13925))+(((-1.0)*r01*x13921*x13924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13928=((1.0)*cj5);
CheckValue<IkReal> x13929 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13928)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13929.valid){
continue;
}
CheckValue<IkReal> x13930=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13928)))),-1);
if(!x13930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13929.value)+(((1.5707963267949)*(x13930.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13931=IKsin(j4);
IkReal x13932=IKcos(j4);
IkReal x13933=(sj1*sj2);
IkReal x13934=(cj5*sj3);
IkReal x13935=(cj5*r10);
IkReal x13936=(r00*sj5);
IkReal x13937=(r11*sj5);
IkReal x13938=(cj3*cj5);
IkReal x13939=((1.0)*cj1);
IkReal x13940=(cj3*sj5);
IkReal x13941=(r21*sj5);
IkReal x13942=(cj2*sj1);
IkReal x13943=(sj3*sj5);
IkReal x13944=(r01*sj5);
IkReal x13945=(cj2*x13939);
IkReal x13946=((1.0)*x13932);
IkReal x13947=((1.0)*x13931);
IkReal x13948=(cj3*x13931);
IkReal x13949=(cj3*x13932);
evalcond[0]=(((x13931*x13941))+(((-1.0)*cj5*r20*x13947))+(((-1.0)*r22*x13946)));
evalcond[1]=((((-1.0)*cj5*r00*x13947))+((x13931*x13944))+(((-1.0)*r02*x13946)));
evalcond[2]=((1.0)+(((-1.0)*x13935*x13947))+(((-1.0)*r12*x13946))+((x13931*x13937)));
evalcond[3]=(((r11*x13934))+((x13937*x13949))+(((-1.0)*cj3*x13935*x13946))+((r12*x13948))+((r10*x13943)));
evalcond[4]=(((r11*x13938))+((r10*x13932*x13934))+(((-1.0)*r12*sj3*x13947))+(((-1.0)*sj3*x13937*x13946))+((r10*x13940)));
evalcond[5]=(((r21*x13934))+((cj1*sj2))+((r21*x13932*x13940))+x13942+((r20*x13943))+(((-1.0)*r20*x13938*x13946))+((r22*x13948)));
evalcond[6]=(((sj3*x13936))+((r01*x13934))+x13933+(((-1.0)*x13945))+(((-1.0)*r00*x13938*x13946))+((r02*x13948))+((r01*x13932*x13940)));
evalcond[7]=(((r20*x13932*x13934))+((r21*x13938))+x13933+(((-1.0)*sj3*x13941*x13946))+((r20*x13940))+(((-1.0)*x13945))+(((-1.0)*r22*sj3*x13947)));
evalcond[8]=(((r00*x13932*x13934))+(((-1.0)*x13942))+(((-1.0)*sj2*x13939))+((cj3*x13936))+((r01*x13938))+(((-1.0)*r01*x13943*x13946))+(((-1.0)*r02*sj3*x13947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13950=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13950.valid){
continue;
}
CheckValue<IkReal> x13951 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13950.value)))+(x13951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13952=IKsin(j4);
IkReal x13953=IKcos(j4);
IkReal x13954=(sj1*sj2);
IkReal x13955=(cj5*sj3);
IkReal x13956=(cj5*r10);
IkReal x13957=(r00*sj5);
IkReal x13958=(r11*sj5);
IkReal x13959=(cj3*cj5);
IkReal x13960=((1.0)*cj1);
IkReal x13961=(cj3*sj5);
IkReal x13962=(r21*sj5);
IkReal x13963=(cj2*sj1);
IkReal x13964=(sj3*sj5);
IkReal x13965=(r01*sj5);
IkReal x13966=(cj2*x13960);
IkReal x13967=((1.0)*x13953);
IkReal x13968=((1.0)*x13952);
IkReal x13969=(cj3*x13952);
IkReal x13970=(cj3*x13953);
evalcond[0]=((((-1.0)*r22*x13967))+((x13952*x13962))+(((-1.0)*cj5*r20*x13968)));
evalcond[1]=((((-1.0)*r02*x13967))+(((-1.0)*cj5*r00*x13968))+((x13952*x13965)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13967))+(((-1.0)*x13956*x13968))+((x13952*x13958)));
evalcond[3]=(((r11*x13955))+((x13958*x13970))+((r10*x13964))+(((-1.0)*cj3*x13956*x13967))+((r12*x13969)));
evalcond[4]=(((r11*x13959))+((r10*x13961))+((r10*x13953*x13955))+(((-1.0)*r12*sj3*x13968))+(((-1.0)*sj3*x13958*x13967)));
evalcond[5]=(((r21*x13953*x13961))+((cj1*sj2))+(((-1.0)*r20*x13959*x13967))+x13963+((r21*x13955))+((r20*x13964))+((r22*x13969)));
evalcond[6]=(((r02*x13969))+((r01*x13955))+x13954+(((-1.0)*r00*x13959*x13967))+(((-1.0)*x13966))+((r01*x13953*x13961))+((sj3*x13957)));
evalcond[7]=((((-1.0)*sj3*x13962*x13967))+(((-1.0)*r22*sj3*x13968))+x13954+((r21*x13959))+((r20*x13961))+(((-1.0)*x13966))+((r20*x13953*x13955)));
evalcond[8]=((((-1.0)*r01*x13964*x13967))+((cj3*x13957))+((r01*x13959))+(((-1.0)*sj2*x13960))+(((-1.0)*x13963))+(((-1.0)*r02*sj3*x13968))+((r00*x13953*x13955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13971=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13971;
j4eval[1]=IKsign(x13971);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13972=((1.0)*cj5);
IkReal x13973=((((-1.0)*r21*x13972))+(((-1.0)*r20*sj5)));
j4eval[0]=x13973;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13972))))));
j4eval[2]=IKsign(x13973);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13974=cj5*cj5;
IkReal x13975=(cj3*r21);
IkReal x13976=(cj5*sj5);
IkReal x13977=((1.0)*cj3);
IkReal x13978=((((-1.0)*r12*r22*x13977))+((r11*x13974*x13975))+((cj3*r11*r20*x13976))+((r10*x13975*x13976))+(((-1.0)*r11*x13975))+(((-1.0)*r10*r20*x13974*x13977)));
j4eval[0]=x13978;
j4eval[1]=IKsign(x13978);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13979=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13979;
j4eval[1]=IKsign(x13979);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13980=((1.0)*cj5);
IkReal x13981=((((-1.0)*r21*x13980))+(((-1.0)*r20*sj5)));
j4eval[0]=x13981;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13980))))));
j4eval[2]=IKsign(x13981);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13982=cj5*cj5;
IkReal x13983=r11*r11;
IkReal x13984=(cj5*r10);
IkReal x13985=(r11*sj5);
IkReal x13986=((((-1.0)*x13982*(r10*r10)))+(((-1.0)*(r12*r12)))+((x13982*x13983))+(((-1.0)*x13983))+(((2.0)*x13984*x13985)));
j4eval[0]=x13986;
j4eval[1]=((IKabs(r12))+(IKabs((x13984+(((-1.0)*x13985))))));
j4eval[2]=IKsign(x13986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13987=cj5*cj5;
IkReal x13988=r11*r11;
IkReal x13989=(cj5*r10);
IkReal x13990=(r11*sj5);
CheckValue<IkReal> x13991=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13987*(r10*r10)))+((x13987*x13988))+(((2.0)*x13989*x13990))+(((-1.0)*(r12*r12)))+(((-1.0)*x13988)))),-1);
if(!x13991.valid){
continue;
}
CheckValue<IkReal> x13992 = IKatan2WithCheck(IkReal((x13989+(((-1.0)*x13990)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13991.value)))+(x13992.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13993=IKsin(j4);
IkReal x13994=IKcos(j4);
IkReal x13995=(cj5*r10);
IkReal x13996=(r01*sj5);
IkReal x13997=(cj5*r00);
IkReal x13998=(cj5*r20);
IkReal x13999=((1.0)*x13994);
IkReal x14000=((1.0)*x13993);
IkReal x14001=(sj5*x13993);
evalcond[0]=(((r21*x14001))+(((-1.0)*x13998*x14000))+(((-1.0)*r22*x13999)));
evalcond[1]=((((-1.0)*r02*x13999))+(((-1.0)*x13997*x14000))+((x13993*x13996)));
evalcond[2]=((((-1.0)*r11*sj5*x13999))+((x13994*x13995))+(((-1.0)*r12*x14000)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13999))+((r11*x14001))+(((-1.0)*x13995*x14000)));
evalcond[4]=((((-1.0)*r02*x14000))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13996*x13999))+((x13994*x13997)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x13994*x13998))+(((-1.0)*r21*sj5*x13999))+(((-1.0)*r22*x14000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14002=((1.0)*cj5);
CheckValue<IkReal> x14003 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14002))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14003.valid){
continue;
}
CheckValue<IkReal> x14004=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14002))+(((-1.0)*r20*sj5)))),-1);
if(!x14004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14003.value)+(((1.5707963267949)*(x14004.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14005=IKsin(j4);
IkReal x14006=IKcos(j4);
IkReal x14007=(cj5*r10);
IkReal x14008=(r01*sj5);
IkReal x14009=(cj5*r00);
IkReal x14010=(cj5*r20);
IkReal x14011=((1.0)*x14006);
IkReal x14012=((1.0)*x14005);
IkReal x14013=(sj5*x14005);
evalcond[0]=(((r21*x14013))+(((-1.0)*x14010*x14012))+(((-1.0)*r22*x14011)));
evalcond[1]=((((-1.0)*r02*x14011))+(((-1.0)*x14009*x14012))+((x14005*x14008)));
evalcond[2]=(((x14006*x14007))+(((-1.0)*r11*sj5*x14011))+(((-1.0)*r12*x14012)));
evalcond[3]=((-1.0)+((r11*x14013))+(((-1.0)*x14007*x14012))+(((-1.0)*r12*x14011)));
evalcond[4]=((((-1.0)*x14008*x14011))+((cj2*sj1))+((x14006*x14009))+(((-1.0)*r02*x14012))+((cj1*sj2)));
evalcond[5]=(((x14006*x14010))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14011))+(((-1.0)*r22*x14012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14014 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14014.valid){
continue;
}
CheckValue<IkReal> x14015=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14014.value)+(((1.5707963267949)*(x14015.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14016=IKsin(j4);
IkReal x14017=IKcos(j4);
IkReal x14018=(cj5*r10);
IkReal x14019=(r01*sj5);
IkReal x14020=(cj5*r00);
IkReal x14021=(cj5*r20);
IkReal x14022=((1.0)*x14017);
IkReal x14023=((1.0)*x14016);
IkReal x14024=(sj5*x14016);
evalcond[0]=((((-1.0)*x14021*x14023))+((r21*x14024))+(((-1.0)*r22*x14022)));
evalcond[1]=((((-1.0)*x14020*x14023))+(((-1.0)*r02*x14022))+((x14016*x14019)));
evalcond[2]=((((-1.0)*r11*sj5*x14022))+(((-1.0)*r12*x14023))+((x14017*x14018)));
evalcond[3]=((-1.0)+((r11*x14024))+(((-1.0)*r12*x14022))+(((-1.0)*x14018*x14023)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14019*x14022))+((x14017*x14020))+(((-1.0)*r02*x14023)));
evalcond[5]=(((x14017*x14021))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14022))+(((-1.0)*r22*x14023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14025=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14025;
j4eval[1]=IKsign(x14025);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14026=((1.0)*cj5);
IkReal x14027=((((-1.0)*r21*x14026))+(((-1.0)*r20*sj5)));
j4eval[0]=x14027;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x14026))))));
j4eval[2]=IKsign(x14027);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14028=cj5*cj5;
IkReal x14029=r11*r11;
IkReal x14030=(r11*sj5);
IkReal x14031=(cj5*r10);
IkReal x14032=((r12*r12)+(((-2.0)*x14030*x14031))+(((-1.0)*x14028*x14029))+((x14028*(r10*r10)))+x14029);
j4eval[0]=x14032;
j4eval[1]=IKsign(x14032);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x14031))+x14030))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14033=cj5*cj5;
IkReal x14034=r11*r11;
IkReal x14035=(cj5*r10);
IkReal x14036=(r11*sj5);
CheckValue<IkReal> x14037 = IKatan2WithCheck(IkReal(((((-1.0)*x14035))+x14036)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14037.valid){
continue;
}
CheckValue<IkReal> x14038=IKPowWithIntegerCheck(IKsign((((x14033*(r10*r10)))+(r12*r12)+(((-1.0)*x14033*x14034))+(((-2.0)*x14035*x14036))+x14034)),-1);
if(!x14038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14037.value)+(((1.5707963267949)*(x14038.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14039=IKcos(j4);
IkReal x14040=IKsin(j4);
IkReal x14041=(cj5*r00);
IkReal x14042=(cj5*r10);
IkReal x14043=(r21*sj5);
IkReal x14044=(cj5*r20);
IkReal x14045=((1.0)*x14039);
IkReal x14046=((1.0)*x14040);
IkReal x14047=(sj5*x14040);
IkReal x14048=(sj5*x14039);
evalcond[0]=(((r11*x14048))+(((-1.0)*x14042*x14045))+((r12*x14040)));
evalcond[1]=((((-1.0)*x14044*x14046))+((x14040*x14043))+(((-1.0)*r22*x14045)));
evalcond[2]=(((r01*x14047))+(((-1.0)*r02*x14045))+(((-1.0)*x14041*x14046)));
evalcond[3]=((-1.0)+((r11*x14047))+(((-1.0)*x14042*x14046))+(((-1.0)*r12*x14045)));
evalcond[4]=(((cj2*sj1))+((r01*x14048))+((cj1*sj2))+(((-1.0)*x14041*x14045))+((r02*x14040)));
evalcond[5]=((((-1.0)*x14044*x14045))+((r22*x14040))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14039*x14043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14049=((1.0)*cj5);
CheckValue<IkReal> x14050 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14049)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14050.valid){
continue;
}
CheckValue<IkReal> x14051=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14049))+(((-1.0)*r20*sj5)))),-1);
if(!x14051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14050.value)+(((1.5707963267949)*(x14051.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14052=IKcos(j4);
IkReal x14053=IKsin(j4);
IkReal x14054=(cj5*r00);
IkReal x14055=(cj5*r10);
IkReal x14056=(r21*sj5);
IkReal x14057=(cj5*r20);
IkReal x14058=((1.0)*x14052);
IkReal x14059=((1.0)*x14053);
IkReal x14060=(sj5*x14053);
IkReal x14061=(sj5*x14052);
evalcond[0]=(((r12*x14053))+((r11*x14061))+(((-1.0)*x14055*x14058)));
evalcond[1]=(((x14053*x14056))+(((-1.0)*x14057*x14059))+(((-1.0)*r22*x14058)));
evalcond[2]=((((-1.0)*r02*x14058))+((r01*x14060))+(((-1.0)*x14054*x14059)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14058))+((r11*x14060))+(((-1.0)*x14055*x14059)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x14053))+((r01*x14061))+(((-1.0)*x14054*x14058)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x14052*x14056))+(((-1.0)*x14057*x14058))+((r22*x14053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14062 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14062.valid){
continue;
}
CheckValue<IkReal> x14063=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14062.value)+(((1.5707963267949)*(x14063.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14064=IKcos(j4);
IkReal x14065=IKsin(j4);
IkReal x14066=(cj5*r00);
IkReal x14067=(cj5*r10);
IkReal x14068=(r21*sj5);
IkReal x14069=(cj5*r20);
IkReal x14070=((1.0)*x14064);
IkReal x14071=((1.0)*x14065);
IkReal x14072=(sj5*x14065);
IkReal x14073=(sj5*x14064);
evalcond[0]=(((r11*x14073))+((r12*x14065))+(((-1.0)*x14067*x14070)));
evalcond[1]=((((-1.0)*r22*x14070))+(((-1.0)*x14069*x14071))+((x14065*x14068)));
evalcond[2]=((((-1.0)*x14066*x14071))+((r01*x14072))+(((-1.0)*r02*x14070)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14070))+((r11*x14072))+(((-1.0)*x14067*x14071)));
evalcond[4]=(((r02*x14065))+((cj2*sj1))+(((-1.0)*x14066*x14070))+((cj1*sj2))+((r01*x14073)));
evalcond[5]=(((r22*x14065))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14069*x14070))+((x14064*x14068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14075 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14075)==0){
continue;
}
IkReal x14074=pow(x14075,-0.5);
CheckValue<IkReal> x14076 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14076.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14076.value));
IkReal gconst37=((-1.0)*r01*x14074);
IkReal gconst38=(r00*x14074);
CheckValue<IkReal> x14077 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14077.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14077.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14080 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14080.valid){
continue;
}
IkReal x14078=((-1.0)*(x14080.value));
IkReal x14079=x14074;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14078;
IkReal gconst36=x14078;
IkReal gconst37=((-1.0)*r01*x14079);
IkReal gconst38=(r00*x14079);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14083 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14083.valid){
continue;
}
IkReal x14081=((-1.0)*(x14083.value));
IkReal x14082=x14074;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14081;
IkReal gconst36=x14081;
IkReal gconst37=((-1.0)*r01*x14082);
IkReal gconst38=(r00*x14082);
CheckValue<IkReal> x14091=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14091.valid){
continue;
}
IkReal x14084=x14091.value;
IkReal x14085=(sj3*x14084);
IkReal x14086=(r11*x14085);
IkReal x14087=(r21*x14085);
IkReal x14088=(r20*x14085);
IkReal x14089=(r10*x14085);
IkReal x14090=(r00*r01*x14085);
j4eval[0]=IKsign((((r00*r01*r10*x14087))+((r21*x14086*(r01*r01)))+((r10*x14088*(r00*r00)))+((r12*r22*sj3))+((r00*r01*r20*x14086))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14092=gconst38*gconst38;
IkReal x14093=gconst37*gconst37;
IkReal x14094=((1.0)*cj3);
IkReal x14095=(r11*r20);
IkReal x14096=(r10*sj3);
IkReal x14097=(gconst37*gconst38);
IkReal x14098=(r11*sj3);
IkReal x14099=(r21*x14093);
IkReal x14100=(cj3*x14097);
CheckValue<IkReal> x14101 = IKatan2WithCheck(IkReal((((gconst37*r22*x14096))+((gconst38*r22*x14098)))),IkReal((((x14096*x14099))+(((-1.0)*r20*x14096*x14097))+((r21*x14097*x14098))+(((-1.0)*sj3*x14092*x14095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14101.valid){
continue;
}
CheckValue<IkReal> x14102=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x14092*x14094))+(((-1.0)*r11*x14094*x14099))+(((-1.0)*r12*r22*x14094))+((r10*r21*x14100))+((x14095*x14100)))),-1);
if(!x14102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14101.value)+(((1.5707963267949)*(x14102.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14103=IKsin(j4);
IkReal x14104=IKcos(j4);
IkReal x14105=(cj2*sj1);
IkReal x14106=(cj1*sj2);
IkReal x14107=(gconst38*r21);
IkReal x14108=(cj3*r20);
IkReal x14109=(gconst38*r10);
IkReal x14110=(cj3*gconst37);
IkReal x14111=(sj1*sj2);
IkReal x14112=(gconst38*r00);
IkReal x14113=(cj1*cj2);
IkReal x14114=(gconst37*sj3);
IkReal x14115=(gconst38*r20);
IkReal x14116=(gconst38*r01);
IkReal x14117=(gconst38*r11);
IkReal x14118=((1.0)*x14104);
IkReal x14119=((1.0)*x14103);
IkReal x14120=(cj3*x14103);
IkReal x14121=(sj3*x14104);
IkReal x14122=(gconst37*x14103);
IkReal x14123=(x14106+x14105);
evalcond[0]=((((-1.0)*x14115*x14119))+((r21*x14122))+(((-1.0)*r22*x14118)));
evalcond[1]=(((r01*x14122))+(((-1.0)*r02*x14118))+(((-1.0)*x14112*x14119)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14118))+((r11*x14122))+(((-1.0)*x14109*x14119)));
evalcond[3]=(((r12*x14120))+((sj3*x14117))+((r11*x14104*x14110))+((r10*x14114))+(((-1.0)*cj3*x14109*x14118)));
evalcond[4]=(((cj3*x14117))+((x14109*x14121))+((r10*x14110))+(((-1.0)*r12*sj3*x14119))+(((-1.0)*r11*x14114*x14118)));
evalcond[5]=(((sj3*x14107))+((r22*x14120))+((r21*x14104*x14110))+((r20*x14114))+x14123+(((-1.0)*gconst38*x14108*x14118)));
evalcond[6]=(((sj3*x14116))+((r00*x14114))+(((-1.0)*cj3*x14112*x14118))+(((-1.0)*x14111))+x14113+((r02*x14120))+((r01*x14104*x14110)));
evalcond[7]=(((x14112*x14121))+((r00*x14110))+(((-1.0)*r01*x14114*x14118))+(((-1.0)*r02*sj3*x14119))+((cj3*x14116))+x14123);
evalcond[8]=(((x14115*x14121))+(((-1.0)*r21*x14114*x14118))+((cj3*x14107))+(((-1.0)*x14113))+x14111+((gconst37*x14108))+(((-1.0)*r22*sj3*x14119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14124=gconst38*gconst38;
IkReal x14125=gconst37*gconst37;
IkReal x14126=(gconst37*r10);
IkReal x14127=(cj3*r22);
IkReal x14128=((1.0)*gconst38);
IkReal x14129=(r21*sj3);
IkReal x14130=(gconst38*r11);
IkReal x14131=(cj3*r20);
IkReal x14132=(cj3*r21);
IkReal x14133=(r20*sj3);
CheckValue<IkReal> x14134 = IKatan2WithCheck(IkReal((((x14127*x14130))+((x14126*x14127)))),IkReal(((((-1.0)*x14126*x14128*x14131))+(((-1.0)*r11*x14124*x14131))+((r10*x14125*x14132))+((gconst37*x14130*x14132)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14134.valid){
continue;
}
CheckValue<IkReal> x14135=IKPowWithIntegerCheck(IKsign((((r11*x14125*x14129))+(((-1.0)*x14126*x14128*x14129))+(((-1.0)*gconst37*r11*x14128*x14133))+((r12*r22*sj3))+((r10*x14124*x14133)))),-1);
if(!x14135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14134.value)+(((1.5707963267949)*(x14135.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14136=IKsin(j4);
IkReal x14137=IKcos(j4);
IkReal x14138=(cj2*sj1);
IkReal x14139=(cj1*sj2);
IkReal x14140=(gconst38*r21);
IkReal x14141=(cj3*r20);
IkReal x14142=(gconst38*r10);
IkReal x14143=(cj3*gconst37);
IkReal x14144=(sj1*sj2);
IkReal x14145=(gconst38*r00);
IkReal x14146=(cj1*cj2);
IkReal x14147=(gconst37*sj3);
IkReal x14148=(gconst38*r20);
IkReal x14149=(gconst38*r01);
IkReal x14150=(gconst38*r11);
IkReal x14151=((1.0)*x14137);
IkReal x14152=((1.0)*x14136);
IkReal x14153=(cj3*x14136);
IkReal x14154=(sj3*x14137);
IkReal x14155=(gconst37*x14136);
IkReal x14156=(x14138+x14139);
evalcond[0]=((((-1.0)*r22*x14151))+(((-1.0)*x14148*x14152))+((r21*x14155)));
evalcond[1]=((((-1.0)*r02*x14151))+(((-1.0)*x14145*x14152))+((r01*x14155)));
evalcond[2]=((-1.0)+((r11*x14155))+(((-1.0)*r12*x14151))+(((-1.0)*x14142*x14152)));
evalcond[3]=(((r10*x14147))+((sj3*x14150))+((r12*x14153))+((r11*x14137*x14143))+(((-1.0)*cj3*x14142*x14151)));
evalcond[4]=(((r10*x14143))+((cj3*x14150))+(((-1.0)*r12*sj3*x14152))+((x14142*x14154))+(((-1.0)*r11*x14147*x14151)));
evalcond[5]=(((sj3*x14140))+((r22*x14153))+(((-1.0)*gconst38*x14141*x14151))+x14156+((r21*x14137*x14143))+((r20*x14147)));
evalcond[6]=(((r02*x14153))+((sj3*x14149))+((r00*x14147))+(((-1.0)*cj3*x14145*x14151))+x14146+(((-1.0)*x14144))+((r01*x14137*x14143)));
evalcond[7]=((((-1.0)*r02*sj3*x14152))+((cj3*x14149))+((r00*x14143))+x14156+(((-1.0)*r01*x14147*x14151))+((x14145*x14154)));
evalcond[8]=(((cj3*x14140))+((x14148*x14154))+((gconst37*x14141))+(((-1.0)*r21*x14147*x14151))+(((-1.0)*r22*sj3*x14152))+x14144+(((-1.0)*x14146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14157=((1.0)*gconst38);
CheckValue<IkReal> x14158 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst37*r01))+(((-1.0)*r00*x14157)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14158.valid){
continue;
}
CheckValue<IkReal> x14159=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14157)))),-1);
if(!x14159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14158.value)+(((1.5707963267949)*(x14159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14160=IKsin(j4);
IkReal x14161=IKcos(j4);
IkReal x14162=(cj2*sj1);
IkReal x14163=(cj1*sj2);
IkReal x14164=(gconst38*r21);
IkReal x14165=(cj3*r20);
IkReal x14166=(gconst38*r10);
IkReal x14167=(cj3*gconst37);
IkReal x14168=(sj1*sj2);
IkReal x14169=(gconst38*r00);
IkReal x14170=(cj1*cj2);
IkReal x14171=(gconst37*sj3);
IkReal x14172=(gconst38*r20);
IkReal x14173=(gconst38*r01);
IkReal x14174=(gconst38*r11);
IkReal x14175=((1.0)*x14161);
IkReal x14176=((1.0)*x14160);
IkReal x14177=(cj3*x14160);
IkReal x14178=(sj3*x14161);
IkReal x14179=(gconst37*x14160);
IkReal x14180=(x14163+x14162);
evalcond[0]=(((r21*x14179))+(((-1.0)*r22*x14175))+(((-1.0)*x14172*x14176)));
evalcond[1]=((((-1.0)*x14169*x14176))+((r01*x14179))+(((-1.0)*r02*x14175)));
evalcond[2]=((-1.0)+(((-1.0)*x14166*x14176))+((r11*x14179))+(((-1.0)*r12*x14175)));
evalcond[3]=(((r12*x14177))+(((-1.0)*cj3*x14166*x14175))+((r10*x14171))+((sj3*x14174))+((r11*x14161*x14167)));
evalcond[4]=(((x14166*x14178))+(((-1.0)*r12*sj3*x14176))+((r10*x14167))+(((-1.0)*r11*x14171*x14175))+((cj3*x14174)));
evalcond[5]=(((r22*x14177))+((sj3*x14164))+(((-1.0)*gconst38*x14165*x14175))+((r20*x14171))+((r21*x14161*x14167))+x14180);
evalcond[6]=((((-1.0)*cj3*x14169*x14175))+((r00*x14171))+((r01*x14161*x14167))+((r02*x14177))+x14170+((sj3*x14173))+(((-1.0)*x14168)));
evalcond[7]=(((cj3*x14173))+((r00*x14167))+x14180+((x14169*x14178))+(((-1.0)*r01*x14171*x14175))+(((-1.0)*r02*sj3*x14176)));
evalcond[8]=(((cj3*x14164))+(((-1.0)*r21*x14171*x14175))+(((-1.0)*x14170))+((gconst37*x14165))+x14168+(((-1.0)*r22*sj3*x14176))+((x14172*x14178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14182 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14182)==0){
continue;
}
IkReal x14181=pow(x14182,-0.5);
CheckValue<IkReal> x14183 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14183.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14183.value))));
IkReal gconst40=((1.0)*r01*x14181);
IkReal gconst41=((-1.0)*r00*x14181);
CheckValue<IkReal> x14184 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14184.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14184.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14187 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14187.valid){
continue;
}
IkReal x14185=((1.0)*(x14187.value));
IkReal x14186=x14181;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14185)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14185)));
IkReal gconst40=((1.0)*r01*x14186);
IkReal gconst41=((-1.0)*r00*x14186);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14190 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14190.valid){
continue;
}
IkReal x14188=((1.0)*(x14190.value));
IkReal x14189=x14181;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14188)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14188)));
IkReal gconst40=((1.0)*r01*x14189);
IkReal gconst41=((-1.0)*r00*x14189);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14191=gconst41*gconst41;
IkReal x14192=gconst40*gconst40;
IkReal x14193=(gconst40*r10);
IkReal x14194=(r22*sj3);
IkReal x14195=(r11*sj3);
IkReal x14196=((1.0)*cj3);
IkReal x14197=(gconst41*r21);
IkReal x14198=(gconst41*r20);
IkReal x14199=(r21*x14192);
IkReal x14200=((1.0)*r20*x14191);
CheckValue<IkReal> x14201=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x14196))+((cj3*x14193*x14197))+(((-1.0)*r10*r20*x14191*x14196))+(((-1.0)*r11*x14196*x14199))+((cj3*gconst40*r11*x14198)))),-1);
if(!x14201.valid){
continue;
}
CheckValue<IkReal> x14202 = IKatan2WithCheck(IkReal((((gconst41*r11*x14194))+((x14193*x14194)))),IkReal(((((-1.0)*sj3*x14193*x14198))+((r10*sj3*x14199))+((gconst40*x14195*x14197))+(((-1.0)*x14195*x14200)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14201.value)))+(x14202.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14203=IKsin(j4);
IkReal x14204=IKcos(j4);
IkReal x14205=(cj2*sj1);
IkReal x14206=(cj1*sj2);
IkReal x14207=(gconst40*sj3);
IkReal x14208=(gconst41*sj3);
IkReal x14209=(gconst41*r20);
IkReal x14210=(cj3*gconst41);
IkReal x14211=(sj1*sj2);
IkReal x14212=(cj1*cj2);
IkReal x14213=(cj3*gconst40);
IkReal x14214=((1.0)*x14204);
IkReal x14215=((1.0)*x14203);
IkReal x14216=(cj3*x14203);
IkReal x14217=(gconst40*x14203);
IkReal x14218=(x14205+x14206);
IkReal x14219=(x14204*x14213);
evalcond[0]=((((-1.0)*x14209*x14215))+(((-1.0)*r22*x14214))+((r21*x14217)));
evalcond[1]=((((-1.0)*gconst41*r00*x14215))+(((-1.0)*r02*x14214))+((r01*x14217)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14214))+((r11*x14217))+(((-1.0)*gconst41*r10*x14215)));
evalcond[3]=(((r11*x14219))+((r12*x14216))+((r10*x14207))+(((-1.0)*r10*x14210*x14214))+((r11*x14208)));
evalcond[4]=(((r11*x14210))+((r10*x14204*x14208))+((r10*x14213))+(((-1.0)*r11*x14207*x14214))+(((-1.0)*r12*sj3*x14215)));
evalcond[5]=((((-1.0)*cj3*x14209*x14214))+((r22*x14216))+((r20*x14207))+((r21*x14208))+((r21*x14219))+x14218);
evalcond[6]=(((r01*x14219))+((r00*x14207))+(((-1.0)*x14211))+((r01*x14208))+((r02*x14216))+x14212+(((-1.0)*r00*x14210*x14214)));
evalcond[7]=((((-1.0)*r02*sj3*x14215))+(((-1.0)*r01*x14207*x14214))+((r00*x14204*x14208))+((r01*x14210))+((r00*x14213))+x14218);
evalcond[8]=(((r20*x14204*x14208))+(((-1.0)*r22*sj3*x14215))+(((-1.0)*x14212))+((r21*x14210))+((r20*x14213))+x14211+(((-1.0)*r21*x14207*x14214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14220=((1.0)*gconst41);
CheckValue<IkReal> x14221 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14220))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14221.valid){
continue;
}
CheckValue<IkReal> x14222=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14220))+(((-1.0)*gconst40*r20)))),-1);
if(!x14222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14221.value)+(((1.5707963267949)*(x14222.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14223=IKsin(j4);
IkReal x14224=IKcos(j4);
IkReal x14225=(cj2*sj1);
IkReal x14226=(cj1*sj2);
IkReal x14227=(gconst40*sj3);
IkReal x14228=(gconst41*sj3);
IkReal x14229=(gconst41*r20);
IkReal x14230=(cj3*gconst41);
IkReal x14231=(sj1*sj2);
IkReal x14232=(cj1*cj2);
IkReal x14233=(cj3*gconst40);
IkReal x14234=((1.0)*x14224);
IkReal x14235=((1.0)*x14223);
IkReal x14236=(cj3*x14223);
IkReal x14237=(gconst40*x14223);
IkReal x14238=(x14226+x14225);
IkReal x14239=(x14224*x14233);
evalcond[0]=(((r21*x14237))+(((-1.0)*x14229*x14235))+(((-1.0)*r22*x14234)));
evalcond[1]=((((-1.0)*gconst41*r00*x14235))+(((-1.0)*r02*x14234))+((r01*x14237)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14235))+(((-1.0)*r12*x14234))+((r11*x14237)));
evalcond[3]=((((-1.0)*r10*x14230*x14234))+((r10*x14227))+((r11*x14228))+((r12*x14236))+((r11*x14239)));
evalcond[4]=((((-1.0)*r11*x14227*x14234))+((r10*x14233))+((r10*x14224*x14228))+(((-1.0)*r12*sj3*x14235))+((r11*x14230)));
evalcond[5]=(((r20*x14227))+(((-1.0)*cj3*x14229*x14234))+((r21*x14239))+((r21*x14228))+((r22*x14236))+x14238);
evalcond[6]=(((r02*x14236))+(((-1.0)*r00*x14230*x14234))+((r01*x14239))+((r00*x14227))+(((-1.0)*x14231))+((r01*x14228))+x14232);
evalcond[7]=(((r00*x14224*x14228))+((r01*x14230))+(((-1.0)*r01*x14227*x14234))+((r00*x14233))+(((-1.0)*r02*sj3*x14235))+x14238);
evalcond[8]=(((r20*x14233))+((r21*x14230))+(((-1.0)*r21*x14227*x14234))+(((-1.0)*r22*sj3*x14235))+(((-1.0)*x14232))+((r20*x14224*x14228))+x14231);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14240 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14240.valid){
continue;
}
CheckValue<IkReal> x14241=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14240.value)+(((1.5707963267949)*(x14241.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14242=IKsin(j4);
IkReal x14243=IKcos(j4);
IkReal x14244=(cj2*sj1);
IkReal x14245=(cj1*sj2);
IkReal x14246=(gconst40*sj3);
IkReal x14247=(gconst41*sj3);
IkReal x14248=(gconst41*r20);
IkReal x14249=(cj3*gconst41);
IkReal x14250=(sj1*sj2);
IkReal x14251=(cj1*cj2);
IkReal x14252=(cj3*gconst40);
IkReal x14253=((1.0)*x14243);
IkReal x14254=((1.0)*x14242);
IkReal x14255=(cj3*x14242);
IkReal x14256=(gconst40*x14242);
IkReal x14257=(x14244+x14245);
IkReal x14258=(x14243*x14252);
evalcond[0]=(((r21*x14256))+(((-1.0)*r22*x14253))+(((-1.0)*x14248*x14254)));
evalcond[1]=((((-1.0)*gconst41*r00*x14254))+(((-1.0)*r02*x14253))+((r01*x14256)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14254))+((r11*x14256))+(((-1.0)*r12*x14253)));
evalcond[3]=((((-1.0)*r10*x14249*x14253))+((r12*x14255))+((r11*x14258))+((r11*x14247))+((r10*x14246)));
evalcond[4]=((((-1.0)*r11*x14246*x14253))+((r10*x14252))+((r11*x14249))+((r10*x14243*x14247))+(((-1.0)*r12*sj3*x14254)));
evalcond[5]=(((r21*x14247))+((r21*x14258))+(((-1.0)*cj3*x14248*x14253))+((r20*x14246))+x14257+((r22*x14255)));
evalcond[6]=(((r02*x14255))+(((-1.0)*r00*x14249*x14253))+((r01*x14247))+x14251+(((-1.0)*x14250))+((r00*x14246))+((r01*x14258)));
evalcond[7]=((((-1.0)*r02*sj3*x14254))+(((-1.0)*r01*x14246*x14253))+((r01*x14249))+((r00*x14252))+x14257+((r00*x14243*x14247)));
evalcond[8]=(((r21*x14249))+(((-1.0)*r22*sj3*x14254))+((r20*x14243*x14247))+((r20*x14252))+(((-1.0)*r21*x14246*x14253))+x14250+(((-1.0)*x14251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14259=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14259);
rxp1_1=(px*r21);
rxp1_2=(r11*x14259);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14260=(r11*sj5);
IkReal x14261=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14261))+x14260);
j4eval[1]=(((cj3*x14260))+(((-1.0)*cj3*x14261)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14262=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14262);
rxp1_1=(px*r21);
rxp1_2=(r11*x14262);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14263=(cj5*r10);
IkReal x14264=(r11*sj5);
j4eval[0]=((((-1.0)*x14263))+x14264);
j4eval[1]=(((sj3*x14263))+(((-1.0)*sj3*x14264)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14265=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14265);
rxp1_1=(px*r21);
rxp1_2=(r11*x14265);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14266=((1.0)*r10);
CheckValue<IkReal> x14267=IKPowWithIntegerCheck(cj3,-1);
if(!x14267.valid){
continue;
}
CheckValue<IkReal> x14268=IKPowWithIntegerCheck(r02,-1);
if(!x14268.valid){
continue;
}
CheckValue<IkReal> x14269=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14266))),-1);
if(!x14269.valid){
continue;
}
if( IKabs(((x14267.value)*(x14268.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14269.value)*(((((-1.0)*sj3*sj5*x14266))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14267.value)*(x14268.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14269.value)*(((((-1.0)*sj3*sj5*x14266))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14267.value)*(x14268.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14269.value)*(((((-1.0)*sj3*sj5*x14266))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14270=IKsin(j4);
IkReal x14271=IKcos(j4);
IkReal x14272=(cj2*sj1);
IkReal x14273=(cj1*sj2);
IkReal x14274=(cj5*r10);
IkReal x14275=(sj1*sj2);
IkReal x14276=(cj5*sj3);
IkReal x14277=(r11*sj5);
IkReal x14278=(cj3*sj5);
IkReal x14279=(r21*sj5);
IkReal x14280=(cj1*cj2);
IkReal x14281=(cj3*cj5);
IkReal x14282=(sj3*sj5);
IkReal x14283=((1.0)*x14270);
IkReal x14284=(r20*x14271);
IkReal x14285=(cj3*x14271);
IkReal x14286=(sj3*x14271);
IkReal x14287=(x14273+x14272);
evalcond[0]=((-1.0)*r02*x14271);
evalcond[1]=((((-1.0)*cj5*r20*x14283))+((x14270*x14279)));
evalcond[2]=((((-1.0)*x14275))+((cj3*r02*x14270))+x14280);
evalcond[3]=((((-1.0)*r02*sj3*x14283))+x14287);
evalcond[4]=((-1.0)+(((-1.0)*x14274*x14283))+((x14270*x14277)));
evalcond[5]=(((r10*x14282))+((r11*x14276))+(((-1.0)*x14274*x14285))+((x14277*x14285)));
evalcond[6]=(((r11*x14281))+((r10*x14278))+((x14274*x14286))+(((-1.0)*x14277*x14286)));
evalcond[7]=(((r21*x14276))+(((-1.0)*x14281*x14284))+x14287+((r20*x14282))+((r21*x14271*x14278)));
evalcond[8]=(((r21*x14281))+(((-1.0)*x14279*x14286))+((x14276*x14284))+((r20*x14278))+(((-1.0)*x14280))+x14275);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14288=(cj5*r10);
IkReal x14289=((1.0)*r11);
CheckValue<IkReal> x14290=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x14288))),-1);
if(!x14290.valid){
continue;
}
CheckValue<IkReal> x14291=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x14289))+((sj3*x14288))),-1);
if(!x14291.valid){
continue;
}
if( IKabs(x14290.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14291.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14289)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14290.value)+IKsqr(((x14291.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14289))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14290.value, ((x14291.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14289))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14292=IKsin(j4);
IkReal x14293=IKcos(j4);
IkReal x14294=(cj2*sj1);
IkReal x14295=(cj1*sj2);
IkReal x14296=(cj5*r10);
IkReal x14297=(sj1*sj2);
IkReal x14298=(cj5*sj3);
IkReal x14299=(r11*sj5);
IkReal x14300=(cj3*sj5);
IkReal x14301=(r21*sj5);
IkReal x14302=(cj1*cj2);
IkReal x14303=(cj3*cj5);
IkReal x14304=(sj3*sj5);
IkReal x14305=((1.0)*x14292);
IkReal x14306=(r20*x14293);
IkReal x14307=(cj3*x14293);
IkReal x14308=(sj3*x14293);
IkReal x14309=(x14295+x14294);
evalcond[0]=((-1.0)*r02*x14293);
evalcond[1]=((((-1.0)*cj5*r20*x14305))+((x14292*x14301)));
evalcond[2]=(((cj3*r02*x14292))+(((-1.0)*x14297))+x14302);
evalcond[3]=((((-1.0)*r02*sj3*x14305))+x14309);
evalcond[4]=((-1.0)+((x14292*x14299))+(((-1.0)*x14296*x14305)));
evalcond[5]=(((x14299*x14307))+(((-1.0)*x14296*x14307))+((r11*x14298))+((r10*x14304)));
evalcond[6]=(((x14296*x14308))+((r11*x14303))+((r10*x14300))+(((-1.0)*x14299*x14308)));
evalcond[7]=(((r20*x14304))+(((-1.0)*x14303*x14306))+((r21*x14298))+((r21*x14293*x14300))+x14309);
evalcond[8]=(((r20*x14300))+((x14298*x14306))+(((-1.0)*x14301*x14308))+(((-1.0)*x14302))+((r21*x14303))+x14297);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14310=((1.0)*r10);
IkReal x14311=(r11*sj5);
CheckValue<IkReal> x14312=IKPowWithIntegerCheck(((((-1.0)*cj5*x14310))+x14311),-1);
if(!x14312.valid){
continue;
}
CheckValue<IkReal> x14313=IKPowWithIntegerCheck((((cj3*x14311))+(((-1.0)*cj3*cj5*x14310))),-1);
if(!x14313.valid){
continue;
}
if( IKabs(x14312.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14313.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14310)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14312.value)+IKsqr(((x14313.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14310))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14312.value, ((x14313.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14310))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14314=IKsin(j4);
IkReal x14315=IKcos(j4);
IkReal x14316=(cj2*sj1);
IkReal x14317=(cj1*sj2);
IkReal x14318=(cj5*r10);
IkReal x14319=(sj1*sj2);
IkReal x14320=(cj5*sj3);
IkReal x14321=(r11*sj5);
IkReal x14322=(cj3*sj5);
IkReal x14323=(r21*sj5);
IkReal x14324=(cj1*cj2);
IkReal x14325=(cj3*cj5);
IkReal x14326=(sj3*sj5);
IkReal x14327=((1.0)*x14314);
IkReal x14328=(r20*x14315);
IkReal x14329=(cj3*x14315);
IkReal x14330=(sj3*x14315);
IkReal x14331=(x14316+x14317);
evalcond[0]=((-1.0)*r02*x14315);
evalcond[1]=(((x14314*x14323))+(((-1.0)*cj5*r20*x14327)));
evalcond[2]=((((-1.0)*x14319))+((cj3*r02*x14314))+x14324);
evalcond[3]=((((-1.0)*r02*sj3*x14327))+x14331);
evalcond[4]=((-1.0)+(((-1.0)*x14318*x14327))+((x14314*x14321)));
evalcond[5]=(((x14321*x14329))+((r10*x14326))+((r11*x14320))+(((-1.0)*x14318*x14329)));
evalcond[6]=(((x14318*x14330))+((r10*x14322))+(((-1.0)*x14321*x14330))+((r11*x14325)));
evalcond[7]=((((-1.0)*x14325*x14328))+((r21*x14320))+((r20*x14326))+x14331+((r21*x14315*x14322)));
evalcond[8]=(((x14320*x14328))+((r21*x14325))+((r20*x14322))+x14319+(((-1.0)*x14324))+(((-1.0)*x14323*x14330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14332=cj5*cj5;
IkReal x14333=((1.0)*cj3);
IkReal x14334=(r10*r21);
IkReal x14335=(cj5*sj5);
IkReal x14336=(r11*r21);
IkReal x14337=(r11*r20);
IkReal x14338=(r22*sj3);
IkReal x14339=(r10*r20);
IkReal x14340=((1.0)*sj3*x14332);
CheckValue<IkReal> x14341=IKPowWithIntegerCheck(IKsign((((cj3*x14334*x14335))+((cj3*x14335*x14337))+(((-1.0)*r12*r22*x14333))+((cj3*x14332*x14336))+(((-1.0)*x14333*x14336))+(((-1.0)*x14332*x14333*x14339)))),-1);
if(!x14341.valid){
continue;
}
CheckValue<IkReal> x14342 = IKatan2WithCheck(IkReal((((r10*sj5*x14338))+((cj5*r11*x14338)))),IkReal(((((-1.0)*x14337*x14340))+(((-1.0)*sj3*x14335*x14339))+(((-1.0)*x14334*x14340))+((sj3*x14335*x14336))+((sj3*x14334)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14341.value)))+(x14342.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14343=IKsin(j4);
IkReal x14344=IKcos(j4);
IkReal x14345=(cj2*sj1);
IkReal x14346=(cj1*sj2);
IkReal x14347=(cj5*sj3);
IkReal x14348=(cj5*r10);
IkReal x14349=(r00*sj5);
IkReal x14350=(sj1*sj2);
IkReal x14351=(r11*sj5);
IkReal x14352=(cj3*cj5);
IkReal x14353=(cj3*sj5);
IkReal x14354=(r21*sj5);
IkReal x14355=(cj1*cj2);
IkReal x14356=(sj3*sj5);
IkReal x14357=(r01*sj5);
IkReal x14358=((1.0)*x14344);
IkReal x14359=((1.0)*x14343);
IkReal x14360=(cj3*x14343);
IkReal x14361=(cj3*x14344);
IkReal x14362=(x14345+x14346);
evalcond[0]=((((-1.0)*cj5*r20*x14359))+(((-1.0)*r22*x14358))+((x14343*x14354)));
evalcond[1]=((((-1.0)*cj5*r00*x14359))+(((-1.0)*r02*x14358))+((x14343*x14357)));
evalcond[2]=((-1.0)+(((-1.0)*x14348*x14359))+(((-1.0)*r12*x14358))+((x14343*x14351)));
evalcond[3]=(((r11*x14347))+((r10*x14356))+(((-1.0)*cj3*x14348*x14358))+((r12*x14360))+((x14351*x14361)));
evalcond[4]=((((-1.0)*sj3*x14351*x14358))+((r11*x14352))+((r10*x14353))+(((-1.0)*r12*sj3*x14359))+((r10*x14344*x14347)));
evalcond[5]=(((r20*x14356))+((r21*x14347))+(((-1.0)*r20*x14352*x14358))+((r21*x14344*x14353))+x14362+((r22*x14360)));
evalcond[6]=(((r02*x14360))+((r01*x14347))+(((-1.0)*x14350))+(((-1.0)*r00*x14352*x14358))+((r01*x14344*x14353))+((sj3*x14349))+x14355);
evalcond[7]=(((r00*x14344*x14347))+(((-1.0)*r01*x14356*x14358))+((cj3*x14349))+((r01*x14352))+x14362+(((-1.0)*r02*sj3*x14359)));
evalcond[8]=(((r20*x14344*x14347))+(((-1.0)*r22*sj3*x14359))+((r20*x14353))+(((-1.0)*x14355))+(((-1.0)*sj3*x14354*x14358))+((r21*x14352))+x14350);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14363=((1.0)*cj5);
CheckValue<IkReal> x14364 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14363))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14364.valid){
continue;
}
CheckValue<IkReal> x14365=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14363))+(((-1.0)*r20*sj5)))),-1);
if(!x14365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14364.value)+(((1.5707963267949)*(x14365.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14366=IKsin(j4);
IkReal x14367=IKcos(j4);
IkReal x14368=(cj2*sj1);
IkReal x14369=(cj1*sj2);
IkReal x14370=(cj5*sj3);
IkReal x14371=(cj5*r10);
IkReal x14372=(r00*sj5);
IkReal x14373=(sj1*sj2);
IkReal x14374=(r11*sj5);
IkReal x14375=(cj3*cj5);
IkReal x14376=(cj3*sj5);
IkReal x14377=(r21*sj5);
IkReal x14378=(cj1*cj2);
IkReal x14379=(sj3*sj5);
IkReal x14380=(r01*sj5);
IkReal x14381=((1.0)*x14367);
IkReal x14382=((1.0)*x14366);
IkReal x14383=(cj3*x14366);
IkReal x14384=(cj3*x14367);
IkReal x14385=(x14369+x14368);
evalcond[0]=(((x14366*x14377))+(((-1.0)*cj5*r20*x14382))+(((-1.0)*r22*x14381)));
evalcond[1]=(((x14366*x14380))+(((-1.0)*cj5*r00*x14382))+(((-1.0)*r02*x14381)));
evalcond[2]=((-1.0)+(((-1.0)*x14371*x14382))+((x14366*x14374))+(((-1.0)*r12*x14381)));
evalcond[3]=((((-1.0)*cj3*x14371*x14381))+((r10*x14379))+((r12*x14383))+((x14374*x14384))+((r11*x14370)));
evalcond[4]=(((r10*x14367*x14370))+((r10*x14376))+(((-1.0)*r12*sj3*x14382))+((r11*x14375))+(((-1.0)*sj3*x14374*x14381)));
evalcond[5]=(((r21*x14370))+(((-1.0)*r20*x14375*x14381))+((r22*x14383))+((r21*x14367*x14376))+((r20*x14379))+x14385);
evalcond[6]=(((r01*x14370))+(((-1.0)*x14373))+((r01*x14367*x14376))+(((-1.0)*r00*x14375*x14381))+((sj3*x14372))+((r02*x14383))+x14378);
evalcond[7]=(((r01*x14375))+(((-1.0)*r01*x14379*x14381))+((cj3*x14372))+((r00*x14367*x14370))+x14385+(((-1.0)*r02*sj3*x14382)));
evalcond[8]=(((r21*x14375))+((r20*x14367*x14370))+(((-1.0)*x14378))+(((-1.0)*r22*sj3*x14382))+(((-1.0)*sj3*x14377*x14381))+((r20*x14376))+x14373);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14386 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14386.valid){
continue;
}
CheckValue<IkReal> x14387=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14386.value)+(((1.5707963267949)*(x14387.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14388=IKsin(j4);
IkReal x14389=IKcos(j4);
IkReal x14390=(cj2*sj1);
IkReal x14391=(cj1*sj2);
IkReal x14392=(cj5*sj3);
IkReal x14393=(cj5*r10);
IkReal x14394=(r00*sj5);
IkReal x14395=(sj1*sj2);
IkReal x14396=(r11*sj5);
IkReal x14397=(cj3*cj5);
IkReal x14398=(cj3*sj5);
IkReal x14399=(r21*sj5);
IkReal x14400=(cj1*cj2);
IkReal x14401=(sj3*sj5);
IkReal x14402=(r01*sj5);
IkReal x14403=((1.0)*x14389);
IkReal x14404=((1.0)*x14388);
IkReal x14405=(cj3*x14388);
IkReal x14406=(cj3*x14389);
IkReal x14407=(x14390+x14391);
evalcond[0]=((((-1.0)*r22*x14403))+((x14388*x14399))+(((-1.0)*cj5*r20*x14404)));
evalcond[1]=(((x14388*x14402))+(((-1.0)*r02*x14403))+(((-1.0)*cj5*r00*x14404)));
evalcond[2]=((-1.0)+((x14388*x14396))+(((-1.0)*r12*x14403))+(((-1.0)*x14393*x14404)));
evalcond[3]=(((r10*x14401))+((r12*x14405))+(((-1.0)*cj3*x14393*x14403))+((r11*x14392))+((x14396*x14406)));
evalcond[4]=((((-1.0)*sj3*x14396*x14403))+((r10*x14389*x14392))+((r10*x14398))+((r11*x14397))+(((-1.0)*r12*sj3*x14404)));
evalcond[5]=(((r21*x14392))+((r22*x14405))+x14407+((r21*x14389*x14398))+(((-1.0)*r20*x14397*x14403))+((r20*x14401)));
evalcond[6]=((((-1.0)*r00*x14397*x14403))+(((-1.0)*x14395))+((r01*x14392))+((r02*x14405))+((r01*x14389*x14398))+x14400+((sj3*x14394)));
evalcond[7]=((((-1.0)*r02*sj3*x14404))+((r01*x14397))+(((-1.0)*r01*x14401*x14403))+((r00*x14389*x14392))+((cj3*x14394))+x14407);
evalcond[8]=((((-1.0)*r22*sj3*x14404))+((r21*x14397))+(((-1.0)*x14400))+(((-1.0)*sj3*x14399*x14403))+x14395+((r20*x14389*x14392))+((r20*x14398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14408=((-1.0)*r00);
IkReal x14410 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14410)==0){
continue;
}
IkReal x14409=pow(x14410,-0.5);
CheckValue<IkReal> x14411 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14408),IKFAST_ATAN2_MAGTHRESH);
if(!x14411.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14411.value));
IkReal gconst13=(r01*x14409);
IkReal gconst14=(x14408*x14409);
CheckValue<IkReal> x14412 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14412.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14412.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14413=((-1.0)*r00);
IkReal x14414=x14409;
CheckValue<IkReal> x14416 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14413),IKFAST_ATAN2_MAGTHRESH);
if(!x14416.valid){
continue;
}
IkReal x14415=((-1.0)*(x14416.value));
sj5=gconst13;
cj5=gconst14;
j5=x14415;
IkReal gconst12=x14415;
IkReal gconst13=(r01*x14414);
IkReal gconst14=(x14413*x14414);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14417=((1.0)*sj0);
IkReal x14418=((1.0)*cj0);
CheckValue<IkReal> x14419 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14418))+(((-1.0)*r12*x14417)))),IkReal(((((-1.0)*gconst13*r11*x14417))+((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r01*x14418)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14419.valid){
continue;
}
CheckValue<IkReal> x14420=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14419.value)+(((1.5707963267949)*(x14420.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14421=IKsin(j4);
IkReal x14422=IKcos(j4);
IkReal x14423=((1.0)*r22);
IkReal x14424=((1.0)*r12);
IkReal x14425=(gconst13*sj3);
IkReal x14426=(gconst13*r01);
IkReal x14427=(sj1*sj2);
IkReal x14428=(gconst14*sj3);
IkReal x14429=(cj2*sj1);
IkReal x14430=((1.0)*sj0);
IkReal x14431=(cj3*gconst13);
IkReal x14432=(cj3*gconst14);
IkReal x14433=((1.0)*cj0);
IkReal x14434=((1.0)*gconst14);
IkReal x14435=(cj1*sj2);
IkReal x14436=(sj3*x14421);
IkReal x14437=((1.0)*cj1*cj2);
IkReal x14438=(cj3*x14422);
IkReal x14439=(cj3*x14421);
IkReal x14440=(gconst13*x14421);
IkReal x14441=((1.0)*x14422);
IkReal x14442=(x14421*x14434);
evalcond[0]=((((-1.0)*x14422*x14423))+((r21*x14440))+(((-1.0)*r20*x14442)));
evalcond[1]=((((-1.0)*x14422*x14424))+cj0+((r11*x14440))+(((-1.0)*r10*x14442)));
evalcond[2]=((((-1.0)*x14430))+((x14421*x14426))+(((-1.0)*r02*x14441))+(((-1.0)*r00*x14442)));
evalcond[3]=(((r20*x14425))+x14435+x14429+((r22*x14439))+(((-1.0)*r20*x14432*x14441))+((r21*x14422*x14431))+((r21*x14428)));
evalcond[4]=((((-1.0)*x14437))+((r21*x14432))+(((-1.0)*x14423*x14436))+((r20*x14431))+((r20*x14422*x14428))+x14427+(((-1.0)*r21*x14425*x14441)));
evalcond[5]=(((x14426*x14438))+(((-1.0)*cj1*cj2*x14433))+((cj0*x14427))+((r01*x14428))+(((-1.0)*r00*x14432*x14441))+((r00*x14425))+((r02*x14439)));
evalcond[6]=((((-1.0)*cj1*cj2*x14430))+((r11*x14422*x14431))+(((-1.0)*r10*x14432*x14441))+((r11*x14428))+((sj0*x14427))+((r12*x14439))+((r10*x14425)));
evalcond[7]=((((-1.0)*x14433*x14435))+((r00*x14431))+((r01*x14432))+(((-1.0)*x14429*x14433))+((r00*x14422*x14428))+(((-1.0)*r02*x14436))+(((-1.0)*r01*x14425*x14441)));
evalcond[8]=(((r11*x14432))+((r10*x14431))+(((-1.0)*r11*x14425*x14441))+(((-1.0)*x14429*x14430))+(((-1.0)*x14424*x14436))+((r10*x14422*x14428))+(((-1.0)*x14430*x14435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14443=((1.0)*gconst14);
CheckValue<IkReal> x14444 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14443))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14444.valid){
continue;
}
CheckValue<IkReal> x14445=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14443)))),-1);
if(!x14445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14444.value)+(((1.5707963267949)*(x14445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14446=IKsin(j4);
IkReal x14447=IKcos(j4);
IkReal x14448=((1.0)*r22);
IkReal x14449=((1.0)*r12);
IkReal x14450=(gconst13*sj3);
IkReal x14451=(gconst13*r01);
IkReal x14452=(sj1*sj2);
IkReal x14453=(gconst14*sj3);
IkReal x14454=(cj2*sj1);
IkReal x14455=((1.0)*sj0);
IkReal x14456=(cj3*gconst13);
IkReal x14457=(cj3*gconst14);
IkReal x14458=((1.0)*cj0);
IkReal x14459=((1.0)*gconst14);
IkReal x14460=(cj1*sj2);
IkReal x14461=(sj3*x14446);
IkReal x14462=((1.0)*cj1*cj2);
IkReal x14463=(cj3*x14447);
IkReal x14464=(cj3*x14446);
IkReal x14465=(gconst13*x14446);
IkReal x14466=((1.0)*x14447);
IkReal x14467=(x14446*x14459);
evalcond[0]=(((r21*x14465))+(((-1.0)*r20*x14467))+(((-1.0)*x14447*x14448)));
evalcond[1]=(cj0+(((-1.0)*r10*x14467))+((r11*x14465))+(((-1.0)*x14447*x14449)));
evalcond[2]=((((-1.0)*r00*x14467))+(((-1.0)*x14455))+(((-1.0)*r02*x14466))+((x14446*x14451)));
evalcond[3]=(((r21*x14447*x14456))+((r20*x14450))+((r22*x14464))+(((-1.0)*r20*x14457*x14466))+x14460+x14454+((r21*x14453)));
evalcond[4]=((((-1.0)*x14448*x14461))+((r20*x14456))+(((-1.0)*r21*x14450*x14466))+x14452+(((-1.0)*x14462))+((r20*x14447*x14453))+((r21*x14457)));
evalcond[5]=(((cj0*x14452))+((r00*x14450))+((r01*x14453))+((r02*x14464))+((x14451*x14463))+(((-1.0)*cj1*cj2*x14458))+(((-1.0)*r00*x14457*x14466)));
evalcond[6]=(((sj0*x14452))+((r10*x14450))+((r11*x14453))+((r12*x14464))+(((-1.0)*cj1*cj2*x14455))+((r11*x14447*x14456))+(((-1.0)*r10*x14457*x14466)));
evalcond[7]=((((-1.0)*x14454*x14458))+((r00*x14456))+((r01*x14457))+((r00*x14447*x14453))+(((-1.0)*r02*x14461))+(((-1.0)*r01*x14450*x14466))+(((-1.0)*x14458*x14460)));
evalcond[8]=((((-1.0)*x14449*x14461))+(((-1.0)*x14454*x14455))+((r10*x14447*x14453))+((r10*x14456))+((r11*x14457))+(((-1.0)*x14455*x14460))+(((-1.0)*r11*x14450*x14466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14468=((-1.0)*r01);
IkReal x14470 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14470)==0){
continue;
}
IkReal x14469=pow(x14470,-0.5);
CheckValue<IkReal> x14471 = IKatan2WithCheck(IkReal(x14468),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14471.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14471.value))));
IkReal gconst16=(x14468*x14469);
IkReal gconst17=((1.0)*r00*x14469);
CheckValue<IkReal> x14472 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14472.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14472.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14473=((-1.0)*r01);
CheckValue<IkReal> x14476 = IKatan2WithCheck(IkReal(x14473),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14476.valid){
continue;
}
IkReal x14474=((1.0)*(x14476.value));
IkReal x14475=x14469;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14474)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14474)));
IkReal gconst16=(x14473*x14475);
IkReal gconst17=((1.0)*r00*x14475);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14477=((-1.0)*r01);
CheckValue<IkReal> x14480 = IKatan2WithCheck(IkReal(x14477),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14480.valid){
continue;
}
IkReal x14478=((1.0)*(x14480.value));
IkReal x14479=x14469;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14478)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14478)));
IkReal gconst16=(x14477*x14479);
IkReal gconst17=((1.0)*r00*x14479);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14481=((-1.0)*r01);
CheckValue<IkReal> x14484 = IKatan2WithCheck(IkReal(x14481),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14484.valid){
continue;
}
IkReal x14482=((1.0)*(x14484.value));
IkReal x14483=x14469;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14482)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14482)));
IkReal gconst16=(x14481*x14483);
IkReal gconst17=((1.0)*r00*x14483);
IkReal x14485=r02*r02;
IkReal x14486=(r12*sj0);
IkReal x14487=((1.0)*cj0);
IkReal x14488=x14469;
j4eval[0]=((IKabs(((((-1.0)*x14486))+(((-1.0)*r02*x14487)))))+(IKabs(((((-1.0)*x14487*x14488))+((cj0*x14485*x14488))+((r02*x14486*x14488))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14489=((-1.0)*r01);
CheckValue<IkReal> x14492 = IKatan2WithCheck(IkReal(x14489),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14492.valid){
continue;
}
IkReal x14490=((1.0)*(x14492.value));
IkReal x14491=x14469;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14490)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14490)));
IkReal gconst16=(x14489*x14491);
IkReal gconst17=((1.0)*r00*x14491);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14493=((-1.0)*r01);
CheckValue<IkReal> x14496 = IKatan2WithCheck(IkReal(x14493),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14496.valid){
continue;
}
IkReal x14494=((1.0)*(x14496.value));
IkReal x14495=x14469;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14494)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14494)));
IkReal gconst16=(x14493*x14495);
IkReal gconst17=((1.0)*r00*x14495);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14497=gconst16*gconst16;
IkReal x14498=gconst17*gconst17;
IkReal x14499=(r11*sj3);
IkReal x14500=(cj3*r10);
IkReal x14501=((1.0)*cj3);
IkReal x14502=(r10*sj3);
IkReal x14503=(gconst16*gconst17);
IkReal x14504=(r21*x14497);
IkReal x14505=((1.0)*r20*x14498);
CheckValue<IkReal> x14506=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14500*x14505))+((cj3*r11*r20*x14503))+((r21*x14500*x14503))+(((-1.0)*r12*r22*x14501))+(((-1.0)*r11*x14501*x14504)))),-1);
if(!x14506.valid){
continue;
}
CheckValue<IkReal> x14507 = IKatan2WithCheck(IkReal((((gconst16*r22*x14502))+((gconst17*r22*x14499)))),IkReal(((((-1.0)*x14499*x14505))+(((-1.0)*r20*x14502*x14503))+((r21*x14499*x14503))+((x14502*x14504)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14506.value)))+(x14507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14508=IKsin(j4);
IkReal x14509=IKcos(j4);
IkReal x14510=(cj2*sj1);
IkReal x14511=(cj1*sj2);
IkReal x14512=(gconst16*r21);
IkReal x14513=(cj3*gconst17);
IkReal x14514=(gconst16*r20);
IkReal x14515=(sj1*sj2);
IkReal x14516=(gconst17*r20);
IkReal x14517=(gconst17*sj3);
IkReal x14518=(gconst16*r10);
IkReal x14519=(cj1*cj2);
IkReal x14520=(gconst16*sj3);
IkReal x14521=((1.0)*x14509);
IkReal x14522=((1.0)*x14508);
IkReal x14523=(gconst16*x14508);
IkReal x14524=(cj3*x14509);
IkReal x14525=(cj3*x14508);
IkReal x14526=(x14510+x14511);
evalcond[0]=((((-1.0)*r22*x14521))+((x14508*x14512))+(((-1.0)*x14516*x14522)));
evalcond[1]=((((-1.0)*gconst17*r00*x14522))+((r01*x14523))+(((-1.0)*r02*x14521)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14522))+((r11*x14523))+(((-1.0)*r12*x14521)));
evalcond[3]=(((sj3*x14518))+((r11*x14517))+((r12*x14525))+((gconst16*r11*x14524))+(((-1.0)*r10*x14513*x14521)));
evalcond[4]=((((-1.0)*r12*sj3*x14522))+((cj3*x14518))+((r11*x14513))+((r10*x14509*x14517))+(((-1.0)*r11*x14520*x14521)));
evalcond[5]=(((r22*x14525))+((sj3*x14514))+((x14512*x14524))+(((-1.0)*r20*x14513*x14521))+x14526+((r21*x14517)));
evalcond[6]=(((gconst16*r01*x14524))+((r00*x14520))+((r01*x14517))+x14519+((r02*x14525))+(((-1.0)*r00*x14513*x14521))+(((-1.0)*x14515)));
evalcond[7]=(((r00*x14509*x14517))+((r01*x14513))+(((-1.0)*r01*x14520*x14521))+x14526+(((-1.0)*r02*sj3*x14522))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*sj3*x14512*x14521))+((cj3*x14514))+x14515+(((-1.0)*r22*sj3*x14522))+((sj3*x14509*x14516))+((r21*x14513))+(((-1.0)*x14519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14527=((1.0)*gconst17);
CheckValue<IkReal> x14528 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14527))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14528.valid){
continue;
}
CheckValue<IkReal> x14529=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14527)))),-1);
if(!x14529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14528.value)+(((1.5707963267949)*(x14529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14530=IKsin(j4);
IkReal x14531=IKcos(j4);
IkReal x14532=(cj2*sj1);
IkReal x14533=(cj1*sj2);
IkReal x14534=(gconst16*r21);
IkReal x14535=(cj3*gconst17);
IkReal x14536=(gconst16*r20);
IkReal x14537=(sj1*sj2);
IkReal x14538=(gconst17*r20);
IkReal x14539=(gconst17*sj3);
IkReal x14540=(gconst16*r10);
IkReal x14541=(cj1*cj2);
IkReal x14542=(gconst16*sj3);
IkReal x14543=((1.0)*x14531);
IkReal x14544=((1.0)*x14530);
IkReal x14545=(gconst16*x14530);
IkReal x14546=(cj3*x14531);
IkReal x14547=(cj3*x14530);
IkReal x14548=(x14532+x14533);
evalcond[0]=((((-1.0)*x14538*x14544))+((x14530*x14534))+(((-1.0)*r22*x14543)));
evalcond[1]=(((r01*x14545))+(((-1.0)*gconst17*r00*x14544))+(((-1.0)*r02*x14543)));
evalcond[2]=((-1.0)+((r11*x14545))+(((-1.0)*gconst17*r10*x14544))+(((-1.0)*r12*x14543)));
evalcond[3]=(((r12*x14547))+((gconst16*r11*x14546))+((r11*x14539))+((sj3*x14540))+(((-1.0)*r10*x14535*x14543)));
evalcond[4]=(((r10*x14531*x14539))+((r11*x14535))+(((-1.0)*r12*sj3*x14544))+(((-1.0)*r11*x14542*x14543))+((cj3*x14540)));
evalcond[5]=(((r21*x14539))+((r22*x14547))+x14548+((sj3*x14536))+((x14534*x14546))+(((-1.0)*r20*x14535*x14543)));
evalcond[6]=(((r02*x14547))+(((-1.0)*r00*x14535*x14543))+(((-1.0)*x14537))+((r00*x14542))+((r01*x14539))+x14541+((gconst16*r01*x14546)));
evalcond[7]=((((-1.0)*r02*sj3*x14544))+((r01*x14535))+((r00*x14531*x14539))+x14548+((cj3*gconst16*r00))+(((-1.0)*r01*x14542*x14543)));
evalcond[8]=(((sj3*x14531*x14538))+((cj3*x14536))+(((-1.0)*x14541))+((r21*x14535))+x14537+(((-1.0)*sj3*x14534*x14543))+(((-1.0)*r22*sj3*x14544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14549=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14549.valid){
continue;
}
CheckValue<IkReal> x14550 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14549.value)))+(x14550.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14551=IKsin(j4);
IkReal x14552=IKcos(j4);
IkReal x14553=(cj2*sj1);
IkReal x14554=(cj1*sj2);
IkReal x14555=(gconst16*r21);
IkReal x14556=(cj3*gconst17);
IkReal x14557=(gconst16*r20);
IkReal x14558=(sj1*sj2);
IkReal x14559=(gconst17*r20);
IkReal x14560=(gconst17*sj3);
IkReal x14561=(gconst16*r10);
IkReal x14562=(cj1*cj2);
IkReal x14563=(gconst16*sj3);
IkReal x14564=((1.0)*x14552);
IkReal x14565=((1.0)*x14551);
IkReal x14566=(gconst16*x14551);
IkReal x14567=(cj3*x14552);
IkReal x14568=(cj3*x14551);
IkReal x14569=(x14553+x14554);
evalcond[0]=((((-1.0)*r22*x14564))+(((-1.0)*x14559*x14565))+((x14551*x14555)));
evalcond[1]=(((r01*x14566))+(((-1.0)*r02*x14564))+(((-1.0)*gconst17*r00*x14565)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14565))+(((-1.0)*r12*x14564))+((r11*x14566)));
evalcond[3]=(((r11*x14560))+(((-1.0)*r10*x14556*x14564))+((gconst16*r11*x14567))+((r12*x14568))+((sj3*x14561)));
evalcond[4]=(((cj3*x14561))+(((-1.0)*r11*x14563*x14564))+((r11*x14556))+((r10*x14552*x14560))+(((-1.0)*r12*sj3*x14565)));
evalcond[5]=(((sj3*x14557))+((r21*x14560))+x14569+(((-1.0)*r20*x14556*x14564))+((x14555*x14567))+((r22*x14568)));
evalcond[6]=(((r01*x14560))+((gconst16*r01*x14567))+(((-1.0)*r00*x14556*x14564))+((r02*x14568))+x14562+(((-1.0)*x14558))+((r00*x14563)));
evalcond[7]=((((-1.0)*r01*x14563*x14564))+x14569+((r00*x14552*x14560))+((r01*x14556))+(((-1.0)*r02*sj3*x14565))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*sj3*x14555*x14564))+(((-1.0)*r22*sj3*x14565))+((sj3*x14552*x14559))+x14558+(((-1.0)*x14562))+((cj3*x14557))+((r21*x14556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14570=((-1.0)*r01);
CheckValue<IkReal> x14573 = IKatan2WithCheck(IkReal(x14570),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14573.valid){
continue;
}
IkReal x14571=((1.0)*(x14573.value));
IkReal x14572=x14469;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14571)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14571)));
IkReal gconst16=(x14570*x14572);
IkReal gconst17=((1.0)*r00*x14572);
IkReal x14574=r02*r02;
IkReal x14575=(r12*sj0);
IkReal x14576=((1.0)*cj0);
IkReal x14577=x14469;
j4eval[0]=((IKabs(((((-1.0)*x14576*x14577))+((cj0*x14574*x14577))+((r02*x14575*x14577)))))+(IKabs(((((-1.0)*r02*x14576))+(((-1.0)*x14575))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14578=((1.0)*r12);
IkReal x14579=(sj1*sj2);
IkReal x14580=(cj1*cj2);
IkReal x14581=((1.0)*sj3);
IkReal x14582=(gconst16*r21);
IkReal x14583=(cj3*gconst16*r20);
IkReal x14584=(gconst17*r20*sj3);
IkReal x14585=(cj3*gconst17*r21);
CheckValue<IkReal> x14586=IKPowWithIntegerCheck((((gconst17*r10*sj3*x14582))+(((-1.0)*gconst16*r11*x14581*x14582))+(((-1.0)*r10*r20*x14581*(gconst17*gconst17)))+((gconst16*r11*x14584))),-1);
if(!x14586.valid){
continue;
}
CheckValue<IkReal> x14587=IKPowWithIntegerCheck((x14584+(((-1.0)*x14581*x14582))),-1);
if(!x14587.valid){
continue;
}
if( IKabs(((x14586.value)*(((((-1.0)*x14578*x14585))+(((-1.0)*x14578*x14583))+(((-1.0)*x14578*x14579))+(((-1.0)*cj0*gconst17*r20*x14581))+((cj0*sj3*x14582))+((r12*x14580)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14587.value)*(((((-1.0)*x14585))+(((-1.0)*x14583))+x14580+(((-1.0)*x14579)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14586.value)*(((((-1.0)*x14578*x14585))+(((-1.0)*x14578*x14583))+(((-1.0)*x14578*x14579))+(((-1.0)*cj0*gconst17*r20*x14581))+((cj0*sj3*x14582))+((r12*x14580))))))+IKsqr(((x14587.value)*(((((-1.0)*x14585))+(((-1.0)*x14583))+x14580+(((-1.0)*x14579))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14586.value)*(((((-1.0)*x14578*x14585))+(((-1.0)*x14578*x14583))+(((-1.0)*x14578*x14579))+(((-1.0)*cj0*gconst17*r20*x14581))+((cj0*sj3*x14582))+((r12*x14580))))), ((x14587.value)*(((((-1.0)*x14585))+(((-1.0)*x14583))+x14580+(((-1.0)*x14579))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14588=IKsin(j4);
IkReal x14589=IKcos(j4);
IkReal x14590=((1.0)*gconst17);
IkReal x14591=(gconst17*sj3);
IkReal x14592=(gconst16*r21);
IkReal x14593=(cj3*gconst17);
IkReal x14594=(sj1*sj2);
IkReal x14595=((1.0)*sj0);
IkReal x14596=(gconst16*sj3);
IkReal x14597=(cj3*gconst16);
IkReal x14598=(cj2*sj1);
IkReal x14599=((1.0)*cj0);
IkReal x14600=((1.0)*sj3);
IkReal x14601=(cj1*sj2);
IkReal x14602=(cj3*x14589);
IkReal x14603=(gconst16*x14588);
IkReal x14604=((1.0)*x14589);
IkReal x14605=((1.0)*cj1*cj2);
IkReal x14606=(r02*x14588);
IkReal x14607=(r12*x14588);
evalcond[0]=((((-1.0)*r20*x14588*x14590))+((x14588*x14592)));
evalcond[1]=(cj0+(((-1.0)*r10*x14588*x14590))+(((-1.0)*r12*x14604))+((r11*x14603)));
evalcond[2]=((((-1.0)*x14595))+(((-1.0)*r00*x14588*x14590))+((r01*x14603))+(((-1.0)*r02*x14604)));
evalcond[3]=(((r20*x14596))+((x14592*x14602))+(((-1.0)*r20*x14590*x14602))+((r21*x14591))+x14598+x14601);
evalcond[4]=(((r20*x14597))+((r20*x14589*x14591))+((r21*x14593))+x14594+(((-1.0)*x14589*x14592*x14600))+(((-1.0)*x14605)));
evalcond[5]=((((-1.0)*r00*x14590*x14602))+(((-1.0)*cj1*cj2*x14599))+((cj3*x14606))+((r01*x14589*x14597))+((r01*x14591))+((cj0*x14594))+((r00*x14596)));
evalcond[6]=(((r11*x14589*x14597))+((sj0*x14594))+(((-1.0)*cj1*cj2*x14595))+((r10*x14596))+((cj3*x14607))+((r11*x14591))+(((-1.0)*r10*x14590*x14602)));
evalcond[7]=((((-1.0)*x14599*x14601))+(((-1.0)*x14600*x14606))+((r00*x14589*x14591))+(((-1.0)*x14598*x14599))+(((-1.0)*r01*x14596*x14604))+((r01*x14593))+((r00*x14597)));
evalcond[8]=(((r10*x14589*x14591))+(((-1.0)*r11*x14596*x14604))+(((-1.0)*x14595*x14598))+(((-1.0)*x14600*x14607))+(((-1.0)*x14595*x14601))+((r10*x14597))+((r11*x14593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14608=((1.0)*sj0);
IkReal x14609=((1.0)*cj0);
CheckValue<IkReal> x14610 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14608))+(((-1.0)*r02*x14609)))),IkReal(((((-1.0)*gconst16*r01*x14609))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14608)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14610.valid){
continue;
}
CheckValue<IkReal> x14611=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14610.value)+(((1.5707963267949)*(x14611.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14612=IKsin(j4);
IkReal x14613=IKcos(j4);
IkReal x14614=((1.0)*gconst17);
IkReal x14615=(gconst17*sj3);
IkReal x14616=(gconst16*r21);
IkReal x14617=(cj3*gconst17);
IkReal x14618=(sj1*sj2);
IkReal x14619=((1.0)*sj0);
IkReal x14620=(gconst16*sj3);
IkReal x14621=(cj3*gconst16);
IkReal x14622=(cj2*sj1);
IkReal x14623=((1.0)*cj0);
IkReal x14624=((1.0)*sj3);
IkReal x14625=(cj1*sj2);
IkReal x14626=(cj3*x14613);
IkReal x14627=(gconst16*x14612);
IkReal x14628=((1.0)*x14613);
IkReal x14629=((1.0)*cj1*cj2);
IkReal x14630=(r02*x14612);
IkReal x14631=(r12*x14612);
evalcond[0]=((((-1.0)*r20*x14612*x14614))+((x14612*x14616)));
evalcond[1]=(cj0+(((-1.0)*r10*x14612*x14614))+((r11*x14627))+(((-1.0)*r12*x14628)));
evalcond[2]=((((-1.0)*r02*x14628))+(((-1.0)*r00*x14612*x14614))+((r01*x14627))+(((-1.0)*x14619)));
evalcond[3]=(((r20*x14620))+((r21*x14615))+(((-1.0)*r20*x14614*x14626))+((x14616*x14626))+x14625+x14622);
evalcond[4]=((((-1.0)*x14613*x14616*x14624))+((r20*x14621))+(((-1.0)*x14629))+((r21*x14617))+x14618+((r20*x14613*x14615)));
evalcond[5]=(((r01*x14613*x14621))+(((-1.0)*r00*x14614*x14626))+((cj0*x14618))+((cj3*x14630))+((r01*x14615))+((r00*x14620))+(((-1.0)*cj1*cj2*x14623)));
evalcond[6]=(((sj0*x14618))+((cj3*x14631))+((r10*x14620))+(((-1.0)*cj1*cj2*x14619))+((r11*x14613*x14621))+(((-1.0)*r10*x14614*x14626))+((r11*x14615)));
evalcond[7]=((((-1.0)*x14624*x14630))+(((-1.0)*r01*x14620*x14628))+((r00*x14613*x14615))+(((-1.0)*x14622*x14623))+((r01*x14617))+(((-1.0)*x14623*x14625))+((r00*x14621)));
evalcond[8]=((((-1.0)*x14624*x14631))+(((-1.0)*x14619*x14625))+(((-1.0)*x14619*x14622))+((r10*x14621))+(((-1.0)*r11*x14620*x14628))+((r11*x14617))+((r10*x14613*x14615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14632=((1.0)*sj0);
IkReal x14633=((1.0)*cj0);
CheckValue<IkReal> x14634=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14634.valid){
continue;
}
CheckValue<IkReal> x14635 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14633))+(((-1.0)*r12*x14632)))),IkReal(((((-1.0)*gconst16*r01*x14633))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14632)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14634.value)))+(x14635.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14636=IKsin(j4);
IkReal x14637=IKcos(j4);
IkReal x14638=(cj3*gconst17);
IkReal x14639=(gconst16*r21);
IkReal x14640=(gconst17*sj3);
IkReal x14641=(gconst16*r20);
IkReal x14642=(sj1*sj2);
IkReal x14643=(gconst16*r10);
IkReal x14644=(cj2*sj1);
IkReal x14645=(gconst16*sj3);
IkReal x14646=((1.0)*cj0);
IkReal x14647=((1.0)*sj0);
IkReal x14648=(cj1*sj2);
IkReal x14649=((1.0)*x14637);
IkReal x14650=(gconst16*x14636);
IkReal x14651=(cj3*x14637);
IkReal x14652=(cj3*x14636);
IkReal x14653=((1.0)*cj1*cj2);
IkReal x14654=((1.0)*gconst17*x14636);
IkReal x14655=((1.0)*sj3*x14636);
evalcond[0]=((((-1.0)*r22*x14649))+(((-1.0)*r20*x14654))+((x14636*x14639)));
evalcond[1]=(cj0+(((-1.0)*r12*x14649))+(((-1.0)*r10*x14654))+((r11*x14650)));
evalcond[2]=(((r01*x14650))+(((-1.0)*r02*x14649))+(((-1.0)*x14647))+(((-1.0)*r00*x14654)));
evalcond[3]=((((-1.0)*r20*x14638*x14649))+((r22*x14652))+((sj3*x14641))+((x14639*x14651))+((r21*x14640))+x14644+x14648);
evalcond[4]=((((-1.0)*sj3*x14639*x14649))+(((-1.0)*r22*x14655))+x14642+((r20*x14637*x14640))+(((-1.0)*x14653))+((r21*x14638))+((cj3*x14641)));
evalcond[5]=(((gconst16*r01*x14651))+(((-1.0)*r00*x14638*x14649))+((cj0*x14642))+((r01*x14640))+((r00*x14645))+(((-1.0)*cj1*cj2*x14646))+((r02*x14652)));
evalcond[6]=(((r11*x14640))+(((-1.0)*r10*x14638*x14649))+((r12*x14652))+((sj0*x14642))+(((-1.0)*cj1*cj2*x14647))+((sj3*x14643))+((gconst16*r11*x14651)));
evalcond[7]=((((-1.0)*x14646*x14648))+(((-1.0)*r01*x14645*x14649))+(((-1.0)*r02*x14655))+((r01*x14638))+(((-1.0)*x14644*x14646))+((cj3*gconst16*r00))+((r00*x14637*x14640)));
evalcond[8]=((((-1.0)*r11*x14645*x14649))+(((-1.0)*r12*x14655))+((r10*x14637*x14640))+((r11*x14638))+(((-1.0)*x14644*x14647))+((cj3*x14643))+(((-1.0)*x14647*x14648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14656=((1.0)*gconst17);
CheckValue<IkReal> x14657=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14656)))),-1);
if(!x14657.valid){
continue;
}
CheckValue<IkReal> x14658 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14656)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14657.value)))+(x14658.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14659=IKsin(j4);
IkReal x14660=IKcos(j4);
IkReal x14661=(cj3*gconst17);
IkReal x14662=(gconst16*r21);
IkReal x14663=(gconst17*sj3);
IkReal x14664=(gconst16*r20);
IkReal x14665=(sj1*sj2);
IkReal x14666=(gconst16*r10);
IkReal x14667=(cj2*sj1);
IkReal x14668=(gconst16*sj3);
IkReal x14669=((1.0)*cj0);
IkReal x14670=((1.0)*sj0);
IkReal x14671=(cj1*sj2);
IkReal x14672=((1.0)*x14660);
IkReal x14673=(gconst16*x14659);
IkReal x14674=(cj3*x14660);
IkReal x14675=(cj3*x14659);
IkReal x14676=((1.0)*cj1*cj2);
IkReal x14677=((1.0)*gconst17*x14659);
IkReal x14678=((1.0)*sj3*x14659);
evalcond[0]=((((-1.0)*r22*x14672))+((x14659*x14662))+(((-1.0)*r20*x14677)));
evalcond[1]=(cj0+(((-1.0)*r10*x14677))+(((-1.0)*r12*x14672))+((r11*x14673)));
evalcond[2]=((((-1.0)*x14670))+((r01*x14673))+(((-1.0)*r00*x14677))+(((-1.0)*r02*x14672)));
evalcond[3]=((((-1.0)*r20*x14661*x14672))+((r21*x14663))+((x14662*x14674))+x14671+x14667+((r22*x14675))+((sj3*x14664)));
evalcond[4]=((((-1.0)*sj3*x14662*x14672))+(((-1.0)*x14676))+((r21*x14661))+(((-1.0)*r22*x14678))+((cj3*x14664))+x14665+((r20*x14660*x14663)));
evalcond[5]=((((-1.0)*r00*x14661*x14672))+((r02*x14675))+((gconst16*r01*x14674))+((cj0*x14665))+((r00*x14668))+((r01*x14663))+(((-1.0)*cj1*cj2*x14669)));
evalcond[6]=(((sj0*x14665))+(((-1.0)*cj1*cj2*x14670))+(((-1.0)*r10*x14661*x14672))+((r11*x14663))+((r12*x14675))+((sj3*x14666))+((gconst16*r11*x14674)));
evalcond[7]=(((r00*x14660*x14663))+(((-1.0)*x14669*x14671))+((r01*x14661))+(((-1.0)*r02*x14678))+((cj3*gconst16*r00))+(((-1.0)*x14667*x14669))+(((-1.0)*r01*x14668*x14672)));
evalcond[8]=((((-1.0)*x14670*x14671))+((r10*x14660*x14663))+((cj3*x14666))+(((-1.0)*r12*x14678))+(((-1.0)*r11*x14668*x14672))+((r11*x14661))+(((-1.0)*x14667*x14670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14679=((1.0)*gconst17);
CheckValue<IkReal> x14680 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14679))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14680.valid){
continue;
}
CheckValue<IkReal> x14681=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14679)))),-1);
if(!x14681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14680.value)+(((1.5707963267949)*(x14681.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14682=IKsin(j4);
IkReal x14683=IKcos(j4);
IkReal x14684=(cj3*gconst17);
IkReal x14685=(gconst16*r21);
IkReal x14686=(gconst17*sj3);
IkReal x14687=(gconst16*r20);
IkReal x14688=(sj1*sj2);
IkReal x14689=(gconst16*r10);
IkReal x14690=(cj2*sj1);
IkReal x14691=(gconst16*sj3);
IkReal x14692=((1.0)*cj0);
IkReal x14693=((1.0)*sj0);
IkReal x14694=(cj1*sj2);
IkReal x14695=((1.0)*x14683);
IkReal x14696=(gconst16*x14682);
IkReal x14697=(cj3*x14683);
IkReal x14698=(cj3*x14682);
IkReal x14699=((1.0)*cj1*cj2);
IkReal x14700=((1.0)*gconst17*x14682);
IkReal x14701=((1.0)*sj3*x14682);
evalcond[0]=(((x14682*x14685))+(((-1.0)*r20*x14700))+(((-1.0)*r22*x14695)));
evalcond[1]=(cj0+(((-1.0)*r10*x14700))+((r11*x14696))+(((-1.0)*r12*x14695)));
evalcond[2]=(((r01*x14696))+(((-1.0)*r02*x14695))+(((-1.0)*x14693))+(((-1.0)*r00*x14700)));
evalcond[3]=(((r22*x14698))+((sj3*x14687))+((x14685*x14697))+x14694+x14690+(((-1.0)*r20*x14684*x14695))+((r21*x14686)));
evalcond[4]=(((cj3*x14687))+(((-1.0)*x14699))+(((-1.0)*sj3*x14685*x14695))+((r20*x14683*x14686))+x14688+(((-1.0)*r22*x14701))+((r21*x14684)));
evalcond[5]=(((r00*x14691))+((r01*x14686))+(((-1.0)*cj1*cj2*x14692))+((r02*x14698))+(((-1.0)*r00*x14684*x14695))+((gconst16*r01*x14697))+((cj0*x14688)));
evalcond[6]=((((-1.0)*r10*x14684*x14695))+((sj3*x14689))+((r11*x14686))+(((-1.0)*cj1*cj2*x14693))+((r12*x14698))+((gconst16*r11*x14697))+((sj0*x14688)));
evalcond[7]=((((-1.0)*r01*x14691*x14695))+((r01*x14684))+((r00*x14683*x14686))+(((-1.0)*x14690*x14692))+((cj3*gconst16*r00))+(((-1.0)*x14692*x14694))+(((-1.0)*r02*x14701)));
evalcond[8]=(((cj3*x14689))+(((-1.0)*r11*x14691*x14695))+((r11*x14684))+((r10*x14683*x14686))+(((-1.0)*r12*x14701))+(((-1.0)*x14690*x14693))+(((-1.0)*x14693*x14694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14702=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14702;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14702);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14703=((1.0)*cj5);
IkReal x14704=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14703)));
j4eval[0]=x14704;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14703))))));
j4eval[2]=IKsign(x14704);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14705=cj5*cj5;
IkReal x14706=(cj3*r01);
IkReal x14707=(cj5*sj5);
IkReal x14708=((1.0)*cj3);
IkReal x14709=(((r21*x14705*x14706))+(((-1.0)*r21*x14706))+(((-1.0)*r02*r22*x14708))+((cj3*r00*r21*x14707))+(((-1.0)*r00*r20*x14705*x14708))+((r20*x14706*x14707)));
j4eval[0]=x14709;
j4eval[1]=IKsign(x14709);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14710=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14710;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14710);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14711=((1.0)*cj5);
IkReal x14712=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14711)));
j4eval[0]=x14712;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14711))))));
j4eval[2]=IKsign(x14712);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14713=cj5*cj5;
IkReal x14714=r01*r01;
IkReal x14715=(r01*sj5);
IkReal x14716=(cj5*r00);
IkReal x14717=((((2.0)*x14715*x14716))+(((-1.0)*(r02*r02)))+(((-1.0)*x14713*(r00*r00)))+((x14713*x14714))+(((-1.0)*x14714)));
j4eval[0]=x14717;
j4eval[1]=IKsign(x14717);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14715))+x14716))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14718=cj5*cj5;
IkReal x14719=r01*r01;
IkReal x14720=(r01*sj5);
IkReal x14721=(cj5*r00);
CheckValue<IkReal> x14722 = IKatan2WithCheck(IkReal(((((-1.0)*x14720))+x14721)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14722.valid){
continue;
}
CheckValue<IkReal> x14723=IKPowWithIntegerCheck(IKsign(((((2.0)*x14720*x14721))+(((-1.0)*(r02*r02)))+((x14718*x14719))+(((-1.0)*x14718*(r00*r00)))+(((-1.0)*x14719)))),-1);
if(!x14723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14722.value)+(((1.5707963267949)*(x14723.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14724=IKsin(j4);
IkReal x14725=IKcos(j4);
IkReal x14726=(cj5*r10);
IkReal x14727=(r01*sj5);
IkReal x14728=((1.0)*cj2);
IkReal x14729=(cj5*r00);
IkReal x14730=(cj5*r20);
IkReal x14731=((1.0)*x14725);
IkReal x14732=((1.0)*x14724);
IkReal x14733=(sj5*x14724);
evalcond[0]=((((-1.0)*r22*x14731))+((r21*x14733))+(((-1.0)*x14730*x14732)));
evalcond[1]=((((-1.0)*r12*x14731))+(((-1.0)*x14726*x14732))+((r11*x14733)));
evalcond[2]=((((-1.0)*r02*x14732))+((x14725*x14729))+(((-1.0)*x14727*x14731)));
evalcond[3]=((-1.0)+(((-1.0)*x14729*x14732))+(((-1.0)*r02*x14731))+((x14724*x14727)));
evalcond[4]=((((-1.0)*r21*sj5*x14731))+((sj1*sj2))+(((-1.0)*cj1*x14728))+(((-1.0)*r22*x14732))+((x14725*x14730)));
evalcond[5]=((((-1.0)*r12*x14732))+(((-1.0)*sj1*x14728))+(((-1.0)*cj1*sj2))+((x14725*x14726))+(((-1.0)*r11*sj5*x14731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14734=((1.0)*cj5);
CheckValue<IkReal> x14735 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14734))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14735.valid){
continue;
}
CheckValue<IkReal> x14736=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14734))+(((-1.0)*r10*sj5)))),-1);
if(!x14736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14735.value)+(((1.5707963267949)*(x14736.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14737=IKsin(j4);
IkReal x14738=IKcos(j4);
IkReal x14739=(cj5*r10);
IkReal x14740=(r01*sj5);
IkReal x14741=((1.0)*cj2);
IkReal x14742=(cj5*r00);
IkReal x14743=(cj5*r20);
IkReal x14744=((1.0)*x14738);
IkReal x14745=((1.0)*x14737);
IkReal x14746=(sj5*x14737);
evalcond[0]=((((-1.0)*x14743*x14745))+((r21*x14746))+(((-1.0)*r22*x14744)));
evalcond[1]=(((r11*x14746))+(((-1.0)*x14739*x14745))+(((-1.0)*r12*x14744)));
evalcond[2]=((((-1.0)*r02*x14745))+((x14738*x14742))+(((-1.0)*x14740*x14744)));
evalcond[3]=((-1.0)+(((-1.0)*x14742*x14745))+((x14737*x14740))+(((-1.0)*r02*x14744)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x14745))+((x14738*x14743))+(((-1.0)*cj1*x14741))+(((-1.0)*r21*sj5*x14744)));
evalcond[5]=((((-1.0)*r11*sj5*x14744))+((x14738*x14739))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14741))+(((-1.0)*r12*x14745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14747=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14747.valid){
continue;
}
CheckValue<IkReal> x14748 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14747.value)))+(x14748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14749=IKsin(j4);
IkReal x14750=IKcos(j4);
IkReal x14751=(cj5*r10);
IkReal x14752=(r01*sj5);
IkReal x14753=((1.0)*cj2);
IkReal x14754=(cj5*r00);
IkReal x14755=(cj5*r20);
IkReal x14756=((1.0)*x14750);
IkReal x14757=((1.0)*x14749);
IkReal x14758=(sj5*x14749);
evalcond[0]=((((-1.0)*x14755*x14757))+((r21*x14758))+(((-1.0)*r22*x14756)));
evalcond[1]=((((-1.0)*r12*x14756))+(((-1.0)*x14751*x14757))+((r11*x14758)));
evalcond[2]=((((-1.0)*r02*x14757))+(((-1.0)*x14752*x14756))+((x14750*x14754)));
evalcond[3]=((-1.0)+((x14749*x14752))+(((-1.0)*r02*x14756))+(((-1.0)*x14754*x14757)));
evalcond[4]=((((-1.0)*r21*sj5*x14756))+(((-1.0)*cj1*x14753))+((sj1*sj2))+(((-1.0)*r22*x14757))+((x14750*x14755)));
evalcond[5]=((((-1.0)*r11*sj5*x14756))+(((-1.0)*r12*x14757))+(((-1.0)*sj1*x14753))+(((-1.0)*cj1*sj2))+((x14750*x14751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14759=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14759;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14759);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14760=((1.0)*cj5);
IkReal x14761=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14760)));
j4eval[0]=x14761;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14760)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14761);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14762=cj5*cj5;
IkReal x14763=r01*r01;
IkReal x14764=(cj5*r00);
IkReal x14765=(r01*sj5);
IkReal x14766=((((-1.0)*x14762*x14763))+((x14762*(r00*r00)))+x14763+(r02*r02)+(((-2.0)*x14764*x14765)));
j4eval[0]=x14766;
j4eval[1]=IKsign(x14766);
j4eval[2]=((IKabs(((((-1.0)*x14764))+x14765)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14767=cj5*cj5;
IkReal x14768=r01*r01;
IkReal x14769=(r01*sj5);
IkReal x14770=(cj5*r00);
CheckValue<IkReal> x14771 = IKatan2WithCheck(IkReal(((((-1.0)*x14770))+x14769)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14771.valid){
continue;
}
CheckValue<IkReal> x14772=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14767*x14768))+((x14767*(r00*r00)))+(((-2.0)*x14769*x14770))+x14768+(r02*r02))),-1);
if(!x14772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14771.value)+(((1.5707963267949)*(x14772.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14773=IKcos(j4);
IkReal x14774=IKsin(j4);
IkReal x14775=(cj5*r00);
IkReal x14776=(cj5*r10);
IkReal x14777=(r21*sj5);
IkReal x14778=((1.0)*cj2);
IkReal x14779=(cj5*r20);
IkReal x14780=((1.0)*x14773);
IkReal x14781=((1.0)*x14774);
IkReal x14782=(sj5*x14774);
IkReal x14783=(sj5*x14773);
evalcond[0]=(((r01*x14783))+(((-1.0)*x14775*x14780))+((r02*x14774)));
evalcond[1]=(((x14774*x14777))+(((-1.0)*x14779*x14781))+(((-1.0)*r22*x14780)));
evalcond[2]=((((-1.0)*x14776*x14781))+(((-1.0)*r12*x14780))+((r11*x14782)));
evalcond[3]=((-1.0)+((r01*x14782))+(((-1.0)*r02*x14780))+(((-1.0)*x14775*x14781)));
evalcond[4]=(((r22*x14774))+(((-1.0)*x14779*x14780))+((sj1*sj2))+((x14773*x14777))+(((-1.0)*cj1*x14778)));
evalcond[5]=(((r12*x14774))+(((-1.0)*x14776*x14780))+(((-1.0)*cj1*sj2))+((r11*x14783))+(((-1.0)*sj1*x14778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14784=((1.0)*cj5);
CheckValue<IkReal> x14785 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14784)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14785.valid){
continue;
}
CheckValue<IkReal> x14786=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14784)))),-1);
if(!x14786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14785.value)+(((1.5707963267949)*(x14786.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14787=IKcos(j4);
IkReal x14788=IKsin(j4);
IkReal x14789=(cj5*r00);
IkReal x14790=(cj5*r10);
IkReal x14791=(r21*sj5);
IkReal x14792=((1.0)*cj2);
IkReal x14793=(cj5*r20);
IkReal x14794=((1.0)*x14787);
IkReal x14795=((1.0)*x14788);
IkReal x14796=(sj5*x14788);
IkReal x14797=(sj5*x14787);
evalcond[0]=((((-1.0)*x14789*x14794))+((r01*x14797))+((r02*x14788)));
evalcond[1]=(((x14788*x14791))+(((-1.0)*x14793*x14795))+(((-1.0)*r22*x14794)));
evalcond[2]=((((-1.0)*r12*x14794))+(((-1.0)*x14790*x14795))+((r11*x14796)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14794))+(((-1.0)*x14789*x14795))+((r01*x14796)));
evalcond[4]=((((-1.0)*x14793*x14794))+((sj1*sj2))+((x14787*x14791))+(((-1.0)*cj1*x14792))+((r22*x14788)));
evalcond[5]=((((-1.0)*sj1*x14792))+(((-1.0)*x14790*x14794))+(((-1.0)*cj1*sj2))+((r11*x14797))+((r12*x14788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14798=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14798.valid){
continue;
}
CheckValue<IkReal> x14799 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14798.value)))+(x14799.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14800=IKcos(j4);
IkReal x14801=IKsin(j4);
IkReal x14802=(cj5*r00);
IkReal x14803=(cj5*r10);
IkReal x14804=(r21*sj5);
IkReal x14805=((1.0)*cj2);
IkReal x14806=(cj5*r20);
IkReal x14807=((1.0)*x14800);
IkReal x14808=((1.0)*x14801);
IkReal x14809=(sj5*x14801);
IkReal x14810=(sj5*x14800);
evalcond[0]=((((-1.0)*x14802*x14807))+((r01*x14810))+((r02*x14801)));
evalcond[1]=((((-1.0)*r22*x14807))+(((-1.0)*x14806*x14808))+((x14801*x14804)));
evalcond[2]=((((-1.0)*x14803*x14808))+(((-1.0)*r12*x14807))+((r11*x14809)));
evalcond[3]=((-1.0)+(((-1.0)*x14802*x14808))+((r01*x14809))+(((-1.0)*r02*x14807)));
evalcond[4]=(((x14800*x14804))+(((-1.0)*x14806*x14807))+((sj1*sj2))+((r22*x14801))+(((-1.0)*cj1*x14805)));
evalcond[5]=((((-1.0)*x14803*x14807))+(((-1.0)*cj1*sj2))+((r11*x14810))+(((-1.0)*sj1*x14805))+((r12*x14801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14812 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14812)==0){
continue;
}
IkReal x14811=pow(x14812,-0.5);
CheckValue<IkReal> x14813 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14813.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14813.value));
IkReal gconst49=((-1.0)*r21*x14811);
IkReal gconst50=(r20*x14811);
CheckValue<IkReal> x14814 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14814.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14814.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14817 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14817.valid){
continue;
}
IkReal x14815=((-1.0)*(x14817.value));
IkReal x14816=x14811;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14815;
IkReal gconst48=x14815;
IkReal gconst49=((-1.0)*r21*x14816);
IkReal gconst50=(r20*x14816);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14820 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14820.valid){
continue;
}
IkReal x14818=((-1.0)*(x14820.value));
IkReal x14819=x14811;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14818;
IkReal gconst48=x14818;
IkReal gconst49=((-1.0)*r21*x14819);
IkReal gconst50=(r20*x14819);
CheckValue<IkReal> x14828=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14828.valid){
continue;
}
IkReal x14821=x14828.value;
IkReal x14822=(sj3*x14821);
IkReal x14823=(r11*x14822);
IkReal x14824=(r00*x14822);
IkReal x14825=(r01*x14822);
IkReal x14826=(r10*x14822);
IkReal x14827=(r20*r21*x14822);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x14824*(r20*r20)))+((r00*r20*r21*x14823))+((r10*r20*r21*x14825))+((r01*x14823*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14829=gconst49*gconst49;
IkReal x14830=gconst50*gconst50;
IkReal x14831=((1.0)*cj3);
IkReal x14832=(gconst50*r01);
IkReal x14833=(gconst49*r10);
IkReal x14834=(r12*sj3);
IkReal x14835=(gconst49*r00);
IkReal x14836=(r00*sj3);
IkReal x14837=(r11*x14829);
IkReal x14838=(r10*x14830);
CheckValue<IkReal> x14839=IKPowWithIntegerCheck(IKsign((((cj3*gconst50*r11*x14835))+(((-1.0)*r01*x14831*x14837))+(((-1.0)*r00*x14831*x14838))+(((-1.0)*r02*r12*x14831))+((cj3*x14832*x14833)))),-1);
if(!x14839.valid){
continue;
}
CheckValue<IkReal> x14840 = IKatan2WithCheck(IkReal((((x14832*x14834))+((x14834*x14835)))),IkReal((((x14836*x14837))+(((-1.0)*r01*sj3*x14838))+((gconst49*r11*sj3*x14832))+(((-1.0)*gconst50*x14833*x14836)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14839.value)))+(x14840.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14841=IKsin(j4);
IkReal x14842=IKcos(j4);
IkReal x14843=(sj1*sj2);
IkReal x14844=(gconst50*r20);
IkReal x14845=(gconst50*sj3);
IkReal x14846=(cj3*r01);
IkReal x14847=(gconst50*r10);
IkReal x14848=(gconst49*sj3);
IkReal x14849=((1.0)*cj2);
IkReal x14850=(cj1*sj2);
IkReal x14851=(cj3*r11);
IkReal x14852=(gconst50*r00);
IkReal x14853=(cj3*r21);
IkReal x14854=(cj3*gconst49);
IkReal x14855=(cj1*x14849);
IkReal x14856=((1.0)*x14842);
IkReal x14857=((1.0)*x14841);
IkReal x14858=(gconst49*x14841);
IkReal x14859=(gconst49*x14842);
IkReal x14860=(cj3*x14841);
evalcond[0]=(((r21*x14858))+(((-1.0)*x14844*x14857))+(((-1.0)*r22*x14856)));
evalcond[1]=((((-1.0)*x14847*x14857))+((r11*x14858))+(((-1.0)*r12*x14856)));
evalcond[2]=((-1.0)+(((-1.0)*x14852*x14857))+(((-1.0)*r02*x14856))+((r01*x14858)));
evalcond[3]=((((-1.0)*cj3*x14852*x14856))+((r02*x14860))+((x14846*x14859))+((r01*x14845))+((r00*x14848)));
evalcond[4]=((((-1.0)*r02*sj3*x14857))+((r00*x14842*x14845))+(((-1.0)*r01*x14848*x14856))+((gconst50*x14846))+((r00*x14854)));
evalcond[5]=(((r20*x14848))+((cj2*sj1))+x14850+((x14853*x14859))+(((-1.0)*cj3*x14844*x14856))+((r22*x14860))+((r21*x14845)));
evalcond[6]=(x14843+((r12*x14860))+((x14851*x14859))+((r11*x14845))+((r10*x14848))+(((-1.0)*x14855))+(((-1.0)*cj3*x14847*x14856)));
evalcond[7]=((((-1.0)*r22*sj3*x14857))+((r20*x14854))+x14843+((sj3*x14842*x14844))+(((-1.0)*x14855))+((gconst50*x14853))+(((-1.0)*r21*x14848*x14856)));
evalcond[8]=((((-1.0)*sj1*x14849))+(((-1.0)*r11*x14848*x14856))+((r10*x14854))+((gconst50*x14851))+(((-1.0)*r12*sj3*x14857))+((r10*x14842*x14845))+(((-1.0)*x14850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14861=gconst49*gconst49;
IkReal x14862=gconst50*gconst50;
IkReal x14863=(cj3*r12);
IkReal x14864=(gconst49*r00);
IkReal x14865=(r01*r11);
IkReal x14866=(r00*r11);
IkReal x14867=(cj3*gconst50);
IkReal x14868=((1.0)*r01*r10);
IkReal x14869=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14870 = IKatan2WithCheck(IkReal((((gconst50*r01*x14863))+((x14863*x14864)))),IkReal((((cj3*x14861*x14866))+((gconst49*x14865*x14867))+(((-1.0)*r10*x14864*x14867))+(((-1.0)*cj3*x14862*x14868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14870.valid){
continue;
}
CheckValue<IkReal> x14871=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst50*r11*sj3*x14864))+((sj3*x14861*x14865))+((r00*r10*sj3*x14862))+(((-1.0)*x14868*x14869)))),-1);
if(!x14871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14870.value)+(((1.5707963267949)*(x14871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14872=IKsin(j4);
IkReal x14873=IKcos(j4);
IkReal x14874=(sj1*sj2);
IkReal x14875=(gconst50*r20);
IkReal x14876=(gconst50*sj3);
IkReal x14877=(cj3*r01);
IkReal x14878=(gconst50*r10);
IkReal x14879=(gconst49*sj3);
IkReal x14880=((1.0)*cj2);
IkReal x14881=(cj1*sj2);
IkReal x14882=(cj3*r11);
IkReal x14883=(gconst50*r00);
IkReal x14884=(cj3*r21);
IkReal x14885=(cj3*gconst49);
IkReal x14886=(cj1*x14880);
IkReal x14887=((1.0)*x14873);
IkReal x14888=((1.0)*x14872);
IkReal x14889=(gconst49*x14872);
IkReal x14890=(gconst49*x14873);
IkReal x14891=(cj3*x14872);
evalcond[0]=((((-1.0)*x14875*x14888))+(((-1.0)*r22*x14887))+((r21*x14889)));
evalcond[1]=(((r11*x14889))+(((-1.0)*x14878*x14888))+(((-1.0)*r12*x14887)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14887))+((r01*x14889))+(((-1.0)*x14883*x14888)));
evalcond[3]=(((r02*x14891))+(((-1.0)*cj3*x14883*x14887))+((r00*x14879))+((r01*x14876))+((x14877*x14890)));
evalcond[4]=(((r00*x14873*x14876))+((r00*x14885))+((gconst50*x14877))+(((-1.0)*r02*sj3*x14888))+(((-1.0)*r01*x14879*x14887)));
evalcond[5]=(((cj2*sj1))+x14881+((x14884*x14890))+(((-1.0)*cj3*x14875*x14887))+((r22*x14891))+((r21*x14876))+((r20*x14879)));
evalcond[6]=(((r11*x14876))+((r12*x14891))+((r10*x14879))+x14874+(((-1.0)*x14886))+(((-1.0)*cj3*x14878*x14887))+((x14882*x14890)));
evalcond[7]=((((-1.0)*r22*sj3*x14888))+(((-1.0)*r21*x14879*x14887))+x14874+((sj3*x14873*x14875))+((gconst50*x14884))+(((-1.0)*x14886))+((r20*x14885)));
evalcond[8]=(((r10*x14885))+(((-1.0)*r12*sj3*x14888))+((r10*x14873*x14876))+((gconst50*x14882))+(((-1.0)*r11*x14879*x14887))+(((-1.0)*x14881))+(((-1.0)*sj1*x14880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14892=((1.0)*gconst50);
CheckValue<IkReal> x14893 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14892)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14893.valid){
continue;
}
CheckValue<IkReal> x14894=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14892)))),-1);
if(!x14894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14893.value)+(((1.5707963267949)*(x14894.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14895=IKsin(j4);
IkReal x14896=IKcos(j4);
IkReal x14897=(sj1*sj2);
IkReal x14898=(gconst50*r20);
IkReal x14899=(gconst50*sj3);
IkReal x14900=(cj3*r01);
IkReal x14901=(gconst50*r10);
IkReal x14902=(gconst49*sj3);
IkReal x14903=((1.0)*cj2);
IkReal x14904=(cj1*sj2);
IkReal x14905=(cj3*r11);
IkReal x14906=(gconst50*r00);
IkReal x14907=(cj3*r21);
IkReal x14908=(cj3*gconst49);
IkReal x14909=(cj1*x14903);
IkReal x14910=((1.0)*x14896);
IkReal x14911=((1.0)*x14895);
IkReal x14912=(gconst49*x14895);
IkReal x14913=(gconst49*x14896);
IkReal x14914=(cj3*x14895);
evalcond[0]=(((r21*x14912))+(((-1.0)*x14898*x14911))+(((-1.0)*r22*x14910)));
evalcond[1]=((((-1.0)*r12*x14910))+((r11*x14912))+(((-1.0)*x14901*x14911)));
evalcond[2]=((-1.0)+((r01*x14912))+(((-1.0)*r02*x14910))+(((-1.0)*x14906*x14911)));
evalcond[3]=(((r00*x14902))+((r02*x14914))+((r01*x14899))+((x14900*x14913))+(((-1.0)*cj3*x14906*x14910)));
evalcond[4]=(((r00*x14908))+((r00*x14896*x14899))+(((-1.0)*r02*sj3*x14911))+((gconst50*x14900))+(((-1.0)*r01*x14902*x14910)));
evalcond[5]=(((cj2*sj1))+((r22*x14914))+x14904+((r21*x14899))+(((-1.0)*cj3*x14898*x14910))+((r20*x14902))+((x14907*x14913)));
evalcond[6]=(((x14905*x14913))+((r11*x14899))+(((-1.0)*x14909))+x14897+((r12*x14914))+(((-1.0)*cj3*x14901*x14910))+((r10*x14902)));
evalcond[7]=((((-1.0)*x14909))+x14897+(((-1.0)*r22*sj3*x14911))+(((-1.0)*r21*x14902*x14910))+((sj3*x14896*x14898))+((r20*x14908))+((gconst50*x14907)));
evalcond[8]=((((-1.0)*r12*sj3*x14911))+(((-1.0)*sj1*x14903))+(((-1.0)*x14904))+((r10*x14896*x14899))+((gconst50*x14905))+(((-1.0)*r11*x14902*x14910))+((r10*x14908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14916 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14916)==0){
continue;
}
IkReal x14915=pow(x14916,-0.5);
CheckValue<IkReal> x14917 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14917.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14917.value))));
IkReal gconst52=((1.0)*r21*x14915);
IkReal gconst53=((-1.0)*r20*x14915);
CheckValue<IkReal> x14918 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14918.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14918.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14921 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14921.valid){
continue;
}
IkReal x14919=((1.0)*(x14921.value));
IkReal x14920=x14915;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14919)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14919)));
IkReal gconst52=((1.0)*r21*x14920);
IkReal gconst53=((-1.0)*r20*x14920);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14924 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14924.valid){
continue;
}
IkReal x14922=((1.0)*(x14924.value));
IkReal x14923=x14915;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14922)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14922)));
IkReal gconst52=((1.0)*r21*x14923);
IkReal gconst53=((-1.0)*r20*x14923);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14927 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14927.valid){
continue;
}
IkReal x14925=((1.0)*(x14927.value));
IkReal x14926=x14915;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14925)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14925)));
IkReal gconst52=((1.0)*r21*x14926);
IkReal gconst53=((-1.0)*r20*x14926);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14928=gconst52*gconst52;
IkReal x14929=gconst53*gconst53;
IkReal x14930=(gconst53*r01);
IkReal x14931=(cj3*r20);
IkReal x14932=(r22*sj3);
IkReal x14933=((1.0)*cj3);
IkReal x14934=(gconst52*sj3);
IkReal x14935=((1.0)*r00);
IkReal x14936=(gconst52*r00);
IkReal x14937=(r21*x14928);
CheckValue<IkReal> x14938=IKPowWithIntegerCheck(IKsign((((gconst52*x14930*x14931))+(((-1.0)*x14929*x14931*x14935))+(((-1.0)*r01*x14933*x14937))+((cj3*gconst53*r21*x14936))+(((-1.0)*r02*r22*x14933)))),-1);
if(!x14938.valid){
continue;
}
CheckValue<IkReal> x14939 = IKatan2WithCheck(IkReal((((x14930*x14932))+((x14932*x14936)))),IkReal((((r00*sj3*x14937))+((r21*x14930*x14934))+(((-1.0)*r01*r20*sj3*x14929))+(((-1.0)*gconst53*r20*x14934*x14935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14938.value)))+(x14939.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14940=IKsin(j4);
IkReal x14941=IKcos(j4);
IkReal x14942=(sj1*sj2);
IkReal x14943=((1.0)*cj1);
IkReal x14944=(cj3*gconst52);
IkReal x14945=(gconst53*sj3);
IkReal x14946=(cj3*gconst53);
IkReal x14947=(cj2*sj1);
IkReal x14948=(gconst52*sj3);
IkReal x14949=(cj2*x14943);
IkReal x14950=((1.0)*x14941);
IkReal x14951=((1.0)*x14940);
IkReal x14952=(gconst52*x14940);
IkReal x14953=(cj3*x14940);
evalcond[0]=((((-1.0)*gconst53*r20*x14951))+(((-1.0)*r22*x14950))+((r21*x14952)));
evalcond[1]=((((-1.0)*r12*x14950))+(((-1.0)*gconst53*r10*x14951))+((r11*x14952)));
evalcond[2]=((-1.0)+((r01*x14952))+(((-1.0)*r02*x14950))+(((-1.0)*gconst53*r00*x14951)));
evalcond[3]=((((-1.0)*r00*x14946*x14950))+((r01*x14941*x14944))+((r00*x14948))+((r01*x14945))+((r02*x14953)));
evalcond[4]=((((-1.0)*r01*x14948*x14950))+((r00*x14941*x14945))+(((-1.0)*r02*sj3*x14951))+((r00*x14944))+((r01*x14946)));
evalcond[5]=((((-1.0)*r20*x14946*x14950))+x14947+((cj1*sj2))+((r22*x14953))+((r21*x14941*x14944))+((r21*x14945))+((r20*x14948)));
evalcond[6]=(((r12*x14953))+((r11*x14941*x14944))+x14942+((r10*x14948))+(((-1.0)*x14949))+(((-1.0)*r10*x14946*x14950))+((r11*x14945)));
evalcond[7]=((((-1.0)*r21*x14948*x14950))+x14942+((r20*x14941*x14945))+(((-1.0)*x14949))+(((-1.0)*r22*sj3*x14951))+((r21*x14946))+((r20*x14944)));
evalcond[8]=(((r10*x14941*x14945))+((r10*x14944))+(((-1.0)*sj2*x14943))+(((-1.0)*r12*sj3*x14951))+(((-1.0)*x14947))+(((-1.0)*r11*x14948*x14950))+((r11*x14946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14954=((1.0)*gconst53);
CheckValue<IkReal> x14955 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14954))+((gconst52*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14955.valid){
continue;
}
CheckValue<IkReal> x14956=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14954))+(((-1.0)*gconst52*r10)))),-1);
if(!x14956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14955.value)+(((1.5707963267949)*(x14956.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14957=IKsin(j4);
IkReal x14958=IKcos(j4);
IkReal x14959=(sj1*sj2);
IkReal x14960=((1.0)*cj1);
IkReal x14961=(cj3*gconst52);
IkReal x14962=(gconst53*sj3);
IkReal x14963=(cj3*gconst53);
IkReal x14964=(cj2*sj1);
IkReal x14965=(gconst52*sj3);
IkReal x14966=(cj2*x14960);
IkReal x14967=((1.0)*x14958);
IkReal x14968=((1.0)*x14957);
IkReal x14969=(gconst52*x14957);
IkReal x14970=(cj3*x14957);
evalcond[0]=((((-1.0)*r22*x14967))+((r21*x14969))+(((-1.0)*gconst53*r20*x14968)));
evalcond[1]=((((-1.0)*r12*x14967))+((r11*x14969))+(((-1.0)*gconst53*r10*x14968)));
evalcond[2]=((-1.0)+((r01*x14969))+(((-1.0)*r02*x14967))+(((-1.0)*gconst53*r00*x14968)));
evalcond[3]=(((r01*x14962))+((r02*x14970))+(((-1.0)*r00*x14963*x14967))+((r01*x14958*x14961))+((r00*x14965)));
evalcond[4]=(((r01*x14963))+((r00*x14958*x14962))+(((-1.0)*r02*sj3*x14968))+(((-1.0)*r01*x14965*x14967))+((r00*x14961)));
evalcond[5]=(((r21*x14958*x14961))+((r22*x14970))+x14964+((cj1*sj2))+(((-1.0)*r20*x14963*x14967))+((r20*x14965))+((r21*x14962)));
evalcond[6]=(x14959+((r12*x14970))+(((-1.0)*r10*x14963*x14967))+((r11*x14958*x14961))+((r11*x14962))+(((-1.0)*x14966))+((r10*x14965)));
evalcond[7]=((((-1.0)*r21*x14965*x14967))+x14959+(((-1.0)*r22*sj3*x14968))+(((-1.0)*x14966))+((r20*x14958*x14962))+((r20*x14961))+((r21*x14963)));
evalcond[8]=((((-1.0)*sj2*x14960))+(((-1.0)*x14964))+(((-1.0)*r11*x14965*x14967))+((r11*x14963))+((r10*x14958*x14962))+(((-1.0)*r12*sj3*x14968))+((r10*x14961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14971 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14971.valid){
continue;
}
CheckValue<IkReal> x14972=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14971.value)+(((1.5707963267949)*(x14972.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14973=IKsin(j4);
IkReal x14974=IKcos(j4);
IkReal x14975=(sj1*sj2);
IkReal x14976=((1.0)*cj1);
IkReal x14977=(cj3*gconst52);
IkReal x14978=(gconst53*sj3);
IkReal x14979=(cj3*gconst53);
IkReal x14980=(cj2*sj1);
IkReal x14981=(gconst52*sj3);
IkReal x14982=(cj2*x14976);
IkReal x14983=((1.0)*x14974);
IkReal x14984=((1.0)*x14973);
IkReal x14985=(gconst52*x14973);
IkReal x14986=(cj3*x14973);
evalcond[0]=((((-1.0)*gconst53*r20*x14984))+((r21*x14985))+(((-1.0)*r22*x14983)));
evalcond[1]=((((-1.0)*gconst53*r10*x14984))+((r11*x14985))+(((-1.0)*r12*x14983)));
evalcond[2]=((-1.0)+((r01*x14985))+(((-1.0)*gconst53*r00*x14984))+(((-1.0)*r02*x14983)));
evalcond[3]=((((-1.0)*r00*x14979*x14983))+((r00*x14981))+((r01*x14974*x14977))+((r02*x14986))+((r01*x14978)));
evalcond[4]=(((r00*x14974*x14978))+(((-1.0)*r01*x14981*x14983))+(((-1.0)*r02*sj3*x14984))+((r01*x14979))+((r00*x14977)));
evalcond[5]=((((-1.0)*r20*x14979*x14983))+((r20*x14981))+x14980+((cj1*sj2))+((r22*x14986))+((r21*x14978))+((r21*x14974*x14977)));
evalcond[6]=(x14975+(((-1.0)*r10*x14979*x14983))+((r10*x14981))+((r11*x14978))+(((-1.0)*x14982))+((r12*x14986))+((r11*x14974*x14977)));
evalcond[7]=((((-1.0)*r22*sj3*x14984))+x14975+((r20*x14974*x14978))+(((-1.0)*x14982))+((r20*x14977))+(((-1.0)*r21*x14981*x14983))+((r21*x14979)));
evalcond[8]=((((-1.0)*r11*x14981*x14983))+(((-1.0)*sj2*x14976))+(((-1.0)*r12*sj3*x14984))+((r11*x14979))+((r10*x14974*x14978))+(((-1.0)*x14980))+((r10*x14977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14987=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14987);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14987);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14988=(r01*sj5);
IkReal x14989=((1.0)*cj5*r00);
j4eval[0]=(x14988+(((-1.0)*x14989)));
j4eval[1]=((((-1.0)*cj3*x14989))+((cj3*x14988)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14990=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14990);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14990);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14991=(cj5*r00);
IkReal x14992=(r01*sj5);
j4eval[0]=(x14992+(((-1.0)*x14991)));
j4eval[1]=(((sj3*x14991))+(((-1.0)*sj3*x14992)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14993=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14993);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14993);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14994=((1.0)*r00);
CheckValue<IkReal> x14995=IKPowWithIntegerCheck(cj3,-1);
if(!x14995.valid){
continue;
}
CheckValue<IkReal> x14996=IKPowWithIntegerCheck(r22,-1);
if(!x14996.valid){
continue;
}
CheckValue<IkReal> x14997=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14994))),-1);
if(!x14997.valid){
continue;
}
if( IKabs(((x14995.value)*(x14996.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14997.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14994)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14995.value)*(x14996.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14997.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14994))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14995.value)*(x14996.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14997.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14994))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14998=IKsin(j4);
IkReal x14999=IKcos(j4);
IkReal x15000=(sj1*sj2);
IkReal x15001=(cj5*sj3);
IkReal x15002=(r11*sj5);
IkReal x15003=(cj3*cj5);
IkReal x15004=((1.0)*cj1);
IkReal x15005=(cj3*sj5);
IkReal x15006=(sj3*sj5);
IkReal x15007=(cj2*sj1);
IkReal x15008=(r01*sj5);
IkReal x15009=((1.0)*sj3);
IkReal x15010=(cj2*x15004);
IkReal x15011=(r10*x14999);
IkReal x15012=(r22*x14998);
IkReal x15013=(cj3*x14999);
IkReal x15014=((1.0)*cj5*x14998);
evalcond[0]=((-1.0)*r22*x14999);
evalcond[1]=(((cj3*x15012))+((cj1*sj2))+x15007);
evalcond[2]=((((-1.0)*r10*x15014))+((x14998*x15002)));
evalcond[3]=((-1.0)+((x14998*x15008))+(((-1.0)*r00*x15014)));
evalcond[4]=((((-1.0)*x15010))+x15000+(((-1.0)*x15009*x15012)));
evalcond[5]=(((r01*x15001))+((r00*x15006))+(((-1.0)*r00*x14999*x15003))+((r01*x14999*x15005)));
evalcond[6]=(((r01*x15003))+((r00*x15005))+((r00*x14999*x15001))+(((-1.0)*r01*x14999*x15006)));
evalcond[7]=((((-1.0)*x15010))+x15000+((r10*x15006))+(((-1.0)*x15003*x15011))+((r11*x15001))+((x15002*x15013)));
evalcond[8]=((((-1.0)*sj2*x15004))+(((-1.0)*x15007))+((r10*x15005))+((r11*x15003))+((x15001*x15011))+(((-1.0)*x14999*x15002*x15009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15015=((1.0)*cj3);
IkReal x15016=(cj5*r00);
IkReal x15017=(r01*sj5);
CheckValue<IkReal> x15018=IKPowWithIntegerCheck(((((-1.0)*x15016))+x15017),-1);
if(!x15018.valid){
continue;
}
CheckValue<IkReal> x15019=IKPowWithIntegerCheck((((sj3*x15016))+(((-1.0)*sj3*x15017))),-1);
if(!x15019.valid){
continue;
}
if( IKabs(x15018.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15019.value)*(((((-1.0)*r00*sj5*x15015))+(((-1.0)*cj5*r01*x15015)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15018.value)+IKsqr(((x15019.value)*(((((-1.0)*r00*sj5*x15015))+(((-1.0)*cj5*r01*x15015))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15018.value, ((x15019.value)*(((((-1.0)*r00*sj5*x15015))+(((-1.0)*cj5*r01*x15015))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15020=IKsin(j4);
IkReal x15021=IKcos(j4);
IkReal x15022=(sj1*sj2);
IkReal x15023=(cj5*sj3);
IkReal x15024=(r11*sj5);
IkReal x15025=(cj3*cj5);
IkReal x15026=((1.0)*cj1);
IkReal x15027=(cj3*sj5);
IkReal x15028=(sj3*sj5);
IkReal x15029=(cj2*sj1);
IkReal x15030=(r01*sj5);
IkReal x15031=((1.0)*sj3);
IkReal x15032=(cj2*x15026);
IkReal x15033=(r10*x15021);
IkReal x15034=(r22*x15020);
IkReal x15035=(cj3*x15021);
IkReal x15036=((1.0)*cj5*x15020);
evalcond[0]=((-1.0)*r22*x15021);
evalcond[1]=(((cj1*sj2))+x15029+((cj3*x15034)));
evalcond[2]=(((x15020*x15024))+(((-1.0)*r10*x15036)));
evalcond[3]=((-1.0)+((x15020*x15030))+(((-1.0)*r00*x15036)));
evalcond[4]=((((-1.0)*x15032))+(((-1.0)*x15031*x15034))+x15022);
evalcond[5]=(((r00*x15028))+((r01*x15021*x15027))+(((-1.0)*r00*x15021*x15025))+((r01*x15023)));
evalcond[6]=(((r00*x15027))+((r00*x15021*x15023))+((r01*x15025))+(((-1.0)*r01*x15021*x15028)));
evalcond[7]=((((-1.0)*x15032))+((x15024*x15035))+((r10*x15028))+x15022+((r11*x15023))+(((-1.0)*x15025*x15033)));
evalcond[8]=((((-1.0)*x15029))+((r10*x15027))+((x15023*x15033))+(((-1.0)*sj2*x15026))+((r11*x15025))+(((-1.0)*x15021*x15024*x15031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15037=((1.0)*sj3);
IkReal x15038=(r01*sj5);
IkReal x15039=((1.0)*cj5*r00);
CheckValue<IkReal> x15040=IKPowWithIntegerCheck(((((-1.0)*x15039))+x15038),-1);
if(!x15040.valid){
continue;
}
CheckValue<IkReal> x15041=IKPowWithIntegerCheck((((cj3*x15038))+(((-1.0)*cj3*x15039))),-1);
if(!x15041.valid){
continue;
}
if( IKabs(x15040.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15041.value)*(((((-1.0)*r00*sj5*x15037))+(((-1.0)*cj5*r01*x15037)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15040.value)+IKsqr(((x15041.value)*(((((-1.0)*r00*sj5*x15037))+(((-1.0)*cj5*r01*x15037))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15040.value, ((x15041.value)*(((((-1.0)*r00*sj5*x15037))+(((-1.0)*cj5*r01*x15037))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15042=IKsin(j4);
IkReal x15043=IKcos(j4);
IkReal x15044=(sj1*sj2);
IkReal x15045=(cj5*sj3);
IkReal x15046=(r11*sj5);
IkReal x15047=(cj3*cj5);
IkReal x15048=((1.0)*cj1);
IkReal x15049=(cj3*sj5);
IkReal x15050=(sj3*sj5);
IkReal x15051=(cj2*sj1);
IkReal x15052=(r01*sj5);
IkReal x15053=((1.0)*sj3);
IkReal x15054=(cj2*x15048);
IkReal x15055=(r10*x15043);
IkReal x15056=(r22*x15042);
IkReal x15057=(cj3*x15043);
IkReal x15058=((1.0)*cj5*x15042);
evalcond[0]=((-1.0)*r22*x15043);
evalcond[1]=(((cj1*sj2))+x15051+((cj3*x15056)));
evalcond[2]=((((-1.0)*r10*x15058))+((x15042*x15046)));
evalcond[3]=((-1.0)+((x15042*x15052))+(((-1.0)*r00*x15058)));
evalcond[4]=((((-1.0)*x15053*x15056))+x15044+(((-1.0)*x15054)));
evalcond[5]=((((-1.0)*r00*x15043*x15047))+((r01*x15045))+((r01*x15043*x15049))+((r00*x15050)));
evalcond[6]=(((r00*x15043*x15045))+(((-1.0)*r01*x15043*x15050))+((r00*x15049))+((r01*x15047)));
evalcond[7]=((((-1.0)*x15047*x15055))+((r11*x15045))+((r10*x15050))+((x15046*x15057))+x15044+(((-1.0)*x15054)));
evalcond[8]=((((-1.0)*sj2*x15048))+((x15045*x15055))+(((-1.0)*x15051))+((r11*x15047))+((r10*x15049))+(((-1.0)*x15043*x15046*x15053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15059=cj5*cj5;
IkReal x15060=(cj3*r20);
IkReal x15061=(r21*sj3);
IkReal x15062=((1.0)*cj3);
IkReal x15063=(r01*r21);
IkReal x15064=(r01*sj3);
IkReal x15065=(r00*sj5);
IkReal x15066=(cj5*r01*sj5);
IkReal x15067=((1.0)*x15059);
CheckValue<IkReal> x15068=IKPowWithIntegerCheck(IKsign((((x15060*x15066))+(((-1.0)*r00*x15060*x15067))+((cj3*x15059*x15063))+(((-1.0)*r02*r22*x15062))+((cj3*cj5*r21*x15065))+(((-1.0)*x15062*x15063)))),-1);
if(!x15068.valid){
continue;
}
CheckValue<IkReal> x15069 = IKatan2WithCheck(IkReal((((r22*sj3*x15065))+((cj5*r22*x15064)))),IkReal(((((-1.0)*cj5*r20*sj3*x15065))+((x15061*x15066))+((r00*x15061))+(((-1.0)*r00*x15061*x15067))+(((-1.0)*r20*x15064*x15067)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15068.value)))+(x15069.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15070=IKsin(j4);
IkReal x15071=IKcos(j4);
IkReal x15072=(sj1*sj2);
IkReal x15073=(r11*sj5);
IkReal x15074=(cj5*r10);
IkReal x15075=(cj5*r01);
IkReal x15076=(cj5*r00);
IkReal x15077=((1.0)*cj1);
IkReal x15078=(cj3*sj5);
IkReal x15079=(r21*sj5);
IkReal x15080=(cj5*sj3);
IkReal x15081=(sj3*sj5);
IkReal x15082=(cj2*sj1);
IkReal x15083=(r01*sj5);
IkReal x15084=(cj3*cj5);
IkReal x15085=(cj5*r20);
IkReal x15086=(cj2*x15077);
IkReal x15087=((1.0)*x15071);
IkReal x15088=((1.0)*x15070);
IkReal x15089=(cj3*x15071);
IkReal x15090=(sj3*x15071);
IkReal x15091=(cj3*x15070);
evalcond[0]=((((-1.0)*r22*x15087))+((x15070*x15079))+(((-1.0)*x15085*x15088)));
evalcond[1]=(((x15070*x15073))+(((-1.0)*r12*x15087))+(((-1.0)*x15074*x15088)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15087))+((x15070*x15083))+(((-1.0)*x15076*x15088)));
evalcond[3]=((((-1.0)*cj3*x15076*x15087))+((r01*x15071*x15078))+((sj3*x15075))+((r02*x15091))+((r00*x15081)));
evalcond[4]=(((r00*x15078))+((cj3*x15075))+((x15076*x15090))+(((-1.0)*r02*sj3*x15088))+(((-1.0)*r01*x15081*x15087)));
evalcond[5]=((((-1.0)*r20*x15084*x15087))+((cj1*sj2))+((r21*x15071*x15078))+x15082+((r21*x15080))+((r20*x15081))+((r22*x15091)));
evalcond[6]=((((-1.0)*x15086))+x15072+((r12*x15091))+(((-1.0)*cj3*x15074*x15087))+((x15073*x15089))+((r11*x15080))+((r10*x15081)));
evalcond[7]=((((-1.0)*x15086))+x15072+((r20*x15078))+((r21*x15084))+((r20*x15071*x15080))+(((-1.0)*r22*sj3*x15088))+(((-1.0)*sj3*x15079*x15087)));
evalcond[8]=(((x15074*x15090))+(((-1.0)*sj3*x15073*x15087))+(((-1.0)*sj2*x15077))+((r10*x15078))+(((-1.0)*r12*sj3*x15088))+((r11*x15084))+(((-1.0)*x15082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15092=((1.0)*cj5);
CheckValue<IkReal> x15093=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15092)))),-1);
if(!x15093.valid){
continue;
}
CheckValue<IkReal> x15094 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15093.value)))+(x15094.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15095=IKsin(j4);
IkReal x15096=IKcos(j4);
IkReal x15097=(sj1*sj2);
IkReal x15098=(r11*sj5);
IkReal x15099=(cj5*r10);
IkReal x15100=(cj5*r01);
IkReal x15101=(cj5*r00);
IkReal x15102=((1.0)*cj1);
IkReal x15103=(cj3*sj5);
IkReal x15104=(r21*sj5);
IkReal x15105=(cj5*sj3);
IkReal x15106=(sj3*sj5);
IkReal x15107=(cj2*sj1);
IkReal x15108=(r01*sj5);
IkReal x15109=(cj3*cj5);
IkReal x15110=(cj5*r20);
IkReal x15111=(cj2*x15102);
IkReal x15112=((1.0)*x15096);
IkReal x15113=((1.0)*x15095);
IkReal x15114=(cj3*x15096);
IkReal x15115=(sj3*x15096);
IkReal x15116=(cj3*x15095);
evalcond[0]=(((x15095*x15104))+(((-1.0)*x15110*x15113))+(((-1.0)*r22*x15112)));
evalcond[1]=((((-1.0)*r12*x15112))+((x15095*x15098))+(((-1.0)*x15099*x15113)));
evalcond[2]=((-1.0)+((x15095*x15108))+(((-1.0)*r02*x15112))+(((-1.0)*x15101*x15113)));
evalcond[3]=(((r00*x15106))+(((-1.0)*cj3*x15101*x15112))+((r01*x15096*x15103))+((sj3*x15100))+((r02*x15116)));
evalcond[4]=((((-1.0)*r02*sj3*x15113))+((r00*x15103))+((x15101*x15115))+(((-1.0)*r01*x15106*x15112))+((cj3*x15100)));
evalcond[5]=((((-1.0)*r20*x15109*x15112))+((cj1*sj2))+((r21*x15105))+x15107+((r20*x15106))+((r22*x15116))+((r21*x15096*x15103)));
evalcond[6]=((((-1.0)*x15111))+x15097+(((-1.0)*cj3*x15099*x15112))+((r10*x15106))+((r12*x15116))+((x15098*x15114))+((r11*x15105)));
evalcond[7]=(((r20*x15096*x15105))+(((-1.0)*sj3*x15104*x15112))+(((-1.0)*x15111))+((r21*x15109))+x15097+((r20*x15103))+(((-1.0)*r22*sj3*x15113)));
evalcond[8]=((((-1.0)*sj3*x15098*x15112))+((r10*x15103))+(((-1.0)*r12*sj3*x15113))+(((-1.0)*sj2*x15102))+(((-1.0)*x15107))+((x15099*x15115))+((r11*x15109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15117=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15117.valid){
continue;
}
CheckValue<IkReal> x15118 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15117.value)))+(x15118.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15119=IKsin(j4);
IkReal x15120=IKcos(j4);
IkReal x15121=(sj1*sj2);
IkReal x15122=(r11*sj5);
IkReal x15123=(cj5*r10);
IkReal x15124=(cj5*r01);
IkReal x15125=(cj5*r00);
IkReal x15126=((1.0)*cj1);
IkReal x15127=(cj3*sj5);
IkReal x15128=(r21*sj5);
IkReal x15129=(cj5*sj3);
IkReal x15130=(sj3*sj5);
IkReal x15131=(cj2*sj1);
IkReal x15132=(r01*sj5);
IkReal x15133=(cj3*cj5);
IkReal x15134=(cj5*r20);
IkReal x15135=(cj2*x15126);
IkReal x15136=((1.0)*x15120);
IkReal x15137=((1.0)*x15119);
IkReal x15138=(cj3*x15120);
IkReal x15139=(sj3*x15120);
IkReal x15140=(cj3*x15119);
evalcond[0]=((((-1.0)*x15134*x15137))+(((-1.0)*r22*x15136))+((x15119*x15128)));
evalcond[1]=((((-1.0)*x15123*x15137))+(((-1.0)*r12*x15136))+((x15119*x15122)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15136))+((x15119*x15132))+(((-1.0)*x15125*x15137)));
evalcond[3]=(((r01*x15120*x15127))+((r00*x15130))+((sj3*x15124))+(((-1.0)*cj3*x15125*x15136))+((r02*x15140)));
evalcond[4]=((((-1.0)*r02*sj3*x15137))+((r00*x15127))+(((-1.0)*r01*x15130*x15136))+((x15125*x15139))+((cj3*x15124)));
evalcond[5]=(((r22*x15140))+((r20*x15130))+((r21*x15129))+((cj1*sj2))+(((-1.0)*r20*x15133*x15136))+x15131+((r21*x15120*x15127)));
evalcond[6]=(((r12*x15140))+(((-1.0)*x15135))+x15121+(((-1.0)*cj3*x15123*x15136))+((r10*x15130))+((x15122*x15138))+((r11*x15129)));
evalcond[7]=(((r20*x15127))+((r21*x15133))+(((-1.0)*x15135))+(((-1.0)*r22*sj3*x15137))+x15121+((r20*x15120*x15129))+(((-1.0)*sj3*x15128*x15136)));
evalcond[8]=((((-1.0)*r12*sj3*x15137))+(((-1.0)*sj3*x15122*x15136))+(((-1.0)*x15131))+((r10*x15127))+((r11*x15133))+(((-1.0)*sj2*x15126))+((x15123*x15139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15141=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15141;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15141);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15142=((1.0)*cj5);
IkReal x15143=((((-1.0)*r21*x15142))+(((-1.0)*r20*sj5)));
j4eval[0]=x15143;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15142))+((r11*sj5))))));
j4eval[2]=IKsign(x15143);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15144=cj5*cj5;
IkReal x15145=(cj3*r01);
IkReal x15146=(cj5*sj5);
IkReal x15147=((1.0)*cj3);
IkReal x15148=(((cj3*r00*r21*x15146))+(((-1.0)*r02*r22*x15147))+((r20*x15145*x15146))+(((-1.0)*r21*x15145))+(((-1.0)*r00*r20*x15144*x15147))+((r21*x15144*x15145)));
j4eval[0]=x15148;
j4eval[1]=IKsign(x15148);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15149=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15149;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15149);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15150=((1.0)*cj5);
IkReal x15151=((((-1.0)*r21*x15150))+(((-1.0)*r20*sj5)));
j4eval[0]=x15151;
j4eval[1]=((IKabs(((((-1.0)*r10*x15150))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15151);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15152=cj5*cj5;
IkReal x15153=r01*r01;
IkReal x15154=(cj5*r00);
IkReal x15155=(r01*sj5);
IkReal x15156=(((x15152*(r00*r00)))+x15153+(((-1.0)*x15152*x15153))+(r02*r02)+(((-2.0)*x15154*x15155)));
j4eval[0]=x15156;
j4eval[1]=((IKabs(r02))+(IKabs((x15154+(((-1.0)*x15155))))));
j4eval[2]=IKsign(x15156);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15157=cj5*cj5;
IkReal x15158=r01*r01;
IkReal x15159=(r01*sj5);
IkReal x15160=(cj5*r00);
CheckValue<IkReal> x15161 = IKatan2WithCheck(IkReal((x15160+(((-1.0)*x15159)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15161.valid){
continue;
}
CheckValue<IkReal> x15162=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15157*x15158))+x15158+(((-2.0)*x15159*x15160))+((x15157*(r00*r00)))+(r02*r02))),-1);
if(!x15162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15161.value)+(((1.5707963267949)*(x15162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15163=IKsin(j4);
IkReal x15164=IKcos(j4);
IkReal x15165=(cj5*r10);
IkReal x15166=(r01*sj5);
IkReal x15167=(cj5*r00);
IkReal x15168=(cj5*r20);
IkReal x15169=((1.0)*x15164);
IkReal x15170=((1.0)*x15163);
IkReal x15171=(sj5*x15163);
evalcond[0]=((((-1.0)*r22*x15169))+((r21*x15171))+(((-1.0)*x15168*x15170)));
evalcond[1]=(((r11*x15171))+(((-1.0)*x15165*x15170))+(((-1.0)*r12*x15169)));
evalcond[2]=(((x15164*x15167))+(((-1.0)*x15166*x15169))+(((-1.0)*r02*x15170)));
evalcond[3]=((1.0)+((x15163*x15166))+(((-1.0)*r02*x15169))+(((-1.0)*x15167*x15170)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x15164*x15165))+(((-1.0)*r11*sj5*x15169))+(((-1.0)*r12*x15170)));
evalcond[5]=((((-1.0)*r21*sj5*x15169))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15164*x15168))+(((-1.0)*r22*x15170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15172=((1.0)*cj5);
CheckValue<IkReal> x15173=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15172))+(((-1.0)*r20*sj5)))),-1);
if(!x15173.valid){
continue;
}
CheckValue<IkReal> x15174 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15172)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15173.value)))+(x15174.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15175=IKsin(j4);
IkReal x15176=IKcos(j4);
IkReal x15177=(cj5*r10);
IkReal x15178=(r01*sj5);
IkReal x15179=(cj5*r00);
IkReal x15180=(cj5*r20);
IkReal x15181=((1.0)*x15176);
IkReal x15182=((1.0)*x15175);
IkReal x15183=(sj5*x15175);
evalcond[0]=((((-1.0)*x15180*x15182))+((r21*x15183))+(((-1.0)*r22*x15181)));
evalcond[1]=((((-1.0)*x15177*x15182))+((r11*x15183))+(((-1.0)*r12*x15181)));
evalcond[2]=((((-1.0)*r02*x15182))+((x15176*x15179))+(((-1.0)*x15178*x15181)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15181))+((x15175*x15178))+(((-1.0)*x15179*x15182)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x15181))+((x15176*x15177))+((cj1*sj2))+(((-1.0)*r12*x15182)));
evalcond[5]=((((-1.0)*r21*sj5*x15181))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15176*x15180))+(((-1.0)*r22*x15182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15184 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15184.valid){
continue;
}
CheckValue<IkReal> x15185=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15184.value)+(((1.5707963267949)*(x15185.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15186=IKsin(j4);
IkReal x15187=IKcos(j4);
IkReal x15188=(cj5*r10);
IkReal x15189=(r01*sj5);
IkReal x15190=(cj5*r00);
IkReal x15191=(cj5*r20);
IkReal x15192=((1.0)*x15187);
IkReal x15193=((1.0)*x15186);
IkReal x15194=(sj5*x15186);
evalcond[0]=(((r21*x15194))+(((-1.0)*r22*x15192))+(((-1.0)*x15191*x15193)));
evalcond[1]=(((r11*x15194))+(((-1.0)*r12*x15192))+(((-1.0)*x15188*x15193)));
evalcond[2]=(((x15187*x15190))+(((-1.0)*r02*x15193))+(((-1.0)*x15189*x15192)));
evalcond[3]=((1.0)+(((-1.0)*x15190*x15193))+((x15186*x15189))+(((-1.0)*r02*x15192)));
evalcond[4]=(((cj2*sj1))+((x15187*x15188))+(((-1.0)*r12*x15193))+((cj1*sj2))+(((-1.0)*r11*sj5*x15192)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15193))+((x15187*x15191))+(((-1.0)*r21*sj5*x15192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15195=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15195;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15195);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15196=((1.0)*cj5);
IkReal x15197=((((-1.0)*r21*x15196))+(((-1.0)*r20*sj5)));
j4eval[0]=x15197;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15196))+((r11*sj5))))));
j4eval[2]=IKsign(x15197);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15198=cj5*cj5;
IkReal x15199=r01*r01;
IkReal x15200=(r01*sj5);
IkReal x15201=(cj5*r00);
IkReal x15202=((((-1.0)*(r02*r02)))+(((2.0)*x15200*x15201))+(((-1.0)*x15198*(r00*r00)))+(((-1.0)*x15199))+((x15198*x15199)));
j4eval[0]=x15202;
j4eval[1]=IKsign(x15202);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x15201))+x15200))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15203=cj5*cj5;
IkReal x15204=r01*r01;
IkReal x15205=(r01*sj5);
IkReal x15206=(cj5*r00);
CheckValue<IkReal> x15207 = IKatan2WithCheck(IkReal(((((-1.0)*x15206))+x15205)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15207.valid){
continue;
}
CheckValue<IkReal> x15208=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15204))+(((2.0)*x15205*x15206))+((x15203*x15204))+(((-1.0)*(r02*r02)))+(((-1.0)*x15203*(r00*r00))))),-1);
if(!x15208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15207.value)+(((1.5707963267949)*(x15208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15209=IKcos(j4);
IkReal x15210=IKsin(j4);
IkReal x15211=(cj5*r00);
IkReal x15212=(cj5*r10);
IkReal x15213=(r21*sj5);
IkReal x15214=(cj5*r20);
IkReal x15215=((1.0)*x15209);
IkReal x15216=((1.0)*x15210);
IkReal x15217=(sj5*x15210);
IkReal x15218=(sj5*x15209);
evalcond[0]=(((r01*x15218))+(((-1.0)*x15211*x15215))+((r02*x15210)));
evalcond[1]=((((-1.0)*x15214*x15216))+((x15210*x15213))+(((-1.0)*r22*x15215)));
evalcond[2]=(((r11*x15217))+(((-1.0)*r12*x15215))+(((-1.0)*x15212*x15216)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15215))+((r01*x15217))+(((-1.0)*x15211*x15216)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x15218))+((r12*x15210))+(((-1.0)*x15212*x15215)));
evalcond[5]=((((-1.0)*x15214*x15215))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15210))+((x15209*x15213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15219=((1.0)*cj5);
CheckValue<IkReal> x15220=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15219))+(((-1.0)*r20*sj5)))),-1);
if(!x15220.valid){
continue;
}
CheckValue<IkReal> x15221 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15220.value)))+(x15221.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15222=IKcos(j4);
IkReal x15223=IKsin(j4);
IkReal x15224=(cj5*r00);
IkReal x15225=(cj5*r10);
IkReal x15226=(r21*sj5);
IkReal x15227=(cj5*r20);
IkReal x15228=((1.0)*x15222);
IkReal x15229=((1.0)*x15223);
IkReal x15230=(sj5*x15223);
IkReal x15231=(sj5*x15222);
evalcond[0]=(((r01*x15231))+(((-1.0)*x15224*x15228))+((r02*x15223)));
evalcond[1]=((((-1.0)*x15227*x15229))+((x15223*x15226))+(((-1.0)*r22*x15228)));
evalcond[2]=((((-1.0)*r12*x15228))+(((-1.0)*x15225*x15229))+((r11*x15230)));
evalcond[3]=((1.0)+((r01*x15230))+(((-1.0)*r02*x15228))+(((-1.0)*x15224*x15229)));
evalcond[4]=(((r12*x15223))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x15225*x15228))+((r11*x15231)));
evalcond[5]=(((x15222*x15226))+(((-1.0)*x15227*x15228))+((r22*x15223))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15232 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15232.valid){
continue;
}
CheckValue<IkReal> x15233=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15232.value)+(((1.5707963267949)*(x15233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15234=IKcos(j4);
IkReal x15235=IKsin(j4);
IkReal x15236=(cj5*r00);
IkReal x15237=(cj5*r10);
IkReal x15238=(r21*sj5);
IkReal x15239=(cj5*r20);
IkReal x15240=((1.0)*x15234);
IkReal x15241=((1.0)*x15235);
IkReal x15242=(sj5*x15235);
IkReal x15243=(sj5*x15234);
evalcond[0]=(((r02*x15235))+((r01*x15243))+(((-1.0)*x15236*x15240)));
evalcond[1]=((((-1.0)*x15239*x15241))+(((-1.0)*r22*x15240))+((x15235*x15238)));
evalcond[2]=((((-1.0)*x15237*x15241))+(((-1.0)*r12*x15240))+((r11*x15242)));
evalcond[3]=((1.0)+((r01*x15242))+(((-1.0)*r02*x15240))+(((-1.0)*x15236*x15241)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x15237*x15240))+((cj1*sj2))+((r12*x15235))+((r11*x15243)));
evalcond[5]=(((x15234*x15238))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15239*x15240))+((r22*x15235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15245 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15245)==0){
continue;
}
IkReal x15244=pow(x15245,-0.5);
CheckValue<IkReal> x15246 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15246.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15246.value));
IkReal gconst61=((-1.0)*r11*x15244);
IkReal gconst62=(r10*x15244);
CheckValue<IkReal> x15247 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15247.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15247.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15250 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15250.valid){
continue;
}
IkReal x15248=((-1.0)*(x15250.value));
IkReal x15249=x15244;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15248;
IkReal gconst60=x15248;
IkReal gconst61=((-1.0)*r11*x15249);
IkReal gconst62=(r10*x15249);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15253 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15253.valid){
continue;
}
IkReal x15251=((-1.0)*(x15253.value));
IkReal x15252=x15244;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15251;
IkReal gconst60=x15251;
IkReal gconst61=((-1.0)*r11*x15252);
IkReal gconst62=(r10*x15252);
CheckValue<IkReal> x15261=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15261.valid){
continue;
}
IkReal x15254=x15261.value;
IkReal x15255=(sj3*x15254);
IkReal x15256=(r20*x15255);
IkReal x15257=(r00*x15255);
IkReal x15258=(r01*x15255);
IkReal x15259=(r21*x15255);
IkReal x15260=(r10*r11*x15255);
j4eval[0]=IKsign((((r00*x15256*(r10*r10)))+((r10*r11*r21*x15257))+((r01*r10*r11*x15256))+((r21*x15258*(r11*r11)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15262=gconst61*gconst61;
IkReal x15263=gconst62*gconst62;
IkReal x15264=(cj3*r01);
IkReal x15265=(r22*sj3);
IkReal x15266=(gconst61*r00);
IkReal x15267=((1.0)*cj3);
IkReal x15268=(gconst62*r01);
IkReal x15269=((1.0)*sj3);
IkReal x15270=(gconst61*gconst62*r20);
IkReal x15271=(r21*x15262);
IkReal x15272=(r20*x15263);
CheckValue<IkReal> x15273=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15264*x15271))+((x15264*x15270))+((cj3*gconst62*r21*x15266))+(((-1.0)*r02*r22*x15267))+(((-1.0)*r00*x15267*x15272)))),-1);
if(!x15273.valid){
continue;
}
CheckValue<IkReal> x15274 = IKatan2WithCheck(IkReal((((x15265*x15266))+((x15265*x15268)))),IkReal((((r00*sj3*x15271))+(((-1.0)*r01*x15269*x15272))+(((-1.0)*gconst62*r20*x15266*x15269))+((gconst61*r21*sj3*x15268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15273.value)))+(x15274.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15275=IKsin(j4);
IkReal x15276=IKcos(j4);
IkReal x15277=(cj2*sj1);
IkReal x15278=(cj1*sj2);
IkReal x15279=(gconst61*sj3);
IkReal x15280=(cj3*gconst61);
IkReal x15281=(cj3*gconst62);
IkReal x15282=(sj1*sj2);
IkReal x15283=(gconst62*sj3);
IkReal x15284=(cj1*cj2);
IkReal x15285=((1.0)*x15276);
IkReal x15286=((1.0)*x15275);
IkReal x15287=(gconst61*x15275);
IkReal x15288=(cj3*x15275);
IkReal x15289=(x15277+x15278);
evalcond[0]=((((-1.0)*gconst62*r20*x15286))+(((-1.0)*r22*x15285))+((r21*x15287)));
evalcond[1]=((((-1.0)*r12*x15285))+((r11*x15287))+(((-1.0)*gconst62*r10*x15286)));
evalcond[2]=((1.0)+((r01*x15287))+(((-1.0)*gconst62*r00*x15286))+(((-1.0)*r02*x15285)));
evalcond[3]=(((r01*x15283))+((r02*x15288))+((r01*x15276*x15280))+(((-1.0)*r00*x15281*x15285))+((r00*x15279)));
evalcond[4]=(((r01*x15281))+((r00*x15280))+(((-1.0)*r02*sj3*x15286))+(((-1.0)*r01*x15279*x15285))+((r00*x15276*x15283)));
evalcond[5]=(((r22*x15288))+x15289+((r20*x15279))+((r21*x15276*x15280))+(((-1.0)*r20*x15281*x15285))+((r21*x15283)));
evalcond[6]=((((-1.0)*r10*x15281*x15285))+x15284+((r11*x15276*x15280))+((r10*x15279))+((r11*x15283))+((r12*x15288))+(((-1.0)*x15282)));
evalcond[7]=((((-1.0)*r11*x15279*x15285))+(((-1.0)*r12*sj3*x15286))+x15289+((r10*x15280))+((r11*x15281))+((r10*x15276*x15283)));
evalcond[8]=((((-1.0)*r22*sj3*x15286))+x15282+(((-1.0)*r21*x15279*x15285))+((r20*x15280))+((r20*x15276*x15283))+(((-1.0)*x15284))+((r21*x15281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15290=gconst61*gconst61;
IkReal x15291=gconst62*gconst62;
IkReal x15292=(cj3*r22);
IkReal x15293=(gconst62*r01);
IkReal x15294=(gconst61*r00);
IkReal x15295=((1.0)*r20);
IkReal x15296=(cj3*r21);
IkReal x15297=(r21*sj3);
CheckValue<IkReal> x15298=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x15291))+(((-1.0)*gconst62*x15294*x15297))+(((-1.0)*gconst61*sj3*x15293*x15295))+((r01*x15290*x15297))+((r02*r22*sj3)))),-1);
if(!x15298.valid){
continue;
}
CheckValue<IkReal> x15299 = IKatan2WithCheck(IkReal((((x15292*x15294))+((x15292*x15293)))),IkReal(((((-1.0)*cj3*r01*x15291*x15295))+(((-1.0)*cj3*gconst62*x15294*x15295))+((gconst61*x15293*x15296))+((r00*x15290*x15296)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15298.value)))+(x15299.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15300=IKsin(j4);
IkReal x15301=IKcos(j4);
IkReal x15302=(cj2*sj1);
IkReal x15303=(cj1*sj2);
IkReal x15304=(gconst61*sj3);
IkReal x15305=(cj3*gconst61);
IkReal x15306=(cj3*gconst62);
IkReal x15307=(sj1*sj2);
IkReal x15308=(gconst62*sj3);
IkReal x15309=(cj1*cj2);
IkReal x15310=((1.0)*x15301);
IkReal x15311=((1.0)*x15300);
IkReal x15312=(gconst61*x15300);
IkReal x15313=(cj3*x15300);
IkReal x15314=(x15302+x15303);
evalcond[0]=((((-1.0)*gconst62*r20*x15311))+((r21*x15312))+(((-1.0)*r22*x15310)));
evalcond[1]=(((r11*x15312))+(((-1.0)*gconst62*r10*x15311))+(((-1.0)*r12*x15310)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15311))+((r01*x15312))+(((-1.0)*r02*x15310)));
evalcond[3]=(((r00*x15304))+(((-1.0)*r00*x15306*x15310))+((r01*x15308))+((r02*x15313))+((r01*x15301*x15305)));
evalcond[4]=(((r00*x15305))+((r00*x15301*x15308))+((r01*x15306))+(((-1.0)*r01*x15304*x15310))+(((-1.0)*r02*sj3*x15311)));
evalcond[5]=(((r20*x15304))+((r21*x15308))+x15314+((r22*x15313))+((r21*x15301*x15305))+(((-1.0)*r20*x15306*x15310)));
evalcond[6]=(((r12*x15313))+(((-1.0)*x15307))+(((-1.0)*r10*x15306*x15310))+x15309+((r11*x15301*x15305))+((r10*x15304))+((r11*x15308)));
evalcond[7]=(((r10*x15301*x15308))+(((-1.0)*r11*x15304*x15310))+x15314+(((-1.0)*r12*sj3*x15311))+((r10*x15305))+((r11*x15306)));
evalcond[8]=(((r20*x15305))+(((-1.0)*x15309))+((r21*x15306))+(((-1.0)*r21*x15304*x15310))+x15307+(((-1.0)*r22*sj3*x15311))+((r20*x15301*x15308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15315=((1.0)*gconst62);
CheckValue<IkReal> x15316=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x15315)))),-1);
if(!x15316.valid){
continue;
}
CheckValue<IkReal> x15317 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst61*r11))+(((-1.0)*r10*x15315)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15316.value)))+(x15317.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15318=IKsin(j4);
IkReal x15319=IKcos(j4);
IkReal x15320=(cj2*sj1);
IkReal x15321=(cj1*sj2);
IkReal x15322=(gconst61*sj3);
IkReal x15323=(cj3*gconst61);
IkReal x15324=(cj3*gconst62);
IkReal x15325=(sj1*sj2);
IkReal x15326=(gconst62*sj3);
IkReal x15327=(cj1*cj2);
IkReal x15328=((1.0)*x15319);
IkReal x15329=((1.0)*x15318);
IkReal x15330=(gconst61*x15318);
IkReal x15331=(cj3*x15318);
IkReal x15332=(x15320+x15321);
evalcond[0]=((((-1.0)*gconst62*r20*x15329))+((r21*x15330))+(((-1.0)*r22*x15328)));
evalcond[1]=(((r11*x15330))+(((-1.0)*gconst62*r10*x15329))+(((-1.0)*r12*x15328)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15329))+((r01*x15330))+(((-1.0)*r02*x15328)));
evalcond[3]=(((r01*x15319*x15323))+((r00*x15322))+((r01*x15326))+(((-1.0)*r00*x15324*x15328))+((r02*x15331)));
evalcond[4]=(((r00*x15323))+(((-1.0)*r01*x15322*x15328))+((r01*x15324))+((r00*x15319*x15326))+(((-1.0)*r02*sj3*x15329)));
evalcond[5]=(((r21*x15319*x15323))+(((-1.0)*r20*x15324*x15328))+x15332+((r22*x15331))+((r21*x15326))+((r20*x15322)));
evalcond[6]=(((r12*x15331))+((r11*x15326))+(((-1.0)*x15325))+((r11*x15319*x15323))+(((-1.0)*r10*x15324*x15328))+x15327+((r10*x15322)));
evalcond[7]=(((r11*x15324))+((r10*x15319*x15326))+x15332+(((-1.0)*r12*sj3*x15329))+((r10*x15323))+(((-1.0)*r11*x15322*x15328)));
evalcond[8]=((((-1.0)*x15327))+x15325+((r20*x15319*x15326))+(((-1.0)*r21*x15322*x15328))+(((-1.0)*r22*sj3*x15329))+((r21*x15324))+((r20*x15323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15334 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15334)==0){
continue;
}
IkReal x15333=pow(x15334,-0.5);
CheckValue<IkReal> x15335 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15335.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15335.value))));
IkReal gconst64=((1.0)*r11*x15333);
IkReal gconst65=((-1.0)*r10*x15333);
CheckValue<IkReal> x15336 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15336.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15336.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15339 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15339.valid){
continue;
}
IkReal x15337=((1.0)*(x15339.value));
IkReal x15338=x15333;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15337)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15337)));
IkReal gconst64=((1.0)*r11*x15338);
IkReal gconst65=((-1.0)*r10*x15338);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15340=gconst64*gconst64;
IkReal x15341=gconst65*gconst65;
IkReal x15342=(gconst65*r01);
IkReal x15343=(cj3*r22);
IkReal x15344=(gconst64*r00);
IkReal x15345=(cj3*r21);
IkReal x15346=((1.0)*gconst64*sj3);
IkReal x15347=((1.0)*cj3*r20);
CheckValue<IkReal> x15348=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x15341))+(((-1.0)*gconst65*r21*sj3*x15344))+(((-1.0)*r20*x15342*x15346))+((r01*r21*sj3*x15340))+((r02*r22*sj3)))),-1);
if(!x15348.valid){
continue;
}
CheckValue<IkReal> x15349 = IKatan2WithCheck(IkReal((((x15342*x15343))+((x15343*x15344)))),IkReal((((r00*x15340*x15345))+(((-1.0)*gconst65*x15344*x15347))+(((-1.0)*r01*x15341*x15347))+((gconst64*x15342*x15345)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15348.value)))+(x15349.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15350=IKsin(j4);
IkReal x15351=IKcos(j4);
IkReal x15352=(cj2*sj1);
IkReal x15353=(cj1*sj2);
IkReal x15354=(cj3*gconst64);
IkReal x15355=(gconst65*r21);
IkReal x15356=(sj1*sj2);
IkReal x15357=(gconst65*sj3);
IkReal x15358=(gconst64*sj3);
IkReal x15359=(cj3*gconst65);
IkReal x15360=(cj1*cj2);
IkReal x15361=((1.0)*x15351);
IkReal x15362=((1.0)*x15350);
IkReal x15363=(cj3*x15350);
IkReal x15364=(gconst64*x15350);
IkReal x15365=(x15353+x15352);
evalcond[0]=((((-1.0)*r22*x15361))+(((-1.0)*gconst65*r20*x15362))+((r21*x15364)));
evalcond[1]=((((-1.0)*r12*x15361))+((r11*x15364))+(((-1.0)*gconst65*r10*x15362)));
evalcond[2]=((1.0)+(((-1.0)*gconst65*r00*x15362))+(((-1.0)*r02*x15361))+((r01*x15364)));
evalcond[3]=((((-1.0)*r00*x15359*x15361))+((r02*x15363))+((r01*x15357))+((r00*x15358))+((r01*x15351*x15354)));
evalcond[4]=((((-1.0)*r01*x15358*x15361))+((r00*x15351*x15357))+(((-1.0)*r02*sj3*x15362))+((r01*x15359))+((r00*x15354)));
evalcond[5]=(((r22*x15363))+x15365+((r20*x15358))+((sj3*x15355))+((r21*x15351*x15354))+(((-1.0)*r20*x15359*x15361)));
evalcond[6]=(((r10*x15358))+((r12*x15363))+((r11*x15351*x15354))+x15360+((r11*x15357))+(((-1.0)*x15356))+(((-1.0)*r10*x15359*x15361)));
evalcond[7]=((((-1.0)*r12*sj3*x15362))+(((-1.0)*r11*x15358*x15361))+((r10*x15354))+x15365+((r11*x15359))+((r10*x15351*x15357)));
evalcond[8]=((((-1.0)*r21*x15358*x15361))+(((-1.0)*r22*sj3*x15362))+((cj3*x15355))+x15356+((r20*x15351*x15357))+((r20*x15354))+(((-1.0)*x15360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15366=((1.0)*gconst65);
CheckValue<IkReal> x15367=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r20))+(((-1.0)*r21*x15366)))),-1);
if(!x15367.valid){
continue;
}
CheckValue<IkReal> x15368 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15366))+((gconst64*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15367.value)))+(x15368.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15369=IKsin(j4);
IkReal x15370=IKcos(j4);
IkReal x15371=(cj2*sj1);
IkReal x15372=(cj1*sj2);
IkReal x15373=(cj3*gconst64);
IkReal x15374=(gconst65*r21);
IkReal x15375=(sj1*sj2);
IkReal x15376=(gconst65*sj3);
IkReal x15377=(gconst64*sj3);
IkReal x15378=(cj3*gconst65);
IkReal x15379=(cj1*cj2);
IkReal x15380=((1.0)*x15370);
IkReal x15381=((1.0)*x15369);
IkReal x15382=(cj3*x15369);
IkReal x15383=(gconst64*x15369);
IkReal x15384=(x15372+x15371);
evalcond[0]=(((r21*x15383))+(((-1.0)*r22*x15380))+(((-1.0)*gconst65*r20*x15381)));
evalcond[1]=(((r11*x15383))+(((-1.0)*r12*x15380))+(((-1.0)*gconst65*r10*x15381)));
evalcond[2]=((1.0)+((r01*x15383))+(((-1.0)*r02*x15380))+(((-1.0)*gconst65*r00*x15381)));
evalcond[3]=((((-1.0)*r00*x15378*x15380))+((r00*x15377))+((r01*x15376))+((r01*x15370*x15373))+((r02*x15382)));
evalcond[4]=(((r00*x15373))+((r01*x15378))+(((-1.0)*r01*x15377*x15380))+(((-1.0)*r02*sj3*x15381))+((r00*x15370*x15376)));
evalcond[5]=(((r21*x15370*x15373))+((r22*x15382))+((r20*x15377))+((sj3*x15374))+x15384+(((-1.0)*r20*x15378*x15380)));
evalcond[6]=((((-1.0)*x15375))+((r12*x15382))+x15379+(((-1.0)*r10*x15378*x15380))+((r10*x15377))+((r11*x15370*x15373))+((r11*x15376)));
evalcond[7]=((((-1.0)*r12*sj3*x15381))+x15384+((r10*x15370*x15376))+((r10*x15373))+(((-1.0)*r11*x15377*x15380))+((r11*x15378)));
evalcond[8]=(((r20*x15373))+(((-1.0)*r21*x15377*x15380))+(((-1.0)*x15379))+x15375+((r20*x15370*x15376))+((cj3*x15374))+(((-1.0)*r22*sj3*x15381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15385=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15385);
rxp0_2=(py*r00);
rxp1_0=(r21*x15385);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15386=(r01*sj5);
IkReal x15387=((1.0)*cj5*r00);
j4eval[0]=(x15386+(((-1.0)*x15387)));
j4eval[1]=(((cj3*x15386))+(((-1.0)*cj3*x15387)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15388=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15388);
rxp0_2=(py*r00);
rxp1_0=(r21*x15388);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15389=(cj5*r00);
IkReal x15390=(r01*sj5);
j4eval[0]=(x15390+(((-1.0)*x15389)));
j4eval[1]=(((sj3*x15389))+(((-1.0)*sj3*x15390)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15391=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15391);
rxp0_2=(py*r00);
rxp1_0=(r21*x15391);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15392=((1.0)*r00);
CheckValue<IkReal> x15393=IKPowWithIntegerCheck(cj3,-1);
if(!x15393.valid){
continue;
}
CheckValue<IkReal> x15394=IKPowWithIntegerCheck(r12,-1);
if(!x15394.valid){
continue;
}
CheckValue<IkReal> x15395=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15392))),-1);
if(!x15395.valid){
continue;
}
if( IKabs(((x15393.value)*(x15394.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15395.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15392)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15393.value)*(x15394.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15395.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15392))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15393.value)*(x15394.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15395.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15392))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15396=IKsin(j4);
IkReal x15397=IKcos(j4);
IkReal x15398=(cj2*sj1);
IkReal x15399=(cj1*sj2);
IkReal x15400=(sj1*sj2);
IkReal x15401=(cj5*sj3);
IkReal x15402=(cj3*cj5);
IkReal x15403=(r21*sj5);
IkReal x15404=(cj1*cj2);
IkReal x15405=(r00*sj5);
IkReal x15406=(r01*sj5);
IkReal x15407=(r20*sj5);
IkReal x15408=((1.0)*x15396);
IkReal x15409=(r20*x15397);
IkReal x15410=(r00*x15397);
IkReal x15411=(cj3*x15397);
IkReal x15412=(x15399+x15398);
IkReal x15413=((1.0)*sj3*x15397);
evalcond[0]=((-1.0)*r12*x15397);
evalcond[1]=((((-1.0)*cj5*r20*x15408))+((x15396*x15403)));
evalcond[2]=((((-1.0)*x15400))+x15404+((cj3*r12*x15396)));
evalcond[3]=(x15412+(((-1.0)*r12*sj3*x15408)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15408))+((x15396*x15406)));
evalcond[5]=((((-1.0)*x15402*x15410))+((sj3*x15405))+((r01*x15401))+((x15406*x15411)));
evalcond[6]=(((x15401*x15410))+((r01*x15402))+(((-1.0)*x15406*x15413))+((cj3*x15405)));
evalcond[7]=(((x15403*x15411))+(((-1.0)*x15402*x15409))+((sj3*x15407))+x15412+((r21*x15401)));
evalcond[8]=(((x15401*x15409))+(((-1.0)*x15404))+x15400+((r21*x15402))+(((-1.0)*x15403*x15413))+((cj3*x15407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15414=((1.0)*r01);
IkReal x15415=(cj5*r00);
CheckValue<IkReal> x15416=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x15415))),-1);
if(!x15416.valid){
continue;
}
CheckValue<IkReal> x15417=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x15414))+((sj3*x15415))),-1);
if(!x15417.valid){
continue;
}
if( IKabs(((-1.0)*(x15416.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15417.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15414)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15416.value)))+IKsqr(((x15417.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15414))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15416.value)), ((x15417.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15414))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15418=IKsin(j4);
IkReal x15419=IKcos(j4);
IkReal x15420=(cj2*sj1);
IkReal x15421=(cj1*sj2);
IkReal x15422=(sj1*sj2);
IkReal x15423=(cj5*sj3);
IkReal x15424=(cj3*cj5);
IkReal x15425=(r21*sj5);
IkReal x15426=(cj1*cj2);
IkReal x15427=(r00*sj5);
IkReal x15428=(r01*sj5);
IkReal x15429=(r20*sj5);
IkReal x15430=((1.0)*x15418);
IkReal x15431=(r20*x15419);
IkReal x15432=(r00*x15419);
IkReal x15433=(cj3*x15419);
IkReal x15434=(x15421+x15420);
IkReal x15435=((1.0)*sj3*x15419);
evalcond[0]=((-1.0)*r12*x15419);
evalcond[1]=(((x15418*x15425))+(((-1.0)*cj5*r20*x15430)));
evalcond[2]=((((-1.0)*x15422))+x15426+((cj3*r12*x15418)));
evalcond[3]=((((-1.0)*r12*sj3*x15430))+x15434);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15430))+((x15418*x15428)));
evalcond[5]=(((sj3*x15427))+(((-1.0)*x15424*x15432))+((x15428*x15433))+((r01*x15423)));
evalcond[6]=((((-1.0)*x15428*x15435))+((x15423*x15432))+((cj3*x15427))+((r01*x15424)));
evalcond[7]=(((x15425*x15433))+((sj3*x15429))+((r21*x15423))+(((-1.0)*x15424*x15431))+x15434);
evalcond[8]=(((r21*x15424))+(((-1.0)*x15425*x15435))+((x15423*x15431))+(((-1.0)*x15426))+((cj3*x15429))+x15422);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15436=((1.0)*r00);
IkReal x15437=(r01*sj5);
CheckValue<IkReal> x15438=IKPowWithIntegerCheck(((((-1.0)*cj5*x15436))+x15437),-1);
if(!x15438.valid){
continue;
}
CheckValue<IkReal> x15439=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x15436))+((cj3*x15437))),-1);
if(!x15439.valid){
continue;
}
if( IKabs(((-1.0)*(x15438.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15439.value)*(((((-1.0)*sj3*sj5*x15436))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15438.value)))+IKsqr(((x15439.value)*(((((-1.0)*sj3*sj5*x15436))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15438.value)), ((x15439.value)*(((((-1.0)*sj3*sj5*x15436))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15440=IKsin(j4);
IkReal x15441=IKcos(j4);
IkReal x15442=(cj2*sj1);
IkReal x15443=(cj1*sj2);
IkReal x15444=(sj1*sj2);
IkReal x15445=(cj5*sj3);
IkReal x15446=(cj3*cj5);
IkReal x15447=(r21*sj5);
IkReal x15448=(cj1*cj2);
IkReal x15449=(r00*sj5);
IkReal x15450=(r01*sj5);
IkReal x15451=(r20*sj5);
IkReal x15452=((1.0)*x15440);
IkReal x15453=(r20*x15441);
IkReal x15454=(r00*x15441);
IkReal x15455=(cj3*x15441);
IkReal x15456=(x15443+x15442);
IkReal x15457=((1.0)*sj3*x15441);
evalcond[0]=((-1.0)*r12*x15441);
evalcond[1]=((((-1.0)*cj5*r20*x15452))+((x15440*x15447)));
evalcond[2]=(x15448+(((-1.0)*x15444))+((cj3*r12*x15440)));
evalcond[3]=(x15456+(((-1.0)*r12*sj3*x15452)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15452))+((x15440*x15450)));
evalcond[5]=(((sj3*x15449))+(((-1.0)*x15446*x15454))+((r01*x15445))+((x15450*x15455)));
evalcond[6]=(((r01*x15446))+((x15445*x15454))+(((-1.0)*x15450*x15457))+((cj3*x15449)));
evalcond[7]=((((-1.0)*x15446*x15453))+((sj3*x15451))+x15456+((x15447*x15455))+((r21*x15445)));
evalcond[8]=(((cj3*x15451))+(((-1.0)*x15447*x15457))+x15444+((x15445*x15453))+(((-1.0)*x15448))+((r21*x15446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15458=cj5*cj5;
IkReal x15459=(cj3*r20);
IkReal x15460=(r21*sj3);
IkReal x15461=((1.0)*cj3);
IkReal x15462=(r01*r21);
IkReal x15463=(r01*sj3);
IkReal x15464=(r00*sj5);
IkReal x15465=(cj5*r01*sj5);
IkReal x15466=((1.0)*x15458);
CheckValue<IkReal> x15467=IKPowWithIntegerCheck(IKsign((((x15459*x15465))+(((-1.0)*r02*r22*x15461))+((cj3*cj5*r21*x15464))+(((-1.0)*r00*x15459*x15466))+(((-1.0)*x15461*x15462))+((cj3*x15458*x15462)))),-1);
if(!x15467.valid){
continue;
}
CheckValue<IkReal> x15468 = IKatan2WithCheck(IkReal((((cj5*r22*x15463))+((r22*sj3*x15464)))),IkReal(((((-1.0)*r20*x15463*x15466))+(((-1.0)*cj5*r20*sj3*x15464))+((x15460*x15465))+(((-1.0)*r00*x15460*x15466))+((r00*x15460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15467.value)))+(x15468.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15469=IKsin(j4);
IkReal x15470=IKcos(j4);
IkReal x15471=(cj2*sj1);
IkReal x15472=(cj1*sj2);
IkReal x15473=(r11*sj5);
IkReal x15474=(cj5*r10);
IkReal x15475=(sj1*sj2);
IkReal x15476=(cj5*r01);
IkReal x15477=(cj5*r00);
IkReal x15478=(cj3*sj5);
IkReal x15479=(r21*sj5);
IkReal x15480=(cj1*cj2);
IkReal x15481=(cj5*sj3);
IkReal x15482=(sj3*sj5);
IkReal x15483=(r01*sj5);
IkReal x15484=(cj3*cj5);
IkReal x15485=(cj5*r20);
IkReal x15486=((1.0)*x15470);
IkReal x15487=((1.0)*x15469);
IkReal x15488=(cj3*x15470);
IkReal x15489=(sj3*x15470);
IkReal x15490=(cj3*x15469);
IkReal x15491=(x15471+x15472);
evalcond[0]=(((x15469*x15479))+(((-1.0)*x15485*x15487))+(((-1.0)*r22*x15486)));
evalcond[1]=((((-1.0)*r12*x15486))+((x15469*x15473))+(((-1.0)*x15474*x15487)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15486))+((x15469*x15483))+(((-1.0)*x15477*x15487)));
evalcond[3]=(((r01*x15470*x15478))+(((-1.0)*cj3*x15477*x15486))+((r02*x15490))+((sj3*x15476))+((r00*x15482)));
evalcond[4]=(((r00*x15478))+(((-1.0)*r01*x15482*x15486))+((x15477*x15489))+(((-1.0)*r02*sj3*x15487))+((cj3*x15476)));
evalcond[5]=(((r21*x15470*x15478))+((r21*x15481))+(((-1.0)*r20*x15484*x15486))+x15491+((r22*x15490))+((r20*x15482)));
evalcond[6]=(((r12*x15490))+((x15473*x15488))+((r10*x15482))+(((-1.0)*x15475))+(((-1.0)*cj3*x15474*x15486))+((r11*x15481))+x15480);
evalcond[7]=(((x15474*x15489))+(((-1.0)*r12*sj3*x15487))+((r11*x15484))+x15491+(((-1.0)*sj3*x15473*x15486))+((r10*x15478)));
evalcond[8]=(((r21*x15484))+(((-1.0)*r22*sj3*x15487))+x15475+(((-1.0)*x15480))+(((-1.0)*sj3*x15479*x15486))+((r20*x15478))+((r20*x15470*x15481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15492=((1.0)*cj5);
CheckValue<IkReal> x15493=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15492))+(((-1.0)*r20*sj5)))),-1);
if(!x15493.valid){
continue;
}
CheckValue<IkReal> x15494 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15492))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15493.value)))+(x15494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15495=IKsin(j4);
IkReal x15496=IKcos(j4);
IkReal x15497=(cj2*sj1);
IkReal x15498=(cj1*sj2);
IkReal x15499=(r11*sj5);
IkReal x15500=(cj5*r10);
IkReal x15501=(sj1*sj2);
IkReal x15502=(cj5*r01);
IkReal x15503=(cj5*r00);
IkReal x15504=(cj3*sj5);
IkReal x15505=(r21*sj5);
IkReal x15506=(cj1*cj2);
IkReal x15507=(cj5*sj3);
IkReal x15508=(sj3*sj5);
IkReal x15509=(r01*sj5);
IkReal x15510=(cj3*cj5);
IkReal x15511=(cj5*r20);
IkReal x15512=((1.0)*x15496);
IkReal x15513=((1.0)*x15495);
IkReal x15514=(cj3*x15496);
IkReal x15515=(sj3*x15496);
IkReal x15516=(cj3*x15495);
IkReal x15517=(x15497+x15498);
evalcond[0]=((((-1.0)*r22*x15512))+(((-1.0)*x15511*x15513))+((x15495*x15505)));
evalcond[1]=((((-1.0)*r12*x15512))+((x15495*x15499))+(((-1.0)*x15500*x15513)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15512))+(((-1.0)*x15503*x15513))+((x15495*x15509)));
evalcond[3]=(((r00*x15508))+(((-1.0)*cj3*x15503*x15512))+((r02*x15516))+((sj3*x15502))+((r01*x15496*x15504)));
evalcond[4]=(((x15503*x15515))+((r00*x15504))+(((-1.0)*r01*x15508*x15512))+((cj3*x15502))+(((-1.0)*r02*sj3*x15513)));
evalcond[5]=((((-1.0)*r20*x15510*x15512))+((r21*x15507))+x15517+((r20*x15508))+((r22*x15516))+((r21*x15496*x15504)));
evalcond[6]=(((r10*x15508))+((x15499*x15514))+((r11*x15507))+(((-1.0)*cj3*x15500*x15512))+((r12*x15516))+(((-1.0)*x15501))+x15506);
evalcond[7]=((((-1.0)*sj3*x15499*x15512))+((r10*x15504))+((r11*x15510))+(((-1.0)*r12*sj3*x15513))+((x15500*x15515))+x15517);
evalcond[8]=((((-1.0)*r22*sj3*x15513))+((r20*x15496*x15507))+((r21*x15510))+(((-1.0)*x15506))+x15501+(((-1.0)*sj3*x15505*x15512))+((r20*x15504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15518 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15518.valid){
continue;
}
CheckValue<IkReal> x15519=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15518.value)+(((1.5707963267949)*(x15519.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15520=IKsin(j4);
IkReal x15521=IKcos(j4);
IkReal x15522=(cj2*sj1);
IkReal x15523=(cj1*sj2);
IkReal x15524=(r11*sj5);
IkReal x15525=(cj5*r10);
IkReal x15526=(sj1*sj2);
IkReal x15527=(cj5*r01);
IkReal x15528=(cj5*r00);
IkReal x15529=(cj3*sj5);
IkReal x15530=(r21*sj5);
IkReal x15531=(cj1*cj2);
IkReal x15532=(cj5*sj3);
IkReal x15533=(sj3*sj5);
IkReal x15534=(r01*sj5);
IkReal x15535=(cj3*cj5);
IkReal x15536=(cj5*r20);
IkReal x15537=((1.0)*x15521);
IkReal x15538=((1.0)*x15520);
IkReal x15539=(cj3*x15521);
IkReal x15540=(sj3*x15521);
IkReal x15541=(cj3*x15520);
IkReal x15542=(x15522+x15523);
evalcond[0]=(((x15520*x15530))+(((-1.0)*r22*x15537))+(((-1.0)*x15536*x15538)));
evalcond[1]=((((-1.0)*r12*x15537))+((x15520*x15524))+(((-1.0)*x15525*x15538)));
evalcond[2]=((1.0)+(((-1.0)*x15528*x15538))+((x15520*x15534))+(((-1.0)*r02*x15537)));
evalcond[3]=(((r01*x15521*x15529))+((r02*x15541))+((sj3*x15527))+((r00*x15533))+(((-1.0)*cj3*x15528*x15537)));
evalcond[4]=(((x15528*x15540))+((cj3*x15527))+((r00*x15529))+(((-1.0)*r02*sj3*x15538))+(((-1.0)*r01*x15533*x15537)));
evalcond[5]=(((r21*x15521*x15529))+((r20*x15533))+((r21*x15532))+(((-1.0)*r20*x15535*x15537))+x15542+((r22*x15541)));
evalcond[6]=((((-1.0)*cj3*x15525*x15537))+((r10*x15533))+((x15524*x15539))+(((-1.0)*x15526))+x15531+((r12*x15541))+((r11*x15532)));
evalcond[7]=((((-1.0)*r12*sj3*x15538))+((r10*x15529))+(((-1.0)*sj3*x15524*x15537))+((x15525*x15540))+x15542+((r11*x15535)));
evalcond[8]=((((-1.0)*sj3*x15530*x15537))+((r20*x15521*x15532))+((r20*x15529))+((r21*x15535))+(((-1.0)*x15531))+(((-1.0)*r22*sj3*x15538))+x15526);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15543=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15543);
rxp1_1=(px*r21);
rxp1_2=(r11*x15543);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15544=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15544);
rxp1_1=(px*r21);
rxp1_2=(r11*x15544);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15545=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15545)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15545)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15546=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15546);
rxp1_1=(px*r21);
rxp1_2=(r11*x15546);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15547=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15547);
rxp1_1=(px*r21);
rxp1_2=(r11*x15547);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15548=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15548);
rxp1_1=(px*r21);
rxp1_2=(r11*x15548);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15549=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15549);
rxp1_1=(px*r21);
rxp1_2=(r11*x15549);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15552=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15552.valid){
continue;
}
IkReal x15550=x15552.value;
IkReal x15551=(sj0*x15550);
cj4array[0]=(((cj1*sj2*x15551))+((cj2*sj1*x15551)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15553=IKsin(j4);
IkReal x15554=IKcos(j4);
IkReal x15555=(cj5*r20);
IkReal x15556=(r21*sj5);
IkReal x15557=((1.0)*x15553);
IkReal x15558=((1.0)*x15554);
evalcond[0]=((-1.0)*r02*x15553);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15558)));
evalcond[2]=((((-1.0)*x15555*x15557))+((x15553*x15556)));
evalcond[3]=(((r11*sj5*x15553))+(((-1.0)*cj5*r10*x15557)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15556*x15558))+((x15554*x15555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15560=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15560.valid){
continue;
}
IkReal x15559=x15560.value;
cj4array[0]=(((cj1*cj2*x15559))+(((-1.0)*sj1*sj2*x15559)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15561=IKsin(j4);
IkReal x15562=IKcos(j4);
IkReal x15563=(r11*sj5);
IkReal x15564=((1.0)*sj0);
IkReal x15565=((1.0)*x15562);
IkReal x15566=((1.0)*cj5*x15561);
evalcond[0]=((-1.0)*r02*x15561);
evalcond[1]=((((-1.0)*r02*x15565))+(((-1.0)*x15564)));
evalcond[2]=((((-1.0)*r20*x15566))+((r21*sj5*x15561)));
evalcond[3]=(((x15561*x15563))+(((-1.0)*r10*x15566)));
evalcond[4]=(((cj5*r10*x15562))+(((-1.0)*cj1*sj2*x15564))+(((-1.0)*cj2*sj1*x15564))+(((-1.0)*x15563*x15565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15567=IKPowWithIntegerCheck(r02,-1);
if(!x15567.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15567.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15568=IKsin(j4);
IkReal x15569=IKcos(j4);
IkReal x15570=((1.0)*sj0);
IkReal x15571=(cj5*x15569);
IkReal x15572=(sj5*x15568);
IkReal x15573=((1.0)*sj5*x15569);
IkReal x15574=((1.0)*cj5*x15568);
evalcond[0]=((-1.0)*r02*x15568);
evalcond[1]=(((r21*x15572))+(((-1.0)*r20*x15574)));
evalcond[2]=(((r11*x15572))+(((-1.0)*r10*x15574)));
evalcond[3]=((((-1.0)*r21*x15573))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15571)));
evalcond[4]=(((r10*x15571))+(((-1.0)*r11*x15573))+(((-1.0)*cj1*sj2*x15570))+(((-1.0)*cj2*sj1*x15570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15575=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15575);
rxp1_1=(px*r21);
rxp1_2=(r11*x15575);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15576=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15576);
rxp1_1=(px*r21);
rxp1_2=(r11*x15576);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15577=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15577);
rxp1_1=(px*r21);
rxp1_2=(r11*x15577);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15580=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15580.valid){
continue;
}
IkReal x15578=x15580.value;
IkReal x15579=(sj0*x15578);
cj4array[0]=(((cj2*sj1*x15579))+((cj1*sj2*x15579)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15581=IKsin(j4);
IkReal x15582=IKcos(j4);
IkReal x15583=(r21*sj5);
IkReal x15584=((1.0)*cj5*r20);
evalcond[0]=(r02*x15581);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15582)));
evalcond[2]=(((x15581*x15583))+(((-1.0)*x15581*x15584)));
evalcond[3]=((((-1.0)*cj5*r10*x15581))+((r11*sj5*x15581)));
evalcond[4]=(((x15582*x15583))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15582*x15584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15586=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15586.valid){
continue;
}
IkReal x15585=x15586.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15585))+((cj1*cj2*x15585)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15587=IKsin(j4);
IkReal x15588=IKcos(j4);
IkReal x15589=((1.0)*sj0);
IkReal x15590=((1.0)*cj5);
IkReal x15591=(sj5*x15587);
evalcond[0]=(r02*x15587);
evalcond[1]=((((-1.0)*x15589))+(((-1.0)*r02*x15588)));
evalcond[2]=(((r21*x15591))+(((-1.0)*r20*x15587*x15590)));
evalcond[3]=(((r11*x15591))+(((-1.0)*r10*x15587*x15590)));
evalcond[4]=((((-1.0)*cj1*sj2*x15589))+(((-1.0)*cj2*sj1*x15589))+(((-1.0)*r10*x15588*x15590))+((r11*sj5*x15588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15592=IKPowWithIntegerCheck(r02,-1);
if(!x15592.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15592.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15593=IKsin(j4);
IkReal x15594=IKcos(j4);
IkReal x15595=((1.0)*cj1);
IkReal x15596=(r21*sj5);
IkReal x15597=((1.0)*cj5);
IkReal x15598=(r11*sj5);
evalcond[0]=(r02*x15593);
evalcond[1]=(((x15593*x15596))+(((-1.0)*r20*x15593*x15597)));
evalcond[2]=((((-1.0)*r10*x15593*x15597))+((x15593*x15598)));
evalcond[3]=((((-1.0)*cj2*x15595))+((x15594*x15596))+((sj1*sj2))+(((-1.0)*r20*x15594*x15597)));
evalcond[4]=((((-1.0)*sj0*sj2*x15595))+(((-1.0)*cj2*sj0*sj1))+((x15594*x15598))+(((-1.0)*r10*x15594*x15597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15599 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15599.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15599.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15600 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15600.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15600.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15601=((-1.0)*r10);
CheckValue<IkReal> x15603 = IKatan2WithCheck(IkReal(x15601),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15603.valid){
continue;
}
IkReal x15602=((-1.0)*(x15603.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15601);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15602;
IkReal gconst66=x15602;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15604=((-1.0)*r10);
CheckValue<IkReal> x15606 = IKatan2WithCheck(IkReal(x15604),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15606.valid){
continue;
}
IkReal x15605=((-1.0)*(x15606.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15604);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15605;
IkReal gconst66=x15605;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15607=((-1.0)*r10);
CheckValue<IkReal> x15609 = IKatan2WithCheck(IkReal(x15607),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15609.valid){
continue;
}
IkReal x15608=((-1.0)*(x15609.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15607);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15608;
IkReal gconst66=x15608;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15610=((1.0)*gconst67);
IkReal x15611=(cj1*cj2);
IkReal x15612=((1.0)*sj1*sj2);
CheckValue<IkReal> x15613=IKPowWithIntegerCheck(cj3,-1);
if(!x15613.valid){
continue;
}
CheckValue<IkReal> x15614=IKPowWithIntegerCheck(r02,-1);
if(!x15614.valid){
continue;
}
CheckValue<IkReal> x15615=IKPowWithIntegerCheck(((((-1.0)*r21*sj3*x15610))+((gconst68*r20*sj3))),-1);
if(!x15615.valid){
continue;
}
if( IKabs(((x15613.value)*(x15614.value)*((((cj0*x15611))+(((-1.0)*cj0*x15612)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15615.value)*(((((-1.0)*x15612))+(((-1.0)*cj3*r20*x15610))+x15611+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15613.value)*(x15614.value)*((((cj0*x15611))+(((-1.0)*cj0*x15612))))))+IKsqr(((x15615.value)*(((((-1.0)*x15612))+(((-1.0)*cj3*r20*x15610))+x15611+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15613.value)*(x15614.value)*((((cj0*x15611))+(((-1.0)*cj0*x15612))))), ((x15615.value)*(((((-1.0)*x15612))+(((-1.0)*cj3*r20*x15610))+x15611+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15616=IKsin(j4);
IkReal x15617=IKcos(j4);
IkReal x15618=(sj1*sj2);
IkReal x15619=(gconst68*sj3);
IkReal x15620=(gconst67*r11);
IkReal x15621=(gconst67*sj3);
IkReal x15622=((1.0)*gconst68);
IkReal x15623=(cj2*sj1);
IkReal x15624=((1.0)*cj0);
IkReal x15625=((1.0)*sj0);
IkReal x15626=(cj3*gconst67);
IkReal x15627=(cj3*gconst68);
IkReal x15628=(cj1*sj2);
IkReal x15629=(gconst67*r21);
IkReal x15630=((1.0)*cj1*cj2);
IkReal x15631=(cj3*x15617);
IkReal x15632=((1.0)*x15617);
IkReal x15633=(r02*x15616);
evalcond[0]=((((-1.0)*x15625))+(((-1.0)*r02*x15632)));
evalcond[1]=(((x15616*x15629))+(((-1.0)*r20*x15616*x15622)));
evalcond[2]=(cj0+((x15616*x15620))+(((-1.0)*r10*x15616*x15622)));
evalcond[3]=(((cj3*x15633))+((cj0*x15618))+(((-1.0)*cj1*cj2*x15624)));
evalcond[4]=((((-1.0)*sj3*x15633))+(((-1.0)*x15623*x15624))+(((-1.0)*x15624*x15628)));
evalcond[5]=(((r21*x15617*x15626))+((r21*x15619))+(((-1.0)*r20*x15622*x15631))+x15628+x15623+((r20*x15621)));
evalcond[6]=(((r20*x15617*x15619))+((r21*x15627))+(((-1.0)*r21*x15621*x15632))+x15618+((r20*x15626))+(((-1.0)*x15630)));
evalcond[7]=(((sj0*x15618))+((x15620*x15631))+((r11*x15619))+(((-1.0)*cj1*cj2*x15625))+((r10*x15621))+(((-1.0)*r10*x15622*x15631)));
evalcond[8]=(((r10*x15617*x15619))+(((-1.0)*sj3*x15620*x15632))+(((-1.0)*x15623*x15625))+(((-1.0)*x15625*x15628))+((r11*x15627))+((r10*x15626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15636=IKPowWithIntegerCheck(r02,-1);
if(!x15636.valid){
continue;
}
IkReal x15634=x15636.value;
IkReal x15635=((1.0)*cj0);
CheckValue<IkReal> x15637=IKPowWithIntegerCheck(sj3,-1);
if(!x15637.valid){
continue;
}
if( IKabs((x15634*(x15637.value)*(((((-1.0)*cj2*sj1*x15635))+(((-1.0)*cj1*sj2*x15635)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15634)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15634*(x15637.value)*(((((-1.0)*cj2*sj1*x15635))+(((-1.0)*cj1*sj2*x15635))))))+IKsqr(((-1.0)*sj0*x15634))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15634*(x15637.value)*(((((-1.0)*cj2*sj1*x15635))+(((-1.0)*cj1*sj2*x15635))))), ((-1.0)*sj0*x15634));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15638=IKsin(j4);
IkReal x15639=IKcos(j4);
IkReal x15640=(sj1*sj2);
IkReal x15641=(gconst68*sj3);
IkReal x15642=(gconst67*r11);
IkReal x15643=(gconst67*sj3);
IkReal x15644=((1.0)*gconst68);
IkReal x15645=(cj2*sj1);
IkReal x15646=((1.0)*cj0);
IkReal x15647=((1.0)*sj0);
IkReal x15648=(cj3*gconst67);
IkReal x15649=(cj3*gconst68);
IkReal x15650=(cj1*sj2);
IkReal x15651=(gconst67*r21);
IkReal x15652=((1.0)*cj1*cj2);
IkReal x15653=(cj3*x15639);
IkReal x15654=((1.0)*x15639);
IkReal x15655=(r02*x15638);
evalcond[0]=((((-1.0)*x15647))+(((-1.0)*r02*x15654)));
evalcond[1]=(((x15638*x15651))+(((-1.0)*r20*x15638*x15644)));
evalcond[2]=(cj0+(((-1.0)*r10*x15638*x15644))+((x15638*x15642)));
evalcond[3]=(((cj3*x15655))+((cj0*x15640))+(((-1.0)*cj1*cj2*x15646)));
evalcond[4]=((((-1.0)*x15645*x15646))+(((-1.0)*sj3*x15655))+(((-1.0)*x15646*x15650)));
evalcond[5]=(((r21*x15639*x15648))+x15645+x15650+((r21*x15641))+(((-1.0)*r20*x15644*x15653))+((r20*x15643)));
evalcond[6]=(((r20*x15639*x15641))+x15640+((r21*x15649))+(((-1.0)*x15652))+(((-1.0)*r21*x15643*x15654))+((r20*x15648)));
evalcond[7]=(((r11*x15641))+((x15642*x15653))+((sj0*x15640))+(((-1.0)*r10*x15644*x15653))+(((-1.0)*cj1*cj2*x15647))+((r10*x15643)));
evalcond[8]=((((-1.0)*x15647*x15650))+(((-1.0)*x15645*x15647))+(((-1.0)*sj3*x15642*x15654))+((r11*x15649))+((r10*x15639*x15641))+((r10*x15648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15657=IKPowWithIntegerCheck(r02,-1);
if(!x15657.valid){
continue;
}
IkReal x15656=x15657.value;
CheckValue<IkReal> x15658=IKPowWithIntegerCheck(cj3,-1);
if(!x15658.valid){
continue;
}
if( IKabs((x15656*(x15658.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15656)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15656*(x15658.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15656))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15656*(x15658.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15656));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15659=IKsin(j4);
IkReal x15660=IKcos(j4);
IkReal x15661=(sj1*sj2);
IkReal x15662=(gconst68*sj3);
IkReal x15663=(gconst67*r11);
IkReal x15664=(gconst67*sj3);
IkReal x15665=((1.0)*gconst68);
IkReal x15666=(cj2*sj1);
IkReal x15667=((1.0)*cj0);
IkReal x15668=((1.0)*sj0);
IkReal x15669=(cj3*gconst67);
IkReal x15670=(cj3*gconst68);
IkReal x15671=(cj1*sj2);
IkReal x15672=(gconst67*r21);
IkReal x15673=((1.0)*cj1*cj2);
IkReal x15674=(cj3*x15660);
IkReal x15675=((1.0)*x15660);
IkReal x15676=(r02*x15659);
evalcond[0]=((((-1.0)*x15668))+(((-1.0)*r02*x15675)));
evalcond[1]=(((x15659*x15672))+(((-1.0)*r20*x15659*x15665)));
evalcond[2]=((((-1.0)*r10*x15659*x15665))+cj0+((x15659*x15663)));
evalcond[3]=(((cj3*x15676))+(((-1.0)*cj1*cj2*x15667))+((cj0*x15661)));
evalcond[4]=((((-1.0)*x15667*x15671))+(((-1.0)*x15666*x15667))+(((-1.0)*sj3*x15676)));
evalcond[5]=(((r21*x15660*x15669))+((r20*x15664))+x15666+x15671+((r21*x15662))+(((-1.0)*r20*x15665*x15674)));
evalcond[6]=((((-1.0)*x15673))+((r20*x15660*x15662))+((r20*x15669))+x15661+((r21*x15670))+(((-1.0)*r21*x15664*x15675)));
evalcond[7]=(((r10*x15664))+((x15663*x15674))+((r11*x15662))+((sj0*x15661))+(((-1.0)*cj1*cj2*x15668))+(((-1.0)*r10*x15665*x15674)));
evalcond[8]=((((-1.0)*sj3*x15663*x15675))+((r10*x15669))+((r11*x15670))+(((-1.0)*x15666*x15668))+(((-1.0)*x15668*x15671))+((r10*x15660*x15662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15677=((-1.0)*r10);
CheckValue<IkReal> x15678 = IKatan2WithCheck(IkReal(x15677),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15678.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15678.value))));
IkReal gconst70=x15677;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15679 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15679.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15679.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15680=((-1.0)*r10);
IkReal x15681=((-1.0)*r11);
CheckValue<IkReal> x15683 = IKatan2WithCheck(IkReal(x15680),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15683.valid){
continue;
}
IkReal x15682=((1.0)*(x15683.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15680);
rxp1_1=(px*r21);
rxp1_2=(px*x15681);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15682)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15682)));
IkReal gconst70=x15680;
IkReal gconst71=x15681;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15684=((-1.0)*r10);
IkReal x15685=((-1.0)*r11);
CheckValue<IkReal> x15687 = IKatan2WithCheck(IkReal(x15684),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15687.valid){
continue;
}
IkReal x15686=((1.0)*(x15687.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15684);
rxp1_1=(px*r21);
rxp1_2=(px*x15685);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15686)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15686)));
IkReal gconst70=x15684;
IkReal gconst71=x15685;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15688=((-1.0)*r10);
IkReal x15689=((-1.0)*r11);
CheckValue<IkReal> x15691 = IKatan2WithCheck(IkReal(x15688),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15691.valid){
continue;
}
IkReal x15690=((1.0)*(x15691.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15688);
rxp1_1=(px*r21);
rxp1_2=(px*x15689);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15690)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15690)));
IkReal gconst70=x15688;
IkReal gconst71=x15689;
IkReal x15692=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r20*x15692))+((r10*r21*x15692)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15693=((1.0)*r21);
IkReal x15694=(cj1*cj2);
IkReal x15695=((1.0)*sj1*sj2);
CheckValue<IkReal> x15696=IKPowWithIntegerCheck(cj3,-1);
if(!x15696.valid){
continue;
}
CheckValue<IkReal> x15697=IKPowWithIntegerCheck(r02,-1);
if(!x15697.valid){
continue;
}
CheckValue<IkReal> x15698=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15693))+((gconst71*r20*sj3))),-1);
if(!x15698.valid){
continue;
}
if( IKabs(((x15696.value)*(x15697.value)*((((cj0*x15694))+(((-1.0)*cj0*x15695)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15698.value)*(((((-1.0)*x15695))+(((-1.0)*cj3*gconst71*x15693))+x15694+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15696.value)*(x15697.value)*((((cj0*x15694))+(((-1.0)*cj0*x15695))))))+IKsqr(((x15698.value)*(((((-1.0)*x15695))+(((-1.0)*cj3*gconst71*x15693))+x15694+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15696.value)*(x15697.value)*((((cj0*x15694))+(((-1.0)*cj0*x15695))))), ((x15698.value)*(((((-1.0)*x15695))+(((-1.0)*cj3*gconst71*x15693))+x15694+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15699=IKsin(j4);
IkReal x15700=IKcos(j4);
IkReal x15701=(cj3*gconst70);
IkReal x15702=(sj1*sj2);
IkReal x15703=((1.0)*gconst71);
IkReal x15704=(gconst71*sj3);
IkReal x15705=(cj2*sj1);
IkReal x15706=((1.0)*sj0);
IkReal x15707=(gconst70*r11);
IkReal x15708=(gconst70*sj3);
IkReal x15709=((1.0)*cj0);
IkReal x15710=(cj3*gconst71);
IkReal x15711=(cj1*sj2);
IkReal x15712=((1.0)*cj1*cj2);
IkReal x15713=(r21*x15700);
IkReal x15714=(r10*x15700);
IkReal x15715=((1.0)*x15700);
IkReal x15716=(r02*x15699);
IkReal x15717=(r20*x15700);
evalcond[0]=((((-1.0)*x15706))+(((-1.0)*r02*x15715)));
evalcond[1]=((((-1.0)*r20*x15699*x15703))+((gconst70*r21*x15699)));
evalcond[2]=(cj0+(((-1.0)*r10*x15699*x15703))+((x15699*x15707)));
evalcond[3]=(((cj0*x15702))+(((-1.0)*cj1*cj2*x15709))+((cj3*x15716)));
evalcond[4]=((((-1.0)*x15705*x15709))+(((-1.0)*sj3*x15716))+(((-1.0)*x15709*x15711)));
evalcond[5]=(((r20*x15708))+x15705+x15711+((r21*x15704))+(((-1.0)*cj3*x15703*x15717))+((x15701*x15713)));
evalcond[6]=((((-1.0)*x15712))+((x15704*x15717))+((r20*x15701))+((r21*x15710))+x15702+(((-1.0)*x15708*x15713)));
evalcond[7]=(((r11*x15704))+((sj0*x15702))+(((-1.0)*cj1*cj2*x15706))+((r10*x15708))+((r11*x15700*x15701))+(((-1.0)*cj3*x15703*x15714)));
evalcond[8]=((((-1.0)*x15706*x15711))+(((-1.0)*x15705*x15706))+(((-1.0)*sj3*x15707*x15715))+((x15704*x15714))+((r10*x15701))+((r11*x15710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15720=IKPowWithIntegerCheck(r02,-1);
if(!x15720.valid){
continue;
}
IkReal x15718=x15720.value;
IkReal x15719=((1.0)*cj0);
CheckValue<IkReal> x15721=IKPowWithIntegerCheck(sj3,-1);
if(!x15721.valid){
continue;
}
if( IKabs((x15718*(x15721.value)*(((((-1.0)*cj2*sj1*x15719))+(((-1.0)*cj1*sj2*x15719)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15718)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15718*(x15721.value)*(((((-1.0)*cj2*sj1*x15719))+(((-1.0)*cj1*sj2*x15719))))))+IKsqr(((-1.0)*sj0*x15718))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15718*(x15721.value)*(((((-1.0)*cj2*sj1*x15719))+(((-1.0)*cj1*sj2*x15719))))), ((-1.0)*sj0*x15718));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15722=IKsin(j4);
IkReal x15723=IKcos(j4);
IkReal x15724=(cj3*gconst70);
IkReal x15725=(sj1*sj2);
IkReal x15726=((1.0)*gconst71);
IkReal x15727=(gconst71*sj3);
IkReal x15728=(cj2*sj1);
IkReal x15729=((1.0)*sj0);
IkReal x15730=(gconst70*r11);
IkReal x15731=(gconst70*sj3);
IkReal x15732=((1.0)*cj0);
IkReal x15733=(cj3*gconst71);
IkReal x15734=(cj1*sj2);
IkReal x15735=((1.0)*cj1*cj2);
IkReal x15736=(r21*x15723);
IkReal x15737=(r10*x15723);
IkReal x15738=((1.0)*x15723);
IkReal x15739=(r02*x15722);
IkReal x15740=(r20*x15723);
evalcond[0]=((((-1.0)*x15729))+(((-1.0)*r02*x15738)));
evalcond[1]=(((gconst70*r21*x15722))+(((-1.0)*r20*x15722*x15726)));
evalcond[2]=(((x15722*x15730))+cj0+(((-1.0)*r10*x15722*x15726)));
evalcond[3]=(((cj0*x15725))+(((-1.0)*cj1*cj2*x15732))+((cj3*x15739)));
evalcond[4]=((((-1.0)*sj3*x15739))+(((-1.0)*x15732*x15734))+(((-1.0)*x15728*x15732)));
evalcond[5]=(((x15724*x15736))+((r20*x15731))+((r21*x15727))+x15734+x15728+(((-1.0)*cj3*x15726*x15740)));
evalcond[6]=((((-1.0)*x15735))+(((-1.0)*x15731*x15736))+((r20*x15724))+((x15727*x15740))+((r21*x15733))+x15725);
evalcond[7]=(((r11*x15727))+(((-1.0)*cj3*x15726*x15737))+(((-1.0)*cj1*cj2*x15729))+((sj0*x15725))+((r11*x15723*x15724))+((r10*x15731)));
evalcond[8]=(((r11*x15733))+(((-1.0)*x15728*x15729))+((x15727*x15737))+((r10*x15724))+(((-1.0)*x15729*x15734))+(((-1.0)*sj3*x15730*x15738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15742=IKPowWithIntegerCheck(r02,-1);
if(!x15742.valid){
continue;
}
IkReal x15741=x15742.value;
CheckValue<IkReal> x15743=IKPowWithIntegerCheck(cj3,-1);
if(!x15743.valid){
continue;
}
if( IKabs((x15741*(x15743.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15741)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15741*(x15743.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15741))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15741*(x15743.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15741));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15744=IKsin(j4);
IkReal x15745=IKcos(j4);
IkReal x15746=(cj3*gconst70);
IkReal x15747=(sj1*sj2);
IkReal x15748=((1.0)*gconst71);
IkReal x15749=(gconst71*sj3);
IkReal x15750=(cj2*sj1);
IkReal x15751=((1.0)*sj0);
IkReal x15752=(gconst70*r11);
IkReal x15753=(gconst70*sj3);
IkReal x15754=((1.0)*cj0);
IkReal x15755=(cj3*gconst71);
IkReal x15756=(cj1*sj2);
IkReal x15757=((1.0)*cj1*cj2);
IkReal x15758=(r21*x15745);
IkReal x15759=(r10*x15745);
IkReal x15760=((1.0)*x15745);
IkReal x15761=(r02*x15744);
IkReal x15762=(r20*x15745);
evalcond[0]=((((-1.0)*x15751))+(((-1.0)*r02*x15760)));
evalcond[1]=((((-1.0)*r20*x15744*x15748))+((gconst70*r21*x15744)));
evalcond[2]=(cj0+((x15744*x15752))+(((-1.0)*r10*x15744*x15748)));
evalcond[3]=(((cj0*x15747))+((cj3*x15761))+(((-1.0)*cj1*cj2*x15754)));
evalcond[4]=((((-1.0)*x15750*x15754))+(((-1.0)*x15754*x15756))+(((-1.0)*sj3*x15761)));
evalcond[5]=(((r20*x15753))+((r21*x15749))+x15750+x15756+((x15746*x15758))+(((-1.0)*cj3*x15748*x15762)));
evalcond[6]=((((-1.0)*x15757))+(((-1.0)*x15753*x15758))+((r21*x15755))+((x15749*x15762))+x15747+((r20*x15746)));
evalcond[7]=(((r11*x15745*x15746))+(((-1.0)*cj3*x15748*x15759))+((r10*x15753))+((r11*x15749))+((sj0*x15747))+(((-1.0)*cj1*cj2*x15751)));
evalcond[8]=((((-1.0)*x15750*x15751))+(((-1.0)*x15751*x15756))+(((-1.0)*sj3*x15752*x15760))+((x15749*x15759))+((r11*x15755))+((r10*x15746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15764=IKPowWithIntegerCheck(r02,-1);
if(!x15764.valid){
continue;
}
IkReal x15763=x15764.value;
CheckValue<IkReal> x15765=IKPowWithIntegerCheck(cj3,-1);
if(!x15765.valid){
continue;
}
if( IKabs((x15763*(x15765.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15763)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15763*(x15765.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15763))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15763*(x15765.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15763));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15766=IKsin(j4);
IkReal x15767=IKcos(j4);
IkReal x15768=(cj5*r10);
IkReal x15769=(sj1*sj2);
IkReal x15770=(cj5*sj3);
IkReal x15771=(r11*sj5);
IkReal x15772=(cj3*cj5);
IkReal x15773=(cj3*sj5);
IkReal x15774=(r21*sj5);
IkReal x15775=(cj2*sj1);
IkReal x15776=((1.0)*sj0);
IkReal x15777=((1.0)*cj0);
IkReal x15778=(sj3*sj5);
IkReal x15779=(cj1*sj2);
IkReal x15780=((1.0)*cj1*cj2);
IkReal x15781=((1.0)*x15766);
IkReal x15782=(r20*x15767);
IkReal x15783=(cj3*x15767);
IkReal x15784=(sj3*x15767);
evalcond[0]=((((-1.0)*r02*x15767))+(((-1.0)*x15776)));
evalcond[1]=(((x15766*x15774))+(((-1.0)*cj5*r20*x15781)));
evalcond[2]=((((-1.0)*x15768*x15781))+cj0+((x15766*x15771)));
evalcond[3]=(((cj0*x15769))+(((-1.0)*cj1*cj2*x15777))+((cj3*r02*x15766)));
evalcond[4]=((((-1.0)*x15775*x15777))+(((-1.0)*r02*sj3*x15781))+(((-1.0)*x15777*x15779)));
evalcond[5]=(((r21*x15770))+(((-1.0)*x15772*x15782))+((r21*x15767*x15773))+((r20*x15778))+x15779+x15775);
evalcond[6]=(((r21*x15772))+((r20*x15773))+x15769+((x15770*x15782))+(((-1.0)*x15774*x15784))+(((-1.0)*x15780)));
evalcond[7]=(((r10*x15778))+((x15771*x15783))+((sj0*x15769))+(((-1.0)*x15768*x15783))+(((-1.0)*cj1*cj2*x15776))+((r11*x15770)));
evalcond[8]=(((r10*x15773))+(((-1.0)*x15776*x15779))+((x15768*x15784))+(((-1.0)*x15775*x15776))+(((-1.0)*x15771*x15784))+((r11*x15772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15785=((1.0)*sj3);
IkReal x15786=((1.0)*cj5);
CheckValue<IkReal> x15787=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15786))),-1);
if(!x15787.valid){
continue;
}
CheckValue<IkReal> x15788=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15786))),-1);
if(!x15788.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15787.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15788.value)*(((((-1.0)*r20*sj5*x15785))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15785)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15787.value)))+IKsqr(((x15788.value)*(((((-1.0)*r20*sj5*x15785))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15785))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15787.value)), ((x15788.value)*(((((-1.0)*r20*sj5*x15785))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15785))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15789=IKsin(j4);
IkReal x15790=IKcos(j4);
IkReal x15791=(cj5*r10);
IkReal x15792=(sj1*sj2);
IkReal x15793=(cj5*sj3);
IkReal x15794=(r11*sj5);
IkReal x15795=(cj3*cj5);
IkReal x15796=(cj3*sj5);
IkReal x15797=(r21*sj5);
IkReal x15798=(cj2*sj1);
IkReal x15799=((1.0)*sj0);
IkReal x15800=((1.0)*cj0);
IkReal x15801=(sj3*sj5);
IkReal x15802=(cj1*sj2);
IkReal x15803=((1.0)*cj1*cj2);
IkReal x15804=((1.0)*x15789);
IkReal x15805=(r20*x15790);
IkReal x15806=(cj3*x15790);
IkReal x15807=(sj3*x15790);
evalcond[0]=((((-1.0)*r02*x15790))+(((-1.0)*x15799)));
evalcond[1]=((((-1.0)*cj5*r20*x15804))+((x15789*x15797)));
evalcond[2]=(cj0+((x15789*x15794))+(((-1.0)*x15791*x15804)));
evalcond[3]=(((cj0*x15792))+((cj3*r02*x15789))+(((-1.0)*cj1*cj2*x15800)));
evalcond[4]=((((-1.0)*x15798*x15800))+(((-1.0)*x15800*x15802))+(((-1.0)*r02*sj3*x15804)));
evalcond[5]=((((-1.0)*x15795*x15805))+((r21*x15793))+x15798+((r21*x15790*x15796))+x15802+((r20*x15801)));
evalcond[6]=((((-1.0)*x15797*x15807))+(((-1.0)*x15803))+((r20*x15796))+((r21*x15795))+x15792+((x15793*x15805)));
evalcond[7]=(((r10*x15801))+(((-1.0)*x15791*x15806))+((r11*x15793))+((x15794*x15806))+(((-1.0)*cj1*cj2*x15799))+((sj0*x15792)));
evalcond[8]=((((-1.0)*x15794*x15807))+((r11*x15795))+((r10*x15796))+((x15791*x15807))+(((-1.0)*x15799*x15802))+(((-1.0)*x15798*x15799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15808=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15808.valid){
continue;
}
CheckValue<IkReal> x15809=IKPowWithIntegerCheck(r02,-1);
if(!x15809.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15808.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15809.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15808.value)))+IKsqr(((-1.0)*sj0*(x15809.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15808.value)), ((-1.0)*sj0*(x15809.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15810=IKsin(j4);
IkReal x15811=IKcos(j4);
IkReal x15812=(cj5*r10);
IkReal x15813=(sj1*sj2);
IkReal x15814=(cj5*sj3);
IkReal x15815=(r11*sj5);
IkReal x15816=(cj3*cj5);
IkReal x15817=(cj3*sj5);
IkReal x15818=(r21*sj5);
IkReal x15819=(cj2*sj1);
IkReal x15820=((1.0)*sj0);
IkReal x15821=((1.0)*cj0);
IkReal x15822=(sj3*sj5);
IkReal x15823=(cj1*sj2);
IkReal x15824=((1.0)*cj1*cj2);
IkReal x15825=((1.0)*x15810);
IkReal x15826=(r20*x15811);
IkReal x15827=(cj3*x15811);
IkReal x15828=(sj3*x15811);
evalcond[0]=((((-1.0)*r02*x15811))+(((-1.0)*x15820)));
evalcond[1]=((((-1.0)*cj5*r20*x15825))+((x15810*x15818)));
evalcond[2]=(cj0+((x15810*x15815))+(((-1.0)*x15812*x15825)));
evalcond[3]=(((cj0*x15813))+(((-1.0)*cj1*cj2*x15821))+((cj3*r02*x15810)));
evalcond[4]=((((-1.0)*x15819*x15821))+(((-1.0)*r02*sj3*x15825))+(((-1.0)*x15821*x15823)));
evalcond[5]=(((r20*x15822))+(((-1.0)*x15816*x15826))+((r21*x15811*x15817))+((r21*x15814))+x15819+x15823);
evalcond[6]=(((x15814*x15826))+(((-1.0)*x15824))+(((-1.0)*x15818*x15828))+((r21*x15816))+((r20*x15817))+x15813);
evalcond[7]=(((r11*x15814))+((sj0*x15813))+(((-1.0)*x15812*x15827))+((x15815*x15827))+(((-1.0)*cj1*cj2*x15820))+((r10*x15822)));
evalcond[8]=(((r11*x15816))+(((-1.0)*x15819*x15820))+((r10*x15817))+((x15812*x15828))+(((-1.0)*x15815*x15828))+(((-1.0)*x15820*x15823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15829=((1.0)*sj0);
IkReal x15830=((1.0)*cj0);
CheckValue<IkReal> x15831 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x15829))+(((-1.0)*r02*x15830)))),IkReal(((((-1.0)*r01*sj5*x15830))+((cj0*cj5*r00))+(((-1.0)*r11*sj5*x15829))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15831.valid){
continue;
}
CheckValue<IkReal> x15832=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15831.value)+(((1.5707963267949)*(x15832.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15833=IKsin(j4);
IkReal x15834=IKcos(j4);
IkReal x15835=(r11*sj5);
IkReal x15836=(cj5*r10);
IkReal x15837=(sj1*sj2);
IkReal x15838=(cj5*sj3);
IkReal x15839=((1.0)*sj0);
IkReal x15840=(cj3*cj5);
IkReal x15841=(cj3*sj5);
IkReal x15842=(r21*sj5);
IkReal x15843=(cj2*sj1);
IkReal x15844=(sj3*sj5);
IkReal x15845=(r01*sj5);
IkReal x15846=((1.0)*cj0);
IkReal x15847=(cj1*sj2);
IkReal x15848=((1.0)*x15834);
IkReal x15849=((1.0)*x15833);
IkReal x15850=(cj3*x15834);
IkReal x15851=((1.0)*cj1*cj2);
IkReal x15852=(cj3*x15833);
evalcond[0]=((((-1.0)*cj5*r20*x15849))+((x15833*x15842))+(((-1.0)*r22*x15848)));
evalcond[1]=(cj0+(((-1.0)*r12*x15848))+(((-1.0)*x15836*x15849))+((x15833*x15835)));
evalcond[2]=(((x15833*x15845))+(((-1.0)*cj5*r00*x15849))+(((-1.0)*x15839))+(((-1.0)*r02*x15848)));
evalcond[3]=(((r21*x15834*x15841))+(((-1.0)*r20*x15840*x15848))+((r20*x15844))+((r22*x15852))+x15843+x15847+((r21*x15838)));
evalcond[4]=((((-1.0)*sj3*x15842*x15848))+((r20*x15841))+((r20*x15834*x15838))+((r21*x15840))+(((-1.0)*r22*sj3*x15849))+(((-1.0)*x15851))+x15837);
evalcond[5]=((((-1.0)*r00*x15840*x15848))+((r00*x15844))+((cj0*x15837))+(((-1.0)*cj1*cj2*x15846))+((r01*x15834*x15841))+((r02*x15852))+((r01*x15838)));
evalcond[6]=(((r12*x15852))+(((-1.0)*cj3*x15836*x15848))+((sj0*x15837))+((r11*x15838))+((r10*x15844))+(((-1.0)*cj1*cj2*x15839))+((x15835*x15850)));
evalcond[7]=(((r01*x15840))+(((-1.0)*r02*sj3*x15849))+((r00*x15841))+(((-1.0)*x15846*x15847))+(((-1.0)*r01*x15844*x15848))+(((-1.0)*x15843*x15846))+((r00*x15834*x15838)));
evalcond[8]=(((r11*x15840))+((sj3*x15834*x15836))+((r10*x15841))+(((-1.0)*r12*sj3*x15849))+(((-1.0)*sj3*x15835*x15848))+(((-1.0)*x15839*x15847))+(((-1.0)*x15839*x15843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15853=((1.0)*cj5);
CheckValue<IkReal> x15854 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x15853))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15854.valid){
continue;
}
CheckValue<IkReal> x15855=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15853)))),-1);
if(!x15855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15854.value)+(((1.5707963267949)*(x15855.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15856=IKsin(j4);
IkReal x15857=IKcos(j4);
IkReal x15858=(r11*sj5);
IkReal x15859=(cj5*r10);
IkReal x15860=(sj1*sj2);
IkReal x15861=(cj5*sj3);
IkReal x15862=((1.0)*sj0);
IkReal x15863=(cj3*cj5);
IkReal x15864=(cj3*sj5);
IkReal x15865=(r21*sj5);
IkReal x15866=(cj2*sj1);
IkReal x15867=(sj3*sj5);
IkReal x15868=(r01*sj5);
IkReal x15869=((1.0)*cj0);
IkReal x15870=(cj1*sj2);
IkReal x15871=((1.0)*x15857);
IkReal x15872=((1.0)*x15856);
IkReal x15873=(cj3*x15857);
IkReal x15874=((1.0)*cj1*cj2);
IkReal x15875=(cj3*x15856);
evalcond[0]=((((-1.0)*cj5*r20*x15872))+((x15856*x15865))+(((-1.0)*r22*x15871)));
evalcond[1]=(cj0+(((-1.0)*r12*x15871))+(((-1.0)*x15859*x15872))+((x15856*x15858)));
evalcond[2]=((((-1.0)*x15862))+((x15856*x15868))+(((-1.0)*cj5*r00*x15872))+(((-1.0)*r02*x15871)));
evalcond[3]=(((r21*x15861))+((r21*x15857*x15864))+(((-1.0)*r20*x15863*x15871))+((r22*x15875))+((r20*x15867))+x15870+x15866);
evalcond[4]=(((r21*x15863))+(((-1.0)*r22*sj3*x15872))+(((-1.0)*sj3*x15865*x15871))+(((-1.0)*x15874))+((r20*x15864))+((r20*x15857*x15861))+x15860);
evalcond[5]=((((-1.0)*r00*x15863*x15871))+((r01*x15857*x15864))+((cj0*x15860))+((r00*x15867))+((r02*x15875))+((r01*x15861))+(((-1.0)*cj1*cj2*x15869)));
evalcond[6]=(((r11*x15861))+((sj0*x15860))+((x15858*x15873))+(((-1.0)*cj3*x15859*x15871))+((r12*x15875))+((r10*x15867))+(((-1.0)*cj1*cj2*x15862)));
evalcond[7]=((((-1.0)*x15869*x15870))+(((-1.0)*r02*sj3*x15872))+(((-1.0)*r01*x15867*x15871))+(((-1.0)*x15866*x15869))+((r00*x15864))+((r01*x15863))+((r00*x15857*x15861)));
evalcond[8]=((((-1.0)*x15862*x15866))+(((-1.0)*sj3*x15858*x15871))+((r11*x15863))+(((-1.0)*r12*sj3*x15872))+((sj3*x15857*x15859))+(((-1.0)*x15862*x15870))+((r10*x15864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15876=((1.0)*cj5);
CheckValue<IkReal> x15877 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x15876))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15877.valid){
continue;
}
CheckValue<IkReal> x15878=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15876)))),-1);
if(!x15878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15877.value)+(((1.5707963267949)*(x15878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15879=IKsin(j4);
IkReal x15880=IKcos(j4);
IkReal x15881=(r11*sj5);
IkReal x15882=(cj5*r10);
IkReal x15883=(sj1*sj2);
IkReal x15884=(cj5*sj3);
IkReal x15885=((1.0)*sj0);
IkReal x15886=(cj3*cj5);
IkReal x15887=(cj3*sj5);
IkReal x15888=(r21*sj5);
IkReal x15889=(cj2*sj1);
IkReal x15890=(sj3*sj5);
IkReal x15891=(r01*sj5);
IkReal x15892=((1.0)*cj0);
IkReal x15893=(cj1*sj2);
IkReal x15894=((1.0)*x15880);
IkReal x15895=((1.0)*x15879);
IkReal x15896=(cj3*x15880);
IkReal x15897=((1.0)*cj1*cj2);
IkReal x15898=(cj3*x15879);
evalcond[0]=((((-1.0)*cj5*r20*x15895))+((x15879*x15888))+(((-1.0)*r22*x15894)));
evalcond[1]=((((-1.0)*x15882*x15895))+cj0+((x15879*x15881))+(((-1.0)*r12*x15894)));
evalcond[2]=((((-1.0)*r02*x15894))+((x15879*x15891))+(((-1.0)*x15885))+(((-1.0)*cj5*r00*x15895)));
evalcond[3]=((((-1.0)*r20*x15886*x15894))+((r21*x15880*x15887))+((r20*x15890))+((r22*x15898))+x15889+x15893+((r21*x15884)));
evalcond[4]=((((-1.0)*sj3*x15888*x15894))+((r20*x15887))+((r20*x15880*x15884))+(((-1.0)*x15897))+(((-1.0)*r22*sj3*x15895))+x15883+((r21*x15886)));
evalcond[5]=(((r01*x15884))+((r00*x15890))+(((-1.0)*r00*x15886*x15894))+((cj0*x15883))+(((-1.0)*cj1*cj2*x15892))+((r02*x15898))+((r01*x15880*x15887)));
evalcond[6]=(((r10*x15890))+((sj0*x15883))+((r12*x15898))+((x15881*x15896))+((r11*x15884))+(((-1.0)*cj1*cj2*x15885))+(((-1.0)*cj3*x15882*x15894)));
evalcond[7]=(((r00*x15880*x15884))+(((-1.0)*x15892*x15893))+((r00*x15887))+((r01*x15886))+(((-1.0)*x15889*x15892))+(((-1.0)*r01*x15890*x15894))+(((-1.0)*r02*sj3*x15895)));
evalcond[8]=(((sj3*x15880*x15882))+((r10*x15887))+(((-1.0)*x15885*x15893))+(((-1.0)*sj3*x15881*x15894))+(((-1.0)*x15885*x15889))+((r11*x15886))+(((-1.0)*r12*sj3*x15895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15899=cj5*cj5;
IkReal x15900=r21*r21;
IkReal x15901=r20*r20;
IkReal x15902=(r20*r21);
IkReal x15903=((1.0)*cj3);
IkReal x15904=((1.0)*cj5);
IkReal x15905=(cj1*sj2);
IkReal x15906=(cj5*sj5);
IkReal x15907=(sj3*sj5);
IkReal x15908=(cj2*sj1);
IkReal x15909=(r21*sj5);
CheckValue<IkReal> x15910 = IKatan2WithCheck(IkReal((((r22*x15905))+((r22*x15908))+((cj5*r21*r22*sj3))+((r20*r22*x15907)))),IkReal((((sj3*x15902))+((sj3*x15900*x15906))+((x15908*x15909))+(((-2.0)*sj3*x15899*x15902))+(((-1.0)*r20*x15904*x15908))+(((-1.0)*r20*x15904*x15905))+(((-1.0)*x15901*x15904*x15907))+((x15905*x15909)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15910.valid){
continue;
}
CheckValue<IkReal> x15911=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15903*(r22*r22)))+(((-1.0)*x15900*x15903))+(((-1.0)*x15899*x15901*x15903))+((cj3*x15899*x15900))+(((2.0)*cj3*x15902*x15906)))),-1);
if(!x15911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15910.value)+(((1.5707963267949)*(x15911.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15912=IKsin(j4);
IkReal x15913=IKcos(j4);
IkReal x15914=(cj3*r21);
IkReal x15915=(r21*sj5);
IkReal x15916=(r20*sj5);
IkReal x15917=(cj5*r20);
IkReal x15918=((1.0)*x15913);
IkReal x15919=((1.0)*x15912);
evalcond[0]=(((x15912*x15915))+(((-1.0)*x15917*x15919))+(((-1.0)*r22*x15918)));
evalcond[1]=(((cj2*sj1))+((sj3*x15916))+((cj5*r21*sj3))+((cj3*r22*x15912))+((cj1*sj2))+((sj5*x15913*x15914))+(((-1.0)*cj3*x15917*x15918)));
evalcond[2]=(((cj5*x15914))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*x15919))+((sj3*x15913*x15917))+((cj3*x15916))+(((-1.0)*sj3*x15915*x15918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15920=(cj5*sj4);
IkReal x15921=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15921))+(((-1.0)*r00*x15920)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15920))+(((-1.0)*r11*x15921))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15921))+(((-1.0)*r00*x15920))))+IKsqr((((r10*x15920))+(((-1.0)*r11*x15921))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15921))+(((-1.0)*r00*x15920))), (((r10*x15920))+(((-1.0)*r11*x15921))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15922=IKcos(j0);
IkReal x15923=IKsin(j0);
IkReal x15924=(r02*sj4);
IkReal x15925=((0.1)*sj5);
IkReal x15926=(cj5*r11);
IkReal x15927=((1.0)*sj3);
IkReal x15928=(r12*sj4);
IkReal x15929=((1.0)*cj3);
IkReal x15930=(r11*sj5);
IkReal x15931=(cj3*cj4);
IkReal x15932=((1.0)*sj2);
IkReal x15933=(cj5*r01);
IkReal x15934=(r01*sj5);
IkReal x15935=(sj1*sj2);
IkReal x15936=(cj1*cj2);
IkReal x15937=(r00*sj5);
IkReal x15938=((1.0)*cj2);
IkReal x15939=(r10*sj5);
IkReal x15940=((1.0)*cj4);
IkReal x15941=(cj4*cj5*r00);
IkReal x15942=(cj1*x15922);
IkReal x15943=(cj4*cj5*r10);
IkReal x15944=((0.392)*x15923);
IkReal x15945=((1.0)*x15923);
IkReal x15946=(cj1*x15923);
IkReal x15947=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r12*x15940))+((sj4*x15930))+(((-1.0)*r10*x15947))+x15922);
evalcond[1]=((((-1.0)*r02*x15940))+(((-1.0)*r00*x15947))+(((-1.0)*x15945))+((sj4*x15934)));
evalcond[2]=((((-0.134)*x15923))+(((-0.392)*x15922*x15935))+(((-0.1)*x15933))+(((-1.0)*px))+(((0.425)*x15942))+(((0.392)*x15922*x15936))+(((-1.0)*r00*x15925)));
evalcond[3]=((((-1.0)*r10*x15925))+((x15936*x15944))+(((0.134)*x15922))+(((-1.0)*py))+(((-1.0)*x15935*x15944))+(((0.425)*x15946))+(((-0.1)*x15926)));
evalcond[4]=((((-1.0)*x15929*x15941))+((x15931*x15934))+((cj3*x15924))+(((-1.0)*x15922*x15936))+((x15922*x15935))+((sj3*x15937))+((sj3*x15933)));
evalcond[5]=((((-1.0)*x15929*x15943))+((x15930*x15931))+((x15923*x15935))+((sj3*x15926))+((cj3*x15928))+(((-1.0)*x15936*x15945))+((sj3*x15939)));
evalcond[6]=((((-1.0)*cj4*x15927*x15934))+(((-1.0)*x15924*x15927))+(((-1.0)*x15932*x15942))+((cj3*x15933))+((cj3*x15937))+((sj3*x15941))+(((-1.0)*sj1*x15922*x15938)));
evalcond[7]=((((-1.0)*cj4*x15927*x15930))+(((-1.0)*x15932*x15946))+((cj3*x15926))+((cj3*x15939))+(((-1.0)*x15927*x15928))+(((-1.0)*sj1*x15923*x15938))+((sj3*x15943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15948=cj5*cj5;
IkReal x15949=r21*r21;
IkReal x15950=r20*r20;
IkReal x15951=(r20*r21);
IkReal x15952=(sj1*sj2);
IkReal x15953=(r21*sj5);
IkReal x15954=(cj1*cj2);
IkReal x15955=(cj5*r20);
IkReal x15956=(cj5*sj5);
IkReal x15957=(cj3*r22);
IkReal x15958=(sj3*x15949);
CheckValue<IkReal> x15959=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x15951*x15956))+(((-1.0)*x15948*x15958))+((sj3*x15948*x15950))+x15958)),-1);
if(!x15959.valid){
continue;
}
CheckValue<IkReal> x15960 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15954))+((r20*sj5*x15957))+((cj5*r21*x15957))+((r22*x15952)))),IkReal((((cj3*x15949*x15956))+(((-2.0)*cj3*x15948*x15951))+((x15954*x15955))+((x15952*x15953))+(((-1.0)*x15952*x15955))+(((-1.0)*cj3*x15950*x15956))+(((-1.0)*x15953*x15954))+((cj3*x15951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15959.value)))+(x15960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15961=IKsin(j4);
IkReal x15962=IKcos(j4);
IkReal x15963=(cj3*r21);
IkReal x15964=(r21*sj5);
IkReal x15965=(r20*sj5);
IkReal x15966=(cj5*r20);
IkReal x15967=((1.0)*x15962);
IkReal x15968=((1.0)*x15961);
evalcond[0]=(((x15961*x15964))+(((-1.0)*x15966*x15968))+(((-1.0)*r22*x15967)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+((cj3*r22*x15961))+(((-1.0)*cj3*x15966*x15967))+((sj3*x15965))+((sj5*x15962*x15963)));
evalcond[2]=((((-1.0)*r22*sj3*x15968))+((cj5*x15963))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*sj3*x15964*x15967))+((sj3*x15962*x15966))+((cj3*x15965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15969=(cj5*sj4);
IkReal x15970=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15970))+(((-1.0)*r00*x15969)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15970))+((r10*x15969))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15970))+(((-1.0)*r00*x15969))))+IKsqr(((((-1.0)*r11*x15970))+((r10*x15969))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15970))+(((-1.0)*r00*x15969))), ((((-1.0)*r11*x15970))+((r10*x15969))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15971=IKcos(j0);
IkReal x15972=IKsin(j0);
IkReal x15973=(r02*sj4);
IkReal x15974=((0.1)*sj5);
IkReal x15975=(cj5*r11);
IkReal x15976=((1.0)*sj3);
IkReal x15977=(r12*sj4);
IkReal x15978=((1.0)*cj3);
IkReal x15979=(r11*sj5);
IkReal x15980=(cj3*cj4);
IkReal x15981=((1.0)*sj2);
IkReal x15982=(cj5*r01);
IkReal x15983=(r01*sj5);
IkReal x15984=(sj1*sj2);
IkReal x15985=(cj1*cj2);
IkReal x15986=(r00*sj5);
IkReal x15987=((1.0)*cj2);
IkReal x15988=(r10*sj5);
IkReal x15989=((1.0)*cj4);
IkReal x15990=(cj4*cj5*r00);
IkReal x15991=(cj1*x15971);
IkReal x15992=(cj4*cj5*r10);
IkReal x15993=((0.392)*x15972);
IkReal x15994=((1.0)*x15972);
IkReal x15995=(cj1*x15972);
IkReal x15996=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r10*x15996))+((sj4*x15979))+(((-1.0)*r12*x15989))+x15971);
evalcond[1]=(((sj4*x15983))+(((-1.0)*r02*x15989))+(((-1.0)*x15994))+(((-1.0)*r00*x15996)));
evalcond[2]=((((-0.392)*x15971*x15984))+(((0.425)*x15991))+(((0.392)*x15971*x15985))+(((-1.0)*r00*x15974))+(((-1.0)*px))+(((-0.134)*x15972))+(((-0.1)*x15982)));
evalcond[3]=((((-1.0)*x15984*x15993))+(((0.425)*x15995))+((x15985*x15993))+(((-1.0)*py))+(((-0.1)*x15975))+(((0.134)*x15971))+(((-1.0)*r10*x15974)));
evalcond[4]=(((sj3*x15986))+((sj3*x15982))+(((-1.0)*x15978*x15990))+((x15980*x15983))+((x15971*x15984))+((cj3*x15973))+(((-1.0)*x15971*x15985)));
evalcond[5]=((((-1.0)*x15985*x15994))+((x15972*x15984))+((sj3*x15988))+(((-1.0)*x15978*x15992))+((sj3*x15975))+((x15979*x15980))+((cj3*x15977)));
evalcond[6]=(((cj3*x15986))+((cj3*x15982))+(((-1.0)*x15973*x15976))+(((-1.0)*cj4*x15976*x15983))+((sj3*x15990))+(((-1.0)*x15981*x15991))+(((-1.0)*sj1*x15971*x15987)));
evalcond[7]=(((cj3*x15988))+(((-1.0)*cj4*x15976*x15979))+(((-1.0)*x15976*x15977))+((sj3*x15992))+(((-1.0)*x15981*x15995))+((cj3*x15975))+(((-1.0)*sj1*x15972*x15987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5e_d435_millibar_combined_r2f85 (d4529aad7fa5ac97c6b35f19b43e4ccf)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
